/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.BatchStrategy;
import org.openapitools.client.model.DescribeTransformJobResponseTransformOutput;
import org.openapitools.client.model.TransformJobDefinitionTransformInput;
import org.openapitools.client.model.TransformJobDefinitionTransformResources;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the input needed to run a transform job using the inference specification specified in the algorithm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransformJobDefinition {
  public static final String SERIALIZED_NAME_MAX_CONCURRENT_TRANSFORMS = "MaxConcurrentTransforms";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_TRANSFORMS)
  private Integer maxConcurrentTransforms;

  public static final String SERIALIZED_NAME_MAX_PAYLOAD_IN_M_B = "MaxPayloadInMB";
  @SerializedName(SERIALIZED_NAME_MAX_PAYLOAD_IN_M_B)
  private Integer maxPayloadInMB;

  public static final String SERIALIZED_NAME_BATCH_STRATEGY = "BatchStrategy";
  @SerializedName(SERIALIZED_NAME_BATCH_STRATEGY)
  private BatchStrategy batchStrategy;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "Environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Map environment;

  public static final String SERIALIZED_NAME_TRANSFORM_INPUT = "TransformInput";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_INPUT)
  private TransformJobDefinitionTransformInput transformInput;

  public static final String SERIALIZED_NAME_TRANSFORM_OUTPUT = "TransformOutput";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_OUTPUT)
  private DescribeTransformJobResponseTransformOutput transformOutput;

  public static final String SERIALIZED_NAME_TRANSFORM_RESOURCES = "TransformResources";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_RESOURCES)
  private TransformJobDefinitionTransformResources transformResources;

  public TransformJobDefinition() {
  }

  public TransformJobDefinition maxConcurrentTransforms(Integer maxConcurrentTransforms) {
    this.maxConcurrentTransforms = maxConcurrentTransforms;
    return this;
  }

  /**
   * Get maxConcurrentTransforms
   * @return maxConcurrentTransforms
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentTransforms() {
    return maxConcurrentTransforms;
  }

  public void setMaxConcurrentTransforms(Integer maxConcurrentTransforms) {
    this.maxConcurrentTransforms = maxConcurrentTransforms;
  }


  public TransformJobDefinition maxPayloadInMB(Integer maxPayloadInMB) {
    this.maxPayloadInMB = maxPayloadInMB;
    return this;
  }

  /**
   * Get maxPayloadInMB
   * @return maxPayloadInMB
   */
  @javax.annotation.Nullable
  public Integer getMaxPayloadInMB() {
    return maxPayloadInMB;
  }

  public void setMaxPayloadInMB(Integer maxPayloadInMB) {
    this.maxPayloadInMB = maxPayloadInMB;
  }


  public TransformJobDefinition batchStrategy(BatchStrategy batchStrategy) {
    this.batchStrategy = batchStrategy;
    return this;
  }

  /**
   * Get batchStrategy
   * @return batchStrategy
   */
  @javax.annotation.Nullable
  public BatchStrategy getBatchStrategy() {
    return batchStrategy;
  }

  public void setBatchStrategy(BatchStrategy batchStrategy) {
    this.batchStrategy = batchStrategy;
  }


  public TransformJobDefinition environment(Map environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Map getEnvironment() {
    return environment;
  }

  public void setEnvironment(Map environment) {
    this.environment = environment;
  }


  public TransformJobDefinition transformInput(TransformJobDefinitionTransformInput transformInput) {
    this.transformInput = transformInput;
    return this;
  }

  /**
   * Get transformInput
   * @return transformInput
   */
  @javax.annotation.Nonnull
  public TransformJobDefinitionTransformInput getTransformInput() {
    return transformInput;
  }

  public void setTransformInput(TransformJobDefinitionTransformInput transformInput) {
    this.transformInput = transformInput;
  }


  public TransformJobDefinition transformOutput(DescribeTransformJobResponseTransformOutput transformOutput) {
    this.transformOutput = transformOutput;
    return this;
  }

  /**
   * Get transformOutput
   * @return transformOutput
   */
  @javax.annotation.Nonnull
  public DescribeTransformJobResponseTransformOutput getTransformOutput() {
    return transformOutput;
  }

  public void setTransformOutput(DescribeTransformJobResponseTransformOutput transformOutput) {
    this.transformOutput = transformOutput;
  }


  public TransformJobDefinition transformResources(TransformJobDefinitionTransformResources transformResources) {
    this.transformResources = transformResources;
    return this;
  }

  /**
   * Get transformResources
   * @return transformResources
   */
  @javax.annotation.Nonnull
  public TransformJobDefinitionTransformResources getTransformResources() {
    return transformResources;
  }

  public void setTransformResources(TransformJobDefinitionTransformResources transformResources) {
    this.transformResources = transformResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformJobDefinition transformJobDefinition = (TransformJobDefinition) o;
    return Objects.equals(this.maxConcurrentTransforms, transformJobDefinition.maxConcurrentTransforms) &&
        Objects.equals(this.maxPayloadInMB, transformJobDefinition.maxPayloadInMB) &&
        Objects.equals(this.batchStrategy, transformJobDefinition.batchStrategy) &&
        Objects.equals(this.environment, transformJobDefinition.environment) &&
        Objects.equals(this.transformInput, transformJobDefinition.transformInput) &&
        Objects.equals(this.transformOutput, transformJobDefinition.transformOutput) &&
        Objects.equals(this.transformResources, transformJobDefinition.transformResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxConcurrentTransforms, maxPayloadInMB, batchStrategy, environment, transformInput, transformOutput, transformResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformJobDefinition {\n");
    sb.append("    maxConcurrentTransforms: ").append(toIndentedString(maxConcurrentTransforms)).append("\n");
    sb.append("    maxPayloadInMB: ").append(toIndentedString(maxPayloadInMB)).append("\n");
    sb.append("    batchStrategy: ").append(toIndentedString(batchStrategy)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    transformInput: ").append(toIndentedString(transformInput)).append("\n");
    sb.append("    transformOutput: ").append(toIndentedString(transformOutput)).append("\n");
    sb.append("    transformResources: ").append(toIndentedString(transformResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxConcurrentTransforms");
    openapiFields.add("MaxPayloadInMB");
    openapiFields.add("BatchStrategy");
    openapiFields.add("Environment");
    openapiFields.add("TransformInput");
    openapiFields.add("TransformOutput");
    openapiFields.add("TransformResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TransformInput");
    openapiRequiredFields.add("TransformOutput");
    openapiRequiredFields.add("TransformResources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransformJobDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransformJobDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransformJobDefinition is not found in the empty JSON string", TransformJobDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransformJobDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransformJobDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransformJobDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MaxConcurrentTransforms`
      if (jsonObj.get("MaxConcurrentTransforms") != null && !jsonObj.get("MaxConcurrentTransforms").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxConcurrentTransforms"));
      }
      // validate the optional field `MaxPayloadInMB`
      if (jsonObj.get("MaxPayloadInMB") != null && !jsonObj.get("MaxPayloadInMB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxPayloadInMB"));
      }
      // validate the optional field `BatchStrategy`
      if (jsonObj.get("BatchStrategy") != null && !jsonObj.get("BatchStrategy").isJsonNull()) {
        BatchStrategy.validateJsonElement(jsonObj.get("BatchStrategy"));
      }
      // validate the optional field `Environment`
      if (jsonObj.get("Environment") != null && !jsonObj.get("Environment").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Environment"));
      }
      // validate the required field `TransformInput`
      TransformJobDefinitionTransformInput.validateJsonElement(jsonObj.get("TransformInput"));
      // validate the required field `TransformOutput`
      DescribeTransformJobResponseTransformOutput.validateJsonElement(jsonObj.get("TransformOutput"));
      // validate the required field `TransformResources`
      TransformJobDefinitionTransformResources.validateJsonElement(jsonObj.get("TransformResources"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransformJobDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransformJobDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransformJobDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransformJobDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TransformJobDefinition>() {
           @Override
           public void write(JsonWriter out, TransformJobDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransformJobDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransformJobDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransformJobDefinition
   * @throws IOException if the JSON string is invalid with respect to TransformJobDefinition
   */
  public static TransformJobDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransformJobDefinition.class);
  }

  /**
   * Convert an instance of TransformJobDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

