/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceSubsetType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the configurations of selected devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceSelectionConfig {
  public static final String SERIALIZED_NAME_DEVICE_SUBSET_TYPE = "DeviceSubsetType";
  @SerializedName(SERIALIZED_NAME_DEVICE_SUBSET_TYPE)
  private DeviceSubsetType deviceSubsetType;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Integer percentage;

  public static final String SERIALIZED_NAME_DEVICE_NAMES = "DeviceNames";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAMES)
  private List deviceNames;

  public static final String SERIALIZED_NAME_DEVICE_NAME_CONTAINS = "DeviceNameContains";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME_CONTAINS)
  private String deviceNameContains;

  public DeviceSelectionConfig() {
  }

  public DeviceSelectionConfig deviceSubsetType(DeviceSubsetType deviceSubsetType) {
    this.deviceSubsetType = deviceSubsetType;
    return this;
  }

  /**
   * Get deviceSubsetType
   * @return deviceSubsetType
   */
  @javax.annotation.Nonnull
  public DeviceSubsetType getDeviceSubsetType() {
    return deviceSubsetType;
  }

  public void setDeviceSubsetType(DeviceSubsetType deviceSubsetType) {
    this.deviceSubsetType = deviceSubsetType;
  }


  public DeviceSelectionConfig percentage(Integer percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public Integer getPercentage() {
    return percentage;
  }

  public void setPercentage(Integer percentage) {
    this.percentage = percentage;
  }


  public DeviceSelectionConfig deviceNames(List deviceNames) {
    this.deviceNames = deviceNames;
    return this;
  }

  /**
   * Get deviceNames
   * @return deviceNames
   */
  @javax.annotation.Nullable
  public List getDeviceNames() {
    return deviceNames;
  }

  public void setDeviceNames(List deviceNames) {
    this.deviceNames = deviceNames;
  }


  public DeviceSelectionConfig deviceNameContains(String deviceNameContains) {
    this.deviceNameContains = deviceNameContains;
    return this;
  }

  /**
   * Get deviceNameContains
   * @return deviceNameContains
   */
  @javax.annotation.Nullable
  public String getDeviceNameContains() {
    return deviceNameContains;
  }

  public void setDeviceNameContains(String deviceNameContains) {
    this.deviceNameContains = deviceNameContains;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceSelectionConfig deviceSelectionConfig = (DeviceSelectionConfig) o;
    return Objects.equals(this.deviceSubsetType, deviceSelectionConfig.deviceSubsetType) &&
        Objects.equals(this.percentage, deviceSelectionConfig.percentage) &&
        Objects.equals(this.deviceNames, deviceSelectionConfig.deviceNames) &&
        Objects.equals(this.deviceNameContains, deviceSelectionConfig.deviceNameContains);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceSubsetType, percentage, deviceNames, deviceNameContains);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceSelectionConfig {\n");
    sb.append("    deviceSubsetType: ").append(toIndentedString(deviceSubsetType)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    deviceNames: ").append(toIndentedString(deviceNames)).append("\n");
    sb.append("    deviceNameContains: ").append(toIndentedString(deviceNameContains)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceSubsetType");
    openapiFields.add("Percentage");
    openapiFields.add("DeviceNames");
    openapiFields.add("DeviceNameContains");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceSubsetType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceSelectionConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceSelectionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceSelectionConfig is not found in the empty JSON string", DeviceSelectionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceSelectionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceSelectionConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceSelectionConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DeviceSubsetType`
      DeviceSubsetType.validateJsonElement(jsonObj.get("DeviceSubsetType"));
      // validate the optional field `Percentage`
      if (jsonObj.get("Percentage") != null && !jsonObj.get("Percentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Percentage"));
      }
      // validate the optional field `DeviceNames`
      if (jsonObj.get("DeviceNames") != null && !jsonObj.get("DeviceNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeviceNames"));
      }
      // validate the optional field `DeviceNameContains`
      if (jsonObj.get("DeviceNameContains") != null && !jsonObj.get("DeviceNameContains").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceNameContains"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceSelectionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceSelectionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceSelectionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceSelectionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceSelectionConfig>() {
           @Override
           public void write(JsonWriter out, DeviceSelectionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceSelectionConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceSelectionConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceSelectionConfig
   * @throws IOException if the JSON string is invalid with respect to DeviceSelectionConfig
   */
  public static DeviceSelectionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceSelectionConfig.class);
  }

  /**
   * Convert an instance of DeviceSelectionConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

