/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The metrics of recommendations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationMetrics {
  public static final String SERIALIZED_NAME_COST_PER_HOUR = "CostPerHour";
  @SerializedName(SERIALIZED_NAME_COST_PER_HOUR)
  private Float costPerHour;

  public static final String SERIALIZED_NAME_COST_PER_INFERENCE = "CostPerInference";
  @SerializedName(SERIALIZED_NAME_COST_PER_INFERENCE)
  private Float costPerInference;

  public static final String SERIALIZED_NAME_MAX_INVOCATIONS = "MaxInvocations";
  @SerializedName(SERIALIZED_NAME_MAX_INVOCATIONS)
  private Integer maxInvocations;

  public static final String SERIALIZED_NAME_MODEL_LATENCY = "ModelLatency";
  @SerializedName(SERIALIZED_NAME_MODEL_LATENCY)
  private Integer modelLatency;

  public static final String SERIALIZED_NAME_CPU_UTILIZATION = "CpuUtilization";
  @SerializedName(SERIALIZED_NAME_CPU_UTILIZATION)
  private Float cpuUtilization;

  public static final String SERIALIZED_NAME_MEMORY_UTILIZATION = "MemoryUtilization";
  @SerializedName(SERIALIZED_NAME_MEMORY_UTILIZATION)
  private Float memoryUtilization;

  public static final String SERIALIZED_NAME_MODEL_SETUP_TIME = "ModelSetupTime";
  @SerializedName(SERIALIZED_NAME_MODEL_SETUP_TIME)
  private Integer modelSetupTime;

  public RecommendationMetrics() {
  }

  public RecommendationMetrics costPerHour(Float costPerHour) {
    this.costPerHour = costPerHour;
    return this;
  }

  /**
   * Get costPerHour
   * @return costPerHour
   */
  @javax.annotation.Nonnull
  public Float getCostPerHour() {
    return costPerHour;
  }

  public void setCostPerHour(Float costPerHour) {
    this.costPerHour = costPerHour;
  }


  public RecommendationMetrics costPerInference(Float costPerInference) {
    this.costPerInference = costPerInference;
    return this;
  }

  /**
   * Get costPerInference
   * @return costPerInference
   */
  @javax.annotation.Nonnull
  public Float getCostPerInference() {
    return costPerInference;
  }

  public void setCostPerInference(Float costPerInference) {
    this.costPerInference = costPerInference;
  }


  public RecommendationMetrics maxInvocations(Integer maxInvocations) {
    this.maxInvocations = maxInvocations;
    return this;
  }

  /**
   * Get maxInvocations
   * @return maxInvocations
   */
  @javax.annotation.Nonnull
  public Integer getMaxInvocations() {
    return maxInvocations;
  }

  public void setMaxInvocations(Integer maxInvocations) {
    this.maxInvocations = maxInvocations;
  }


  public RecommendationMetrics modelLatency(Integer modelLatency) {
    this.modelLatency = modelLatency;
    return this;
  }

  /**
   * Get modelLatency
   * @return modelLatency
   */
  @javax.annotation.Nonnull
  public Integer getModelLatency() {
    return modelLatency;
  }

  public void setModelLatency(Integer modelLatency) {
    this.modelLatency = modelLatency;
  }


  public RecommendationMetrics cpuUtilization(Float cpuUtilization) {
    this.cpuUtilization = cpuUtilization;
    return this;
  }

  /**
   * Get cpuUtilization
   * @return cpuUtilization
   */
  @javax.annotation.Nullable
  public Float getCpuUtilization() {
    return cpuUtilization;
  }

  public void setCpuUtilization(Float cpuUtilization) {
    this.cpuUtilization = cpuUtilization;
  }


  public RecommendationMetrics memoryUtilization(Float memoryUtilization) {
    this.memoryUtilization = memoryUtilization;
    return this;
  }

  /**
   * Get memoryUtilization
   * @return memoryUtilization
   */
  @javax.annotation.Nullable
  public Float getMemoryUtilization() {
    return memoryUtilization;
  }

  public void setMemoryUtilization(Float memoryUtilization) {
    this.memoryUtilization = memoryUtilization;
  }


  public RecommendationMetrics modelSetupTime(Integer modelSetupTime) {
    this.modelSetupTime = modelSetupTime;
    return this;
  }

  /**
   * Get modelSetupTime
   * @return modelSetupTime
   */
  @javax.annotation.Nullable
  public Integer getModelSetupTime() {
    return modelSetupTime;
  }

  public void setModelSetupTime(Integer modelSetupTime) {
    this.modelSetupTime = modelSetupTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationMetrics recommendationMetrics = (RecommendationMetrics) o;
    return Objects.equals(this.costPerHour, recommendationMetrics.costPerHour) &&
        Objects.equals(this.costPerInference, recommendationMetrics.costPerInference) &&
        Objects.equals(this.maxInvocations, recommendationMetrics.maxInvocations) &&
        Objects.equals(this.modelLatency, recommendationMetrics.modelLatency) &&
        Objects.equals(this.cpuUtilization, recommendationMetrics.cpuUtilization) &&
        Objects.equals(this.memoryUtilization, recommendationMetrics.memoryUtilization) &&
        Objects.equals(this.modelSetupTime, recommendationMetrics.modelSetupTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costPerHour, costPerInference, maxInvocations, modelLatency, cpuUtilization, memoryUtilization, modelSetupTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationMetrics {\n");
    sb.append("    costPerHour: ").append(toIndentedString(costPerHour)).append("\n");
    sb.append("    costPerInference: ").append(toIndentedString(costPerInference)).append("\n");
    sb.append("    maxInvocations: ").append(toIndentedString(maxInvocations)).append("\n");
    sb.append("    modelLatency: ").append(toIndentedString(modelLatency)).append("\n");
    sb.append("    cpuUtilization: ").append(toIndentedString(cpuUtilization)).append("\n");
    sb.append("    memoryUtilization: ").append(toIndentedString(memoryUtilization)).append("\n");
    sb.append("    modelSetupTime: ").append(toIndentedString(modelSetupTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CostPerHour");
    openapiFields.add("CostPerInference");
    openapiFields.add("MaxInvocations");
    openapiFields.add("ModelLatency");
    openapiFields.add("CpuUtilization");
    openapiFields.add("MemoryUtilization");
    openapiFields.add("ModelSetupTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CostPerHour");
    openapiRequiredFields.add("CostPerInference");
    openapiRequiredFields.add("MaxInvocations");
    openapiRequiredFields.add("ModelLatency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationMetrics is not found in the empty JSON string", RecommendationMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecommendationMetrics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CostPerHour`
      Float.validateJsonElement(jsonObj.get("CostPerHour"));
      // validate the required field `CostPerInference`
      Float.validateJsonElement(jsonObj.get("CostPerInference"));
      // validate the required field `MaxInvocations`
      Integer.validateJsonElement(jsonObj.get("MaxInvocations"));
      // validate the required field `ModelLatency`
      Integer.validateJsonElement(jsonObj.get("ModelLatency"));
      // validate the optional field `CpuUtilization`
      if (jsonObj.get("CpuUtilization") != null && !jsonObj.get("CpuUtilization").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("CpuUtilization"));
      }
      // validate the optional field `MemoryUtilization`
      if (jsonObj.get("MemoryUtilization") != null && !jsonObj.get("MemoryUtilization").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("MemoryUtilization"));
      }
      // validate the optional field `ModelSetupTime`
      if (jsonObj.get("ModelSetupTime") != null && !jsonObj.get("ModelSetupTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ModelSetupTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationMetrics>() {
           @Override
           public void write(JsonWriter out, RecommendationMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationMetrics
   * @throws IOException if the JSON string is invalid with respect to RecommendationMetrics
   */
  public static RecommendationMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationMetrics.class);
  }

  /**
   * Convert an instance of RecommendationMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

