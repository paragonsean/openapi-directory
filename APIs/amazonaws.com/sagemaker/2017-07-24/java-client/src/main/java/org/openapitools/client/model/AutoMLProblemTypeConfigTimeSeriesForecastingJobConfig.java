/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoMLJobCompletionCriteria;
import org.openapitools.client.model.TimeSeriesForecastingJobConfigTimeSeriesConfig;
import org.openapitools.client.model.TimeSeriesForecastingJobConfigTransformations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig {
  public static final String SERIALIZED_NAME_FEATURE_SPECIFICATION_S3_URI = "FeatureSpecificationS3Uri";
  @SerializedName(SERIALIZED_NAME_FEATURE_SPECIFICATION_S3_URI)
  private String featureSpecificationS3Uri;

  public static final String SERIALIZED_NAME_COMPLETION_CRITERIA = "CompletionCriteria";
  @SerializedName(SERIALIZED_NAME_COMPLETION_CRITERIA)
  private AutoMLJobCompletionCriteria completionCriteria;

  public static final String SERIALIZED_NAME_FORECAST_FREQUENCY = "ForecastFrequency";
  @SerializedName(SERIALIZED_NAME_FORECAST_FREQUENCY)
  private String forecastFrequency;

  public static final String SERIALIZED_NAME_FORECAST_HORIZON = "ForecastHorizon";
  @SerializedName(SERIALIZED_NAME_FORECAST_HORIZON)
  private Integer forecastHorizon;

  public static final String SERIALIZED_NAME_FORECAST_QUANTILES = "ForecastQuantiles";
  @SerializedName(SERIALIZED_NAME_FORECAST_QUANTILES)
  private List forecastQuantiles;

  public static final String SERIALIZED_NAME_TRANSFORMATIONS = "Transformations";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATIONS)
  private TimeSeriesForecastingJobConfigTransformations transformations;

  public static final String SERIALIZED_NAME_TIME_SERIES_CONFIG = "TimeSeriesConfig";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_CONFIG)
  private TimeSeriesForecastingJobConfigTimeSeriesConfig timeSeriesConfig;

  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig() {
  }

  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig featureSpecificationS3Uri(String featureSpecificationS3Uri) {
    this.featureSpecificationS3Uri = featureSpecificationS3Uri;
    return this;
  }

  /**
   * Get featureSpecificationS3Uri
   * @return featureSpecificationS3Uri
   */
  @javax.annotation.Nullable
  public String getFeatureSpecificationS3Uri() {
    return featureSpecificationS3Uri;
  }

  public void setFeatureSpecificationS3Uri(String featureSpecificationS3Uri) {
    this.featureSpecificationS3Uri = featureSpecificationS3Uri;
  }


  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig completionCriteria(AutoMLJobCompletionCriteria completionCriteria) {
    this.completionCriteria = completionCriteria;
    return this;
  }

  /**
   * Get completionCriteria
   * @return completionCriteria
   */
  @javax.annotation.Nullable
  public AutoMLJobCompletionCriteria getCompletionCriteria() {
    return completionCriteria;
  }

  public void setCompletionCriteria(AutoMLJobCompletionCriteria completionCriteria) {
    this.completionCriteria = completionCriteria;
  }


  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig forecastFrequency(String forecastFrequency) {
    this.forecastFrequency = forecastFrequency;
    return this;
  }

  /**
   * Get forecastFrequency
   * @return forecastFrequency
   */
  @javax.annotation.Nonnull
  public String getForecastFrequency() {
    return forecastFrequency;
  }

  public void setForecastFrequency(String forecastFrequency) {
    this.forecastFrequency = forecastFrequency;
  }


  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig forecastHorizon(Integer forecastHorizon) {
    this.forecastHorizon = forecastHorizon;
    return this;
  }

  /**
   * Get forecastHorizon
   * @return forecastHorizon
   */
  @javax.annotation.Nonnull
  public Integer getForecastHorizon() {
    return forecastHorizon;
  }

  public void setForecastHorizon(Integer forecastHorizon) {
    this.forecastHorizon = forecastHorizon;
  }


  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig forecastQuantiles(List forecastQuantiles) {
    this.forecastQuantiles = forecastQuantiles;
    return this;
  }

  /**
   * Get forecastQuantiles
   * @return forecastQuantiles
   */
  @javax.annotation.Nullable
  public List getForecastQuantiles() {
    return forecastQuantiles;
  }

  public void setForecastQuantiles(List forecastQuantiles) {
    this.forecastQuantiles = forecastQuantiles;
  }


  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig transformations(TimeSeriesForecastingJobConfigTransformations transformations) {
    this.transformations = transformations;
    return this;
  }

  /**
   * Get transformations
   * @return transformations
   */
  @javax.annotation.Nullable
  public TimeSeriesForecastingJobConfigTransformations getTransformations() {
    return transformations;
  }

  public void setTransformations(TimeSeriesForecastingJobConfigTransformations transformations) {
    this.transformations = transformations;
  }


  public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig timeSeriesConfig(TimeSeriesForecastingJobConfigTimeSeriesConfig timeSeriesConfig) {
    this.timeSeriesConfig = timeSeriesConfig;
    return this;
  }

  /**
   * Get timeSeriesConfig
   * @return timeSeriesConfig
   */
  @javax.annotation.Nonnull
  public TimeSeriesForecastingJobConfigTimeSeriesConfig getTimeSeriesConfig() {
    return timeSeriesConfig;
  }

  public void setTimeSeriesConfig(TimeSeriesForecastingJobConfigTimeSeriesConfig timeSeriesConfig) {
    this.timeSeriesConfig = timeSeriesConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig autoMLProblemTypeConfigTimeSeriesForecastingJobConfig = (AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig) o;
    return Objects.equals(this.featureSpecificationS3Uri, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.featureSpecificationS3Uri) &&
        Objects.equals(this.completionCriteria, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.completionCriteria) &&
        Objects.equals(this.forecastFrequency, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.forecastFrequency) &&
        Objects.equals(this.forecastHorizon, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.forecastHorizon) &&
        Objects.equals(this.forecastQuantiles, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.forecastQuantiles) &&
        Objects.equals(this.transformations, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.transformations) &&
        Objects.equals(this.timeSeriesConfig, autoMLProblemTypeConfigTimeSeriesForecastingJobConfig.timeSeriesConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featureSpecificationS3Uri, completionCriteria, forecastFrequency, forecastHorizon, forecastQuantiles, transformations, timeSeriesConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig {\n");
    sb.append("    featureSpecificationS3Uri: ").append(toIndentedString(featureSpecificationS3Uri)).append("\n");
    sb.append("    completionCriteria: ").append(toIndentedString(completionCriteria)).append("\n");
    sb.append("    forecastFrequency: ").append(toIndentedString(forecastFrequency)).append("\n");
    sb.append("    forecastHorizon: ").append(toIndentedString(forecastHorizon)).append("\n");
    sb.append("    forecastQuantiles: ").append(toIndentedString(forecastQuantiles)).append("\n");
    sb.append("    transformations: ").append(toIndentedString(transformations)).append("\n");
    sb.append("    timeSeriesConfig: ").append(toIndentedString(timeSeriesConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeatureSpecificationS3Uri");
    openapiFields.add("CompletionCriteria");
    openapiFields.add("ForecastFrequency");
    openapiFields.add("ForecastHorizon");
    openapiFields.add("ForecastQuantiles");
    openapiFields.add("Transformations");
    openapiFields.add("TimeSeriesConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ForecastFrequency");
    openapiRequiredFields.add("ForecastHorizon");
    openapiRequiredFields.add("TimeSeriesConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig is not found in the empty JSON string", AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FeatureSpecificationS3Uri`
      if (jsonObj.get("FeatureSpecificationS3Uri") != null && !jsonObj.get("FeatureSpecificationS3Uri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeatureSpecificationS3Uri"));
      }
      // validate the optional field `CompletionCriteria`
      if (jsonObj.get("CompletionCriteria") != null && !jsonObj.get("CompletionCriteria").isJsonNull()) {
        AutoMLJobCompletionCriteria.validateJsonElement(jsonObj.get("CompletionCriteria"));
      }
      // validate the required field `ForecastFrequency`
      String.validateJsonElement(jsonObj.get("ForecastFrequency"));
      // validate the required field `ForecastHorizon`
      Integer.validateJsonElement(jsonObj.get("ForecastHorizon"));
      // validate the optional field `ForecastQuantiles`
      if (jsonObj.get("ForecastQuantiles") != null && !jsonObj.get("ForecastQuantiles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ForecastQuantiles"));
      }
      // validate the optional field `Transformations`
      if (jsonObj.get("Transformations") != null && !jsonObj.get("Transformations").isJsonNull()) {
        TimeSeriesForecastingJobConfigTransformations.validateJsonElement(jsonObj.get("Transformations"));
      }
      // validate the required field `TimeSeriesConfig`
      TimeSeriesForecastingJobConfigTimeSeriesConfig.validateJsonElement(jsonObj.get("TimeSeriesConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig>() {
           @Override
           public void write(JsonWriter out, AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig
   * @throws IOException if the JSON string is invalid with respect to AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig
   */
  public static AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig.class);
  }

  /**
   * Convert an instance of AutoMLProblemTypeConfigTimeSeriesForecastingJobConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

