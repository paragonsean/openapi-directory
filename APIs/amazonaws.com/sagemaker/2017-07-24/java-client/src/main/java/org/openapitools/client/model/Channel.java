/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelDataSource;
import org.openapitools.client.model.ChannelShuffleConfig;
import org.openapitools.client.model.CompressionType;
import org.openapitools.client.model.RecordWrapper;
import org.openapitools.client.model.TrainingInputMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A channel is a named input source that training algorithms can consume. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private ChannelDataSource dataSource;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_COMPRESSION_TYPE = "CompressionType";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_TYPE)
  private CompressionType compressionType;

  public static final String SERIALIZED_NAME_RECORD_WRAPPER_TYPE = "RecordWrapperType";
  @SerializedName(SERIALIZED_NAME_RECORD_WRAPPER_TYPE)
  private RecordWrapper recordWrapperType;

  public static final String SERIALIZED_NAME_INPUT_MODE = "InputMode";
  @SerializedName(SERIALIZED_NAME_INPUT_MODE)
  private TrainingInputMode inputMode;

  public static final String SERIALIZED_NAME_SHUFFLE_CONFIG = "ShuffleConfig";
  @SerializedName(SERIALIZED_NAME_SHUFFLE_CONFIG)
  private ChannelShuffleConfig shuffleConfig;

  public Channel() {
  }

  public Channel channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Get channelName
   * @return channelName
   */
  @javax.annotation.Nonnull
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public Channel dataSource(ChannelDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public ChannelDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(ChannelDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public Channel contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public Channel compressionType(CompressionType compressionType) {
    this.compressionType = compressionType;
    return this;
  }

  /**
   * Get compressionType
   * @return compressionType
   */
  @javax.annotation.Nullable
  public CompressionType getCompressionType() {
    return compressionType;
  }

  public void setCompressionType(CompressionType compressionType) {
    this.compressionType = compressionType;
  }


  public Channel recordWrapperType(RecordWrapper recordWrapperType) {
    this.recordWrapperType = recordWrapperType;
    return this;
  }

  /**
   * Get recordWrapperType
   * @return recordWrapperType
   */
  @javax.annotation.Nullable
  public RecordWrapper getRecordWrapperType() {
    return recordWrapperType;
  }

  public void setRecordWrapperType(RecordWrapper recordWrapperType) {
    this.recordWrapperType = recordWrapperType;
  }


  public Channel inputMode(TrainingInputMode inputMode) {
    this.inputMode = inputMode;
    return this;
  }

  /**
   * Get inputMode
   * @return inputMode
   */
  @javax.annotation.Nullable
  public TrainingInputMode getInputMode() {
    return inputMode;
  }

  public void setInputMode(TrainingInputMode inputMode) {
    this.inputMode = inputMode;
  }


  public Channel shuffleConfig(ChannelShuffleConfig shuffleConfig) {
    this.shuffleConfig = shuffleConfig;
    return this;
  }

  /**
   * Get shuffleConfig
   * @return shuffleConfig
   */
  @javax.annotation.Nullable
  public ChannelShuffleConfig getShuffleConfig() {
    return shuffleConfig;
  }

  public void setShuffleConfig(ChannelShuffleConfig shuffleConfig) {
    this.shuffleConfig = shuffleConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.channelName, channel.channelName) &&
        Objects.equals(this.dataSource, channel.dataSource) &&
        Objects.equals(this.contentType, channel.contentType) &&
        Objects.equals(this.compressionType, channel.compressionType) &&
        Objects.equals(this.recordWrapperType, channel.recordWrapperType) &&
        Objects.equals(this.inputMode, channel.inputMode) &&
        Objects.equals(this.shuffleConfig, channel.shuffleConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelName, dataSource, contentType, compressionType, recordWrapperType, inputMode, shuffleConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    compressionType: ").append(toIndentedString(compressionType)).append("\n");
    sb.append("    recordWrapperType: ").append(toIndentedString(recordWrapperType)).append("\n");
    sb.append("    inputMode: ").append(toIndentedString(inputMode)).append("\n");
    sb.append("    shuffleConfig: ").append(toIndentedString(shuffleConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelName");
    openapiFields.add("DataSource");
    openapiFields.add("ContentType");
    openapiFields.add("CompressionType");
    openapiFields.add("RecordWrapperType");
    openapiFields.add("InputMode");
    openapiFields.add("ShuffleConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ChannelName");
    openapiRequiredFields.add("DataSource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Channel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Channel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Channel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ChannelName`
      String.validateJsonElement(jsonObj.get("ChannelName"));
      // validate the required field `DataSource`
      ChannelDataSource.validateJsonElement(jsonObj.get("DataSource"));
      // validate the optional field `ContentType`
      if (jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentType"));
      }
      // validate the optional field `CompressionType`
      if (jsonObj.get("CompressionType") != null && !jsonObj.get("CompressionType").isJsonNull()) {
        CompressionType.validateJsonElement(jsonObj.get("CompressionType"));
      }
      // validate the optional field `RecordWrapperType`
      if (jsonObj.get("RecordWrapperType") != null && !jsonObj.get("RecordWrapperType").isJsonNull()) {
        RecordWrapper.validateJsonElement(jsonObj.get("RecordWrapperType"));
      }
      // validate the optional field `InputMode`
      if (jsonObj.get("InputMode") != null && !jsonObj.get("InputMode").isJsonNull()) {
        TrainingInputMode.validateJsonElement(jsonObj.get("InputMode"));
      }
      // validate the optional field `ShuffleConfig`
      if (jsonObj.get("ShuffleConfig") != null && !jsonObj.get("ShuffleConfig").isJsonNull()) {
        ChannelShuffleConfig.validateJsonElement(jsonObj.get("ShuffleConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

