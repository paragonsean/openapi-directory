/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The inference configuration parameter for the model container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClarifyInferenceConfig {
  public static final String SERIALIZED_NAME_FEATURES_ATTRIBUTE = "FeaturesAttribute";
  @SerializedName(SERIALIZED_NAME_FEATURES_ATTRIBUTE)
  private String featuresAttribute;

  public static final String SERIALIZED_NAME_CONTENT_TEMPLATE = "ContentTemplate";
  @SerializedName(SERIALIZED_NAME_CONTENT_TEMPLATE)
  private String contentTemplate;

  public static final String SERIALIZED_NAME_MAX_RECORD_COUNT = "MaxRecordCount";
  @SerializedName(SERIALIZED_NAME_MAX_RECORD_COUNT)
  private Integer maxRecordCount;

  public static final String SERIALIZED_NAME_MAX_PAYLOAD_IN_M_B = "MaxPayloadInMB";
  @SerializedName(SERIALIZED_NAME_MAX_PAYLOAD_IN_M_B)
  private Integer maxPayloadInMB;

  public static final String SERIALIZED_NAME_PROBABILITY_INDEX = "ProbabilityIndex";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_INDEX)
  private Integer probabilityIndex;

  public static final String SERIALIZED_NAME_LABEL_INDEX = "LabelIndex";
  @SerializedName(SERIALIZED_NAME_LABEL_INDEX)
  private Integer labelIndex;

  public static final String SERIALIZED_NAME_PROBABILITY_ATTRIBUTE = "ProbabilityAttribute";
  @SerializedName(SERIALIZED_NAME_PROBABILITY_ATTRIBUTE)
  private String probabilityAttribute;

  public static final String SERIALIZED_NAME_LABEL_ATTRIBUTE = "LabelAttribute";
  @SerializedName(SERIALIZED_NAME_LABEL_ATTRIBUTE)
  private String labelAttribute;

  public static final String SERIALIZED_NAME_LABEL_HEADERS = "LabelHeaders";
  @SerializedName(SERIALIZED_NAME_LABEL_HEADERS)
  private List labelHeaders;

  public static final String SERIALIZED_NAME_FEATURE_HEADERS = "FeatureHeaders";
  @SerializedName(SERIALIZED_NAME_FEATURE_HEADERS)
  private List featureHeaders;

  public static final String SERIALIZED_NAME_FEATURE_TYPES = "FeatureTypes";
  @SerializedName(SERIALIZED_NAME_FEATURE_TYPES)
  private List featureTypes;

  public ClarifyInferenceConfig() {
  }

  public ClarifyInferenceConfig featuresAttribute(String featuresAttribute) {
    this.featuresAttribute = featuresAttribute;
    return this;
  }

  /**
   * Get featuresAttribute
   * @return featuresAttribute
   */
  @javax.annotation.Nullable
  public String getFeaturesAttribute() {
    return featuresAttribute;
  }

  public void setFeaturesAttribute(String featuresAttribute) {
    this.featuresAttribute = featuresAttribute;
  }


  public ClarifyInferenceConfig contentTemplate(String contentTemplate) {
    this.contentTemplate = contentTemplate;
    return this;
  }

  /**
   * Get contentTemplate
   * @return contentTemplate
   */
  @javax.annotation.Nullable
  public String getContentTemplate() {
    return contentTemplate;
  }

  public void setContentTemplate(String contentTemplate) {
    this.contentTemplate = contentTemplate;
  }


  public ClarifyInferenceConfig maxRecordCount(Integer maxRecordCount) {
    this.maxRecordCount = maxRecordCount;
    return this;
  }

  /**
   * Get maxRecordCount
   * @return maxRecordCount
   */
  @javax.annotation.Nullable
  public Integer getMaxRecordCount() {
    return maxRecordCount;
  }

  public void setMaxRecordCount(Integer maxRecordCount) {
    this.maxRecordCount = maxRecordCount;
  }


  public ClarifyInferenceConfig maxPayloadInMB(Integer maxPayloadInMB) {
    this.maxPayloadInMB = maxPayloadInMB;
    return this;
  }

  /**
   * Get maxPayloadInMB
   * @return maxPayloadInMB
   */
  @javax.annotation.Nullable
  public Integer getMaxPayloadInMB() {
    return maxPayloadInMB;
  }

  public void setMaxPayloadInMB(Integer maxPayloadInMB) {
    this.maxPayloadInMB = maxPayloadInMB;
  }


  public ClarifyInferenceConfig probabilityIndex(Integer probabilityIndex) {
    this.probabilityIndex = probabilityIndex;
    return this;
  }

  /**
   * Get probabilityIndex
   * @return probabilityIndex
   */
  @javax.annotation.Nullable
  public Integer getProbabilityIndex() {
    return probabilityIndex;
  }

  public void setProbabilityIndex(Integer probabilityIndex) {
    this.probabilityIndex = probabilityIndex;
  }


  public ClarifyInferenceConfig labelIndex(Integer labelIndex) {
    this.labelIndex = labelIndex;
    return this;
  }

  /**
   * Get labelIndex
   * @return labelIndex
   */
  @javax.annotation.Nullable
  public Integer getLabelIndex() {
    return labelIndex;
  }

  public void setLabelIndex(Integer labelIndex) {
    this.labelIndex = labelIndex;
  }


  public ClarifyInferenceConfig probabilityAttribute(String probabilityAttribute) {
    this.probabilityAttribute = probabilityAttribute;
    return this;
  }

  /**
   * Get probabilityAttribute
   * @return probabilityAttribute
   */
  @javax.annotation.Nullable
  public String getProbabilityAttribute() {
    return probabilityAttribute;
  }

  public void setProbabilityAttribute(String probabilityAttribute) {
    this.probabilityAttribute = probabilityAttribute;
  }


  public ClarifyInferenceConfig labelAttribute(String labelAttribute) {
    this.labelAttribute = labelAttribute;
    return this;
  }

  /**
   * Get labelAttribute
   * @return labelAttribute
   */
  @javax.annotation.Nullable
  public String getLabelAttribute() {
    return labelAttribute;
  }

  public void setLabelAttribute(String labelAttribute) {
    this.labelAttribute = labelAttribute;
  }


  public ClarifyInferenceConfig labelHeaders(List labelHeaders) {
    this.labelHeaders = labelHeaders;
    return this;
  }

  /**
   * Get labelHeaders
   * @return labelHeaders
   */
  @javax.annotation.Nullable
  public List getLabelHeaders() {
    return labelHeaders;
  }

  public void setLabelHeaders(List labelHeaders) {
    this.labelHeaders = labelHeaders;
  }


  public ClarifyInferenceConfig featureHeaders(List featureHeaders) {
    this.featureHeaders = featureHeaders;
    return this;
  }

  /**
   * Get featureHeaders
   * @return featureHeaders
   */
  @javax.annotation.Nullable
  public List getFeatureHeaders() {
    return featureHeaders;
  }

  public void setFeatureHeaders(List featureHeaders) {
    this.featureHeaders = featureHeaders;
  }


  public ClarifyInferenceConfig featureTypes(List featureTypes) {
    this.featureTypes = featureTypes;
    return this;
  }

  /**
   * Get featureTypes
   * @return featureTypes
   */
  @javax.annotation.Nullable
  public List getFeatureTypes() {
    return featureTypes;
  }

  public void setFeatureTypes(List featureTypes) {
    this.featureTypes = featureTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClarifyInferenceConfig clarifyInferenceConfig = (ClarifyInferenceConfig) o;
    return Objects.equals(this.featuresAttribute, clarifyInferenceConfig.featuresAttribute) &&
        Objects.equals(this.contentTemplate, clarifyInferenceConfig.contentTemplate) &&
        Objects.equals(this.maxRecordCount, clarifyInferenceConfig.maxRecordCount) &&
        Objects.equals(this.maxPayloadInMB, clarifyInferenceConfig.maxPayloadInMB) &&
        Objects.equals(this.probabilityIndex, clarifyInferenceConfig.probabilityIndex) &&
        Objects.equals(this.labelIndex, clarifyInferenceConfig.labelIndex) &&
        Objects.equals(this.probabilityAttribute, clarifyInferenceConfig.probabilityAttribute) &&
        Objects.equals(this.labelAttribute, clarifyInferenceConfig.labelAttribute) &&
        Objects.equals(this.labelHeaders, clarifyInferenceConfig.labelHeaders) &&
        Objects.equals(this.featureHeaders, clarifyInferenceConfig.featureHeaders) &&
        Objects.equals(this.featureTypes, clarifyInferenceConfig.featureTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featuresAttribute, contentTemplate, maxRecordCount, maxPayloadInMB, probabilityIndex, labelIndex, probabilityAttribute, labelAttribute, labelHeaders, featureHeaders, featureTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClarifyInferenceConfig {\n");
    sb.append("    featuresAttribute: ").append(toIndentedString(featuresAttribute)).append("\n");
    sb.append("    contentTemplate: ").append(toIndentedString(contentTemplate)).append("\n");
    sb.append("    maxRecordCount: ").append(toIndentedString(maxRecordCount)).append("\n");
    sb.append("    maxPayloadInMB: ").append(toIndentedString(maxPayloadInMB)).append("\n");
    sb.append("    probabilityIndex: ").append(toIndentedString(probabilityIndex)).append("\n");
    sb.append("    labelIndex: ").append(toIndentedString(labelIndex)).append("\n");
    sb.append("    probabilityAttribute: ").append(toIndentedString(probabilityAttribute)).append("\n");
    sb.append("    labelAttribute: ").append(toIndentedString(labelAttribute)).append("\n");
    sb.append("    labelHeaders: ").append(toIndentedString(labelHeaders)).append("\n");
    sb.append("    featureHeaders: ").append(toIndentedString(featureHeaders)).append("\n");
    sb.append("    featureTypes: ").append(toIndentedString(featureTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeaturesAttribute");
    openapiFields.add("ContentTemplate");
    openapiFields.add("MaxRecordCount");
    openapiFields.add("MaxPayloadInMB");
    openapiFields.add("ProbabilityIndex");
    openapiFields.add("LabelIndex");
    openapiFields.add("ProbabilityAttribute");
    openapiFields.add("LabelAttribute");
    openapiFields.add("LabelHeaders");
    openapiFields.add("FeatureHeaders");
    openapiFields.add("FeatureTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClarifyInferenceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClarifyInferenceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClarifyInferenceConfig is not found in the empty JSON string", ClarifyInferenceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClarifyInferenceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClarifyInferenceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FeaturesAttribute`
      if (jsonObj.get("FeaturesAttribute") != null && !jsonObj.get("FeaturesAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeaturesAttribute"));
      }
      // validate the optional field `ContentTemplate`
      if (jsonObj.get("ContentTemplate") != null && !jsonObj.get("ContentTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentTemplate"));
      }
      // validate the optional field `MaxRecordCount`
      if (jsonObj.get("MaxRecordCount") != null && !jsonObj.get("MaxRecordCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecordCount"));
      }
      // validate the optional field `MaxPayloadInMB`
      if (jsonObj.get("MaxPayloadInMB") != null && !jsonObj.get("MaxPayloadInMB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxPayloadInMB"));
      }
      // validate the optional field `ProbabilityIndex`
      if (jsonObj.get("ProbabilityIndex") != null && !jsonObj.get("ProbabilityIndex").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProbabilityIndex"));
      }
      // validate the optional field `LabelIndex`
      if (jsonObj.get("LabelIndex") != null && !jsonObj.get("LabelIndex").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LabelIndex"));
      }
      // validate the optional field `ProbabilityAttribute`
      if (jsonObj.get("ProbabilityAttribute") != null && !jsonObj.get("ProbabilityAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProbabilityAttribute"));
      }
      // validate the optional field `LabelAttribute`
      if (jsonObj.get("LabelAttribute") != null && !jsonObj.get("LabelAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LabelAttribute"));
      }
      // validate the optional field `LabelHeaders`
      if (jsonObj.get("LabelHeaders") != null && !jsonObj.get("LabelHeaders").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LabelHeaders"));
      }
      // validate the optional field `FeatureHeaders`
      if (jsonObj.get("FeatureHeaders") != null && !jsonObj.get("FeatureHeaders").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FeatureHeaders"));
      }
      // validate the optional field `FeatureTypes`
      if (jsonObj.get("FeatureTypes") != null && !jsonObj.get("FeatureTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FeatureTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClarifyInferenceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClarifyInferenceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClarifyInferenceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClarifyInferenceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ClarifyInferenceConfig>() {
           @Override
           public void write(JsonWriter out, ClarifyInferenceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClarifyInferenceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClarifyInferenceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClarifyInferenceConfig
   * @throws IOException if the JSON string is invalid with respect to ClarifyInferenceConfig
   */
  public static ClarifyInferenceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClarifyInferenceConfig.class);
  }

  /**
   * Convert an instance of ClarifyInferenceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

