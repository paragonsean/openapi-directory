/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExperimentSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summary of the properties of an experiment. To get the complete set of properties, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html\&quot;&gt;DescribeExperiment&lt;/a&gt; API and provide the &lt;code&gt;ExperimentName&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExperimentSummary {
  public static final String SERIALIZED_NAME_EXPERIMENT_ARN = "ExperimentArn";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_ARN)
  private String experimentArn;

  public static final String SERIALIZED_NAME_EXPERIMENT_NAME = "ExperimentName";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_NAME)
  private String experimentName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPERIMENT_SOURCE = "ExperimentSource";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_SOURCE)
  private ExperimentSource experimentSource;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public ExperimentSummary() {
  }

  public ExperimentSummary experimentArn(String experimentArn) {
    this.experimentArn = experimentArn;
    return this;
  }

  /**
   * Get experimentArn
   * @return experimentArn
   */
  @javax.annotation.Nullable
  public String getExperimentArn() {
    return experimentArn;
  }

  public void setExperimentArn(String experimentArn) {
    this.experimentArn = experimentArn;
  }


  public ExperimentSummary experimentName(String experimentName) {
    this.experimentName = experimentName;
    return this;
  }

  /**
   * Get experimentName
   * @return experimentName
   */
  @javax.annotation.Nullable
  public String getExperimentName() {
    return experimentName;
  }

  public void setExperimentName(String experimentName) {
    this.experimentName = experimentName;
  }


  public ExperimentSummary displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ExperimentSummary experimentSource(ExperimentSource experimentSource) {
    this.experimentSource = experimentSource;
    return this;
  }

  /**
   * Get experimentSource
   * @return experimentSource
   */
  @javax.annotation.Nullable
  public ExperimentSource getExperimentSource() {
    return experimentSource;
  }

  public void setExperimentSource(ExperimentSource experimentSource) {
    this.experimentSource = experimentSource;
  }


  public ExperimentSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ExperimentSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperimentSummary experimentSummary = (ExperimentSummary) o;
    return Objects.equals(this.experimentArn, experimentSummary.experimentArn) &&
        Objects.equals(this.experimentName, experimentSummary.experimentName) &&
        Objects.equals(this.displayName, experimentSummary.displayName) &&
        Objects.equals(this.experimentSource, experimentSummary.experimentSource) &&
        Objects.equals(this.creationTime, experimentSummary.creationTime) &&
        Objects.equals(this.lastModifiedTime, experimentSummary.lastModifiedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(experimentArn, experimentName, displayName, experimentSource, creationTime, lastModifiedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperimentSummary {\n");
    sb.append("    experimentArn: ").append(toIndentedString(experimentArn)).append("\n");
    sb.append("    experimentName: ").append(toIndentedString(experimentName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    experimentSource: ").append(toIndentedString(experimentSource)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExperimentArn");
    openapiFields.add("ExperimentName");
    openapiFields.add("DisplayName");
    openapiFields.add("ExperimentSource");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExperimentSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExperimentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExperimentSummary is not found in the empty JSON string", ExperimentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExperimentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExperimentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExperimentArn`
      if (jsonObj.get("ExperimentArn") != null && !jsonObj.get("ExperimentArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExperimentArn"));
      }
      // validate the optional field `ExperimentName`
      if (jsonObj.get("ExperimentName") != null && !jsonObj.get("ExperimentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExperimentName"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `ExperimentSource`
      if (jsonObj.get("ExperimentSource") != null && !jsonObj.get("ExperimentSource").isJsonNull()) {
        ExperimentSource.validateJsonElement(jsonObj.get("ExperimentSource"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExperimentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExperimentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExperimentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExperimentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ExperimentSummary>() {
           @Override
           public void write(JsonWriter out, ExperimentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExperimentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExperimentSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExperimentSummary
   * @throws IOException if the JSON string is invalid with respect to ExperimentSummary
   */
  public static ExperimentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExperimentSummary.class);
  }

  /**
   * Convert an instance of ExperimentSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

