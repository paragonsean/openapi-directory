/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribePipelineExecutionResponseSelectiveExecutionConfig;
import org.openapitools.client.model.StartPipelineExecutionRequestParallelismConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartPipelineExecutionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartPipelineExecutionRequest {
  public static final String SERIALIZED_NAME_PIPELINE_NAME = "PipelineName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_NAME)
  private String pipelineName;

  public static final String SERIALIZED_NAME_PIPELINE_EXECUTION_DISPLAY_NAME = "PipelineExecutionDisplayName";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXECUTION_DISPLAY_NAME)
  private String pipelineExecutionDisplayName;

  public static final String SERIALIZED_NAME_PIPELINE_PARAMETERS = "PipelineParameters";
  @SerializedName(SERIALIZED_NAME_PIPELINE_PARAMETERS)
  private List pipelineParameters;

  public static final String SERIALIZED_NAME_PIPELINE_EXECUTION_DESCRIPTION = "PipelineExecutionDescription";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EXECUTION_DESCRIPTION)
  private String pipelineExecutionDescription;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_PARALLELISM_CONFIGURATION = "ParallelismConfiguration";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_CONFIGURATION)
  private StartPipelineExecutionRequestParallelismConfiguration parallelismConfiguration;

  public static final String SERIALIZED_NAME_SELECTIVE_EXECUTION_CONFIG = "SelectiveExecutionConfig";
  @SerializedName(SERIALIZED_NAME_SELECTIVE_EXECUTION_CONFIG)
  private DescribePipelineExecutionResponseSelectiveExecutionConfig selectiveExecutionConfig;

  public StartPipelineExecutionRequest() {
  }

  public StartPipelineExecutionRequest pipelineName(String pipelineName) {
    this.pipelineName = pipelineName;
    return this;
  }

  /**
   * Get pipelineName
   * @return pipelineName
   */
  @javax.annotation.Nonnull
  public String getPipelineName() {
    return pipelineName;
  }

  public void setPipelineName(String pipelineName) {
    this.pipelineName = pipelineName;
  }


  public StartPipelineExecutionRequest pipelineExecutionDisplayName(String pipelineExecutionDisplayName) {
    this.pipelineExecutionDisplayName = pipelineExecutionDisplayName;
    return this;
  }

  /**
   * Get pipelineExecutionDisplayName
   * @return pipelineExecutionDisplayName
   */
  @javax.annotation.Nullable
  public String getPipelineExecutionDisplayName() {
    return pipelineExecutionDisplayName;
  }

  public void setPipelineExecutionDisplayName(String pipelineExecutionDisplayName) {
    this.pipelineExecutionDisplayName = pipelineExecutionDisplayName;
  }


  public StartPipelineExecutionRequest pipelineParameters(List pipelineParameters) {
    this.pipelineParameters = pipelineParameters;
    return this;
  }

  /**
   * Get pipelineParameters
   * @return pipelineParameters
   */
  @javax.annotation.Nullable
  public List getPipelineParameters() {
    return pipelineParameters;
  }

  public void setPipelineParameters(List pipelineParameters) {
    this.pipelineParameters = pipelineParameters;
  }


  public StartPipelineExecutionRequest pipelineExecutionDescription(String pipelineExecutionDescription) {
    this.pipelineExecutionDescription = pipelineExecutionDescription;
    return this;
  }

  /**
   * Get pipelineExecutionDescription
   * @return pipelineExecutionDescription
   */
  @javax.annotation.Nullable
  public String getPipelineExecutionDescription() {
    return pipelineExecutionDescription;
  }

  public void setPipelineExecutionDescription(String pipelineExecutionDescription) {
    this.pipelineExecutionDescription = pipelineExecutionDescription;
  }


  public StartPipelineExecutionRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nonnull
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartPipelineExecutionRequest parallelismConfiguration(StartPipelineExecutionRequestParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
    return this;
  }

  /**
   * Get parallelismConfiguration
   * @return parallelismConfiguration
   */
  @javax.annotation.Nullable
  public StartPipelineExecutionRequestParallelismConfiguration getParallelismConfiguration() {
    return parallelismConfiguration;
  }

  public void setParallelismConfiguration(StartPipelineExecutionRequestParallelismConfiguration parallelismConfiguration) {
    this.parallelismConfiguration = parallelismConfiguration;
  }


  public StartPipelineExecutionRequest selectiveExecutionConfig(DescribePipelineExecutionResponseSelectiveExecutionConfig selectiveExecutionConfig) {
    this.selectiveExecutionConfig = selectiveExecutionConfig;
    return this;
  }

  /**
   * Get selectiveExecutionConfig
   * @return selectiveExecutionConfig
   */
  @javax.annotation.Nullable
  public DescribePipelineExecutionResponseSelectiveExecutionConfig getSelectiveExecutionConfig() {
    return selectiveExecutionConfig;
  }

  public void setSelectiveExecutionConfig(DescribePipelineExecutionResponseSelectiveExecutionConfig selectiveExecutionConfig) {
    this.selectiveExecutionConfig = selectiveExecutionConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartPipelineExecutionRequest startPipelineExecutionRequest = (StartPipelineExecutionRequest) o;
    return Objects.equals(this.pipelineName, startPipelineExecutionRequest.pipelineName) &&
        Objects.equals(this.pipelineExecutionDisplayName, startPipelineExecutionRequest.pipelineExecutionDisplayName) &&
        Objects.equals(this.pipelineParameters, startPipelineExecutionRequest.pipelineParameters) &&
        Objects.equals(this.pipelineExecutionDescription, startPipelineExecutionRequest.pipelineExecutionDescription) &&
        Objects.equals(this.clientRequestToken, startPipelineExecutionRequest.clientRequestToken) &&
        Objects.equals(this.parallelismConfiguration, startPipelineExecutionRequest.parallelismConfiguration) &&
        Objects.equals(this.selectiveExecutionConfig, startPipelineExecutionRequest.selectiveExecutionConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineName, pipelineExecutionDisplayName, pipelineParameters, pipelineExecutionDescription, clientRequestToken, parallelismConfiguration, selectiveExecutionConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartPipelineExecutionRequest {\n");
    sb.append("    pipelineName: ").append(toIndentedString(pipelineName)).append("\n");
    sb.append("    pipelineExecutionDisplayName: ").append(toIndentedString(pipelineExecutionDisplayName)).append("\n");
    sb.append("    pipelineParameters: ").append(toIndentedString(pipelineParameters)).append("\n");
    sb.append("    pipelineExecutionDescription: ").append(toIndentedString(pipelineExecutionDescription)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    parallelismConfiguration: ").append(toIndentedString(parallelismConfiguration)).append("\n");
    sb.append("    selectiveExecutionConfig: ").append(toIndentedString(selectiveExecutionConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PipelineName");
    openapiFields.add("PipelineExecutionDisplayName");
    openapiFields.add("PipelineParameters");
    openapiFields.add("PipelineExecutionDescription");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("ParallelismConfiguration");
    openapiFields.add("SelectiveExecutionConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PipelineName");
    openapiRequiredFields.add("ClientRequestToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartPipelineExecutionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartPipelineExecutionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartPipelineExecutionRequest is not found in the empty JSON string", StartPipelineExecutionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartPipelineExecutionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartPipelineExecutionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartPipelineExecutionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PipelineName`
      String.validateJsonElement(jsonObj.get("PipelineName"));
      // validate the optional field `PipelineExecutionDisplayName`
      if (jsonObj.get("PipelineExecutionDisplayName") != null && !jsonObj.get("PipelineExecutionDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineExecutionDisplayName"));
      }
      // validate the optional field `PipelineParameters`
      if (jsonObj.get("PipelineParameters") != null && !jsonObj.get("PipelineParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PipelineParameters"));
      }
      // validate the optional field `PipelineExecutionDescription`
      if (jsonObj.get("PipelineExecutionDescription") != null && !jsonObj.get("PipelineExecutionDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineExecutionDescription"));
      }
      // validate the required field `ClientRequestToken`
      String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      // validate the optional field `ParallelismConfiguration`
      if (jsonObj.get("ParallelismConfiguration") != null && !jsonObj.get("ParallelismConfiguration").isJsonNull()) {
        StartPipelineExecutionRequestParallelismConfiguration.validateJsonElement(jsonObj.get("ParallelismConfiguration"));
      }
      // validate the optional field `SelectiveExecutionConfig`
      if (jsonObj.get("SelectiveExecutionConfig") != null && !jsonObj.get("SelectiveExecutionConfig").isJsonNull()) {
        DescribePipelineExecutionResponseSelectiveExecutionConfig.validateJsonElement(jsonObj.get("SelectiveExecutionConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartPipelineExecutionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartPipelineExecutionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartPipelineExecutionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartPipelineExecutionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartPipelineExecutionRequest>() {
           @Override
           public void write(JsonWriter out, StartPipelineExecutionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartPipelineExecutionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartPipelineExecutionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartPipelineExecutionRequest
   * @throws IOException if the JSON string is invalid with respect to StartPipelineExecutionRequest
   */
  public static StartPipelineExecutionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartPipelineExecutionRequest.class);
  }

  /**
   * Convert an instance of StartPipelineExecutionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

