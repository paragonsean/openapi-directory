/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceAlgorithm {
  public static final String SERIALIZED_NAME_MODEL_DATA_URL = "ModelDataUrl";
  @SerializedName(SERIALIZED_NAME_MODEL_DATA_URL)
  private String modelDataUrl;

  public static final String SERIALIZED_NAME_ALGORITHM_NAME = "AlgorithmName";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_NAME)
  private String algorithmName;

  public SourceAlgorithm() {
  }

  public SourceAlgorithm modelDataUrl(String modelDataUrl) {
    this.modelDataUrl = modelDataUrl;
    return this;
  }

  /**
   * Get modelDataUrl
   * @return modelDataUrl
   */
  @javax.annotation.Nullable
  public String getModelDataUrl() {
    return modelDataUrl;
  }

  public void setModelDataUrl(String modelDataUrl) {
    this.modelDataUrl = modelDataUrl;
  }


  public SourceAlgorithm algorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

  /**
   * Get algorithmName
   * @return algorithmName
   */
  @javax.annotation.Nonnull
  public String getAlgorithmName() {
    return algorithmName;
  }

  public void setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceAlgorithm sourceAlgorithm = (SourceAlgorithm) o;
    return Objects.equals(this.modelDataUrl, sourceAlgorithm.modelDataUrl) &&
        Objects.equals(this.algorithmName, sourceAlgorithm.algorithmName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelDataUrl, algorithmName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceAlgorithm {\n");
    sb.append("    modelDataUrl: ").append(toIndentedString(modelDataUrl)).append("\n");
    sb.append("    algorithmName: ").append(toIndentedString(algorithmName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ModelDataUrl");
    openapiFields.add("AlgorithmName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AlgorithmName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceAlgorithm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceAlgorithm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceAlgorithm is not found in the empty JSON string", SourceAlgorithm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceAlgorithm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceAlgorithm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceAlgorithm.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ModelDataUrl`
      if (jsonObj.get("ModelDataUrl") != null && !jsonObj.get("ModelDataUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelDataUrl"));
      }
      // validate the required field `AlgorithmName`
      String.validateJsonElement(jsonObj.get("AlgorithmName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceAlgorithm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceAlgorithm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceAlgorithm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceAlgorithm.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceAlgorithm>() {
           @Override
           public void write(JsonWriter out, SourceAlgorithm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceAlgorithm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceAlgorithm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceAlgorithm
   * @throws IOException if the JSON string is invalid with respect to SourceAlgorithm
   */
  public static SourceAlgorithm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceAlgorithm.class);
  }

  /**
   * Convert an instance of SourceAlgorithm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

