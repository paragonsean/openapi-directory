/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelDashboardModelModel;
import org.openapitools.client.model.ModelDashboardModelModelCard;
import org.openapitools.client.model.TransformJob;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A model displayed in the Amazon SageMaker Model Dashboard.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelDashboardModel {
  public static final String SERIALIZED_NAME_MODEL = "Model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private ModelDashboardModelModel model;

  public static final String SERIALIZED_NAME_ENDPOINTS = "Endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List endpoints;

  public static final String SERIALIZED_NAME_LAST_BATCH_TRANSFORM_JOB = "LastBatchTransformJob";
  @SerializedName(SERIALIZED_NAME_LAST_BATCH_TRANSFORM_JOB)
  private TransformJob lastBatchTransformJob;

  public static final String SERIALIZED_NAME_MONITORING_SCHEDULES = "MonitoringSchedules";
  @SerializedName(SERIALIZED_NAME_MONITORING_SCHEDULES)
  private List monitoringSchedules;

  public static final String SERIALIZED_NAME_MODEL_CARD = "ModelCard";
  @SerializedName(SERIALIZED_NAME_MODEL_CARD)
  private ModelDashboardModelModelCard modelCard;

  public ModelDashboardModel() {
  }

  public ModelDashboardModel model(ModelDashboardModelModel model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public ModelDashboardModelModel getModel() {
    return model;
  }

  public void setModel(ModelDashboardModelModel model) {
    this.model = model;
  }


  public ModelDashboardModel endpoints(List endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * Get endpoints
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List endpoints) {
    this.endpoints = endpoints;
  }


  public ModelDashboardModel lastBatchTransformJob(TransformJob lastBatchTransformJob) {
    this.lastBatchTransformJob = lastBatchTransformJob;
    return this;
  }

  /**
   * Get lastBatchTransformJob
   * @return lastBatchTransformJob
   */
  @javax.annotation.Nullable
  public TransformJob getLastBatchTransformJob() {
    return lastBatchTransformJob;
  }

  public void setLastBatchTransformJob(TransformJob lastBatchTransformJob) {
    this.lastBatchTransformJob = lastBatchTransformJob;
  }


  public ModelDashboardModel monitoringSchedules(List monitoringSchedules) {
    this.monitoringSchedules = monitoringSchedules;
    return this;
  }

  /**
   * Get monitoringSchedules
   * @return monitoringSchedules
   */
  @javax.annotation.Nullable
  public List getMonitoringSchedules() {
    return monitoringSchedules;
  }

  public void setMonitoringSchedules(List monitoringSchedules) {
    this.monitoringSchedules = monitoringSchedules;
  }


  public ModelDashboardModel modelCard(ModelDashboardModelModelCard modelCard) {
    this.modelCard = modelCard;
    return this;
  }

  /**
   * Get modelCard
   * @return modelCard
   */
  @javax.annotation.Nullable
  public ModelDashboardModelModelCard getModelCard() {
    return modelCard;
  }

  public void setModelCard(ModelDashboardModelModelCard modelCard) {
    this.modelCard = modelCard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelDashboardModel modelDashboardModel = (ModelDashboardModel) o;
    return Objects.equals(this.model, modelDashboardModel.model) &&
        Objects.equals(this.endpoints, modelDashboardModel.endpoints) &&
        Objects.equals(this.lastBatchTransformJob, modelDashboardModel.lastBatchTransformJob) &&
        Objects.equals(this.monitoringSchedules, modelDashboardModel.monitoringSchedules) &&
        Objects.equals(this.modelCard, modelDashboardModel.modelCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, endpoints, lastBatchTransformJob, monitoringSchedules, modelCard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelDashboardModel {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    lastBatchTransformJob: ").append(toIndentedString(lastBatchTransformJob)).append("\n");
    sb.append("    monitoringSchedules: ").append(toIndentedString(monitoringSchedules)).append("\n");
    sb.append("    modelCard: ").append(toIndentedString(modelCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Model");
    openapiFields.add("Endpoints");
    openapiFields.add("LastBatchTransformJob");
    openapiFields.add("MonitoringSchedules");
    openapiFields.add("ModelCard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelDashboardModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelDashboardModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelDashboardModel is not found in the empty JSON string", ModelDashboardModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelDashboardModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelDashboardModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Model`
      if (jsonObj.get("Model") != null && !jsonObj.get("Model").isJsonNull()) {
        ModelDashboardModelModel.validateJsonElement(jsonObj.get("Model"));
      }
      // validate the optional field `Endpoints`
      if (jsonObj.get("Endpoints") != null && !jsonObj.get("Endpoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Endpoints"));
      }
      // validate the optional field `LastBatchTransformJob`
      if (jsonObj.get("LastBatchTransformJob") != null && !jsonObj.get("LastBatchTransformJob").isJsonNull()) {
        TransformJob.validateJsonElement(jsonObj.get("LastBatchTransformJob"));
      }
      // validate the optional field `MonitoringSchedules`
      if (jsonObj.get("MonitoringSchedules") != null && !jsonObj.get("MonitoringSchedules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MonitoringSchedules"));
      }
      // validate the optional field `ModelCard`
      if (jsonObj.get("ModelCard") != null && !jsonObj.get("ModelCard").isJsonNull()) {
        ModelDashboardModelModelCard.validateJsonElement(jsonObj.get("ModelCard"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelDashboardModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelDashboardModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelDashboardModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelDashboardModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelDashboardModel>() {
           @Override
           public void write(JsonWriter out, ModelDashboardModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelDashboardModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelDashboardModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelDashboardModel
   * @throws IOException if the JSON string is invalid with respect to ModelDashboardModel
   */
  public static ModelDashboardModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelDashboardModel.class);
  }

  /**
   * Convert an instance of ModelDashboardModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

