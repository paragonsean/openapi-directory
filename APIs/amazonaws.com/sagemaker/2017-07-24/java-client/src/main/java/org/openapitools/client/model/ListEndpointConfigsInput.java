/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EndpointConfigSortKey;
import org.openapitools.client.model.OrderKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListEndpointConfigsInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListEndpointConfigsInput {
  public static final String SERIALIZED_NAME_SORT_BY = "SortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private EndpointConfigSortKey sortBy;

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private OrderKey sortOrder;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NAME_CONTAINS = "NameContains";
  @SerializedName(SERIALIZED_NAME_NAME_CONTAINS)
  private String nameContains;

  public static final String SERIALIZED_NAME_CREATION_TIME_BEFORE = "CreationTimeBefore";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME_BEFORE)
  private OffsetDateTime creationTimeBefore;

  public static final String SERIALIZED_NAME_CREATION_TIME_AFTER = "CreationTimeAfter";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME_AFTER)
  private OffsetDateTime creationTimeAfter;

  public ListEndpointConfigsInput() {
  }

  public ListEndpointConfigsInput sortBy(EndpointConfigSortKey sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public EndpointConfigSortKey getSortBy() {
    return sortBy;
  }

  public void setSortBy(EndpointConfigSortKey sortBy) {
    this.sortBy = sortBy;
  }


  public ListEndpointConfigsInput sortOrder(OrderKey sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public OrderKey getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(OrderKey sortOrder) {
    this.sortOrder = sortOrder;
  }


  public ListEndpointConfigsInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListEndpointConfigsInput maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListEndpointConfigsInput nameContains(String nameContains) {
    this.nameContains = nameContains;
    return this;
  }

  /**
   * Get nameContains
   * @return nameContains
   */
  @javax.annotation.Nullable
  public String getNameContains() {
    return nameContains;
  }

  public void setNameContains(String nameContains) {
    this.nameContains = nameContains;
  }


  public ListEndpointConfigsInput creationTimeBefore(OffsetDateTime creationTimeBefore) {
    this.creationTimeBefore = creationTimeBefore;
    return this;
  }

  /**
   * Get creationTimeBefore
   * @return creationTimeBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimeBefore() {
    return creationTimeBefore;
  }

  public void setCreationTimeBefore(OffsetDateTime creationTimeBefore) {
    this.creationTimeBefore = creationTimeBefore;
  }


  public ListEndpointConfigsInput creationTimeAfter(OffsetDateTime creationTimeAfter) {
    this.creationTimeAfter = creationTimeAfter;
    return this;
  }

  /**
   * Get creationTimeAfter
   * @return creationTimeAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimeAfter() {
    return creationTimeAfter;
  }

  public void setCreationTimeAfter(OffsetDateTime creationTimeAfter) {
    this.creationTimeAfter = creationTimeAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListEndpointConfigsInput listEndpointConfigsInput = (ListEndpointConfigsInput) o;
    return Objects.equals(this.sortBy, listEndpointConfigsInput.sortBy) &&
        Objects.equals(this.sortOrder, listEndpointConfigsInput.sortOrder) &&
        Objects.equals(this.nextToken, listEndpointConfigsInput.nextToken) &&
        Objects.equals(this.maxResults, listEndpointConfigsInput.maxResults) &&
        Objects.equals(this.nameContains, listEndpointConfigsInput.nameContains) &&
        Objects.equals(this.creationTimeBefore, listEndpointConfigsInput.creationTimeBefore) &&
        Objects.equals(this.creationTimeAfter, listEndpointConfigsInput.creationTimeAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sortBy, sortOrder, nextToken, maxResults, nameContains, creationTimeBefore, creationTimeAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListEndpointConfigsInput {\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nameContains: ").append(toIndentedString(nameContains)).append("\n");
    sb.append("    creationTimeBefore: ").append(toIndentedString(creationTimeBefore)).append("\n");
    sb.append("    creationTimeAfter: ").append(toIndentedString(creationTimeAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SortBy");
    openapiFields.add("SortOrder");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("NameContains");
    openapiFields.add("CreationTimeBefore");
    openapiFields.add("CreationTimeAfter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListEndpointConfigsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListEndpointConfigsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListEndpointConfigsInput is not found in the empty JSON string", ListEndpointConfigsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListEndpointConfigsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListEndpointConfigsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SortBy`
      if (jsonObj.get("SortBy") != null && !jsonObj.get("SortBy").isJsonNull()) {
        EndpointConfigSortKey.validateJsonElement(jsonObj.get("SortBy"));
      }
      // validate the optional field `SortOrder`
      if (jsonObj.get("SortOrder") != null && !jsonObj.get("SortOrder").isJsonNull()) {
        OrderKey.validateJsonElement(jsonObj.get("SortOrder"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `NameContains`
      if (jsonObj.get("NameContains") != null && !jsonObj.get("NameContains").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NameContains"));
      }
      // validate the optional field `CreationTimeBefore`
      if (jsonObj.get("CreationTimeBefore") != null && !jsonObj.get("CreationTimeBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTimeBefore"));
      }
      // validate the optional field `CreationTimeAfter`
      if (jsonObj.get("CreationTimeAfter") != null && !jsonObj.get("CreationTimeAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTimeAfter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListEndpointConfigsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListEndpointConfigsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListEndpointConfigsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListEndpointConfigsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ListEndpointConfigsInput>() {
           @Override
           public void write(JsonWriter out, ListEndpointConfigsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListEndpointConfigsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListEndpointConfigsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListEndpointConfigsInput
   * @throws IOException if the JSON string is invalid with respect to ListEndpointConfigsInput
   */
  public static ListEndpointConfigsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListEndpointConfigsInput.class);
  }

  /**
   * Convert an instance of ListEndpointConfigsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

