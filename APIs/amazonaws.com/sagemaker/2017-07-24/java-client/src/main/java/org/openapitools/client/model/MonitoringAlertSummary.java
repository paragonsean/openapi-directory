/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MonitoringAlertStatus;
import org.openapitools.client.model.MonitoringAlertSummaryActions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides summary information about a monitor alert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoringAlertSummary {
  public static final String SERIALIZED_NAME_MONITORING_ALERT_NAME = "MonitoringAlertName";
  @SerializedName(SERIALIZED_NAME_MONITORING_ALERT_NAME)
  private String monitoringAlertName;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_ALERT_STATUS = "AlertStatus";
  @SerializedName(SERIALIZED_NAME_ALERT_STATUS)
  private MonitoringAlertStatus alertStatus;

  public static final String SERIALIZED_NAME_DATAPOINTS_TO_ALERT = "DatapointsToAlert";
  @SerializedName(SERIALIZED_NAME_DATAPOINTS_TO_ALERT)
  private Integer datapointsToAlert;

  public static final String SERIALIZED_NAME_EVALUATION_PERIOD = "EvaluationPeriod";
  @SerializedName(SERIALIZED_NAME_EVALUATION_PERIOD)
  private Integer evaluationPeriod;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private MonitoringAlertSummaryActions actions;

  public MonitoringAlertSummary() {
  }

  public MonitoringAlertSummary monitoringAlertName(String monitoringAlertName) {
    this.monitoringAlertName = monitoringAlertName;
    return this;
  }

  /**
   * Get monitoringAlertName
   * @return monitoringAlertName
   */
  @javax.annotation.Nonnull
  public String getMonitoringAlertName() {
    return monitoringAlertName;
  }

  public void setMonitoringAlertName(String monitoringAlertName) {
    this.monitoringAlertName = monitoringAlertName;
  }


  public MonitoringAlertSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public MonitoringAlertSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public MonitoringAlertSummary alertStatus(MonitoringAlertStatus alertStatus) {
    this.alertStatus = alertStatus;
    return this;
  }

  /**
   * Get alertStatus
   * @return alertStatus
   */
  @javax.annotation.Nonnull
  public MonitoringAlertStatus getAlertStatus() {
    return alertStatus;
  }

  public void setAlertStatus(MonitoringAlertStatus alertStatus) {
    this.alertStatus = alertStatus;
  }


  public MonitoringAlertSummary datapointsToAlert(Integer datapointsToAlert) {
    this.datapointsToAlert = datapointsToAlert;
    return this;
  }

  /**
   * Get datapointsToAlert
   * @return datapointsToAlert
   */
  @javax.annotation.Nonnull
  public Integer getDatapointsToAlert() {
    return datapointsToAlert;
  }

  public void setDatapointsToAlert(Integer datapointsToAlert) {
    this.datapointsToAlert = datapointsToAlert;
  }


  public MonitoringAlertSummary evaluationPeriod(Integer evaluationPeriod) {
    this.evaluationPeriod = evaluationPeriod;
    return this;
  }

  /**
   * Get evaluationPeriod
   * @return evaluationPeriod
   */
  @javax.annotation.Nonnull
  public Integer getEvaluationPeriod() {
    return evaluationPeriod;
  }

  public void setEvaluationPeriod(Integer evaluationPeriod) {
    this.evaluationPeriod = evaluationPeriod;
  }


  public MonitoringAlertSummary actions(MonitoringAlertSummaryActions actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nonnull
  public MonitoringAlertSummaryActions getActions() {
    return actions;
  }

  public void setActions(MonitoringAlertSummaryActions actions) {
    this.actions = actions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringAlertSummary monitoringAlertSummary = (MonitoringAlertSummary) o;
    return Objects.equals(this.monitoringAlertName, monitoringAlertSummary.monitoringAlertName) &&
        Objects.equals(this.creationTime, monitoringAlertSummary.creationTime) &&
        Objects.equals(this.lastModifiedTime, monitoringAlertSummary.lastModifiedTime) &&
        Objects.equals(this.alertStatus, monitoringAlertSummary.alertStatus) &&
        Objects.equals(this.datapointsToAlert, monitoringAlertSummary.datapointsToAlert) &&
        Objects.equals(this.evaluationPeriod, monitoringAlertSummary.evaluationPeriod) &&
        Objects.equals(this.actions, monitoringAlertSummary.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monitoringAlertName, creationTime, lastModifiedTime, alertStatus, datapointsToAlert, evaluationPeriod, actions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringAlertSummary {\n");
    sb.append("    monitoringAlertName: ").append(toIndentedString(monitoringAlertName)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    alertStatus: ").append(toIndentedString(alertStatus)).append("\n");
    sb.append("    datapointsToAlert: ").append(toIndentedString(datapointsToAlert)).append("\n");
    sb.append("    evaluationPeriod: ").append(toIndentedString(evaluationPeriod)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonitoringAlertName");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("AlertStatus");
    openapiFields.add("DatapointsToAlert");
    openapiFields.add("EvaluationPeriod");
    openapiFields.add("Actions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MonitoringAlertName");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("LastModifiedTime");
    openapiRequiredFields.add("AlertStatus");
    openapiRequiredFields.add("DatapointsToAlert");
    openapiRequiredFields.add("EvaluationPeriod");
    openapiRequiredFields.add("Actions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoringAlertSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoringAlertSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoringAlertSummary is not found in the empty JSON string", MonitoringAlertSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoringAlertSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoringAlertSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MonitoringAlertSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MonitoringAlertName`
      String.validateJsonElement(jsonObj.get("MonitoringAlertName"));
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the required field `LastModifiedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      // validate the required field `AlertStatus`
      MonitoringAlertStatus.validateJsonElement(jsonObj.get("AlertStatus"));
      // validate the required field `DatapointsToAlert`
      Integer.validateJsonElement(jsonObj.get("DatapointsToAlert"));
      // validate the required field `EvaluationPeriod`
      Integer.validateJsonElement(jsonObj.get("EvaluationPeriod"));
      // validate the required field `Actions`
      MonitoringAlertSummaryActions.validateJsonElement(jsonObj.get("Actions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoringAlertSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoringAlertSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoringAlertSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoringAlertSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoringAlertSummary>() {
           @Override
           public void write(JsonWriter out, MonitoringAlertSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoringAlertSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoringAlertSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoringAlertSummary
   * @throws IOException if the JSON string is invalid with respect to MonitoringAlertSummary
   */
  public static MonitoringAlertSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoringAlertSummary.class);
  }

  /**
   * Convert an instance of MonitoringAlertSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

