/*
 * Amazon SageMaker Service
 * <p>Provides APIs for creating and managing SageMaker resources. </p> <p>Other Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user\">SageMaker Developer Guide</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html\">Amazon Augmented AI Runtime API Reference</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HumanTaskConfigAnnotationConsolidationConfig;
import org.openapitools.client.model.HumanTaskConfigPublicWorkforceTaskPrice;
import org.openapitools.client.model.HumanTaskConfigUiConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLabelingJobRequestHumanTaskConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:48.073948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLabelingJobRequestHumanTaskConfig {
  public static final String SERIALIZED_NAME_WORKTEAM_ARN = "WorkteamArn";
  @SerializedName(SERIALIZED_NAME_WORKTEAM_ARN)
  private String workteamArn;

  public static final String SERIALIZED_NAME_UI_CONFIG = "UiConfig";
  @SerializedName(SERIALIZED_NAME_UI_CONFIG)
  private HumanTaskConfigUiConfig uiConfig;

  public static final String SERIALIZED_NAME_PRE_HUMAN_TASK_LAMBDA_ARN = "PreHumanTaskLambdaArn";
  @SerializedName(SERIALIZED_NAME_PRE_HUMAN_TASK_LAMBDA_ARN)
  private String preHumanTaskLambdaArn;

  public static final String SERIALIZED_NAME_TASK_KEYWORDS = "TaskKeywords";
  @SerializedName(SERIALIZED_NAME_TASK_KEYWORDS)
  private List taskKeywords;

  public static final String SERIALIZED_NAME_TASK_TITLE = "TaskTitle";
  @SerializedName(SERIALIZED_NAME_TASK_TITLE)
  private String taskTitle;

  public static final String SERIALIZED_NAME_TASK_DESCRIPTION = "TaskDescription";
  @SerializedName(SERIALIZED_NAME_TASK_DESCRIPTION)
  private String taskDescription;

  public static final String SERIALIZED_NAME_NUMBER_OF_HUMAN_WORKERS_PER_DATA_OBJECT = "NumberOfHumanWorkersPerDataObject";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_HUMAN_WORKERS_PER_DATA_OBJECT)
  private Integer numberOfHumanWorkersPerDataObject;

  public static final String SERIALIZED_NAME_TASK_TIME_LIMIT_IN_SECONDS = "TaskTimeLimitInSeconds";
  @SerializedName(SERIALIZED_NAME_TASK_TIME_LIMIT_IN_SECONDS)
  private Integer taskTimeLimitInSeconds;

  public static final String SERIALIZED_NAME_TASK_AVAILABILITY_LIFETIME_IN_SECONDS = "TaskAvailabilityLifetimeInSeconds";
  @SerializedName(SERIALIZED_NAME_TASK_AVAILABILITY_LIFETIME_IN_SECONDS)
  private Integer taskAvailabilityLifetimeInSeconds;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_TASK_COUNT = "MaxConcurrentTaskCount";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_TASK_COUNT)
  private Integer maxConcurrentTaskCount;

  public static final String SERIALIZED_NAME_ANNOTATION_CONSOLIDATION_CONFIG = "AnnotationConsolidationConfig";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_CONSOLIDATION_CONFIG)
  private HumanTaskConfigAnnotationConsolidationConfig annotationConsolidationConfig;

  public static final String SERIALIZED_NAME_PUBLIC_WORKFORCE_TASK_PRICE = "PublicWorkforceTaskPrice";
  @SerializedName(SERIALIZED_NAME_PUBLIC_WORKFORCE_TASK_PRICE)
  private HumanTaskConfigPublicWorkforceTaskPrice publicWorkforceTaskPrice;

  public CreateLabelingJobRequestHumanTaskConfig() {
  }

  public CreateLabelingJobRequestHumanTaskConfig workteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
    return this;
  }

  /**
   * Get workteamArn
   * @return workteamArn
   */
  @javax.annotation.Nonnull
  public String getWorkteamArn() {
    return workteamArn;
  }

  public void setWorkteamArn(String workteamArn) {
    this.workteamArn = workteamArn;
  }


  public CreateLabelingJobRequestHumanTaskConfig uiConfig(HumanTaskConfigUiConfig uiConfig) {
    this.uiConfig = uiConfig;
    return this;
  }

  /**
   * Get uiConfig
   * @return uiConfig
   */
  @javax.annotation.Nonnull
  public HumanTaskConfigUiConfig getUiConfig() {
    return uiConfig;
  }

  public void setUiConfig(HumanTaskConfigUiConfig uiConfig) {
    this.uiConfig = uiConfig;
  }


  public CreateLabelingJobRequestHumanTaskConfig preHumanTaskLambdaArn(String preHumanTaskLambdaArn) {
    this.preHumanTaskLambdaArn = preHumanTaskLambdaArn;
    return this;
  }

  /**
   * Get preHumanTaskLambdaArn
   * @return preHumanTaskLambdaArn
   */
  @javax.annotation.Nonnull
  public String getPreHumanTaskLambdaArn() {
    return preHumanTaskLambdaArn;
  }

  public void setPreHumanTaskLambdaArn(String preHumanTaskLambdaArn) {
    this.preHumanTaskLambdaArn = preHumanTaskLambdaArn;
  }


  public CreateLabelingJobRequestHumanTaskConfig taskKeywords(List taskKeywords) {
    this.taskKeywords = taskKeywords;
    return this;
  }

  /**
   * Get taskKeywords
   * @return taskKeywords
   */
  @javax.annotation.Nullable
  public List getTaskKeywords() {
    return taskKeywords;
  }

  public void setTaskKeywords(List taskKeywords) {
    this.taskKeywords = taskKeywords;
  }


  public CreateLabelingJobRequestHumanTaskConfig taskTitle(String taskTitle) {
    this.taskTitle = taskTitle;
    return this;
  }

  /**
   * Get taskTitle
   * @return taskTitle
   */
  @javax.annotation.Nonnull
  public String getTaskTitle() {
    return taskTitle;
  }

  public void setTaskTitle(String taskTitle) {
    this.taskTitle = taskTitle;
  }


  public CreateLabelingJobRequestHumanTaskConfig taskDescription(String taskDescription) {
    this.taskDescription = taskDescription;
    return this;
  }

  /**
   * Get taskDescription
   * @return taskDescription
   */
  @javax.annotation.Nonnull
  public String getTaskDescription() {
    return taskDescription;
  }

  public void setTaskDescription(String taskDescription) {
    this.taskDescription = taskDescription;
  }


  public CreateLabelingJobRequestHumanTaskConfig numberOfHumanWorkersPerDataObject(Integer numberOfHumanWorkersPerDataObject) {
    this.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject;
    return this;
  }

  /**
   * Get numberOfHumanWorkersPerDataObject
   * @return numberOfHumanWorkersPerDataObject
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfHumanWorkersPerDataObject() {
    return numberOfHumanWorkersPerDataObject;
  }

  public void setNumberOfHumanWorkersPerDataObject(Integer numberOfHumanWorkersPerDataObject) {
    this.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject;
  }


  public CreateLabelingJobRequestHumanTaskConfig taskTimeLimitInSeconds(Integer taskTimeLimitInSeconds) {
    this.taskTimeLimitInSeconds = taskTimeLimitInSeconds;
    return this;
  }

  /**
   * Get taskTimeLimitInSeconds
   * @return taskTimeLimitInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getTaskTimeLimitInSeconds() {
    return taskTimeLimitInSeconds;
  }

  public void setTaskTimeLimitInSeconds(Integer taskTimeLimitInSeconds) {
    this.taskTimeLimitInSeconds = taskTimeLimitInSeconds;
  }


  public CreateLabelingJobRequestHumanTaskConfig taskAvailabilityLifetimeInSeconds(Integer taskAvailabilityLifetimeInSeconds) {
    this.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds;
    return this;
  }

  /**
   * Get taskAvailabilityLifetimeInSeconds
   * @return taskAvailabilityLifetimeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getTaskAvailabilityLifetimeInSeconds() {
    return taskAvailabilityLifetimeInSeconds;
  }

  public void setTaskAvailabilityLifetimeInSeconds(Integer taskAvailabilityLifetimeInSeconds) {
    this.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds;
  }


  public CreateLabelingJobRequestHumanTaskConfig maxConcurrentTaskCount(Integer maxConcurrentTaskCount) {
    this.maxConcurrentTaskCount = maxConcurrentTaskCount;
    return this;
  }

  /**
   * Get maxConcurrentTaskCount
   * @return maxConcurrentTaskCount
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentTaskCount() {
    return maxConcurrentTaskCount;
  }

  public void setMaxConcurrentTaskCount(Integer maxConcurrentTaskCount) {
    this.maxConcurrentTaskCount = maxConcurrentTaskCount;
  }


  public CreateLabelingJobRequestHumanTaskConfig annotationConsolidationConfig(HumanTaskConfigAnnotationConsolidationConfig annotationConsolidationConfig) {
    this.annotationConsolidationConfig = annotationConsolidationConfig;
    return this;
  }

  /**
   * Get annotationConsolidationConfig
   * @return annotationConsolidationConfig
   */
  @javax.annotation.Nonnull
  public HumanTaskConfigAnnotationConsolidationConfig getAnnotationConsolidationConfig() {
    return annotationConsolidationConfig;
  }

  public void setAnnotationConsolidationConfig(HumanTaskConfigAnnotationConsolidationConfig annotationConsolidationConfig) {
    this.annotationConsolidationConfig = annotationConsolidationConfig;
  }


  public CreateLabelingJobRequestHumanTaskConfig publicWorkforceTaskPrice(HumanTaskConfigPublicWorkforceTaskPrice publicWorkforceTaskPrice) {
    this.publicWorkforceTaskPrice = publicWorkforceTaskPrice;
    return this;
  }

  /**
   * Get publicWorkforceTaskPrice
   * @return publicWorkforceTaskPrice
   */
  @javax.annotation.Nullable
  public HumanTaskConfigPublicWorkforceTaskPrice getPublicWorkforceTaskPrice() {
    return publicWorkforceTaskPrice;
  }

  public void setPublicWorkforceTaskPrice(HumanTaskConfigPublicWorkforceTaskPrice publicWorkforceTaskPrice) {
    this.publicWorkforceTaskPrice = publicWorkforceTaskPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLabelingJobRequestHumanTaskConfig createLabelingJobRequestHumanTaskConfig = (CreateLabelingJobRequestHumanTaskConfig) o;
    return Objects.equals(this.workteamArn, createLabelingJobRequestHumanTaskConfig.workteamArn) &&
        Objects.equals(this.uiConfig, createLabelingJobRequestHumanTaskConfig.uiConfig) &&
        Objects.equals(this.preHumanTaskLambdaArn, createLabelingJobRequestHumanTaskConfig.preHumanTaskLambdaArn) &&
        Objects.equals(this.taskKeywords, createLabelingJobRequestHumanTaskConfig.taskKeywords) &&
        Objects.equals(this.taskTitle, createLabelingJobRequestHumanTaskConfig.taskTitle) &&
        Objects.equals(this.taskDescription, createLabelingJobRequestHumanTaskConfig.taskDescription) &&
        Objects.equals(this.numberOfHumanWorkersPerDataObject, createLabelingJobRequestHumanTaskConfig.numberOfHumanWorkersPerDataObject) &&
        Objects.equals(this.taskTimeLimitInSeconds, createLabelingJobRequestHumanTaskConfig.taskTimeLimitInSeconds) &&
        Objects.equals(this.taskAvailabilityLifetimeInSeconds, createLabelingJobRequestHumanTaskConfig.taskAvailabilityLifetimeInSeconds) &&
        Objects.equals(this.maxConcurrentTaskCount, createLabelingJobRequestHumanTaskConfig.maxConcurrentTaskCount) &&
        Objects.equals(this.annotationConsolidationConfig, createLabelingJobRequestHumanTaskConfig.annotationConsolidationConfig) &&
        Objects.equals(this.publicWorkforceTaskPrice, createLabelingJobRequestHumanTaskConfig.publicWorkforceTaskPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workteamArn, uiConfig, preHumanTaskLambdaArn, taskKeywords, taskTitle, taskDescription, numberOfHumanWorkersPerDataObject, taskTimeLimitInSeconds, taskAvailabilityLifetimeInSeconds, maxConcurrentTaskCount, annotationConsolidationConfig, publicWorkforceTaskPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLabelingJobRequestHumanTaskConfig {\n");
    sb.append("    workteamArn: ").append(toIndentedString(workteamArn)).append("\n");
    sb.append("    uiConfig: ").append(toIndentedString(uiConfig)).append("\n");
    sb.append("    preHumanTaskLambdaArn: ").append(toIndentedString(preHumanTaskLambdaArn)).append("\n");
    sb.append("    taskKeywords: ").append(toIndentedString(taskKeywords)).append("\n");
    sb.append("    taskTitle: ").append(toIndentedString(taskTitle)).append("\n");
    sb.append("    taskDescription: ").append(toIndentedString(taskDescription)).append("\n");
    sb.append("    numberOfHumanWorkersPerDataObject: ").append(toIndentedString(numberOfHumanWorkersPerDataObject)).append("\n");
    sb.append("    taskTimeLimitInSeconds: ").append(toIndentedString(taskTimeLimitInSeconds)).append("\n");
    sb.append("    taskAvailabilityLifetimeInSeconds: ").append(toIndentedString(taskAvailabilityLifetimeInSeconds)).append("\n");
    sb.append("    maxConcurrentTaskCount: ").append(toIndentedString(maxConcurrentTaskCount)).append("\n");
    sb.append("    annotationConsolidationConfig: ").append(toIndentedString(annotationConsolidationConfig)).append("\n");
    sb.append("    publicWorkforceTaskPrice: ").append(toIndentedString(publicWorkforceTaskPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkteamArn");
    openapiFields.add("UiConfig");
    openapiFields.add("PreHumanTaskLambdaArn");
    openapiFields.add("TaskKeywords");
    openapiFields.add("TaskTitle");
    openapiFields.add("TaskDescription");
    openapiFields.add("NumberOfHumanWorkersPerDataObject");
    openapiFields.add("TaskTimeLimitInSeconds");
    openapiFields.add("TaskAvailabilityLifetimeInSeconds");
    openapiFields.add("MaxConcurrentTaskCount");
    openapiFields.add("AnnotationConsolidationConfig");
    openapiFields.add("PublicWorkforceTaskPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("WorkteamArn");
    openapiRequiredFields.add("UiConfig");
    openapiRequiredFields.add("PreHumanTaskLambdaArn");
    openapiRequiredFields.add("TaskTitle");
    openapiRequiredFields.add("TaskDescription");
    openapiRequiredFields.add("NumberOfHumanWorkersPerDataObject");
    openapiRequiredFields.add("TaskTimeLimitInSeconds");
    openapiRequiredFields.add("AnnotationConsolidationConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLabelingJobRequestHumanTaskConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLabelingJobRequestHumanTaskConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLabelingJobRequestHumanTaskConfig is not found in the empty JSON string", CreateLabelingJobRequestHumanTaskConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLabelingJobRequestHumanTaskConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLabelingJobRequestHumanTaskConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLabelingJobRequestHumanTaskConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `WorkteamArn`
      String.validateJsonElement(jsonObj.get("WorkteamArn"));
      // validate the required field `UiConfig`
      HumanTaskConfigUiConfig.validateJsonElement(jsonObj.get("UiConfig"));
      // validate the required field `PreHumanTaskLambdaArn`
      String.validateJsonElement(jsonObj.get("PreHumanTaskLambdaArn"));
      // validate the optional field `TaskKeywords`
      if (jsonObj.get("TaskKeywords") != null && !jsonObj.get("TaskKeywords").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TaskKeywords"));
      }
      // validate the required field `TaskTitle`
      String.validateJsonElement(jsonObj.get("TaskTitle"));
      // validate the required field `TaskDescription`
      String.validateJsonElement(jsonObj.get("TaskDescription"));
      // validate the required field `NumberOfHumanWorkersPerDataObject`
      Integer.validateJsonElement(jsonObj.get("NumberOfHumanWorkersPerDataObject"));
      // validate the required field `TaskTimeLimitInSeconds`
      Integer.validateJsonElement(jsonObj.get("TaskTimeLimitInSeconds"));
      // validate the optional field `TaskAvailabilityLifetimeInSeconds`
      if (jsonObj.get("TaskAvailabilityLifetimeInSeconds") != null && !jsonObj.get("TaskAvailabilityLifetimeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TaskAvailabilityLifetimeInSeconds"));
      }
      // validate the optional field `MaxConcurrentTaskCount`
      if (jsonObj.get("MaxConcurrentTaskCount") != null && !jsonObj.get("MaxConcurrentTaskCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxConcurrentTaskCount"));
      }
      // validate the required field `AnnotationConsolidationConfig`
      HumanTaskConfigAnnotationConsolidationConfig.validateJsonElement(jsonObj.get("AnnotationConsolidationConfig"));
      // validate the optional field `PublicWorkforceTaskPrice`
      if (jsonObj.get("PublicWorkforceTaskPrice") != null && !jsonObj.get("PublicWorkforceTaskPrice").isJsonNull()) {
        HumanTaskConfigPublicWorkforceTaskPrice.validateJsonElement(jsonObj.get("PublicWorkforceTaskPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLabelingJobRequestHumanTaskConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLabelingJobRequestHumanTaskConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLabelingJobRequestHumanTaskConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLabelingJobRequestHumanTaskConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLabelingJobRequestHumanTaskConfig>() {
           @Override
           public void write(JsonWriter out, CreateLabelingJobRequestHumanTaskConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLabelingJobRequestHumanTaskConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLabelingJobRequestHumanTaskConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLabelingJobRequestHumanTaskConfig
   * @throws IOException if the JSON string is invalid with respect to CreateLabelingJobRequestHumanTaskConfig
   */
  public static CreateLabelingJobRequestHumanTaskConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLabelingJobRequestHumanTaskConfig.class);
  }

  /**
   * Convert an instance of CreateLabelingJobRequestHumanTaskConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

