/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoCodecSettingsFrameCaptureSettings;
import org.openapitools.client.model.VideoCodecSettingsH264Settings;
import org.openapitools.client.model.VideoCodecSettingsH265Settings;
import org.openapitools.client.model.VideoCodecSettingsMpeg2Settings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoDescriptionCodecSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoDescriptionCodecSettings {
  public static final String SERIALIZED_NAME_FRAME_CAPTURE_SETTINGS = "FrameCaptureSettings";
  @SerializedName(SERIALIZED_NAME_FRAME_CAPTURE_SETTINGS)
  private VideoCodecSettingsFrameCaptureSettings frameCaptureSettings;

  public static final String SERIALIZED_NAME_H264_SETTINGS = "H264Settings";
  @SerializedName(SERIALIZED_NAME_H264_SETTINGS)
  private VideoCodecSettingsH264Settings h264Settings;

  public static final String SERIALIZED_NAME_H265_SETTINGS = "H265Settings";
  @SerializedName(SERIALIZED_NAME_H265_SETTINGS)
  private VideoCodecSettingsH265Settings h265Settings;

  public static final String SERIALIZED_NAME_MPEG2_SETTINGS = "Mpeg2Settings";
  @SerializedName(SERIALIZED_NAME_MPEG2_SETTINGS)
  private VideoCodecSettingsMpeg2Settings mpeg2Settings;

  public VideoDescriptionCodecSettings() {
  }

  public VideoDescriptionCodecSettings frameCaptureSettings(VideoCodecSettingsFrameCaptureSettings frameCaptureSettings) {
    this.frameCaptureSettings = frameCaptureSettings;
    return this;
  }

  /**
   * Get frameCaptureSettings
   * @return frameCaptureSettings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsFrameCaptureSettings getFrameCaptureSettings() {
    return frameCaptureSettings;
  }

  public void setFrameCaptureSettings(VideoCodecSettingsFrameCaptureSettings frameCaptureSettings) {
    this.frameCaptureSettings = frameCaptureSettings;
  }


  public VideoDescriptionCodecSettings h264Settings(VideoCodecSettingsH264Settings h264Settings) {
    this.h264Settings = h264Settings;
    return this;
  }

  /**
   * Get h264Settings
   * @return h264Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsH264Settings getH264Settings() {
    return h264Settings;
  }

  public void setH264Settings(VideoCodecSettingsH264Settings h264Settings) {
    this.h264Settings = h264Settings;
  }


  public VideoDescriptionCodecSettings h265Settings(VideoCodecSettingsH265Settings h265Settings) {
    this.h265Settings = h265Settings;
    return this;
  }

  /**
   * Get h265Settings
   * @return h265Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsH265Settings getH265Settings() {
    return h265Settings;
  }

  public void setH265Settings(VideoCodecSettingsH265Settings h265Settings) {
    this.h265Settings = h265Settings;
  }


  public VideoDescriptionCodecSettings mpeg2Settings(VideoCodecSettingsMpeg2Settings mpeg2Settings) {
    this.mpeg2Settings = mpeg2Settings;
    return this;
  }

  /**
   * Get mpeg2Settings
   * @return mpeg2Settings
   */
  @javax.annotation.Nullable
  public VideoCodecSettingsMpeg2Settings getMpeg2Settings() {
    return mpeg2Settings;
  }

  public void setMpeg2Settings(VideoCodecSettingsMpeg2Settings mpeg2Settings) {
    this.mpeg2Settings = mpeg2Settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoDescriptionCodecSettings videoDescriptionCodecSettings = (VideoDescriptionCodecSettings) o;
    return Objects.equals(this.frameCaptureSettings, videoDescriptionCodecSettings.frameCaptureSettings) &&
        Objects.equals(this.h264Settings, videoDescriptionCodecSettings.h264Settings) &&
        Objects.equals(this.h265Settings, videoDescriptionCodecSettings.h265Settings) &&
        Objects.equals(this.mpeg2Settings, videoDescriptionCodecSettings.mpeg2Settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameCaptureSettings, h264Settings, h265Settings, mpeg2Settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoDescriptionCodecSettings {\n");
    sb.append("    frameCaptureSettings: ").append(toIndentedString(frameCaptureSettings)).append("\n");
    sb.append("    h264Settings: ").append(toIndentedString(h264Settings)).append("\n");
    sb.append("    h265Settings: ").append(toIndentedString(h265Settings)).append("\n");
    sb.append("    mpeg2Settings: ").append(toIndentedString(mpeg2Settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FrameCaptureSettings");
    openapiFields.add("H264Settings");
    openapiFields.add("H265Settings");
    openapiFields.add("Mpeg2Settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoDescriptionCodecSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoDescriptionCodecSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoDescriptionCodecSettings is not found in the empty JSON string", VideoDescriptionCodecSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoDescriptionCodecSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoDescriptionCodecSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FrameCaptureSettings`
      if (jsonObj.get("FrameCaptureSettings") != null && !jsonObj.get("FrameCaptureSettings").isJsonNull()) {
        VideoCodecSettingsFrameCaptureSettings.validateJsonElement(jsonObj.get("FrameCaptureSettings"));
      }
      // validate the optional field `H264Settings`
      if (jsonObj.get("H264Settings") != null && !jsonObj.get("H264Settings").isJsonNull()) {
        VideoCodecSettingsH264Settings.validateJsonElement(jsonObj.get("H264Settings"));
      }
      // validate the optional field `H265Settings`
      if (jsonObj.get("H265Settings") != null && !jsonObj.get("H265Settings").isJsonNull()) {
        VideoCodecSettingsH265Settings.validateJsonElement(jsonObj.get("H265Settings"));
      }
      // validate the optional field `Mpeg2Settings`
      if (jsonObj.get("Mpeg2Settings") != null && !jsonObj.get("Mpeg2Settings").isJsonNull()) {
        VideoCodecSettingsMpeg2Settings.validateJsonElement(jsonObj.get("Mpeg2Settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoDescriptionCodecSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoDescriptionCodecSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoDescriptionCodecSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoDescriptionCodecSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoDescriptionCodecSettings>() {
           @Override
           public void write(JsonWriter out, VideoDescriptionCodecSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoDescriptionCodecSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoDescriptionCodecSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoDescriptionCodecSettings
   * @throws IOException if the JSON string is invalid with respect to VideoDescriptionCodecSettings
   */
  public static VideoDescriptionCodecSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoDescriptionCodecSettings.class);
  }

  /**
   * Convert an instance of VideoDescriptionCodecSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

