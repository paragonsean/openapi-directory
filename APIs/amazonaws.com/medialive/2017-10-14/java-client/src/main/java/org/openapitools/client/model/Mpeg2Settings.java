/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AfdSignaling;
import org.openapitools.client.model.FixedAfd;
import org.openapitools.client.model.FrameCaptureSettingsTimecodeBurninSettings;
import org.openapitools.client.model.Mpeg2AdaptiveQuantization;
import org.openapitools.client.model.Mpeg2ColorMetadata;
import org.openapitools.client.model.Mpeg2ColorSpace;
import org.openapitools.client.model.Mpeg2DisplayRatio;
import org.openapitools.client.model.Mpeg2GopSizeUnits;
import org.openapitools.client.model.Mpeg2ScanType;
import org.openapitools.client.model.Mpeg2SettingsFilterSettings;
import org.openapitools.client.model.Mpeg2SubGopLength;
import org.openapitools.client.model.Mpeg2TimecodeInsertionBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Mpeg2 Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mpeg2Settings {
  public static final String SERIALIZED_NAME_ADAPTIVE_QUANTIZATION = "AdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_ADAPTIVE_QUANTIZATION)
  private Mpeg2AdaptiveQuantization adaptiveQuantization;

  public static final String SERIALIZED_NAME_AFD_SIGNALING = "AfdSignaling";
  @SerializedName(SERIALIZED_NAME_AFD_SIGNALING)
  private AfdSignaling afdSignaling;

  public static final String SERIALIZED_NAME_COLOR_METADATA = "ColorMetadata";
  @SerializedName(SERIALIZED_NAME_COLOR_METADATA)
  private Mpeg2ColorMetadata colorMetadata;

  public static final String SERIALIZED_NAME_COLOR_SPACE = "ColorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  private Mpeg2ColorSpace colorSpace;

  public static final String SERIALIZED_NAME_DISPLAY_ASPECT_RATIO = "DisplayAspectRatio";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ASPECT_RATIO)
  private Mpeg2DisplayRatio displayAspectRatio;

  public static final String SERIALIZED_NAME_FILTER_SETTINGS = "FilterSettings";
  @SerializedName(SERIALIZED_NAME_FILTER_SETTINGS)
  private Mpeg2SettingsFilterSettings filterSettings;

  public static final String SERIALIZED_NAME_FIXED_AFD = "FixedAfd";
  @SerializedName(SERIALIZED_NAME_FIXED_AFD)
  private FixedAfd fixedAfd;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_GOP_CLOSED_CADENCE = "GopClosedCadence";
  @SerializedName(SERIALIZED_NAME_GOP_CLOSED_CADENCE)
  private Integer gopClosedCadence;

  public static final String SERIALIZED_NAME_GOP_NUM_B_FRAMES = "GopNumBFrames";
  @SerializedName(SERIALIZED_NAME_GOP_NUM_B_FRAMES)
  private Integer gopNumBFrames;

  public static final String SERIALIZED_NAME_GOP_SIZE = "GopSize";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE)
  private Double gopSize;

  public static final String SERIALIZED_NAME_GOP_SIZE_UNITS = "GopSizeUnits";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE_UNITS)
  private Mpeg2GopSizeUnits gopSizeUnits;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "ScanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private Mpeg2ScanType scanType;

  public static final String SERIALIZED_NAME_SUBGOP_LENGTH = "SubgopLength";
  @SerializedName(SERIALIZED_NAME_SUBGOP_LENGTH)
  private Mpeg2SubGopLength subgopLength;

  public static final String SERIALIZED_NAME_TIMECODE_INSERTION = "TimecodeInsertion";
  @SerializedName(SERIALIZED_NAME_TIMECODE_INSERTION)
  private Mpeg2TimecodeInsertionBehavior timecodeInsertion;

  public static final String SERIALIZED_NAME_TIMECODE_BURNIN_SETTINGS = "TimecodeBurninSettings";
  @SerializedName(SERIALIZED_NAME_TIMECODE_BURNIN_SETTINGS)
  private FrameCaptureSettingsTimecodeBurninSettings timecodeBurninSettings;

  public Mpeg2Settings() {
  }

  public Mpeg2Settings adaptiveQuantization(Mpeg2AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
    return this;
  }

  /**
   * Get adaptiveQuantization
   * @return adaptiveQuantization
   */
  @javax.annotation.Nullable
  public Mpeg2AdaptiveQuantization getAdaptiveQuantization() {
    return adaptiveQuantization;
  }

  public void setAdaptiveQuantization(Mpeg2AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
  }


  public Mpeg2Settings afdSignaling(AfdSignaling afdSignaling) {
    this.afdSignaling = afdSignaling;
    return this;
  }

  /**
   * Get afdSignaling
   * @return afdSignaling
   */
  @javax.annotation.Nullable
  public AfdSignaling getAfdSignaling() {
    return afdSignaling;
  }

  public void setAfdSignaling(AfdSignaling afdSignaling) {
    this.afdSignaling = afdSignaling;
  }


  public Mpeg2Settings colorMetadata(Mpeg2ColorMetadata colorMetadata) {
    this.colorMetadata = colorMetadata;
    return this;
  }

  /**
   * Get colorMetadata
   * @return colorMetadata
   */
  @javax.annotation.Nullable
  public Mpeg2ColorMetadata getColorMetadata() {
    return colorMetadata;
  }

  public void setColorMetadata(Mpeg2ColorMetadata colorMetadata) {
    this.colorMetadata = colorMetadata;
  }


  public Mpeg2Settings colorSpace(Mpeg2ColorSpace colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * Get colorSpace
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public Mpeg2ColorSpace getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(Mpeg2ColorSpace colorSpace) {
    this.colorSpace = colorSpace;
  }


  public Mpeg2Settings displayAspectRatio(Mpeg2DisplayRatio displayAspectRatio) {
    this.displayAspectRatio = displayAspectRatio;
    return this;
  }

  /**
   * Get displayAspectRatio
   * @return displayAspectRatio
   */
  @javax.annotation.Nullable
  public Mpeg2DisplayRatio getDisplayAspectRatio() {
    return displayAspectRatio;
  }

  public void setDisplayAspectRatio(Mpeg2DisplayRatio displayAspectRatio) {
    this.displayAspectRatio = displayAspectRatio;
  }


  public Mpeg2Settings filterSettings(Mpeg2SettingsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
    return this;
  }

  /**
   * Get filterSettings
   * @return filterSettings
   */
  @javax.annotation.Nullable
  public Mpeg2SettingsFilterSettings getFilterSettings() {
    return filterSettings;
  }

  public void setFilterSettings(Mpeg2SettingsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
  }


  public Mpeg2Settings fixedAfd(FixedAfd fixedAfd) {
    this.fixedAfd = fixedAfd;
    return this;
  }

  /**
   * Get fixedAfd
   * @return fixedAfd
   */
  @javax.annotation.Nullable
  public FixedAfd getFixedAfd() {
    return fixedAfd;
  }

  public void setFixedAfd(FixedAfd fixedAfd) {
    this.fixedAfd = fixedAfd;
  }


  public Mpeg2Settings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nonnull
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public Mpeg2Settings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nonnull
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public Mpeg2Settings gopClosedCadence(Integer gopClosedCadence) {
    this.gopClosedCadence = gopClosedCadence;
    return this;
  }

  /**
   * Get gopClosedCadence
   * @return gopClosedCadence
   */
  @javax.annotation.Nullable
  public Integer getGopClosedCadence() {
    return gopClosedCadence;
  }

  public void setGopClosedCadence(Integer gopClosedCadence) {
    this.gopClosedCadence = gopClosedCadence;
  }


  public Mpeg2Settings gopNumBFrames(Integer gopNumBFrames) {
    this.gopNumBFrames = gopNumBFrames;
    return this;
  }

  /**
   * Get gopNumBFrames
   * @return gopNumBFrames
   */
  @javax.annotation.Nullable
  public Integer getGopNumBFrames() {
    return gopNumBFrames;
  }

  public void setGopNumBFrames(Integer gopNumBFrames) {
    this.gopNumBFrames = gopNumBFrames;
  }


  public Mpeg2Settings gopSize(Double gopSize) {
    this.gopSize = gopSize;
    return this;
  }

  /**
   * Get gopSize
   * @return gopSize
   */
  @javax.annotation.Nullable
  public Double getGopSize() {
    return gopSize;
  }

  public void setGopSize(Double gopSize) {
    this.gopSize = gopSize;
  }


  public Mpeg2Settings gopSizeUnits(Mpeg2GopSizeUnits gopSizeUnits) {
    this.gopSizeUnits = gopSizeUnits;
    return this;
  }

  /**
   * Get gopSizeUnits
   * @return gopSizeUnits
   */
  @javax.annotation.Nullable
  public Mpeg2GopSizeUnits getGopSizeUnits() {
    return gopSizeUnits;
  }

  public void setGopSizeUnits(Mpeg2GopSizeUnits gopSizeUnits) {
    this.gopSizeUnits = gopSizeUnits;
  }


  public Mpeg2Settings scanType(Mpeg2ScanType scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * Get scanType
   * @return scanType
   */
  @javax.annotation.Nullable
  public Mpeg2ScanType getScanType() {
    return scanType;
  }

  public void setScanType(Mpeg2ScanType scanType) {
    this.scanType = scanType;
  }


  public Mpeg2Settings subgopLength(Mpeg2SubGopLength subgopLength) {
    this.subgopLength = subgopLength;
    return this;
  }

  /**
   * Get subgopLength
   * @return subgopLength
   */
  @javax.annotation.Nullable
  public Mpeg2SubGopLength getSubgopLength() {
    return subgopLength;
  }

  public void setSubgopLength(Mpeg2SubGopLength subgopLength) {
    this.subgopLength = subgopLength;
  }


  public Mpeg2Settings timecodeInsertion(Mpeg2TimecodeInsertionBehavior timecodeInsertion) {
    this.timecodeInsertion = timecodeInsertion;
    return this;
  }

  /**
   * Get timecodeInsertion
   * @return timecodeInsertion
   */
  @javax.annotation.Nullable
  public Mpeg2TimecodeInsertionBehavior getTimecodeInsertion() {
    return timecodeInsertion;
  }

  public void setTimecodeInsertion(Mpeg2TimecodeInsertionBehavior timecodeInsertion) {
    this.timecodeInsertion = timecodeInsertion;
  }


  public Mpeg2Settings timecodeBurninSettings(FrameCaptureSettingsTimecodeBurninSettings timecodeBurninSettings) {
    this.timecodeBurninSettings = timecodeBurninSettings;
    return this;
  }

  /**
   * Get timecodeBurninSettings
   * @return timecodeBurninSettings
   */
  @javax.annotation.Nullable
  public FrameCaptureSettingsTimecodeBurninSettings getTimecodeBurninSettings() {
    return timecodeBurninSettings;
  }

  public void setTimecodeBurninSettings(FrameCaptureSettingsTimecodeBurninSettings timecodeBurninSettings) {
    this.timecodeBurninSettings = timecodeBurninSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mpeg2Settings mpeg2Settings = (Mpeg2Settings) o;
    return Objects.equals(this.adaptiveQuantization, mpeg2Settings.adaptiveQuantization) &&
        Objects.equals(this.afdSignaling, mpeg2Settings.afdSignaling) &&
        Objects.equals(this.colorMetadata, mpeg2Settings.colorMetadata) &&
        Objects.equals(this.colorSpace, mpeg2Settings.colorSpace) &&
        Objects.equals(this.displayAspectRatio, mpeg2Settings.displayAspectRatio) &&
        Objects.equals(this.filterSettings, mpeg2Settings.filterSettings) &&
        Objects.equals(this.fixedAfd, mpeg2Settings.fixedAfd) &&
        Objects.equals(this.framerateDenominator, mpeg2Settings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, mpeg2Settings.framerateNumerator) &&
        Objects.equals(this.gopClosedCadence, mpeg2Settings.gopClosedCadence) &&
        Objects.equals(this.gopNumBFrames, mpeg2Settings.gopNumBFrames) &&
        Objects.equals(this.gopSize, mpeg2Settings.gopSize) &&
        Objects.equals(this.gopSizeUnits, mpeg2Settings.gopSizeUnits) &&
        Objects.equals(this.scanType, mpeg2Settings.scanType) &&
        Objects.equals(this.subgopLength, mpeg2Settings.subgopLength) &&
        Objects.equals(this.timecodeInsertion, mpeg2Settings.timecodeInsertion) &&
        Objects.equals(this.timecodeBurninSettings, mpeg2Settings.timecodeBurninSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adaptiveQuantization, afdSignaling, colorMetadata, colorSpace, displayAspectRatio, filterSettings, fixedAfd, framerateDenominator, framerateNumerator, gopClosedCadence, gopNumBFrames, gopSize, gopSizeUnits, scanType, subgopLength, timecodeInsertion, timecodeBurninSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mpeg2Settings {\n");
    sb.append("    adaptiveQuantization: ").append(toIndentedString(adaptiveQuantization)).append("\n");
    sb.append("    afdSignaling: ").append(toIndentedString(afdSignaling)).append("\n");
    sb.append("    colorMetadata: ").append(toIndentedString(colorMetadata)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    displayAspectRatio: ").append(toIndentedString(displayAspectRatio)).append("\n");
    sb.append("    filterSettings: ").append(toIndentedString(filterSettings)).append("\n");
    sb.append("    fixedAfd: ").append(toIndentedString(fixedAfd)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    gopClosedCadence: ").append(toIndentedString(gopClosedCadence)).append("\n");
    sb.append("    gopNumBFrames: ").append(toIndentedString(gopNumBFrames)).append("\n");
    sb.append("    gopSize: ").append(toIndentedString(gopSize)).append("\n");
    sb.append("    gopSizeUnits: ").append(toIndentedString(gopSizeUnits)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("    subgopLength: ").append(toIndentedString(subgopLength)).append("\n");
    sb.append("    timecodeInsertion: ").append(toIndentedString(timecodeInsertion)).append("\n");
    sb.append("    timecodeBurninSettings: ").append(toIndentedString(timecodeBurninSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdaptiveQuantization");
    openapiFields.add("AfdSignaling");
    openapiFields.add("ColorMetadata");
    openapiFields.add("ColorSpace");
    openapiFields.add("DisplayAspectRatio");
    openapiFields.add("FilterSettings");
    openapiFields.add("FixedAfd");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("GopClosedCadence");
    openapiFields.add("GopNumBFrames");
    openapiFields.add("GopSize");
    openapiFields.add("GopSizeUnits");
    openapiFields.add("ScanType");
    openapiFields.add("SubgopLength");
    openapiFields.add("TimecodeInsertion");
    openapiFields.add("TimecodeBurninSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FramerateDenominator");
    openapiRequiredFields.add("FramerateNumerator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mpeg2Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mpeg2Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mpeg2Settings is not found in the empty JSON string", Mpeg2Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mpeg2Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mpeg2Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Mpeg2Settings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdaptiveQuantization`
      if (jsonObj.get("AdaptiveQuantization") != null && !jsonObj.get("AdaptiveQuantization").isJsonNull()) {
        Mpeg2AdaptiveQuantization.validateJsonElement(jsonObj.get("AdaptiveQuantization"));
      }
      // validate the optional field `AfdSignaling`
      if (jsonObj.get("AfdSignaling") != null && !jsonObj.get("AfdSignaling").isJsonNull()) {
        AfdSignaling.validateJsonElement(jsonObj.get("AfdSignaling"));
      }
      // validate the optional field `ColorMetadata`
      if (jsonObj.get("ColorMetadata") != null && !jsonObj.get("ColorMetadata").isJsonNull()) {
        Mpeg2ColorMetadata.validateJsonElement(jsonObj.get("ColorMetadata"));
      }
      // validate the optional field `ColorSpace`
      if (jsonObj.get("ColorSpace") != null && !jsonObj.get("ColorSpace").isJsonNull()) {
        Mpeg2ColorSpace.validateJsonElement(jsonObj.get("ColorSpace"));
      }
      // validate the optional field `DisplayAspectRatio`
      if (jsonObj.get("DisplayAspectRatio") != null && !jsonObj.get("DisplayAspectRatio").isJsonNull()) {
        Mpeg2DisplayRatio.validateJsonElement(jsonObj.get("DisplayAspectRatio"));
      }
      // validate the optional field `FilterSettings`
      if (jsonObj.get("FilterSettings") != null && !jsonObj.get("FilterSettings").isJsonNull()) {
        Mpeg2SettingsFilterSettings.validateJsonElement(jsonObj.get("FilterSettings"));
      }
      // validate the optional field `FixedAfd`
      if (jsonObj.get("FixedAfd") != null && !jsonObj.get("FixedAfd").isJsonNull()) {
        FixedAfd.validateJsonElement(jsonObj.get("FixedAfd"));
      }
      // validate the required field `FramerateDenominator`
      Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      // validate the required field `FramerateNumerator`
      Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      // validate the optional field `GopClosedCadence`
      if (jsonObj.get("GopClosedCadence") != null && !jsonObj.get("GopClosedCadence").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GopClosedCadence"));
      }
      // validate the optional field `GopNumBFrames`
      if (jsonObj.get("GopNumBFrames") != null && !jsonObj.get("GopNumBFrames").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GopNumBFrames"));
      }
      // validate the optional field `GopSize`
      if (jsonObj.get("GopSize") != null && !jsonObj.get("GopSize").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("GopSize"));
      }
      // validate the optional field `GopSizeUnits`
      if (jsonObj.get("GopSizeUnits") != null && !jsonObj.get("GopSizeUnits").isJsonNull()) {
        Mpeg2GopSizeUnits.validateJsonElement(jsonObj.get("GopSizeUnits"));
      }
      // validate the optional field `ScanType`
      if (jsonObj.get("ScanType") != null && !jsonObj.get("ScanType").isJsonNull()) {
        Mpeg2ScanType.validateJsonElement(jsonObj.get("ScanType"));
      }
      // validate the optional field `SubgopLength`
      if (jsonObj.get("SubgopLength") != null && !jsonObj.get("SubgopLength").isJsonNull()) {
        Mpeg2SubGopLength.validateJsonElement(jsonObj.get("SubgopLength"));
      }
      // validate the optional field `TimecodeInsertion`
      if (jsonObj.get("TimecodeInsertion") != null && !jsonObj.get("TimecodeInsertion").isJsonNull()) {
        Mpeg2TimecodeInsertionBehavior.validateJsonElement(jsonObj.get("TimecodeInsertion"));
      }
      // validate the optional field `TimecodeBurninSettings`
      if (jsonObj.get("TimecodeBurninSettings") != null && !jsonObj.get("TimecodeBurninSettings").isJsonNull()) {
        FrameCaptureSettingsTimecodeBurninSettings.validateJsonElement(jsonObj.get("TimecodeBurninSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mpeg2Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mpeg2Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mpeg2Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mpeg2Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<Mpeg2Settings>() {
           @Override
           public void write(JsonWriter out, Mpeg2Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mpeg2Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mpeg2Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mpeg2Settings
   * @throws IOException if the JSON string is invalid with respect to Mpeg2Settings
   */
  public static Mpeg2Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mpeg2Settings.class);
  }

  /**
   * Convert an instance of Mpeg2Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

