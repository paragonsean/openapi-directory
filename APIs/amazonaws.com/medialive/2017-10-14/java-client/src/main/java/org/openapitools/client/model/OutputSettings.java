/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OutputSettingsArchiveOutputSettings;
import org.openapitools.client.model.OutputSettingsFrameCaptureOutputSettings;
import org.openapitools.client.model.OutputSettingsHlsOutputSettings;
import org.openapitools.client.model.OutputSettingsMsSmoothOutputSettings;
import org.openapitools.client.model.OutputSettingsMultiplexOutputSettings;
import org.openapitools.client.model.OutputSettingsRtmpOutputSettings;
import org.openapitools.client.model.OutputSettingsUdpOutputSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputSettings {
  public static final String SERIALIZED_NAME_ARCHIVE_OUTPUT_SETTINGS = "ArchiveOutputSettings";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_OUTPUT_SETTINGS)
  private OutputSettingsArchiveOutputSettings archiveOutputSettings;

  public static final String SERIALIZED_NAME_FRAME_CAPTURE_OUTPUT_SETTINGS = "FrameCaptureOutputSettings";
  @SerializedName(SERIALIZED_NAME_FRAME_CAPTURE_OUTPUT_SETTINGS)
  private OutputSettingsFrameCaptureOutputSettings frameCaptureOutputSettings;

  public static final String SERIALIZED_NAME_HLS_OUTPUT_SETTINGS = "HlsOutputSettings";
  @SerializedName(SERIALIZED_NAME_HLS_OUTPUT_SETTINGS)
  private OutputSettingsHlsOutputSettings hlsOutputSettings;

  public static final String SERIALIZED_NAME_MEDIA_PACKAGE_OUTPUT_SETTINGS = "MediaPackageOutputSettings";
  @SerializedName(SERIALIZED_NAME_MEDIA_PACKAGE_OUTPUT_SETTINGS)
  private Object mediaPackageOutputSettings;

  public static final String SERIALIZED_NAME_MS_SMOOTH_OUTPUT_SETTINGS = "MsSmoothOutputSettings";
  @SerializedName(SERIALIZED_NAME_MS_SMOOTH_OUTPUT_SETTINGS)
  private OutputSettingsMsSmoothOutputSettings msSmoothOutputSettings;

  public static final String SERIALIZED_NAME_MULTIPLEX_OUTPUT_SETTINGS = "MultiplexOutputSettings";
  @SerializedName(SERIALIZED_NAME_MULTIPLEX_OUTPUT_SETTINGS)
  private OutputSettingsMultiplexOutputSettings multiplexOutputSettings;

  public static final String SERIALIZED_NAME_RTMP_OUTPUT_SETTINGS = "RtmpOutputSettings";
  @SerializedName(SERIALIZED_NAME_RTMP_OUTPUT_SETTINGS)
  private OutputSettingsRtmpOutputSettings rtmpOutputSettings;

  public static final String SERIALIZED_NAME_UDP_OUTPUT_SETTINGS = "UdpOutputSettings";
  @SerializedName(SERIALIZED_NAME_UDP_OUTPUT_SETTINGS)
  private OutputSettingsUdpOutputSettings udpOutputSettings;

  public OutputSettings() {
  }

  public OutputSettings archiveOutputSettings(OutputSettingsArchiveOutputSettings archiveOutputSettings) {
    this.archiveOutputSettings = archiveOutputSettings;
    return this;
  }

  /**
   * Get archiveOutputSettings
   * @return archiveOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsArchiveOutputSettings getArchiveOutputSettings() {
    return archiveOutputSettings;
  }

  public void setArchiveOutputSettings(OutputSettingsArchiveOutputSettings archiveOutputSettings) {
    this.archiveOutputSettings = archiveOutputSettings;
  }


  public OutputSettings frameCaptureOutputSettings(OutputSettingsFrameCaptureOutputSettings frameCaptureOutputSettings) {
    this.frameCaptureOutputSettings = frameCaptureOutputSettings;
    return this;
  }

  /**
   * Get frameCaptureOutputSettings
   * @return frameCaptureOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsFrameCaptureOutputSettings getFrameCaptureOutputSettings() {
    return frameCaptureOutputSettings;
  }

  public void setFrameCaptureOutputSettings(OutputSettingsFrameCaptureOutputSettings frameCaptureOutputSettings) {
    this.frameCaptureOutputSettings = frameCaptureOutputSettings;
  }


  public OutputSettings hlsOutputSettings(OutputSettingsHlsOutputSettings hlsOutputSettings) {
    this.hlsOutputSettings = hlsOutputSettings;
    return this;
  }

  /**
   * Get hlsOutputSettings
   * @return hlsOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsHlsOutputSettings getHlsOutputSettings() {
    return hlsOutputSettings;
  }

  public void setHlsOutputSettings(OutputSettingsHlsOutputSettings hlsOutputSettings) {
    this.hlsOutputSettings = hlsOutputSettings;
  }


  public OutputSettings mediaPackageOutputSettings(Object mediaPackageOutputSettings) {
    this.mediaPackageOutputSettings = mediaPackageOutputSettings;
    return this;
  }

  /**
   * Get mediaPackageOutputSettings
   * @return mediaPackageOutputSettings
   */
  @javax.annotation.Nullable
  public Object getMediaPackageOutputSettings() {
    return mediaPackageOutputSettings;
  }

  public void setMediaPackageOutputSettings(Object mediaPackageOutputSettings) {
    this.mediaPackageOutputSettings = mediaPackageOutputSettings;
  }


  public OutputSettings msSmoothOutputSettings(OutputSettingsMsSmoothOutputSettings msSmoothOutputSettings) {
    this.msSmoothOutputSettings = msSmoothOutputSettings;
    return this;
  }

  /**
   * Get msSmoothOutputSettings
   * @return msSmoothOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsMsSmoothOutputSettings getMsSmoothOutputSettings() {
    return msSmoothOutputSettings;
  }

  public void setMsSmoothOutputSettings(OutputSettingsMsSmoothOutputSettings msSmoothOutputSettings) {
    this.msSmoothOutputSettings = msSmoothOutputSettings;
  }


  public OutputSettings multiplexOutputSettings(OutputSettingsMultiplexOutputSettings multiplexOutputSettings) {
    this.multiplexOutputSettings = multiplexOutputSettings;
    return this;
  }

  /**
   * Get multiplexOutputSettings
   * @return multiplexOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsMultiplexOutputSettings getMultiplexOutputSettings() {
    return multiplexOutputSettings;
  }

  public void setMultiplexOutputSettings(OutputSettingsMultiplexOutputSettings multiplexOutputSettings) {
    this.multiplexOutputSettings = multiplexOutputSettings;
  }


  public OutputSettings rtmpOutputSettings(OutputSettingsRtmpOutputSettings rtmpOutputSettings) {
    this.rtmpOutputSettings = rtmpOutputSettings;
    return this;
  }

  /**
   * Get rtmpOutputSettings
   * @return rtmpOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsRtmpOutputSettings getRtmpOutputSettings() {
    return rtmpOutputSettings;
  }

  public void setRtmpOutputSettings(OutputSettingsRtmpOutputSettings rtmpOutputSettings) {
    this.rtmpOutputSettings = rtmpOutputSettings;
  }


  public OutputSettings udpOutputSettings(OutputSettingsUdpOutputSettings udpOutputSettings) {
    this.udpOutputSettings = udpOutputSettings;
    return this;
  }

  /**
   * Get udpOutputSettings
   * @return udpOutputSettings
   */
  @javax.annotation.Nullable
  public OutputSettingsUdpOutputSettings getUdpOutputSettings() {
    return udpOutputSettings;
  }

  public void setUdpOutputSettings(OutputSettingsUdpOutputSettings udpOutputSettings) {
    this.udpOutputSettings = udpOutputSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputSettings outputSettings = (OutputSettings) o;
    return Objects.equals(this.archiveOutputSettings, outputSettings.archiveOutputSettings) &&
        Objects.equals(this.frameCaptureOutputSettings, outputSettings.frameCaptureOutputSettings) &&
        Objects.equals(this.hlsOutputSettings, outputSettings.hlsOutputSettings) &&
        Objects.equals(this.mediaPackageOutputSettings, outputSettings.mediaPackageOutputSettings) &&
        Objects.equals(this.msSmoothOutputSettings, outputSettings.msSmoothOutputSettings) &&
        Objects.equals(this.multiplexOutputSettings, outputSettings.multiplexOutputSettings) &&
        Objects.equals(this.rtmpOutputSettings, outputSettings.rtmpOutputSettings) &&
        Objects.equals(this.udpOutputSettings, outputSettings.udpOutputSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveOutputSettings, frameCaptureOutputSettings, hlsOutputSettings, mediaPackageOutputSettings, msSmoothOutputSettings, multiplexOutputSettings, rtmpOutputSettings, udpOutputSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputSettings {\n");
    sb.append("    archiveOutputSettings: ").append(toIndentedString(archiveOutputSettings)).append("\n");
    sb.append("    frameCaptureOutputSettings: ").append(toIndentedString(frameCaptureOutputSettings)).append("\n");
    sb.append("    hlsOutputSettings: ").append(toIndentedString(hlsOutputSettings)).append("\n");
    sb.append("    mediaPackageOutputSettings: ").append(toIndentedString(mediaPackageOutputSettings)).append("\n");
    sb.append("    msSmoothOutputSettings: ").append(toIndentedString(msSmoothOutputSettings)).append("\n");
    sb.append("    multiplexOutputSettings: ").append(toIndentedString(multiplexOutputSettings)).append("\n");
    sb.append("    rtmpOutputSettings: ").append(toIndentedString(rtmpOutputSettings)).append("\n");
    sb.append("    udpOutputSettings: ").append(toIndentedString(udpOutputSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ArchiveOutputSettings");
    openapiFields.add("FrameCaptureOutputSettings");
    openapiFields.add("HlsOutputSettings");
    openapiFields.add("MediaPackageOutputSettings");
    openapiFields.add("MsSmoothOutputSettings");
    openapiFields.add("MultiplexOutputSettings");
    openapiFields.add("RtmpOutputSettings");
    openapiFields.add("UdpOutputSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputSettings is not found in the empty JSON string", OutputSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ArchiveOutputSettings`
      if (jsonObj.get("ArchiveOutputSettings") != null && !jsonObj.get("ArchiveOutputSettings").isJsonNull()) {
        OutputSettingsArchiveOutputSettings.validateJsonElement(jsonObj.get("ArchiveOutputSettings"));
      }
      // validate the optional field `FrameCaptureOutputSettings`
      if (jsonObj.get("FrameCaptureOutputSettings") != null && !jsonObj.get("FrameCaptureOutputSettings").isJsonNull()) {
        OutputSettingsFrameCaptureOutputSettings.validateJsonElement(jsonObj.get("FrameCaptureOutputSettings"));
      }
      // validate the optional field `HlsOutputSettings`
      if (jsonObj.get("HlsOutputSettings") != null && !jsonObj.get("HlsOutputSettings").isJsonNull()) {
        OutputSettingsHlsOutputSettings.validateJsonElement(jsonObj.get("HlsOutputSettings"));
      }
      // validate the optional field `MediaPackageOutputSettings`
      if (jsonObj.get("MediaPackageOutputSettings") != null && !jsonObj.get("MediaPackageOutputSettings").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("MediaPackageOutputSettings"));
      }
      // validate the optional field `MsSmoothOutputSettings`
      if (jsonObj.get("MsSmoothOutputSettings") != null && !jsonObj.get("MsSmoothOutputSettings").isJsonNull()) {
        OutputSettingsMsSmoothOutputSettings.validateJsonElement(jsonObj.get("MsSmoothOutputSettings"));
      }
      // validate the optional field `MultiplexOutputSettings`
      if (jsonObj.get("MultiplexOutputSettings") != null && !jsonObj.get("MultiplexOutputSettings").isJsonNull()) {
        OutputSettingsMultiplexOutputSettings.validateJsonElement(jsonObj.get("MultiplexOutputSettings"));
      }
      // validate the optional field `RtmpOutputSettings`
      if (jsonObj.get("RtmpOutputSettings") != null && !jsonObj.get("RtmpOutputSettings").isJsonNull()) {
        OutputSettingsRtmpOutputSettings.validateJsonElement(jsonObj.get("RtmpOutputSettings"));
      }
      // validate the optional field `UdpOutputSettings`
      if (jsonObj.get("UdpOutputSettings") != null && !jsonObj.get("UdpOutputSettings").isJsonNull()) {
        OutputSettingsUdpOutputSettings.validateJsonElement(jsonObj.get("UdpOutputSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputSettings>() {
           @Override
           public void write(JsonWriter out, OutputSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputSettings
   * @throws IOException if the JSON string is invalid with respect to OutputSettings
   */
  public static OutputSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputSettings.class);
  }

  /**
   * Convert an instance of OutputSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

