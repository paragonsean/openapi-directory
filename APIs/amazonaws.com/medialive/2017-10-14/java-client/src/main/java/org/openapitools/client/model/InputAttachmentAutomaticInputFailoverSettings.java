/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputAttachmentAutomaticInputFailoverSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputAttachmentAutomaticInputFailoverSettings {
  public static final String SERIALIZED_NAME_ERROR_CLEAR_TIME_MSEC = "ErrorClearTimeMsec";
  @SerializedName(SERIALIZED_NAME_ERROR_CLEAR_TIME_MSEC)
  private Integer errorClearTimeMsec;

  public static final String SERIALIZED_NAME_FAILOVER_CONDITIONS = "FailoverConditions";
  @SerializedName(SERIALIZED_NAME_FAILOVER_CONDITIONS)
  private List failoverConditions;

  public static final String SERIALIZED_NAME_INPUT_PREFERENCE = "InputPreference";
  @SerializedName(SERIALIZED_NAME_INPUT_PREFERENCE)
  private InputPreference inputPreference;

  public static final String SERIALIZED_NAME_SECONDARY_INPUT_ID = "SecondaryInputId";
  @SerializedName(SERIALIZED_NAME_SECONDARY_INPUT_ID)
  private String secondaryInputId;

  public InputAttachmentAutomaticInputFailoverSettings() {
  }

  public InputAttachmentAutomaticInputFailoverSettings errorClearTimeMsec(Integer errorClearTimeMsec) {
    this.errorClearTimeMsec = errorClearTimeMsec;
    return this;
  }

  /**
   * Get errorClearTimeMsec
   * @return errorClearTimeMsec
   */
  @javax.annotation.Nullable
  public Integer getErrorClearTimeMsec() {
    return errorClearTimeMsec;
  }

  public void setErrorClearTimeMsec(Integer errorClearTimeMsec) {
    this.errorClearTimeMsec = errorClearTimeMsec;
  }


  public InputAttachmentAutomaticInputFailoverSettings failoverConditions(List failoverConditions) {
    this.failoverConditions = failoverConditions;
    return this;
  }

  /**
   * Get failoverConditions
   * @return failoverConditions
   */
  @javax.annotation.Nullable
  public List getFailoverConditions() {
    return failoverConditions;
  }

  public void setFailoverConditions(List failoverConditions) {
    this.failoverConditions = failoverConditions;
  }


  public InputAttachmentAutomaticInputFailoverSettings inputPreference(InputPreference inputPreference) {
    this.inputPreference = inputPreference;
    return this;
  }

  /**
   * Get inputPreference
   * @return inputPreference
   */
  @javax.annotation.Nullable
  public InputPreference getInputPreference() {
    return inputPreference;
  }

  public void setInputPreference(InputPreference inputPreference) {
    this.inputPreference = inputPreference;
  }


  public InputAttachmentAutomaticInputFailoverSettings secondaryInputId(String secondaryInputId) {
    this.secondaryInputId = secondaryInputId;
    return this;
  }

  /**
   * Get secondaryInputId
   * @return secondaryInputId
   */
  @javax.annotation.Nonnull
  public String getSecondaryInputId() {
    return secondaryInputId;
  }

  public void setSecondaryInputId(String secondaryInputId) {
    this.secondaryInputId = secondaryInputId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputAttachmentAutomaticInputFailoverSettings inputAttachmentAutomaticInputFailoverSettings = (InputAttachmentAutomaticInputFailoverSettings) o;
    return Objects.equals(this.errorClearTimeMsec, inputAttachmentAutomaticInputFailoverSettings.errorClearTimeMsec) &&
        Objects.equals(this.failoverConditions, inputAttachmentAutomaticInputFailoverSettings.failoverConditions) &&
        Objects.equals(this.inputPreference, inputAttachmentAutomaticInputFailoverSettings.inputPreference) &&
        Objects.equals(this.secondaryInputId, inputAttachmentAutomaticInputFailoverSettings.secondaryInputId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorClearTimeMsec, failoverConditions, inputPreference, secondaryInputId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputAttachmentAutomaticInputFailoverSettings {\n");
    sb.append("    errorClearTimeMsec: ").append(toIndentedString(errorClearTimeMsec)).append("\n");
    sb.append("    failoverConditions: ").append(toIndentedString(failoverConditions)).append("\n");
    sb.append("    inputPreference: ").append(toIndentedString(inputPreference)).append("\n");
    sb.append("    secondaryInputId: ").append(toIndentedString(secondaryInputId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ErrorClearTimeMsec");
    openapiFields.add("FailoverConditions");
    openapiFields.add("InputPreference");
    openapiFields.add("SecondaryInputId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SecondaryInputId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputAttachmentAutomaticInputFailoverSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputAttachmentAutomaticInputFailoverSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputAttachmentAutomaticInputFailoverSettings is not found in the empty JSON string", InputAttachmentAutomaticInputFailoverSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputAttachmentAutomaticInputFailoverSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputAttachmentAutomaticInputFailoverSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputAttachmentAutomaticInputFailoverSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ErrorClearTimeMsec`
      if (jsonObj.get("ErrorClearTimeMsec") != null && !jsonObj.get("ErrorClearTimeMsec").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ErrorClearTimeMsec"));
      }
      // validate the optional field `FailoverConditions`
      if (jsonObj.get("FailoverConditions") != null && !jsonObj.get("FailoverConditions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FailoverConditions"));
      }
      // validate the optional field `InputPreference`
      if (jsonObj.get("InputPreference") != null && !jsonObj.get("InputPreference").isJsonNull()) {
        InputPreference.validateJsonElement(jsonObj.get("InputPreference"));
      }
      // validate the required field `SecondaryInputId`
      String.validateJsonElement(jsonObj.get("SecondaryInputId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputAttachmentAutomaticInputFailoverSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputAttachmentAutomaticInputFailoverSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputAttachmentAutomaticInputFailoverSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputAttachmentAutomaticInputFailoverSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<InputAttachmentAutomaticInputFailoverSettings>() {
           @Override
           public void write(JsonWriter out, InputAttachmentAutomaticInputFailoverSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputAttachmentAutomaticInputFailoverSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputAttachmentAutomaticInputFailoverSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputAttachmentAutomaticInputFailoverSettings
   * @throws IOException if the JSON string is invalid with respect to InputAttachmentAutomaticInputFailoverSettings
   */
  public static InputAttachmentAutomaticInputFailoverSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputAttachmentAutomaticInputFailoverSettings.class);
  }

  /**
   * Convert an instance of InputAttachmentAutomaticInputFailoverSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

