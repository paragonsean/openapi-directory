/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HlsSettingsAudioOnlyHlsSettings;
import org.openapitools.client.model.HlsSettingsFmp4HlsSettings;
import org.openapitools.client.model.HlsSettingsStandardHlsSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hls Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsSettings {
  public static final String SERIALIZED_NAME_AUDIO_ONLY_HLS_SETTINGS = "AudioOnlyHlsSettings";
  @SerializedName(SERIALIZED_NAME_AUDIO_ONLY_HLS_SETTINGS)
  private HlsSettingsAudioOnlyHlsSettings audioOnlyHlsSettings;

  public static final String SERIALIZED_NAME_FMP4_HLS_SETTINGS = "Fmp4HlsSettings";
  @SerializedName(SERIALIZED_NAME_FMP4_HLS_SETTINGS)
  private HlsSettingsFmp4HlsSettings fmp4HlsSettings;

  public static final String SERIALIZED_NAME_FRAME_CAPTURE_HLS_SETTINGS = "FrameCaptureHlsSettings";
  @SerializedName(SERIALIZED_NAME_FRAME_CAPTURE_HLS_SETTINGS)
  private Object frameCaptureHlsSettings;

  public static final String SERIALIZED_NAME_STANDARD_HLS_SETTINGS = "StandardHlsSettings";
  @SerializedName(SERIALIZED_NAME_STANDARD_HLS_SETTINGS)
  private HlsSettingsStandardHlsSettings standardHlsSettings;

  public HlsSettings() {
  }

  public HlsSettings audioOnlyHlsSettings(HlsSettingsAudioOnlyHlsSettings audioOnlyHlsSettings) {
    this.audioOnlyHlsSettings = audioOnlyHlsSettings;
    return this;
  }

  /**
   * Get audioOnlyHlsSettings
   * @return audioOnlyHlsSettings
   */
  @javax.annotation.Nullable
  public HlsSettingsAudioOnlyHlsSettings getAudioOnlyHlsSettings() {
    return audioOnlyHlsSettings;
  }

  public void setAudioOnlyHlsSettings(HlsSettingsAudioOnlyHlsSettings audioOnlyHlsSettings) {
    this.audioOnlyHlsSettings = audioOnlyHlsSettings;
  }


  public HlsSettings fmp4HlsSettings(HlsSettingsFmp4HlsSettings fmp4HlsSettings) {
    this.fmp4HlsSettings = fmp4HlsSettings;
    return this;
  }

  /**
   * Get fmp4HlsSettings
   * @return fmp4HlsSettings
   */
  @javax.annotation.Nullable
  public HlsSettingsFmp4HlsSettings getFmp4HlsSettings() {
    return fmp4HlsSettings;
  }

  public void setFmp4HlsSettings(HlsSettingsFmp4HlsSettings fmp4HlsSettings) {
    this.fmp4HlsSettings = fmp4HlsSettings;
  }


  public HlsSettings frameCaptureHlsSettings(Object frameCaptureHlsSettings) {
    this.frameCaptureHlsSettings = frameCaptureHlsSettings;
    return this;
  }

  /**
   * Get frameCaptureHlsSettings
   * @return frameCaptureHlsSettings
   */
  @javax.annotation.Nullable
  public Object getFrameCaptureHlsSettings() {
    return frameCaptureHlsSettings;
  }

  public void setFrameCaptureHlsSettings(Object frameCaptureHlsSettings) {
    this.frameCaptureHlsSettings = frameCaptureHlsSettings;
  }


  public HlsSettings standardHlsSettings(HlsSettingsStandardHlsSettings standardHlsSettings) {
    this.standardHlsSettings = standardHlsSettings;
    return this;
  }

  /**
   * Get standardHlsSettings
   * @return standardHlsSettings
   */
  @javax.annotation.Nullable
  public HlsSettingsStandardHlsSettings getStandardHlsSettings() {
    return standardHlsSettings;
  }

  public void setStandardHlsSettings(HlsSettingsStandardHlsSettings standardHlsSettings) {
    this.standardHlsSettings = standardHlsSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsSettings hlsSettings = (HlsSettings) o;
    return Objects.equals(this.audioOnlyHlsSettings, hlsSettings.audioOnlyHlsSettings) &&
        Objects.equals(this.fmp4HlsSettings, hlsSettings.fmp4HlsSettings) &&
        Objects.equals(this.frameCaptureHlsSettings, hlsSettings.frameCaptureHlsSettings) &&
        Objects.equals(this.standardHlsSettings, hlsSettings.standardHlsSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioOnlyHlsSettings, fmp4HlsSettings, frameCaptureHlsSettings, standardHlsSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsSettings {\n");
    sb.append("    audioOnlyHlsSettings: ").append(toIndentedString(audioOnlyHlsSettings)).append("\n");
    sb.append("    fmp4HlsSettings: ").append(toIndentedString(fmp4HlsSettings)).append("\n");
    sb.append("    frameCaptureHlsSettings: ").append(toIndentedString(frameCaptureHlsSettings)).append("\n");
    sb.append("    standardHlsSettings: ").append(toIndentedString(standardHlsSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioOnlyHlsSettings");
    openapiFields.add("Fmp4HlsSettings");
    openapiFields.add("FrameCaptureHlsSettings");
    openapiFields.add("StandardHlsSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsSettings is not found in the empty JSON string", HlsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioOnlyHlsSettings`
      if (jsonObj.get("AudioOnlyHlsSettings") != null && !jsonObj.get("AudioOnlyHlsSettings").isJsonNull()) {
        HlsSettingsAudioOnlyHlsSettings.validateJsonElement(jsonObj.get("AudioOnlyHlsSettings"));
      }
      // validate the optional field `Fmp4HlsSettings`
      if (jsonObj.get("Fmp4HlsSettings") != null && !jsonObj.get("Fmp4HlsSettings").isJsonNull()) {
        HlsSettingsFmp4HlsSettings.validateJsonElement(jsonObj.get("Fmp4HlsSettings"));
      }
      // validate the optional field `FrameCaptureHlsSettings`
      if (jsonObj.get("FrameCaptureHlsSettings") != null && !jsonObj.get("FrameCaptureHlsSettings").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("FrameCaptureHlsSettings"));
      }
      // validate the optional field `StandardHlsSettings`
      if (jsonObj.get("StandardHlsSettings") != null && !jsonObj.get("StandardHlsSettings").isJsonNull()) {
        HlsSettingsStandardHlsSettings.validateJsonElement(jsonObj.get("StandardHlsSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsSettings>() {
           @Override
           public void write(JsonWriter out, HlsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsSettings
   * @throws IOException if the JSON string is invalid with respect to HlsSettings
   */
  public static HlsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsSettings.class);
  }

  /**
   * Convert an instance of HlsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

