/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Esam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Esam {
  public static final String SERIALIZED_NAME_ACQUISITION_POINT_ID = "AcquisitionPointId";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_POINT_ID)
  private String acquisitionPointId;

  public static final String SERIALIZED_NAME_AD_AVAIL_OFFSET = "AdAvailOffset";
  @SerializedName(SERIALIZED_NAME_AD_AVAIL_OFFSET)
  private Integer adAvailOffset;

  public static final String SERIALIZED_NAME_PASSWORD_PARAM = "PasswordParam";
  @SerializedName(SERIALIZED_NAME_PASSWORD_PARAM)
  private String passwordParam;

  public static final String SERIALIZED_NAME_POIS_ENDPOINT = "PoisEndpoint";
  @SerializedName(SERIALIZED_NAME_POIS_ENDPOINT)
  private String poisEndpoint;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_ZONE_IDENTITY = "ZoneIdentity";
  @SerializedName(SERIALIZED_NAME_ZONE_IDENTITY)
  private String zoneIdentity;

  public Esam() {
  }

  public Esam acquisitionPointId(String acquisitionPointId) {
    this.acquisitionPointId = acquisitionPointId;
    return this;
  }

  /**
   * Get acquisitionPointId
   * @return acquisitionPointId
   */
  @javax.annotation.Nonnull
  public String getAcquisitionPointId() {
    return acquisitionPointId;
  }

  public void setAcquisitionPointId(String acquisitionPointId) {
    this.acquisitionPointId = acquisitionPointId;
  }


  public Esam adAvailOffset(Integer adAvailOffset) {
    this.adAvailOffset = adAvailOffset;
    return this;
  }

  /**
   * Get adAvailOffset
   * @return adAvailOffset
   */
  @javax.annotation.Nullable
  public Integer getAdAvailOffset() {
    return adAvailOffset;
  }

  public void setAdAvailOffset(Integer adAvailOffset) {
    this.adAvailOffset = adAvailOffset;
  }


  public Esam passwordParam(String passwordParam) {
    this.passwordParam = passwordParam;
    return this;
  }

  /**
   * Get passwordParam
   * @return passwordParam
   */
  @javax.annotation.Nullable
  public String getPasswordParam() {
    return passwordParam;
  }

  public void setPasswordParam(String passwordParam) {
    this.passwordParam = passwordParam;
  }


  public Esam poisEndpoint(String poisEndpoint) {
    this.poisEndpoint = poisEndpoint;
    return this;
  }

  /**
   * Get poisEndpoint
   * @return poisEndpoint
   */
  @javax.annotation.Nonnull
  public String getPoisEndpoint() {
    return poisEndpoint;
  }

  public void setPoisEndpoint(String poisEndpoint) {
    this.poisEndpoint = poisEndpoint;
  }


  public Esam username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public Esam zoneIdentity(String zoneIdentity) {
    this.zoneIdentity = zoneIdentity;
    return this;
  }

  /**
   * Get zoneIdentity
   * @return zoneIdentity
   */
  @javax.annotation.Nullable
  public String getZoneIdentity() {
    return zoneIdentity;
  }

  public void setZoneIdentity(String zoneIdentity) {
    this.zoneIdentity = zoneIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Esam esam = (Esam) o;
    return Objects.equals(this.acquisitionPointId, esam.acquisitionPointId) &&
        Objects.equals(this.adAvailOffset, esam.adAvailOffset) &&
        Objects.equals(this.passwordParam, esam.passwordParam) &&
        Objects.equals(this.poisEndpoint, esam.poisEndpoint) &&
        Objects.equals(this.username, esam.username) &&
        Objects.equals(this.zoneIdentity, esam.zoneIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionPointId, adAvailOffset, passwordParam, poisEndpoint, username, zoneIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Esam {\n");
    sb.append("    acquisitionPointId: ").append(toIndentedString(acquisitionPointId)).append("\n");
    sb.append("    adAvailOffset: ").append(toIndentedString(adAvailOffset)).append("\n");
    sb.append("    passwordParam: ").append(toIndentedString(passwordParam)).append("\n");
    sb.append("    poisEndpoint: ").append(toIndentedString(poisEndpoint)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    zoneIdentity: ").append(toIndentedString(zoneIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcquisitionPointId");
    openapiFields.add("AdAvailOffset");
    openapiFields.add("PasswordParam");
    openapiFields.add("PoisEndpoint");
    openapiFields.add("Username");
    openapiFields.add("ZoneIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AcquisitionPointId");
    openapiRequiredFields.add("PoisEndpoint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Esam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Esam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Esam is not found in the empty JSON string", Esam.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Esam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Esam` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Esam.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AcquisitionPointId`
      String.validateJsonElement(jsonObj.get("AcquisitionPointId"));
      // validate the optional field `AdAvailOffset`
      if (jsonObj.get("AdAvailOffset") != null && !jsonObj.get("AdAvailOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AdAvailOffset"));
      }
      // validate the optional field `PasswordParam`
      if (jsonObj.get("PasswordParam") != null && !jsonObj.get("PasswordParam").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PasswordParam"));
      }
      // validate the required field `PoisEndpoint`
      String.validateJsonElement(jsonObj.get("PoisEndpoint"));
      // validate the optional field `Username`
      if (jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Username"));
      }
      // validate the optional field `ZoneIdentity`
      if (jsonObj.get("ZoneIdentity") != null && !jsonObj.get("ZoneIdentity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZoneIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Esam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Esam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Esam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Esam.class));

       return (TypeAdapter<T>) new TypeAdapter<Esam>() {
           @Override
           public void write(JsonWriter out, Esam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Esam read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Esam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Esam
   * @throws IOException if the JSON string is invalid with respect to Esam
   */
  public static Esam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Esam.class);
  }

  /**
   * Convert an instance of Esam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

