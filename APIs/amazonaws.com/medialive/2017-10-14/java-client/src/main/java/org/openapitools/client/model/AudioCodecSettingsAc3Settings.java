/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Ac3BitstreamMode;
import org.openapitools.client.model.Ac3CodingMode;
import org.openapitools.client.model.Ac3DrcProfile;
import org.openapitools.client.model.Ac3LfeFilter;
import org.openapitools.client.model.Ac3MetadataControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioCodecSettingsAc3Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioCodecSettingsAc3Settings {
  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Double bitrate;

  public static final String SERIALIZED_NAME_BITSTREAM_MODE = "BitstreamMode";
  @SerializedName(SERIALIZED_NAME_BITSTREAM_MODE)
  private Ac3BitstreamMode bitstreamMode;

  public static final String SERIALIZED_NAME_CODING_MODE = "CodingMode";
  @SerializedName(SERIALIZED_NAME_CODING_MODE)
  private Ac3CodingMode codingMode;

  public static final String SERIALIZED_NAME_DIALNORM = "Dialnorm";
  @SerializedName(SERIALIZED_NAME_DIALNORM)
  private Integer dialnorm;

  public static final String SERIALIZED_NAME_DRC_PROFILE = "DrcProfile";
  @SerializedName(SERIALIZED_NAME_DRC_PROFILE)
  private Ac3DrcProfile drcProfile;

  public static final String SERIALIZED_NAME_LFE_FILTER = "LfeFilter";
  @SerializedName(SERIALIZED_NAME_LFE_FILTER)
  private Ac3LfeFilter lfeFilter;

  public static final String SERIALIZED_NAME_METADATA_CONTROL = "MetadataControl";
  @SerializedName(SERIALIZED_NAME_METADATA_CONTROL)
  private Ac3MetadataControl metadataControl;

  public AudioCodecSettingsAc3Settings() {
  }

  public AudioCodecSettingsAc3Settings bitrate(Double bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Double getBitrate() {
    return bitrate;
  }

  public void setBitrate(Double bitrate) {
    this.bitrate = bitrate;
  }


  public AudioCodecSettingsAc3Settings bitstreamMode(Ac3BitstreamMode bitstreamMode) {
    this.bitstreamMode = bitstreamMode;
    return this;
  }

  /**
   * Get bitstreamMode
   * @return bitstreamMode
   */
  @javax.annotation.Nullable
  public Ac3BitstreamMode getBitstreamMode() {
    return bitstreamMode;
  }

  public void setBitstreamMode(Ac3BitstreamMode bitstreamMode) {
    this.bitstreamMode = bitstreamMode;
  }


  public AudioCodecSettingsAc3Settings codingMode(Ac3CodingMode codingMode) {
    this.codingMode = codingMode;
    return this;
  }

  /**
   * Get codingMode
   * @return codingMode
   */
  @javax.annotation.Nullable
  public Ac3CodingMode getCodingMode() {
    return codingMode;
  }

  public void setCodingMode(Ac3CodingMode codingMode) {
    this.codingMode = codingMode;
  }


  public AudioCodecSettingsAc3Settings dialnorm(Integer dialnorm) {
    this.dialnorm = dialnorm;
    return this;
  }

  /**
   * Get dialnorm
   * @return dialnorm
   */
  @javax.annotation.Nullable
  public Integer getDialnorm() {
    return dialnorm;
  }

  public void setDialnorm(Integer dialnorm) {
    this.dialnorm = dialnorm;
  }


  public AudioCodecSettingsAc3Settings drcProfile(Ac3DrcProfile drcProfile) {
    this.drcProfile = drcProfile;
    return this;
  }

  /**
   * Get drcProfile
   * @return drcProfile
   */
  @javax.annotation.Nullable
  public Ac3DrcProfile getDrcProfile() {
    return drcProfile;
  }

  public void setDrcProfile(Ac3DrcProfile drcProfile) {
    this.drcProfile = drcProfile;
  }


  public AudioCodecSettingsAc3Settings lfeFilter(Ac3LfeFilter lfeFilter) {
    this.lfeFilter = lfeFilter;
    return this;
  }

  /**
   * Get lfeFilter
   * @return lfeFilter
   */
  @javax.annotation.Nullable
  public Ac3LfeFilter getLfeFilter() {
    return lfeFilter;
  }

  public void setLfeFilter(Ac3LfeFilter lfeFilter) {
    this.lfeFilter = lfeFilter;
  }


  public AudioCodecSettingsAc3Settings metadataControl(Ac3MetadataControl metadataControl) {
    this.metadataControl = metadataControl;
    return this;
  }

  /**
   * Get metadataControl
   * @return metadataControl
   */
  @javax.annotation.Nullable
  public Ac3MetadataControl getMetadataControl() {
    return metadataControl;
  }

  public void setMetadataControl(Ac3MetadataControl metadataControl) {
    this.metadataControl = metadataControl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioCodecSettingsAc3Settings audioCodecSettingsAc3Settings = (AudioCodecSettingsAc3Settings) o;
    return Objects.equals(this.bitrate, audioCodecSettingsAc3Settings.bitrate) &&
        Objects.equals(this.bitstreamMode, audioCodecSettingsAc3Settings.bitstreamMode) &&
        Objects.equals(this.codingMode, audioCodecSettingsAc3Settings.codingMode) &&
        Objects.equals(this.dialnorm, audioCodecSettingsAc3Settings.dialnorm) &&
        Objects.equals(this.drcProfile, audioCodecSettingsAc3Settings.drcProfile) &&
        Objects.equals(this.lfeFilter, audioCodecSettingsAc3Settings.lfeFilter) &&
        Objects.equals(this.metadataControl, audioCodecSettingsAc3Settings.metadataControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitrate, bitstreamMode, codingMode, dialnorm, drcProfile, lfeFilter, metadataControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioCodecSettingsAc3Settings {\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    bitstreamMode: ").append(toIndentedString(bitstreamMode)).append("\n");
    sb.append("    codingMode: ").append(toIndentedString(codingMode)).append("\n");
    sb.append("    dialnorm: ").append(toIndentedString(dialnorm)).append("\n");
    sb.append("    drcProfile: ").append(toIndentedString(drcProfile)).append("\n");
    sb.append("    lfeFilter: ").append(toIndentedString(lfeFilter)).append("\n");
    sb.append("    metadataControl: ").append(toIndentedString(metadataControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bitrate");
    openapiFields.add("BitstreamMode");
    openapiFields.add("CodingMode");
    openapiFields.add("Dialnorm");
    openapiFields.add("DrcProfile");
    openapiFields.add("LfeFilter");
    openapiFields.add("MetadataControl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioCodecSettingsAc3Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioCodecSettingsAc3Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioCodecSettingsAc3Settings is not found in the empty JSON string", AudioCodecSettingsAc3Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioCodecSettingsAc3Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioCodecSettingsAc3Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `BitstreamMode`
      if (jsonObj.get("BitstreamMode") != null && !jsonObj.get("BitstreamMode").isJsonNull()) {
        Ac3BitstreamMode.validateJsonElement(jsonObj.get("BitstreamMode"));
      }
      // validate the optional field `CodingMode`
      if (jsonObj.get("CodingMode") != null && !jsonObj.get("CodingMode").isJsonNull()) {
        Ac3CodingMode.validateJsonElement(jsonObj.get("CodingMode"));
      }
      // validate the optional field `Dialnorm`
      if (jsonObj.get("Dialnorm") != null && !jsonObj.get("Dialnorm").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Dialnorm"));
      }
      // validate the optional field `DrcProfile`
      if (jsonObj.get("DrcProfile") != null && !jsonObj.get("DrcProfile").isJsonNull()) {
        Ac3DrcProfile.validateJsonElement(jsonObj.get("DrcProfile"));
      }
      // validate the optional field `LfeFilter`
      if (jsonObj.get("LfeFilter") != null && !jsonObj.get("LfeFilter").isJsonNull()) {
        Ac3LfeFilter.validateJsonElement(jsonObj.get("LfeFilter"));
      }
      // validate the optional field `MetadataControl`
      if (jsonObj.get("MetadataControl") != null && !jsonObj.get("MetadataControl").isJsonNull()) {
        Ac3MetadataControl.validateJsonElement(jsonObj.get("MetadataControl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioCodecSettingsAc3Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioCodecSettingsAc3Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioCodecSettingsAc3Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioCodecSettingsAc3Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioCodecSettingsAc3Settings>() {
           @Override
           public void write(JsonWriter out, AudioCodecSettingsAc3Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioCodecSettingsAc3Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioCodecSettingsAc3Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioCodecSettingsAc3Settings
   * @throws IOException if the JSON string is invalid with respect to AudioCodecSettingsAc3Settings
   */
  public static AudioCodecSettingsAc3Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioCodecSettingsAc3Settings.class);
  }

  /**
   * Convert an instance of AudioCodecSettingsAc3Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

