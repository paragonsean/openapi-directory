/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Fmp4NielsenId3Behavior;
import org.openapitools.client.model.Fmp4TimedMetadataBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HlsSettingsFmp4HlsSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsSettingsFmp4HlsSettings {
  public static final String SERIALIZED_NAME_AUDIO_RENDITION_SETS = "AudioRenditionSets";
  @SerializedName(SERIALIZED_NAME_AUDIO_RENDITION_SETS)
  private String audioRenditionSets;

  public static final String SERIALIZED_NAME_NIELSEN_ID3_BEHAVIOR = "NielsenId3Behavior";
  @SerializedName(SERIALIZED_NAME_NIELSEN_ID3_BEHAVIOR)
  private Fmp4NielsenId3Behavior nielsenId3Behavior;

  public static final String SERIALIZED_NAME_TIMED_METADATA_BEHAVIOR = "TimedMetadataBehavior";
  @SerializedName(SERIALIZED_NAME_TIMED_METADATA_BEHAVIOR)
  private Fmp4TimedMetadataBehavior timedMetadataBehavior;

  public HlsSettingsFmp4HlsSettings() {
  }

  public HlsSettingsFmp4HlsSettings audioRenditionSets(String audioRenditionSets) {
    this.audioRenditionSets = audioRenditionSets;
    return this;
  }

  /**
   * Get audioRenditionSets
   * @return audioRenditionSets
   */
  @javax.annotation.Nullable
  public String getAudioRenditionSets() {
    return audioRenditionSets;
  }

  public void setAudioRenditionSets(String audioRenditionSets) {
    this.audioRenditionSets = audioRenditionSets;
  }


  public HlsSettingsFmp4HlsSettings nielsenId3Behavior(Fmp4NielsenId3Behavior nielsenId3Behavior) {
    this.nielsenId3Behavior = nielsenId3Behavior;
    return this;
  }

  /**
   * Get nielsenId3Behavior
   * @return nielsenId3Behavior
   */
  @javax.annotation.Nullable
  public Fmp4NielsenId3Behavior getNielsenId3Behavior() {
    return nielsenId3Behavior;
  }

  public void setNielsenId3Behavior(Fmp4NielsenId3Behavior nielsenId3Behavior) {
    this.nielsenId3Behavior = nielsenId3Behavior;
  }


  public HlsSettingsFmp4HlsSettings timedMetadataBehavior(Fmp4TimedMetadataBehavior timedMetadataBehavior) {
    this.timedMetadataBehavior = timedMetadataBehavior;
    return this;
  }

  /**
   * Get timedMetadataBehavior
   * @return timedMetadataBehavior
   */
  @javax.annotation.Nullable
  public Fmp4TimedMetadataBehavior getTimedMetadataBehavior() {
    return timedMetadataBehavior;
  }

  public void setTimedMetadataBehavior(Fmp4TimedMetadataBehavior timedMetadataBehavior) {
    this.timedMetadataBehavior = timedMetadataBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsSettingsFmp4HlsSettings hlsSettingsFmp4HlsSettings = (HlsSettingsFmp4HlsSettings) o;
    return Objects.equals(this.audioRenditionSets, hlsSettingsFmp4HlsSettings.audioRenditionSets) &&
        Objects.equals(this.nielsenId3Behavior, hlsSettingsFmp4HlsSettings.nielsenId3Behavior) &&
        Objects.equals(this.timedMetadataBehavior, hlsSettingsFmp4HlsSettings.timedMetadataBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioRenditionSets, nielsenId3Behavior, timedMetadataBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsSettingsFmp4HlsSettings {\n");
    sb.append("    audioRenditionSets: ").append(toIndentedString(audioRenditionSets)).append("\n");
    sb.append("    nielsenId3Behavior: ").append(toIndentedString(nielsenId3Behavior)).append("\n");
    sb.append("    timedMetadataBehavior: ").append(toIndentedString(timedMetadataBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioRenditionSets");
    openapiFields.add("NielsenId3Behavior");
    openapiFields.add("TimedMetadataBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsSettingsFmp4HlsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsSettingsFmp4HlsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsSettingsFmp4HlsSettings is not found in the empty JSON string", HlsSettingsFmp4HlsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsSettingsFmp4HlsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsSettingsFmp4HlsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioRenditionSets`
      if (jsonObj.get("AudioRenditionSets") != null && !jsonObj.get("AudioRenditionSets").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AudioRenditionSets"));
      }
      // validate the optional field `NielsenId3Behavior`
      if (jsonObj.get("NielsenId3Behavior") != null && !jsonObj.get("NielsenId3Behavior").isJsonNull()) {
        Fmp4NielsenId3Behavior.validateJsonElement(jsonObj.get("NielsenId3Behavior"));
      }
      // validate the optional field `TimedMetadataBehavior`
      if (jsonObj.get("TimedMetadataBehavior") != null && !jsonObj.get("TimedMetadataBehavior").isJsonNull()) {
        Fmp4TimedMetadataBehavior.validateJsonElement(jsonObj.get("TimedMetadataBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsSettingsFmp4HlsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsSettingsFmp4HlsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsSettingsFmp4HlsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsSettingsFmp4HlsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsSettingsFmp4HlsSettings>() {
           @Override
           public void write(JsonWriter out, HlsSettingsFmp4HlsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsSettingsFmp4HlsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsSettingsFmp4HlsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsSettingsFmp4HlsSettings
   * @throws IOException if the JSON string is invalid with respect to HlsSettingsFmp4HlsSettings
   */
  public static HlsSettingsFmp4HlsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsSettingsFmp4HlsSettings.class);
  }

  /**
   * Convert an instance of HlsSettingsFmp4HlsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

