/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailoverConditionSettingsAudioSilenceSettings;
import org.openapitools.client.model.FailoverConditionSettingsInputLossSettings;
import org.openapitools.client.model.FailoverConditionSettingsVideoBlackSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for one failover condition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailoverConditionSettings {
  public static final String SERIALIZED_NAME_AUDIO_SILENCE_SETTINGS = "AudioSilenceSettings";
  @SerializedName(SERIALIZED_NAME_AUDIO_SILENCE_SETTINGS)
  private FailoverConditionSettingsAudioSilenceSettings audioSilenceSettings;

  public static final String SERIALIZED_NAME_INPUT_LOSS_SETTINGS = "InputLossSettings";
  @SerializedName(SERIALIZED_NAME_INPUT_LOSS_SETTINGS)
  private FailoverConditionSettingsInputLossSettings inputLossSettings;

  public static final String SERIALIZED_NAME_VIDEO_BLACK_SETTINGS = "VideoBlackSettings";
  @SerializedName(SERIALIZED_NAME_VIDEO_BLACK_SETTINGS)
  private FailoverConditionSettingsVideoBlackSettings videoBlackSettings;

  public FailoverConditionSettings() {
  }

  public FailoverConditionSettings audioSilenceSettings(FailoverConditionSettingsAudioSilenceSettings audioSilenceSettings) {
    this.audioSilenceSettings = audioSilenceSettings;
    return this;
  }

  /**
   * Get audioSilenceSettings
   * @return audioSilenceSettings
   */
  @javax.annotation.Nullable
  public FailoverConditionSettingsAudioSilenceSettings getAudioSilenceSettings() {
    return audioSilenceSettings;
  }

  public void setAudioSilenceSettings(FailoverConditionSettingsAudioSilenceSettings audioSilenceSettings) {
    this.audioSilenceSettings = audioSilenceSettings;
  }


  public FailoverConditionSettings inputLossSettings(FailoverConditionSettingsInputLossSettings inputLossSettings) {
    this.inputLossSettings = inputLossSettings;
    return this;
  }

  /**
   * Get inputLossSettings
   * @return inputLossSettings
   */
  @javax.annotation.Nullable
  public FailoverConditionSettingsInputLossSettings getInputLossSettings() {
    return inputLossSettings;
  }

  public void setInputLossSettings(FailoverConditionSettingsInputLossSettings inputLossSettings) {
    this.inputLossSettings = inputLossSettings;
  }


  public FailoverConditionSettings videoBlackSettings(FailoverConditionSettingsVideoBlackSettings videoBlackSettings) {
    this.videoBlackSettings = videoBlackSettings;
    return this;
  }

  /**
   * Get videoBlackSettings
   * @return videoBlackSettings
   */
  @javax.annotation.Nullable
  public FailoverConditionSettingsVideoBlackSettings getVideoBlackSettings() {
    return videoBlackSettings;
  }

  public void setVideoBlackSettings(FailoverConditionSettingsVideoBlackSettings videoBlackSettings) {
    this.videoBlackSettings = videoBlackSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailoverConditionSettings failoverConditionSettings = (FailoverConditionSettings) o;
    return Objects.equals(this.audioSilenceSettings, failoverConditionSettings.audioSilenceSettings) &&
        Objects.equals(this.inputLossSettings, failoverConditionSettings.inputLossSettings) &&
        Objects.equals(this.videoBlackSettings, failoverConditionSettings.videoBlackSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioSilenceSettings, inputLossSettings, videoBlackSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailoverConditionSettings {\n");
    sb.append("    audioSilenceSettings: ").append(toIndentedString(audioSilenceSettings)).append("\n");
    sb.append("    inputLossSettings: ").append(toIndentedString(inputLossSettings)).append("\n");
    sb.append("    videoBlackSettings: ").append(toIndentedString(videoBlackSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioSilenceSettings");
    openapiFields.add("InputLossSettings");
    openapiFields.add("VideoBlackSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailoverConditionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailoverConditionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailoverConditionSettings is not found in the empty JSON string", FailoverConditionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailoverConditionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailoverConditionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioSilenceSettings`
      if (jsonObj.get("AudioSilenceSettings") != null && !jsonObj.get("AudioSilenceSettings").isJsonNull()) {
        FailoverConditionSettingsAudioSilenceSettings.validateJsonElement(jsonObj.get("AudioSilenceSettings"));
      }
      // validate the optional field `InputLossSettings`
      if (jsonObj.get("InputLossSettings") != null && !jsonObj.get("InputLossSettings").isJsonNull()) {
        FailoverConditionSettingsInputLossSettings.validateJsonElement(jsonObj.get("InputLossSettings"));
      }
      // validate the optional field `VideoBlackSettings`
      if (jsonObj.get("VideoBlackSettings") != null && !jsonObj.get("VideoBlackSettings").isJsonNull()) {
        FailoverConditionSettingsVideoBlackSettings.validateJsonElement(jsonObj.get("VideoBlackSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailoverConditionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailoverConditionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailoverConditionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailoverConditionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FailoverConditionSettings>() {
           @Override
           public void write(JsonWriter out, FailoverConditionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailoverConditionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailoverConditionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailoverConditionSettings
   * @throws IOException if the JSON string is invalid with respect to FailoverConditionSettings
   */
  public static FailoverConditionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailoverConditionSettings.class);
  }

  /**
   * Convert an instance of FailoverConditionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

