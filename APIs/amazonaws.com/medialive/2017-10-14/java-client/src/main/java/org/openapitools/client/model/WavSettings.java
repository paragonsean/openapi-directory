/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WavCodingMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Wav Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WavSettings {
  public static final String SERIALIZED_NAME_BIT_DEPTH = "BitDepth";
  @SerializedName(SERIALIZED_NAME_BIT_DEPTH)
  private Double bitDepth;

  public static final String SERIALIZED_NAME_CODING_MODE = "CodingMode";
  @SerializedName(SERIALIZED_NAME_CODING_MODE)
  private WavCodingMode codingMode;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private Double sampleRate;

  public WavSettings() {
  }

  public WavSettings bitDepth(Double bitDepth) {
    this.bitDepth = bitDepth;
    return this;
  }

  /**
   * Get bitDepth
   * @return bitDepth
   */
  @javax.annotation.Nullable
  public Double getBitDepth() {
    return bitDepth;
  }

  public void setBitDepth(Double bitDepth) {
    this.bitDepth = bitDepth;
  }


  public WavSettings codingMode(WavCodingMode codingMode) {
    this.codingMode = codingMode;
    return this;
  }

  /**
   * Get codingMode
   * @return codingMode
   */
  @javax.annotation.Nullable
  public WavCodingMode getCodingMode() {
    return codingMode;
  }

  public void setCodingMode(WavCodingMode codingMode) {
    this.codingMode = codingMode;
  }


  public WavSettings sampleRate(Double sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Get sampleRate
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public Double getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(Double sampleRate) {
    this.sampleRate = sampleRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WavSettings wavSettings = (WavSettings) o;
    return Objects.equals(this.bitDepth, wavSettings.bitDepth) &&
        Objects.equals(this.codingMode, wavSettings.codingMode) &&
        Objects.equals(this.sampleRate, wavSettings.sampleRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitDepth, codingMode, sampleRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WavSettings {\n");
    sb.append("    bitDepth: ").append(toIndentedString(bitDepth)).append("\n");
    sb.append("    codingMode: ").append(toIndentedString(codingMode)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BitDepth");
    openapiFields.add("CodingMode");
    openapiFields.add("SampleRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WavSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WavSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WavSettings is not found in the empty JSON string", WavSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WavSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WavSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BitDepth`
      if (jsonObj.get("BitDepth") != null && !jsonObj.get("BitDepth").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("BitDepth"));
      }
      // validate the optional field `CodingMode`
      if (jsonObj.get("CodingMode") != null && !jsonObj.get("CodingMode").isJsonNull()) {
        WavCodingMode.validateJsonElement(jsonObj.get("CodingMode"));
      }
      // validate the optional field `SampleRate`
      if (jsonObj.get("SampleRate") != null && !jsonObj.get("SampleRate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SampleRate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WavSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WavSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WavSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WavSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<WavSettings>() {
           @Override
           public void write(JsonWriter out, WavSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WavSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WavSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WavSettings
   * @throws IOException if the JSON string is invalid with respect to WavSettings
   */
  public static WavSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WavSettings.class);
  }

  /**
   * Convert an instance of WavSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

