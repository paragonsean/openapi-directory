/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessibilityType;
import org.openapitools.client.model.CaptionDescriptionDestinationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Caption Description
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaptionDescription {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "Accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private AccessibilityType accessibility;

  public static final String SERIALIZED_NAME_CAPTION_SELECTOR_NAME = "CaptionSelectorName";
  @SerializedName(SERIALIZED_NAME_CAPTION_SELECTOR_NAME)
  private String captionSelectorName;

  public static final String SERIALIZED_NAME_DESTINATION_SETTINGS = "DestinationSettings";
  @SerializedName(SERIALIZED_NAME_DESTINATION_SETTINGS)
  private CaptionDescriptionDestinationSettings destinationSettings;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LANGUAGE_DESCRIPTION = "LanguageDescription";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DESCRIPTION)
  private String languageDescription;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public CaptionDescription() {
  }

  public CaptionDescription accessibility(AccessibilityType accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * Get accessibility
   * @return accessibility
   */
  @javax.annotation.Nullable
  public AccessibilityType getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(AccessibilityType accessibility) {
    this.accessibility = accessibility;
  }


  public CaptionDescription captionSelectorName(String captionSelectorName) {
    this.captionSelectorName = captionSelectorName;
    return this;
  }

  /**
   * Get captionSelectorName
   * @return captionSelectorName
   */
  @javax.annotation.Nonnull
  public String getCaptionSelectorName() {
    return captionSelectorName;
  }

  public void setCaptionSelectorName(String captionSelectorName) {
    this.captionSelectorName = captionSelectorName;
  }


  public CaptionDescription destinationSettings(CaptionDescriptionDestinationSettings destinationSettings) {
    this.destinationSettings = destinationSettings;
    return this;
  }

  /**
   * Get destinationSettings
   * @return destinationSettings
   */
  @javax.annotation.Nullable
  public CaptionDescriptionDestinationSettings getDestinationSettings() {
    return destinationSettings;
  }

  public void setDestinationSettings(CaptionDescriptionDestinationSettings destinationSettings) {
    this.destinationSettings = destinationSettings;
  }


  public CaptionDescription languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public CaptionDescription languageDescription(String languageDescription) {
    this.languageDescription = languageDescription;
    return this;
  }

  /**
   * Get languageDescription
   * @return languageDescription
   */
  @javax.annotation.Nullable
  public String getLanguageDescription() {
    return languageDescription;
  }

  public void setLanguageDescription(String languageDescription) {
    this.languageDescription = languageDescription;
  }


  public CaptionDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaptionDescription captionDescription = (CaptionDescription) o;
    return Objects.equals(this.accessibility, captionDescription.accessibility) &&
        Objects.equals(this.captionSelectorName, captionDescription.captionSelectorName) &&
        Objects.equals(this.destinationSettings, captionDescription.destinationSettings) &&
        Objects.equals(this.languageCode, captionDescription.languageCode) &&
        Objects.equals(this.languageDescription, captionDescription.languageDescription) &&
        Objects.equals(this.name, captionDescription.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, captionSelectorName, destinationSettings, languageCode, languageDescription, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaptionDescription {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    captionSelectorName: ").append(toIndentedString(captionSelectorName)).append("\n");
    sb.append("    destinationSettings: ").append(toIndentedString(destinationSettings)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    languageDescription: ").append(toIndentedString(languageDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Accessibility");
    openapiFields.add("CaptionSelectorName");
    openapiFields.add("DestinationSettings");
    openapiFields.add("LanguageCode");
    openapiFields.add("LanguageDescription");
    openapiFields.add("Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CaptionSelectorName");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaptionDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaptionDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaptionDescription is not found in the empty JSON string", CaptionDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaptionDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaptionDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CaptionDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Accessibility`
      if (jsonObj.get("Accessibility") != null && !jsonObj.get("Accessibility").isJsonNull()) {
        AccessibilityType.validateJsonElement(jsonObj.get("Accessibility"));
      }
      // validate the required field `CaptionSelectorName`
      String.validateJsonElement(jsonObj.get("CaptionSelectorName"));
      // validate the optional field `DestinationSettings`
      if (jsonObj.get("DestinationSettings") != null && !jsonObj.get("DestinationSettings").isJsonNull()) {
        CaptionDescriptionDestinationSettings.validateJsonElement(jsonObj.get("DestinationSettings"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `LanguageDescription`
      if (jsonObj.get("LanguageDescription") != null && !jsonObj.get("LanguageDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageDescription"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaptionDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaptionDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaptionDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaptionDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CaptionDescription>() {
           @Override
           public void write(JsonWriter out, CaptionDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaptionDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaptionDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaptionDescription
   * @throws IOException if the JSON string is invalid with respect to CaptionDescription
   */
  public static CaptionDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaptionDescription.class);
  }

  /**
   * Convert an instance of CaptionDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

