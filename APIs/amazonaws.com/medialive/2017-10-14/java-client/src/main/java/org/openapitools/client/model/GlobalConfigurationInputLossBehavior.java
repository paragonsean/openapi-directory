/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputLossBehaviorInputLossImageSlate;
import org.openapitools.client.model.InputLossImageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GlobalConfigurationInputLossBehavior
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalConfigurationInputLossBehavior {
  public static final String SERIALIZED_NAME_BLACK_FRAME_MSEC = "BlackFrameMsec";
  @SerializedName(SERIALIZED_NAME_BLACK_FRAME_MSEC)
  private Integer blackFrameMsec;

  public static final String SERIALIZED_NAME_INPUT_LOSS_IMAGE_COLOR = "InputLossImageColor";
  @SerializedName(SERIALIZED_NAME_INPUT_LOSS_IMAGE_COLOR)
  private String inputLossImageColor;

  public static final String SERIALIZED_NAME_INPUT_LOSS_IMAGE_SLATE = "InputLossImageSlate";
  @SerializedName(SERIALIZED_NAME_INPUT_LOSS_IMAGE_SLATE)
  private InputLossBehaviorInputLossImageSlate inputLossImageSlate;

  public static final String SERIALIZED_NAME_INPUT_LOSS_IMAGE_TYPE = "InputLossImageType";
  @SerializedName(SERIALIZED_NAME_INPUT_LOSS_IMAGE_TYPE)
  private InputLossImageType inputLossImageType;

  public static final String SERIALIZED_NAME_REPEAT_FRAME_MSEC = "RepeatFrameMsec";
  @SerializedName(SERIALIZED_NAME_REPEAT_FRAME_MSEC)
  private Integer repeatFrameMsec;

  public GlobalConfigurationInputLossBehavior() {
  }

  public GlobalConfigurationInputLossBehavior blackFrameMsec(Integer blackFrameMsec) {
    this.blackFrameMsec = blackFrameMsec;
    return this;
  }

  /**
   * Get blackFrameMsec
   * @return blackFrameMsec
   */
  @javax.annotation.Nullable
  public Integer getBlackFrameMsec() {
    return blackFrameMsec;
  }

  public void setBlackFrameMsec(Integer blackFrameMsec) {
    this.blackFrameMsec = blackFrameMsec;
  }


  public GlobalConfigurationInputLossBehavior inputLossImageColor(String inputLossImageColor) {
    this.inputLossImageColor = inputLossImageColor;
    return this;
  }

  /**
   * Get inputLossImageColor
   * @return inputLossImageColor
   */
  @javax.annotation.Nullable
  public String getInputLossImageColor() {
    return inputLossImageColor;
  }

  public void setInputLossImageColor(String inputLossImageColor) {
    this.inputLossImageColor = inputLossImageColor;
  }


  public GlobalConfigurationInputLossBehavior inputLossImageSlate(InputLossBehaviorInputLossImageSlate inputLossImageSlate) {
    this.inputLossImageSlate = inputLossImageSlate;
    return this;
  }

  /**
   * Get inputLossImageSlate
   * @return inputLossImageSlate
   */
  @javax.annotation.Nullable
  public InputLossBehaviorInputLossImageSlate getInputLossImageSlate() {
    return inputLossImageSlate;
  }

  public void setInputLossImageSlate(InputLossBehaviorInputLossImageSlate inputLossImageSlate) {
    this.inputLossImageSlate = inputLossImageSlate;
  }


  public GlobalConfigurationInputLossBehavior inputLossImageType(InputLossImageType inputLossImageType) {
    this.inputLossImageType = inputLossImageType;
    return this;
  }

  /**
   * Get inputLossImageType
   * @return inputLossImageType
   */
  @javax.annotation.Nullable
  public InputLossImageType getInputLossImageType() {
    return inputLossImageType;
  }

  public void setInputLossImageType(InputLossImageType inputLossImageType) {
    this.inputLossImageType = inputLossImageType;
  }


  public GlobalConfigurationInputLossBehavior repeatFrameMsec(Integer repeatFrameMsec) {
    this.repeatFrameMsec = repeatFrameMsec;
    return this;
  }

  /**
   * Get repeatFrameMsec
   * @return repeatFrameMsec
   */
  @javax.annotation.Nullable
  public Integer getRepeatFrameMsec() {
    return repeatFrameMsec;
  }

  public void setRepeatFrameMsec(Integer repeatFrameMsec) {
    this.repeatFrameMsec = repeatFrameMsec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalConfigurationInputLossBehavior globalConfigurationInputLossBehavior = (GlobalConfigurationInputLossBehavior) o;
    return Objects.equals(this.blackFrameMsec, globalConfigurationInputLossBehavior.blackFrameMsec) &&
        Objects.equals(this.inputLossImageColor, globalConfigurationInputLossBehavior.inputLossImageColor) &&
        Objects.equals(this.inputLossImageSlate, globalConfigurationInputLossBehavior.inputLossImageSlate) &&
        Objects.equals(this.inputLossImageType, globalConfigurationInputLossBehavior.inputLossImageType) &&
        Objects.equals(this.repeatFrameMsec, globalConfigurationInputLossBehavior.repeatFrameMsec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackFrameMsec, inputLossImageColor, inputLossImageSlate, inputLossImageType, repeatFrameMsec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalConfigurationInputLossBehavior {\n");
    sb.append("    blackFrameMsec: ").append(toIndentedString(blackFrameMsec)).append("\n");
    sb.append("    inputLossImageColor: ").append(toIndentedString(inputLossImageColor)).append("\n");
    sb.append("    inputLossImageSlate: ").append(toIndentedString(inputLossImageSlate)).append("\n");
    sb.append("    inputLossImageType: ").append(toIndentedString(inputLossImageType)).append("\n");
    sb.append("    repeatFrameMsec: ").append(toIndentedString(repeatFrameMsec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BlackFrameMsec");
    openapiFields.add("InputLossImageColor");
    openapiFields.add("InputLossImageSlate");
    openapiFields.add("InputLossImageType");
    openapiFields.add("RepeatFrameMsec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalConfigurationInputLossBehavior
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalConfigurationInputLossBehavior.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalConfigurationInputLossBehavior is not found in the empty JSON string", GlobalConfigurationInputLossBehavior.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalConfigurationInputLossBehavior.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalConfigurationInputLossBehavior` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BlackFrameMsec`
      if (jsonObj.get("BlackFrameMsec") != null && !jsonObj.get("BlackFrameMsec").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BlackFrameMsec"));
      }
      // validate the optional field `InputLossImageColor`
      if (jsonObj.get("InputLossImageColor") != null && !jsonObj.get("InputLossImageColor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputLossImageColor"));
      }
      // validate the optional field `InputLossImageSlate`
      if (jsonObj.get("InputLossImageSlate") != null && !jsonObj.get("InputLossImageSlate").isJsonNull()) {
        InputLossBehaviorInputLossImageSlate.validateJsonElement(jsonObj.get("InputLossImageSlate"));
      }
      // validate the optional field `InputLossImageType`
      if (jsonObj.get("InputLossImageType") != null && !jsonObj.get("InputLossImageType").isJsonNull()) {
        InputLossImageType.validateJsonElement(jsonObj.get("InputLossImageType"));
      }
      // validate the optional field `RepeatFrameMsec`
      if (jsonObj.get("RepeatFrameMsec") != null && !jsonObj.get("RepeatFrameMsec").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RepeatFrameMsec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalConfigurationInputLossBehavior.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalConfigurationInputLossBehavior' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalConfigurationInputLossBehavior> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalConfigurationInputLossBehavior.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalConfigurationInputLossBehavior>() {
           @Override
           public void write(JsonWriter out, GlobalConfigurationInputLossBehavior value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalConfigurationInputLossBehavior read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalConfigurationInputLossBehavior given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalConfigurationInputLossBehavior
   * @throws IOException if the JSON string is invalid with respect to GlobalConfigurationInputLossBehavior
   */
  public static GlobalConfigurationInputLossBehavior fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalConfigurationInputLossBehavior.class);
  }

  /**
   * Convert an instance of GlobalConfigurationInputLossBehavior to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

