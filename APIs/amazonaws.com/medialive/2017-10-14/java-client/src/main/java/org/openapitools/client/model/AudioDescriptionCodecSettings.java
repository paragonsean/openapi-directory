/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioCodecSettingsAacSettings;
import org.openapitools.client.model.AudioCodecSettingsAc3Settings;
import org.openapitools.client.model.AudioCodecSettingsEac3AtmosSettings;
import org.openapitools.client.model.AudioCodecSettingsEac3Settings;
import org.openapitools.client.model.AudioCodecSettingsMp2Settings;
import org.openapitools.client.model.AudioCodecSettingsWavSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioDescriptionCodecSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioDescriptionCodecSettings {
  public static final String SERIALIZED_NAME_AAC_SETTINGS = "AacSettings";
  @SerializedName(SERIALIZED_NAME_AAC_SETTINGS)
  private AudioCodecSettingsAacSettings aacSettings;

  public static final String SERIALIZED_NAME_AC3_SETTINGS = "Ac3Settings";
  @SerializedName(SERIALIZED_NAME_AC3_SETTINGS)
  private AudioCodecSettingsAc3Settings ac3Settings;

  public static final String SERIALIZED_NAME_EAC3_ATMOS_SETTINGS = "Eac3AtmosSettings";
  @SerializedName(SERIALIZED_NAME_EAC3_ATMOS_SETTINGS)
  private AudioCodecSettingsEac3AtmosSettings eac3AtmosSettings;

  public static final String SERIALIZED_NAME_EAC3_SETTINGS = "Eac3Settings";
  @SerializedName(SERIALIZED_NAME_EAC3_SETTINGS)
  private AudioCodecSettingsEac3Settings eac3Settings;

  public static final String SERIALIZED_NAME_MP2_SETTINGS = "Mp2Settings";
  @SerializedName(SERIALIZED_NAME_MP2_SETTINGS)
  private AudioCodecSettingsMp2Settings mp2Settings;

  public static final String SERIALIZED_NAME_PASS_THROUGH_SETTINGS = "PassThroughSettings";
  @SerializedName(SERIALIZED_NAME_PASS_THROUGH_SETTINGS)
  private Object passThroughSettings;

  public static final String SERIALIZED_NAME_WAV_SETTINGS = "WavSettings";
  @SerializedName(SERIALIZED_NAME_WAV_SETTINGS)
  private AudioCodecSettingsWavSettings wavSettings;

  public AudioDescriptionCodecSettings() {
  }

  public AudioDescriptionCodecSettings aacSettings(AudioCodecSettingsAacSettings aacSettings) {
    this.aacSettings = aacSettings;
    return this;
  }

  /**
   * Get aacSettings
   * @return aacSettings
   */
  @javax.annotation.Nullable
  public AudioCodecSettingsAacSettings getAacSettings() {
    return aacSettings;
  }

  public void setAacSettings(AudioCodecSettingsAacSettings aacSettings) {
    this.aacSettings = aacSettings;
  }


  public AudioDescriptionCodecSettings ac3Settings(AudioCodecSettingsAc3Settings ac3Settings) {
    this.ac3Settings = ac3Settings;
    return this;
  }

  /**
   * Get ac3Settings
   * @return ac3Settings
   */
  @javax.annotation.Nullable
  public AudioCodecSettingsAc3Settings getAc3Settings() {
    return ac3Settings;
  }

  public void setAc3Settings(AudioCodecSettingsAc3Settings ac3Settings) {
    this.ac3Settings = ac3Settings;
  }


  public AudioDescriptionCodecSettings eac3AtmosSettings(AudioCodecSettingsEac3AtmosSettings eac3AtmosSettings) {
    this.eac3AtmosSettings = eac3AtmosSettings;
    return this;
  }

  /**
   * Get eac3AtmosSettings
   * @return eac3AtmosSettings
   */
  @javax.annotation.Nullable
  public AudioCodecSettingsEac3AtmosSettings getEac3AtmosSettings() {
    return eac3AtmosSettings;
  }

  public void setEac3AtmosSettings(AudioCodecSettingsEac3AtmosSettings eac3AtmosSettings) {
    this.eac3AtmosSettings = eac3AtmosSettings;
  }


  public AudioDescriptionCodecSettings eac3Settings(AudioCodecSettingsEac3Settings eac3Settings) {
    this.eac3Settings = eac3Settings;
    return this;
  }

  /**
   * Get eac3Settings
   * @return eac3Settings
   */
  @javax.annotation.Nullable
  public AudioCodecSettingsEac3Settings getEac3Settings() {
    return eac3Settings;
  }

  public void setEac3Settings(AudioCodecSettingsEac3Settings eac3Settings) {
    this.eac3Settings = eac3Settings;
  }


  public AudioDescriptionCodecSettings mp2Settings(AudioCodecSettingsMp2Settings mp2Settings) {
    this.mp2Settings = mp2Settings;
    return this;
  }

  /**
   * Get mp2Settings
   * @return mp2Settings
   */
  @javax.annotation.Nullable
  public AudioCodecSettingsMp2Settings getMp2Settings() {
    return mp2Settings;
  }

  public void setMp2Settings(AudioCodecSettingsMp2Settings mp2Settings) {
    this.mp2Settings = mp2Settings;
  }


  public AudioDescriptionCodecSettings passThroughSettings(Object passThroughSettings) {
    this.passThroughSettings = passThroughSettings;
    return this;
  }

  /**
   * Get passThroughSettings
   * @return passThroughSettings
   */
  @javax.annotation.Nullable
  public Object getPassThroughSettings() {
    return passThroughSettings;
  }

  public void setPassThroughSettings(Object passThroughSettings) {
    this.passThroughSettings = passThroughSettings;
  }


  public AudioDescriptionCodecSettings wavSettings(AudioCodecSettingsWavSettings wavSettings) {
    this.wavSettings = wavSettings;
    return this;
  }

  /**
   * Get wavSettings
   * @return wavSettings
   */
  @javax.annotation.Nullable
  public AudioCodecSettingsWavSettings getWavSettings() {
    return wavSettings;
  }

  public void setWavSettings(AudioCodecSettingsWavSettings wavSettings) {
    this.wavSettings = wavSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioDescriptionCodecSettings audioDescriptionCodecSettings = (AudioDescriptionCodecSettings) o;
    return Objects.equals(this.aacSettings, audioDescriptionCodecSettings.aacSettings) &&
        Objects.equals(this.ac3Settings, audioDescriptionCodecSettings.ac3Settings) &&
        Objects.equals(this.eac3AtmosSettings, audioDescriptionCodecSettings.eac3AtmosSettings) &&
        Objects.equals(this.eac3Settings, audioDescriptionCodecSettings.eac3Settings) &&
        Objects.equals(this.mp2Settings, audioDescriptionCodecSettings.mp2Settings) &&
        Objects.equals(this.passThroughSettings, audioDescriptionCodecSettings.passThroughSettings) &&
        Objects.equals(this.wavSettings, audioDescriptionCodecSettings.wavSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aacSettings, ac3Settings, eac3AtmosSettings, eac3Settings, mp2Settings, passThroughSettings, wavSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioDescriptionCodecSettings {\n");
    sb.append("    aacSettings: ").append(toIndentedString(aacSettings)).append("\n");
    sb.append("    ac3Settings: ").append(toIndentedString(ac3Settings)).append("\n");
    sb.append("    eac3AtmosSettings: ").append(toIndentedString(eac3AtmosSettings)).append("\n");
    sb.append("    eac3Settings: ").append(toIndentedString(eac3Settings)).append("\n");
    sb.append("    mp2Settings: ").append(toIndentedString(mp2Settings)).append("\n");
    sb.append("    passThroughSettings: ").append(toIndentedString(passThroughSettings)).append("\n");
    sb.append("    wavSettings: ").append(toIndentedString(wavSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AacSettings");
    openapiFields.add("Ac3Settings");
    openapiFields.add("Eac3AtmosSettings");
    openapiFields.add("Eac3Settings");
    openapiFields.add("Mp2Settings");
    openapiFields.add("PassThroughSettings");
    openapiFields.add("WavSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioDescriptionCodecSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioDescriptionCodecSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioDescriptionCodecSettings is not found in the empty JSON string", AudioDescriptionCodecSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioDescriptionCodecSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioDescriptionCodecSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AacSettings`
      if (jsonObj.get("AacSettings") != null && !jsonObj.get("AacSettings").isJsonNull()) {
        AudioCodecSettingsAacSettings.validateJsonElement(jsonObj.get("AacSettings"));
      }
      // validate the optional field `Ac3Settings`
      if (jsonObj.get("Ac3Settings") != null && !jsonObj.get("Ac3Settings").isJsonNull()) {
        AudioCodecSettingsAc3Settings.validateJsonElement(jsonObj.get("Ac3Settings"));
      }
      // validate the optional field `Eac3AtmosSettings`
      if (jsonObj.get("Eac3AtmosSettings") != null && !jsonObj.get("Eac3AtmosSettings").isJsonNull()) {
        AudioCodecSettingsEac3AtmosSettings.validateJsonElement(jsonObj.get("Eac3AtmosSettings"));
      }
      // validate the optional field `Eac3Settings`
      if (jsonObj.get("Eac3Settings") != null && !jsonObj.get("Eac3Settings").isJsonNull()) {
        AudioCodecSettingsEac3Settings.validateJsonElement(jsonObj.get("Eac3Settings"));
      }
      // validate the optional field `Mp2Settings`
      if (jsonObj.get("Mp2Settings") != null && !jsonObj.get("Mp2Settings").isJsonNull()) {
        AudioCodecSettingsMp2Settings.validateJsonElement(jsonObj.get("Mp2Settings"));
      }
      // validate the optional field `PassThroughSettings`
      if (jsonObj.get("PassThroughSettings") != null && !jsonObj.get("PassThroughSettings").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("PassThroughSettings"));
      }
      // validate the optional field `WavSettings`
      if (jsonObj.get("WavSettings") != null && !jsonObj.get("WavSettings").isJsonNull()) {
        AudioCodecSettingsWavSettings.validateJsonElement(jsonObj.get("WavSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioDescriptionCodecSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioDescriptionCodecSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioDescriptionCodecSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioDescriptionCodecSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioDescriptionCodecSettings>() {
           @Override
           public void write(JsonWriter out, AudioDescriptionCodecSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioDescriptionCodecSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioDescriptionCodecSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioDescriptionCodecSettings
   * @throws IOException if the JSON string is invalid with respect to AudioDescriptionCodecSettings
   */
  public static AudioDescriptionCodecSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioDescriptionCodecSettings.class);
  }

  /**
   * Convert an instance of AudioDescriptionCodecSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

