/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DescribeInputDeviceResponseHdDeviceSettings;
import org.openapitools.client.model.DescribeInputDeviceResponseUhdDeviceSettings;
import org.openapitools.client.model.DeviceSettingsSyncState;
import org.openapitools.client.model.DeviceUpdateStatus;
import org.openapitools.client.model.InputDeviceConnectionState;
import org.openapitools.client.model.InputDeviceSummaryNetworkSettings;
import org.openapitools.client.model.InputDeviceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the input device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputDeviceSummary {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "ConnectionState";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private InputDeviceConnectionState connectionState;

  public static final String SERIALIZED_NAME_DEVICE_SETTINGS_SYNC_STATE = "DeviceSettingsSyncState";
  @SerializedName(SERIALIZED_NAME_DEVICE_SETTINGS_SYNC_STATE)
  private DeviceSettingsSyncState deviceSettingsSyncState;

  public static final String SERIALIZED_NAME_DEVICE_UPDATE_STATUS = "DeviceUpdateStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_UPDATE_STATUS)
  private DeviceUpdateStatus deviceUpdateStatus;

  public static final String SERIALIZED_NAME_HD_DEVICE_SETTINGS = "HdDeviceSettings";
  @SerializedName(SERIALIZED_NAME_HD_DEVICE_SETTINGS)
  private DescribeInputDeviceResponseHdDeviceSettings hdDeviceSettings;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "MacAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_SETTINGS = "NetworkSettings";
  @SerializedName(SERIALIZED_NAME_NETWORK_SETTINGS)
  private InputDeviceSummaryNetworkSettings networkSettings;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private InputDeviceType type;

  public static final String SERIALIZED_NAME_UHD_DEVICE_SETTINGS = "UhdDeviceSettings";
  @SerializedName(SERIALIZED_NAME_UHD_DEVICE_SETTINGS)
  private DescribeInputDeviceResponseUhdDeviceSettings uhdDeviceSettings;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public InputDeviceSummary() {
  }

  public InputDeviceSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public InputDeviceSummary connectionState(InputDeviceConnectionState connectionState) {
    this.connectionState = connectionState;
    return this;
  }

  /**
   * Get connectionState
   * @return connectionState
   */
  @javax.annotation.Nullable
  public InputDeviceConnectionState getConnectionState() {
    return connectionState;
  }

  public void setConnectionState(InputDeviceConnectionState connectionState) {
    this.connectionState = connectionState;
  }


  public InputDeviceSummary deviceSettingsSyncState(DeviceSettingsSyncState deviceSettingsSyncState) {
    this.deviceSettingsSyncState = deviceSettingsSyncState;
    return this;
  }

  /**
   * Get deviceSettingsSyncState
   * @return deviceSettingsSyncState
   */
  @javax.annotation.Nullable
  public DeviceSettingsSyncState getDeviceSettingsSyncState() {
    return deviceSettingsSyncState;
  }

  public void setDeviceSettingsSyncState(DeviceSettingsSyncState deviceSettingsSyncState) {
    this.deviceSettingsSyncState = deviceSettingsSyncState;
  }


  public InputDeviceSummary deviceUpdateStatus(DeviceUpdateStatus deviceUpdateStatus) {
    this.deviceUpdateStatus = deviceUpdateStatus;
    return this;
  }

  /**
   * Get deviceUpdateStatus
   * @return deviceUpdateStatus
   */
  @javax.annotation.Nullable
  public DeviceUpdateStatus getDeviceUpdateStatus() {
    return deviceUpdateStatus;
  }

  public void setDeviceUpdateStatus(DeviceUpdateStatus deviceUpdateStatus) {
    this.deviceUpdateStatus = deviceUpdateStatus;
  }


  public InputDeviceSummary hdDeviceSettings(DescribeInputDeviceResponseHdDeviceSettings hdDeviceSettings) {
    this.hdDeviceSettings = hdDeviceSettings;
    return this;
  }

  /**
   * Get hdDeviceSettings
   * @return hdDeviceSettings
   */
  @javax.annotation.Nullable
  public DescribeInputDeviceResponseHdDeviceSettings getHdDeviceSettings() {
    return hdDeviceSettings;
  }

  public void setHdDeviceSettings(DescribeInputDeviceResponseHdDeviceSettings hdDeviceSettings) {
    this.hdDeviceSettings = hdDeviceSettings;
  }


  public InputDeviceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InputDeviceSummary macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public InputDeviceSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InputDeviceSummary networkSettings(InputDeviceSummaryNetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
    return this;
  }

  /**
   * Get networkSettings
   * @return networkSettings
   */
  @javax.annotation.Nullable
  public InputDeviceSummaryNetworkSettings getNetworkSettings() {
    return networkSettings;
  }

  public void setNetworkSettings(InputDeviceSummaryNetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
  }


  public InputDeviceSummary serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Get serialNumber
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public InputDeviceSummary type(InputDeviceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public InputDeviceType getType() {
    return type;
  }

  public void setType(InputDeviceType type) {
    this.type = type;
  }


  public InputDeviceSummary uhdDeviceSettings(DescribeInputDeviceResponseUhdDeviceSettings uhdDeviceSettings) {
    this.uhdDeviceSettings = uhdDeviceSettings;
    return this;
  }

  /**
   * Get uhdDeviceSettings
   * @return uhdDeviceSettings
   */
  @javax.annotation.Nullable
  public DescribeInputDeviceResponseUhdDeviceSettings getUhdDeviceSettings() {
    return uhdDeviceSettings;
  }

  public void setUhdDeviceSettings(DescribeInputDeviceResponseUhdDeviceSettings uhdDeviceSettings) {
    this.uhdDeviceSettings = uhdDeviceSettings;
  }


  public InputDeviceSummary tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public InputDeviceSummary availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputDeviceSummary inputDeviceSummary = (InputDeviceSummary) o;
    return Objects.equals(this.arn, inputDeviceSummary.arn) &&
        Objects.equals(this.connectionState, inputDeviceSummary.connectionState) &&
        Objects.equals(this.deviceSettingsSyncState, inputDeviceSummary.deviceSettingsSyncState) &&
        Objects.equals(this.deviceUpdateStatus, inputDeviceSummary.deviceUpdateStatus) &&
        Objects.equals(this.hdDeviceSettings, inputDeviceSummary.hdDeviceSettings) &&
        Objects.equals(this.id, inputDeviceSummary.id) &&
        Objects.equals(this.macAddress, inputDeviceSummary.macAddress) &&
        Objects.equals(this.name, inputDeviceSummary.name) &&
        Objects.equals(this.networkSettings, inputDeviceSummary.networkSettings) &&
        Objects.equals(this.serialNumber, inputDeviceSummary.serialNumber) &&
        Objects.equals(this.type, inputDeviceSummary.type) &&
        Objects.equals(this.uhdDeviceSettings, inputDeviceSummary.uhdDeviceSettings) &&
        Objects.equals(this.tags, inputDeviceSummary.tags) &&
        Objects.equals(this.availabilityZone, inputDeviceSummary.availabilityZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, connectionState, deviceSettingsSyncState, deviceUpdateStatus, hdDeviceSettings, id, macAddress, name, networkSettings, serialNumber, type, uhdDeviceSettings, tags, availabilityZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputDeviceSummary {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    deviceSettingsSyncState: ").append(toIndentedString(deviceSettingsSyncState)).append("\n");
    sb.append("    deviceUpdateStatus: ").append(toIndentedString(deviceUpdateStatus)).append("\n");
    sb.append("    hdDeviceSettings: ").append(toIndentedString(hdDeviceSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkSettings: ").append(toIndentedString(networkSettings)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uhdDeviceSettings: ").append(toIndentedString(uhdDeviceSettings)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("ConnectionState");
    openapiFields.add("DeviceSettingsSyncState");
    openapiFields.add("DeviceUpdateStatus");
    openapiFields.add("HdDeviceSettings");
    openapiFields.add("Id");
    openapiFields.add("MacAddress");
    openapiFields.add("Name");
    openapiFields.add("NetworkSettings");
    openapiFields.add("SerialNumber");
    openapiFields.add("Type");
    openapiFields.add("UhdDeviceSettings");
    openapiFields.add("Tags");
    openapiFields.add("AvailabilityZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputDeviceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputDeviceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputDeviceSummary is not found in the empty JSON string", InputDeviceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputDeviceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputDeviceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `ConnectionState`
      if (jsonObj.get("ConnectionState") != null && !jsonObj.get("ConnectionState").isJsonNull()) {
        InputDeviceConnectionState.validateJsonElement(jsonObj.get("ConnectionState"));
      }
      // validate the optional field `DeviceSettingsSyncState`
      if (jsonObj.get("DeviceSettingsSyncState") != null && !jsonObj.get("DeviceSettingsSyncState").isJsonNull()) {
        DeviceSettingsSyncState.validateJsonElement(jsonObj.get("DeviceSettingsSyncState"));
      }
      // validate the optional field `DeviceUpdateStatus`
      if (jsonObj.get("DeviceUpdateStatus") != null && !jsonObj.get("DeviceUpdateStatus").isJsonNull()) {
        DeviceUpdateStatus.validateJsonElement(jsonObj.get("DeviceUpdateStatus"));
      }
      // validate the optional field `HdDeviceSettings`
      if (jsonObj.get("HdDeviceSettings") != null && !jsonObj.get("HdDeviceSettings").isJsonNull()) {
        DescribeInputDeviceResponseHdDeviceSettings.validateJsonElement(jsonObj.get("HdDeviceSettings"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `MacAddress`
      if (jsonObj.get("MacAddress") != null && !jsonObj.get("MacAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MacAddress"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `NetworkSettings`
      if (jsonObj.get("NetworkSettings") != null && !jsonObj.get("NetworkSettings").isJsonNull()) {
        InputDeviceSummaryNetworkSettings.validateJsonElement(jsonObj.get("NetworkSettings"));
      }
      // validate the optional field `SerialNumber`
      if (jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SerialNumber"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        InputDeviceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `UhdDeviceSettings`
      if (jsonObj.get("UhdDeviceSettings") != null && !jsonObj.get("UhdDeviceSettings").isJsonNull()) {
        DescribeInputDeviceResponseUhdDeviceSettings.validateJsonElement(jsonObj.get("UhdDeviceSettings"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `AvailabilityZone`
      if (jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputDeviceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputDeviceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputDeviceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputDeviceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<InputDeviceSummary>() {
           @Override
           public void write(JsonWriter out, InputDeviceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputDeviceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputDeviceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputDeviceSummary
   * @throws IOException if the JSON string is invalid with respect to InputDeviceSummary
   */
  public static InputDeviceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputDeviceSummary.class);
  }

  /**
   * Convert an instance of InputDeviceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

