/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.InputClass;
import org.openapitools.client.model.InputSourceType;
import org.openapitools.client.model.InputState;
import org.openapitools.client.model.InputType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Placeholder documentation for Input
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Input {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ATTACHED_CHANNELS = "AttachedChannels";
  @SerializedName(SERIALIZED_NAME_ATTACHED_CHANNELS)
  private List attachedChannels;

  public static final String SERIALIZED_NAME_DESTINATIONS = "Destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List destinations;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_CLASS = "InputClass";
  @SerializedName(SERIALIZED_NAME_INPUT_CLASS)
  private InputClass inputClass;

  public static final String SERIALIZED_NAME_INPUT_DEVICES = "InputDevices";
  @SerializedName(SERIALIZED_NAME_INPUT_DEVICES)
  private List inputDevices;

  public static final String SERIALIZED_NAME_INPUT_PARTNER_IDS = "InputPartnerIds";
  @SerializedName(SERIALIZED_NAME_INPUT_PARTNER_IDS)
  private List inputPartnerIds;

  public static final String SERIALIZED_NAME_INPUT_SOURCE_TYPE = "InputSourceType";
  @SerializedName(SERIALIZED_NAME_INPUT_SOURCE_TYPE)
  private InputSourceType inputSourceType;

  public static final String SERIALIZED_NAME_MEDIA_CONNECT_FLOWS = "MediaConnectFlows";
  @SerializedName(SERIALIZED_NAME_MEDIA_CONNECT_FLOWS)
  private List mediaConnectFlows;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "SecurityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public static final String SERIALIZED_NAME_SOURCES = "Sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private InputState state;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private InputType type;

  public Input() {
  }

  public Input arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Input attachedChannels(List attachedChannels) {
    this.attachedChannels = attachedChannels;
    return this;
  }

  /**
   * Get attachedChannels
   * @return attachedChannels
   */
  @javax.annotation.Nullable
  public List getAttachedChannels() {
    return attachedChannels;
  }

  public void setAttachedChannels(List attachedChannels) {
    this.attachedChannels = attachedChannels;
  }


  public Input destinations(List destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public List getDestinations() {
    return destinations;
  }

  public void setDestinations(List destinations) {
    this.destinations = destinations;
  }


  public Input id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Input inputClass(InputClass inputClass) {
    this.inputClass = inputClass;
    return this;
  }

  /**
   * Get inputClass
   * @return inputClass
   */
  @javax.annotation.Nullable
  public InputClass getInputClass() {
    return inputClass;
  }

  public void setInputClass(InputClass inputClass) {
    this.inputClass = inputClass;
  }


  public Input inputDevices(List inputDevices) {
    this.inputDevices = inputDevices;
    return this;
  }

  /**
   * Get inputDevices
   * @return inputDevices
   */
  @javax.annotation.Nullable
  public List getInputDevices() {
    return inputDevices;
  }

  public void setInputDevices(List inputDevices) {
    this.inputDevices = inputDevices;
  }


  public Input inputPartnerIds(List inputPartnerIds) {
    this.inputPartnerIds = inputPartnerIds;
    return this;
  }

  /**
   * Get inputPartnerIds
   * @return inputPartnerIds
   */
  @javax.annotation.Nullable
  public List getInputPartnerIds() {
    return inputPartnerIds;
  }

  public void setInputPartnerIds(List inputPartnerIds) {
    this.inputPartnerIds = inputPartnerIds;
  }


  public Input inputSourceType(InputSourceType inputSourceType) {
    this.inputSourceType = inputSourceType;
    return this;
  }

  /**
   * Get inputSourceType
   * @return inputSourceType
   */
  @javax.annotation.Nullable
  public InputSourceType getInputSourceType() {
    return inputSourceType;
  }

  public void setInputSourceType(InputSourceType inputSourceType) {
    this.inputSourceType = inputSourceType;
  }


  public Input mediaConnectFlows(List mediaConnectFlows) {
    this.mediaConnectFlows = mediaConnectFlows;
    return this;
  }

  /**
   * Get mediaConnectFlows
   * @return mediaConnectFlows
   */
  @javax.annotation.Nullable
  public List getMediaConnectFlows() {
    return mediaConnectFlows;
  }

  public void setMediaConnectFlows(List mediaConnectFlows) {
    this.mediaConnectFlows = mediaConnectFlows;
  }


  public Input name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Input roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public Input securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }


  public Input sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }


  public Input state(InputState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public InputState getState() {
    return state;
  }

  public void setState(InputState state) {
    this.state = state;
  }


  public Input tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public Input type(InputType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public InputType getType() {
    return type;
  }

  public void setType(InputType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Input input = (Input) o;
    return Objects.equals(this.arn, input.arn) &&
        Objects.equals(this.attachedChannels, input.attachedChannels) &&
        Objects.equals(this.destinations, input.destinations) &&
        Objects.equals(this.id, input.id) &&
        Objects.equals(this.inputClass, input.inputClass) &&
        Objects.equals(this.inputDevices, input.inputDevices) &&
        Objects.equals(this.inputPartnerIds, input.inputPartnerIds) &&
        Objects.equals(this.inputSourceType, input.inputSourceType) &&
        Objects.equals(this.mediaConnectFlows, input.mediaConnectFlows) &&
        Objects.equals(this.name, input.name) &&
        Objects.equals(this.roleArn, input.roleArn) &&
        Objects.equals(this.securityGroups, input.securityGroups) &&
        Objects.equals(this.sources, input.sources) &&
        Objects.equals(this.state, input.state) &&
        Objects.equals(this.tags, input.tags) &&
        Objects.equals(this.type, input.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, attachedChannels, destinations, id, inputClass, inputDevices, inputPartnerIds, inputSourceType, mediaConnectFlows, name, roleArn, securityGroups, sources, state, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Input {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    attachedChannels: ").append(toIndentedString(attachedChannels)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputClass: ").append(toIndentedString(inputClass)).append("\n");
    sb.append("    inputDevices: ").append(toIndentedString(inputDevices)).append("\n");
    sb.append("    inputPartnerIds: ").append(toIndentedString(inputPartnerIds)).append("\n");
    sb.append("    inputSourceType: ").append(toIndentedString(inputSourceType)).append("\n");
    sb.append("    mediaConnectFlows: ").append(toIndentedString(mediaConnectFlows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("AttachedChannels");
    openapiFields.add("Destinations");
    openapiFields.add("Id");
    openapiFields.add("InputClass");
    openapiFields.add("InputDevices");
    openapiFields.add("InputPartnerIds");
    openapiFields.add("InputSourceType");
    openapiFields.add("MediaConnectFlows");
    openapiFields.add("Name");
    openapiFields.add("RoleArn");
    openapiFields.add("SecurityGroups");
    openapiFields.add("Sources");
    openapiFields.add("State");
    openapiFields.add("Tags");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Input
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Input.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Input is not found in the empty JSON string", Input.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Input.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Input` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `AttachedChannels`
      if (jsonObj.get("AttachedChannels") != null && !jsonObj.get("AttachedChannels").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttachedChannels"));
      }
      // validate the optional field `Destinations`
      if (jsonObj.get("Destinations") != null && !jsonObj.get("Destinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Destinations"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `InputClass`
      if (jsonObj.get("InputClass") != null && !jsonObj.get("InputClass").isJsonNull()) {
        InputClass.validateJsonElement(jsonObj.get("InputClass"));
      }
      // validate the optional field `InputDevices`
      if (jsonObj.get("InputDevices") != null && !jsonObj.get("InputDevices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputDevices"));
      }
      // validate the optional field `InputPartnerIds`
      if (jsonObj.get("InputPartnerIds") != null && !jsonObj.get("InputPartnerIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputPartnerIds"));
      }
      // validate the optional field `InputSourceType`
      if (jsonObj.get("InputSourceType") != null && !jsonObj.get("InputSourceType").isJsonNull()) {
        InputSourceType.validateJsonElement(jsonObj.get("InputSourceType"));
      }
      // validate the optional field `MediaConnectFlows`
      if (jsonObj.get("MediaConnectFlows") != null && !jsonObj.get("MediaConnectFlows").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MediaConnectFlows"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `SecurityGroups`
      if (jsonObj.get("SecurityGroups") != null && !jsonObj.get("SecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroups"));
      }
      // validate the optional field `Sources`
      if (jsonObj.get("Sources") != null && !jsonObj.get("Sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Sources"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        InputState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        InputType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Input.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Input' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Input> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Input.class));

       return (TypeAdapter<T>) new TypeAdapter<Input>() {
           @Override
           public void write(JsonWriter out, Input value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Input read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Input given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Input
   * @throws IOException if the JSON string is invalid with respect to Input
   */
  public static Input fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Input.class);
  }

  /**
   * Convert an instance of Input to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

