/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputLossActionForMsSmoothOut;
import org.openapitools.client.model.MsSmoothGroupSettingsDestination;
import org.openapitools.client.model.SmoothGroupAudioOnlyTimecodeControl;
import org.openapitools.client.model.SmoothGroupCertificateMode;
import org.openapitools.client.model.SmoothGroupEventIdMode;
import org.openapitools.client.model.SmoothGroupEventStopBehavior;
import org.openapitools.client.model.SmoothGroupSegmentationMode;
import org.openapitools.client.model.SmoothGroupSparseTrackType;
import org.openapitools.client.model.SmoothGroupStreamManifestBehavior;
import org.openapitools.client.model.SmoothGroupTimestampOffsetMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ms Smooth Group Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MsSmoothGroupSettings {
  public static final String SERIALIZED_NAME_ACQUISITION_POINT_ID = "AcquisitionPointId";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_POINT_ID)
  private String acquisitionPointId;

  public static final String SERIALIZED_NAME_AUDIO_ONLY_TIMECODE_CONTROL = "AudioOnlyTimecodeControl";
  @SerializedName(SERIALIZED_NAME_AUDIO_ONLY_TIMECODE_CONTROL)
  private SmoothGroupAudioOnlyTimecodeControl audioOnlyTimecodeControl;

  public static final String SERIALIZED_NAME_CERTIFICATE_MODE = "CertificateMode";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_MODE)
  private SmoothGroupCertificateMode certificateMode;

  public static final String SERIALIZED_NAME_CONNECTION_RETRY_INTERVAL = "ConnectionRetryInterval";
  @SerializedName(SERIALIZED_NAME_CONNECTION_RETRY_INTERVAL)
  private Integer connectionRetryInterval;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private MsSmoothGroupSettingsDestination destination;

  public static final String SERIALIZED_NAME_EVENT_ID = "EventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_ID_MODE = "EventIdMode";
  @SerializedName(SERIALIZED_NAME_EVENT_ID_MODE)
  private SmoothGroupEventIdMode eventIdMode;

  public static final String SERIALIZED_NAME_EVENT_STOP_BEHAVIOR = "EventStopBehavior";
  @SerializedName(SERIALIZED_NAME_EVENT_STOP_BEHAVIOR)
  private SmoothGroupEventStopBehavior eventStopBehavior;

  public static final String SERIALIZED_NAME_FILECACHE_DURATION = "FilecacheDuration";
  @SerializedName(SERIALIZED_NAME_FILECACHE_DURATION)
  private Integer filecacheDuration;

  public static final String SERIALIZED_NAME_FRAGMENT_LENGTH = "FragmentLength";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_LENGTH)
  private Integer fragmentLength;

  public static final String SERIALIZED_NAME_INPUT_LOSS_ACTION = "InputLossAction";
  @SerializedName(SERIALIZED_NAME_INPUT_LOSS_ACTION)
  private InputLossActionForMsSmoothOut inputLossAction;

  public static final String SERIALIZED_NAME_NUM_RETRIES = "NumRetries";
  @SerializedName(SERIALIZED_NAME_NUM_RETRIES)
  private Integer numRetries;

  public static final String SERIALIZED_NAME_RESTART_DELAY = "RestartDelay";
  @SerializedName(SERIALIZED_NAME_RESTART_DELAY)
  private Integer restartDelay;

  public static final String SERIALIZED_NAME_SEGMENTATION_MODE = "SegmentationMode";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_MODE)
  private SmoothGroupSegmentationMode segmentationMode;

  public static final String SERIALIZED_NAME_SEND_DELAY_MS = "SendDelayMs";
  @SerializedName(SERIALIZED_NAME_SEND_DELAY_MS)
  private Integer sendDelayMs;

  public static final String SERIALIZED_NAME_SPARSE_TRACK_TYPE = "SparseTrackType";
  @SerializedName(SERIALIZED_NAME_SPARSE_TRACK_TYPE)
  private SmoothGroupSparseTrackType sparseTrackType;

  public static final String SERIALIZED_NAME_STREAM_MANIFEST_BEHAVIOR = "StreamManifestBehavior";
  @SerializedName(SERIALIZED_NAME_STREAM_MANIFEST_BEHAVIOR)
  private SmoothGroupStreamManifestBehavior streamManifestBehavior;

  public static final String SERIALIZED_NAME_TIMESTAMP_OFFSET = "TimestampOffset";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_OFFSET)
  private String timestampOffset;

  public static final String SERIALIZED_NAME_TIMESTAMP_OFFSET_MODE = "TimestampOffsetMode";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_OFFSET_MODE)
  private SmoothGroupTimestampOffsetMode timestampOffsetMode;

  public MsSmoothGroupSettings() {
  }

  public MsSmoothGroupSettings acquisitionPointId(String acquisitionPointId) {
    this.acquisitionPointId = acquisitionPointId;
    return this;
  }

  /**
   * Get acquisitionPointId
   * @return acquisitionPointId
   */
  @javax.annotation.Nullable
  public String getAcquisitionPointId() {
    return acquisitionPointId;
  }

  public void setAcquisitionPointId(String acquisitionPointId) {
    this.acquisitionPointId = acquisitionPointId;
  }


  public MsSmoothGroupSettings audioOnlyTimecodeControl(SmoothGroupAudioOnlyTimecodeControl audioOnlyTimecodeControl) {
    this.audioOnlyTimecodeControl = audioOnlyTimecodeControl;
    return this;
  }

  /**
   * Get audioOnlyTimecodeControl
   * @return audioOnlyTimecodeControl
   */
  @javax.annotation.Nullable
  public SmoothGroupAudioOnlyTimecodeControl getAudioOnlyTimecodeControl() {
    return audioOnlyTimecodeControl;
  }

  public void setAudioOnlyTimecodeControl(SmoothGroupAudioOnlyTimecodeControl audioOnlyTimecodeControl) {
    this.audioOnlyTimecodeControl = audioOnlyTimecodeControl;
  }


  public MsSmoothGroupSettings certificateMode(SmoothGroupCertificateMode certificateMode) {
    this.certificateMode = certificateMode;
    return this;
  }

  /**
   * Get certificateMode
   * @return certificateMode
   */
  @javax.annotation.Nullable
  public SmoothGroupCertificateMode getCertificateMode() {
    return certificateMode;
  }

  public void setCertificateMode(SmoothGroupCertificateMode certificateMode) {
    this.certificateMode = certificateMode;
  }


  public MsSmoothGroupSettings connectionRetryInterval(Integer connectionRetryInterval) {
    this.connectionRetryInterval = connectionRetryInterval;
    return this;
  }

  /**
   * Get connectionRetryInterval
   * @return connectionRetryInterval
   */
  @javax.annotation.Nullable
  public Integer getConnectionRetryInterval() {
    return connectionRetryInterval;
  }

  public void setConnectionRetryInterval(Integer connectionRetryInterval) {
    this.connectionRetryInterval = connectionRetryInterval;
  }


  public MsSmoothGroupSettings destination(MsSmoothGroupSettingsDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public MsSmoothGroupSettingsDestination getDestination() {
    return destination;
  }

  public void setDestination(MsSmoothGroupSettingsDestination destination) {
    this.destination = destination;
  }


  public MsSmoothGroupSettings eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public MsSmoothGroupSettings eventIdMode(SmoothGroupEventIdMode eventIdMode) {
    this.eventIdMode = eventIdMode;
    return this;
  }

  /**
   * Get eventIdMode
   * @return eventIdMode
   */
  @javax.annotation.Nullable
  public SmoothGroupEventIdMode getEventIdMode() {
    return eventIdMode;
  }

  public void setEventIdMode(SmoothGroupEventIdMode eventIdMode) {
    this.eventIdMode = eventIdMode;
  }


  public MsSmoothGroupSettings eventStopBehavior(SmoothGroupEventStopBehavior eventStopBehavior) {
    this.eventStopBehavior = eventStopBehavior;
    return this;
  }

  /**
   * Get eventStopBehavior
   * @return eventStopBehavior
   */
  @javax.annotation.Nullable
  public SmoothGroupEventStopBehavior getEventStopBehavior() {
    return eventStopBehavior;
  }

  public void setEventStopBehavior(SmoothGroupEventStopBehavior eventStopBehavior) {
    this.eventStopBehavior = eventStopBehavior;
  }


  public MsSmoothGroupSettings filecacheDuration(Integer filecacheDuration) {
    this.filecacheDuration = filecacheDuration;
    return this;
  }

  /**
   * Get filecacheDuration
   * @return filecacheDuration
   */
  @javax.annotation.Nullable
  public Integer getFilecacheDuration() {
    return filecacheDuration;
  }

  public void setFilecacheDuration(Integer filecacheDuration) {
    this.filecacheDuration = filecacheDuration;
  }


  public MsSmoothGroupSettings fragmentLength(Integer fragmentLength) {
    this.fragmentLength = fragmentLength;
    return this;
  }

  /**
   * Get fragmentLength
   * @return fragmentLength
   */
  @javax.annotation.Nullable
  public Integer getFragmentLength() {
    return fragmentLength;
  }

  public void setFragmentLength(Integer fragmentLength) {
    this.fragmentLength = fragmentLength;
  }


  public MsSmoothGroupSettings inputLossAction(InputLossActionForMsSmoothOut inputLossAction) {
    this.inputLossAction = inputLossAction;
    return this;
  }

  /**
   * Get inputLossAction
   * @return inputLossAction
   */
  @javax.annotation.Nullable
  public InputLossActionForMsSmoothOut getInputLossAction() {
    return inputLossAction;
  }

  public void setInputLossAction(InputLossActionForMsSmoothOut inputLossAction) {
    this.inputLossAction = inputLossAction;
  }


  public MsSmoothGroupSettings numRetries(Integer numRetries) {
    this.numRetries = numRetries;
    return this;
  }

  /**
   * Get numRetries
   * @return numRetries
   */
  @javax.annotation.Nullable
  public Integer getNumRetries() {
    return numRetries;
  }

  public void setNumRetries(Integer numRetries) {
    this.numRetries = numRetries;
  }


  public MsSmoothGroupSettings restartDelay(Integer restartDelay) {
    this.restartDelay = restartDelay;
    return this;
  }

  /**
   * Get restartDelay
   * @return restartDelay
   */
  @javax.annotation.Nullable
  public Integer getRestartDelay() {
    return restartDelay;
  }

  public void setRestartDelay(Integer restartDelay) {
    this.restartDelay = restartDelay;
  }


  public MsSmoothGroupSettings segmentationMode(SmoothGroupSegmentationMode segmentationMode) {
    this.segmentationMode = segmentationMode;
    return this;
  }

  /**
   * Get segmentationMode
   * @return segmentationMode
   */
  @javax.annotation.Nullable
  public SmoothGroupSegmentationMode getSegmentationMode() {
    return segmentationMode;
  }

  public void setSegmentationMode(SmoothGroupSegmentationMode segmentationMode) {
    this.segmentationMode = segmentationMode;
  }


  public MsSmoothGroupSettings sendDelayMs(Integer sendDelayMs) {
    this.sendDelayMs = sendDelayMs;
    return this;
  }

  /**
   * Get sendDelayMs
   * @return sendDelayMs
   */
  @javax.annotation.Nullable
  public Integer getSendDelayMs() {
    return sendDelayMs;
  }

  public void setSendDelayMs(Integer sendDelayMs) {
    this.sendDelayMs = sendDelayMs;
  }


  public MsSmoothGroupSettings sparseTrackType(SmoothGroupSparseTrackType sparseTrackType) {
    this.sparseTrackType = sparseTrackType;
    return this;
  }

  /**
   * Get sparseTrackType
   * @return sparseTrackType
   */
  @javax.annotation.Nullable
  public SmoothGroupSparseTrackType getSparseTrackType() {
    return sparseTrackType;
  }

  public void setSparseTrackType(SmoothGroupSparseTrackType sparseTrackType) {
    this.sparseTrackType = sparseTrackType;
  }


  public MsSmoothGroupSettings streamManifestBehavior(SmoothGroupStreamManifestBehavior streamManifestBehavior) {
    this.streamManifestBehavior = streamManifestBehavior;
    return this;
  }

  /**
   * Get streamManifestBehavior
   * @return streamManifestBehavior
   */
  @javax.annotation.Nullable
  public SmoothGroupStreamManifestBehavior getStreamManifestBehavior() {
    return streamManifestBehavior;
  }

  public void setStreamManifestBehavior(SmoothGroupStreamManifestBehavior streamManifestBehavior) {
    this.streamManifestBehavior = streamManifestBehavior;
  }


  public MsSmoothGroupSettings timestampOffset(String timestampOffset) {
    this.timestampOffset = timestampOffset;
    return this;
  }

  /**
   * Get timestampOffset
   * @return timestampOffset
   */
  @javax.annotation.Nullable
  public String getTimestampOffset() {
    return timestampOffset;
  }

  public void setTimestampOffset(String timestampOffset) {
    this.timestampOffset = timestampOffset;
  }


  public MsSmoothGroupSettings timestampOffsetMode(SmoothGroupTimestampOffsetMode timestampOffsetMode) {
    this.timestampOffsetMode = timestampOffsetMode;
    return this;
  }

  /**
   * Get timestampOffsetMode
   * @return timestampOffsetMode
   */
  @javax.annotation.Nullable
  public SmoothGroupTimestampOffsetMode getTimestampOffsetMode() {
    return timestampOffsetMode;
  }

  public void setTimestampOffsetMode(SmoothGroupTimestampOffsetMode timestampOffsetMode) {
    this.timestampOffsetMode = timestampOffsetMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MsSmoothGroupSettings msSmoothGroupSettings = (MsSmoothGroupSettings) o;
    return Objects.equals(this.acquisitionPointId, msSmoothGroupSettings.acquisitionPointId) &&
        Objects.equals(this.audioOnlyTimecodeControl, msSmoothGroupSettings.audioOnlyTimecodeControl) &&
        Objects.equals(this.certificateMode, msSmoothGroupSettings.certificateMode) &&
        Objects.equals(this.connectionRetryInterval, msSmoothGroupSettings.connectionRetryInterval) &&
        Objects.equals(this.destination, msSmoothGroupSettings.destination) &&
        Objects.equals(this.eventId, msSmoothGroupSettings.eventId) &&
        Objects.equals(this.eventIdMode, msSmoothGroupSettings.eventIdMode) &&
        Objects.equals(this.eventStopBehavior, msSmoothGroupSettings.eventStopBehavior) &&
        Objects.equals(this.filecacheDuration, msSmoothGroupSettings.filecacheDuration) &&
        Objects.equals(this.fragmentLength, msSmoothGroupSettings.fragmentLength) &&
        Objects.equals(this.inputLossAction, msSmoothGroupSettings.inputLossAction) &&
        Objects.equals(this.numRetries, msSmoothGroupSettings.numRetries) &&
        Objects.equals(this.restartDelay, msSmoothGroupSettings.restartDelay) &&
        Objects.equals(this.segmentationMode, msSmoothGroupSettings.segmentationMode) &&
        Objects.equals(this.sendDelayMs, msSmoothGroupSettings.sendDelayMs) &&
        Objects.equals(this.sparseTrackType, msSmoothGroupSettings.sparseTrackType) &&
        Objects.equals(this.streamManifestBehavior, msSmoothGroupSettings.streamManifestBehavior) &&
        Objects.equals(this.timestampOffset, msSmoothGroupSettings.timestampOffset) &&
        Objects.equals(this.timestampOffsetMode, msSmoothGroupSettings.timestampOffsetMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionPointId, audioOnlyTimecodeControl, certificateMode, connectionRetryInterval, destination, eventId, eventIdMode, eventStopBehavior, filecacheDuration, fragmentLength, inputLossAction, numRetries, restartDelay, segmentationMode, sendDelayMs, sparseTrackType, streamManifestBehavior, timestampOffset, timestampOffsetMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MsSmoothGroupSettings {\n");
    sb.append("    acquisitionPointId: ").append(toIndentedString(acquisitionPointId)).append("\n");
    sb.append("    audioOnlyTimecodeControl: ").append(toIndentedString(audioOnlyTimecodeControl)).append("\n");
    sb.append("    certificateMode: ").append(toIndentedString(certificateMode)).append("\n");
    sb.append("    connectionRetryInterval: ").append(toIndentedString(connectionRetryInterval)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventIdMode: ").append(toIndentedString(eventIdMode)).append("\n");
    sb.append("    eventStopBehavior: ").append(toIndentedString(eventStopBehavior)).append("\n");
    sb.append("    filecacheDuration: ").append(toIndentedString(filecacheDuration)).append("\n");
    sb.append("    fragmentLength: ").append(toIndentedString(fragmentLength)).append("\n");
    sb.append("    inputLossAction: ").append(toIndentedString(inputLossAction)).append("\n");
    sb.append("    numRetries: ").append(toIndentedString(numRetries)).append("\n");
    sb.append("    restartDelay: ").append(toIndentedString(restartDelay)).append("\n");
    sb.append("    segmentationMode: ").append(toIndentedString(segmentationMode)).append("\n");
    sb.append("    sendDelayMs: ").append(toIndentedString(sendDelayMs)).append("\n");
    sb.append("    sparseTrackType: ").append(toIndentedString(sparseTrackType)).append("\n");
    sb.append("    streamManifestBehavior: ").append(toIndentedString(streamManifestBehavior)).append("\n");
    sb.append("    timestampOffset: ").append(toIndentedString(timestampOffset)).append("\n");
    sb.append("    timestampOffsetMode: ").append(toIndentedString(timestampOffsetMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcquisitionPointId");
    openapiFields.add("AudioOnlyTimecodeControl");
    openapiFields.add("CertificateMode");
    openapiFields.add("ConnectionRetryInterval");
    openapiFields.add("Destination");
    openapiFields.add("EventId");
    openapiFields.add("EventIdMode");
    openapiFields.add("EventStopBehavior");
    openapiFields.add("FilecacheDuration");
    openapiFields.add("FragmentLength");
    openapiFields.add("InputLossAction");
    openapiFields.add("NumRetries");
    openapiFields.add("RestartDelay");
    openapiFields.add("SegmentationMode");
    openapiFields.add("SendDelayMs");
    openapiFields.add("SparseTrackType");
    openapiFields.add("StreamManifestBehavior");
    openapiFields.add("TimestampOffset");
    openapiFields.add("TimestampOffsetMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Destination");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MsSmoothGroupSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MsSmoothGroupSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MsSmoothGroupSettings is not found in the empty JSON string", MsSmoothGroupSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MsSmoothGroupSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MsSmoothGroupSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MsSmoothGroupSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcquisitionPointId`
      if (jsonObj.get("AcquisitionPointId") != null && !jsonObj.get("AcquisitionPointId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AcquisitionPointId"));
      }
      // validate the optional field `AudioOnlyTimecodeControl`
      if (jsonObj.get("AudioOnlyTimecodeControl") != null && !jsonObj.get("AudioOnlyTimecodeControl").isJsonNull()) {
        SmoothGroupAudioOnlyTimecodeControl.validateJsonElement(jsonObj.get("AudioOnlyTimecodeControl"));
      }
      // validate the optional field `CertificateMode`
      if (jsonObj.get("CertificateMode") != null && !jsonObj.get("CertificateMode").isJsonNull()) {
        SmoothGroupCertificateMode.validateJsonElement(jsonObj.get("CertificateMode"));
      }
      // validate the optional field `ConnectionRetryInterval`
      if (jsonObj.get("ConnectionRetryInterval") != null && !jsonObj.get("ConnectionRetryInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConnectionRetryInterval"));
      }
      // validate the required field `Destination`
      MsSmoothGroupSettingsDestination.validateJsonElement(jsonObj.get("Destination"));
      // validate the optional field `EventId`
      if (jsonObj.get("EventId") != null && !jsonObj.get("EventId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventId"));
      }
      // validate the optional field `EventIdMode`
      if (jsonObj.get("EventIdMode") != null && !jsonObj.get("EventIdMode").isJsonNull()) {
        SmoothGroupEventIdMode.validateJsonElement(jsonObj.get("EventIdMode"));
      }
      // validate the optional field `EventStopBehavior`
      if (jsonObj.get("EventStopBehavior") != null && !jsonObj.get("EventStopBehavior").isJsonNull()) {
        SmoothGroupEventStopBehavior.validateJsonElement(jsonObj.get("EventStopBehavior"));
      }
      // validate the optional field `FilecacheDuration`
      if (jsonObj.get("FilecacheDuration") != null && !jsonObj.get("FilecacheDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FilecacheDuration"));
      }
      // validate the optional field `FragmentLength`
      if (jsonObj.get("FragmentLength") != null && !jsonObj.get("FragmentLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FragmentLength"));
      }
      // validate the optional field `InputLossAction`
      if (jsonObj.get("InputLossAction") != null && !jsonObj.get("InputLossAction").isJsonNull()) {
        InputLossActionForMsSmoothOut.validateJsonElement(jsonObj.get("InputLossAction"));
      }
      // validate the optional field `NumRetries`
      if (jsonObj.get("NumRetries") != null && !jsonObj.get("NumRetries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumRetries"));
      }
      // validate the optional field `RestartDelay`
      if (jsonObj.get("RestartDelay") != null && !jsonObj.get("RestartDelay").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RestartDelay"));
      }
      // validate the optional field `SegmentationMode`
      if (jsonObj.get("SegmentationMode") != null && !jsonObj.get("SegmentationMode").isJsonNull()) {
        SmoothGroupSegmentationMode.validateJsonElement(jsonObj.get("SegmentationMode"));
      }
      // validate the optional field `SendDelayMs`
      if (jsonObj.get("SendDelayMs") != null && !jsonObj.get("SendDelayMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SendDelayMs"));
      }
      // validate the optional field `SparseTrackType`
      if (jsonObj.get("SparseTrackType") != null && !jsonObj.get("SparseTrackType").isJsonNull()) {
        SmoothGroupSparseTrackType.validateJsonElement(jsonObj.get("SparseTrackType"));
      }
      // validate the optional field `StreamManifestBehavior`
      if (jsonObj.get("StreamManifestBehavior") != null && !jsonObj.get("StreamManifestBehavior").isJsonNull()) {
        SmoothGroupStreamManifestBehavior.validateJsonElement(jsonObj.get("StreamManifestBehavior"));
      }
      // validate the optional field `TimestampOffset`
      if (jsonObj.get("TimestampOffset") != null && !jsonObj.get("TimestampOffset").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimestampOffset"));
      }
      // validate the optional field `TimestampOffsetMode`
      if (jsonObj.get("TimestampOffsetMode") != null && !jsonObj.get("TimestampOffsetMode").isJsonNull()) {
        SmoothGroupTimestampOffsetMode.validateJsonElement(jsonObj.get("TimestampOffsetMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MsSmoothGroupSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MsSmoothGroupSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MsSmoothGroupSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MsSmoothGroupSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MsSmoothGroupSettings>() {
           @Override
           public void write(JsonWriter out, MsSmoothGroupSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MsSmoothGroupSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MsSmoothGroupSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MsSmoothGroupSettings
   * @throws IOException if the JSON string is invalid with respect to MsSmoothGroupSettings
   */
  public static MsSmoothGroupSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MsSmoothGroupSettings.class);
  }

  /**
   * Convert an instance of MsSmoothGroupSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

