/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputDeviceActiveInput;
import org.openapitools.client.model.InputDeviceConfiguredInput;
import org.openapitools.client.model.InputDeviceScanType;
import org.openapitools.client.model.InputDeviceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings that describe the active source from the input device, and the video characteristics of that source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputDeviceHdSettings {
  public static final String SERIALIZED_NAME_ACTIVE_INPUT = "ActiveInput";
  @SerializedName(SERIALIZED_NAME_ACTIVE_INPUT)
  private InputDeviceActiveInput activeInput;

  public static final String SERIALIZED_NAME_CONFIGURED_INPUT = "ConfiguredInput";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_INPUT)
  private InputDeviceConfiguredInput configuredInput;

  public static final String SERIALIZED_NAME_DEVICE_STATE = "DeviceState";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATE)
  private InputDeviceState deviceState;

  public static final String SERIALIZED_NAME_FRAMERATE = "Framerate";
  @SerializedName(SERIALIZED_NAME_FRAMERATE)
  private Double framerate;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "ScanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private InputDeviceScanType scanType;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public static final String SERIALIZED_NAME_LATENCY_MS = "LatencyMs";
  @SerializedName(SERIALIZED_NAME_LATENCY_MS)
  private Integer latencyMs;

  public InputDeviceHdSettings() {
  }

  public InputDeviceHdSettings activeInput(InputDeviceActiveInput activeInput) {
    this.activeInput = activeInput;
    return this;
  }

  /**
   * Get activeInput
   * @return activeInput
   */
  @javax.annotation.Nullable
  public InputDeviceActiveInput getActiveInput() {
    return activeInput;
  }

  public void setActiveInput(InputDeviceActiveInput activeInput) {
    this.activeInput = activeInput;
  }


  public InputDeviceHdSettings configuredInput(InputDeviceConfiguredInput configuredInput) {
    this.configuredInput = configuredInput;
    return this;
  }

  /**
   * Get configuredInput
   * @return configuredInput
   */
  @javax.annotation.Nullable
  public InputDeviceConfiguredInput getConfiguredInput() {
    return configuredInput;
  }

  public void setConfiguredInput(InputDeviceConfiguredInput configuredInput) {
    this.configuredInput = configuredInput;
  }


  public InputDeviceHdSettings deviceState(InputDeviceState deviceState) {
    this.deviceState = deviceState;
    return this;
  }

  /**
   * Get deviceState
   * @return deviceState
   */
  @javax.annotation.Nullable
  public InputDeviceState getDeviceState() {
    return deviceState;
  }

  public void setDeviceState(InputDeviceState deviceState) {
    this.deviceState = deviceState;
  }


  public InputDeviceHdSettings framerate(Double framerate) {
    this.framerate = framerate;
    return this;
  }

  /**
   * Get framerate
   * @return framerate
   */
  @javax.annotation.Nullable
  public Double getFramerate() {
    return framerate;
  }

  public void setFramerate(Double framerate) {
    this.framerate = framerate;
  }


  public InputDeviceHdSettings height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public InputDeviceHdSettings maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public InputDeviceHdSettings scanType(InputDeviceScanType scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * Get scanType
   * @return scanType
   */
  @javax.annotation.Nullable
  public InputDeviceScanType getScanType() {
    return scanType;
  }

  public void setScanType(InputDeviceScanType scanType) {
    this.scanType = scanType;
  }


  public InputDeviceHdSettings width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  public InputDeviceHdSettings latencyMs(Integer latencyMs) {
    this.latencyMs = latencyMs;
    return this;
  }

  /**
   * Get latencyMs
   * @return latencyMs
   */
  @javax.annotation.Nullable
  public Integer getLatencyMs() {
    return latencyMs;
  }

  public void setLatencyMs(Integer latencyMs) {
    this.latencyMs = latencyMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputDeviceHdSettings inputDeviceHdSettings = (InputDeviceHdSettings) o;
    return Objects.equals(this.activeInput, inputDeviceHdSettings.activeInput) &&
        Objects.equals(this.configuredInput, inputDeviceHdSettings.configuredInput) &&
        Objects.equals(this.deviceState, inputDeviceHdSettings.deviceState) &&
        Objects.equals(this.framerate, inputDeviceHdSettings.framerate) &&
        Objects.equals(this.height, inputDeviceHdSettings.height) &&
        Objects.equals(this.maxBitrate, inputDeviceHdSettings.maxBitrate) &&
        Objects.equals(this.scanType, inputDeviceHdSettings.scanType) &&
        Objects.equals(this.width, inputDeviceHdSettings.width) &&
        Objects.equals(this.latencyMs, inputDeviceHdSettings.latencyMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeInput, configuredInput, deviceState, framerate, height, maxBitrate, scanType, width, latencyMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputDeviceHdSettings {\n");
    sb.append("    activeInput: ").append(toIndentedString(activeInput)).append("\n");
    sb.append("    configuredInput: ").append(toIndentedString(configuredInput)).append("\n");
    sb.append("    deviceState: ").append(toIndentedString(deviceState)).append("\n");
    sb.append("    framerate: ").append(toIndentedString(framerate)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    latencyMs: ").append(toIndentedString(latencyMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveInput");
    openapiFields.add("ConfiguredInput");
    openapiFields.add("DeviceState");
    openapiFields.add("Framerate");
    openapiFields.add("Height");
    openapiFields.add("MaxBitrate");
    openapiFields.add("ScanType");
    openapiFields.add("Width");
    openapiFields.add("LatencyMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputDeviceHdSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputDeviceHdSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputDeviceHdSettings is not found in the empty JSON string", InputDeviceHdSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputDeviceHdSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputDeviceHdSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActiveInput`
      if (jsonObj.get("ActiveInput") != null && !jsonObj.get("ActiveInput").isJsonNull()) {
        InputDeviceActiveInput.validateJsonElement(jsonObj.get("ActiveInput"));
      }
      // validate the optional field `ConfiguredInput`
      if (jsonObj.get("ConfiguredInput") != null && !jsonObj.get("ConfiguredInput").isJsonNull()) {
        InputDeviceConfiguredInput.validateJsonElement(jsonObj.get("ConfiguredInput"));
      }
      // validate the optional field `DeviceState`
      if (jsonObj.get("DeviceState") != null && !jsonObj.get("DeviceState").isJsonNull()) {
        InputDeviceState.validateJsonElement(jsonObj.get("DeviceState"));
      }
      // validate the optional field `Framerate`
      if (jsonObj.get("Framerate") != null && !jsonObj.get("Framerate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Framerate"));
      }
      // validate the optional field `Height`
      if (jsonObj.get("Height") != null && !jsonObj.get("Height").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Height"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `ScanType`
      if (jsonObj.get("ScanType") != null && !jsonObj.get("ScanType").isJsonNull()) {
        InputDeviceScanType.validateJsonElement(jsonObj.get("ScanType"));
      }
      // validate the optional field `Width`
      if (jsonObj.get("Width") != null && !jsonObj.get("Width").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Width"));
      }
      // validate the optional field `LatencyMs`
      if (jsonObj.get("LatencyMs") != null && !jsonObj.get("LatencyMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LatencyMs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputDeviceHdSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputDeviceHdSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputDeviceHdSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputDeviceHdSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<InputDeviceHdSettings>() {
           @Override
           public void write(JsonWriter out, InputDeviceHdSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputDeviceHdSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputDeviceHdSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputDeviceHdSettings
   * @throws IOException if the JSON string is invalid with respect to InputDeviceHdSettings
   */
  public static InputDeviceHdSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputDeviceHdSettings.class);
  }

  /**
   * Convert an instance of InputDeviceHdSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

