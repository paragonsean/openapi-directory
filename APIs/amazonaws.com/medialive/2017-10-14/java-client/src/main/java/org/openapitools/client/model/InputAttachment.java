/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputAttachmentAutomaticInputFailoverSettings;
import org.openapitools.client.model.InputAttachmentInputSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Placeholder documentation for InputAttachment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputAttachment {
  public static final String SERIALIZED_NAME_AUTOMATIC_INPUT_FAILOVER_SETTINGS = "AutomaticInputFailoverSettings";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_INPUT_FAILOVER_SETTINGS)
  private InputAttachmentAutomaticInputFailoverSettings automaticInputFailoverSettings;

  public static final String SERIALIZED_NAME_INPUT_ATTACHMENT_NAME = "InputAttachmentName";
  @SerializedName(SERIALIZED_NAME_INPUT_ATTACHMENT_NAME)
  private String inputAttachmentName;

  public static final String SERIALIZED_NAME_INPUT_ID = "InputId";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private String inputId;

  public static final String SERIALIZED_NAME_INPUT_SETTINGS = "InputSettings";
  @SerializedName(SERIALIZED_NAME_INPUT_SETTINGS)
  private InputAttachmentInputSettings inputSettings;

  public InputAttachment() {
  }

  public InputAttachment automaticInputFailoverSettings(InputAttachmentAutomaticInputFailoverSettings automaticInputFailoverSettings) {
    this.automaticInputFailoverSettings = automaticInputFailoverSettings;
    return this;
  }

  /**
   * Get automaticInputFailoverSettings
   * @return automaticInputFailoverSettings
   */
  @javax.annotation.Nullable
  public InputAttachmentAutomaticInputFailoverSettings getAutomaticInputFailoverSettings() {
    return automaticInputFailoverSettings;
  }

  public void setAutomaticInputFailoverSettings(InputAttachmentAutomaticInputFailoverSettings automaticInputFailoverSettings) {
    this.automaticInputFailoverSettings = automaticInputFailoverSettings;
  }


  public InputAttachment inputAttachmentName(String inputAttachmentName) {
    this.inputAttachmentName = inputAttachmentName;
    return this;
  }

  /**
   * Get inputAttachmentName
   * @return inputAttachmentName
   */
  @javax.annotation.Nullable
  public String getInputAttachmentName() {
    return inputAttachmentName;
  }

  public void setInputAttachmentName(String inputAttachmentName) {
    this.inputAttachmentName = inputAttachmentName;
  }


  public InputAttachment inputId(String inputId) {
    this.inputId = inputId;
    return this;
  }

  /**
   * Get inputId
   * @return inputId
   */
  @javax.annotation.Nullable
  public String getInputId() {
    return inputId;
  }

  public void setInputId(String inputId) {
    this.inputId = inputId;
  }


  public InputAttachment inputSettings(InputAttachmentInputSettings inputSettings) {
    this.inputSettings = inputSettings;
    return this;
  }

  /**
   * Get inputSettings
   * @return inputSettings
   */
  @javax.annotation.Nullable
  public InputAttachmentInputSettings getInputSettings() {
    return inputSettings;
  }

  public void setInputSettings(InputAttachmentInputSettings inputSettings) {
    this.inputSettings = inputSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputAttachment inputAttachment = (InputAttachment) o;
    return Objects.equals(this.automaticInputFailoverSettings, inputAttachment.automaticInputFailoverSettings) &&
        Objects.equals(this.inputAttachmentName, inputAttachment.inputAttachmentName) &&
        Objects.equals(this.inputId, inputAttachment.inputId) &&
        Objects.equals(this.inputSettings, inputAttachment.inputSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticInputFailoverSettings, inputAttachmentName, inputId, inputSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputAttachment {\n");
    sb.append("    automaticInputFailoverSettings: ").append(toIndentedString(automaticInputFailoverSettings)).append("\n");
    sb.append("    inputAttachmentName: ").append(toIndentedString(inputAttachmentName)).append("\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    inputSettings: ").append(toIndentedString(inputSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutomaticInputFailoverSettings");
    openapiFields.add("InputAttachmentName");
    openapiFields.add("InputId");
    openapiFields.add("InputSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputAttachment is not found in the empty JSON string", InputAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AutomaticInputFailoverSettings`
      if (jsonObj.get("AutomaticInputFailoverSettings") != null && !jsonObj.get("AutomaticInputFailoverSettings").isJsonNull()) {
        InputAttachmentAutomaticInputFailoverSettings.validateJsonElement(jsonObj.get("AutomaticInputFailoverSettings"));
      }
      // validate the optional field `InputAttachmentName`
      if (jsonObj.get("InputAttachmentName") != null && !jsonObj.get("InputAttachmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputAttachmentName"));
      }
      // validate the optional field `InputId`
      if (jsonObj.get("InputId") != null && !jsonObj.get("InputId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputId"));
      }
      // validate the optional field `InputSettings`
      if (jsonObj.get("InputSettings") != null && !jsonObj.get("InputSettings").isJsonNull()) {
        InputAttachmentInputSettings.validateJsonElement(jsonObj.get("InputSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<InputAttachment>() {
           @Override
           public void write(JsonWriter out, InputAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputAttachment
   * @throws IOException if the JSON string is invalid with respect to InputAttachment
   */
  public static InputAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputAttachment.class);
  }

  /**
   * Convert an instance of InputAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

