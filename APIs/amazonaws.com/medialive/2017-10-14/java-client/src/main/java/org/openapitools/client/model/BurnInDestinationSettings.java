/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BurnInAlignment;
import org.openapitools.client.model.BurnInBackgroundColor;
import org.openapitools.client.model.BurnInDestinationSettingsFont;
import org.openapitools.client.model.BurnInFontColor;
import org.openapitools.client.model.BurnInOutlineColor;
import org.openapitools.client.model.BurnInShadowColor;
import org.openapitools.client.model.BurnInTeletextGridControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Burn In Destination Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BurnInDestinationSettings {
  public static final String SERIALIZED_NAME_ALIGNMENT = "Alignment";
  @SerializedName(SERIALIZED_NAME_ALIGNMENT)
  private BurnInAlignment alignment;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "BackgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private BurnInBackgroundColor backgroundColor;

  public static final String SERIALIZED_NAME_BACKGROUND_OPACITY = "BackgroundOpacity";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_OPACITY)
  private Integer backgroundOpacity;

  public static final String SERIALIZED_NAME_FONT = "Font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private BurnInDestinationSettingsFont font;

  public static final String SERIALIZED_NAME_FONT_COLOR = "FontColor";
  @SerializedName(SERIALIZED_NAME_FONT_COLOR)
  private BurnInFontColor fontColor;

  public static final String SERIALIZED_NAME_FONT_OPACITY = "FontOpacity";
  @SerializedName(SERIALIZED_NAME_FONT_OPACITY)
  private Integer fontOpacity;

  public static final String SERIALIZED_NAME_FONT_RESOLUTION = "FontResolution";
  @SerializedName(SERIALIZED_NAME_FONT_RESOLUTION)
  private Integer fontResolution;

  public static final String SERIALIZED_NAME_FONT_SIZE = "FontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private String fontSize;

  public static final String SERIALIZED_NAME_OUTLINE_COLOR = "OutlineColor";
  @SerializedName(SERIALIZED_NAME_OUTLINE_COLOR)
  private BurnInOutlineColor outlineColor;

  public static final String SERIALIZED_NAME_OUTLINE_SIZE = "OutlineSize";
  @SerializedName(SERIALIZED_NAME_OUTLINE_SIZE)
  private Integer outlineSize;

  public static final String SERIALIZED_NAME_SHADOW_COLOR = "ShadowColor";
  @SerializedName(SERIALIZED_NAME_SHADOW_COLOR)
  private BurnInShadowColor shadowColor;

  public static final String SERIALIZED_NAME_SHADOW_OPACITY = "ShadowOpacity";
  @SerializedName(SERIALIZED_NAME_SHADOW_OPACITY)
  private Integer shadowOpacity;

  public static final String SERIALIZED_NAME_SHADOW_X_OFFSET = "ShadowXOffset";
  @SerializedName(SERIALIZED_NAME_SHADOW_X_OFFSET)
  private Integer shadowXOffset;

  public static final String SERIALIZED_NAME_SHADOW_Y_OFFSET = "ShadowYOffset";
  @SerializedName(SERIALIZED_NAME_SHADOW_Y_OFFSET)
  private Integer shadowYOffset;

  public static final String SERIALIZED_NAME_TELETEXT_GRID_CONTROL = "TeletextGridControl";
  @SerializedName(SERIALIZED_NAME_TELETEXT_GRID_CONTROL)
  private BurnInTeletextGridControl teletextGridControl;

  public static final String SERIALIZED_NAME_XPOSITION = "XPosition";
  @SerializedName(SERIALIZED_NAME_XPOSITION)
  private Integer xposition;

  public static final String SERIALIZED_NAME_YPOSITION = "YPosition";
  @SerializedName(SERIALIZED_NAME_YPOSITION)
  private Integer yposition;

  public BurnInDestinationSettings() {
  }

  public BurnInDestinationSettings alignment(BurnInAlignment alignment) {
    this.alignment = alignment;
    return this;
  }

  /**
   * Get alignment
   * @return alignment
   */
  @javax.annotation.Nullable
  public BurnInAlignment getAlignment() {
    return alignment;
  }

  public void setAlignment(BurnInAlignment alignment) {
    this.alignment = alignment;
  }


  public BurnInDestinationSettings backgroundColor(BurnInBackgroundColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public BurnInBackgroundColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(BurnInBackgroundColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public BurnInDestinationSettings backgroundOpacity(Integer backgroundOpacity) {
    this.backgroundOpacity = backgroundOpacity;
    return this;
  }

  /**
   * Get backgroundOpacity
   * @return backgroundOpacity
   */
  @javax.annotation.Nullable
  public Integer getBackgroundOpacity() {
    return backgroundOpacity;
  }

  public void setBackgroundOpacity(Integer backgroundOpacity) {
    this.backgroundOpacity = backgroundOpacity;
  }


  public BurnInDestinationSettings font(BurnInDestinationSettingsFont font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public BurnInDestinationSettingsFont getFont() {
    return font;
  }

  public void setFont(BurnInDestinationSettingsFont font) {
    this.font = font;
  }


  public BurnInDestinationSettings fontColor(BurnInFontColor fontColor) {
    this.fontColor = fontColor;
    return this;
  }

  /**
   * Get fontColor
   * @return fontColor
   */
  @javax.annotation.Nullable
  public BurnInFontColor getFontColor() {
    return fontColor;
  }

  public void setFontColor(BurnInFontColor fontColor) {
    this.fontColor = fontColor;
  }


  public BurnInDestinationSettings fontOpacity(Integer fontOpacity) {
    this.fontOpacity = fontOpacity;
    return this;
  }

  /**
   * Get fontOpacity
   * @return fontOpacity
   */
  @javax.annotation.Nullable
  public Integer getFontOpacity() {
    return fontOpacity;
  }

  public void setFontOpacity(Integer fontOpacity) {
    this.fontOpacity = fontOpacity;
  }


  public BurnInDestinationSettings fontResolution(Integer fontResolution) {
    this.fontResolution = fontResolution;
    return this;
  }

  /**
   * Get fontResolution
   * @return fontResolution
   */
  @javax.annotation.Nullable
  public Integer getFontResolution() {
    return fontResolution;
  }

  public void setFontResolution(Integer fontResolution) {
    this.fontResolution = fontResolution;
  }


  public BurnInDestinationSettings fontSize(String fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public String getFontSize() {
    return fontSize;
  }

  public void setFontSize(String fontSize) {
    this.fontSize = fontSize;
  }


  public BurnInDestinationSettings outlineColor(BurnInOutlineColor outlineColor) {
    this.outlineColor = outlineColor;
    return this;
  }

  /**
   * Get outlineColor
   * @return outlineColor
   */
  @javax.annotation.Nullable
  public BurnInOutlineColor getOutlineColor() {
    return outlineColor;
  }

  public void setOutlineColor(BurnInOutlineColor outlineColor) {
    this.outlineColor = outlineColor;
  }


  public BurnInDestinationSettings outlineSize(Integer outlineSize) {
    this.outlineSize = outlineSize;
    return this;
  }

  /**
   * Get outlineSize
   * @return outlineSize
   */
  @javax.annotation.Nullable
  public Integer getOutlineSize() {
    return outlineSize;
  }

  public void setOutlineSize(Integer outlineSize) {
    this.outlineSize = outlineSize;
  }


  public BurnInDestinationSettings shadowColor(BurnInShadowColor shadowColor) {
    this.shadowColor = shadowColor;
    return this;
  }

  /**
   * Get shadowColor
   * @return shadowColor
   */
  @javax.annotation.Nullable
  public BurnInShadowColor getShadowColor() {
    return shadowColor;
  }

  public void setShadowColor(BurnInShadowColor shadowColor) {
    this.shadowColor = shadowColor;
  }


  public BurnInDestinationSettings shadowOpacity(Integer shadowOpacity) {
    this.shadowOpacity = shadowOpacity;
    return this;
  }

  /**
   * Get shadowOpacity
   * @return shadowOpacity
   */
  @javax.annotation.Nullable
  public Integer getShadowOpacity() {
    return shadowOpacity;
  }

  public void setShadowOpacity(Integer shadowOpacity) {
    this.shadowOpacity = shadowOpacity;
  }


  public BurnInDestinationSettings shadowXOffset(Integer shadowXOffset) {
    this.shadowXOffset = shadowXOffset;
    return this;
  }

  /**
   * Get shadowXOffset
   * @return shadowXOffset
   */
  @javax.annotation.Nullable
  public Integer getShadowXOffset() {
    return shadowXOffset;
  }

  public void setShadowXOffset(Integer shadowXOffset) {
    this.shadowXOffset = shadowXOffset;
  }


  public BurnInDestinationSettings shadowYOffset(Integer shadowYOffset) {
    this.shadowYOffset = shadowYOffset;
    return this;
  }

  /**
   * Get shadowYOffset
   * @return shadowYOffset
   */
  @javax.annotation.Nullable
  public Integer getShadowYOffset() {
    return shadowYOffset;
  }

  public void setShadowYOffset(Integer shadowYOffset) {
    this.shadowYOffset = shadowYOffset;
  }


  public BurnInDestinationSettings teletextGridControl(BurnInTeletextGridControl teletextGridControl) {
    this.teletextGridControl = teletextGridControl;
    return this;
  }

  /**
   * Get teletextGridControl
   * @return teletextGridControl
   */
  @javax.annotation.Nullable
  public BurnInTeletextGridControl getTeletextGridControl() {
    return teletextGridControl;
  }

  public void setTeletextGridControl(BurnInTeletextGridControl teletextGridControl) {
    this.teletextGridControl = teletextGridControl;
  }


  public BurnInDestinationSettings xposition(Integer xposition) {
    this.xposition = xposition;
    return this;
  }

  /**
   * Get xposition
   * @return xposition
   */
  @javax.annotation.Nullable
  public Integer getXposition() {
    return xposition;
  }

  public void setXposition(Integer xposition) {
    this.xposition = xposition;
  }


  public BurnInDestinationSettings yposition(Integer yposition) {
    this.yposition = yposition;
    return this;
  }

  /**
   * Get yposition
   * @return yposition
   */
  @javax.annotation.Nullable
  public Integer getYposition() {
    return yposition;
  }

  public void setYposition(Integer yposition) {
    this.yposition = yposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BurnInDestinationSettings burnInDestinationSettings = (BurnInDestinationSettings) o;
    return Objects.equals(this.alignment, burnInDestinationSettings.alignment) &&
        Objects.equals(this.backgroundColor, burnInDestinationSettings.backgroundColor) &&
        Objects.equals(this.backgroundOpacity, burnInDestinationSettings.backgroundOpacity) &&
        Objects.equals(this.font, burnInDestinationSettings.font) &&
        Objects.equals(this.fontColor, burnInDestinationSettings.fontColor) &&
        Objects.equals(this.fontOpacity, burnInDestinationSettings.fontOpacity) &&
        Objects.equals(this.fontResolution, burnInDestinationSettings.fontResolution) &&
        Objects.equals(this.fontSize, burnInDestinationSettings.fontSize) &&
        Objects.equals(this.outlineColor, burnInDestinationSettings.outlineColor) &&
        Objects.equals(this.outlineSize, burnInDestinationSettings.outlineSize) &&
        Objects.equals(this.shadowColor, burnInDestinationSettings.shadowColor) &&
        Objects.equals(this.shadowOpacity, burnInDestinationSettings.shadowOpacity) &&
        Objects.equals(this.shadowXOffset, burnInDestinationSettings.shadowXOffset) &&
        Objects.equals(this.shadowYOffset, burnInDestinationSettings.shadowYOffset) &&
        Objects.equals(this.teletextGridControl, burnInDestinationSettings.teletextGridControl) &&
        Objects.equals(this.xposition, burnInDestinationSettings.xposition) &&
        Objects.equals(this.yposition, burnInDestinationSettings.yposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignment, backgroundColor, backgroundOpacity, font, fontColor, fontOpacity, fontResolution, fontSize, outlineColor, outlineSize, shadowColor, shadowOpacity, shadowXOffset, shadowYOffset, teletextGridControl, xposition, yposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BurnInDestinationSettings {\n");
    sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    backgroundOpacity: ").append(toIndentedString(backgroundOpacity)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    fontColor: ").append(toIndentedString(fontColor)).append("\n");
    sb.append("    fontOpacity: ").append(toIndentedString(fontOpacity)).append("\n");
    sb.append("    fontResolution: ").append(toIndentedString(fontResolution)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    outlineColor: ").append(toIndentedString(outlineColor)).append("\n");
    sb.append("    outlineSize: ").append(toIndentedString(outlineSize)).append("\n");
    sb.append("    shadowColor: ").append(toIndentedString(shadowColor)).append("\n");
    sb.append("    shadowOpacity: ").append(toIndentedString(shadowOpacity)).append("\n");
    sb.append("    shadowXOffset: ").append(toIndentedString(shadowXOffset)).append("\n");
    sb.append("    shadowYOffset: ").append(toIndentedString(shadowYOffset)).append("\n");
    sb.append("    teletextGridControl: ").append(toIndentedString(teletextGridControl)).append("\n");
    sb.append("    xposition: ").append(toIndentedString(xposition)).append("\n");
    sb.append("    yposition: ").append(toIndentedString(yposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Alignment");
    openapiFields.add("BackgroundColor");
    openapiFields.add("BackgroundOpacity");
    openapiFields.add("Font");
    openapiFields.add("FontColor");
    openapiFields.add("FontOpacity");
    openapiFields.add("FontResolution");
    openapiFields.add("FontSize");
    openapiFields.add("OutlineColor");
    openapiFields.add("OutlineSize");
    openapiFields.add("ShadowColor");
    openapiFields.add("ShadowOpacity");
    openapiFields.add("ShadowXOffset");
    openapiFields.add("ShadowYOffset");
    openapiFields.add("TeletextGridControl");
    openapiFields.add("XPosition");
    openapiFields.add("YPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BurnInDestinationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BurnInDestinationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BurnInDestinationSettings is not found in the empty JSON string", BurnInDestinationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BurnInDestinationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BurnInDestinationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Alignment`
      if (jsonObj.get("Alignment") != null && !jsonObj.get("Alignment").isJsonNull()) {
        BurnInAlignment.validateJsonElement(jsonObj.get("Alignment"));
      }
      // validate the optional field `BackgroundColor`
      if (jsonObj.get("BackgroundColor") != null && !jsonObj.get("BackgroundColor").isJsonNull()) {
        BurnInBackgroundColor.validateJsonElement(jsonObj.get("BackgroundColor"));
      }
      // validate the optional field `BackgroundOpacity`
      if (jsonObj.get("BackgroundOpacity") != null && !jsonObj.get("BackgroundOpacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackgroundOpacity"));
      }
      // validate the optional field `Font`
      if (jsonObj.get("Font") != null && !jsonObj.get("Font").isJsonNull()) {
        BurnInDestinationSettingsFont.validateJsonElement(jsonObj.get("Font"));
      }
      // validate the optional field `FontColor`
      if (jsonObj.get("FontColor") != null && !jsonObj.get("FontColor").isJsonNull()) {
        BurnInFontColor.validateJsonElement(jsonObj.get("FontColor"));
      }
      // validate the optional field `FontOpacity`
      if (jsonObj.get("FontOpacity") != null && !jsonObj.get("FontOpacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FontOpacity"));
      }
      // validate the optional field `FontResolution`
      if (jsonObj.get("FontResolution") != null && !jsonObj.get("FontResolution").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FontResolution"));
      }
      // validate the optional field `FontSize`
      if (jsonObj.get("FontSize") != null && !jsonObj.get("FontSize").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FontSize"));
      }
      // validate the optional field `OutlineColor`
      if (jsonObj.get("OutlineColor") != null && !jsonObj.get("OutlineColor").isJsonNull()) {
        BurnInOutlineColor.validateJsonElement(jsonObj.get("OutlineColor"));
      }
      // validate the optional field `OutlineSize`
      if (jsonObj.get("OutlineSize") != null && !jsonObj.get("OutlineSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OutlineSize"));
      }
      // validate the optional field `ShadowColor`
      if (jsonObj.get("ShadowColor") != null && !jsonObj.get("ShadowColor").isJsonNull()) {
        BurnInShadowColor.validateJsonElement(jsonObj.get("ShadowColor"));
      }
      // validate the optional field `ShadowOpacity`
      if (jsonObj.get("ShadowOpacity") != null && !jsonObj.get("ShadowOpacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShadowOpacity"));
      }
      // validate the optional field `ShadowXOffset`
      if (jsonObj.get("ShadowXOffset") != null && !jsonObj.get("ShadowXOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShadowXOffset"));
      }
      // validate the optional field `ShadowYOffset`
      if (jsonObj.get("ShadowYOffset") != null && !jsonObj.get("ShadowYOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShadowYOffset"));
      }
      // validate the optional field `TeletextGridControl`
      if (jsonObj.get("TeletextGridControl") != null && !jsonObj.get("TeletextGridControl").isJsonNull()) {
        BurnInTeletextGridControl.validateJsonElement(jsonObj.get("TeletextGridControl"));
      }
      // validate the optional field `XPosition`
      if (jsonObj.get("XPosition") != null && !jsonObj.get("XPosition").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("XPosition"));
      }
      // validate the optional field `YPosition`
      if (jsonObj.get("YPosition") != null && !jsonObj.get("YPosition").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("YPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BurnInDestinationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BurnInDestinationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BurnInDestinationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BurnInDestinationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<BurnInDestinationSettings>() {
           @Override
           public void write(JsonWriter out, BurnInDestinationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BurnInDestinationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BurnInDestinationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BurnInDestinationSettings
   * @throws IOException if the JSON string is invalid with respect to BurnInDestinationSettings
   */
  public static BurnInDestinationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BurnInDestinationSettings.class);
  }

  /**
   * Convert an instance of BurnInDestinationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

