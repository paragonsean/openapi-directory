/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeleteReservationResponseResourceSpecification;
import org.openapitools.client.model.OfferingDurationUnits;
import org.openapitools.client.model.OfferingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Placeholder documentation for DescribeOfferingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeOfferingResponse {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_DURATION_UNITS = "DurationUnits";
  @SerializedName(SERIALIZED_NAME_DURATION_UNITS)
  private OfferingDurationUnits durationUnits;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "FixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Double fixedPrice;

  public static final String SERIALIZED_NAME_OFFERING_DESCRIPTION = "OfferingDescription";
  @SerializedName(SERIALIZED_NAME_OFFERING_DESCRIPTION)
  private String offeringDescription;

  public static final String SERIALIZED_NAME_OFFERING_ID = "OfferingId";
  @SerializedName(SERIALIZED_NAME_OFFERING_ID)
  private String offeringId;

  public static final String SERIALIZED_NAME_OFFERING_TYPE = "OfferingType";
  @SerializedName(SERIALIZED_NAME_OFFERING_TYPE)
  private OfferingType offeringType;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESOURCE_SPECIFICATION = "ResourceSpecification";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SPECIFICATION)
  private DeleteReservationResponseResourceSpecification resourceSpecification;

  public static final String SERIALIZED_NAME_USAGE_PRICE = "UsagePrice";
  @SerializedName(SERIALIZED_NAME_USAGE_PRICE)
  private Double usagePrice;

  public DescribeOfferingResponse() {
  }

  public DescribeOfferingResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeOfferingResponse currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public DescribeOfferingResponse duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public DescribeOfferingResponse durationUnits(OfferingDurationUnits durationUnits) {
    this.durationUnits = durationUnits;
    return this;
  }

  /**
   * Get durationUnits
   * @return durationUnits
   */
  @javax.annotation.Nullable
  public OfferingDurationUnits getDurationUnits() {
    return durationUnits;
  }

  public void setDurationUnits(OfferingDurationUnits durationUnits) {
    this.durationUnits = durationUnits;
  }


  public DescribeOfferingResponse fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public DescribeOfferingResponse offeringDescription(String offeringDescription) {
    this.offeringDescription = offeringDescription;
    return this;
  }

  /**
   * Get offeringDescription
   * @return offeringDescription
   */
  @javax.annotation.Nullable
  public String getOfferingDescription() {
    return offeringDescription;
  }

  public void setOfferingDescription(String offeringDescription) {
    this.offeringDescription = offeringDescription;
  }


  public DescribeOfferingResponse offeringId(String offeringId) {
    this.offeringId = offeringId;
    return this;
  }

  /**
   * Get offeringId
   * @return offeringId
   */
  @javax.annotation.Nullable
  public String getOfferingId() {
    return offeringId;
  }

  public void setOfferingId(String offeringId) {
    this.offeringId = offeringId;
  }


  public DescribeOfferingResponse offeringType(OfferingType offeringType) {
    this.offeringType = offeringType;
    return this;
  }

  /**
   * Get offeringType
   * @return offeringType
   */
  @javax.annotation.Nullable
  public OfferingType getOfferingType() {
    return offeringType;
  }

  public void setOfferingType(OfferingType offeringType) {
    this.offeringType = offeringType;
  }


  public DescribeOfferingResponse region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public DescribeOfferingResponse resourceSpecification(DeleteReservationResponseResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
    return this;
  }

  /**
   * Get resourceSpecification
   * @return resourceSpecification
   */
  @javax.annotation.Nullable
  public DeleteReservationResponseResourceSpecification getResourceSpecification() {
    return resourceSpecification;
  }

  public void setResourceSpecification(DeleteReservationResponseResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
  }


  public DescribeOfferingResponse usagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
    return this;
  }

  /**
   * Get usagePrice
   * @return usagePrice
   */
  @javax.annotation.Nullable
  public Double getUsagePrice() {
    return usagePrice;
  }

  public void setUsagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeOfferingResponse describeOfferingResponse = (DescribeOfferingResponse) o;
    return Objects.equals(this.arn, describeOfferingResponse.arn) &&
        Objects.equals(this.currencyCode, describeOfferingResponse.currencyCode) &&
        Objects.equals(this.duration, describeOfferingResponse.duration) &&
        Objects.equals(this.durationUnits, describeOfferingResponse.durationUnits) &&
        Objects.equals(this.fixedPrice, describeOfferingResponse.fixedPrice) &&
        Objects.equals(this.offeringDescription, describeOfferingResponse.offeringDescription) &&
        Objects.equals(this.offeringId, describeOfferingResponse.offeringId) &&
        Objects.equals(this.offeringType, describeOfferingResponse.offeringType) &&
        Objects.equals(this.region, describeOfferingResponse.region) &&
        Objects.equals(this.resourceSpecification, describeOfferingResponse.resourceSpecification) &&
        Objects.equals(this.usagePrice, describeOfferingResponse.usagePrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, currencyCode, duration, durationUnits, fixedPrice, offeringDescription, offeringId, offeringType, region, resourceSpecification, usagePrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeOfferingResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    durationUnits: ").append(toIndentedString(durationUnits)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    offeringDescription: ").append(toIndentedString(offeringDescription)).append("\n");
    sb.append("    offeringId: ").append(toIndentedString(offeringId)).append("\n");
    sb.append("    offeringType: ").append(toIndentedString(offeringType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    resourceSpecification: ").append(toIndentedString(resourceSpecification)).append("\n");
    sb.append("    usagePrice: ").append(toIndentedString(usagePrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("CurrencyCode");
    openapiFields.add("Duration");
    openapiFields.add("DurationUnits");
    openapiFields.add("FixedPrice");
    openapiFields.add("OfferingDescription");
    openapiFields.add("OfferingId");
    openapiFields.add("OfferingType");
    openapiFields.add("Region");
    openapiFields.add("ResourceSpecification");
    openapiFields.add("UsagePrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeOfferingResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeOfferingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeOfferingResponse is not found in the empty JSON string", DescribeOfferingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeOfferingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeOfferingResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `Duration`
      if (jsonObj.get("Duration") != null && !jsonObj.get("Duration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Duration"));
      }
      // validate the optional field `DurationUnits`
      if (jsonObj.get("DurationUnits") != null && !jsonObj.get("DurationUnits").isJsonNull()) {
        OfferingDurationUnits.validateJsonElement(jsonObj.get("DurationUnits"));
      }
      // validate the optional field `FixedPrice`
      if (jsonObj.get("FixedPrice") != null && !jsonObj.get("FixedPrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("FixedPrice"));
      }
      // validate the optional field `OfferingDescription`
      if (jsonObj.get("OfferingDescription") != null && !jsonObj.get("OfferingDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OfferingDescription"));
      }
      // validate the optional field `OfferingId`
      if (jsonObj.get("OfferingId") != null && !jsonObj.get("OfferingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OfferingId"));
      }
      // validate the optional field `OfferingType`
      if (jsonObj.get("OfferingType") != null && !jsonObj.get("OfferingType").isJsonNull()) {
        OfferingType.validateJsonElement(jsonObj.get("OfferingType"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `ResourceSpecification`
      if (jsonObj.get("ResourceSpecification") != null && !jsonObj.get("ResourceSpecification").isJsonNull()) {
        DeleteReservationResponseResourceSpecification.validateJsonElement(jsonObj.get("ResourceSpecification"));
      }
      // validate the optional field `UsagePrice`
      if (jsonObj.get("UsagePrice") != null && !jsonObj.get("UsagePrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("UsagePrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeOfferingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeOfferingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeOfferingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeOfferingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeOfferingResponse>() {
           @Override
           public void write(JsonWriter out, DescribeOfferingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeOfferingResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeOfferingResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeOfferingResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeOfferingResponse
   */
  public static DescribeOfferingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeOfferingResponse.class);
  }

  /**
   * Convert an instance of DescribeOfferingResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

