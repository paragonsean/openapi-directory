/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateChannelRequestCdiInputSpecification;
import org.openapitools.client.model.CreateChannelRequestEncoderSettings;
import org.openapitools.client.model.CreateChannelRequestInputSpecification;
import org.openapitools.client.model.CreateChannelRequestMaintenance;
import org.openapitools.client.model.CreateChannelRequestVpc;
import org.openapitools.client.model.InputAttachment;
import org.openapitools.client.model.OutputDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateChannelRequest {
  public static final String SERIALIZED_NAME_CDI_INPUT_SPECIFICATION = "cdiInputSpecification";
  @SerializedName(SERIALIZED_NAME_CDI_INPUT_SPECIFICATION)
  private CreateChannelRequestCdiInputSpecification cdiInputSpecification;

  /**
   * A standard channel has two encoding pipelines and a single pipeline channel only has one.
   */
  @JsonAdapter(ChannelClassEnum.Adapter.class)
  public enum ChannelClassEnum {
    STANDARD("STANDARD"),
    
    SINGLE_PIPELINE("SINGLE_PIPELINE");

    private String value;

    ChannelClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelClassEnum fromValue(String value) {
      for (ChannelClassEnum b : ChannelClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL_CLASS = "channelClass";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CLASS)
  private ChannelClassEnum channelClass;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<OutputDestination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCODER_SETTINGS = "encoderSettings";
  @SerializedName(SERIALIZED_NAME_ENCODER_SETTINGS)
  private CreateChannelRequestEncoderSettings encoderSettings;

  public static final String SERIALIZED_NAME_INPUT_ATTACHMENTS = "inputAttachments";
  @SerializedName(SERIALIZED_NAME_INPUT_ATTACHMENTS)
  private List<InputAttachment> inputAttachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_SPECIFICATION = "inputSpecification";
  @SerializedName(SERIALIZED_NAME_INPUT_SPECIFICATION)
  private CreateChannelRequestInputSpecification inputSpecification;

  /**
   * The log level the user wants for their channel.
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    ERROR("ERROR"),
    
    WARNING("WARNING"),
    
    INFO("INFO"),
    
    DEBUG("DEBUG"),
    
    DISABLED("DISABLED");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private CreateChannelRequestMaintenance maintenance;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RESERVED = "reserved";
  @SerializedName(SERIALIZED_NAME_RESERVED)
  private String reserved;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VPC = "vpc";
  @SerializedName(SERIALIZED_NAME_VPC)
  private CreateChannelRequestVpc vpc;

  public CreateChannelRequest() {
  }

  public CreateChannelRequest cdiInputSpecification(CreateChannelRequestCdiInputSpecification cdiInputSpecification) {
    this.cdiInputSpecification = cdiInputSpecification;
    return this;
  }

  /**
   * Get cdiInputSpecification
   * @return cdiInputSpecification
   */
  @javax.annotation.Nullable
  public CreateChannelRequestCdiInputSpecification getCdiInputSpecification() {
    return cdiInputSpecification;
  }

  public void setCdiInputSpecification(CreateChannelRequestCdiInputSpecification cdiInputSpecification) {
    this.cdiInputSpecification = cdiInputSpecification;
  }


  public CreateChannelRequest channelClass(ChannelClassEnum channelClass) {
    this.channelClass = channelClass;
    return this;
  }

  /**
   * A standard channel has two encoding pipelines and a single pipeline channel only has one.
   * @return channelClass
   */
  @javax.annotation.Nullable
  public ChannelClassEnum getChannelClass() {
    return channelClass;
  }

  public void setChannelClass(ChannelClassEnum channelClass) {
    this.channelClass = channelClass;
  }


  public CreateChannelRequest destinations(List<OutputDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public CreateChannelRequest addDestinationsItem(OutputDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfOutputDestination
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<OutputDestination> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<OutputDestination> destinations) {
    this.destinations = destinations;
  }


  public CreateChannelRequest encoderSettings(CreateChannelRequestEncoderSettings encoderSettings) {
    this.encoderSettings = encoderSettings;
    return this;
  }

  /**
   * Get encoderSettings
   * @return encoderSettings
   */
  @javax.annotation.Nullable
  public CreateChannelRequestEncoderSettings getEncoderSettings() {
    return encoderSettings;
  }

  public void setEncoderSettings(CreateChannelRequestEncoderSettings encoderSettings) {
    this.encoderSettings = encoderSettings;
  }


  public CreateChannelRequest inputAttachments(List<InputAttachment> inputAttachments) {
    this.inputAttachments = inputAttachments;
    return this;
  }

  public CreateChannelRequest addInputAttachmentsItem(InputAttachment inputAttachmentsItem) {
    if (this.inputAttachments == null) {
      this.inputAttachments = new ArrayList<>();
    }
    this.inputAttachments.add(inputAttachmentsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfInputAttachment
   * @return inputAttachments
   */
  @javax.annotation.Nullable
  public List<InputAttachment> getInputAttachments() {
    return inputAttachments;
  }

  public void setInputAttachments(List<InputAttachment> inputAttachments) {
    this.inputAttachments = inputAttachments;
  }


  public CreateChannelRequest inputSpecification(CreateChannelRequestInputSpecification inputSpecification) {
    this.inputSpecification = inputSpecification;
    return this;
  }

  /**
   * Get inputSpecification
   * @return inputSpecification
   */
  @javax.annotation.Nullable
  public CreateChannelRequestInputSpecification getInputSpecification() {
    return inputSpecification;
  }

  public void setInputSpecification(CreateChannelRequestInputSpecification inputSpecification) {
    this.inputSpecification = inputSpecification;
  }


  public CreateChannelRequest logLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  /**
   * The log level the user wants for their channel.
   * @return logLevel
   */
  @javax.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public CreateChannelRequest maintenance(CreateChannelRequestMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public CreateChannelRequestMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(CreateChannelRequestMaintenance maintenance) {
    this.maintenance = maintenance;
  }


  public CreateChannelRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateChannelRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CreateChannelRequest reserved(String reserved) {
    this.reserved = reserved;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return reserved
   */
  @javax.annotation.Nullable
  public String getReserved() {
    return reserved;
  }

  public void setReserved(String reserved) {
    this.reserved = reserved;
  }


  public CreateChannelRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateChannelRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateChannelRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Placeholder documentation for Tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateChannelRequest vpc(CreateChannelRequestVpc vpc) {
    this.vpc = vpc;
    return this;
  }

  /**
   * Get vpc
   * @return vpc
   */
  @javax.annotation.Nullable
  public CreateChannelRequestVpc getVpc() {
    return vpc;
  }

  public void setVpc(CreateChannelRequestVpc vpc) {
    this.vpc = vpc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChannelRequest createChannelRequest = (CreateChannelRequest) o;
    return Objects.equals(this.cdiInputSpecification, createChannelRequest.cdiInputSpecification) &&
        Objects.equals(this.channelClass, createChannelRequest.channelClass) &&
        Objects.equals(this.destinations, createChannelRequest.destinations) &&
        Objects.equals(this.encoderSettings, createChannelRequest.encoderSettings) &&
        Objects.equals(this.inputAttachments, createChannelRequest.inputAttachments) &&
        Objects.equals(this.inputSpecification, createChannelRequest.inputSpecification) &&
        Objects.equals(this.logLevel, createChannelRequest.logLevel) &&
        Objects.equals(this.maintenance, createChannelRequest.maintenance) &&
        Objects.equals(this.name, createChannelRequest.name) &&
        Objects.equals(this.requestId, createChannelRequest.requestId) &&
        Objects.equals(this.reserved, createChannelRequest.reserved) &&
        Objects.equals(this.roleArn, createChannelRequest.roleArn) &&
        Objects.equals(this.tags, createChannelRequest.tags) &&
        Objects.equals(this.vpc, createChannelRequest.vpc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdiInputSpecification, channelClass, destinations, encoderSettings, inputAttachments, inputSpecification, logLevel, maintenance, name, requestId, reserved, roleArn, tags, vpc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChannelRequest {\n");
    sb.append("    cdiInputSpecification: ").append(toIndentedString(cdiInputSpecification)).append("\n");
    sb.append("    channelClass: ").append(toIndentedString(channelClass)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    encoderSettings: ").append(toIndentedString(encoderSettings)).append("\n");
    sb.append("    inputAttachments: ").append(toIndentedString(inputAttachments)).append("\n");
    sb.append("    inputSpecification: ").append(toIndentedString(inputSpecification)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdiInputSpecification");
    openapiFields.add("channelClass");
    openapiFields.add("destinations");
    openapiFields.add("encoderSettings");
    openapiFields.add("inputAttachments");
    openapiFields.add("inputSpecification");
    openapiFields.add("logLevel");
    openapiFields.add("maintenance");
    openapiFields.add("name");
    openapiFields.add("requestId");
    openapiFields.add("reserved");
    openapiFields.add("roleArn");
    openapiFields.add("tags");
    openapiFields.add("vpc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateChannelRequest is not found in the empty JSON string", CreateChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cdiInputSpecification`
      if (jsonObj.get("cdiInputSpecification") != null && !jsonObj.get("cdiInputSpecification").isJsonNull()) {
        CreateChannelRequestCdiInputSpecification.validateJsonElement(jsonObj.get("cdiInputSpecification"));
      }
      if ((jsonObj.get("channelClass") != null && !jsonObj.get("channelClass").isJsonNull()) && !jsonObj.get("channelClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelClass").toString()));
      }
      // validate the optional field `channelClass`
      if (jsonObj.get("channelClass") != null && !jsonObj.get("channelClass").isJsonNull()) {
        ChannelClassEnum.validateJsonElement(jsonObj.get("channelClass"));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            OutputDestination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      // validate the optional field `encoderSettings`
      if (jsonObj.get("encoderSettings") != null && !jsonObj.get("encoderSettings").isJsonNull()) {
        CreateChannelRequestEncoderSettings.validateJsonElement(jsonObj.get("encoderSettings"));
      }
      if (jsonObj.get("inputAttachments") != null && !jsonObj.get("inputAttachments").isJsonNull()) {
        JsonArray jsonArrayinputAttachments = jsonObj.getAsJsonArray("inputAttachments");
        if (jsonArrayinputAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("inputAttachments").toString()));
          }

          // validate the optional field `inputAttachments` (array)
          for (int i = 0; i < jsonArrayinputAttachments.size(); i++) {
            InputAttachment.validateJsonElement(jsonArrayinputAttachments.get(i));
          };
        }
      }
      // validate the optional field `inputSpecification`
      if (jsonObj.get("inputSpecification") != null && !jsonObj.get("inputSpecification").isJsonNull()) {
        CreateChannelRequestInputSpecification.validateJsonElement(jsonObj.get("inputSpecification"));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      // validate the optional field `logLevel`
      if (jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) {
        LogLevelEnum.validateJsonElement(jsonObj.get("logLevel"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        CreateChannelRequestMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("reserved") != null && !jsonObj.get("reserved").isJsonNull()) && !jsonObj.get("reserved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reserved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reserved").toString()));
      }
      if ((jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) && !jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      // validate the optional field `vpc`
      if (jsonObj.get("vpc") != null && !jsonObj.get("vpc").isJsonNull()) {
        CreateChannelRequestVpc.validateJsonElement(jsonObj.get("vpc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateChannelRequest>() {
           @Override
           public void write(JsonWriter out, CreateChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateChannelRequest
   * @throws IOException if the JSON string is invalid with respect to CreateChannelRequest
   */
  public static CreateChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateChannelRequest.class);
  }

  /**
   * Convert an instance of CreateChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

