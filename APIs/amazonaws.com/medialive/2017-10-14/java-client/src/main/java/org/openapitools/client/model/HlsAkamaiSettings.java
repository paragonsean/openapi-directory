/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HlsAkamaiHttpTransferMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hls Akamai Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsAkamaiSettings {
  public static final String SERIALIZED_NAME_CONNECTION_RETRY_INTERVAL = "ConnectionRetryInterval";
  @SerializedName(SERIALIZED_NAME_CONNECTION_RETRY_INTERVAL)
  private Integer connectionRetryInterval;

  public static final String SERIALIZED_NAME_FILECACHE_DURATION = "FilecacheDuration";
  @SerializedName(SERIALIZED_NAME_FILECACHE_DURATION)
  private Integer filecacheDuration;

  public static final String SERIALIZED_NAME_HTTP_TRANSFER_MODE = "HttpTransferMode";
  @SerializedName(SERIALIZED_NAME_HTTP_TRANSFER_MODE)
  private HlsAkamaiHttpTransferMode httpTransferMode;

  public static final String SERIALIZED_NAME_NUM_RETRIES = "NumRetries";
  @SerializedName(SERIALIZED_NAME_NUM_RETRIES)
  private Integer numRetries;

  public static final String SERIALIZED_NAME_RESTART_DELAY = "RestartDelay";
  @SerializedName(SERIALIZED_NAME_RESTART_DELAY)
  private Integer restartDelay;

  public static final String SERIALIZED_NAME_SALT = "Salt";
  @SerializedName(SERIALIZED_NAME_SALT)
  private String salt;

  public static final String SERIALIZED_NAME_TOKEN = "Token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public HlsAkamaiSettings() {
  }

  public HlsAkamaiSettings connectionRetryInterval(Integer connectionRetryInterval) {
    this.connectionRetryInterval = connectionRetryInterval;
    return this;
  }

  /**
   * Get connectionRetryInterval
   * @return connectionRetryInterval
   */
  @javax.annotation.Nullable
  public Integer getConnectionRetryInterval() {
    return connectionRetryInterval;
  }

  public void setConnectionRetryInterval(Integer connectionRetryInterval) {
    this.connectionRetryInterval = connectionRetryInterval;
  }


  public HlsAkamaiSettings filecacheDuration(Integer filecacheDuration) {
    this.filecacheDuration = filecacheDuration;
    return this;
  }

  /**
   * Get filecacheDuration
   * @return filecacheDuration
   */
  @javax.annotation.Nullable
  public Integer getFilecacheDuration() {
    return filecacheDuration;
  }

  public void setFilecacheDuration(Integer filecacheDuration) {
    this.filecacheDuration = filecacheDuration;
  }


  public HlsAkamaiSettings httpTransferMode(HlsAkamaiHttpTransferMode httpTransferMode) {
    this.httpTransferMode = httpTransferMode;
    return this;
  }

  /**
   * Get httpTransferMode
   * @return httpTransferMode
   */
  @javax.annotation.Nullable
  public HlsAkamaiHttpTransferMode getHttpTransferMode() {
    return httpTransferMode;
  }

  public void setHttpTransferMode(HlsAkamaiHttpTransferMode httpTransferMode) {
    this.httpTransferMode = httpTransferMode;
  }


  public HlsAkamaiSettings numRetries(Integer numRetries) {
    this.numRetries = numRetries;
    return this;
  }

  /**
   * Get numRetries
   * @return numRetries
   */
  @javax.annotation.Nullable
  public Integer getNumRetries() {
    return numRetries;
  }

  public void setNumRetries(Integer numRetries) {
    this.numRetries = numRetries;
  }


  public HlsAkamaiSettings restartDelay(Integer restartDelay) {
    this.restartDelay = restartDelay;
    return this;
  }

  /**
   * Get restartDelay
   * @return restartDelay
   */
  @javax.annotation.Nullable
  public Integer getRestartDelay() {
    return restartDelay;
  }

  public void setRestartDelay(Integer restartDelay) {
    this.restartDelay = restartDelay;
  }


  public HlsAkamaiSettings salt(String salt) {
    this.salt = salt;
    return this;
  }

  /**
   * Get salt
   * @return salt
   */
  @javax.annotation.Nullable
  public String getSalt() {
    return salt;
  }

  public void setSalt(String salt) {
    this.salt = salt;
  }


  public HlsAkamaiSettings token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsAkamaiSettings hlsAkamaiSettings = (HlsAkamaiSettings) o;
    return Objects.equals(this.connectionRetryInterval, hlsAkamaiSettings.connectionRetryInterval) &&
        Objects.equals(this.filecacheDuration, hlsAkamaiSettings.filecacheDuration) &&
        Objects.equals(this.httpTransferMode, hlsAkamaiSettings.httpTransferMode) &&
        Objects.equals(this.numRetries, hlsAkamaiSettings.numRetries) &&
        Objects.equals(this.restartDelay, hlsAkamaiSettings.restartDelay) &&
        Objects.equals(this.salt, hlsAkamaiSettings.salt) &&
        Objects.equals(this.token, hlsAkamaiSettings.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionRetryInterval, filecacheDuration, httpTransferMode, numRetries, restartDelay, salt, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsAkamaiSettings {\n");
    sb.append("    connectionRetryInterval: ").append(toIndentedString(connectionRetryInterval)).append("\n");
    sb.append("    filecacheDuration: ").append(toIndentedString(filecacheDuration)).append("\n");
    sb.append("    httpTransferMode: ").append(toIndentedString(httpTransferMode)).append("\n");
    sb.append("    numRetries: ").append(toIndentedString(numRetries)).append("\n");
    sb.append("    restartDelay: ").append(toIndentedString(restartDelay)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConnectionRetryInterval");
    openapiFields.add("FilecacheDuration");
    openapiFields.add("HttpTransferMode");
    openapiFields.add("NumRetries");
    openapiFields.add("RestartDelay");
    openapiFields.add("Salt");
    openapiFields.add("Token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsAkamaiSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsAkamaiSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsAkamaiSettings is not found in the empty JSON string", HlsAkamaiSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsAkamaiSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsAkamaiSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConnectionRetryInterval`
      if (jsonObj.get("ConnectionRetryInterval") != null && !jsonObj.get("ConnectionRetryInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConnectionRetryInterval"));
      }
      // validate the optional field `FilecacheDuration`
      if (jsonObj.get("FilecacheDuration") != null && !jsonObj.get("FilecacheDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FilecacheDuration"));
      }
      // validate the optional field `HttpTransferMode`
      if (jsonObj.get("HttpTransferMode") != null && !jsonObj.get("HttpTransferMode").isJsonNull()) {
        HlsAkamaiHttpTransferMode.validateJsonElement(jsonObj.get("HttpTransferMode"));
      }
      // validate the optional field `NumRetries`
      if (jsonObj.get("NumRetries") != null && !jsonObj.get("NumRetries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumRetries"));
      }
      // validate the optional field `RestartDelay`
      if (jsonObj.get("RestartDelay") != null && !jsonObj.get("RestartDelay").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RestartDelay"));
      }
      // validate the optional field `Salt`
      if (jsonObj.get("Salt") != null && !jsonObj.get("Salt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Salt"));
      }
      // validate the optional field `Token`
      if (jsonObj.get("Token") != null && !jsonObj.get("Token").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Token"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsAkamaiSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsAkamaiSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsAkamaiSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsAkamaiSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsAkamaiSettings>() {
           @Override
           public void write(JsonWriter out, HlsAkamaiSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsAkamaiSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsAkamaiSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsAkamaiSettings
   * @throws IOException if the JSON string is invalid with respect to HlsAkamaiSettings
   */
  public static HlsAkamaiSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsAkamaiSettings.class);
  }

  /**
   * Convert an instance of HlsAkamaiSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

