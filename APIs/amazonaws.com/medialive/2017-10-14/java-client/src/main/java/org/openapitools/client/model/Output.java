/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OutputOutputSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output settings. There can be multiple outputs within a group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Output {
  public static final String SERIALIZED_NAME_AUDIO_DESCRIPTION_NAMES = "AudioDescriptionNames";
  @SerializedName(SERIALIZED_NAME_AUDIO_DESCRIPTION_NAMES)
  private List audioDescriptionNames;

  public static final String SERIALIZED_NAME_CAPTION_DESCRIPTION_NAMES = "CaptionDescriptionNames";
  @SerializedName(SERIALIZED_NAME_CAPTION_DESCRIPTION_NAMES)
  private List captionDescriptionNames;

  public static final String SERIALIZED_NAME_OUTPUT_NAME = "OutputName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_NAME)
  private String outputName;

  public static final String SERIALIZED_NAME_OUTPUT_SETTINGS = "OutputSettings";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SETTINGS)
  private OutputOutputSettings outputSettings;

  public static final String SERIALIZED_NAME_VIDEO_DESCRIPTION_NAME = "VideoDescriptionName";
  @SerializedName(SERIALIZED_NAME_VIDEO_DESCRIPTION_NAME)
  private String videoDescriptionName;

  public Output() {
  }

  public Output audioDescriptionNames(List audioDescriptionNames) {
    this.audioDescriptionNames = audioDescriptionNames;
    return this;
  }

  /**
   * Get audioDescriptionNames
   * @return audioDescriptionNames
   */
  @javax.annotation.Nullable
  public List getAudioDescriptionNames() {
    return audioDescriptionNames;
  }

  public void setAudioDescriptionNames(List audioDescriptionNames) {
    this.audioDescriptionNames = audioDescriptionNames;
  }


  public Output captionDescriptionNames(List captionDescriptionNames) {
    this.captionDescriptionNames = captionDescriptionNames;
    return this;
  }

  /**
   * Get captionDescriptionNames
   * @return captionDescriptionNames
   */
  @javax.annotation.Nullable
  public List getCaptionDescriptionNames() {
    return captionDescriptionNames;
  }

  public void setCaptionDescriptionNames(List captionDescriptionNames) {
    this.captionDescriptionNames = captionDescriptionNames;
  }


  public Output outputName(String outputName) {
    this.outputName = outputName;
    return this;
  }

  /**
   * Get outputName
   * @return outputName
   */
  @javax.annotation.Nullable
  public String getOutputName() {
    return outputName;
  }

  public void setOutputName(String outputName) {
    this.outputName = outputName;
  }


  public Output outputSettings(OutputOutputSettings outputSettings) {
    this.outputSettings = outputSettings;
    return this;
  }

  /**
   * Get outputSettings
   * @return outputSettings
   */
  @javax.annotation.Nonnull
  public OutputOutputSettings getOutputSettings() {
    return outputSettings;
  }

  public void setOutputSettings(OutputOutputSettings outputSettings) {
    this.outputSettings = outputSettings;
  }


  public Output videoDescriptionName(String videoDescriptionName) {
    this.videoDescriptionName = videoDescriptionName;
    return this;
  }

  /**
   * Get videoDescriptionName
   * @return videoDescriptionName
   */
  @javax.annotation.Nullable
  public String getVideoDescriptionName() {
    return videoDescriptionName;
  }

  public void setVideoDescriptionName(String videoDescriptionName) {
    this.videoDescriptionName = videoDescriptionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Output output = (Output) o;
    return Objects.equals(this.audioDescriptionNames, output.audioDescriptionNames) &&
        Objects.equals(this.captionDescriptionNames, output.captionDescriptionNames) &&
        Objects.equals(this.outputName, output.outputName) &&
        Objects.equals(this.outputSettings, output.outputSettings) &&
        Objects.equals(this.videoDescriptionName, output.videoDescriptionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioDescriptionNames, captionDescriptionNames, outputName, outputSettings, videoDescriptionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Output {\n");
    sb.append("    audioDescriptionNames: ").append(toIndentedString(audioDescriptionNames)).append("\n");
    sb.append("    captionDescriptionNames: ").append(toIndentedString(captionDescriptionNames)).append("\n");
    sb.append("    outputName: ").append(toIndentedString(outputName)).append("\n");
    sb.append("    outputSettings: ").append(toIndentedString(outputSettings)).append("\n");
    sb.append("    videoDescriptionName: ").append(toIndentedString(videoDescriptionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioDescriptionNames");
    openapiFields.add("CaptionDescriptionNames");
    openapiFields.add("OutputName");
    openapiFields.add("OutputSettings");
    openapiFields.add("VideoDescriptionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OutputSettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Output
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Output.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Output is not found in the empty JSON string", Output.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Output.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Output` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Output.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioDescriptionNames`
      if (jsonObj.get("AudioDescriptionNames") != null && !jsonObj.get("AudioDescriptionNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AudioDescriptionNames"));
      }
      // validate the optional field `CaptionDescriptionNames`
      if (jsonObj.get("CaptionDescriptionNames") != null && !jsonObj.get("CaptionDescriptionNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CaptionDescriptionNames"));
      }
      // validate the optional field `OutputName`
      if (jsonObj.get("OutputName") != null && !jsonObj.get("OutputName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputName"));
      }
      // validate the required field `OutputSettings`
      OutputOutputSettings.validateJsonElement(jsonObj.get("OutputSettings"));
      // validate the optional field `VideoDescriptionName`
      if (jsonObj.get("VideoDescriptionName") != null && !jsonObj.get("VideoDescriptionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VideoDescriptionName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Output.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Output' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Output> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Output.class));

       return (TypeAdapter<T>) new TypeAdapter<Output>() {
           @Override
           public void write(JsonWriter out, Output value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Output read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Output given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Output
   * @throws IOException if the JSON string is invalid with respect to Output
   */
  public static Output fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Output.class);
  }

  /**
   * Convert an instance of Output to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

