/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HlsScte35SourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hls Input Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsInputSettings {
  public static final String SERIALIZED_NAME_BANDWIDTH = "Bandwidth";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH)
  private Integer bandwidth;

  public static final String SERIALIZED_NAME_BUFFER_SEGMENTS = "BufferSegments";
  @SerializedName(SERIALIZED_NAME_BUFFER_SEGMENTS)
  private Integer bufferSegments;

  public static final String SERIALIZED_NAME_RETRIES = "Retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Integer retries;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL = "RetryInterval";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL)
  private Integer retryInterval;

  public static final String SERIALIZED_NAME_SCTE35_SOURCE = "Scte35Source";
  @SerializedName(SERIALIZED_NAME_SCTE35_SOURCE)
  private HlsScte35SourceType scte35Source;

  public HlsInputSettings() {
  }

  public HlsInputSettings bandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
    return this;
  }

  /**
   * Get bandwidth
   * @return bandwidth
   */
  @javax.annotation.Nullable
  public Integer getBandwidth() {
    return bandwidth;
  }

  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public HlsInputSettings bufferSegments(Integer bufferSegments) {
    this.bufferSegments = bufferSegments;
    return this;
  }

  /**
   * Get bufferSegments
   * @return bufferSegments
   */
  @javax.annotation.Nullable
  public Integer getBufferSegments() {
    return bufferSegments;
  }

  public void setBufferSegments(Integer bufferSegments) {
    this.bufferSegments = bufferSegments;
  }


  public HlsInputSettings retries(Integer retries) {
    this.retries = retries;
    return this;
  }

  /**
   * Get retries
   * @return retries
   */
  @javax.annotation.Nullable
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }


  public HlsInputSettings retryInterval(Integer retryInterval) {
    this.retryInterval = retryInterval;
    return this;
  }

  /**
   * Get retryInterval
   * @return retryInterval
   */
  @javax.annotation.Nullable
  public Integer getRetryInterval() {
    return retryInterval;
  }

  public void setRetryInterval(Integer retryInterval) {
    this.retryInterval = retryInterval;
  }


  public HlsInputSettings scte35Source(HlsScte35SourceType scte35Source) {
    this.scte35Source = scte35Source;
    return this;
  }

  /**
   * Get scte35Source
   * @return scte35Source
   */
  @javax.annotation.Nullable
  public HlsScte35SourceType getScte35Source() {
    return scte35Source;
  }

  public void setScte35Source(HlsScte35SourceType scte35Source) {
    this.scte35Source = scte35Source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsInputSettings hlsInputSettings = (HlsInputSettings) o;
    return Objects.equals(this.bandwidth, hlsInputSettings.bandwidth) &&
        Objects.equals(this.bufferSegments, hlsInputSettings.bufferSegments) &&
        Objects.equals(this.retries, hlsInputSettings.retries) &&
        Objects.equals(this.retryInterval, hlsInputSettings.retryInterval) &&
        Objects.equals(this.scte35Source, hlsInputSettings.scte35Source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidth, bufferSegments, retries, retryInterval, scte35Source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsInputSettings {\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    bufferSegments: ").append(toIndentedString(bufferSegments)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    retryInterval: ").append(toIndentedString(retryInterval)).append("\n");
    sb.append("    scte35Source: ").append(toIndentedString(scte35Source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bandwidth");
    openapiFields.add("BufferSegments");
    openapiFields.add("Retries");
    openapiFields.add("RetryInterval");
    openapiFields.add("Scte35Source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsInputSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsInputSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsInputSettings is not found in the empty JSON string", HlsInputSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsInputSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsInputSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Bandwidth`
      if (jsonObj.get("Bandwidth") != null && !jsonObj.get("Bandwidth").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bandwidth"));
      }
      // validate the optional field `BufferSegments`
      if (jsonObj.get("BufferSegments") != null && !jsonObj.get("BufferSegments").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BufferSegments"));
      }
      // validate the optional field `Retries`
      if (jsonObj.get("Retries") != null && !jsonObj.get("Retries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Retries"));
      }
      // validate the optional field `RetryInterval`
      if (jsonObj.get("RetryInterval") != null && !jsonObj.get("RetryInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetryInterval"));
      }
      // validate the optional field `Scte35Source`
      if (jsonObj.get("Scte35Source") != null && !jsonObj.get("Scte35Source").isJsonNull()) {
        HlsScte35SourceType.validateJsonElement(jsonObj.get("Scte35Source"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsInputSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsInputSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsInputSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsInputSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsInputSettings>() {
           @Override
           public void write(JsonWriter out, HlsInputSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsInputSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsInputSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsInputSettings
   * @throws IOException if the JSON string is invalid with respect to HlsInputSettings
   */
  public static HlsInputSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsInputSettings.class);
  }

  /**
   * Convert an instance of HlsInputSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

