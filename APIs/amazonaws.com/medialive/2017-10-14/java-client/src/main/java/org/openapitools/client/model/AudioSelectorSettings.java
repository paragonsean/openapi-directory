/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioSelectorSettingsAudioHlsRenditionSelection;
import org.openapitools.client.model.AudioSelectorSettingsAudioLanguageSelection;
import org.openapitools.client.model.AudioSelectorSettingsAudioPidSelection;
import org.openapitools.client.model.AudioSelectorSettingsAudioTrackSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Audio Selector Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioSelectorSettings {
  public static final String SERIALIZED_NAME_AUDIO_HLS_RENDITION_SELECTION = "AudioHlsRenditionSelection";
  @SerializedName(SERIALIZED_NAME_AUDIO_HLS_RENDITION_SELECTION)
  private AudioSelectorSettingsAudioHlsRenditionSelection audioHlsRenditionSelection;

  public static final String SERIALIZED_NAME_AUDIO_LANGUAGE_SELECTION = "AudioLanguageSelection";
  @SerializedName(SERIALIZED_NAME_AUDIO_LANGUAGE_SELECTION)
  private AudioSelectorSettingsAudioLanguageSelection audioLanguageSelection;

  public static final String SERIALIZED_NAME_AUDIO_PID_SELECTION = "AudioPidSelection";
  @SerializedName(SERIALIZED_NAME_AUDIO_PID_SELECTION)
  private AudioSelectorSettingsAudioPidSelection audioPidSelection;

  public static final String SERIALIZED_NAME_AUDIO_TRACK_SELECTION = "AudioTrackSelection";
  @SerializedName(SERIALIZED_NAME_AUDIO_TRACK_SELECTION)
  private AudioSelectorSettingsAudioTrackSelection audioTrackSelection;

  public AudioSelectorSettings() {
  }

  public AudioSelectorSettings audioHlsRenditionSelection(AudioSelectorSettingsAudioHlsRenditionSelection audioHlsRenditionSelection) {
    this.audioHlsRenditionSelection = audioHlsRenditionSelection;
    return this;
  }

  /**
   * Get audioHlsRenditionSelection
   * @return audioHlsRenditionSelection
   */
  @javax.annotation.Nullable
  public AudioSelectorSettingsAudioHlsRenditionSelection getAudioHlsRenditionSelection() {
    return audioHlsRenditionSelection;
  }

  public void setAudioHlsRenditionSelection(AudioSelectorSettingsAudioHlsRenditionSelection audioHlsRenditionSelection) {
    this.audioHlsRenditionSelection = audioHlsRenditionSelection;
  }


  public AudioSelectorSettings audioLanguageSelection(AudioSelectorSettingsAudioLanguageSelection audioLanguageSelection) {
    this.audioLanguageSelection = audioLanguageSelection;
    return this;
  }

  /**
   * Get audioLanguageSelection
   * @return audioLanguageSelection
   */
  @javax.annotation.Nullable
  public AudioSelectorSettingsAudioLanguageSelection getAudioLanguageSelection() {
    return audioLanguageSelection;
  }

  public void setAudioLanguageSelection(AudioSelectorSettingsAudioLanguageSelection audioLanguageSelection) {
    this.audioLanguageSelection = audioLanguageSelection;
  }


  public AudioSelectorSettings audioPidSelection(AudioSelectorSettingsAudioPidSelection audioPidSelection) {
    this.audioPidSelection = audioPidSelection;
    return this;
  }

  /**
   * Get audioPidSelection
   * @return audioPidSelection
   */
  @javax.annotation.Nullable
  public AudioSelectorSettingsAudioPidSelection getAudioPidSelection() {
    return audioPidSelection;
  }

  public void setAudioPidSelection(AudioSelectorSettingsAudioPidSelection audioPidSelection) {
    this.audioPidSelection = audioPidSelection;
  }


  public AudioSelectorSettings audioTrackSelection(AudioSelectorSettingsAudioTrackSelection audioTrackSelection) {
    this.audioTrackSelection = audioTrackSelection;
    return this;
  }

  /**
   * Get audioTrackSelection
   * @return audioTrackSelection
   */
  @javax.annotation.Nullable
  public AudioSelectorSettingsAudioTrackSelection getAudioTrackSelection() {
    return audioTrackSelection;
  }

  public void setAudioTrackSelection(AudioSelectorSettingsAudioTrackSelection audioTrackSelection) {
    this.audioTrackSelection = audioTrackSelection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioSelectorSettings audioSelectorSettings = (AudioSelectorSettings) o;
    return Objects.equals(this.audioHlsRenditionSelection, audioSelectorSettings.audioHlsRenditionSelection) &&
        Objects.equals(this.audioLanguageSelection, audioSelectorSettings.audioLanguageSelection) &&
        Objects.equals(this.audioPidSelection, audioSelectorSettings.audioPidSelection) &&
        Objects.equals(this.audioTrackSelection, audioSelectorSettings.audioTrackSelection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioHlsRenditionSelection, audioLanguageSelection, audioPidSelection, audioTrackSelection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioSelectorSettings {\n");
    sb.append("    audioHlsRenditionSelection: ").append(toIndentedString(audioHlsRenditionSelection)).append("\n");
    sb.append("    audioLanguageSelection: ").append(toIndentedString(audioLanguageSelection)).append("\n");
    sb.append("    audioPidSelection: ").append(toIndentedString(audioPidSelection)).append("\n");
    sb.append("    audioTrackSelection: ").append(toIndentedString(audioTrackSelection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioHlsRenditionSelection");
    openapiFields.add("AudioLanguageSelection");
    openapiFields.add("AudioPidSelection");
    openapiFields.add("AudioTrackSelection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioSelectorSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioSelectorSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioSelectorSettings is not found in the empty JSON string", AudioSelectorSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioSelectorSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioSelectorSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioHlsRenditionSelection`
      if (jsonObj.get("AudioHlsRenditionSelection") != null && !jsonObj.get("AudioHlsRenditionSelection").isJsonNull()) {
        AudioSelectorSettingsAudioHlsRenditionSelection.validateJsonElement(jsonObj.get("AudioHlsRenditionSelection"));
      }
      // validate the optional field `AudioLanguageSelection`
      if (jsonObj.get("AudioLanguageSelection") != null && !jsonObj.get("AudioLanguageSelection").isJsonNull()) {
        AudioSelectorSettingsAudioLanguageSelection.validateJsonElement(jsonObj.get("AudioLanguageSelection"));
      }
      // validate the optional field `AudioPidSelection`
      if (jsonObj.get("AudioPidSelection") != null && !jsonObj.get("AudioPidSelection").isJsonNull()) {
        AudioSelectorSettingsAudioPidSelection.validateJsonElement(jsonObj.get("AudioPidSelection"));
      }
      // validate the optional field `AudioTrackSelection`
      if (jsonObj.get("AudioTrackSelection") != null && !jsonObj.get("AudioTrackSelection").isJsonNull()) {
        AudioSelectorSettingsAudioTrackSelection.validateJsonElement(jsonObj.get("AudioTrackSelection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioSelectorSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioSelectorSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioSelectorSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioSelectorSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioSelectorSettings>() {
           @Override
           public void write(JsonWriter out, AudioSelectorSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioSelectorSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioSelectorSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioSelectorSettings
   * @throws IOException if the JSON string is invalid with respect to AudioSelectorSettings
   */
  public static AudioSelectorSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioSelectorSettings.class);
  }

  /**
   * Convert an instance of AudioSelectorSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

