/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateMultiplexProgramRequestMultiplexProgramSettingsServiceDescriptor;
import org.openapitools.client.model.CreateMultiplexProgramRequestMultiplexProgramSettingsVideoSettings;
import org.openapitools.client.model.PreferredChannelPipeline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Multiplex Program settings configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiplexProgramSettings {
  public static final String SERIALIZED_NAME_PREFERRED_CHANNEL_PIPELINE = "PreferredChannelPipeline";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CHANNEL_PIPELINE)
  private PreferredChannelPipeline preferredChannelPipeline;

  public static final String SERIALIZED_NAME_PROGRAM_NUMBER = "ProgramNumber";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NUMBER)
  private Integer programNumber;

  public static final String SERIALIZED_NAME_SERVICE_DESCRIPTOR = "ServiceDescriptor";
  @SerializedName(SERIALIZED_NAME_SERVICE_DESCRIPTOR)
  private CreateMultiplexProgramRequestMultiplexProgramSettingsServiceDescriptor serviceDescriptor;

  public static final String SERIALIZED_NAME_VIDEO_SETTINGS = "VideoSettings";
  @SerializedName(SERIALIZED_NAME_VIDEO_SETTINGS)
  private CreateMultiplexProgramRequestMultiplexProgramSettingsVideoSettings videoSettings;

  public MultiplexProgramSettings() {
  }

  public MultiplexProgramSettings preferredChannelPipeline(PreferredChannelPipeline preferredChannelPipeline) {
    this.preferredChannelPipeline = preferredChannelPipeline;
    return this;
  }

  /**
   * Get preferredChannelPipeline
   * @return preferredChannelPipeline
   */
  @javax.annotation.Nullable
  public PreferredChannelPipeline getPreferredChannelPipeline() {
    return preferredChannelPipeline;
  }

  public void setPreferredChannelPipeline(PreferredChannelPipeline preferredChannelPipeline) {
    this.preferredChannelPipeline = preferredChannelPipeline;
  }


  public MultiplexProgramSettings programNumber(Integer programNumber) {
    this.programNumber = programNumber;
    return this;
  }

  /**
   * Get programNumber
   * @return programNumber
   */
  @javax.annotation.Nonnull
  public Integer getProgramNumber() {
    return programNumber;
  }

  public void setProgramNumber(Integer programNumber) {
    this.programNumber = programNumber;
  }


  public MultiplexProgramSettings serviceDescriptor(CreateMultiplexProgramRequestMultiplexProgramSettingsServiceDescriptor serviceDescriptor) {
    this.serviceDescriptor = serviceDescriptor;
    return this;
  }

  /**
   * Get serviceDescriptor
   * @return serviceDescriptor
   */
  @javax.annotation.Nullable
  public CreateMultiplexProgramRequestMultiplexProgramSettingsServiceDescriptor getServiceDescriptor() {
    return serviceDescriptor;
  }

  public void setServiceDescriptor(CreateMultiplexProgramRequestMultiplexProgramSettingsServiceDescriptor serviceDescriptor) {
    this.serviceDescriptor = serviceDescriptor;
  }


  public MultiplexProgramSettings videoSettings(CreateMultiplexProgramRequestMultiplexProgramSettingsVideoSettings videoSettings) {
    this.videoSettings = videoSettings;
    return this;
  }

  /**
   * Get videoSettings
   * @return videoSettings
   */
  @javax.annotation.Nullable
  public CreateMultiplexProgramRequestMultiplexProgramSettingsVideoSettings getVideoSettings() {
    return videoSettings;
  }

  public void setVideoSettings(CreateMultiplexProgramRequestMultiplexProgramSettingsVideoSettings videoSettings) {
    this.videoSettings = videoSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiplexProgramSettings multiplexProgramSettings = (MultiplexProgramSettings) o;
    return Objects.equals(this.preferredChannelPipeline, multiplexProgramSettings.preferredChannelPipeline) &&
        Objects.equals(this.programNumber, multiplexProgramSettings.programNumber) &&
        Objects.equals(this.serviceDescriptor, multiplexProgramSettings.serviceDescriptor) &&
        Objects.equals(this.videoSettings, multiplexProgramSettings.videoSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preferredChannelPipeline, programNumber, serviceDescriptor, videoSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiplexProgramSettings {\n");
    sb.append("    preferredChannelPipeline: ").append(toIndentedString(preferredChannelPipeline)).append("\n");
    sb.append("    programNumber: ").append(toIndentedString(programNumber)).append("\n");
    sb.append("    serviceDescriptor: ").append(toIndentedString(serviceDescriptor)).append("\n");
    sb.append("    videoSettings: ").append(toIndentedString(videoSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PreferredChannelPipeline");
    openapiFields.add("ProgramNumber");
    openapiFields.add("ServiceDescriptor");
    openapiFields.add("VideoSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ProgramNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiplexProgramSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiplexProgramSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiplexProgramSettings is not found in the empty JSON string", MultiplexProgramSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiplexProgramSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiplexProgramSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MultiplexProgramSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PreferredChannelPipeline`
      if (jsonObj.get("PreferredChannelPipeline") != null && !jsonObj.get("PreferredChannelPipeline").isJsonNull()) {
        PreferredChannelPipeline.validateJsonElement(jsonObj.get("PreferredChannelPipeline"));
      }
      // validate the required field `ProgramNumber`
      Integer.validateJsonElement(jsonObj.get("ProgramNumber"));
      // validate the optional field `ServiceDescriptor`
      if (jsonObj.get("ServiceDescriptor") != null && !jsonObj.get("ServiceDescriptor").isJsonNull()) {
        CreateMultiplexProgramRequestMultiplexProgramSettingsServiceDescriptor.validateJsonElement(jsonObj.get("ServiceDescriptor"));
      }
      // validate the optional field `VideoSettings`
      if (jsonObj.get("VideoSettings") != null && !jsonObj.get("VideoSettings").isJsonNull()) {
        CreateMultiplexProgramRequestMultiplexProgramSettingsVideoSettings.validateJsonElement(jsonObj.get("VideoSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiplexProgramSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiplexProgramSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiplexProgramSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiplexProgramSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiplexProgramSettings>() {
           @Override
           public void write(JsonWriter out, MultiplexProgramSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiplexProgramSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiplexProgramSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiplexProgramSettings
   * @throws IOException if the JSON string is invalid with respect to MultiplexProgramSettings
   */
  public static MultiplexProgramSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiplexProgramSettings.class);
  }

  /**
   * Convert an instance of MultiplexProgramSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

