/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HlsCaptionLanguageSetting;
import org.openapitools.client.model.HlsClientCache;
import org.openapitools.client.model.HlsCodecSpecification;
import org.openapitools.client.model.HlsDirectoryStructure;
import org.openapitools.client.model.HlsDiscontinuityTags;
import org.openapitools.client.model.HlsEncryptionType;
import org.openapitools.client.model.HlsGroupSettingsDestination;
import org.openapitools.client.model.HlsGroupSettingsHlsCdnSettings;
import org.openapitools.client.model.HlsGroupSettingsKeyProviderSettings;
import org.openapitools.client.model.HlsId3SegmentTaggingState;
import org.openapitools.client.model.HlsIncompleteSegmentBehavior;
import org.openapitools.client.model.HlsIvInManifest;
import org.openapitools.client.model.HlsIvSource;
import org.openapitools.client.model.HlsManifestCompression;
import org.openapitools.client.model.HlsManifestDurationFormat;
import org.openapitools.client.model.HlsMode;
import org.openapitools.client.model.HlsOutputSelection;
import org.openapitools.client.model.HlsProgramDateTime;
import org.openapitools.client.model.HlsProgramDateTimeClock;
import org.openapitools.client.model.HlsRedundantManifest;
import org.openapitools.client.model.HlsSegmentationMode;
import org.openapitools.client.model.HlsStreamInfResolution;
import org.openapitools.client.model.HlsTimedMetadataId3Frame;
import org.openapitools.client.model.HlsTsFileMode;
import org.openapitools.client.model.IFrameOnlyPlaylistType;
import org.openapitools.client.model.InputLossActionForHlsOut;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hls Group Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsGroupSettings {
  public static final String SERIALIZED_NAME_AD_MARKERS = "AdMarkers";
  @SerializedName(SERIALIZED_NAME_AD_MARKERS)
  private List adMarkers;

  public static final String SERIALIZED_NAME_BASE_URL_CONTENT = "BaseUrlContent";
  @SerializedName(SERIALIZED_NAME_BASE_URL_CONTENT)
  private String baseUrlContent;

  public static final String SERIALIZED_NAME_BASE_URL_CONTENT1 = "BaseUrlContent1";
  @SerializedName(SERIALIZED_NAME_BASE_URL_CONTENT1)
  private String baseUrlContent1;

  public static final String SERIALIZED_NAME_BASE_URL_MANIFEST = "BaseUrlManifest";
  @SerializedName(SERIALIZED_NAME_BASE_URL_MANIFEST)
  private String baseUrlManifest;

  public static final String SERIALIZED_NAME_BASE_URL_MANIFEST1 = "BaseUrlManifest1";
  @SerializedName(SERIALIZED_NAME_BASE_URL_MANIFEST1)
  private String baseUrlManifest1;

  public static final String SERIALIZED_NAME_CAPTION_LANGUAGE_MAPPINGS = "CaptionLanguageMappings";
  @SerializedName(SERIALIZED_NAME_CAPTION_LANGUAGE_MAPPINGS)
  private List captionLanguageMappings;

  public static final String SERIALIZED_NAME_CAPTION_LANGUAGE_SETTING = "CaptionLanguageSetting";
  @SerializedName(SERIALIZED_NAME_CAPTION_LANGUAGE_SETTING)
  private HlsCaptionLanguageSetting captionLanguageSetting;

  public static final String SERIALIZED_NAME_CLIENT_CACHE = "ClientCache";
  @SerializedName(SERIALIZED_NAME_CLIENT_CACHE)
  private HlsClientCache clientCache;

  public static final String SERIALIZED_NAME_CODEC_SPECIFICATION = "CodecSpecification";
  @SerializedName(SERIALIZED_NAME_CODEC_SPECIFICATION)
  private HlsCodecSpecification codecSpecification;

  public static final String SERIALIZED_NAME_CONSTANT_IV = "ConstantIv";
  @SerializedName(SERIALIZED_NAME_CONSTANT_IV)
  private String constantIv;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private HlsGroupSettingsDestination destination;

  public static final String SERIALIZED_NAME_DIRECTORY_STRUCTURE = "DirectoryStructure";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_STRUCTURE)
  private HlsDirectoryStructure directoryStructure;

  public static final String SERIALIZED_NAME_DISCONTINUITY_TAGS = "DiscontinuityTags";
  @SerializedName(SERIALIZED_NAME_DISCONTINUITY_TAGS)
  private HlsDiscontinuityTags discontinuityTags;

  public static final String SERIALIZED_NAME_ENCRYPTION_TYPE = "EncryptionType";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_TYPE)
  private HlsEncryptionType encryptionType;

  public static final String SERIALIZED_NAME_HLS_CDN_SETTINGS = "HlsCdnSettings";
  @SerializedName(SERIALIZED_NAME_HLS_CDN_SETTINGS)
  private HlsGroupSettingsHlsCdnSettings hlsCdnSettings;

  public static final String SERIALIZED_NAME_HLS_ID3_SEGMENT_TAGGING = "HlsId3SegmentTagging";
  @SerializedName(SERIALIZED_NAME_HLS_ID3_SEGMENT_TAGGING)
  private HlsId3SegmentTaggingState hlsId3SegmentTagging;

  public static final String SERIALIZED_NAME_IFRAME_ONLY_PLAYLISTS = "IFrameOnlyPlaylists";
  @SerializedName(SERIALIZED_NAME_IFRAME_ONLY_PLAYLISTS)
  private IFrameOnlyPlaylistType iframeOnlyPlaylists;

  public static final String SERIALIZED_NAME_INCOMPLETE_SEGMENT_BEHAVIOR = "IncompleteSegmentBehavior";
  @SerializedName(SERIALIZED_NAME_INCOMPLETE_SEGMENT_BEHAVIOR)
  private HlsIncompleteSegmentBehavior incompleteSegmentBehavior;

  public static final String SERIALIZED_NAME_INDEX_N_SEGMENTS = "IndexNSegments";
  @SerializedName(SERIALIZED_NAME_INDEX_N_SEGMENTS)
  private Integer indexNSegments;

  public static final String SERIALIZED_NAME_INPUT_LOSS_ACTION = "InputLossAction";
  @SerializedName(SERIALIZED_NAME_INPUT_LOSS_ACTION)
  private InputLossActionForHlsOut inputLossAction;

  public static final String SERIALIZED_NAME_IV_IN_MANIFEST = "IvInManifest";
  @SerializedName(SERIALIZED_NAME_IV_IN_MANIFEST)
  private HlsIvInManifest ivInManifest;

  public static final String SERIALIZED_NAME_IV_SOURCE = "IvSource";
  @SerializedName(SERIALIZED_NAME_IV_SOURCE)
  private HlsIvSource ivSource;

  public static final String SERIALIZED_NAME_KEEP_SEGMENTS = "KeepSegments";
  @SerializedName(SERIALIZED_NAME_KEEP_SEGMENTS)
  private Integer keepSegments;

  public static final String SERIALIZED_NAME_KEY_FORMAT = "KeyFormat";
  @SerializedName(SERIALIZED_NAME_KEY_FORMAT)
  private String keyFormat;

  public static final String SERIALIZED_NAME_KEY_FORMAT_VERSIONS = "KeyFormatVersions";
  @SerializedName(SERIALIZED_NAME_KEY_FORMAT_VERSIONS)
  private String keyFormatVersions;

  public static final String SERIALIZED_NAME_KEY_PROVIDER_SETTINGS = "KeyProviderSettings";
  @SerializedName(SERIALIZED_NAME_KEY_PROVIDER_SETTINGS)
  private HlsGroupSettingsKeyProviderSettings keyProviderSettings;

  public static final String SERIALIZED_NAME_MANIFEST_COMPRESSION = "ManifestCompression";
  @SerializedName(SERIALIZED_NAME_MANIFEST_COMPRESSION)
  private HlsManifestCompression manifestCompression;

  public static final String SERIALIZED_NAME_MANIFEST_DURATION_FORMAT = "ManifestDurationFormat";
  @SerializedName(SERIALIZED_NAME_MANIFEST_DURATION_FORMAT)
  private HlsManifestDurationFormat manifestDurationFormat;

  public static final String SERIALIZED_NAME_MIN_SEGMENT_LENGTH = "MinSegmentLength";
  @SerializedName(SERIALIZED_NAME_MIN_SEGMENT_LENGTH)
  private Integer minSegmentLength;

  public static final String SERIALIZED_NAME_MODE = "Mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private HlsMode mode;

  public static final String SERIALIZED_NAME_OUTPUT_SELECTION = "OutputSelection";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SELECTION)
  private HlsOutputSelection outputSelection;

  public static final String SERIALIZED_NAME_PROGRAM_DATE_TIME = "ProgramDateTime";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DATE_TIME)
  private HlsProgramDateTime programDateTime;

  public static final String SERIALIZED_NAME_PROGRAM_DATE_TIME_CLOCK = "ProgramDateTimeClock";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DATE_TIME_CLOCK)
  private HlsProgramDateTimeClock programDateTimeClock;

  public static final String SERIALIZED_NAME_PROGRAM_DATE_TIME_PERIOD = "ProgramDateTimePeriod";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DATE_TIME_PERIOD)
  private Integer programDateTimePeriod;

  public static final String SERIALIZED_NAME_REDUNDANT_MANIFEST = "RedundantManifest";
  @SerializedName(SERIALIZED_NAME_REDUNDANT_MANIFEST)
  private HlsRedundantManifest redundantManifest;

  public static final String SERIALIZED_NAME_SEGMENT_LENGTH = "SegmentLength";
  @SerializedName(SERIALIZED_NAME_SEGMENT_LENGTH)
  private Integer segmentLength;

  public static final String SERIALIZED_NAME_SEGMENTATION_MODE = "SegmentationMode";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_MODE)
  private HlsSegmentationMode segmentationMode;

  public static final String SERIALIZED_NAME_SEGMENTS_PER_SUBDIRECTORY = "SegmentsPerSubdirectory";
  @SerializedName(SERIALIZED_NAME_SEGMENTS_PER_SUBDIRECTORY)
  private Integer segmentsPerSubdirectory;

  public static final String SERIALIZED_NAME_STREAM_INF_RESOLUTION = "StreamInfResolution";
  @SerializedName(SERIALIZED_NAME_STREAM_INF_RESOLUTION)
  private HlsStreamInfResolution streamInfResolution;

  public static final String SERIALIZED_NAME_TIMED_METADATA_ID3_FRAME = "TimedMetadataId3Frame";
  @SerializedName(SERIALIZED_NAME_TIMED_METADATA_ID3_FRAME)
  private HlsTimedMetadataId3Frame timedMetadataId3Frame;

  public static final String SERIALIZED_NAME_TIMED_METADATA_ID3_PERIOD = "TimedMetadataId3Period";
  @SerializedName(SERIALIZED_NAME_TIMED_METADATA_ID3_PERIOD)
  private Integer timedMetadataId3Period;

  public static final String SERIALIZED_NAME_TIMESTAMP_DELTA_MILLISECONDS = "TimestampDeltaMilliseconds";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_DELTA_MILLISECONDS)
  private Integer timestampDeltaMilliseconds;

  public static final String SERIALIZED_NAME_TS_FILE_MODE = "TsFileMode";
  @SerializedName(SERIALIZED_NAME_TS_FILE_MODE)
  private HlsTsFileMode tsFileMode;

  public HlsGroupSettings() {
  }

  public HlsGroupSettings adMarkers(List adMarkers) {
    this.adMarkers = adMarkers;
    return this;
  }

  /**
   * Get adMarkers
   * @return adMarkers
   */
  @javax.annotation.Nullable
  public List getAdMarkers() {
    return adMarkers;
  }

  public void setAdMarkers(List adMarkers) {
    this.adMarkers = adMarkers;
  }


  public HlsGroupSettings baseUrlContent(String baseUrlContent) {
    this.baseUrlContent = baseUrlContent;
    return this;
  }

  /**
   * Get baseUrlContent
   * @return baseUrlContent
   */
  @javax.annotation.Nullable
  public String getBaseUrlContent() {
    return baseUrlContent;
  }

  public void setBaseUrlContent(String baseUrlContent) {
    this.baseUrlContent = baseUrlContent;
  }


  public HlsGroupSettings baseUrlContent1(String baseUrlContent1) {
    this.baseUrlContent1 = baseUrlContent1;
    return this;
  }

  /**
   * Get baseUrlContent1
   * @return baseUrlContent1
   */
  @javax.annotation.Nullable
  public String getBaseUrlContent1() {
    return baseUrlContent1;
  }

  public void setBaseUrlContent1(String baseUrlContent1) {
    this.baseUrlContent1 = baseUrlContent1;
  }


  public HlsGroupSettings baseUrlManifest(String baseUrlManifest) {
    this.baseUrlManifest = baseUrlManifest;
    return this;
  }

  /**
   * Get baseUrlManifest
   * @return baseUrlManifest
   */
  @javax.annotation.Nullable
  public String getBaseUrlManifest() {
    return baseUrlManifest;
  }

  public void setBaseUrlManifest(String baseUrlManifest) {
    this.baseUrlManifest = baseUrlManifest;
  }


  public HlsGroupSettings baseUrlManifest1(String baseUrlManifest1) {
    this.baseUrlManifest1 = baseUrlManifest1;
    return this;
  }

  /**
   * Get baseUrlManifest1
   * @return baseUrlManifest1
   */
  @javax.annotation.Nullable
  public String getBaseUrlManifest1() {
    return baseUrlManifest1;
  }

  public void setBaseUrlManifest1(String baseUrlManifest1) {
    this.baseUrlManifest1 = baseUrlManifest1;
  }


  public HlsGroupSettings captionLanguageMappings(List captionLanguageMappings) {
    this.captionLanguageMappings = captionLanguageMappings;
    return this;
  }

  /**
   * Get captionLanguageMappings
   * @return captionLanguageMappings
   */
  @javax.annotation.Nullable
  public List getCaptionLanguageMappings() {
    return captionLanguageMappings;
  }

  public void setCaptionLanguageMappings(List captionLanguageMappings) {
    this.captionLanguageMappings = captionLanguageMappings;
  }


  public HlsGroupSettings captionLanguageSetting(HlsCaptionLanguageSetting captionLanguageSetting) {
    this.captionLanguageSetting = captionLanguageSetting;
    return this;
  }

  /**
   * Get captionLanguageSetting
   * @return captionLanguageSetting
   */
  @javax.annotation.Nullable
  public HlsCaptionLanguageSetting getCaptionLanguageSetting() {
    return captionLanguageSetting;
  }

  public void setCaptionLanguageSetting(HlsCaptionLanguageSetting captionLanguageSetting) {
    this.captionLanguageSetting = captionLanguageSetting;
  }


  public HlsGroupSettings clientCache(HlsClientCache clientCache) {
    this.clientCache = clientCache;
    return this;
  }

  /**
   * Get clientCache
   * @return clientCache
   */
  @javax.annotation.Nullable
  public HlsClientCache getClientCache() {
    return clientCache;
  }

  public void setClientCache(HlsClientCache clientCache) {
    this.clientCache = clientCache;
  }


  public HlsGroupSettings codecSpecification(HlsCodecSpecification codecSpecification) {
    this.codecSpecification = codecSpecification;
    return this;
  }

  /**
   * Get codecSpecification
   * @return codecSpecification
   */
  @javax.annotation.Nullable
  public HlsCodecSpecification getCodecSpecification() {
    return codecSpecification;
  }

  public void setCodecSpecification(HlsCodecSpecification codecSpecification) {
    this.codecSpecification = codecSpecification;
  }


  public HlsGroupSettings constantIv(String constantIv) {
    this.constantIv = constantIv;
    return this;
  }

  /**
   * Get constantIv
   * @return constantIv
   */
  @javax.annotation.Nullable
  public String getConstantIv() {
    return constantIv;
  }

  public void setConstantIv(String constantIv) {
    this.constantIv = constantIv;
  }


  public HlsGroupSettings destination(HlsGroupSettingsDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public HlsGroupSettingsDestination getDestination() {
    return destination;
  }

  public void setDestination(HlsGroupSettingsDestination destination) {
    this.destination = destination;
  }


  public HlsGroupSettings directoryStructure(HlsDirectoryStructure directoryStructure) {
    this.directoryStructure = directoryStructure;
    return this;
  }

  /**
   * Get directoryStructure
   * @return directoryStructure
   */
  @javax.annotation.Nullable
  public HlsDirectoryStructure getDirectoryStructure() {
    return directoryStructure;
  }

  public void setDirectoryStructure(HlsDirectoryStructure directoryStructure) {
    this.directoryStructure = directoryStructure;
  }


  public HlsGroupSettings discontinuityTags(HlsDiscontinuityTags discontinuityTags) {
    this.discontinuityTags = discontinuityTags;
    return this;
  }

  /**
   * Get discontinuityTags
   * @return discontinuityTags
   */
  @javax.annotation.Nullable
  public HlsDiscontinuityTags getDiscontinuityTags() {
    return discontinuityTags;
  }

  public void setDiscontinuityTags(HlsDiscontinuityTags discontinuityTags) {
    this.discontinuityTags = discontinuityTags;
  }


  public HlsGroupSettings encryptionType(HlsEncryptionType encryptionType) {
    this.encryptionType = encryptionType;
    return this;
  }

  /**
   * Get encryptionType
   * @return encryptionType
   */
  @javax.annotation.Nullable
  public HlsEncryptionType getEncryptionType() {
    return encryptionType;
  }

  public void setEncryptionType(HlsEncryptionType encryptionType) {
    this.encryptionType = encryptionType;
  }


  public HlsGroupSettings hlsCdnSettings(HlsGroupSettingsHlsCdnSettings hlsCdnSettings) {
    this.hlsCdnSettings = hlsCdnSettings;
    return this;
  }

  /**
   * Get hlsCdnSettings
   * @return hlsCdnSettings
   */
  @javax.annotation.Nullable
  public HlsGroupSettingsHlsCdnSettings getHlsCdnSettings() {
    return hlsCdnSettings;
  }

  public void setHlsCdnSettings(HlsGroupSettingsHlsCdnSettings hlsCdnSettings) {
    this.hlsCdnSettings = hlsCdnSettings;
  }


  public HlsGroupSettings hlsId3SegmentTagging(HlsId3SegmentTaggingState hlsId3SegmentTagging) {
    this.hlsId3SegmentTagging = hlsId3SegmentTagging;
    return this;
  }

  /**
   * Get hlsId3SegmentTagging
   * @return hlsId3SegmentTagging
   */
  @javax.annotation.Nullable
  public HlsId3SegmentTaggingState getHlsId3SegmentTagging() {
    return hlsId3SegmentTagging;
  }

  public void setHlsId3SegmentTagging(HlsId3SegmentTaggingState hlsId3SegmentTagging) {
    this.hlsId3SegmentTagging = hlsId3SegmentTagging;
  }


  public HlsGroupSettings iframeOnlyPlaylists(IFrameOnlyPlaylistType iframeOnlyPlaylists) {
    this.iframeOnlyPlaylists = iframeOnlyPlaylists;
    return this;
  }

  /**
   * Get iframeOnlyPlaylists
   * @return iframeOnlyPlaylists
   */
  @javax.annotation.Nullable
  public IFrameOnlyPlaylistType getIframeOnlyPlaylists() {
    return iframeOnlyPlaylists;
  }

  public void setIframeOnlyPlaylists(IFrameOnlyPlaylistType iframeOnlyPlaylists) {
    this.iframeOnlyPlaylists = iframeOnlyPlaylists;
  }


  public HlsGroupSettings incompleteSegmentBehavior(HlsIncompleteSegmentBehavior incompleteSegmentBehavior) {
    this.incompleteSegmentBehavior = incompleteSegmentBehavior;
    return this;
  }

  /**
   * Get incompleteSegmentBehavior
   * @return incompleteSegmentBehavior
   */
  @javax.annotation.Nullable
  public HlsIncompleteSegmentBehavior getIncompleteSegmentBehavior() {
    return incompleteSegmentBehavior;
  }

  public void setIncompleteSegmentBehavior(HlsIncompleteSegmentBehavior incompleteSegmentBehavior) {
    this.incompleteSegmentBehavior = incompleteSegmentBehavior;
  }


  public HlsGroupSettings indexNSegments(Integer indexNSegments) {
    this.indexNSegments = indexNSegments;
    return this;
  }

  /**
   * Get indexNSegments
   * @return indexNSegments
   */
  @javax.annotation.Nullable
  public Integer getIndexNSegments() {
    return indexNSegments;
  }

  public void setIndexNSegments(Integer indexNSegments) {
    this.indexNSegments = indexNSegments;
  }


  public HlsGroupSettings inputLossAction(InputLossActionForHlsOut inputLossAction) {
    this.inputLossAction = inputLossAction;
    return this;
  }

  /**
   * Get inputLossAction
   * @return inputLossAction
   */
  @javax.annotation.Nullable
  public InputLossActionForHlsOut getInputLossAction() {
    return inputLossAction;
  }

  public void setInputLossAction(InputLossActionForHlsOut inputLossAction) {
    this.inputLossAction = inputLossAction;
  }


  public HlsGroupSettings ivInManifest(HlsIvInManifest ivInManifest) {
    this.ivInManifest = ivInManifest;
    return this;
  }

  /**
   * Get ivInManifest
   * @return ivInManifest
   */
  @javax.annotation.Nullable
  public HlsIvInManifest getIvInManifest() {
    return ivInManifest;
  }

  public void setIvInManifest(HlsIvInManifest ivInManifest) {
    this.ivInManifest = ivInManifest;
  }


  public HlsGroupSettings ivSource(HlsIvSource ivSource) {
    this.ivSource = ivSource;
    return this;
  }

  /**
   * Get ivSource
   * @return ivSource
   */
  @javax.annotation.Nullable
  public HlsIvSource getIvSource() {
    return ivSource;
  }

  public void setIvSource(HlsIvSource ivSource) {
    this.ivSource = ivSource;
  }


  public HlsGroupSettings keepSegments(Integer keepSegments) {
    this.keepSegments = keepSegments;
    return this;
  }

  /**
   * Get keepSegments
   * @return keepSegments
   */
  @javax.annotation.Nullable
  public Integer getKeepSegments() {
    return keepSegments;
  }

  public void setKeepSegments(Integer keepSegments) {
    this.keepSegments = keepSegments;
  }


  public HlsGroupSettings keyFormat(String keyFormat) {
    this.keyFormat = keyFormat;
    return this;
  }

  /**
   * Get keyFormat
   * @return keyFormat
   */
  @javax.annotation.Nullable
  public String getKeyFormat() {
    return keyFormat;
  }

  public void setKeyFormat(String keyFormat) {
    this.keyFormat = keyFormat;
  }


  public HlsGroupSettings keyFormatVersions(String keyFormatVersions) {
    this.keyFormatVersions = keyFormatVersions;
    return this;
  }

  /**
   * Get keyFormatVersions
   * @return keyFormatVersions
   */
  @javax.annotation.Nullable
  public String getKeyFormatVersions() {
    return keyFormatVersions;
  }

  public void setKeyFormatVersions(String keyFormatVersions) {
    this.keyFormatVersions = keyFormatVersions;
  }


  public HlsGroupSettings keyProviderSettings(HlsGroupSettingsKeyProviderSettings keyProviderSettings) {
    this.keyProviderSettings = keyProviderSettings;
    return this;
  }

  /**
   * Get keyProviderSettings
   * @return keyProviderSettings
   */
  @javax.annotation.Nullable
  public HlsGroupSettingsKeyProviderSettings getKeyProviderSettings() {
    return keyProviderSettings;
  }

  public void setKeyProviderSettings(HlsGroupSettingsKeyProviderSettings keyProviderSettings) {
    this.keyProviderSettings = keyProviderSettings;
  }


  public HlsGroupSettings manifestCompression(HlsManifestCompression manifestCompression) {
    this.manifestCompression = manifestCompression;
    return this;
  }

  /**
   * Get manifestCompression
   * @return manifestCompression
   */
  @javax.annotation.Nullable
  public HlsManifestCompression getManifestCompression() {
    return manifestCompression;
  }

  public void setManifestCompression(HlsManifestCompression manifestCompression) {
    this.manifestCompression = manifestCompression;
  }


  public HlsGroupSettings manifestDurationFormat(HlsManifestDurationFormat manifestDurationFormat) {
    this.manifestDurationFormat = manifestDurationFormat;
    return this;
  }

  /**
   * Get manifestDurationFormat
   * @return manifestDurationFormat
   */
  @javax.annotation.Nullable
  public HlsManifestDurationFormat getManifestDurationFormat() {
    return manifestDurationFormat;
  }

  public void setManifestDurationFormat(HlsManifestDurationFormat manifestDurationFormat) {
    this.manifestDurationFormat = manifestDurationFormat;
  }


  public HlsGroupSettings minSegmentLength(Integer minSegmentLength) {
    this.minSegmentLength = minSegmentLength;
    return this;
  }

  /**
   * Get minSegmentLength
   * @return minSegmentLength
   */
  @javax.annotation.Nullable
  public Integer getMinSegmentLength() {
    return minSegmentLength;
  }

  public void setMinSegmentLength(Integer minSegmentLength) {
    this.minSegmentLength = minSegmentLength;
  }


  public HlsGroupSettings mode(HlsMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public HlsMode getMode() {
    return mode;
  }

  public void setMode(HlsMode mode) {
    this.mode = mode;
  }


  public HlsGroupSettings outputSelection(HlsOutputSelection outputSelection) {
    this.outputSelection = outputSelection;
    return this;
  }

  /**
   * Get outputSelection
   * @return outputSelection
   */
  @javax.annotation.Nullable
  public HlsOutputSelection getOutputSelection() {
    return outputSelection;
  }

  public void setOutputSelection(HlsOutputSelection outputSelection) {
    this.outputSelection = outputSelection;
  }


  public HlsGroupSettings programDateTime(HlsProgramDateTime programDateTime) {
    this.programDateTime = programDateTime;
    return this;
  }

  /**
   * Get programDateTime
   * @return programDateTime
   */
  @javax.annotation.Nullable
  public HlsProgramDateTime getProgramDateTime() {
    return programDateTime;
  }

  public void setProgramDateTime(HlsProgramDateTime programDateTime) {
    this.programDateTime = programDateTime;
  }


  public HlsGroupSettings programDateTimeClock(HlsProgramDateTimeClock programDateTimeClock) {
    this.programDateTimeClock = programDateTimeClock;
    return this;
  }

  /**
   * Get programDateTimeClock
   * @return programDateTimeClock
   */
  @javax.annotation.Nullable
  public HlsProgramDateTimeClock getProgramDateTimeClock() {
    return programDateTimeClock;
  }

  public void setProgramDateTimeClock(HlsProgramDateTimeClock programDateTimeClock) {
    this.programDateTimeClock = programDateTimeClock;
  }


  public HlsGroupSettings programDateTimePeriod(Integer programDateTimePeriod) {
    this.programDateTimePeriod = programDateTimePeriod;
    return this;
  }

  /**
   * Get programDateTimePeriod
   * @return programDateTimePeriod
   */
  @javax.annotation.Nullable
  public Integer getProgramDateTimePeriod() {
    return programDateTimePeriod;
  }

  public void setProgramDateTimePeriod(Integer programDateTimePeriod) {
    this.programDateTimePeriod = programDateTimePeriod;
  }


  public HlsGroupSettings redundantManifest(HlsRedundantManifest redundantManifest) {
    this.redundantManifest = redundantManifest;
    return this;
  }

  /**
   * Get redundantManifest
   * @return redundantManifest
   */
  @javax.annotation.Nullable
  public HlsRedundantManifest getRedundantManifest() {
    return redundantManifest;
  }

  public void setRedundantManifest(HlsRedundantManifest redundantManifest) {
    this.redundantManifest = redundantManifest;
  }


  public HlsGroupSettings segmentLength(Integer segmentLength) {
    this.segmentLength = segmentLength;
    return this;
  }

  /**
   * Get segmentLength
   * @return segmentLength
   */
  @javax.annotation.Nullable
  public Integer getSegmentLength() {
    return segmentLength;
  }

  public void setSegmentLength(Integer segmentLength) {
    this.segmentLength = segmentLength;
  }


  public HlsGroupSettings segmentationMode(HlsSegmentationMode segmentationMode) {
    this.segmentationMode = segmentationMode;
    return this;
  }

  /**
   * Get segmentationMode
   * @return segmentationMode
   */
  @javax.annotation.Nullable
  public HlsSegmentationMode getSegmentationMode() {
    return segmentationMode;
  }

  public void setSegmentationMode(HlsSegmentationMode segmentationMode) {
    this.segmentationMode = segmentationMode;
  }


  public HlsGroupSettings segmentsPerSubdirectory(Integer segmentsPerSubdirectory) {
    this.segmentsPerSubdirectory = segmentsPerSubdirectory;
    return this;
  }

  /**
   * Get segmentsPerSubdirectory
   * @return segmentsPerSubdirectory
   */
  @javax.annotation.Nullable
  public Integer getSegmentsPerSubdirectory() {
    return segmentsPerSubdirectory;
  }

  public void setSegmentsPerSubdirectory(Integer segmentsPerSubdirectory) {
    this.segmentsPerSubdirectory = segmentsPerSubdirectory;
  }


  public HlsGroupSettings streamInfResolution(HlsStreamInfResolution streamInfResolution) {
    this.streamInfResolution = streamInfResolution;
    return this;
  }

  /**
   * Get streamInfResolution
   * @return streamInfResolution
   */
  @javax.annotation.Nullable
  public HlsStreamInfResolution getStreamInfResolution() {
    return streamInfResolution;
  }

  public void setStreamInfResolution(HlsStreamInfResolution streamInfResolution) {
    this.streamInfResolution = streamInfResolution;
  }


  public HlsGroupSettings timedMetadataId3Frame(HlsTimedMetadataId3Frame timedMetadataId3Frame) {
    this.timedMetadataId3Frame = timedMetadataId3Frame;
    return this;
  }

  /**
   * Get timedMetadataId3Frame
   * @return timedMetadataId3Frame
   */
  @javax.annotation.Nullable
  public HlsTimedMetadataId3Frame getTimedMetadataId3Frame() {
    return timedMetadataId3Frame;
  }

  public void setTimedMetadataId3Frame(HlsTimedMetadataId3Frame timedMetadataId3Frame) {
    this.timedMetadataId3Frame = timedMetadataId3Frame;
  }


  public HlsGroupSettings timedMetadataId3Period(Integer timedMetadataId3Period) {
    this.timedMetadataId3Period = timedMetadataId3Period;
    return this;
  }

  /**
   * Get timedMetadataId3Period
   * @return timedMetadataId3Period
   */
  @javax.annotation.Nullable
  public Integer getTimedMetadataId3Period() {
    return timedMetadataId3Period;
  }

  public void setTimedMetadataId3Period(Integer timedMetadataId3Period) {
    this.timedMetadataId3Period = timedMetadataId3Period;
  }


  public HlsGroupSettings timestampDeltaMilliseconds(Integer timestampDeltaMilliseconds) {
    this.timestampDeltaMilliseconds = timestampDeltaMilliseconds;
    return this;
  }

  /**
   * Get timestampDeltaMilliseconds
   * @return timestampDeltaMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getTimestampDeltaMilliseconds() {
    return timestampDeltaMilliseconds;
  }

  public void setTimestampDeltaMilliseconds(Integer timestampDeltaMilliseconds) {
    this.timestampDeltaMilliseconds = timestampDeltaMilliseconds;
  }


  public HlsGroupSettings tsFileMode(HlsTsFileMode tsFileMode) {
    this.tsFileMode = tsFileMode;
    return this;
  }

  /**
   * Get tsFileMode
   * @return tsFileMode
   */
  @javax.annotation.Nullable
  public HlsTsFileMode getTsFileMode() {
    return tsFileMode;
  }

  public void setTsFileMode(HlsTsFileMode tsFileMode) {
    this.tsFileMode = tsFileMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsGroupSettings hlsGroupSettings = (HlsGroupSettings) o;
    return Objects.equals(this.adMarkers, hlsGroupSettings.adMarkers) &&
        Objects.equals(this.baseUrlContent, hlsGroupSettings.baseUrlContent) &&
        Objects.equals(this.baseUrlContent1, hlsGroupSettings.baseUrlContent1) &&
        Objects.equals(this.baseUrlManifest, hlsGroupSettings.baseUrlManifest) &&
        Objects.equals(this.baseUrlManifest1, hlsGroupSettings.baseUrlManifest1) &&
        Objects.equals(this.captionLanguageMappings, hlsGroupSettings.captionLanguageMappings) &&
        Objects.equals(this.captionLanguageSetting, hlsGroupSettings.captionLanguageSetting) &&
        Objects.equals(this.clientCache, hlsGroupSettings.clientCache) &&
        Objects.equals(this.codecSpecification, hlsGroupSettings.codecSpecification) &&
        Objects.equals(this.constantIv, hlsGroupSettings.constantIv) &&
        Objects.equals(this.destination, hlsGroupSettings.destination) &&
        Objects.equals(this.directoryStructure, hlsGroupSettings.directoryStructure) &&
        Objects.equals(this.discontinuityTags, hlsGroupSettings.discontinuityTags) &&
        Objects.equals(this.encryptionType, hlsGroupSettings.encryptionType) &&
        Objects.equals(this.hlsCdnSettings, hlsGroupSettings.hlsCdnSettings) &&
        Objects.equals(this.hlsId3SegmentTagging, hlsGroupSettings.hlsId3SegmentTagging) &&
        Objects.equals(this.iframeOnlyPlaylists, hlsGroupSettings.iframeOnlyPlaylists) &&
        Objects.equals(this.incompleteSegmentBehavior, hlsGroupSettings.incompleteSegmentBehavior) &&
        Objects.equals(this.indexNSegments, hlsGroupSettings.indexNSegments) &&
        Objects.equals(this.inputLossAction, hlsGroupSettings.inputLossAction) &&
        Objects.equals(this.ivInManifest, hlsGroupSettings.ivInManifest) &&
        Objects.equals(this.ivSource, hlsGroupSettings.ivSource) &&
        Objects.equals(this.keepSegments, hlsGroupSettings.keepSegments) &&
        Objects.equals(this.keyFormat, hlsGroupSettings.keyFormat) &&
        Objects.equals(this.keyFormatVersions, hlsGroupSettings.keyFormatVersions) &&
        Objects.equals(this.keyProviderSettings, hlsGroupSettings.keyProviderSettings) &&
        Objects.equals(this.manifestCompression, hlsGroupSettings.manifestCompression) &&
        Objects.equals(this.manifestDurationFormat, hlsGroupSettings.manifestDurationFormat) &&
        Objects.equals(this.minSegmentLength, hlsGroupSettings.minSegmentLength) &&
        Objects.equals(this.mode, hlsGroupSettings.mode) &&
        Objects.equals(this.outputSelection, hlsGroupSettings.outputSelection) &&
        Objects.equals(this.programDateTime, hlsGroupSettings.programDateTime) &&
        Objects.equals(this.programDateTimeClock, hlsGroupSettings.programDateTimeClock) &&
        Objects.equals(this.programDateTimePeriod, hlsGroupSettings.programDateTimePeriod) &&
        Objects.equals(this.redundantManifest, hlsGroupSettings.redundantManifest) &&
        Objects.equals(this.segmentLength, hlsGroupSettings.segmentLength) &&
        Objects.equals(this.segmentationMode, hlsGroupSettings.segmentationMode) &&
        Objects.equals(this.segmentsPerSubdirectory, hlsGroupSettings.segmentsPerSubdirectory) &&
        Objects.equals(this.streamInfResolution, hlsGroupSettings.streamInfResolution) &&
        Objects.equals(this.timedMetadataId3Frame, hlsGroupSettings.timedMetadataId3Frame) &&
        Objects.equals(this.timedMetadataId3Period, hlsGroupSettings.timedMetadataId3Period) &&
        Objects.equals(this.timestampDeltaMilliseconds, hlsGroupSettings.timestampDeltaMilliseconds) &&
        Objects.equals(this.tsFileMode, hlsGroupSettings.tsFileMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adMarkers, baseUrlContent, baseUrlContent1, baseUrlManifest, baseUrlManifest1, captionLanguageMappings, captionLanguageSetting, clientCache, codecSpecification, constantIv, destination, directoryStructure, discontinuityTags, encryptionType, hlsCdnSettings, hlsId3SegmentTagging, iframeOnlyPlaylists, incompleteSegmentBehavior, indexNSegments, inputLossAction, ivInManifest, ivSource, keepSegments, keyFormat, keyFormatVersions, keyProviderSettings, manifestCompression, manifestDurationFormat, minSegmentLength, mode, outputSelection, programDateTime, programDateTimeClock, programDateTimePeriod, redundantManifest, segmentLength, segmentationMode, segmentsPerSubdirectory, streamInfResolution, timedMetadataId3Frame, timedMetadataId3Period, timestampDeltaMilliseconds, tsFileMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsGroupSettings {\n");
    sb.append("    adMarkers: ").append(toIndentedString(adMarkers)).append("\n");
    sb.append("    baseUrlContent: ").append(toIndentedString(baseUrlContent)).append("\n");
    sb.append("    baseUrlContent1: ").append(toIndentedString(baseUrlContent1)).append("\n");
    sb.append("    baseUrlManifest: ").append(toIndentedString(baseUrlManifest)).append("\n");
    sb.append("    baseUrlManifest1: ").append(toIndentedString(baseUrlManifest1)).append("\n");
    sb.append("    captionLanguageMappings: ").append(toIndentedString(captionLanguageMappings)).append("\n");
    sb.append("    captionLanguageSetting: ").append(toIndentedString(captionLanguageSetting)).append("\n");
    sb.append("    clientCache: ").append(toIndentedString(clientCache)).append("\n");
    sb.append("    codecSpecification: ").append(toIndentedString(codecSpecification)).append("\n");
    sb.append("    constantIv: ").append(toIndentedString(constantIv)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    directoryStructure: ").append(toIndentedString(directoryStructure)).append("\n");
    sb.append("    discontinuityTags: ").append(toIndentedString(discontinuityTags)).append("\n");
    sb.append("    encryptionType: ").append(toIndentedString(encryptionType)).append("\n");
    sb.append("    hlsCdnSettings: ").append(toIndentedString(hlsCdnSettings)).append("\n");
    sb.append("    hlsId3SegmentTagging: ").append(toIndentedString(hlsId3SegmentTagging)).append("\n");
    sb.append("    iframeOnlyPlaylists: ").append(toIndentedString(iframeOnlyPlaylists)).append("\n");
    sb.append("    incompleteSegmentBehavior: ").append(toIndentedString(incompleteSegmentBehavior)).append("\n");
    sb.append("    indexNSegments: ").append(toIndentedString(indexNSegments)).append("\n");
    sb.append("    inputLossAction: ").append(toIndentedString(inputLossAction)).append("\n");
    sb.append("    ivInManifest: ").append(toIndentedString(ivInManifest)).append("\n");
    sb.append("    ivSource: ").append(toIndentedString(ivSource)).append("\n");
    sb.append("    keepSegments: ").append(toIndentedString(keepSegments)).append("\n");
    sb.append("    keyFormat: ").append(toIndentedString(keyFormat)).append("\n");
    sb.append("    keyFormatVersions: ").append(toIndentedString(keyFormatVersions)).append("\n");
    sb.append("    keyProviderSettings: ").append(toIndentedString(keyProviderSettings)).append("\n");
    sb.append("    manifestCompression: ").append(toIndentedString(manifestCompression)).append("\n");
    sb.append("    manifestDurationFormat: ").append(toIndentedString(manifestDurationFormat)).append("\n");
    sb.append("    minSegmentLength: ").append(toIndentedString(minSegmentLength)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    outputSelection: ").append(toIndentedString(outputSelection)).append("\n");
    sb.append("    programDateTime: ").append(toIndentedString(programDateTime)).append("\n");
    sb.append("    programDateTimeClock: ").append(toIndentedString(programDateTimeClock)).append("\n");
    sb.append("    programDateTimePeriod: ").append(toIndentedString(programDateTimePeriod)).append("\n");
    sb.append("    redundantManifest: ").append(toIndentedString(redundantManifest)).append("\n");
    sb.append("    segmentLength: ").append(toIndentedString(segmentLength)).append("\n");
    sb.append("    segmentationMode: ").append(toIndentedString(segmentationMode)).append("\n");
    sb.append("    segmentsPerSubdirectory: ").append(toIndentedString(segmentsPerSubdirectory)).append("\n");
    sb.append("    streamInfResolution: ").append(toIndentedString(streamInfResolution)).append("\n");
    sb.append("    timedMetadataId3Frame: ").append(toIndentedString(timedMetadataId3Frame)).append("\n");
    sb.append("    timedMetadataId3Period: ").append(toIndentedString(timedMetadataId3Period)).append("\n");
    sb.append("    timestampDeltaMilliseconds: ").append(toIndentedString(timestampDeltaMilliseconds)).append("\n");
    sb.append("    tsFileMode: ").append(toIndentedString(tsFileMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdMarkers");
    openapiFields.add("BaseUrlContent");
    openapiFields.add("BaseUrlContent1");
    openapiFields.add("BaseUrlManifest");
    openapiFields.add("BaseUrlManifest1");
    openapiFields.add("CaptionLanguageMappings");
    openapiFields.add("CaptionLanguageSetting");
    openapiFields.add("ClientCache");
    openapiFields.add("CodecSpecification");
    openapiFields.add("ConstantIv");
    openapiFields.add("Destination");
    openapiFields.add("DirectoryStructure");
    openapiFields.add("DiscontinuityTags");
    openapiFields.add("EncryptionType");
    openapiFields.add("HlsCdnSettings");
    openapiFields.add("HlsId3SegmentTagging");
    openapiFields.add("IFrameOnlyPlaylists");
    openapiFields.add("IncompleteSegmentBehavior");
    openapiFields.add("IndexNSegments");
    openapiFields.add("InputLossAction");
    openapiFields.add("IvInManifest");
    openapiFields.add("IvSource");
    openapiFields.add("KeepSegments");
    openapiFields.add("KeyFormat");
    openapiFields.add("KeyFormatVersions");
    openapiFields.add("KeyProviderSettings");
    openapiFields.add("ManifestCompression");
    openapiFields.add("ManifestDurationFormat");
    openapiFields.add("MinSegmentLength");
    openapiFields.add("Mode");
    openapiFields.add("OutputSelection");
    openapiFields.add("ProgramDateTime");
    openapiFields.add("ProgramDateTimeClock");
    openapiFields.add("ProgramDateTimePeriod");
    openapiFields.add("RedundantManifest");
    openapiFields.add("SegmentLength");
    openapiFields.add("SegmentationMode");
    openapiFields.add("SegmentsPerSubdirectory");
    openapiFields.add("StreamInfResolution");
    openapiFields.add("TimedMetadataId3Frame");
    openapiFields.add("TimedMetadataId3Period");
    openapiFields.add("TimestampDeltaMilliseconds");
    openapiFields.add("TsFileMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Destination");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsGroupSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsGroupSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsGroupSettings is not found in the empty JSON string", HlsGroupSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsGroupSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsGroupSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HlsGroupSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdMarkers`
      if (jsonObj.get("AdMarkers") != null && !jsonObj.get("AdMarkers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdMarkers"));
      }
      // validate the optional field `BaseUrlContent`
      if (jsonObj.get("BaseUrlContent") != null && !jsonObj.get("BaseUrlContent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseUrlContent"));
      }
      // validate the optional field `BaseUrlContent1`
      if (jsonObj.get("BaseUrlContent1") != null && !jsonObj.get("BaseUrlContent1").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseUrlContent1"));
      }
      // validate the optional field `BaseUrlManifest`
      if (jsonObj.get("BaseUrlManifest") != null && !jsonObj.get("BaseUrlManifest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseUrlManifest"));
      }
      // validate the optional field `BaseUrlManifest1`
      if (jsonObj.get("BaseUrlManifest1") != null && !jsonObj.get("BaseUrlManifest1").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseUrlManifest1"));
      }
      // validate the optional field `CaptionLanguageMappings`
      if (jsonObj.get("CaptionLanguageMappings") != null && !jsonObj.get("CaptionLanguageMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CaptionLanguageMappings"));
      }
      // validate the optional field `CaptionLanguageSetting`
      if (jsonObj.get("CaptionLanguageSetting") != null && !jsonObj.get("CaptionLanguageSetting").isJsonNull()) {
        HlsCaptionLanguageSetting.validateJsonElement(jsonObj.get("CaptionLanguageSetting"));
      }
      // validate the optional field `ClientCache`
      if (jsonObj.get("ClientCache") != null && !jsonObj.get("ClientCache").isJsonNull()) {
        HlsClientCache.validateJsonElement(jsonObj.get("ClientCache"));
      }
      // validate the optional field `CodecSpecification`
      if (jsonObj.get("CodecSpecification") != null && !jsonObj.get("CodecSpecification").isJsonNull()) {
        HlsCodecSpecification.validateJsonElement(jsonObj.get("CodecSpecification"));
      }
      // validate the optional field `ConstantIv`
      if (jsonObj.get("ConstantIv") != null && !jsonObj.get("ConstantIv").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConstantIv"));
      }
      // validate the required field `Destination`
      HlsGroupSettingsDestination.validateJsonElement(jsonObj.get("Destination"));
      // validate the optional field `DirectoryStructure`
      if (jsonObj.get("DirectoryStructure") != null && !jsonObj.get("DirectoryStructure").isJsonNull()) {
        HlsDirectoryStructure.validateJsonElement(jsonObj.get("DirectoryStructure"));
      }
      // validate the optional field `DiscontinuityTags`
      if (jsonObj.get("DiscontinuityTags") != null && !jsonObj.get("DiscontinuityTags").isJsonNull()) {
        HlsDiscontinuityTags.validateJsonElement(jsonObj.get("DiscontinuityTags"));
      }
      // validate the optional field `EncryptionType`
      if (jsonObj.get("EncryptionType") != null && !jsonObj.get("EncryptionType").isJsonNull()) {
        HlsEncryptionType.validateJsonElement(jsonObj.get("EncryptionType"));
      }
      // validate the optional field `HlsCdnSettings`
      if (jsonObj.get("HlsCdnSettings") != null && !jsonObj.get("HlsCdnSettings").isJsonNull()) {
        HlsGroupSettingsHlsCdnSettings.validateJsonElement(jsonObj.get("HlsCdnSettings"));
      }
      // validate the optional field `HlsId3SegmentTagging`
      if (jsonObj.get("HlsId3SegmentTagging") != null && !jsonObj.get("HlsId3SegmentTagging").isJsonNull()) {
        HlsId3SegmentTaggingState.validateJsonElement(jsonObj.get("HlsId3SegmentTagging"));
      }
      // validate the optional field `IFrameOnlyPlaylists`
      if (jsonObj.get("IFrameOnlyPlaylists") != null && !jsonObj.get("IFrameOnlyPlaylists").isJsonNull()) {
        IFrameOnlyPlaylistType.validateJsonElement(jsonObj.get("IFrameOnlyPlaylists"));
      }
      // validate the optional field `IncompleteSegmentBehavior`
      if (jsonObj.get("IncompleteSegmentBehavior") != null && !jsonObj.get("IncompleteSegmentBehavior").isJsonNull()) {
        HlsIncompleteSegmentBehavior.validateJsonElement(jsonObj.get("IncompleteSegmentBehavior"));
      }
      // validate the optional field `IndexNSegments`
      if (jsonObj.get("IndexNSegments") != null && !jsonObj.get("IndexNSegments").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IndexNSegments"));
      }
      // validate the optional field `InputLossAction`
      if (jsonObj.get("InputLossAction") != null && !jsonObj.get("InputLossAction").isJsonNull()) {
        InputLossActionForHlsOut.validateJsonElement(jsonObj.get("InputLossAction"));
      }
      // validate the optional field `IvInManifest`
      if (jsonObj.get("IvInManifest") != null && !jsonObj.get("IvInManifest").isJsonNull()) {
        HlsIvInManifest.validateJsonElement(jsonObj.get("IvInManifest"));
      }
      // validate the optional field `IvSource`
      if (jsonObj.get("IvSource") != null && !jsonObj.get("IvSource").isJsonNull()) {
        HlsIvSource.validateJsonElement(jsonObj.get("IvSource"));
      }
      // validate the optional field `KeepSegments`
      if (jsonObj.get("KeepSegments") != null && !jsonObj.get("KeepSegments").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("KeepSegments"));
      }
      // validate the optional field `KeyFormat`
      if (jsonObj.get("KeyFormat") != null && !jsonObj.get("KeyFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KeyFormat"));
      }
      // validate the optional field `KeyFormatVersions`
      if (jsonObj.get("KeyFormatVersions") != null && !jsonObj.get("KeyFormatVersions").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KeyFormatVersions"));
      }
      // validate the optional field `KeyProviderSettings`
      if (jsonObj.get("KeyProviderSettings") != null && !jsonObj.get("KeyProviderSettings").isJsonNull()) {
        HlsGroupSettingsKeyProviderSettings.validateJsonElement(jsonObj.get("KeyProviderSettings"));
      }
      // validate the optional field `ManifestCompression`
      if (jsonObj.get("ManifestCompression") != null && !jsonObj.get("ManifestCompression").isJsonNull()) {
        HlsManifestCompression.validateJsonElement(jsonObj.get("ManifestCompression"));
      }
      // validate the optional field `ManifestDurationFormat`
      if (jsonObj.get("ManifestDurationFormat") != null && !jsonObj.get("ManifestDurationFormat").isJsonNull()) {
        HlsManifestDurationFormat.validateJsonElement(jsonObj.get("ManifestDurationFormat"));
      }
      // validate the optional field `MinSegmentLength`
      if (jsonObj.get("MinSegmentLength") != null && !jsonObj.get("MinSegmentLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinSegmentLength"));
      }
      // validate the optional field `Mode`
      if (jsonObj.get("Mode") != null && !jsonObj.get("Mode").isJsonNull()) {
        HlsMode.validateJsonElement(jsonObj.get("Mode"));
      }
      // validate the optional field `OutputSelection`
      if (jsonObj.get("OutputSelection") != null && !jsonObj.get("OutputSelection").isJsonNull()) {
        HlsOutputSelection.validateJsonElement(jsonObj.get("OutputSelection"));
      }
      // validate the optional field `ProgramDateTime`
      if (jsonObj.get("ProgramDateTime") != null && !jsonObj.get("ProgramDateTime").isJsonNull()) {
        HlsProgramDateTime.validateJsonElement(jsonObj.get("ProgramDateTime"));
      }
      // validate the optional field `ProgramDateTimeClock`
      if (jsonObj.get("ProgramDateTimeClock") != null && !jsonObj.get("ProgramDateTimeClock").isJsonNull()) {
        HlsProgramDateTimeClock.validateJsonElement(jsonObj.get("ProgramDateTimeClock"));
      }
      // validate the optional field `ProgramDateTimePeriod`
      if (jsonObj.get("ProgramDateTimePeriod") != null && !jsonObj.get("ProgramDateTimePeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramDateTimePeriod"));
      }
      // validate the optional field `RedundantManifest`
      if (jsonObj.get("RedundantManifest") != null && !jsonObj.get("RedundantManifest").isJsonNull()) {
        HlsRedundantManifest.validateJsonElement(jsonObj.get("RedundantManifest"));
      }
      // validate the optional field `SegmentLength`
      if (jsonObj.get("SegmentLength") != null && !jsonObj.get("SegmentLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentLength"));
      }
      // validate the optional field `SegmentationMode`
      if (jsonObj.get("SegmentationMode") != null && !jsonObj.get("SegmentationMode").isJsonNull()) {
        HlsSegmentationMode.validateJsonElement(jsonObj.get("SegmentationMode"));
      }
      // validate the optional field `SegmentsPerSubdirectory`
      if (jsonObj.get("SegmentsPerSubdirectory") != null && !jsonObj.get("SegmentsPerSubdirectory").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentsPerSubdirectory"));
      }
      // validate the optional field `StreamInfResolution`
      if (jsonObj.get("StreamInfResolution") != null && !jsonObj.get("StreamInfResolution").isJsonNull()) {
        HlsStreamInfResolution.validateJsonElement(jsonObj.get("StreamInfResolution"));
      }
      // validate the optional field `TimedMetadataId3Frame`
      if (jsonObj.get("TimedMetadataId3Frame") != null && !jsonObj.get("TimedMetadataId3Frame").isJsonNull()) {
        HlsTimedMetadataId3Frame.validateJsonElement(jsonObj.get("TimedMetadataId3Frame"));
      }
      // validate the optional field `TimedMetadataId3Period`
      if (jsonObj.get("TimedMetadataId3Period") != null && !jsonObj.get("TimedMetadataId3Period").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimedMetadataId3Period"));
      }
      // validate the optional field `TimestampDeltaMilliseconds`
      if (jsonObj.get("TimestampDeltaMilliseconds") != null && !jsonObj.get("TimestampDeltaMilliseconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimestampDeltaMilliseconds"));
      }
      // validate the optional field `TsFileMode`
      if (jsonObj.get("TsFileMode") != null && !jsonObj.get("TsFileMode").isJsonNull()) {
        HlsTsFileMode.validateJsonElement(jsonObj.get("TsFileMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsGroupSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsGroupSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsGroupSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsGroupSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsGroupSettings>() {
           @Override
           public void write(JsonWriter out, HlsGroupSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsGroupSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsGroupSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsGroupSettings
   * @throws IOException if the JSON string is invalid with respect to HlsGroupSettings
   */
  public static HlsGroupSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsGroupSettings.class);
  }

  /**
   * Convert an instance of HlsGroupSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

