/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateChannelRequestCdiInputSpecification;
import org.openapitools.client.model.CreateChannelRequestEncoderSettings;
import org.openapitools.client.model.CreateChannelRequestInputSpecification;
import org.openapitools.client.model.InputAttachment;
import org.openapitools.client.model.OutputDestination;
import org.openapitools.client.model.UpdateChannelRequestMaintenance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateChannelRequest {
  public static final String SERIALIZED_NAME_CDI_INPUT_SPECIFICATION = "cdiInputSpecification";
  @SerializedName(SERIALIZED_NAME_CDI_INPUT_SPECIFICATION)
  private CreateChannelRequestCdiInputSpecification cdiInputSpecification;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<OutputDestination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCODER_SETTINGS = "encoderSettings";
  @SerializedName(SERIALIZED_NAME_ENCODER_SETTINGS)
  private CreateChannelRequestEncoderSettings encoderSettings;

  public static final String SERIALIZED_NAME_INPUT_ATTACHMENTS = "inputAttachments";
  @SerializedName(SERIALIZED_NAME_INPUT_ATTACHMENTS)
  private List<InputAttachment> inputAttachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_SPECIFICATION = "inputSpecification";
  @SerializedName(SERIALIZED_NAME_INPUT_SPECIFICATION)
  private CreateChannelRequestInputSpecification inputSpecification;

  /**
   * The log level the user wants for their channel.
   */
  @JsonAdapter(LogLevelEnum.Adapter.class)
  public enum LogLevelEnum {
    ERROR("ERROR"),
    
    WARNING("WARNING"),
    
    INFO("INFO"),
    
    DEBUG("DEBUG"),
    
    DISABLED("DISABLED");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogLevelEnum fromValue(String value) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private LogLevelEnum logLevel;

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private UpdateChannelRequestMaintenance maintenance;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public UpdateChannelRequest() {
  }

  public UpdateChannelRequest cdiInputSpecification(CreateChannelRequestCdiInputSpecification cdiInputSpecification) {
    this.cdiInputSpecification = cdiInputSpecification;
    return this;
  }

  /**
   * Get cdiInputSpecification
   * @return cdiInputSpecification
   */
  @javax.annotation.Nullable
  public CreateChannelRequestCdiInputSpecification getCdiInputSpecification() {
    return cdiInputSpecification;
  }

  public void setCdiInputSpecification(CreateChannelRequestCdiInputSpecification cdiInputSpecification) {
    this.cdiInputSpecification = cdiInputSpecification;
  }


  public UpdateChannelRequest destinations(List<OutputDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public UpdateChannelRequest addDestinationsItem(OutputDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfOutputDestination
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<OutputDestination> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<OutputDestination> destinations) {
    this.destinations = destinations;
  }


  public UpdateChannelRequest encoderSettings(CreateChannelRequestEncoderSettings encoderSettings) {
    this.encoderSettings = encoderSettings;
    return this;
  }

  /**
   * Get encoderSettings
   * @return encoderSettings
   */
  @javax.annotation.Nullable
  public CreateChannelRequestEncoderSettings getEncoderSettings() {
    return encoderSettings;
  }

  public void setEncoderSettings(CreateChannelRequestEncoderSettings encoderSettings) {
    this.encoderSettings = encoderSettings;
  }


  public UpdateChannelRequest inputAttachments(List<InputAttachment> inputAttachments) {
    this.inputAttachments = inputAttachments;
    return this;
  }

  public UpdateChannelRequest addInputAttachmentsItem(InputAttachment inputAttachmentsItem) {
    if (this.inputAttachments == null) {
      this.inputAttachments = new ArrayList<>();
    }
    this.inputAttachments.add(inputAttachmentsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfInputAttachment
   * @return inputAttachments
   */
  @javax.annotation.Nullable
  public List<InputAttachment> getInputAttachments() {
    return inputAttachments;
  }

  public void setInputAttachments(List<InputAttachment> inputAttachments) {
    this.inputAttachments = inputAttachments;
  }


  public UpdateChannelRequest inputSpecification(CreateChannelRequestInputSpecification inputSpecification) {
    this.inputSpecification = inputSpecification;
    return this;
  }

  /**
   * Get inputSpecification
   * @return inputSpecification
   */
  @javax.annotation.Nullable
  public CreateChannelRequestInputSpecification getInputSpecification() {
    return inputSpecification;
  }

  public void setInputSpecification(CreateChannelRequestInputSpecification inputSpecification) {
    this.inputSpecification = inputSpecification;
  }


  public UpdateChannelRequest logLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  /**
   * The log level the user wants for their channel.
   * @return logLevel
   */
  @javax.annotation.Nullable
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }


  public UpdateChannelRequest maintenance(UpdateChannelRequestMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public UpdateChannelRequestMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(UpdateChannelRequestMaintenance maintenance) {
    this.maintenance = maintenance;
  }


  public UpdateChannelRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateChannelRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateChannelRequest updateChannelRequest = (UpdateChannelRequest) o;
    return Objects.equals(this.cdiInputSpecification, updateChannelRequest.cdiInputSpecification) &&
        Objects.equals(this.destinations, updateChannelRequest.destinations) &&
        Objects.equals(this.encoderSettings, updateChannelRequest.encoderSettings) &&
        Objects.equals(this.inputAttachments, updateChannelRequest.inputAttachments) &&
        Objects.equals(this.inputSpecification, updateChannelRequest.inputSpecification) &&
        Objects.equals(this.logLevel, updateChannelRequest.logLevel) &&
        Objects.equals(this.maintenance, updateChannelRequest.maintenance) &&
        Objects.equals(this.name, updateChannelRequest.name) &&
        Objects.equals(this.roleArn, updateChannelRequest.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdiInputSpecification, destinations, encoderSettings, inputAttachments, inputSpecification, logLevel, maintenance, name, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateChannelRequest {\n");
    sb.append("    cdiInputSpecification: ").append(toIndentedString(cdiInputSpecification)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    encoderSettings: ").append(toIndentedString(encoderSettings)).append("\n");
    sb.append("    inputAttachments: ").append(toIndentedString(inputAttachments)).append("\n");
    sb.append("    inputSpecification: ").append(toIndentedString(inputSpecification)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdiInputSpecification");
    openapiFields.add("destinations");
    openapiFields.add("encoderSettings");
    openapiFields.add("inputAttachments");
    openapiFields.add("inputSpecification");
    openapiFields.add("logLevel");
    openapiFields.add("maintenance");
    openapiFields.add("name");
    openapiFields.add("roleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateChannelRequest is not found in the empty JSON string", UpdateChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cdiInputSpecification`
      if (jsonObj.get("cdiInputSpecification") != null && !jsonObj.get("cdiInputSpecification").isJsonNull()) {
        CreateChannelRequestCdiInputSpecification.validateJsonElement(jsonObj.get("cdiInputSpecification"));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            OutputDestination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      // validate the optional field `encoderSettings`
      if (jsonObj.get("encoderSettings") != null && !jsonObj.get("encoderSettings").isJsonNull()) {
        CreateChannelRequestEncoderSettings.validateJsonElement(jsonObj.get("encoderSettings"));
      }
      if (jsonObj.get("inputAttachments") != null && !jsonObj.get("inputAttachments").isJsonNull()) {
        JsonArray jsonArrayinputAttachments = jsonObj.getAsJsonArray("inputAttachments");
        if (jsonArrayinputAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("inputAttachments").toString()));
          }

          // validate the optional field `inputAttachments` (array)
          for (int i = 0; i < jsonArrayinputAttachments.size(); i++) {
            InputAttachment.validateJsonElement(jsonArrayinputAttachments.get(i));
          };
        }
      }
      // validate the optional field `inputSpecification`
      if (jsonObj.get("inputSpecification") != null && !jsonObj.get("inputSpecification").isJsonNull()) {
        CreateChannelRequestInputSpecification.validateJsonElement(jsonObj.get("inputSpecification"));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      // validate the optional field `logLevel`
      if (jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) {
        LogLevelEnum.validateJsonElement(jsonObj.get("logLevel"));
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        UpdateChannelRequestMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) && !jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateChannelRequest>() {
           @Override
           public void write(JsonWriter out, UpdateChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateChannelRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateChannelRequest
   */
  public static UpdateChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateChannelRequest.class);
  }

  /**
   * Convert an instance of UpdateChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

