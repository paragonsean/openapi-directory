/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelClass;
import org.openapitools.client.model.ReservationCodec;
import org.openapitools.client.model.ReservationMaximumBitrate;
import org.openapitools.client.model.ReservationMaximumFramerate;
import org.openapitools.client.model.ReservationResolution;
import org.openapitools.client.model.ReservationResourceType;
import org.openapitools.client.model.ReservationSpecialFeature;
import org.openapitools.client.model.ReservationVideoQuality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource configuration (codec, resolution, bitrate, ...)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationResourceSpecification {
  public static final String SERIALIZED_NAME_CHANNEL_CLASS = "ChannelClass";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CLASS)
  private ChannelClass channelClass;

  public static final String SERIALIZED_NAME_CODEC = "Codec";
  @SerializedName(SERIALIZED_NAME_CODEC)
  private ReservationCodec codec;

  public static final String SERIALIZED_NAME_MAXIMUM_BITRATE = "MaximumBitrate";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_BITRATE)
  private ReservationMaximumBitrate maximumBitrate;

  public static final String SERIALIZED_NAME_MAXIMUM_FRAMERATE = "MaximumFramerate";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_FRAMERATE)
  private ReservationMaximumFramerate maximumFramerate;

  public static final String SERIALIZED_NAME_RESOLUTION = "Resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ReservationResolution resolution;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ReservationResourceType resourceType;

  public static final String SERIALIZED_NAME_SPECIAL_FEATURE = "SpecialFeature";
  @SerializedName(SERIALIZED_NAME_SPECIAL_FEATURE)
  private ReservationSpecialFeature specialFeature;

  public static final String SERIALIZED_NAME_VIDEO_QUALITY = "VideoQuality";
  @SerializedName(SERIALIZED_NAME_VIDEO_QUALITY)
  private ReservationVideoQuality videoQuality;

  public ReservationResourceSpecification() {
  }

  public ReservationResourceSpecification channelClass(ChannelClass channelClass) {
    this.channelClass = channelClass;
    return this;
  }

  /**
   * Get channelClass
   * @return channelClass
   */
  @javax.annotation.Nullable
  public ChannelClass getChannelClass() {
    return channelClass;
  }

  public void setChannelClass(ChannelClass channelClass) {
    this.channelClass = channelClass;
  }


  public ReservationResourceSpecification codec(ReservationCodec codec) {
    this.codec = codec;
    return this;
  }

  /**
   * Get codec
   * @return codec
   */
  @javax.annotation.Nullable
  public ReservationCodec getCodec() {
    return codec;
  }

  public void setCodec(ReservationCodec codec) {
    this.codec = codec;
  }


  public ReservationResourceSpecification maximumBitrate(ReservationMaximumBitrate maximumBitrate) {
    this.maximumBitrate = maximumBitrate;
    return this;
  }

  /**
   * Get maximumBitrate
   * @return maximumBitrate
   */
  @javax.annotation.Nullable
  public ReservationMaximumBitrate getMaximumBitrate() {
    return maximumBitrate;
  }

  public void setMaximumBitrate(ReservationMaximumBitrate maximumBitrate) {
    this.maximumBitrate = maximumBitrate;
  }


  public ReservationResourceSpecification maximumFramerate(ReservationMaximumFramerate maximumFramerate) {
    this.maximumFramerate = maximumFramerate;
    return this;
  }

  /**
   * Get maximumFramerate
   * @return maximumFramerate
   */
  @javax.annotation.Nullable
  public ReservationMaximumFramerate getMaximumFramerate() {
    return maximumFramerate;
  }

  public void setMaximumFramerate(ReservationMaximumFramerate maximumFramerate) {
    this.maximumFramerate = maximumFramerate;
  }


  public ReservationResourceSpecification resolution(ReservationResolution resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public ReservationResolution getResolution() {
    return resolution;
  }

  public void setResolution(ReservationResolution resolution) {
    this.resolution = resolution;
  }


  public ReservationResourceSpecification resourceType(ReservationResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ReservationResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ReservationResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public ReservationResourceSpecification specialFeature(ReservationSpecialFeature specialFeature) {
    this.specialFeature = specialFeature;
    return this;
  }

  /**
   * Get specialFeature
   * @return specialFeature
   */
  @javax.annotation.Nullable
  public ReservationSpecialFeature getSpecialFeature() {
    return specialFeature;
  }

  public void setSpecialFeature(ReservationSpecialFeature specialFeature) {
    this.specialFeature = specialFeature;
  }


  public ReservationResourceSpecification videoQuality(ReservationVideoQuality videoQuality) {
    this.videoQuality = videoQuality;
    return this;
  }

  /**
   * Get videoQuality
   * @return videoQuality
   */
  @javax.annotation.Nullable
  public ReservationVideoQuality getVideoQuality() {
    return videoQuality;
  }

  public void setVideoQuality(ReservationVideoQuality videoQuality) {
    this.videoQuality = videoQuality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationResourceSpecification reservationResourceSpecification = (ReservationResourceSpecification) o;
    return Objects.equals(this.channelClass, reservationResourceSpecification.channelClass) &&
        Objects.equals(this.codec, reservationResourceSpecification.codec) &&
        Objects.equals(this.maximumBitrate, reservationResourceSpecification.maximumBitrate) &&
        Objects.equals(this.maximumFramerate, reservationResourceSpecification.maximumFramerate) &&
        Objects.equals(this.resolution, reservationResourceSpecification.resolution) &&
        Objects.equals(this.resourceType, reservationResourceSpecification.resourceType) &&
        Objects.equals(this.specialFeature, reservationResourceSpecification.specialFeature) &&
        Objects.equals(this.videoQuality, reservationResourceSpecification.videoQuality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelClass, codec, maximumBitrate, maximumFramerate, resolution, resourceType, specialFeature, videoQuality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationResourceSpecification {\n");
    sb.append("    channelClass: ").append(toIndentedString(channelClass)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    maximumBitrate: ").append(toIndentedString(maximumBitrate)).append("\n");
    sb.append("    maximumFramerate: ").append(toIndentedString(maximumFramerate)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    specialFeature: ").append(toIndentedString(specialFeature)).append("\n");
    sb.append("    videoQuality: ").append(toIndentedString(videoQuality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelClass");
    openapiFields.add("Codec");
    openapiFields.add("MaximumBitrate");
    openapiFields.add("MaximumFramerate");
    openapiFields.add("Resolution");
    openapiFields.add("ResourceType");
    openapiFields.add("SpecialFeature");
    openapiFields.add("VideoQuality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationResourceSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationResourceSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationResourceSpecification is not found in the empty JSON string", ReservationResourceSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationResourceSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationResourceSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelClass`
      if (jsonObj.get("ChannelClass") != null && !jsonObj.get("ChannelClass").isJsonNull()) {
        ChannelClass.validateJsonElement(jsonObj.get("ChannelClass"));
      }
      // validate the optional field `Codec`
      if (jsonObj.get("Codec") != null && !jsonObj.get("Codec").isJsonNull()) {
        ReservationCodec.validateJsonElement(jsonObj.get("Codec"));
      }
      // validate the optional field `MaximumBitrate`
      if (jsonObj.get("MaximumBitrate") != null && !jsonObj.get("MaximumBitrate").isJsonNull()) {
        ReservationMaximumBitrate.validateJsonElement(jsonObj.get("MaximumBitrate"));
      }
      // validate the optional field `MaximumFramerate`
      if (jsonObj.get("MaximumFramerate") != null && !jsonObj.get("MaximumFramerate").isJsonNull()) {
        ReservationMaximumFramerate.validateJsonElement(jsonObj.get("MaximumFramerate"));
      }
      // validate the optional field `Resolution`
      if (jsonObj.get("Resolution") != null && !jsonObj.get("Resolution").isJsonNull()) {
        ReservationResolution.validateJsonElement(jsonObj.get("Resolution"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        ReservationResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `SpecialFeature`
      if (jsonObj.get("SpecialFeature") != null && !jsonObj.get("SpecialFeature").isJsonNull()) {
        ReservationSpecialFeature.validateJsonElement(jsonObj.get("SpecialFeature"));
      }
      // validate the optional field `VideoQuality`
      if (jsonObj.get("VideoQuality") != null && !jsonObj.get("VideoQuality").isJsonNull()) {
        ReservationVideoQuality.validateJsonElement(jsonObj.get("VideoQuality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationResourceSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationResourceSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationResourceSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationResourceSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationResourceSpecification>() {
           @Override
           public void write(JsonWriter out, ReservationResourceSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationResourceSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationResourceSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationResourceSpecification
   * @throws IOException if the JSON string is invalid with respect to ReservationResourceSpecification
   */
  public static ReservationResourceSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationResourceSpecification.class);
  }

  /**
   * Convert an instance of ReservationResourceSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

