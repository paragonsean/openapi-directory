/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MultiplexState;
import org.openapitools.client.model.MultiplexSummaryMultiplexSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Placeholder documentation for MultiplexSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiplexSummary {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MULTIPLEX_SETTINGS = "MultiplexSettings";
  @SerializedName(SERIALIZED_NAME_MULTIPLEX_SETTINGS)
  private MultiplexSummaryMultiplexSettings multiplexSettings;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PIPELINES_RUNNING_COUNT = "PipelinesRunningCount";
  @SerializedName(SERIALIZED_NAME_PIPELINES_RUNNING_COUNT)
  private Integer pipelinesRunningCount;

  public static final String SERIALIZED_NAME_PROGRAM_COUNT = "ProgramCount";
  @SerializedName(SERIALIZED_NAME_PROGRAM_COUNT)
  private Integer programCount;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private MultiplexState state;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public MultiplexSummary() {
  }

  public MultiplexSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public MultiplexSummary availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }


  public MultiplexSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MultiplexSummary multiplexSettings(MultiplexSummaryMultiplexSettings multiplexSettings) {
    this.multiplexSettings = multiplexSettings;
    return this;
  }

  /**
   * Get multiplexSettings
   * @return multiplexSettings
   */
  @javax.annotation.Nullable
  public MultiplexSummaryMultiplexSettings getMultiplexSettings() {
    return multiplexSettings;
  }

  public void setMultiplexSettings(MultiplexSummaryMultiplexSettings multiplexSettings) {
    this.multiplexSettings = multiplexSettings;
  }


  public MultiplexSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MultiplexSummary pipelinesRunningCount(Integer pipelinesRunningCount) {
    this.pipelinesRunningCount = pipelinesRunningCount;
    return this;
  }

  /**
   * Get pipelinesRunningCount
   * @return pipelinesRunningCount
   */
  @javax.annotation.Nullable
  public Integer getPipelinesRunningCount() {
    return pipelinesRunningCount;
  }

  public void setPipelinesRunningCount(Integer pipelinesRunningCount) {
    this.pipelinesRunningCount = pipelinesRunningCount;
  }


  public MultiplexSummary programCount(Integer programCount) {
    this.programCount = programCount;
    return this;
  }

  /**
   * Get programCount
   * @return programCount
   */
  @javax.annotation.Nullable
  public Integer getProgramCount() {
    return programCount;
  }

  public void setProgramCount(Integer programCount) {
    this.programCount = programCount;
  }


  public MultiplexSummary state(MultiplexState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public MultiplexState getState() {
    return state;
  }

  public void setState(MultiplexState state) {
    this.state = state;
  }


  public MultiplexSummary tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiplexSummary multiplexSummary = (MultiplexSummary) o;
    return Objects.equals(this.arn, multiplexSummary.arn) &&
        Objects.equals(this.availabilityZones, multiplexSummary.availabilityZones) &&
        Objects.equals(this.id, multiplexSummary.id) &&
        Objects.equals(this.multiplexSettings, multiplexSummary.multiplexSettings) &&
        Objects.equals(this.name, multiplexSummary.name) &&
        Objects.equals(this.pipelinesRunningCount, multiplexSummary.pipelinesRunningCount) &&
        Objects.equals(this.programCount, multiplexSummary.programCount) &&
        Objects.equals(this.state, multiplexSummary.state) &&
        Objects.equals(this.tags, multiplexSummary.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, availabilityZones, id, multiplexSettings, name, pipelinesRunningCount, programCount, state, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiplexSummary {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multiplexSettings: ").append(toIndentedString(multiplexSettings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pipelinesRunningCount: ").append(toIndentedString(pipelinesRunningCount)).append("\n");
    sb.append("    programCount: ").append(toIndentedString(programCount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("AvailabilityZones");
    openapiFields.add("Id");
    openapiFields.add("MultiplexSettings");
    openapiFields.add("Name");
    openapiFields.add("PipelinesRunningCount");
    openapiFields.add("ProgramCount");
    openapiFields.add("State");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiplexSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiplexSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiplexSummary is not found in the empty JSON string", MultiplexSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiplexSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiplexSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `MultiplexSettings`
      if (jsonObj.get("MultiplexSettings") != null && !jsonObj.get("MultiplexSettings").isJsonNull()) {
        MultiplexSummaryMultiplexSettings.validateJsonElement(jsonObj.get("MultiplexSettings"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `PipelinesRunningCount`
      if (jsonObj.get("PipelinesRunningCount") != null && !jsonObj.get("PipelinesRunningCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PipelinesRunningCount"));
      }
      // validate the optional field `ProgramCount`
      if (jsonObj.get("ProgramCount") != null && !jsonObj.get("ProgramCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramCount"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        MultiplexState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiplexSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiplexSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiplexSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiplexSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiplexSummary>() {
           @Override
           public void write(JsonWriter out, MultiplexSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiplexSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiplexSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiplexSummary
   * @throws IOException if the JSON string is invalid with respect to MultiplexSummary
   */
  public static MultiplexSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiplexSummary.class);
  }

  /**
   * Convert an instance of MultiplexSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

