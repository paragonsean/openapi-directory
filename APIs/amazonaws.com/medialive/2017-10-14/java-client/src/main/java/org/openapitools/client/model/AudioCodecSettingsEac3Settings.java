/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Eac3AttenuationControl;
import org.openapitools.client.model.Eac3BitstreamMode;
import org.openapitools.client.model.Eac3CodingMode;
import org.openapitools.client.model.Eac3DcFilter;
import org.openapitools.client.model.Eac3DrcLine;
import org.openapitools.client.model.Eac3DrcRf;
import org.openapitools.client.model.Eac3LfeControl;
import org.openapitools.client.model.Eac3LfeFilter;
import org.openapitools.client.model.Eac3MetadataControl;
import org.openapitools.client.model.Eac3PassthroughControl;
import org.openapitools.client.model.Eac3PhaseControl;
import org.openapitools.client.model.Eac3StereoDownmix;
import org.openapitools.client.model.Eac3SurroundExMode;
import org.openapitools.client.model.Eac3SurroundMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AudioCodecSettingsEac3Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioCodecSettingsEac3Settings {
  public static final String SERIALIZED_NAME_ATTENUATION_CONTROL = "AttenuationControl";
  @SerializedName(SERIALIZED_NAME_ATTENUATION_CONTROL)
  private Eac3AttenuationControl attenuationControl;

  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Double bitrate;

  public static final String SERIALIZED_NAME_BITSTREAM_MODE = "BitstreamMode";
  @SerializedName(SERIALIZED_NAME_BITSTREAM_MODE)
  private Eac3BitstreamMode bitstreamMode;

  public static final String SERIALIZED_NAME_CODING_MODE = "CodingMode";
  @SerializedName(SERIALIZED_NAME_CODING_MODE)
  private Eac3CodingMode codingMode;

  public static final String SERIALIZED_NAME_DC_FILTER = "DcFilter";
  @SerializedName(SERIALIZED_NAME_DC_FILTER)
  private Eac3DcFilter dcFilter;

  public static final String SERIALIZED_NAME_DIALNORM = "Dialnorm";
  @SerializedName(SERIALIZED_NAME_DIALNORM)
  private Integer dialnorm;

  public static final String SERIALIZED_NAME_DRC_LINE = "DrcLine";
  @SerializedName(SERIALIZED_NAME_DRC_LINE)
  private Eac3DrcLine drcLine;

  public static final String SERIALIZED_NAME_DRC_RF = "DrcRf";
  @SerializedName(SERIALIZED_NAME_DRC_RF)
  private Eac3DrcRf drcRf;

  public static final String SERIALIZED_NAME_LFE_CONTROL = "LfeControl";
  @SerializedName(SERIALIZED_NAME_LFE_CONTROL)
  private Eac3LfeControl lfeControl;

  public static final String SERIALIZED_NAME_LFE_FILTER = "LfeFilter";
  @SerializedName(SERIALIZED_NAME_LFE_FILTER)
  private Eac3LfeFilter lfeFilter;

  public static final String SERIALIZED_NAME_LO_RO_CENTER_MIX_LEVEL = "LoRoCenterMixLevel";
  @SerializedName(SERIALIZED_NAME_LO_RO_CENTER_MIX_LEVEL)
  private Double loRoCenterMixLevel;

  public static final String SERIALIZED_NAME_LO_RO_SURROUND_MIX_LEVEL = "LoRoSurroundMixLevel";
  @SerializedName(SERIALIZED_NAME_LO_RO_SURROUND_MIX_LEVEL)
  private Double loRoSurroundMixLevel;

  public static final String SERIALIZED_NAME_LT_RT_CENTER_MIX_LEVEL = "LtRtCenterMixLevel";
  @SerializedName(SERIALIZED_NAME_LT_RT_CENTER_MIX_LEVEL)
  private Double ltRtCenterMixLevel;

  public static final String SERIALIZED_NAME_LT_RT_SURROUND_MIX_LEVEL = "LtRtSurroundMixLevel";
  @SerializedName(SERIALIZED_NAME_LT_RT_SURROUND_MIX_LEVEL)
  private Double ltRtSurroundMixLevel;

  public static final String SERIALIZED_NAME_METADATA_CONTROL = "MetadataControl";
  @SerializedName(SERIALIZED_NAME_METADATA_CONTROL)
  private Eac3MetadataControl metadataControl;

  public static final String SERIALIZED_NAME_PASSTHROUGH_CONTROL = "PassthroughControl";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH_CONTROL)
  private Eac3PassthroughControl passthroughControl;

  public static final String SERIALIZED_NAME_PHASE_CONTROL = "PhaseControl";
  @SerializedName(SERIALIZED_NAME_PHASE_CONTROL)
  private Eac3PhaseControl phaseControl;

  public static final String SERIALIZED_NAME_STEREO_DOWNMIX = "StereoDownmix";
  @SerializedName(SERIALIZED_NAME_STEREO_DOWNMIX)
  private Eac3StereoDownmix stereoDownmix;

  public static final String SERIALIZED_NAME_SURROUND_EX_MODE = "SurroundExMode";
  @SerializedName(SERIALIZED_NAME_SURROUND_EX_MODE)
  private Eac3SurroundExMode surroundExMode;

  public static final String SERIALIZED_NAME_SURROUND_MODE = "SurroundMode";
  @SerializedName(SERIALIZED_NAME_SURROUND_MODE)
  private Eac3SurroundMode surroundMode;

  public AudioCodecSettingsEac3Settings() {
  }

  public AudioCodecSettingsEac3Settings attenuationControl(Eac3AttenuationControl attenuationControl) {
    this.attenuationControl = attenuationControl;
    return this;
  }

  /**
   * Get attenuationControl
   * @return attenuationControl
   */
  @javax.annotation.Nullable
  public Eac3AttenuationControl getAttenuationControl() {
    return attenuationControl;
  }

  public void setAttenuationControl(Eac3AttenuationControl attenuationControl) {
    this.attenuationControl = attenuationControl;
  }


  public AudioCodecSettingsEac3Settings bitrate(Double bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Double getBitrate() {
    return bitrate;
  }

  public void setBitrate(Double bitrate) {
    this.bitrate = bitrate;
  }


  public AudioCodecSettingsEac3Settings bitstreamMode(Eac3BitstreamMode bitstreamMode) {
    this.bitstreamMode = bitstreamMode;
    return this;
  }

  /**
   * Get bitstreamMode
   * @return bitstreamMode
   */
  @javax.annotation.Nullable
  public Eac3BitstreamMode getBitstreamMode() {
    return bitstreamMode;
  }

  public void setBitstreamMode(Eac3BitstreamMode bitstreamMode) {
    this.bitstreamMode = bitstreamMode;
  }


  public AudioCodecSettingsEac3Settings codingMode(Eac3CodingMode codingMode) {
    this.codingMode = codingMode;
    return this;
  }

  /**
   * Get codingMode
   * @return codingMode
   */
  @javax.annotation.Nullable
  public Eac3CodingMode getCodingMode() {
    return codingMode;
  }

  public void setCodingMode(Eac3CodingMode codingMode) {
    this.codingMode = codingMode;
  }


  public AudioCodecSettingsEac3Settings dcFilter(Eac3DcFilter dcFilter) {
    this.dcFilter = dcFilter;
    return this;
  }

  /**
   * Get dcFilter
   * @return dcFilter
   */
  @javax.annotation.Nullable
  public Eac3DcFilter getDcFilter() {
    return dcFilter;
  }

  public void setDcFilter(Eac3DcFilter dcFilter) {
    this.dcFilter = dcFilter;
  }


  public AudioCodecSettingsEac3Settings dialnorm(Integer dialnorm) {
    this.dialnorm = dialnorm;
    return this;
  }

  /**
   * Get dialnorm
   * @return dialnorm
   */
  @javax.annotation.Nullable
  public Integer getDialnorm() {
    return dialnorm;
  }

  public void setDialnorm(Integer dialnorm) {
    this.dialnorm = dialnorm;
  }


  public AudioCodecSettingsEac3Settings drcLine(Eac3DrcLine drcLine) {
    this.drcLine = drcLine;
    return this;
  }

  /**
   * Get drcLine
   * @return drcLine
   */
  @javax.annotation.Nullable
  public Eac3DrcLine getDrcLine() {
    return drcLine;
  }

  public void setDrcLine(Eac3DrcLine drcLine) {
    this.drcLine = drcLine;
  }


  public AudioCodecSettingsEac3Settings drcRf(Eac3DrcRf drcRf) {
    this.drcRf = drcRf;
    return this;
  }

  /**
   * Get drcRf
   * @return drcRf
   */
  @javax.annotation.Nullable
  public Eac3DrcRf getDrcRf() {
    return drcRf;
  }

  public void setDrcRf(Eac3DrcRf drcRf) {
    this.drcRf = drcRf;
  }


  public AudioCodecSettingsEac3Settings lfeControl(Eac3LfeControl lfeControl) {
    this.lfeControl = lfeControl;
    return this;
  }

  /**
   * Get lfeControl
   * @return lfeControl
   */
  @javax.annotation.Nullable
  public Eac3LfeControl getLfeControl() {
    return lfeControl;
  }

  public void setLfeControl(Eac3LfeControl lfeControl) {
    this.lfeControl = lfeControl;
  }


  public AudioCodecSettingsEac3Settings lfeFilter(Eac3LfeFilter lfeFilter) {
    this.lfeFilter = lfeFilter;
    return this;
  }

  /**
   * Get lfeFilter
   * @return lfeFilter
   */
  @javax.annotation.Nullable
  public Eac3LfeFilter getLfeFilter() {
    return lfeFilter;
  }

  public void setLfeFilter(Eac3LfeFilter lfeFilter) {
    this.lfeFilter = lfeFilter;
  }


  public AudioCodecSettingsEac3Settings loRoCenterMixLevel(Double loRoCenterMixLevel) {
    this.loRoCenterMixLevel = loRoCenterMixLevel;
    return this;
  }

  /**
   * Get loRoCenterMixLevel
   * @return loRoCenterMixLevel
   */
  @javax.annotation.Nullable
  public Double getLoRoCenterMixLevel() {
    return loRoCenterMixLevel;
  }

  public void setLoRoCenterMixLevel(Double loRoCenterMixLevel) {
    this.loRoCenterMixLevel = loRoCenterMixLevel;
  }


  public AudioCodecSettingsEac3Settings loRoSurroundMixLevel(Double loRoSurroundMixLevel) {
    this.loRoSurroundMixLevel = loRoSurroundMixLevel;
    return this;
  }

  /**
   * Get loRoSurroundMixLevel
   * @return loRoSurroundMixLevel
   */
  @javax.annotation.Nullable
  public Double getLoRoSurroundMixLevel() {
    return loRoSurroundMixLevel;
  }

  public void setLoRoSurroundMixLevel(Double loRoSurroundMixLevel) {
    this.loRoSurroundMixLevel = loRoSurroundMixLevel;
  }


  public AudioCodecSettingsEac3Settings ltRtCenterMixLevel(Double ltRtCenterMixLevel) {
    this.ltRtCenterMixLevel = ltRtCenterMixLevel;
    return this;
  }

  /**
   * Get ltRtCenterMixLevel
   * @return ltRtCenterMixLevel
   */
  @javax.annotation.Nullable
  public Double getLtRtCenterMixLevel() {
    return ltRtCenterMixLevel;
  }

  public void setLtRtCenterMixLevel(Double ltRtCenterMixLevel) {
    this.ltRtCenterMixLevel = ltRtCenterMixLevel;
  }


  public AudioCodecSettingsEac3Settings ltRtSurroundMixLevel(Double ltRtSurroundMixLevel) {
    this.ltRtSurroundMixLevel = ltRtSurroundMixLevel;
    return this;
  }

  /**
   * Get ltRtSurroundMixLevel
   * @return ltRtSurroundMixLevel
   */
  @javax.annotation.Nullable
  public Double getLtRtSurroundMixLevel() {
    return ltRtSurroundMixLevel;
  }

  public void setLtRtSurroundMixLevel(Double ltRtSurroundMixLevel) {
    this.ltRtSurroundMixLevel = ltRtSurroundMixLevel;
  }


  public AudioCodecSettingsEac3Settings metadataControl(Eac3MetadataControl metadataControl) {
    this.metadataControl = metadataControl;
    return this;
  }

  /**
   * Get metadataControl
   * @return metadataControl
   */
  @javax.annotation.Nullable
  public Eac3MetadataControl getMetadataControl() {
    return metadataControl;
  }

  public void setMetadataControl(Eac3MetadataControl metadataControl) {
    this.metadataControl = metadataControl;
  }


  public AudioCodecSettingsEac3Settings passthroughControl(Eac3PassthroughControl passthroughControl) {
    this.passthroughControl = passthroughControl;
    return this;
  }

  /**
   * Get passthroughControl
   * @return passthroughControl
   */
  @javax.annotation.Nullable
  public Eac3PassthroughControl getPassthroughControl() {
    return passthroughControl;
  }

  public void setPassthroughControl(Eac3PassthroughControl passthroughControl) {
    this.passthroughControl = passthroughControl;
  }


  public AudioCodecSettingsEac3Settings phaseControl(Eac3PhaseControl phaseControl) {
    this.phaseControl = phaseControl;
    return this;
  }

  /**
   * Get phaseControl
   * @return phaseControl
   */
  @javax.annotation.Nullable
  public Eac3PhaseControl getPhaseControl() {
    return phaseControl;
  }

  public void setPhaseControl(Eac3PhaseControl phaseControl) {
    this.phaseControl = phaseControl;
  }


  public AudioCodecSettingsEac3Settings stereoDownmix(Eac3StereoDownmix stereoDownmix) {
    this.stereoDownmix = stereoDownmix;
    return this;
  }

  /**
   * Get stereoDownmix
   * @return stereoDownmix
   */
  @javax.annotation.Nullable
  public Eac3StereoDownmix getStereoDownmix() {
    return stereoDownmix;
  }

  public void setStereoDownmix(Eac3StereoDownmix stereoDownmix) {
    this.stereoDownmix = stereoDownmix;
  }


  public AudioCodecSettingsEac3Settings surroundExMode(Eac3SurroundExMode surroundExMode) {
    this.surroundExMode = surroundExMode;
    return this;
  }

  /**
   * Get surroundExMode
   * @return surroundExMode
   */
  @javax.annotation.Nullable
  public Eac3SurroundExMode getSurroundExMode() {
    return surroundExMode;
  }

  public void setSurroundExMode(Eac3SurroundExMode surroundExMode) {
    this.surroundExMode = surroundExMode;
  }


  public AudioCodecSettingsEac3Settings surroundMode(Eac3SurroundMode surroundMode) {
    this.surroundMode = surroundMode;
    return this;
  }

  /**
   * Get surroundMode
   * @return surroundMode
   */
  @javax.annotation.Nullable
  public Eac3SurroundMode getSurroundMode() {
    return surroundMode;
  }

  public void setSurroundMode(Eac3SurroundMode surroundMode) {
    this.surroundMode = surroundMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioCodecSettingsEac3Settings audioCodecSettingsEac3Settings = (AudioCodecSettingsEac3Settings) o;
    return Objects.equals(this.attenuationControl, audioCodecSettingsEac3Settings.attenuationControl) &&
        Objects.equals(this.bitrate, audioCodecSettingsEac3Settings.bitrate) &&
        Objects.equals(this.bitstreamMode, audioCodecSettingsEac3Settings.bitstreamMode) &&
        Objects.equals(this.codingMode, audioCodecSettingsEac3Settings.codingMode) &&
        Objects.equals(this.dcFilter, audioCodecSettingsEac3Settings.dcFilter) &&
        Objects.equals(this.dialnorm, audioCodecSettingsEac3Settings.dialnorm) &&
        Objects.equals(this.drcLine, audioCodecSettingsEac3Settings.drcLine) &&
        Objects.equals(this.drcRf, audioCodecSettingsEac3Settings.drcRf) &&
        Objects.equals(this.lfeControl, audioCodecSettingsEac3Settings.lfeControl) &&
        Objects.equals(this.lfeFilter, audioCodecSettingsEac3Settings.lfeFilter) &&
        Objects.equals(this.loRoCenterMixLevel, audioCodecSettingsEac3Settings.loRoCenterMixLevel) &&
        Objects.equals(this.loRoSurroundMixLevel, audioCodecSettingsEac3Settings.loRoSurroundMixLevel) &&
        Objects.equals(this.ltRtCenterMixLevel, audioCodecSettingsEac3Settings.ltRtCenterMixLevel) &&
        Objects.equals(this.ltRtSurroundMixLevel, audioCodecSettingsEac3Settings.ltRtSurroundMixLevel) &&
        Objects.equals(this.metadataControl, audioCodecSettingsEac3Settings.metadataControl) &&
        Objects.equals(this.passthroughControl, audioCodecSettingsEac3Settings.passthroughControl) &&
        Objects.equals(this.phaseControl, audioCodecSettingsEac3Settings.phaseControl) &&
        Objects.equals(this.stereoDownmix, audioCodecSettingsEac3Settings.stereoDownmix) &&
        Objects.equals(this.surroundExMode, audioCodecSettingsEac3Settings.surroundExMode) &&
        Objects.equals(this.surroundMode, audioCodecSettingsEac3Settings.surroundMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attenuationControl, bitrate, bitstreamMode, codingMode, dcFilter, dialnorm, drcLine, drcRf, lfeControl, lfeFilter, loRoCenterMixLevel, loRoSurroundMixLevel, ltRtCenterMixLevel, ltRtSurroundMixLevel, metadataControl, passthroughControl, phaseControl, stereoDownmix, surroundExMode, surroundMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioCodecSettingsEac3Settings {\n");
    sb.append("    attenuationControl: ").append(toIndentedString(attenuationControl)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    bitstreamMode: ").append(toIndentedString(bitstreamMode)).append("\n");
    sb.append("    codingMode: ").append(toIndentedString(codingMode)).append("\n");
    sb.append("    dcFilter: ").append(toIndentedString(dcFilter)).append("\n");
    sb.append("    dialnorm: ").append(toIndentedString(dialnorm)).append("\n");
    sb.append("    drcLine: ").append(toIndentedString(drcLine)).append("\n");
    sb.append("    drcRf: ").append(toIndentedString(drcRf)).append("\n");
    sb.append("    lfeControl: ").append(toIndentedString(lfeControl)).append("\n");
    sb.append("    lfeFilter: ").append(toIndentedString(lfeFilter)).append("\n");
    sb.append("    loRoCenterMixLevel: ").append(toIndentedString(loRoCenterMixLevel)).append("\n");
    sb.append("    loRoSurroundMixLevel: ").append(toIndentedString(loRoSurroundMixLevel)).append("\n");
    sb.append("    ltRtCenterMixLevel: ").append(toIndentedString(ltRtCenterMixLevel)).append("\n");
    sb.append("    ltRtSurroundMixLevel: ").append(toIndentedString(ltRtSurroundMixLevel)).append("\n");
    sb.append("    metadataControl: ").append(toIndentedString(metadataControl)).append("\n");
    sb.append("    passthroughControl: ").append(toIndentedString(passthroughControl)).append("\n");
    sb.append("    phaseControl: ").append(toIndentedString(phaseControl)).append("\n");
    sb.append("    stereoDownmix: ").append(toIndentedString(stereoDownmix)).append("\n");
    sb.append("    surroundExMode: ").append(toIndentedString(surroundExMode)).append("\n");
    sb.append("    surroundMode: ").append(toIndentedString(surroundMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttenuationControl");
    openapiFields.add("Bitrate");
    openapiFields.add("BitstreamMode");
    openapiFields.add("CodingMode");
    openapiFields.add("DcFilter");
    openapiFields.add("Dialnorm");
    openapiFields.add("DrcLine");
    openapiFields.add("DrcRf");
    openapiFields.add("LfeControl");
    openapiFields.add("LfeFilter");
    openapiFields.add("LoRoCenterMixLevel");
    openapiFields.add("LoRoSurroundMixLevel");
    openapiFields.add("LtRtCenterMixLevel");
    openapiFields.add("LtRtSurroundMixLevel");
    openapiFields.add("MetadataControl");
    openapiFields.add("PassthroughControl");
    openapiFields.add("PhaseControl");
    openapiFields.add("StereoDownmix");
    openapiFields.add("SurroundExMode");
    openapiFields.add("SurroundMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioCodecSettingsEac3Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioCodecSettingsEac3Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioCodecSettingsEac3Settings is not found in the empty JSON string", AudioCodecSettingsEac3Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioCodecSettingsEac3Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioCodecSettingsEac3Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AttenuationControl`
      if (jsonObj.get("AttenuationControl") != null && !jsonObj.get("AttenuationControl").isJsonNull()) {
        Eac3AttenuationControl.validateJsonElement(jsonObj.get("AttenuationControl"));
      }
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `BitstreamMode`
      if (jsonObj.get("BitstreamMode") != null && !jsonObj.get("BitstreamMode").isJsonNull()) {
        Eac3BitstreamMode.validateJsonElement(jsonObj.get("BitstreamMode"));
      }
      // validate the optional field `CodingMode`
      if (jsonObj.get("CodingMode") != null && !jsonObj.get("CodingMode").isJsonNull()) {
        Eac3CodingMode.validateJsonElement(jsonObj.get("CodingMode"));
      }
      // validate the optional field `DcFilter`
      if (jsonObj.get("DcFilter") != null && !jsonObj.get("DcFilter").isJsonNull()) {
        Eac3DcFilter.validateJsonElement(jsonObj.get("DcFilter"));
      }
      // validate the optional field `Dialnorm`
      if (jsonObj.get("Dialnorm") != null && !jsonObj.get("Dialnorm").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Dialnorm"));
      }
      // validate the optional field `DrcLine`
      if (jsonObj.get("DrcLine") != null && !jsonObj.get("DrcLine").isJsonNull()) {
        Eac3DrcLine.validateJsonElement(jsonObj.get("DrcLine"));
      }
      // validate the optional field `DrcRf`
      if (jsonObj.get("DrcRf") != null && !jsonObj.get("DrcRf").isJsonNull()) {
        Eac3DrcRf.validateJsonElement(jsonObj.get("DrcRf"));
      }
      // validate the optional field `LfeControl`
      if (jsonObj.get("LfeControl") != null && !jsonObj.get("LfeControl").isJsonNull()) {
        Eac3LfeControl.validateJsonElement(jsonObj.get("LfeControl"));
      }
      // validate the optional field `LfeFilter`
      if (jsonObj.get("LfeFilter") != null && !jsonObj.get("LfeFilter").isJsonNull()) {
        Eac3LfeFilter.validateJsonElement(jsonObj.get("LfeFilter"));
      }
      // validate the optional field `LoRoCenterMixLevel`
      if (jsonObj.get("LoRoCenterMixLevel") != null && !jsonObj.get("LoRoCenterMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LoRoCenterMixLevel"));
      }
      // validate the optional field `LoRoSurroundMixLevel`
      if (jsonObj.get("LoRoSurroundMixLevel") != null && !jsonObj.get("LoRoSurroundMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LoRoSurroundMixLevel"));
      }
      // validate the optional field `LtRtCenterMixLevel`
      if (jsonObj.get("LtRtCenterMixLevel") != null && !jsonObj.get("LtRtCenterMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LtRtCenterMixLevel"));
      }
      // validate the optional field `LtRtSurroundMixLevel`
      if (jsonObj.get("LtRtSurroundMixLevel") != null && !jsonObj.get("LtRtSurroundMixLevel").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LtRtSurroundMixLevel"));
      }
      // validate the optional field `MetadataControl`
      if (jsonObj.get("MetadataControl") != null && !jsonObj.get("MetadataControl").isJsonNull()) {
        Eac3MetadataControl.validateJsonElement(jsonObj.get("MetadataControl"));
      }
      // validate the optional field `PassthroughControl`
      if (jsonObj.get("PassthroughControl") != null && !jsonObj.get("PassthroughControl").isJsonNull()) {
        Eac3PassthroughControl.validateJsonElement(jsonObj.get("PassthroughControl"));
      }
      // validate the optional field `PhaseControl`
      if (jsonObj.get("PhaseControl") != null && !jsonObj.get("PhaseControl").isJsonNull()) {
        Eac3PhaseControl.validateJsonElement(jsonObj.get("PhaseControl"));
      }
      // validate the optional field `StereoDownmix`
      if (jsonObj.get("StereoDownmix") != null && !jsonObj.get("StereoDownmix").isJsonNull()) {
        Eac3StereoDownmix.validateJsonElement(jsonObj.get("StereoDownmix"));
      }
      // validate the optional field `SurroundExMode`
      if (jsonObj.get("SurroundExMode") != null && !jsonObj.get("SurroundExMode").isJsonNull()) {
        Eac3SurroundExMode.validateJsonElement(jsonObj.get("SurroundExMode"));
      }
      // validate the optional field `SurroundMode`
      if (jsonObj.get("SurroundMode") != null && !jsonObj.get("SurroundMode").isJsonNull()) {
        Eac3SurroundMode.validateJsonElement(jsonObj.get("SurroundMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioCodecSettingsEac3Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioCodecSettingsEac3Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioCodecSettingsEac3Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioCodecSettingsEac3Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioCodecSettingsEac3Settings>() {
           @Override
           public void write(JsonWriter out, AudioCodecSettingsEac3Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioCodecSettingsEac3Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioCodecSettingsEac3Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioCodecSettingsEac3Settings
   * @throws IOException if the JSON string is invalid with respect to AudioCodecSettingsEac3Settings
   */
  public static AudioCodecSettingsEac3Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioCodecSettingsEac3Settings.class);
  }

  /**
   * Convert an instance of AudioCodecSettingsEac3Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

