/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * H265 Level
 */
@JsonAdapter(H265Level.Adapter.class)
public enum H265Level {
  
  _1("H265_LEVEL_1"),
  
  _2("H265_LEVEL_2"),
  
  _2_1("H265_LEVEL_2_1"),
  
  _3("H265_LEVEL_3"),
  
  _3_1("H265_LEVEL_3_1"),
  
  _4("H265_LEVEL_4"),
  
  _4_1("H265_LEVEL_4_1"),
  
  _5("H265_LEVEL_5"),
  
  _5_1("H265_LEVEL_5_1"),
  
  _5_2("H265_LEVEL_5_2"),
  
  _6("H265_LEVEL_6"),
  
  _6_1("H265_LEVEL_6_1"),
  
  _6_2("H265_LEVEL_6_2"),
  
  AUTO("H265_LEVEL_AUTO");

  private String value;

  H265Level(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static H265Level fromValue(String value) {
    for (H265Level b : H265Level.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<H265Level> {
    @Override
    public void write(final JsonWriter jsonWriter, final H265Level enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public H265Level read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return H265Level.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    H265Level.fromValue(value);
  }
}

