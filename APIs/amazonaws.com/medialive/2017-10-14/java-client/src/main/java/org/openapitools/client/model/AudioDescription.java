/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AudioDescriptionAudioNormalizationSettings;
import org.openapitools.client.model.AudioDescriptionAudioTypeControl;
import org.openapitools.client.model.AudioDescriptionAudioWatermarkingSettings;
import org.openapitools.client.model.AudioDescriptionCodecSettings;
import org.openapitools.client.model.AudioDescriptionLanguageCodeControl;
import org.openapitools.client.model.AudioDescriptionRemixSettings;
import org.openapitools.client.model.AudioType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Audio Description
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioDescription {
  public static final String SERIALIZED_NAME_AUDIO_NORMALIZATION_SETTINGS = "AudioNormalizationSettings";
  @SerializedName(SERIALIZED_NAME_AUDIO_NORMALIZATION_SETTINGS)
  private AudioDescriptionAudioNormalizationSettings audioNormalizationSettings;

  public static final String SERIALIZED_NAME_AUDIO_SELECTOR_NAME = "AudioSelectorName";
  @SerializedName(SERIALIZED_NAME_AUDIO_SELECTOR_NAME)
  private String audioSelectorName;

  public static final String SERIALIZED_NAME_AUDIO_TYPE = "AudioType";
  @SerializedName(SERIALIZED_NAME_AUDIO_TYPE)
  private AudioType audioType;

  public static final String SERIALIZED_NAME_AUDIO_TYPE_CONTROL = "AudioTypeControl";
  @SerializedName(SERIALIZED_NAME_AUDIO_TYPE_CONTROL)
  private AudioDescriptionAudioTypeControl audioTypeControl;

  public static final String SERIALIZED_NAME_AUDIO_WATERMARKING_SETTINGS = "AudioWatermarkingSettings";
  @SerializedName(SERIALIZED_NAME_AUDIO_WATERMARKING_SETTINGS)
  private AudioDescriptionAudioWatermarkingSettings audioWatermarkingSettings;

  public static final String SERIALIZED_NAME_CODEC_SETTINGS = "CodecSettings";
  @SerializedName(SERIALIZED_NAME_CODEC_SETTINGS)
  private AudioDescriptionCodecSettings codecSettings;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE_CONTROL = "LanguageCodeControl";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE_CONTROL)
  private AudioDescriptionLanguageCodeControl languageCodeControl;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REMIX_SETTINGS = "RemixSettings";
  @SerializedName(SERIALIZED_NAME_REMIX_SETTINGS)
  private AudioDescriptionRemixSettings remixSettings;

  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public AudioDescription() {
  }

  public AudioDescription audioNormalizationSettings(AudioDescriptionAudioNormalizationSettings audioNormalizationSettings) {
    this.audioNormalizationSettings = audioNormalizationSettings;
    return this;
  }

  /**
   * Get audioNormalizationSettings
   * @return audioNormalizationSettings
   */
  @javax.annotation.Nullable
  public AudioDescriptionAudioNormalizationSettings getAudioNormalizationSettings() {
    return audioNormalizationSettings;
  }

  public void setAudioNormalizationSettings(AudioDescriptionAudioNormalizationSettings audioNormalizationSettings) {
    this.audioNormalizationSettings = audioNormalizationSettings;
  }


  public AudioDescription audioSelectorName(String audioSelectorName) {
    this.audioSelectorName = audioSelectorName;
    return this;
  }

  /**
   * Get audioSelectorName
   * @return audioSelectorName
   */
  @javax.annotation.Nonnull
  public String getAudioSelectorName() {
    return audioSelectorName;
  }

  public void setAudioSelectorName(String audioSelectorName) {
    this.audioSelectorName = audioSelectorName;
  }


  public AudioDescription audioType(AudioType audioType) {
    this.audioType = audioType;
    return this;
  }

  /**
   * Get audioType
   * @return audioType
   */
  @javax.annotation.Nullable
  public AudioType getAudioType() {
    return audioType;
  }

  public void setAudioType(AudioType audioType) {
    this.audioType = audioType;
  }


  public AudioDescription audioTypeControl(AudioDescriptionAudioTypeControl audioTypeControl) {
    this.audioTypeControl = audioTypeControl;
    return this;
  }

  /**
   * Get audioTypeControl
   * @return audioTypeControl
   */
  @javax.annotation.Nullable
  public AudioDescriptionAudioTypeControl getAudioTypeControl() {
    return audioTypeControl;
  }

  public void setAudioTypeControl(AudioDescriptionAudioTypeControl audioTypeControl) {
    this.audioTypeControl = audioTypeControl;
  }


  public AudioDescription audioWatermarkingSettings(AudioDescriptionAudioWatermarkingSettings audioWatermarkingSettings) {
    this.audioWatermarkingSettings = audioWatermarkingSettings;
    return this;
  }

  /**
   * Get audioWatermarkingSettings
   * @return audioWatermarkingSettings
   */
  @javax.annotation.Nullable
  public AudioDescriptionAudioWatermarkingSettings getAudioWatermarkingSettings() {
    return audioWatermarkingSettings;
  }

  public void setAudioWatermarkingSettings(AudioDescriptionAudioWatermarkingSettings audioWatermarkingSettings) {
    this.audioWatermarkingSettings = audioWatermarkingSettings;
  }


  public AudioDescription codecSettings(AudioDescriptionCodecSettings codecSettings) {
    this.codecSettings = codecSettings;
    return this;
  }

  /**
   * Get codecSettings
   * @return codecSettings
   */
  @javax.annotation.Nullable
  public AudioDescriptionCodecSettings getCodecSettings() {
    return codecSettings;
  }

  public void setCodecSettings(AudioDescriptionCodecSettings codecSettings) {
    this.codecSettings = codecSettings;
  }


  public AudioDescription languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public AudioDescription languageCodeControl(AudioDescriptionLanguageCodeControl languageCodeControl) {
    this.languageCodeControl = languageCodeControl;
    return this;
  }

  /**
   * Get languageCodeControl
   * @return languageCodeControl
   */
  @javax.annotation.Nullable
  public AudioDescriptionLanguageCodeControl getLanguageCodeControl() {
    return languageCodeControl;
  }

  public void setLanguageCodeControl(AudioDescriptionLanguageCodeControl languageCodeControl) {
    this.languageCodeControl = languageCodeControl;
  }


  public AudioDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AudioDescription remixSettings(AudioDescriptionRemixSettings remixSettings) {
    this.remixSettings = remixSettings;
    return this;
  }

  /**
   * Get remixSettings
   * @return remixSettings
   */
  @javax.annotation.Nullable
  public AudioDescriptionRemixSettings getRemixSettings() {
    return remixSettings;
  }

  public void setRemixSettings(AudioDescriptionRemixSettings remixSettings) {
    this.remixSettings = remixSettings;
  }


  public AudioDescription streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Get streamName
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioDescription audioDescription = (AudioDescription) o;
    return Objects.equals(this.audioNormalizationSettings, audioDescription.audioNormalizationSettings) &&
        Objects.equals(this.audioSelectorName, audioDescription.audioSelectorName) &&
        Objects.equals(this.audioType, audioDescription.audioType) &&
        Objects.equals(this.audioTypeControl, audioDescription.audioTypeControl) &&
        Objects.equals(this.audioWatermarkingSettings, audioDescription.audioWatermarkingSettings) &&
        Objects.equals(this.codecSettings, audioDescription.codecSettings) &&
        Objects.equals(this.languageCode, audioDescription.languageCode) &&
        Objects.equals(this.languageCodeControl, audioDescription.languageCodeControl) &&
        Objects.equals(this.name, audioDescription.name) &&
        Objects.equals(this.remixSettings, audioDescription.remixSettings) &&
        Objects.equals(this.streamName, audioDescription.streamName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioNormalizationSettings, audioSelectorName, audioType, audioTypeControl, audioWatermarkingSettings, codecSettings, languageCode, languageCodeControl, name, remixSettings, streamName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioDescription {\n");
    sb.append("    audioNormalizationSettings: ").append(toIndentedString(audioNormalizationSettings)).append("\n");
    sb.append("    audioSelectorName: ").append(toIndentedString(audioSelectorName)).append("\n");
    sb.append("    audioType: ").append(toIndentedString(audioType)).append("\n");
    sb.append("    audioTypeControl: ").append(toIndentedString(audioTypeControl)).append("\n");
    sb.append("    audioWatermarkingSettings: ").append(toIndentedString(audioWatermarkingSettings)).append("\n");
    sb.append("    codecSettings: ").append(toIndentedString(codecSettings)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    languageCodeControl: ").append(toIndentedString(languageCodeControl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    remixSettings: ").append(toIndentedString(remixSettings)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioNormalizationSettings");
    openapiFields.add("AudioSelectorName");
    openapiFields.add("AudioType");
    openapiFields.add("AudioTypeControl");
    openapiFields.add("AudioWatermarkingSettings");
    openapiFields.add("CodecSettings");
    openapiFields.add("LanguageCode");
    openapiFields.add("LanguageCodeControl");
    openapiFields.add("Name");
    openapiFields.add("RemixSettings");
    openapiFields.add("StreamName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AudioSelectorName");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioDescription is not found in the empty JSON string", AudioDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AudioDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioNormalizationSettings`
      if (jsonObj.get("AudioNormalizationSettings") != null && !jsonObj.get("AudioNormalizationSettings").isJsonNull()) {
        AudioDescriptionAudioNormalizationSettings.validateJsonElement(jsonObj.get("AudioNormalizationSettings"));
      }
      // validate the required field `AudioSelectorName`
      String.validateJsonElement(jsonObj.get("AudioSelectorName"));
      // validate the optional field `AudioType`
      if (jsonObj.get("AudioType") != null && !jsonObj.get("AudioType").isJsonNull()) {
        AudioType.validateJsonElement(jsonObj.get("AudioType"));
      }
      // validate the optional field `AudioTypeControl`
      if (jsonObj.get("AudioTypeControl") != null && !jsonObj.get("AudioTypeControl").isJsonNull()) {
        AudioDescriptionAudioTypeControl.validateJsonElement(jsonObj.get("AudioTypeControl"));
      }
      // validate the optional field `AudioWatermarkingSettings`
      if (jsonObj.get("AudioWatermarkingSettings") != null && !jsonObj.get("AudioWatermarkingSettings").isJsonNull()) {
        AudioDescriptionAudioWatermarkingSettings.validateJsonElement(jsonObj.get("AudioWatermarkingSettings"));
      }
      // validate the optional field `CodecSettings`
      if (jsonObj.get("CodecSettings") != null && !jsonObj.get("CodecSettings").isJsonNull()) {
        AudioDescriptionCodecSettings.validateJsonElement(jsonObj.get("CodecSettings"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `LanguageCodeControl`
      if (jsonObj.get("LanguageCodeControl") != null && !jsonObj.get("LanguageCodeControl").isJsonNull()) {
        AudioDescriptionLanguageCodeControl.validateJsonElement(jsonObj.get("LanguageCodeControl"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `RemixSettings`
      if (jsonObj.get("RemixSettings") != null && !jsonObj.get("RemixSettings").isJsonNull()) {
        AudioDescriptionRemixSettings.validateJsonElement(jsonObj.get("RemixSettings"));
      }
      // validate the optional field `StreamName`
      if (jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioDescription>() {
           @Override
           public void write(JsonWriter out, AudioDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioDescription
   * @throws IOException if the JSON string is invalid with respect to AudioDescription
   */
  public static AudioDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioDescription.class);
  }

  /**
   * Convert an instance of AudioDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

