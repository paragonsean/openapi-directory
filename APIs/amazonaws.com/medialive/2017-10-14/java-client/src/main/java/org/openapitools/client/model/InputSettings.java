/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputDeblockFilter;
import org.openapitools.client.model.InputDenoiseFilter;
import org.openapitools.client.model.InputFilter;
import org.openapitools.client.model.InputSettingsNetworkInputSettings;
import org.openapitools.client.model.InputSettingsVideoSelector;
import org.openapitools.client.model.InputSourceEndBehavior;
import org.openapitools.client.model.Smpte2038DataPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Live Event input parameters. There can be multiple inputs in a single Live Event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputSettings {
  public static final String SERIALIZED_NAME_AUDIO_SELECTORS = "AudioSelectors";
  @SerializedName(SERIALIZED_NAME_AUDIO_SELECTORS)
  private List audioSelectors;

  public static final String SERIALIZED_NAME_CAPTION_SELECTORS = "CaptionSelectors";
  @SerializedName(SERIALIZED_NAME_CAPTION_SELECTORS)
  private List captionSelectors;

  public static final String SERIALIZED_NAME_DEBLOCK_FILTER = "DeblockFilter";
  @SerializedName(SERIALIZED_NAME_DEBLOCK_FILTER)
  private InputDeblockFilter deblockFilter;

  public static final String SERIALIZED_NAME_DENOISE_FILTER = "DenoiseFilter";
  @SerializedName(SERIALIZED_NAME_DENOISE_FILTER)
  private InputDenoiseFilter denoiseFilter;

  public static final String SERIALIZED_NAME_FILTER_STRENGTH = "FilterStrength";
  @SerializedName(SERIALIZED_NAME_FILTER_STRENGTH)
  private Integer filterStrength;

  public static final String SERIALIZED_NAME_INPUT_FILTER = "InputFilter";
  @SerializedName(SERIALIZED_NAME_INPUT_FILTER)
  private InputFilter inputFilter;

  public static final String SERIALIZED_NAME_NETWORK_INPUT_SETTINGS = "NetworkInputSettings";
  @SerializedName(SERIALIZED_NAME_NETWORK_INPUT_SETTINGS)
  private InputSettingsNetworkInputSettings networkInputSettings;

  public static final String SERIALIZED_NAME_SCTE35_PID = "Scte35Pid";
  @SerializedName(SERIALIZED_NAME_SCTE35_PID)
  private Integer scte35Pid;

  public static final String SERIALIZED_NAME_SMPTE2038_DATA_PREFERENCE = "Smpte2038DataPreference";
  @SerializedName(SERIALIZED_NAME_SMPTE2038_DATA_PREFERENCE)
  private Smpte2038DataPreference smpte2038DataPreference;

  public static final String SERIALIZED_NAME_SOURCE_END_BEHAVIOR = "SourceEndBehavior";
  @SerializedName(SERIALIZED_NAME_SOURCE_END_BEHAVIOR)
  private InputSourceEndBehavior sourceEndBehavior;

  public static final String SERIALIZED_NAME_VIDEO_SELECTOR = "VideoSelector";
  @SerializedName(SERIALIZED_NAME_VIDEO_SELECTOR)
  private InputSettingsVideoSelector videoSelector;

  public InputSettings() {
  }

  public InputSettings audioSelectors(List audioSelectors) {
    this.audioSelectors = audioSelectors;
    return this;
  }

  /**
   * Get audioSelectors
   * @return audioSelectors
   */
  @javax.annotation.Nullable
  public List getAudioSelectors() {
    return audioSelectors;
  }

  public void setAudioSelectors(List audioSelectors) {
    this.audioSelectors = audioSelectors;
  }


  public InputSettings captionSelectors(List captionSelectors) {
    this.captionSelectors = captionSelectors;
    return this;
  }

  /**
   * Get captionSelectors
   * @return captionSelectors
   */
  @javax.annotation.Nullable
  public List getCaptionSelectors() {
    return captionSelectors;
  }

  public void setCaptionSelectors(List captionSelectors) {
    this.captionSelectors = captionSelectors;
  }


  public InputSettings deblockFilter(InputDeblockFilter deblockFilter) {
    this.deblockFilter = deblockFilter;
    return this;
  }

  /**
   * Get deblockFilter
   * @return deblockFilter
   */
  @javax.annotation.Nullable
  public InputDeblockFilter getDeblockFilter() {
    return deblockFilter;
  }

  public void setDeblockFilter(InputDeblockFilter deblockFilter) {
    this.deblockFilter = deblockFilter;
  }


  public InputSettings denoiseFilter(InputDenoiseFilter denoiseFilter) {
    this.denoiseFilter = denoiseFilter;
    return this;
  }

  /**
   * Get denoiseFilter
   * @return denoiseFilter
   */
  @javax.annotation.Nullable
  public InputDenoiseFilter getDenoiseFilter() {
    return denoiseFilter;
  }

  public void setDenoiseFilter(InputDenoiseFilter denoiseFilter) {
    this.denoiseFilter = denoiseFilter;
  }


  public InputSettings filterStrength(Integer filterStrength) {
    this.filterStrength = filterStrength;
    return this;
  }

  /**
   * Get filterStrength
   * @return filterStrength
   */
  @javax.annotation.Nullable
  public Integer getFilterStrength() {
    return filterStrength;
  }

  public void setFilterStrength(Integer filterStrength) {
    this.filterStrength = filterStrength;
  }


  public InputSettings inputFilter(InputFilter inputFilter) {
    this.inputFilter = inputFilter;
    return this;
  }

  /**
   * Get inputFilter
   * @return inputFilter
   */
  @javax.annotation.Nullable
  public InputFilter getInputFilter() {
    return inputFilter;
  }

  public void setInputFilter(InputFilter inputFilter) {
    this.inputFilter = inputFilter;
  }


  public InputSettings networkInputSettings(InputSettingsNetworkInputSettings networkInputSettings) {
    this.networkInputSettings = networkInputSettings;
    return this;
  }

  /**
   * Get networkInputSettings
   * @return networkInputSettings
   */
  @javax.annotation.Nullable
  public InputSettingsNetworkInputSettings getNetworkInputSettings() {
    return networkInputSettings;
  }

  public void setNetworkInputSettings(InputSettingsNetworkInputSettings networkInputSettings) {
    this.networkInputSettings = networkInputSettings;
  }


  public InputSettings scte35Pid(Integer scte35Pid) {
    this.scte35Pid = scte35Pid;
    return this;
  }

  /**
   * Get scte35Pid
   * @return scte35Pid
   */
  @javax.annotation.Nullable
  public Integer getScte35Pid() {
    return scte35Pid;
  }

  public void setScte35Pid(Integer scte35Pid) {
    this.scte35Pid = scte35Pid;
  }


  public InputSettings smpte2038DataPreference(Smpte2038DataPreference smpte2038DataPreference) {
    this.smpte2038DataPreference = smpte2038DataPreference;
    return this;
  }

  /**
   * Get smpte2038DataPreference
   * @return smpte2038DataPreference
   */
  @javax.annotation.Nullable
  public Smpte2038DataPreference getSmpte2038DataPreference() {
    return smpte2038DataPreference;
  }

  public void setSmpte2038DataPreference(Smpte2038DataPreference smpte2038DataPreference) {
    this.smpte2038DataPreference = smpte2038DataPreference;
  }


  public InputSettings sourceEndBehavior(InputSourceEndBehavior sourceEndBehavior) {
    this.sourceEndBehavior = sourceEndBehavior;
    return this;
  }

  /**
   * Get sourceEndBehavior
   * @return sourceEndBehavior
   */
  @javax.annotation.Nullable
  public InputSourceEndBehavior getSourceEndBehavior() {
    return sourceEndBehavior;
  }

  public void setSourceEndBehavior(InputSourceEndBehavior sourceEndBehavior) {
    this.sourceEndBehavior = sourceEndBehavior;
  }


  public InputSettings videoSelector(InputSettingsVideoSelector videoSelector) {
    this.videoSelector = videoSelector;
    return this;
  }

  /**
   * Get videoSelector
   * @return videoSelector
   */
  @javax.annotation.Nullable
  public InputSettingsVideoSelector getVideoSelector() {
    return videoSelector;
  }

  public void setVideoSelector(InputSettingsVideoSelector videoSelector) {
    this.videoSelector = videoSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputSettings inputSettings = (InputSettings) o;
    return Objects.equals(this.audioSelectors, inputSettings.audioSelectors) &&
        Objects.equals(this.captionSelectors, inputSettings.captionSelectors) &&
        Objects.equals(this.deblockFilter, inputSettings.deblockFilter) &&
        Objects.equals(this.denoiseFilter, inputSettings.denoiseFilter) &&
        Objects.equals(this.filterStrength, inputSettings.filterStrength) &&
        Objects.equals(this.inputFilter, inputSettings.inputFilter) &&
        Objects.equals(this.networkInputSettings, inputSettings.networkInputSettings) &&
        Objects.equals(this.scte35Pid, inputSettings.scte35Pid) &&
        Objects.equals(this.smpte2038DataPreference, inputSettings.smpte2038DataPreference) &&
        Objects.equals(this.sourceEndBehavior, inputSettings.sourceEndBehavior) &&
        Objects.equals(this.videoSelector, inputSettings.videoSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioSelectors, captionSelectors, deblockFilter, denoiseFilter, filterStrength, inputFilter, networkInputSettings, scte35Pid, smpte2038DataPreference, sourceEndBehavior, videoSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputSettings {\n");
    sb.append("    audioSelectors: ").append(toIndentedString(audioSelectors)).append("\n");
    sb.append("    captionSelectors: ").append(toIndentedString(captionSelectors)).append("\n");
    sb.append("    deblockFilter: ").append(toIndentedString(deblockFilter)).append("\n");
    sb.append("    denoiseFilter: ").append(toIndentedString(denoiseFilter)).append("\n");
    sb.append("    filterStrength: ").append(toIndentedString(filterStrength)).append("\n");
    sb.append("    inputFilter: ").append(toIndentedString(inputFilter)).append("\n");
    sb.append("    networkInputSettings: ").append(toIndentedString(networkInputSettings)).append("\n");
    sb.append("    scte35Pid: ").append(toIndentedString(scte35Pid)).append("\n");
    sb.append("    smpte2038DataPreference: ").append(toIndentedString(smpte2038DataPreference)).append("\n");
    sb.append("    sourceEndBehavior: ").append(toIndentedString(sourceEndBehavior)).append("\n");
    sb.append("    videoSelector: ").append(toIndentedString(videoSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AudioSelectors");
    openapiFields.add("CaptionSelectors");
    openapiFields.add("DeblockFilter");
    openapiFields.add("DenoiseFilter");
    openapiFields.add("FilterStrength");
    openapiFields.add("InputFilter");
    openapiFields.add("NetworkInputSettings");
    openapiFields.add("Scte35Pid");
    openapiFields.add("Smpte2038DataPreference");
    openapiFields.add("SourceEndBehavior");
    openapiFields.add("VideoSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputSettings is not found in the empty JSON string", InputSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AudioSelectors`
      if (jsonObj.get("AudioSelectors") != null && !jsonObj.get("AudioSelectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AudioSelectors"));
      }
      // validate the optional field `CaptionSelectors`
      if (jsonObj.get("CaptionSelectors") != null && !jsonObj.get("CaptionSelectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CaptionSelectors"));
      }
      // validate the optional field `DeblockFilter`
      if (jsonObj.get("DeblockFilter") != null && !jsonObj.get("DeblockFilter").isJsonNull()) {
        InputDeblockFilter.validateJsonElement(jsonObj.get("DeblockFilter"));
      }
      // validate the optional field `DenoiseFilter`
      if (jsonObj.get("DenoiseFilter") != null && !jsonObj.get("DenoiseFilter").isJsonNull()) {
        InputDenoiseFilter.validateJsonElement(jsonObj.get("DenoiseFilter"));
      }
      // validate the optional field `FilterStrength`
      if (jsonObj.get("FilterStrength") != null && !jsonObj.get("FilterStrength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FilterStrength"));
      }
      // validate the optional field `InputFilter`
      if (jsonObj.get("InputFilter") != null && !jsonObj.get("InputFilter").isJsonNull()) {
        InputFilter.validateJsonElement(jsonObj.get("InputFilter"));
      }
      // validate the optional field `NetworkInputSettings`
      if (jsonObj.get("NetworkInputSettings") != null && !jsonObj.get("NetworkInputSettings").isJsonNull()) {
        InputSettingsNetworkInputSettings.validateJsonElement(jsonObj.get("NetworkInputSettings"));
      }
      // validate the optional field `Scte35Pid`
      if (jsonObj.get("Scte35Pid") != null && !jsonObj.get("Scte35Pid").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Scte35Pid"));
      }
      // validate the optional field `Smpte2038DataPreference`
      if (jsonObj.get("Smpte2038DataPreference") != null && !jsonObj.get("Smpte2038DataPreference").isJsonNull()) {
        Smpte2038DataPreference.validateJsonElement(jsonObj.get("Smpte2038DataPreference"));
      }
      // validate the optional field `SourceEndBehavior`
      if (jsonObj.get("SourceEndBehavior") != null && !jsonObj.get("SourceEndBehavior").isJsonNull()) {
        InputSourceEndBehavior.validateJsonElement(jsonObj.get("SourceEndBehavior"));
      }
      // validate the optional field `VideoSelector`
      if (jsonObj.get("VideoSelector") != null && !jsonObj.get("VideoSelector").isJsonNull()) {
        InputSettingsVideoSelector.validateJsonElement(jsonObj.get("VideoSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<InputSettings>() {
           @Override
           public void write(JsonWriter out, InputSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputSettings
   * @throws IOException if the JSON string is invalid with respect to InputSettings
   */
  public static InputSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputSettings.class);
  }

  /**
   * Convert an instance of InputSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

