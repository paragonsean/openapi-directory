/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AfdSignaling;
import org.openapitools.client.model.FixedAfd;
import org.openapitools.client.model.FrameCaptureSettingsTimecodeBurninSettings;
import org.openapitools.client.model.H264AdaptiveQuantization;
import org.openapitools.client.model.H264ColorMetadata;
import org.openapitools.client.model.H264EntropyEncoding;
import org.openapitools.client.model.H264FlickerAq;
import org.openapitools.client.model.H264ForceFieldPictures;
import org.openapitools.client.model.H264FramerateControl;
import org.openapitools.client.model.H264GopBReference;
import org.openapitools.client.model.H264GopSizeUnits;
import org.openapitools.client.model.H264Level;
import org.openapitools.client.model.H264LookAheadRateControl;
import org.openapitools.client.model.H264ParControl;
import org.openapitools.client.model.H264Profile;
import org.openapitools.client.model.H264QualityLevel;
import org.openapitools.client.model.H264RateControlMode;
import org.openapitools.client.model.H264ScanType;
import org.openapitools.client.model.H264SceneChangeDetect;
import org.openapitools.client.model.H264SettingsColorSpaceSettings;
import org.openapitools.client.model.H264SettingsFilterSettings;
import org.openapitools.client.model.H264SpatialAq;
import org.openapitools.client.model.H264SubGopLength;
import org.openapitools.client.model.H264Syntax;
import org.openapitools.client.model.H264TemporalAq;
import org.openapitools.client.model.H264TimecodeInsertionBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoCodecSettingsH264Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoCodecSettingsH264Settings {
  public static final String SERIALIZED_NAME_ADAPTIVE_QUANTIZATION = "AdaptiveQuantization";
  @SerializedName(SERIALIZED_NAME_ADAPTIVE_QUANTIZATION)
  private H264AdaptiveQuantization adaptiveQuantization;

  public static final String SERIALIZED_NAME_AFD_SIGNALING = "AfdSignaling";
  @SerializedName(SERIALIZED_NAME_AFD_SIGNALING)
  private AfdSignaling afdSignaling;

  public static final String SERIALIZED_NAME_BITRATE = "Bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private Integer bitrate;

  public static final String SERIALIZED_NAME_BUF_FILL_PCT = "BufFillPct";
  @SerializedName(SERIALIZED_NAME_BUF_FILL_PCT)
  private Integer bufFillPct;

  public static final String SERIALIZED_NAME_BUF_SIZE = "BufSize";
  @SerializedName(SERIALIZED_NAME_BUF_SIZE)
  private Integer bufSize;

  public static final String SERIALIZED_NAME_COLOR_METADATA = "ColorMetadata";
  @SerializedName(SERIALIZED_NAME_COLOR_METADATA)
  private H264ColorMetadata colorMetadata;

  public static final String SERIALIZED_NAME_COLOR_SPACE_SETTINGS = "ColorSpaceSettings";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE_SETTINGS)
  private H264SettingsColorSpaceSettings colorSpaceSettings;

  public static final String SERIALIZED_NAME_ENTROPY_ENCODING = "EntropyEncoding";
  @SerializedName(SERIALIZED_NAME_ENTROPY_ENCODING)
  private H264EntropyEncoding entropyEncoding;

  public static final String SERIALIZED_NAME_FILTER_SETTINGS = "FilterSettings";
  @SerializedName(SERIALIZED_NAME_FILTER_SETTINGS)
  private H264SettingsFilterSettings filterSettings;

  public static final String SERIALIZED_NAME_FIXED_AFD = "FixedAfd";
  @SerializedName(SERIALIZED_NAME_FIXED_AFD)
  private FixedAfd fixedAfd;

  public static final String SERIALIZED_NAME_FLICKER_AQ = "FlickerAq";
  @SerializedName(SERIALIZED_NAME_FLICKER_AQ)
  private H264FlickerAq flickerAq;

  public static final String SERIALIZED_NAME_FORCE_FIELD_PICTURES = "ForceFieldPictures";
  @SerializedName(SERIALIZED_NAME_FORCE_FIELD_PICTURES)
  private H264ForceFieldPictures forceFieldPictures;

  public static final String SERIALIZED_NAME_FRAMERATE_CONTROL = "FramerateControl";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_CONTROL)
  private H264FramerateControl framerateControl;

  public static final String SERIALIZED_NAME_FRAMERATE_DENOMINATOR = "FramerateDenominator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_DENOMINATOR)
  private Integer framerateDenominator;

  public static final String SERIALIZED_NAME_FRAMERATE_NUMERATOR = "FramerateNumerator";
  @SerializedName(SERIALIZED_NAME_FRAMERATE_NUMERATOR)
  private Integer framerateNumerator;

  public static final String SERIALIZED_NAME_GOP_B_REFERENCE = "GopBReference";
  @SerializedName(SERIALIZED_NAME_GOP_B_REFERENCE)
  private H264GopBReference gopBReference;

  public static final String SERIALIZED_NAME_GOP_CLOSED_CADENCE = "GopClosedCadence";
  @SerializedName(SERIALIZED_NAME_GOP_CLOSED_CADENCE)
  private Integer gopClosedCadence;

  public static final String SERIALIZED_NAME_GOP_NUM_B_FRAMES = "GopNumBFrames";
  @SerializedName(SERIALIZED_NAME_GOP_NUM_B_FRAMES)
  private Integer gopNumBFrames;

  public static final String SERIALIZED_NAME_GOP_SIZE = "GopSize";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE)
  private Double gopSize;

  public static final String SERIALIZED_NAME_GOP_SIZE_UNITS = "GopSizeUnits";
  @SerializedName(SERIALIZED_NAME_GOP_SIZE_UNITS)
  private H264GopSizeUnits gopSizeUnits;

  public static final String SERIALIZED_NAME_LEVEL = "Level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private H264Level level;

  public static final String SERIALIZED_NAME_LOOK_AHEAD_RATE_CONTROL = "LookAheadRateControl";
  @SerializedName(SERIALIZED_NAME_LOOK_AHEAD_RATE_CONTROL)
  private H264LookAheadRateControl lookAheadRateControl;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_MIN_I_INTERVAL = "MinIInterval";
  @SerializedName(SERIALIZED_NAME_MIN_I_INTERVAL)
  private Integer minIInterval;

  public static final String SERIALIZED_NAME_NUM_REF_FRAMES = "NumRefFrames";
  @SerializedName(SERIALIZED_NAME_NUM_REF_FRAMES)
  private Integer numRefFrames;

  public static final String SERIALIZED_NAME_PAR_CONTROL = "ParControl";
  @SerializedName(SERIALIZED_NAME_PAR_CONTROL)
  private H264ParControl parControl;

  public static final String SERIALIZED_NAME_PAR_DENOMINATOR = "ParDenominator";
  @SerializedName(SERIALIZED_NAME_PAR_DENOMINATOR)
  private Integer parDenominator;

  public static final String SERIALIZED_NAME_PAR_NUMERATOR = "ParNumerator";
  @SerializedName(SERIALIZED_NAME_PAR_NUMERATOR)
  private Integer parNumerator;

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private H264Profile profile;

  public static final String SERIALIZED_NAME_QUALITY_LEVEL = "QualityLevel";
  @SerializedName(SERIALIZED_NAME_QUALITY_LEVEL)
  private H264QualityLevel qualityLevel;

  public static final String SERIALIZED_NAME_QVBR_QUALITY_LEVEL = "QvbrQualityLevel";
  @SerializedName(SERIALIZED_NAME_QVBR_QUALITY_LEVEL)
  private Integer qvbrQualityLevel;

  public static final String SERIALIZED_NAME_RATE_CONTROL_MODE = "RateControlMode";
  @SerializedName(SERIALIZED_NAME_RATE_CONTROL_MODE)
  private H264RateControlMode rateControlMode;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "ScanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private H264ScanType scanType;

  public static final String SERIALIZED_NAME_SCENE_CHANGE_DETECT = "SceneChangeDetect";
  @SerializedName(SERIALIZED_NAME_SCENE_CHANGE_DETECT)
  private H264SceneChangeDetect sceneChangeDetect;

  public static final String SERIALIZED_NAME_SLICES = "Slices";
  @SerializedName(SERIALIZED_NAME_SLICES)
  private Integer slices;

  public static final String SERIALIZED_NAME_SOFTNESS = "Softness";
  @SerializedName(SERIALIZED_NAME_SOFTNESS)
  private Integer softness;

  public static final String SERIALIZED_NAME_SPATIAL_AQ = "SpatialAq";
  @SerializedName(SERIALIZED_NAME_SPATIAL_AQ)
  private H264SpatialAq spatialAq;

  public static final String SERIALIZED_NAME_SUBGOP_LENGTH = "SubgopLength";
  @SerializedName(SERIALIZED_NAME_SUBGOP_LENGTH)
  private H264SubGopLength subgopLength;

  public static final String SERIALIZED_NAME_SYNTAX = "Syntax";
  @SerializedName(SERIALIZED_NAME_SYNTAX)
  private H264Syntax syntax;

  public static final String SERIALIZED_NAME_TEMPORAL_AQ = "TemporalAq";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_AQ)
  private H264TemporalAq temporalAq;

  public static final String SERIALIZED_NAME_TIMECODE_INSERTION = "TimecodeInsertion";
  @SerializedName(SERIALIZED_NAME_TIMECODE_INSERTION)
  private H264TimecodeInsertionBehavior timecodeInsertion;

  public static final String SERIALIZED_NAME_TIMECODE_BURNIN_SETTINGS = "TimecodeBurninSettings";
  @SerializedName(SERIALIZED_NAME_TIMECODE_BURNIN_SETTINGS)
  private FrameCaptureSettingsTimecodeBurninSettings timecodeBurninSettings;

  public VideoCodecSettingsH264Settings() {
  }

  public VideoCodecSettingsH264Settings adaptiveQuantization(H264AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
    return this;
  }

  /**
   * Get adaptiveQuantization
   * @return adaptiveQuantization
   */
  @javax.annotation.Nullable
  public H264AdaptiveQuantization getAdaptiveQuantization() {
    return adaptiveQuantization;
  }

  public void setAdaptiveQuantization(H264AdaptiveQuantization adaptiveQuantization) {
    this.adaptiveQuantization = adaptiveQuantization;
  }


  public VideoCodecSettingsH264Settings afdSignaling(AfdSignaling afdSignaling) {
    this.afdSignaling = afdSignaling;
    return this;
  }

  /**
   * Get afdSignaling
   * @return afdSignaling
   */
  @javax.annotation.Nullable
  public AfdSignaling getAfdSignaling() {
    return afdSignaling;
  }

  public void setAfdSignaling(AfdSignaling afdSignaling) {
    this.afdSignaling = afdSignaling;
  }


  public VideoCodecSettingsH264Settings bitrate(Integer bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Get bitrate
   * @return bitrate
   */
  @javax.annotation.Nullable
  public Integer getBitrate() {
    return bitrate;
  }

  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public VideoCodecSettingsH264Settings bufFillPct(Integer bufFillPct) {
    this.bufFillPct = bufFillPct;
    return this;
  }

  /**
   * Get bufFillPct
   * @return bufFillPct
   */
  @javax.annotation.Nullable
  public Integer getBufFillPct() {
    return bufFillPct;
  }

  public void setBufFillPct(Integer bufFillPct) {
    this.bufFillPct = bufFillPct;
  }


  public VideoCodecSettingsH264Settings bufSize(Integer bufSize) {
    this.bufSize = bufSize;
    return this;
  }

  /**
   * Get bufSize
   * @return bufSize
   */
  @javax.annotation.Nullable
  public Integer getBufSize() {
    return bufSize;
  }

  public void setBufSize(Integer bufSize) {
    this.bufSize = bufSize;
  }


  public VideoCodecSettingsH264Settings colorMetadata(H264ColorMetadata colorMetadata) {
    this.colorMetadata = colorMetadata;
    return this;
  }

  /**
   * Get colorMetadata
   * @return colorMetadata
   */
  @javax.annotation.Nullable
  public H264ColorMetadata getColorMetadata() {
    return colorMetadata;
  }

  public void setColorMetadata(H264ColorMetadata colorMetadata) {
    this.colorMetadata = colorMetadata;
  }


  public VideoCodecSettingsH264Settings colorSpaceSettings(H264SettingsColorSpaceSettings colorSpaceSettings) {
    this.colorSpaceSettings = colorSpaceSettings;
    return this;
  }

  /**
   * Get colorSpaceSettings
   * @return colorSpaceSettings
   */
  @javax.annotation.Nullable
  public H264SettingsColorSpaceSettings getColorSpaceSettings() {
    return colorSpaceSettings;
  }

  public void setColorSpaceSettings(H264SettingsColorSpaceSettings colorSpaceSettings) {
    this.colorSpaceSettings = colorSpaceSettings;
  }


  public VideoCodecSettingsH264Settings entropyEncoding(H264EntropyEncoding entropyEncoding) {
    this.entropyEncoding = entropyEncoding;
    return this;
  }

  /**
   * Get entropyEncoding
   * @return entropyEncoding
   */
  @javax.annotation.Nullable
  public H264EntropyEncoding getEntropyEncoding() {
    return entropyEncoding;
  }

  public void setEntropyEncoding(H264EntropyEncoding entropyEncoding) {
    this.entropyEncoding = entropyEncoding;
  }


  public VideoCodecSettingsH264Settings filterSettings(H264SettingsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
    return this;
  }

  /**
   * Get filterSettings
   * @return filterSettings
   */
  @javax.annotation.Nullable
  public H264SettingsFilterSettings getFilterSettings() {
    return filterSettings;
  }

  public void setFilterSettings(H264SettingsFilterSettings filterSettings) {
    this.filterSettings = filterSettings;
  }


  public VideoCodecSettingsH264Settings fixedAfd(FixedAfd fixedAfd) {
    this.fixedAfd = fixedAfd;
    return this;
  }

  /**
   * Get fixedAfd
   * @return fixedAfd
   */
  @javax.annotation.Nullable
  public FixedAfd getFixedAfd() {
    return fixedAfd;
  }

  public void setFixedAfd(FixedAfd fixedAfd) {
    this.fixedAfd = fixedAfd;
  }


  public VideoCodecSettingsH264Settings flickerAq(H264FlickerAq flickerAq) {
    this.flickerAq = flickerAq;
    return this;
  }

  /**
   * Get flickerAq
   * @return flickerAq
   */
  @javax.annotation.Nullable
  public H264FlickerAq getFlickerAq() {
    return flickerAq;
  }

  public void setFlickerAq(H264FlickerAq flickerAq) {
    this.flickerAq = flickerAq;
  }


  public VideoCodecSettingsH264Settings forceFieldPictures(H264ForceFieldPictures forceFieldPictures) {
    this.forceFieldPictures = forceFieldPictures;
    return this;
  }

  /**
   * Get forceFieldPictures
   * @return forceFieldPictures
   */
  @javax.annotation.Nullable
  public H264ForceFieldPictures getForceFieldPictures() {
    return forceFieldPictures;
  }

  public void setForceFieldPictures(H264ForceFieldPictures forceFieldPictures) {
    this.forceFieldPictures = forceFieldPictures;
  }


  public VideoCodecSettingsH264Settings framerateControl(H264FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
    return this;
  }

  /**
   * Get framerateControl
   * @return framerateControl
   */
  @javax.annotation.Nullable
  public H264FramerateControl getFramerateControl() {
    return framerateControl;
  }

  public void setFramerateControl(H264FramerateControl framerateControl) {
    this.framerateControl = framerateControl;
  }


  public VideoCodecSettingsH264Settings framerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
    return this;
  }

  /**
   * Get framerateDenominator
   * @return framerateDenominator
   */
  @javax.annotation.Nullable
  public Integer getFramerateDenominator() {
    return framerateDenominator;
  }

  public void setFramerateDenominator(Integer framerateDenominator) {
    this.framerateDenominator = framerateDenominator;
  }


  public VideoCodecSettingsH264Settings framerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
    return this;
  }

  /**
   * Get framerateNumerator
   * @return framerateNumerator
   */
  @javax.annotation.Nullable
  public Integer getFramerateNumerator() {
    return framerateNumerator;
  }

  public void setFramerateNumerator(Integer framerateNumerator) {
    this.framerateNumerator = framerateNumerator;
  }


  public VideoCodecSettingsH264Settings gopBReference(H264GopBReference gopBReference) {
    this.gopBReference = gopBReference;
    return this;
  }

  /**
   * Get gopBReference
   * @return gopBReference
   */
  @javax.annotation.Nullable
  public H264GopBReference getGopBReference() {
    return gopBReference;
  }

  public void setGopBReference(H264GopBReference gopBReference) {
    this.gopBReference = gopBReference;
  }


  public VideoCodecSettingsH264Settings gopClosedCadence(Integer gopClosedCadence) {
    this.gopClosedCadence = gopClosedCadence;
    return this;
  }

  /**
   * Get gopClosedCadence
   * @return gopClosedCadence
   */
  @javax.annotation.Nullable
  public Integer getGopClosedCadence() {
    return gopClosedCadence;
  }

  public void setGopClosedCadence(Integer gopClosedCadence) {
    this.gopClosedCadence = gopClosedCadence;
  }


  public VideoCodecSettingsH264Settings gopNumBFrames(Integer gopNumBFrames) {
    this.gopNumBFrames = gopNumBFrames;
    return this;
  }

  /**
   * Get gopNumBFrames
   * @return gopNumBFrames
   */
  @javax.annotation.Nullable
  public Integer getGopNumBFrames() {
    return gopNumBFrames;
  }

  public void setGopNumBFrames(Integer gopNumBFrames) {
    this.gopNumBFrames = gopNumBFrames;
  }


  public VideoCodecSettingsH264Settings gopSize(Double gopSize) {
    this.gopSize = gopSize;
    return this;
  }

  /**
   * Get gopSize
   * @return gopSize
   */
  @javax.annotation.Nullable
  public Double getGopSize() {
    return gopSize;
  }

  public void setGopSize(Double gopSize) {
    this.gopSize = gopSize;
  }


  public VideoCodecSettingsH264Settings gopSizeUnits(H264GopSizeUnits gopSizeUnits) {
    this.gopSizeUnits = gopSizeUnits;
    return this;
  }

  /**
   * Get gopSizeUnits
   * @return gopSizeUnits
   */
  @javax.annotation.Nullable
  public H264GopSizeUnits getGopSizeUnits() {
    return gopSizeUnits;
  }

  public void setGopSizeUnits(H264GopSizeUnits gopSizeUnits) {
    this.gopSizeUnits = gopSizeUnits;
  }


  public VideoCodecSettingsH264Settings level(H264Level level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * @return level
   */
  @javax.annotation.Nullable
  public H264Level getLevel() {
    return level;
  }

  public void setLevel(H264Level level) {
    this.level = level;
  }


  public VideoCodecSettingsH264Settings lookAheadRateControl(H264LookAheadRateControl lookAheadRateControl) {
    this.lookAheadRateControl = lookAheadRateControl;
    return this;
  }

  /**
   * Get lookAheadRateControl
   * @return lookAheadRateControl
   */
  @javax.annotation.Nullable
  public H264LookAheadRateControl getLookAheadRateControl() {
    return lookAheadRateControl;
  }

  public void setLookAheadRateControl(H264LookAheadRateControl lookAheadRateControl) {
    this.lookAheadRateControl = lookAheadRateControl;
  }


  public VideoCodecSettingsH264Settings maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public VideoCodecSettingsH264Settings minIInterval(Integer minIInterval) {
    this.minIInterval = minIInterval;
    return this;
  }

  /**
   * Get minIInterval
   * @return minIInterval
   */
  @javax.annotation.Nullable
  public Integer getMinIInterval() {
    return minIInterval;
  }

  public void setMinIInterval(Integer minIInterval) {
    this.minIInterval = minIInterval;
  }


  public VideoCodecSettingsH264Settings numRefFrames(Integer numRefFrames) {
    this.numRefFrames = numRefFrames;
    return this;
  }

  /**
   * Get numRefFrames
   * @return numRefFrames
   */
  @javax.annotation.Nullable
  public Integer getNumRefFrames() {
    return numRefFrames;
  }

  public void setNumRefFrames(Integer numRefFrames) {
    this.numRefFrames = numRefFrames;
  }


  public VideoCodecSettingsH264Settings parControl(H264ParControl parControl) {
    this.parControl = parControl;
    return this;
  }

  /**
   * Get parControl
   * @return parControl
   */
  @javax.annotation.Nullable
  public H264ParControl getParControl() {
    return parControl;
  }

  public void setParControl(H264ParControl parControl) {
    this.parControl = parControl;
  }


  public VideoCodecSettingsH264Settings parDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
    return this;
  }

  /**
   * Get parDenominator
   * @return parDenominator
   */
  @javax.annotation.Nullable
  public Integer getParDenominator() {
    return parDenominator;
  }

  public void setParDenominator(Integer parDenominator) {
    this.parDenominator = parDenominator;
  }


  public VideoCodecSettingsH264Settings parNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
    return this;
  }

  /**
   * Get parNumerator
   * @return parNumerator
   */
  @javax.annotation.Nullable
  public Integer getParNumerator() {
    return parNumerator;
  }

  public void setParNumerator(Integer parNumerator) {
    this.parNumerator = parNumerator;
  }


  public VideoCodecSettingsH264Settings profile(H264Profile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public H264Profile getProfile() {
    return profile;
  }

  public void setProfile(H264Profile profile) {
    this.profile = profile;
  }


  public VideoCodecSettingsH264Settings qualityLevel(H264QualityLevel qualityLevel) {
    this.qualityLevel = qualityLevel;
    return this;
  }

  /**
   * Get qualityLevel
   * @return qualityLevel
   */
  @javax.annotation.Nullable
  public H264QualityLevel getQualityLevel() {
    return qualityLevel;
  }

  public void setQualityLevel(H264QualityLevel qualityLevel) {
    this.qualityLevel = qualityLevel;
  }


  public VideoCodecSettingsH264Settings qvbrQualityLevel(Integer qvbrQualityLevel) {
    this.qvbrQualityLevel = qvbrQualityLevel;
    return this;
  }

  /**
   * Get qvbrQualityLevel
   * @return qvbrQualityLevel
   */
  @javax.annotation.Nullable
  public Integer getQvbrQualityLevel() {
    return qvbrQualityLevel;
  }

  public void setQvbrQualityLevel(Integer qvbrQualityLevel) {
    this.qvbrQualityLevel = qvbrQualityLevel;
  }


  public VideoCodecSettingsH264Settings rateControlMode(H264RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
    return this;
  }

  /**
   * Get rateControlMode
   * @return rateControlMode
   */
  @javax.annotation.Nullable
  public H264RateControlMode getRateControlMode() {
    return rateControlMode;
  }

  public void setRateControlMode(H264RateControlMode rateControlMode) {
    this.rateControlMode = rateControlMode;
  }


  public VideoCodecSettingsH264Settings scanType(H264ScanType scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * Get scanType
   * @return scanType
   */
  @javax.annotation.Nullable
  public H264ScanType getScanType() {
    return scanType;
  }

  public void setScanType(H264ScanType scanType) {
    this.scanType = scanType;
  }


  public VideoCodecSettingsH264Settings sceneChangeDetect(H264SceneChangeDetect sceneChangeDetect) {
    this.sceneChangeDetect = sceneChangeDetect;
    return this;
  }

  /**
   * Get sceneChangeDetect
   * @return sceneChangeDetect
   */
  @javax.annotation.Nullable
  public H264SceneChangeDetect getSceneChangeDetect() {
    return sceneChangeDetect;
  }

  public void setSceneChangeDetect(H264SceneChangeDetect sceneChangeDetect) {
    this.sceneChangeDetect = sceneChangeDetect;
  }


  public VideoCodecSettingsH264Settings slices(Integer slices) {
    this.slices = slices;
    return this;
  }

  /**
   * Get slices
   * @return slices
   */
  @javax.annotation.Nullable
  public Integer getSlices() {
    return slices;
  }

  public void setSlices(Integer slices) {
    this.slices = slices;
  }


  public VideoCodecSettingsH264Settings softness(Integer softness) {
    this.softness = softness;
    return this;
  }

  /**
   * Get softness
   * @return softness
   */
  @javax.annotation.Nullable
  public Integer getSoftness() {
    return softness;
  }

  public void setSoftness(Integer softness) {
    this.softness = softness;
  }


  public VideoCodecSettingsH264Settings spatialAq(H264SpatialAq spatialAq) {
    this.spatialAq = spatialAq;
    return this;
  }

  /**
   * Get spatialAq
   * @return spatialAq
   */
  @javax.annotation.Nullable
  public H264SpatialAq getSpatialAq() {
    return spatialAq;
  }

  public void setSpatialAq(H264SpatialAq spatialAq) {
    this.spatialAq = spatialAq;
  }


  public VideoCodecSettingsH264Settings subgopLength(H264SubGopLength subgopLength) {
    this.subgopLength = subgopLength;
    return this;
  }

  /**
   * Get subgopLength
   * @return subgopLength
   */
  @javax.annotation.Nullable
  public H264SubGopLength getSubgopLength() {
    return subgopLength;
  }

  public void setSubgopLength(H264SubGopLength subgopLength) {
    this.subgopLength = subgopLength;
  }


  public VideoCodecSettingsH264Settings syntax(H264Syntax syntax) {
    this.syntax = syntax;
    return this;
  }

  /**
   * Get syntax
   * @return syntax
   */
  @javax.annotation.Nullable
  public H264Syntax getSyntax() {
    return syntax;
  }

  public void setSyntax(H264Syntax syntax) {
    this.syntax = syntax;
  }


  public VideoCodecSettingsH264Settings temporalAq(H264TemporalAq temporalAq) {
    this.temporalAq = temporalAq;
    return this;
  }

  /**
   * Get temporalAq
   * @return temporalAq
   */
  @javax.annotation.Nullable
  public H264TemporalAq getTemporalAq() {
    return temporalAq;
  }

  public void setTemporalAq(H264TemporalAq temporalAq) {
    this.temporalAq = temporalAq;
  }


  public VideoCodecSettingsH264Settings timecodeInsertion(H264TimecodeInsertionBehavior timecodeInsertion) {
    this.timecodeInsertion = timecodeInsertion;
    return this;
  }

  /**
   * Get timecodeInsertion
   * @return timecodeInsertion
   */
  @javax.annotation.Nullable
  public H264TimecodeInsertionBehavior getTimecodeInsertion() {
    return timecodeInsertion;
  }

  public void setTimecodeInsertion(H264TimecodeInsertionBehavior timecodeInsertion) {
    this.timecodeInsertion = timecodeInsertion;
  }


  public VideoCodecSettingsH264Settings timecodeBurninSettings(FrameCaptureSettingsTimecodeBurninSettings timecodeBurninSettings) {
    this.timecodeBurninSettings = timecodeBurninSettings;
    return this;
  }

  /**
   * Get timecodeBurninSettings
   * @return timecodeBurninSettings
   */
  @javax.annotation.Nullable
  public FrameCaptureSettingsTimecodeBurninSettings getTimecodeBurninSettings() {
    return timecodeBurninSettings;
  }

  public void setTimecodeBurninSettings(FrameCaptureSettingsTimecodeBurninSettings timecodeBurninSettings) {
    this.timecodeBurninSettings = timecodeBurninSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoCodecSettingsH264Settings videoCodecSettingsH264Settings = (VideoCodecSettingsH264Settings) o;
    return Objects.equals(this.adaptiveQuantization, videoCodecSettingsH264Settings.adaptiveQuantization) &&
        Objects.equals(this.afdSignaling, videoCodecSettingsH264Settings.afdSignaling) &&
        Objects.equals(this.bitrate, videoCodecSettingsH264Settings.bitrate) &&
        Objects.equals(this.bufFillPct, videoCodecSettingsH264Settings.bufFillPct) &&
        Objects.equals(this.bufSize, videoCodecSettingsH264Settings.bufSize) &&
        Objects.equals(this.colorMetadata, videoCodecSettingsH264Settings.colorMetadata) &&
        Objects.equals(this.colorSpaceSettings, videoCodecSettingsH264Settings.colorSpaceSettings) &&
        Objects.equals(this.entropyEncoding, videoCodecSettingsH264Settings.entropyEncoding) &&
        Objects.equals(this.filterSettings, videoCodecSettingsH264Settings.filterSettings) &&
        Objects.equals(this.fixedAfd, videoCodecSettingsH264Settings.fixedAfd) &&
        Objects.equals(this.flickerAq, videoCodecSettingsH264Settings.flickerAq) &&
        Objects.equals(this.forceFieldPictures, videoCodecSettingsH264Settings.forceFieldPictures) &&
        Objects.equals(this.framerateControl, videoCodecSettingsH264Settings.framerateControl) &&
        Objects.equals(this.framerateDenominator, videoCodecSettingsH264Settings.framerateDenominator) &&
        Objects.equals(this.framerateNumerator, videoCodecSettingsH264Settings.framerateNumerator) &&
        Objects.equals(this.gopBReference, videoCodecSettingsH264Settings.gopBReference) &&
        Objects.equals(this.gopClosedCadence, videoCodecSettingsH264Settings.gopClosedCadence) &&
        Objects.equals(this.gopNumBFrames, videoCodecSettingsH264Settings.gopNumBFrames) &&
        Objects.equals(this.gopSize, videoCodecSettingsH264Settings.gopSize) &&
        Objects.equals(this.gopSizeUnits, videoCodecSettingsH264Settings.gopSizeUnits) &&
        Objects.equals(this.level, videoCodecSettingsH264Settings.level) &&
        Objects.equals(this.lookAheadRateControl, videoCodecSettingsH264Settings.lookAheadRateControl) &&
        Objects.equals(this.maxBitrate, videoCodecSettingsH264Settings.maxBitrate) &&
        Objects.equals(this.minIInterval, videoCodecSettingsH264Settings.minIInterval) &&
        Objects.equals(this.numRefFrames, videoCodecSettingsH264Settings.numRefFrames) &&
        Objects.equals(this.parControl, videoCodecSettingsH264Settings.parControl) &&
        Objects.equals(this.parDenominator, videoCodecSettingsH264Settings.parDenominator) &&
        Objects.equals(this.parNumerator, videoCodecSettingsH264Settings.parNumerator) &&
        Objects.equals(this.profile, videoCodecSettingsH264Settings.profile) &&
        Objects.equals(this.qualityLevel, videoCodecSettingsH264Settings.qualityLevel) &&
        Objects.equals(this.qvbrQualityLevel, videoCodecSettingsH264Settings.qvbrQualityLevel) &&
        Objects.equals(this.rateControlMode, videoCodecSettingsH264Settings.rateControlMode) &&
        Objects.equals(this.scanType, videoCodecSettingsH264Settings.scanType) &&
        Objects.equals(this.sceneChangeDetect, videoCodecSettingsH264Settings.sceneChangeDetect) &&
        Objects.equals(this.slices, videoCodecSettingsH264Settings.slices) &&
        Objects.equals(this.softness, videoCodecSettingsH264Settings.softness) &&
        Objects.equals(this.spatialAq, videoCodecSettingsH264Settings.spatialAq) &&
        Objects.equals(this.subgopLength, videoCodecSettingsH264Settings.subgopLength) &&
        Objects.equals(this.syntax, videoCodecSettingsH264Settings.syntax) &&
        Objects.equals(this.temporalAq, videoCodecSettingsH264Settings.temporalAq) &&
        Objects.equals(this.timecodeInsertion, videoCodecSettingsH264Settings.timecodeInsertion) &&
        Objects.equals(this.timecodeBurninSettings, videoCodecSettingsH264Settings.timecodeBurninSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adaptiveQuantization, afdSignaling, bitrate, bufFillPct, bufSize, colorMetadata, colorSpaceSettings, entropyEncoding, filterSettings, fixedAfd, flickerAq, forceFieldPictures, framerateControl, framerateDenominator, framerateNumerator, gopBReference, gopClosedCadence, gopNumBFrames, gopSize, gopSizeUnits, level, lookAheadRateControl, maxBitrate, minIInterval, numRefFrames, parControl, parDenominator, parNumerator, profile, qualityLevel, qvbrQualityLevel, rateControlMode, scanType, sceneChangeDetect, slices, softness, spatialAq, subgopLength, syntax, temporalAq, timecodeInsertion, timecodeBurninSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoCodecSettingsH264Settings {\n");
    sb.append("    adaptiveQuantization: ").append(toIndentedString(adaptiveQuantization)).append("\n");
    sb.append("    afdSignaling: ").append(toIndentedString(afdSignaling)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    bufFillPct: ").append(toIndentedString(bufFillPct)).append("\n");
    sb.append("    bufSize: ").append(toIndentedString(bufSize)).append("\n");
    sb.append("    colorMetadata: ").append(toIndentedString(colorMetadata)).append("\n");
    sb.append("    colorSpaceSettings: ").append(toIndentedString(colorSpaceSettings)).append("\n");
    sb.append("    entropyEncoding: ").append(toIndentedString(entropyEncoding)).append("\n");
    sb.append("    filterSettings: ").append(toIndentedString(filterSettings)).append("\n");
    sb.append("    fixedAfd: ").append(toIndentedString(fixedAfd)).append("\n");
    sb.append("    flickerAq: ").append(toIndentedString(flickerAq)).append("\n");
    sb.append("    forceFieldPictures: ").append(toIndentedString(forceFieldPictures)).append("\n");
    sb.append("    framerateControl: ").append(toIndentedString(framerateControl)).append("\n");
    sb.append("    framerateDenominator: ").append(toIndentedString(framerateDenominator)).append("\n");
    sb.append("    framerateNumerator: ").append(toIndentedString(framerateNumerator)).append("\n");
    sb.append("    gopBReference: ").append(toIndentedString(gopBReference)).append("\n");
    sb.append("    gopClosedCadence: ").append(toIndentedString(gopClosedCadence)).append("\n");
    sb.append("    gopNumBFrames: ").append(toIndentedString(gopNumBFrames)).append("\n");
    sb.append("    gopSize: ").append(toIndentedString(gopSize)).append("\n");
    sb.append("    gopSizeUnits: ").append(toIndentedString(gopSizeUnits)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    lookAheadRateControl: ").append(toIndentedString(lookAheadRateControl)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    minIInterval: ").append(toIndentedString(minIInterval)).append("\n");
    sb.append("    numRefFrames: ").append(toIndentedString(numRefFrames)).append("\n");
    sb.append("    parControl: ").append(toIndentedString(parControl)).append("\n");
    sb.append("    parDenominator: ").append(toIndentedString(parDenominator)).append("\n");
    sb.append("    parNumerator: ").append(toIndentedString(parNumerator)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    qualityLevel: ").append(toIndentedString(qualityLevel)).append("\n");
    sb.append("    qvbrQualityLevel: ").append(toIndentedString(qvbrQualityLevel)).append("\n");
    sb.append("    rateControlMode: ").append(toIndentedString(rateControlMode)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("    sceneChangeDetect: ").append(toIndentedString(sceneChangeDetect)).append("\n");
    sb.append("    slices: ").append(toIndentedString(slices)).append("\n");
    sb.append("    softness: ").append(toIndentedString(softness)).append("\n");
    sb.append("    spatialAq: ").append(toIndentedString(spatialAq)).append("\n");
    sb.append("    subgopLength: ").append(toIndentedString(subgopLength)).append("\n");
    sb.append("    syntax: ").append(toIndentedString(syntax)).append("\n");
    sb.append("    temporalAq: ").append(toIndentedString(temporalAq)).append("\n");
    sb.append("    timecodeInsertion: ").append(toIndentedString(timecodeInsertion)).append("\n");
    sb.append("    timecodeBurninSettings: ").append(toIndentedString(timecodeBurninSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdaptiveQuantization");
    openapiFields.add("AfdSignaling");
    openapiFields.add("Bitrate");
    openapiFields.add("BufFillPct");
    openapiFields.add("BufSize");
    openapiFields.add("ColorMetadata");
    openapiFields.add("ColorSpaceSettings");
    openapiFields.add("EntropyEncoding");
    openapiFields.add("FilterSettings");
    openapiFields.add("FixedAfd");
    openapiFields.add("FlickerAq");
    openapiFields.add("ForceFieldPictures");
    openapiFields.add("FramerateControl");
    openapiFields.add("FramerateDenominator");
    openapiFields.add("FramerateNumerator");
    openapiFields.add("GopBReference");
    openapiFields.add("GopClosedCadence");
    openapiFields.add("GopNumBFrames");
    openapiFields.add("GopSize");
    openapiFields.add("GopSizeUnits");
    openapiFields.add("Level");
    openapiFields.add("LookAheadRateControl");
    openapiFields.add("MaxBitrate");
    openapiFields.add("MinIInterval");
    openapiFields.add("NumRefFrames");
    openapiFields.add("ParControl");
    openapiFields.add("ParDenominator");
    openapiFields.add("ParNumerator");
    openapiFields.add("Profile");
    openapiFields.add("QualityLevel");
    openapiFields.add("QvbrQualityLevel");
    openapiFields.add("RateControlMode");
    openapiFields.add("ScanType");
    openapiFields.add("SceneChangeDetect");
    openapiFields.add("Slices");
    openapiFields.add("Softness");
    openapiFields.add("SpatialAq");
    openapiFields.add("SubgopLength");
    openapiFields.add("Syntax");
    openapiFields.add("TemporalAq");
    openapiFields.add("TimecodeInsertion");
    openapiFields.add("TimecodeBurninSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoCodecSettingsH264Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoCodecSettingsH264Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoCodecSettingsH264Settings is not found in the empty JSON string", VideoCodecSettingsH264Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoCodecSettingsH264Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoCodecSettingsH264Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdaptiveQuantization`
      if (jsonObj.get("AdaptiveQuantization") != null && !jsonObj.get("AdaptiveQuantization").isJsonNull()) {
        H264AdaptiveQuantization.validateJsonElement(jsonObj.get("AdaptiveQuantization"));
      }
      // validate the optional field `AfdSignaling`
      if (jsonObj.get("AfdSignaling") != null && !jsonObj.get("AfdSignaling").isJsonNull()) {
        AfdSignaling.validateJsonElement(jsonObj.get("AfdSignaling"));
      }
      // validate the optional field `Bitrate`
      if (jsonObj.get("Bitrate") != null && !jsonObj.get("Bitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bitrate"));
      }
      // validate the optional field `BufFillPct`
      if (jsonObj.get("BufFillPct") != null && !jsonObj.get("BufFillPct").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BufFillPct"));
      }
      // validate the optional field `BufSize`
      if (jsonObj.get("BufSize") != null && !jsonObj.get("BufSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BufSize"));
      }
      // validate the optional field `ColorMetadata`
      if (jsonObj.get("ColorMetadata") != null && !jsonObj.get("ColorMetadata").isJsonNull()) {
        H264ColorMetadata.validateJsonElement(jsonObj.get("ColorMetadata"));
      }
      // validate the optional field `ColorSpaceSettings`
      if (jsonObj.get("ColorSpaceSettings") != null && !jsonObj.get("ColorSpaceSettings").isJsonNull()) {
        H264SettingsColorSpaceSettings.validateJsonElement(jsonObj.get("ColorSpaceSettings"));
      }
      // validate the optional field `EntropyEncoding`
      if (jsonObj.get("EntropyEncoding") != null && !jsonObj.get("EntropyEncoding").isJsonNull()) {
        H264EntropyEncoding.validateJsonElement(jsonObj.get("EntropyEncoding"));
      }
      // validate the optional field `FilterSettings`
      if (jsonObj.get("FilterSettings") != null && !jsonObj.get("FilterSettings").isJsonNull()) {
        H264SettingsFilterSettings.validateJsonElement(jsonObj.get("FilterSettings"));
      }
      // validate the optional field `FixedAfd`
      if (jsonObj.get("FixedAfd") != null && !jsonObj.get("FixedAfd").isJsonNull()) {
        FixedAfd.validateJsonElement(jsonObj.get("FixedAfd"));
      }
      // validate the optional field `FlickerAq`
      if (jsonObj.get("FlickerAq") != null && !jsonObj.get("FlickerAq").isJsonNull()) {
        H264FlickerAq.validateJsonElement(jsonObj.get("FlickerAq"));
      }
      // validate the optional field `ForceFieldPictures`
      if (jsonObj.get("ForceFieldPictures") != null && !jsonObj.get("ForceFieldPictures").isJsonNull()) {
        H264ForceFieldPictures.validateJsonElement(jsonObj.get("ForceFieldPictures"));
      }
      // validate the optional field `FramerateControl`
      if (jsonObj.get("FramerateControl") != null && !jsonObj.get("FramerateControl").isJsonNull()) {
        H264FramerateControl.validateJsonElement(jsonObj.get("FramerateControl"));
      }
      // validate the optional field `FramerateDenominator`
      if (jsonObj.get("FramerateDenominator") != null && !jsonObj.get("FramerateDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateDenominator"));
      }
      // validate the optional field `FramerateNumerator`
      if (jsonObj.get("FramerateNumerator") != null && !jsonObj.get("FramerateNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FramerateNumerator"));
      }
      // validate the optional field `GopBReference`
      if (jsonObj.get("GopBReference") != null && !jsonObj.get("GopBReference").isJsonNull()) {
        H264GopBReference.validateJsonElement(jsonObj.get("GopBReference"));
      }
      // validate the optional field `GopClosedCadence`
      if (jsonObj.get("GopClosedCadence") != null && !jsonObj.get("GopClosedCadence").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GopClosedCadence"));
      }
      // validate the optional field `GopNumBFrames`
      if (jsonObj.get("GopNumBFrames") != null && !jsonObj.get("GopNumBFrames").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GopNumBFrames"));
      }
      // validate the optional field `GopSize`
      if (jsonObj.get("GopSize") != null && !jsonObj.get("GopSize").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("GopSize"));
      }
      // validate the optional field `GopSizeUnits`
      if (jsonObj.get("GopSizeUnits") != null && !jsonObj.get("GopSizeUnits").isJsonNull()) {
        H264GopSizeUnits.validateJsonElement(jsonObj.get("GopSizeUnits"));
      }
      // validate the optional field `Level`
      if (jsonObj.get("Level") != null && !jsonObj.get("Level").isJsonNull()) {
        H264Level.validateJsonElement(jsonObj.get("Level"));
      }
      // validate the optional field `LookAheadRateControl`
      if (jsonObj.get("LookAheadRateControl") != null && !jsonObj.get("LookAheadRateControl").isJsonNull()) {
        H264LookAheadRateControl.validateJsonElement(jsonObj.get("LookAheadRateControl"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `MinIInterval`
      if (jsonObj.get("MinIInterval") != null && !jsonObj.get("MinIInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinIInterval"));
      }
      // validate the optional field `NumRefFrames`
      if (jsonObj.get("NumRefFrames") != null && !jsonObj.get("NumRefFrames").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumRefFrames"));
      }
      // validate the optional field `ParControl`
      if (jsonObj.get("ParControl") != null && !jsonObj.get("ParControl").isJsonNull()) {
        H264ParControl.validateJsonElement(jsonObj.get("ParControl"));
      }
      // validate the optional field `ParDenominator`
      if (jsonObj.get("ParDenominator") != null && !jsonObj.get("ParDenominator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParDenominator"));
      }
      // validate the optional field `ParNumerator`
      if (jsonObj.get("ParNumerator") != null && !jsonObj.get("ParNumerator").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParNumerator"));
      }
      // validate the optional field `Profile`
      if (jsonObj.get("Profile") != null && !jsonObj.get("Profile").isJsonNull()) {
        H264Profile.validateJsonElement(jsonObj.get("Profile"));
      }
      // validate the optional field `QualityLevel`
      if (jsonObj.get("QualityLevel") != null && !jsonObj.get("QualityLevel").isJsonNull()) {
        H264QualityLevel.validateJsonElement(jsonObj.get("QualityLevel"));
      }
      // validate the optional field `QvbrQualityLevel`
      if (jsonObj.get("QvbrQualityLevel") != null && !jsonObj.get("QvbrQualityLevel").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("QvbrQualityLevel"));
      }
      // validate the optional field `RateControlMode`
      if (jsonObj.get("RateControlMode") != null && !jsonObj.get("RateControlMode").isJsonNull()) {
        H264RateControlMode.validateJsonElement(jsonObj.get("RateControlMode"));
      }
      // validate the optional field `ScanType`
      if (jsonObj.get("ScanType") != null && !jsonObj.get("ScanType").isJsonNull()) {
        H264ScanType.validateJsonElement(jsonObj.get("ScanType"));
      }
      // validate the optional field `SceneChangeDetect`
      if (jsonObj.get("SceneChangeDetect") != null && !jsonObj.get("SceneChangeDetect").isJsonNull()) {
        H264SceneChangeDetect.validateJsonElement(jsonObj.get("SceneChangeDetect"));
      }
      // validate the optional field `Slices`
      if (jsonObj.get("Slices") != null && !jsonObj.get("Slices").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Slices"));
      }
      // validate the optional field `Softness`
      if (jsonObj.get("Softness") != null && !jsonObj.get("Softness").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Softness"));
      }
      // validate the optional field `SpatialAq`
      if (jsonObj.get("SpatialAq") != null && !jsonObj.get("SpatialAq").isJsonNull()) {
        H264SpatialAq.validateJsonElement(jsonObj.get("SpatialAq"));
      }
      // validate the optional field `SubgopLength`
      if (jsonObj.get("SubgopLength") != null && !jsonObj.get("SubgopLength").isJsonNull()) {
        H264SubGopLength.validateJsonElement(jsonObj.get("SubgopLength"));
      }
      // validate the optional field `Syntax`
      if (jsonObj.get("Syntax") != null && !jsonObj.get("Syntax").isJsonNull()) {
        H264Syntax.validateJsonElement(jsonObj.get("Syntax"));
      }
      // validate the optional field `TemporalAq`
      if (jsonObj.get("TemporalAq") != null && !jsonObj.get("TemporalAq").isJsonNull()) {
        H264TemporalAq.validateJsonElement(jsonObj.get("TemporalAq"));
      }
      // validate the optional field `TimecodeInsertion`
      if (jsonObj.get("TimecodeInsertion") != null && !jsonObj.get("TimecodeInsertion").isJsonNull()) {
        H264TimecodeInsertionBehavior.validateJsonElement(jsonObj.get("TimecodeInsertion"));
      }
      // validate the optional field `TimecodeBurninSettings`
      if (jsonObj.get("TimecodeBurninSettings") != null && !jsonObj.get("TimecodeBurninSettings").isJsonNull()) {
        FrameCaptureSettingsTimecodeBurninSettings.validateJsonElement(jsonObj.get("TimecodeBurninSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoCodecSettingsH264Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoCodecSettingsH264Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoCodecSettingsH264Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoCodecSettingsH264Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoCodecSettingsH264Settings>() {
           @Override
           public void write(JsonWriter out, VideoCodecSettingsH264Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoCodecSettingsH264Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoCodecSettingsH264Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoCodecSettingsH264Settings
   * @throws IOException if the JSON string is invalid with respect to VideoCodecSettingsH264Settings
   */
  public static VideoCodecSettingsH264Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoCodecSettingsH264Settings.class);
  }

  /**
   * Convert an instance of VideoCodecSettingsH264Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

