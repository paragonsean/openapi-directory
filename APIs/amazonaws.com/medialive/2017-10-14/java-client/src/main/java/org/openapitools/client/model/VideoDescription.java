/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoDescriptionCodecSettings;
import org.openapitools.client.model.VideoDescriptionRespondToAfd;
import org.openapitools.client.model.VideoDescriptionScalingBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Video settings for this stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoDescription {
  public static final String SERIALIZED_NAME_CODEC_SETTINGS = "CodecSettings";
  @SerializedName(SERIALIZED_NAME_CODEC_SETTINGS)
  private VideoDescriptionCodecSettings codecSettings;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESPOND_TO_AFD = "RespondToAfd";
  @SerializedName(SERIALIZED_NAME_RESPOND_TO_AFD)
  private VideoDescriptionRespondToAfd respondToAfd;

  public static final String SERIALIZED_NAME_SCALING_BEHAVIOR = "ScalingBehavior";
  @SerializedName(SERIALIZED_NAME_SCALING_BEHAVIOR)
  private VideoDescriptionScalingBehavior scalingBehavior;

  public static final String SERIALIZED_NAME_SHARPNESS = "Sharpness";
  @SerializedName(SERIALIZED_NAME_SHARPNESS)
  private Integer sharpness;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public VideoDescription() {
  }

  public VideoDescription codecSettings(VideoDescriptionCodecSettings codecSettings) {
    this.codecSettings = codecSettings;
    return this;
  }

  /**
   * Get codecSettings
   * @return codecSettings
   */
  @javax.annotation.Nullable
  public VideoDescriptionCodecSettings getCodecSettings() {
    return codecSettings;
  }

  public void setCodecSettings(VideoDescriptionCodecSettings codecSettings) {
    this.codecSettings = codecSettings;
  }


  public VideoDescription height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public VideoDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VideoDescription respondToAfd(VideoDescriptionRespondToAfd respondToAfd) {
    this.respondToAfd = respondToAfd;
    return this;
  }

  /**
   * Get respondToAfd
   * @return respondToAfd
   */
  @javax.annotation.Nullable
  public VideoDescriptionRespondToAfd getRespondToAfd() {
    return respondToAfd;
  }

  public void setRespondToAfd(VideoDescriptionRespondToAfd respondToAfd) {
    this.respondToAfd = respondToAfd;
  }


  public VideoDescription scalingBehavior(VideoDescriptionScalingBehavior scalingBehavior) {
    this.scalingBehavior = scalingBehavior;
    return this;
  }

  /**
   * Get scalingBehavior
   * @return scalingBehavior
   */
  @javax.annotation.Nullable
  public VideoDescriptionScalingBehavior getScalingBehavior() {
    return scalingBehavior;
  }

  public void setScalingBehavior(VideoDescriptionScalingBehavior scalingBehavior) {
    this.scalingBehavior = scalingBehavior;
  }


  public VideoDescription sharpness(Integer sharpness) {
    this.sharpness = sharpness;
    return this;
  }

  /**
   * Get sharpness
   * @return sharpness
   */
  @javax.annotation.Nullable
  public Integer getSharpness() {
    return sharpness;
  }

  public void setSharpness(Integer sharpness) {
    this.sharpness = sharpness;
  }


  public VideoDescription width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoDescription videoDescription = (VideoDescription) o;
    return Objects.equals(this.codecSettings, videoDescription.codecSettings) &&
        Objects.equals(this.height, videoDescription.height) &&
        Objects.equals(this.name, videoDescription.name) &&
        Objects.equals(this.respondToAfd, videoDescription.respondToAfd) &&
        Objects.equals(this.scalingBehavior, videoDescription.scalingBehavior) &&
        Objects.equals(this.sharpness, videoDescription.sharpness) &&
        Objects.equals(this.width, videoDescription.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codecSettings, height, name, respondToAfd, scalingBehavior, sharpness, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoDescription {\n");
    sb.append("    codecSettings: ").append(toIndentedString(codecSettings)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    respondToAfd: ").append(toIndentedString(respondToAfd)).append("\n");
    sb.append("    scalingBehavior: ").append(toIndentedString(scalingBehavior)).append("\n");
    sb.append("    sharpness: ").append(toIndentedString(sharpness)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodecSettings");
    openapiFields.add("Height");
    openapiFields.add("Name");
    openapiFields.add("RespondToAfd");
    openapiFields.add("ScalingBehavior");
    openapiFields.add("Sharpness");
    openapiFields.add("Width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoDescription is not found in the empty JSON string", VideoDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodecSettings`
      if (jsonObj.get("CodecSettings") != null && !jsonObj.get("CodecSettings").isJsonNull()) {
        VideoDescriptionCodecSettings.validateJsonElement(jsonObj.get("CodecSettings"));
      }
      // validate the optional field `Height`
      if (jsonObj.get("Height") != null && !jsonObj.get("Height").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Height"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `RespondToAfd`
      if (jsonObj.get("RespondToAfd") != null && !jsonObj.get("RespondToAfd").isJsonNull()) {
        VideoDescriptionRespondToAfd.validateJsonElement(jsonObj.get("RespondToAfd"));
      }
      // validate the optional field `ScalingBehavior`
      if (jsonObj.get("ScalingBehavior") != null && !jsonObj.get("ScalingBehavior").isJsonNull()) {
        VideoDescriptionScalingBehavior.validateJsonElement(jsonObj.get("ScalingBehavior"));
      }
      // validate the optional field `Sharpness`
      if (jsonObj.get("Sharpness") != null && !jsonObj.get("Sharpness").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Sharpness"));
      }
      // validate the optional field `Width`
      if (jsonObj.get("Width") != null && !jsonObj.get("Width").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoDescription>() {
           @Override
           public void write(JsonWriter out, VideoDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoDescription
   * @throws IOException if the JSON string is invalid with respect to VideoDescription
   */
  public static VideoDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoDescription.class);
  }

  /**
   * Convert an instance of VideoDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

