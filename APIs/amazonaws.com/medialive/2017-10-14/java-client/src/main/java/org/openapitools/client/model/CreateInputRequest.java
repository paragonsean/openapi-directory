/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateInputRequestVpc;
import org.openapitools.client.model.InputDestinationRequest;
import org.openapitools.client.model.InputDeviceSettings;
import org.openapitools.client.model.InputSourceRequest;
import org.openapitools.client.model.MediaConnectFlowRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateInputRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInputRequest {
  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<InputDestinationRequest> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_DEVICES = "inputDevices";
  @SerializedName(SERIALIZED_NAME_INPUT_DEVICES)
  private List<InputDeviceSettings> inputDevices = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_SECURITY_GROUPS = "inputSecurityGroups";
  @SerializedName(SERIALIZED_NAME_INPUT_SECURITY_GROUPS)
  private List<String> inputSecurityGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_CONNECT_FLOWS = "mediaConnectFlows";
  @SerializedName(SERIALIZED_NAME_MEDIA_CONNECT_FLOWS)
  private List<MediaConnectFlowRequest> mediaConnectFlows = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<InputSourceRequest> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * The different types of inputs that AWS Elemental MediaLive supports.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UDP_PUSH("UDP_PUSH"),
    
    RTP_PUSH("RTP_PUSH"),
    
    RTMP_PUSH("RTMP_PUSH"),
    
    RTMP_PULL("RTMP_PULL"),
    
    URL_PULL("URL_PULL"),
    
    MP4_FILE("MP4_FILE"),
    
    MEDIACONNECT("MEDIACONNECT"),
    
    INPUT_DEVICE("INPUT_DEVICE"),
    
    AWS_CDI("AWS_CDI"),
    
    TS_FILE("TS_FILE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VPC = "vpc";
  @SerializedName(SERIALIZED_NAME_VPC)
  private CreateInputRequestVpc vpc;

  public CreateInputRequest() {
  }

  public CreateInputRequest destinations(List<InputDestinationRequest> destinations) {
    this.destinations = destinations;
    return this;
  }

  public CreateInputRequest addDestinationsItem(InputDestinationRequest destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfInputDestinationRequest
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<InputDestinationRequest> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<InputDestinationRequest> destinations) {
    this.destinations = destinations;
  }


  public CreateInputRequest inputDevices(List<InputDeviceSettings> inputDevices) {
    this.inputDevices = inputDevices;
    return this;
  }

  public CreateInputRequest addInputDevicesItem(InputDeviceSettings inputDevicesItem) {
    if (this.inputDevices == null) {
      this.inputDevices = new ArrayList<>();
    }
    this.inputDevices.add(inputDevicesItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfInputDeviceSettings
   * @return inputDevices
   */
  @javax.annotation.Nullable
  public List<InputDeviceSettings> getInputDevices() {
    return inputDevices;
  }

  public void setInputDevices(List<InputDeviceSettings> inputDevices) {
    this.inputDevices = inputDevices;
  }


  public CreateInputRequest inputSecurityGroups(List<String> inputSecurityGroups) {
    this.inputSecurityGroups = inputSecurityGroups;
    return this;
  }

  public CreateInputRequest addInputSecurityGroupsItem(String inputSecurityGroupsItem) {
    if (this.inputSecurityGroups == null) {
      this.inputSecurityGroups = new ArrayList<>();
    }
    this.inputSecurityGroups.add(inputSecurityGroupsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOf__string
   * @return inputSecurityGroups
   */
  @javax.annotation.Nullable
  public List<String> getInputSecurityGroups() {
    return inputSecurityGroups;
  }

  public void setInputSecurityGroups(List<String> inputSecurityGroups) {
    this.inputSecurityGroups = inputSecurityGroups;
  }


  public CreateInputRequest mediaConnectFlows(List<MediaConnectFlowRequest> mediaConnectFlows) {
    this.mediaConnectFlows = mediaConnectFlows;
    return this;
  }

  public CreateInputRequest addMediaConnectFlowsItem(MediaConnectFlowRequest mediaConnectFlowsItem) {
    if (this.mediaConnectFlows == null) {
      this.mediaConnectFlows = new ArrayList<>();
    }
    this.mediaConnectFlows.add(mediaConnectFlowsItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfMediaConnectFlowRequest
   * @return mediaConnectFlows
   */
  @javax.annotation.Nullable
  public List<MediaConnectFlowRequest> getMediaConnectFlows() {
    return mediaConnectFlows;
  }

  public void setMediaConnectFlows(List<MediaConnectFlowRequest> mediaConnectFlows) {
    this.mediaConnectFlows = mediaConnectFlows;
  }


  public CreateInputRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateInputRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CreateInputRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Placeholder documentation for __string
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateInputRequest sources(List<InputSourceRequest> sources) {
    this.sources = sources;
    return this;
  }

  public CreateInputRequest addSourcesItem(InputSourceRequest sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Placeholder documentation for __listOfInputSourceRequest
   * @return sources
   */
  @javax.annotation.Nullable
  public List<InputSourceRequest> getSources() {
    return sources;
  }

  public void setSources(List<InputSourceRequest> sources) {
    this.sources = sources;
  }


  public CreateInputRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateInputRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Placeholder documentation for Tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateInputRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The different types of inputs that AWS Elemental MediaLive supports.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CreateInputRequest vpc(CreateInputRequestVpc vpc) {
    this.vpc = vpc;
    return this;
  }

  /**
   * Get vpc
   * @return vpc
   */
  @javax.annotation.Nullable
  public CreateInputRequestVpc getVpc() {
    return vpc;
  }

  public void setVpc(CreateInputRequestVpc vpc) {
    this.vpc = vpc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInputRequest createInputRequest = (CreateInputRequest) o;
    return Objects.equals(this.destinations, createInputRequest.destinations) &&
        Objects.equals(this.inputDevices, createInputRequest.inputDevices) &&
        Objects.equals(this.inputSecurityGroups, createInputRequest.inputSecurityGroups) &&
        Objects.equals(this.mediaConnectFlows, createInputRequest.mediaConnectFlows) &&
        Objects.equals(this.name, createInputRequest.name) &&
        Objects.equals(this.requestId, createInputRequest.requestId) &&
        Objects.equals(this.roleArn, createInputRequest.roleArn) &&
        Objects.equals(this.sources, createInputRequest.sources) &&
        Objects.equals(this.tags, createInputRequest.tags) &&
        Objects.equals(this.type, createInputRequest.type) &&
        Objects.equals(this.vpc, createInputRequest.vpc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinations, inputDevices, inputSecurityGroups, mediaConnectFlows, name, requestId, roleArn, sources, tags, type, vpc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInputRequest {\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    inputDevices: ").append(toIndentedString(inputDevices)).append("\n");
    sb.append("    inputSecurityGroups: ").append(toIndentedString(inputSecurityGroups)).append("\n");
    sb.append("    mediaConnectFlows: ").append(toIndentedString(mediaConnectFlows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinations");
    openapiFields.add("inputDevices");
    openapiFields.add("inputSecurityGroups");
    openapiFields.add("mediaConnectFlows");
    openapiFields.add("name");
    openapiFields.add("requestId");
    openapiFields.add("roleArn");
    openapiFields.add("sources");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("vpc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInputRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInputRequest is not found in the empty JSON string", CreateInputRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInputRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInputRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            InputDestinationRequest.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if (jsonObj.get("inputDevices") != null && !jsonObj.get("inputDevices").isJsonNull()) {
        JsonArray jsonArrayinputDevices = jsonObj.getAsJsonArray("inputDevices");
        if (jsonArrayinputDevices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputDevices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputDevices` to be an array in the JSON string but got `%s`", jsonObj.get("inputDevices").toString()));
          }

          // validate the optional field `inputDevices` (array)
          for (int i = 0; i < jsonArrayinputDevices.size(); i++) {
            InputDeviceSettings.validateJsonElement(jsonArrayinputDevices.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inputSecurityGroups") != null && !jsonObj.get("inputSecurityGroups").isJsonNull() && !jsonObj.get("inputSecurityGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputSecurityGroups` to be an array in the JSON string but got `%s`", jsonObj.get("inputSecurityGroups").toString()));
      }
      if (jsonObj.get("mediaConnectFlows") != null && !jsonObj.get("mediaConnectFlows").isJsonNull()) {
        JsonArray jsonArraymediaConnectFlows = jsonObj.getAsJsonArray("mediaConnectFlows");
        if (jsonArraymediaConnectFlows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mediaConnectFlows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mediaConnectFlows` to be an array in the JSON string but got `%s`", jsonObj.get("mediaConnectFlows").toString()));
          }

          // validate the optional field `mediaConnectFlows` (array)
          for (int i = 0; i < jsonArraymediaConnectFlows.size(); i++) {
            MediaConnectFlowRequest.validateJsonElement(jsonArraymediaConnectFlows.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) && !jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            InputSourceRequest.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `vpc`
      if (jsonObj.get("vpc") != null && !jsonObj.get("vpc").isJsonNull()) {
        CreateInputRequestVpc.validateJsonElement(jsonObj.get("vpc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInputRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInputRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInputRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInputRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInputRequest>() {
           @Override
           public void write(JsonWriter out, CreateInputRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInputRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInputRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInputRequest
   * @throws IOException if the JSON string is invalid with respect to CreateInputRequest
   */
  public static CreateInputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInputRequest.class);
  }

  /**
   * Convert an instance of CreateInputRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

