/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Runtime details of a pipeline when a channel is running.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:18.892689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineDetail {
  public static final String SERIALIZED_NAME_ACTIVE_INPUT_ATTACHMENT_NAME = "ActiveInputAttachmentName";
  @SerializedName(SERIALIZED_NAME_ACTIVE_INPUT_ATTACHMENT_NAME)
  private String activeInputAttachmentName;

  public static final String SERIALIZED_NAME_ACTIVE_INPUT_SWITCH_ACTION_NAME = "ActiveInputSwitchActionName";
  @SerializedName(SERIALIZED_NAME_ACTIVE_INPUT_SWITCH_ACTION_NAME)
  private String activeInputSwitchActionName;

  public static final String SERIALIZED_NAME_ACTIVE_MOTION_GRAPHICS_ACTION_NAME = "ActiveMotionGraphicsActionName";
  @SerializedName(SERIALIZED_NAME_ACTIVE_MOTION_GRAPHICS_ACTION_NAME)
  private String activeMotionGraphicsActionName;

  public static final String SERIALIZED_NAME_ACTIVE_MOTION_GRAPHICS_URI = "ActiveMotionGraphicsUri";
  @SerializedName(SERIALIZED_NAME_ACTIVE_MOTION_GRAPHICS_URI)
  private String activeMotionGraphicsUri;

  public static final String SERIALIZED_NAME_PIPELINE_ID = "PipelineId";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  private String pipelineId;

  public PipelineDetail() {
  }

  public PipelineDetail activeInputAttachmentName(String activeInputAttachmentName) {
    this.activeInputAttachmentName = activeInputAttachmentName;
    return this;
  }

  /**
   * Get activeInputAttachmentName
   * @return activeInputAttachmentName
   */
  @javax.annotation.Nullable
  public String getActiveInputAttachmentName() {
    return activeInputAttachmentName;
  }

  public void setActiveInputAttachmentName(String activeInputAttachmentName) {
    this.activeInputAttachmentName = activeInputAttachmentName;
  }


  public PipelineDetail activeInputSwitchActionName(String activeInputSwitchActionName) {
    this.activeInputSwitchActionName = activeInputSwitchActionName;
    return this;
  }

  /**
   * Get activeInputSwitchActionName
   * @return activeInputSwitchActionName
   */
  @javax.annotation.Nullable
  public String getActiveInputSwitchActionName() {
    return activeInputSwitchActionName;
  }

  public void setActiveInputSwitchActionName(String activeInputSwitchActionName) {
    this.activeInputSwitchActionName = activeInputSwitchActionName;
  }


  public PipelineDetail activeMotionGraphicsActionName(String activeMotionGraphicsActionName) {
    this.activeMotionGraphicsActionName = activeMotionGraphicsActionName;
    return this;
  }

  /**
   * Get activeMotionGraphicsActionName
   * @return activeMotionGraphicsActionName
   */
  @javax.annotation.Nullable
  public String getActiveMotionGraphicsActionName() {
    return activeMotionGraphicsActionName;
  }

  public void setActiveMotionGraphicsActionName(String activeMotionGraphicsActionName) {
    this.activeMotionGraphicsActionName = activeMotionGraphicsActionName;
  }


  public PipelineDetail activeMotionGraphicsUri(String activeMotionGraphicsUri) {
    this.activeMotionGraphicsUri = activeMotionGraphicsUri;
    return this;
  }

  /**
   * Get activeMotionGraphicsUri
   * @return activeMotionGraphicsUri
   */
  @javax.annotation.Nullable
  public String getActiveMotionGraphicsUri() {
    return activeMotionGraphicsUri;
  }

  public void setActiveMotionGraphicsUri(String activeMotionGraphicsUri) {
    this.activeMotionGraphicsUri = activeMotionGraphicsUri;
  }


  public PipelineDetail pipelineId(String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * Get pipelineId
   * @return pipelineId
   */
  @javax.annotation.Nullable
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(String pipelineId) {
    this.pipelineId = pipelineId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineDetail pipelineDetail = (PipelineDetail) o;
    return Objects.equals(this.activeInputAttachmentName, pipelineDetail.activeInputAttachmentName) &&
        Objects.equals(this.activeInputSwitchActionName, pipelineDetail.activeInputSwitchActionName) &&
        Objects.equals(this.activeMotionGraphicsActionName, pipelineDetail.activeMotionGraphicsActionName) &&
        Objects.equals(this.activeMotionGraphicsUri, pipelineDetail.activeMotionGraphicsUri) &&
        Objects.equals(this.pipelineId, pipelineDetail.pipelineId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeInputAttachmentName, activeInputSwitchActionName, activeMotionGraphicsActionName, activeMotionGraphicsUri, pipelineId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineDetail {\n");
    sb.append("    activeInputAttachmentName: ").append(toIndentedString(activeInputAttachmentName)).append("\n");
    sb.append("    activeInputSwitchActionName: ").append(toIndentedString(activeInputSwitchActionName)).append("\n");
    sb.append("    activeMotionGraphicsActionName: ").append(toIndentedString(activeMotionGraphicsActionName)).append("\n");
    sb.append("    activeMotionGraphicsUri: ").append(toIndentedString(activeMotionGraphicsUri)).append("\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveInputAttachmentName");
    openapiFields.add("ActiveInputSwitchActionName");
    openapiFields.add("ActiveMotionGraphicsActionName");
    openapiFields.add("ActiveMotionGraphicsUri");
    openapiFields.add("PipelineId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineDetail is not found in the empty JSON string", PipelineDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ActiveInputAttachmentName`
      if (jsonObj.get("ActiveInputAttachmentName") != null && !jsonObj.get("ActiveInputAttachmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActiveInputAttachmentName"));
      }
      // validate the optional field `ActiveInputSwitchActionName`
      if (jsonObj.get("ActiveInputSwitchActionName") != null && !jsonObj.get("ActiveInputSwitchActionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActiveInputSwitchActionName"));
      }
      // validate the optional field `ActiveMotionGraphicsActionName`
      if (jsonObj.get("ActiveMotionGraphicsActionName") != null && !jsonObj.get("ActiveMotionGraphicsActionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActiveMotionGraphicsActionName"));
      }
      // validate the optional field `ActiveMotionGraphicsUri`
      if (jsonObj.get("ActiveMotionGraphicsUri") != null && !jsonObj.get("ActiveMotionGraphicsUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActiveMotionGraphicsUri"));
      }
      // validate the optional field `PipelineId`
      if (jsonObj.get("PipelineId") != null && !jsonObj.get("PipelineId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PipelineId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineDetail>() {
           @Override
           public void write(JsonWriter out, PipelineDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineDetail
   * @throws IOException if the JSON string is invalid with respect to PipelineDetail
   */
  public static PipelineDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineDetail.class);
  }

  /**
   * Convert an instance of PipelineDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

