/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AfdSignaling;
import org.openapitools.client.model.FixedAfd;
import org.openapitools.client.model.FrameCaptureSettingsTimecodeBurninSettings;
import org.openapitools.client.model.H265AdaptiveQuantization;
import org.openapitools.client.model.H265AlternativeTransferFunction;
import org.openapitools.client.model.H265ColorMetadata;
import org.openapitools.client.model.H265FlickerAq;
import org.openapitools.client.model.H265GopSizeUnits;
import org.openapitools.client.model.H265Level;
import org.openapitools.client.model.H265LookAheadRateControl;
import org.openapitools.client.model.H265Profile;
import org.openapitools.client.model.H265RateControlMode;
import org.openapitools.client.model.H265ScanType;
import org.openapitools.client.model.H265SceneChangeDetect;
import org.openapitools.client.model.H265SettingsColorSpaceSettings;
import org.openapitools.client.model.H265SettingsFilterSettings;
import org.openapitools.client.model.H265Tier;
import org.openapitools.client.model.H265TimecodeInsertionBehavior;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VideoCodecSettingsH265Settings
 */
public class VideoCodecSettingsH265SettingsTest {
    private final VideoCodecSettingsH265Settings model = new VideoCodecSettingsH265Settings();

    /**
     * Model tests for VideoCodecSettingsH265Settings
     */
    @Test
    public void testVideoCodecSettingsH265Settings() {
        // TODO: test VideoCodecSettingsH265Settings
    }

    /**
     * Test the property 'adaptiveQuantization'
     */
    @Test
    public void adaptiveQuantizationTest() {
        // TODO: test adaptiveQuantization
    }

    /**
     * Test the property 'afdSignaling'
     */
    @Test
    public void afdSignalingTest() {
        // TODO: test afdSignaling
    }

    /**
     * Test the property 'alternativeTransferFunction'
     */
    @Test
    public void alternativeTransferFunctionTest() {
        // TODO: test alternativeTransferFunction
    }

    /**
     * Test the property 'bitrate'
     */
    @Test
    public void bitrateTest() {
        // TODO: test bitrate
    }

    /**
     * Test the property 'bufSize'
     */
    @Test
    public void bufSizeTest() {
        // TODO: test bufSize
    }

    /**
     * Test the property 'colorMetadata'
     */
    @Test
    public void colorMetadataTest() {
        // TODO: test colorMetadata
    }

    /**
     * Test the property 'colorSpaceSettings'
     */
    @Test
    public void colorSpaceSettingsTest() {
        // TODO: test colorSpaceSettings
    }

    /**
     * Test the property 'filterSettings'
     */
    @Test
    public void filterSettingsTest() {
        // TODO: test filterSettings
    }

    /**
     * Test the property 'fixedAfd'
     */
    @Test
    public void fixedAfdTest() {
        // TODO: test fixedAfd
    }

    /**
     * Test the property 'flickerAq'
     */
    @Test
    public void flickerAqTest() {
        // TODO: test flickerAq
    }

    /**
     * Test the property 'framerateDenominator'
     */
    @Test
    public void framerateDenominatorTest() {
        // TODO: test framerateDenominator
    }

    /**
     * Test the property 'framerateNumerator'
     */
    @Test
    public void framerateNumeratorTest() {
        // TODO: test framerateNumerator
    }

    /**
     * Test the property 'gopClosedCadence'
     */
    @Test
    public void gopClosedCadenceTest() {
        // TODO: test gopClosedCadence
    }

    /**
     * Test the property 'gopSize'
     */
    @Test
    public void gopSizeTest() {
        // TODO: test gopSize
    }

    /**
     * Test the property 'gopSizeUnits'
     */
    @Test
    public void gopSizeUnitsTest() {
        // TODO: test gopSizeUnits
    }

    /**
     * Test the property 'level'
     */
    @Test
    public void levelTest() {
        // TODO: test level
    }

    /**
     * Test the property 'lookAheadRateControl'
     */
    @Test
    public void lookAheadRateControlTest() {
        // TODO: test lookAheadRateControl
    }

    /**
     * Test the property 'maxBitrate'
     */
    @Test
    public void maxBitrateTest() {
        // TODO: test maxBitrate
    }

    /**
     * Test the property 'minIInterval'
     */
    @Test
    public void minIIntervalTest() {
        // TODO: test minIInterval
    }

    /**
     * Test the property 'parDenominator'
     */
    @Test
    public void parDenominatorTest() {
        // TODO: test parDenominator
    }

    /**
     * Test the property 'parNumerator'
     */
    @Test
    public void parNumeratorTest() {
        // TODO: test parNumerator
    }

    /**
     * Test the property 'profile'
     */
    @Test
    public void profileTest() {
        // TODO: test profile
    }

    /**
     * Test the property 'qvbrQualityLevel'
     */
    @Test
    public void qvbrQualityLevelTest() {
        // TODO: test qvbrQualityLevel
    }

    /**
     * Test the property 'rateControlMode'
     */
    @Test
    public void rateControlModeTest() {
        // TODO: test rateControlMode
    }

    /**
     * Test the property 'scanType'
     */
    @Test
    public void scanTypeTest() {
        // TODO: test scanType
    }

    /**
     * Test the property 'sceneChangeDetect'
     */
    @Test
    public void sceneChangeDetectTest() {
        // TODO: test sceneChangeDetect
    }

    /**
     * Test the property 'slices'
     */
    @Test
    public void slicesTest() {
        // TODO: test slices
    }

    /**
     * Test the property 'tier'
     */
    @Test
    public void tierTest() {
        // TODO: test tier
    }

    /**
     * Test the property 'timecodeInsertion'
     */
    @Test
    public void timecodeInsertionTest() {
        // TODO: test timecodeInsertion
    }

    /**
     * Test the property 'timecodeBurninSettings'
     */
    @Test
    public void timecodeBurninSettingsTest() {
        // TODO: test timecodeBurninSettings
    }

}
