/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDeleteRequest;
import org.openapitools.client.model.BatchDeleteResponse;
import org.openapitools.client.model.BatchStartRequest;
import org.openapitools.client.model.BatchStartResponse;
import org.openapitools.client.model.BatchStopResponse;
import org.openapitools.client.model.BatchUpdateScheduleRequest;
import org.openapitools.client.model.BatchUpdateScheduleResponse;
import org.openapitools.client.model.ClaimDeviceRequest;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.CreateInputRequest;
import org.openapitools.client.model.CreateInputResponse;
import org.openapitools.client.model.CreateInputSecurityGroupRequest;
import org.openapitools.client.model.CreateInputSecurityGroupResponse;
import org.openapitools.client.model.CreateMultiplexProgramRequest;
import org.openapitools.client.model.CreateMultiplexProgramResponse;
import org.openapitools.client.model.CreateMultiplexRequest;
import org.openapitools.client.model.CreateMultiplexResponse;
import org.openapitools.client.model.CreatePartnerInputRequest;
import org.openapitools.client.model.CreatePartnerInputResponse;
import org.openapitools.client.model.CreateTagsRequest;
import org.openapitools.client.model.DeleteChannelResponse;
import org.openapitools.client.model.DeleteMultiplexProgramResponse;
import org.openapitools.client.model.DeleteMultiplexResponse;
import org.openapitools.client.model.DeleteReservationResponse;
import org.openapitools.client.model.DescribeAccountConfigurationResponse;
import org.openapitools.client.model.DescribeChannelResponse;
import org.openapitools.client.model.DescribeInputDeviceResponse;
import org.openapitools.client.model.DescribeInputDeviceThumbnailResponse;
import org.openapitools.client.model.DescribeInputResponse;
import org.openapitools.client.model.DescribeInputSecurityGroupResponse;
import org.openapitools.client.model.DescribeMultiplexProgramResponse;
import org.openapitools.client.model.DescribeMultiplexResponse;
import org.openapitools.client.model.DescribeOfferingResponse;
import org.openapitools.client.model.DescribeReservationResponse;
import org.openapitools.client.model.DescribeScheduleResponse;
import org.openapitools.client.model.DescribeThumbnailsResponse;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListInputDeviceTransfersResponse;
import org.openapitools.client.model.ListInputDevicesResponse;
import org.openapitools.client.model.ListInputSecurityGroupsResponse;
import org.openapitools.client.model.ListInputsResponse;
import org.openapitools.client.model.ListMultiplexProgramsResponse;
import org.openapitools.client.model.ListMultiplexesResponse;
import org.openapitools.client.model.ListOfferingsResponse;
import org.openapitools.client.model.ListReservationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PurchaseOfferingRequest;
import org.openapitools.client.model.PurchaseOfferingResponse;
import org.openapitools.client.model.RebootInputDeviceRequest;
import org.openapitools.client.model.StartChannelResponse;
import org.openapitools.client.model.StartMultiplexResponse;
import org.openapitools.client.model.StopChannelResponse;
import org.openapitools.client.model.StopMultiplexResponse;
import org.openapitools.client.model.TransferInputDeviceRequest;
import org.openapitools.client.model.UpdateAccountConfigurationRequest;
import org.openapitools.client.model.UpdateAccountConfigurationResponse;
import org.openapitools.client.model.UpdateChannelClassRequest;
import org.openapitools.client.model.UpdateChannelClassResponse;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.openapitools.client.model.UpdateInputDeviceRequest;
import org.openapitools.client.model.UpdateInputDeviceResponse;
import org.openapitools.client.model.UpdateInputRequest;
import org.openapitools.client.model.UpdateInputResponse;
import org.openapitools.client.model.UpdateInputSecurityGroupResponse;
import org.openapitools.client.model.UpdateMultiplexProgramRequest;
import org.openapitools.client.model.UpdateMultiplexProgramResponse;
import org.openapitools.client.model.UpdateMultiplexRequest;
import org.openapitools.client.model.UpdateMultiplexResponse;
import org.openapitools.client.model.UpdateReservationRequest;
import org.openapitools.client.model.UpdateReservationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Accept an incoming input device transfer. The ownership of the device will transfer to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInputDeviceTransferTest() throws ApiException {
        String inputDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.acceptInputDeviceTransfer(inputDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts delete of resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteTest() throws ApiException {
        BatchDeleteRequest batchDeleteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteResponse response = api.batchDelete(batchDeleteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts existing resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchStartTest() throws ApiException {
        BatchStartRequest batchStartRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchStartResponse response = api.batchStart(batchStartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops running resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchStopTest() throws ApiException {
        BatchStartRequest batchStartRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchStopResponse response = api.batchStop(batchStartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a channel schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateScheduleTest() throws ApiException {
        String channelId = null;
        BatchUpdateScheduleRequest batchUpdateScheduleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateScheduleResponse response = api.batchUpdateSchedule(channelId, batchUpdateScheduleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancel an input device transfer that you have requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelInputDeviceTransferTest() throws ApiException {
        String inputDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelInputDeviceTransfer(inputDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Send a request to claim an AWS Elemental device that you have purchased from a third-party vendor. After the request succeeds, you will own the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimDeviceTest() throws ApiException {
        ClaimDeviceRequest claimDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.claimDevice(claimDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTest() throws ApiException {
        CreateChannelRequest createChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelResponse response = api.createChannel(createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create an input
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInputTest() throws ApiException {
        CreateInputRequest createInputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInputResponse response = api.createInput(createInputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Input Security Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInputSecurityGroupTest() throws ApiException {
        CreateInputSecurityGroupRequest createInputSecurityGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInputSecurityGroupResponse response = api.createInputSecurityGroup(createInputSecurityGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultiplexTest() throws ApiException {
        CreateMultiplexRequest createMultiplexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMultiplexResponse response = api.createMultiplex(createMultiplexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new program in the multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultiplexProgramTest() throws ApiException {
        String multiplexId = null;
        CreateMultiplexProgramRequest createMultiplexProgramRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMultiplexProgramResponse response = api.createMultiplexProgram(multiplexId, createMultiplexProgramRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a partner input
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPartnerInputTest() throws ApiException {
        String inputId = null;
        CreatePartnerInputRequest createPartnerInputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePartnerInputResponse response = api.createPartnerInput(inputId, createPartnerInputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create tags for a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagsTest() throws ApiException {
        String resourceArn = null;
        CreateTagsRequest createTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.createTags(resourceArn, createTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts deletion of channel. The associated outputs are also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String channelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteChannelResponse response = api.deleteChannel(channelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the input end point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInputTest() throws ApiException {
        String inputId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInput(inputId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Input Security Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInputSecurityGroupTest() throws ApiException {
        String inputSecurityGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInputSecurityGroup(inputSecurityGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a multiplex. The multiplex must be idle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultiplexTest() throws ApiException {
        String multiplexId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMultiplexResponse response = api.deleteMultiplex(multiplexId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a program from a multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMultiplexProgramTest() throws ApiException {
        String multiplexId = null;
        String programName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMultiplexProgramResponse response = api.deleteMultiplexProgram(multiplexId, programName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an expired reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReservationTest() throws ApiException {
        String reservationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteReservationResponse response = api.deleteReservation(reservationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete all schedule actions on a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScheduleTest() throws ApiException {
        String channelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSchedule(channelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags for a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagsTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteTags(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get account configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountConfigurationResponse response = api.describeAccountConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeChannelTest() throws ApiException {
        String channelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeChannelResponse response = api.describeChannel(channelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Produces details about an input
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInputTest() throws ApiException {
        String inputId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInputResponse response = api.describeInput(inputId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details for the input device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInputDeviceTest() throws ApiException {
        String inputDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInputDeviceResponse response = api.describeInputDevice(inputDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the latest thumbnail data for the input device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInputDeviceThumbnailTest() throws ApiException {
        String inputDeviceId = null;
        String accept = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInputDeviceThumbnailResponse response = api.describeInputDeviceThumbnail(inputDeviceId, accept, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Produces a summary of an Input Security Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInputSecurityGroupTest() throws ApiException {
        String inputSecurityGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInputSecurityGroupResponse response = api.describeInputSecurityGroup(inputSecurityGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMultiplexTest() throws ApiException {
        String multiplexId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMultiplexResponse response = api.describeMultiplex(multiplexId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the details for a program in a multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMultiplexProgramTest() throws ApiException {
        String multiplexId = null;
        String programName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMultiplexProgramResponse response = api.describeMultiplexProgram(multiplexId, programName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get details for an offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOfferingTest() throws ApiException {
        String offeringId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOfferingResponse response = api.describeOffering(offeringId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get details for a reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReservationTest() throws ApiException {
        String reservationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeReservationResponse response = api.describeReservation(reservationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a channel schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeScheduleTest() throws ApiException {
        String channelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        DescribeScheduleResponse response = api.describeSchedule(channelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Describe the latest thumbnails data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeThumbnailsTest() throws ApiException {
        String channelId = null;
        String pipelineId = null;
        String thumbnailType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeThumbnailsResponse response = api.describeThumbnails(channelId, pipelineId, thumbnailType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Produces list of channels that have been created
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChannelsResponse response = api.listChannels(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInputDeviceTransfersTest() throws ApiException {
        String transferType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInputDeviceTransfersResponse response = api.listInputDeviceTransfers(transferType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List input devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInputDevicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInputDevicesResponse response = api.listInputDevices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Produces a list of Input Security Groups for an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInputSecurityGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInputSecurityGroupsResponse response = api.listInputSecurityGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Produces list of inputs that have been created
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInputsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListInputsResponse response = api.listInputs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List the programs that currently exist for a specific multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultiplexProgramsTest() throws ApiException {
        String multiplexId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMultiplexProgramsResponse response = api.listMultiplexPrograms(multiplexId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Retrieve a list of the existing multiplexes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultiplexesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMultiplexesResponse response = api.listMultiplexes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List offerings available for purchase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfferingsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String channelClass = null;
        String channelConfiguration = null;
        String codec = null;
        String duration = null;
        Integer maxResults = null;
        String maximumBitrate = null;
        String maximumFramerate = null;
        String nextToken = null;
        String resolution = null;
        String resourceType = null;
        String specialFeature = null;
        String videoQuality = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListOfferingsResponse response = api.listOfferings(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, channelClass, channelConfiguration, codec, duration, maxResults, maximumBitrate, maximumFramerate, nextToken, resolution, resourceType, specialFeature, videoQuality, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List purchased reservations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReservationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String channelClass = null;
        String codec = null;
        Integer maxResults = null;
        String maximumBitrate = null;
        String maximumFramerate = null;
        String nextToken = null;
        String resolution = null;
        String resourceType = null;
        String specialFeature = null;
        String videoQuality = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListReservationsResponse response = api.listReservations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, channelClass, codec, maxResults, maximumBitrate, maximumFramerate, nextToken, resolution, resourceType, specialFeature, videoQuality, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Produces list of tags that have been created for a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Purchase an offering and create a reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseOfferingTest() throws ApiException {
        String offeringId = null;
        PurchaseOfferingRequest purchaseOfferingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseOfferingResponse response = api.purchaseOffering(offeringId, purchaseOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Send a reboot command to the specified input device. The device will begin rebooting within a few seconds of sending the command. When the reboot is complete, the device’s connection status will change to connected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootInputDeviceTest() throws ApiException {
        String inputDeviceId = null;
        RebootInputDeviceRequest rebootInputDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.rebootInputDevice(inputDeviceId, rebootInputDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Reject the transfer of the specified input device to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectInputDeviceTransferTest() throws ApiException {
        String inputDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.rejectInputDeviceTransfer(inputDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an existing channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startChannelTest() throws ApiException {
        String channelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartChannelResponse response = api.startChannel(channelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start a maintenance window for the specified input device. Starting a maintenance window will give the device up to two hours to install software. If the device was streaming prior to the maintenance, it will resume streaming when the software is fully installed. Devices automatically install updates while they are powered on and their MediaLive channels are stopped. A maintenance window allows you to update a device without having to stop MediaLive channels that use the device. The device must remain powered on and connected to the internet for the duration of the maintenance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startInputDeviceMaintenanceWindowTest() throws ApiException {
        String inputDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startInputDeviceMaintenanceWindow(inputDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMultiplexTest() throws ApiException {
        String multiplexId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMultiplexResponse response = api.startMultiplex(multiplexId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a running channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopChannelTest() throws ApiException {
        String channelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopChannelResponse response = api.stopChannel(channelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a running multiplex. If the multiplex isn&#39;t running, this action has no effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopMultiplexTest() throws ApiException {
        String multiplexId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopMultiplexResponse response = api.stopMultiplex(multiplexId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start an input device transfer to another AWS account. After you make the request, the other account must accept or reject the transfer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferInputDeviceTest() throws ApiException {
        String inputDeviceId = null;
        TransferInputDeviceRequest transferInputDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.transferInputDevice(inputDeviceId, transferInputDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update account configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountConfigurationTest() throws ApiException {
        UpdateAccountConfigurationRequest updateAccountConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAccountConfigurationResponse response = api.updateAccountConfiguration(updateAccountConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String channelId = null;
        UpdateChannelRequest updateChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelResponse response = api.updateChannel(channelId, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the class of the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelClassTest() throws ApiException {
        String channelId = null;
        UpdateChannelClassRequest updateChannelClassRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelClassResponse response = api.updateChannelClass(channelId, updateChannelClassRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInputTest() throws ApiException {
        String inputId = null;
        UpdateInputRequest updateInputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInputResponse response = api.updateInput(inputId, updateInputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the parameters for the input device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInputDeviceTest() throws ApiException {
        String inputDeviceId = null;
        UpdateInputDeviceRequest updateInputDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInputDeviceResponse response = api.updateInputDevice(inputDeviceId, updateInputDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update an Input Security Group&#39;s Whilelists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInputSecurityGroupTest() throws ApiException {
        String inputSecurityGroupId = null;
        CreateInputSecurityGroupRequest createInputSecurityGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInputSecurityGroupResponse response = api.updateInputSecurityGroup(inputSecurityGroupId, createInputSecurityGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMultiplexTest() throws ApiException {
        String multiplexId = null;
        UpdateMultiplexRequest updateMultiplexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMultiplexResponse response = api.updateMultiplex(multiplexId, updateMultiplexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a program in a multiplex.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMultiplexProgramTest() throws ApiException {
        String multiplexId = null;
        String programName = null;
        UpdateMultiplexProgramRequest updateMultiplexProgramRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMultiplexProgramResponse response = api.updateMultiplexProgram(multiplexId, programName, updateMultiplexProgramRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReservationTest() throws ApiException {
        String reservationId = null;
        UpdateReservationRequest updateReservationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateReservationResponse response = api.updateReservation(reservationId, updateReservationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
