/*
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AfdSignaling;
import org.openapitools.client.model.FixedAfd;
import org.openapitools.client.model.FrameCaptureSettingsTimecodeBurninSettings;
import org.openapitools.client.model.H264AdaptiveQuantization;
import org.openapitools.client.model.H264ColorMetadata;
import org.openapitools.client.model.H264EntropyEncoding;
import org.openapitools.client.model.H264FlickerAq;
import org.openapitools.client.model.H264ForceFieldPictures;
import org.openapitools.client.model.H264FramerateControl;
import org.openapitools.client.model.H264GopBReference;
import org.openapitools.client.model.H264GopSizeUnits;
import org.openapitools.client.model.H264Level;
import org.openapitools.client.model.H264LookAheadRateControl;
import org.openapitools.client.model.H264ParControl;
import org.openapitools.client.model.H264Profile;
import org.openapitools.client.model.H264QualityLevel;
import org.openapitools.client.model.H264RateControlMode;
import org.openapitools.client.model.H264ScanType;
import org.openapitools.client.model.H264SceneChangeDetect;
import org.openapitools.client.model.H264SettingsColorSpaceSettings;
import org.openapitools.client.model.H264SettingsFilterSettings;
import org.openapitools.client.model.H264SpatialAq;
import org.openapitools.client.model.H264SubGopLength;
import org.openapitools.client.model.H264Syntax;
import org.openapitools.client.model.H264TemporalAq;
import org.openapitools.client.model.H264TimecodeInsertionBehavior;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VideoCodecSettingsH264Settings
 */
public class VideoCodecSettingsH264SettingsTest {
    private final VideoCodecSettingsH264Settings model = new VideoCodecSettingsH264Settings();

    /**
     * Model tests for VideoCodecSettingsH264Settings
     */
    @Test
    public void testVideoCodecSettingsH264Settings() {
        // TODO: test VideoCodecSettingsH264Settings
    }

    /**
     * Test the property 'adaptiveQuantization'
     */
    @Test
    public void adaptiveQuantizationTest() {
        // TODO: test adaptiveQuantization
    }

    /**
     * Test the property 'afdSignaling'
     */
    @Test
    public void afdSignalingTest() {
        // TODO: test afdSignaling
    }

    /**
     * Test the property 'bitrate'
     */
    @Test
    public void bitrateTest() {
        // TODO: test bitrate
    }

    /**
     * Test the property 'bufFillPct'
     */
    @Test
    public void bufFillPctTest() {
        // TODO: test bufFillPct
    }

    /**
     * Test the property 'bufSize'
     */
    @Test
    public void bufSizeTest() {
        // TODO: test bufSize
    }

    /**
     * Test the property 'colorMetadata'
     */
    @Test
    public void colorMetadataTest() {
        // TODO: test colorMetadata
    }

    /**
     * Test the property 'colorSpaceSettings'
     */
    @Test
    public void colorSpaceSettingsTest() {
        // TODO: test colorSpaceSettings
    }

    /**
     * Test the property 'entropyEncoding'
     */
    @Test
    public void entropyEncodingTest() {
        // TODO: test entropyEncoding
    }

    /**
     * Test the property 'filterSettings'
     */
    @Test
    public void filterSettingsTest() {
        // TODO: test filterSettings
    }

    /**
     * Test the property 'fixedAfd'
     */
    @Test
    public void fixedAfdTest() {
        // TODO: test fixedAfd
    }

    /**
     * Test the property 'flickerAq'
     */
    @Test
    public void flickerAqTest() {
        // TODO: test flickerAq
    }

    /**
     * Test the property 'forceFieldPictures'
     */
    @Test
    public void forceFieldPicturesTest() {
        // TODO: test forceFieldPictures
    }

    /**
     * Test the property 'framerateControl'
     */
    @Test
    public void framerateControlTest() {
        // TODO: test framerateControl
    }

    /**
     * Test the property 'framerateDenominator'
     */
    @Test
    public void framerateDenominatorTest() {
        // TODO: test framerateDenominator
    }

    /**
     * Test the property 'framerateNumerator'
     */
    @Test
    public void framerateNumeratorTest() {
        // TODO: test framerateNumerator
    }

    /**
     * Test the property 'gopBReference'
     */
    @Test
    public void gopBReferenceTest() {
        // TODO: test gopBReference
    }

    /**
     * Test the property 'gopClosedCadence'
     */
    @Test
    public void gopClosedCadenceTest() {
        // TODO: test gopClosedCadence
    }

    /**
     * Test the property 'gopNumBFrames'
     */
    @Test
    public void gopNumBFramesTest() {
        // TODO: test gopNumBFrames
    }

    /**
     * Test the property 'gopSize'
     */
    @Test
    public void gopSizeTest() {
        // TODO: test gopSize
    }

    /**
     * Test the property 'gopSizeUnits'
     */
    @Test
    public void gopSizeUnitsTest() {
        // TODO: test gopSizeUnits
    }

    /**
     * Test the property 'level'
     */
    @Test
    public void levelTest() {
        // TODO: test level
    }

    /**
     * Test the property 'lookAheadRateControl'
     */
    @Test
    public void lookAheadRateControlTest() {
        // TODO: test lookAheadRateControl
    }

    /**
     * Test the property 'maxBitrate'
     */
    @Test
    public void maxBitrateTest() {
        // TODO: test maxBitrate
    }

    /**
     * Test the property 'minIInterval'
     */
    @Test
    public void minIIntervalTest() {
        // TODO: test minIInterval
    }

    /**
     * Test the property 'numRefFrames'
     */
    @Test
    public void numRefFramesTest() {
        // TODO: test numRefFrames
    }

    /**
     * Test the property 'parControl'
     */
    @Test
    public void parControlTest() {
        // TODO: test parControl
    }

    /**
     * Test the property 'parDenominator'
     */
    @Test
    public void parDenominatorTest() {
        // TODO: test parDenominator
    }

    /**
     * Test the property 'parNumerator'
     */
    @Test
    public void parNumeratorTest() {
        // TODO: test parNumerator
    }

    /**
     * Test the property 'profile'
     */
    @Test
    public void profileTest() {
        // TODO: test profile
    }

    /**
     * Test the property 'qualityLevel'
     */
    @Test
    public void qualityLevelTest() {
        // TODO: test qualityLevel
    }

    /**
     * Test the property 'qvbrQualityLevel'
     */
    @Test
    public void qvbrQualityLevelTest() {
        // TODO: test qvbrQualityLevel
    }

    /**
     * Test the property 'rateControlMode'
     */
    @Test
    public void rateControlModeTest() {
        // TODO: test rateControlMode
    }

    /**
     * Test the property 'scanType'
     */
    @Test
    public void scanTypeTest() {
        // TODO: test scanType
    }

    /**
     * Test the property 'sceneChangeDetect'
     */
    @Test
    public void sceneChangeDetectTest() {
        // TODO: test sceneChangeDetect
    }

    /**
     * Test the property 'slices'
     */
    @Test
    public void slicesTest() {
        // TODO: test slices
    }

    /**
     * Test the property 'softness'
     */
    @Test
    public void softnessTest() {
        // TODO: test softness
    }

    /**
     * Test the property 'spatialAq'
     */
    @Test
    public void spatialAqTest() {
        // TODO: test spatialAq
    }

    /**
     * Test the property 'subgopLength'
     */
    @Test
    public void subgopLengthTest() {
        // TODO: test subgopLength
    }

    /**
     * Test the property 'syntax'
     */
    @Test
    public void syntaxTest() {
        // TODO: test syntax
    }

    /**
     * Test the property 'temporalAq'
     */
    @Test
    public void temporalAqTest() {
        // TODO: test temporalAq
    }

    /**
     * Test the property 'timecodeInsertion'
     */
    @Test
    public void timecodeInsertionTest() {
        // TODO: test timecodeInsertion
    }

    /**
     * Test the property 'timecodeBurninSettings'
     */
    @Test
    public void timecodeBurninSettingsTest() {
        // TODO: test timecodeBurninSettings
    }

}
