# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoBlackFailoverSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, black_detect_threshold: float=None, video_black_threshold_msec: int=None):
        """VideoBlackFailoverSettings - a model defined in OpenAPI

        :param black_detect_threshold: The black_detect_threshold of this VideoBlackFailoverSettings.
        :param video_black_threshold_msec: The video_black_threshold_msec of this VideoBlackFailoverSettings.
        """
        self.openapi_types = {
            'black_detect_threshold': float,
            'video_black_threshold_msec': int
        }

        self.attribute_map = {
            'black_detect_threshold': 'BlackDetectThreshold',
            'video_black_threshold_msec': 'VideoBlackThresholdMsec'
        }

        self._black_detect_threshold = black_detect_threshold
        self._video_black_threshold_msec = video_black_threshold_msec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoBlackFailoverSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoBlackFailoverSettings of this VideoBlackFailoverSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def black_detect_threshold(self):
        """Gets the black_detect_threshold of this VideoBlackFailoverSettings.


        :return: The black_detect_threshold of this VideoBlackFailoverSettings.
        :rtype: float
        """
        return self._black_detect_threshold

    @black_detect_threshold.setter
    def black_detect_threshold(self, black_detect_threshold):
        """Sets the black_detect_threshold of this VideoBlackFailoverSettings.


        :param black_detect_threshold: The black_detect_threshold of this VideoBlackFailoverSettings.
        :type black_detect_threshold: float
        """

        self._black_detect_threshold = black_detect_threshold

    @property
    def video_black_threshold_msec(self):
        """Gets the video_black_threshold_msec of this VideoBlackFailoverSettings.


        :return: The video_black_threshold_msec of this VideoBlackFailoverSettings.
        :rtype: int
        """
        return self._video_black_threshold_msec

    @video_black_threshold_msec.setter
    def video_black_threshold_msec(self, video_black_threshold_msec):
        """Sets the video_black_threshold_msec of this VideoBlackFailoverSettings.


        :param video_black_threshold_msec: The video_black_threshold_msec of this VideoBlackFailoverSettings.
        :type video_black_threshold_msec: int
        """

        self._video_black_threshold_msec = video_black_threshold_msec
