# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_device_active_input import InputDeviceActiveInput
from openapi_server.models.input_device_configured_input import InputDeviceConfiguredInput
from openapi_server.models.input_device_scan_type import InputDeviceScanType
from openapi_server.models.input_device_state import InputDeviceState
from openapi_server import util


class InputDeviceUhdSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_input: InputDeviceActiveInput=None, configured_input: InputDeviceConfiguredInput=None, device_state: InputDeviceState=None, framerate: float=None, height: int=None, max_bitrate: int=None, scan_type: InputDeviceScanType=None, width: int=None, latency_ms: int=None):
        """InputDeviceUhdSettings - a model defined in OpenAPI

        :param active_input: The active_input of this InputDeviceUhdSettings.
        :param configured_input: The configured_input of this InputDeviceUhdSettings.
        :param device_state: The device_state of this InputDeviceUhdSettings.
        :param framerate: The framerate of this InputDeviceUhdSettings.
        :param height: The height of this InputDeviceUhdSettings.
        :param max_bitrate: The max_bitrate of this InputDeviceUhdSettings.
        :param scan_type: The scan_type of this InputDeviceUhdSettings.
        :param width: The width of this InputDeviceUhdSettings.
        :param latency_ms: The latency_ms of this InputDeviceUhdSettings.
        """
        self.openapi_types = {
            'active_input': InputDeviceActiveInput,
            'configured_input': InputDeviceConfiguredInput,
            'device_state': InputDeviceState,
            'framerate': float,
            'height': int,
            'max_bitrate': int,
            'scan_type': InputDeviceScanType,
            'width': int,
            'latency_ms': int
        }

        self.attribute_map = {
            'active_input': 'ActiveInput',
            'configured_input': 'ConfiguredInput',
            'device_state': 'DeviceState',
            'framerate': 'Framerate',
            'height': 'Height',
            'max_bitrate': 'MaxBitrate',
            'scan_type': 'ScanType',
            'width': 'Width',
            'latency_ms': 'LatencyMs'
        }

        self._active_input = active_input
        self._configured_input = configured_input
        self._device_state = device_state
        self._framerate = framerate
        self._height = height
        self._max_bitrate = max_bitrate
        self._scan_type = scan_type
        self._width = width
        self._latency_ms = latency_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputDeviceUhdSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputDeviceUhdSettings of this InputDeviceUhdSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_input(self):
        """Gets the active_input of this InputDeviceUhdSettings.


        :return: The active_input of this InputDeviceUhdSettings.
        :rtype: InputDeviceActiveInput
        """
        return self._active_input

    @active_input.setter
    def active_input(self, active_input):
        """Sets the active_input of this InputDeviceUhdSettings.


        :param active_input: The active_input of this InputDeviceUhdSettings.
        :type active_input: InputDeviceActiveInput
        """

        self._active_input = active_input

    @property
    def configured_input(self):
        """Gets the configured_input of this InputDeviceUhdSettings.


        :return: The configured_input of this InputDeviceUhdSettings.
        :rtype: InputDeviceConfiguredInput
        """
        return self._configured_input

    @configured_input.setter
    def configured_input(self, configured_input):
        """Sets the configured_input of this InputDeviceUhdSettings.


        :param configured_input: The configured_input of this InputDeviceUhdSettings.
        :type configured_input: InputDeviceConfiguredInput
        """

        self._configured_input = configured_input

    @property
    def device_state(self):
        """Gets the device_state of this InputDeviceUhdSettings.


        :return: The device_state of this InputDeviceUhdSettings.
        :rtype: InputDeviceState
        """
        return self._device_state

    @device_state.setter
    def device_state(self, device_state):
        """Sets the device_state of this InputDeviceUhdSettings.


        :param device_state: The device_state of this InputDeviceUhdSettings.
        :type device_state: InputDeviceState
        """

        self._device_state = device_state

    @property
    def framerate(self):
        """Gets the framerate of this InputDeviceUhdSettings.


        :return: The framerate of this InputDeviceUhdSettings.
        :rtype: float
        """
        return self._framerate

    @framerate.setter
    def framerate(self, framerate):
        """Sets the framerate of this InputDeviceUhdSettings.


        :param framerate: The framerate of this InputDeviceUhdSettings.
        :type framerate: float
        """

        self._framerate = framerate

    @property
    def height(self):
        """Gets the height of this InputDeviceUhdSettings.


        :return: The height of this InputDeviceUhdSettings.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InputDeviceUhdSettings.


        :param height: The height of this InputDeviceUhdSettings.
        :type height: int
        """

        self._height = height

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this InputDeviceUhdSettings.


        :return: The max_bitrate of this InputDeviceUhdSettings.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this InputDeviceUhdSettings.


        :param max_bitrate: The max_bitrate of this InputDeviceUhdSettings.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def scan_type(self):
        """Gets the scan_type of this InputDeviceUhdSettings.


        :return: The scan_type of this InputDeviceUhdSettings.
        :rtype: InputDeviceScanType
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this InputDeviceUhdSettings.


        :param scan_type: The scan_type of this InputDeviceUhdSettings.
        :type scan_type: InputDeviceScanType
        """

        self._scan_type = scan_type

    @property
    def width(self):
        """Gets the width of this InputDeviceUhdSettings.


        :return: The width of this InputDeviceUhdSettings.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InputDeviceUhdSettings.


        :param width: The width of this InputDeviceUhdSettings.
        :type width: int
        """

        self._width = width

    @property
    def latency_ms(self):
        """Gets the latency_ms of this InputDeviceUhdSettings.


        :return: The latency_ms of this InputDeviceUhdSettings.
        :rtype: int
        """
        return self._latency_ms

    @latency_ms.setter
    def latency_ms(self, latency_ms):
        """Sets the latency_ms of this InputDeviceUhdSettings.


        :param latency_ms: The latency_ms of this InputDeviceUhdSettings.
        :type latency_ms: int
        """

        self._latency_ms = latency_ms
