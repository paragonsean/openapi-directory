# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DvbNitSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_id: int=None, network_name: str=None, rep_interval: int=None):
        """DvbNitSettings - a model defined in OpenAPI

        :param network_id: The network_id of this DvbNitSettings.
        :param network_name: The network_name of this DvbNitSettings.
        :param rep_interval: The rep_interval of this DvbNitSettings.
        """
        self.openapi_types = {
            'network_id': int,
            'network_name': str,
            'rep_interval': int
        }

        self.attribute_map = {
            'network_id': 'NetworkId',
            'network_name': 'NetworkName',
            'rep_interval': 'RepInterval'
        }

        self._network_id = network_id
        self._network_name = network_name
        self._rep_interval = rep_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DvbNitSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DvbNitSettings of this DvbNitSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_id(self):
        """Gets the network_id of this DvbNitSettings.


        :return: The network_id of this DvbNitSettings.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this DvbNitSettings.


        :param network_id: The network_id of this DvbNitSettings.
        :type network_id: int
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")

        self._network_id = network_id

    @property
    def network_name(self):
        """Gets the network_name of this DvbNitSettings.


        :return: The network_name of this DvbNitSettings.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this DvbNitSettings.


        :param network_name: The network_name of this DvbNitSettings.
        :type network_name: str
        """
        if network_name is None:
            raise ValueError("Invalid value for `network_name`, must not be `None`")

        self._network_name = network_name

    @property
    def rep_interval(self):
        """Gets the rep_interval of this DvbNitSettings.


        :return: The rep_interval of this DvbNitSettings.
        :rtype: int
        """
        return self._rep_interval

    @rep_interval.setter
    def rep_interval(self, rep_interval):
        """Sets the rep_interval of this DvbNitSettings.


        :param rep_interval: The rep_interval of this DvbNitSettings.
        :type rep_interval: int
        """

        self._rep_interval = rep_interval
