# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_multiplex_program_response_multiplex_program_settings import DeleteMultiplexProgramResponseMultiplexProgramSettings
from openapi_server.models.delete_multiplex_program_response_packet_identifiers_map import DeleteMultiplexProgramResponsePacketIdentifiersMap
from openapi_server import util


class DescribeMultiplexProgramResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, multiplex_program_settings: DeleteMultiplexProgramResponseMultiplexProgramSettings=None, packet_identifiers_map: DeleteMultiplexProgramResponsePacketIdentifiersMap=None, pipeline_details: List=None, program_name: str=None):
        """DescribeMultiplexProgramResponse - a model defined in OpenAPI

        :param channel_id: The channel_id of this DescribeMultiplexProgramResponse.
        :param multiplex_program_settings: The multiplex_program_settings of this DescribeMultiplexProgramResponse.
        :param packet_identifiers_map: The packet_identifiers_map of this DescribeMultiplexProgramResponse.
        :param pipeline_details: The pipeline_details of this DescribeMultiplexProgramResponse.
        :param program_name: The program_name of this DescribeMultiplexProgramResponse.
        """
        self.openapi_types = {
            'channel_id': str,
            'multiplex_program_settings': DeleteMultiplexProgramResponseMultiplexProgramSettings,
            'packet_identifiers_map': DeleteMultiplexProgramResponsePacketIdentifiersMap,
            'pipeline_details': List,
            'program_name': str
        }

        self.attribute_map = {
            'channel_id': 'ChannelId',
            'multiplex_program_settings': 'MultiplexProgramSettings',
            'packet_identifiers_map': 'PacketIdentifiersMap',
            'pipeline_details': 'PipelineDetails',
            'program_name': 'ProgramName'
        }

        self._channel_id = channel_id
        self._multiplex_program_settings = multiplex_program_settings
        self._packet_identifiers_map = packet_identifiers_map
        self._pipeline_details = pipeline_details
        self._program_name = program_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeMultiplexProgramResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeMultiplexProgramResponse of this DescribeMultiplexProgramResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this DescribeMultiplexProgramResponse.


        :return: The channel_id of this DescribeMultiplexProgramResponse.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this DescribeMultiplexProgramResponse.


        :param channel_id: The channel_id of this DescribeMultiplexProgramResponse.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def multiplex_program_settings(self):
        """Gets the multiplex_program_settings of this DescribeMultiplexProgramResponse.


        :return: The multiplex_program_settings of this DescribeMultiplexProgramResponse.
        :rtype: DeleteMultiplexProgramResponseMultiplexProgramSettings
        """
        return self._multiplex_program_settings

    @multiplex_program_settings.setter
    def multiplex_program_settings(self, multiplex_program_settings):
        """Sets the multiplex_program_settings of this DescribeMultiplexProgramResponse.


        :param multiplex_program_settings: The multiplex_program_settings of this DescribeMultiplexProgramResponse.
        :type multiplex_program_settings: DeleteMultiplexProgramResponseMultiplexProgramSettings
        """

        self._multiplex_program_settings = multiplex_program_settings

    @property
    def packet_identifiers_map(self):
        """Gets the packet_identifiers_map of this DescribeMultiplexProgramResponse.


        :return: The packet_identifiers_map of this DescribeMultiplexProgramResponse.
        :rtype: DeleteMultiplexProgramResponsePacketIdentifiersMap
        """
        return self._packet_identifiers_map

    @packet_identifiers_map.setter
    def packet_identifiers_map(self, packet_identifiers_map):
        """Sets the packet_identifiers_map of this DescribeMultiplexProgramResponse.


        :param packet_identifiers_map: The packet_identifiers_map of this DescribeMultiplexProgramResponse.
        :type packet_identifiers_map: DeleteMultiplexProgramResponsePacketIdentifiersMap
        """

        self._packet_identifiers_map = packet_identifiers_map

    @property
    def pipeline_details(self):
        """Gets the pipeline_details of this DescribeMultiplexProgramResponse.


        :return: The pipeline_details of this DescribeMultiplexProgramResponse.
        :rtype: List
        """
        return self._pipeline_details

    @pipeline_details.setter
    def pipeline_details(self, pipeline_details):
        """Sets the pipeline_details of this DescribeMultiplexProgramResponse.


        :param pipeline_details: The pipeline_details of this DescribeMultiplexProgramResponse.
        :type pipeline_details: List
        """

        self._pipeline_details = pipeline_details

    @property
    def program_name(self):
        """Gets the program_name of this DescribeMultiplexProgramResponse.


        :return: The program_name of this DescribeMultiplexProgramResponse.
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this DescribeMultiplexProgramResponse.


        :param program_name: The program_name of this DescribeMultiplexProgramResponse.
        :type program_name: str
        """

        self._program_name = program_name
