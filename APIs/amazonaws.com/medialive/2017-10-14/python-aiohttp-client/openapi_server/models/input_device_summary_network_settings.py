# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_device_ip_scheme import InputDeviceIpScheme
from openapi_server import util


class InputDeviceSummaryNetworkSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_addresses: List=None, gateway: str=None, ip_address: str=None, ip_scheme: InputDeviceIpScheme=None, subnet_mask: str=None):
        """InputDeviceSummaryNetworkSettings - a model defined in OpenAPI

        :param dns_addresses: The dns_addresses of this InputDeviceSummaryNetworkSettings.
        :param gateway: The gateway of this InputDeviceSummaryNetworkSettings.
        :param ip_address: The ip_address of this InputDeviceSummaryNetworkSettings.
        :param ip_scheme: The ip_scheme of this InputDeviceSummaryNetworkSettings.
        :param subnet_mask: The subnet_mask of this InputDeviceSummaryNetworkSettings.
        """
        self.openapi_types = {
            'dns_addresses': List,
            'gateway': str,
            'ip_address': str,
            'ip_scheme': InputDeviceIpScheme,
            'subnet_mask': str
        }

        self.attribute_map = {
            'dns_addresses': 'DnsAddresses',
            'gateway': 'Gateway',
            'ip_address': 'IpAddress',
            'ip_scheme': 'IpScheme',
            'subnet_mask': 'SubnetMask'
        }

        self._dns_addresses = dns_addresses
        self._gateway = gateway
        self._ip_address = ip_address
        self._ip_scheme = ip_scheme
        self._subnet_mask = subnet_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputDeviceSummaryNetworkSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputDeviceSummary_NetworkSettings of this InputDeviceSummaryNetworkSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_addresses(self):
        """Gets the dns_addresses of this InputDeviceSummaryNetworkSettings.


        :return: The dns_addresses of this InputDeviceSummaryNetworkSettings.
        :rtype: List
        """
        return self._dns_addresses

    @dns_addresses.setter
    def dns_addresses(self, dns_addresses):
        """Sets the dns_addresses of this InputDeviceSummaryNetworkSettings.


        :param dns_addresses: The dns_addresses of this InputDeviceSummaryNetworkSettings.
        :type dns_addresses: List
        """

        self._dns_addresses = dns_addresses

    @property
    def gateway(self):
        """Gets the gateway of this InputDeviceSummaryNetworkSettings.


        :return: The gateway of this InputDeviceSummaryNetworkSettings.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this InputDeviceSummaryNetworkSettings.


        :param gateway: The gateway of this InputDeviceSummaryNetworkSettings.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this InputDeviceSummaryNetworkSettings.


        :return: The ip_address of this InputDeviceSummaryNetworkSettings.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InputDeviceSummaryNetworkSettings.


        :param ip_address: The ip_address of this InputDeviceSummaryNetworkSettings.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def ip_scheme(self):
        """Gets the ip_scheme of this InputDeviceSummaryNetworkSettings.


        :return: The ip_scheme of this InputDeviceSummaryNetworkSettings.
        :rtype: InputDeviceIpScheme
        """
        return self._ip_scheme

    @ip_scheme.setter
    def ip_scheme(self, ip_scheme):
        """Sets the ip_scheme of this InputDeviceSummaryNetworkSettings.


        :param ip_scheme: The ip_scheme of this InputDeviceSummaryNetworkSettings.
        :type ip_scheme: InputDeviceIpScheme
        """

        self._ip_scheme = ip_scheme

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this InputDeviceSummaryNetworkSettings.


        :return: The subnet_mask of this InputDeviceSummaryNetworkSettings.
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this InputDeviceSummaryNetworkSettings.


        :param subnet_mask: The subnet_mask of this InputDeviceSummaryNetworkSettings.
        :type subnet_mask: str
        """

        self._subnet_mask = subnet_mask
