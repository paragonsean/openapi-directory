# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.afd_signaling import AfdSignaling
from openapi_server.models.fixed_afd import FixedAfd
from openapi_server.models.frame_capture_settings_timecode_burnin_settings import FrameCaptureSettingsTimecodeBurninSettings
from openapi_server.models.h264_adaptive_quantization import H264AdaptiveQuantization
from openapi_server.models.h264_color_metadata import H264ColorMetadata
from openapi_server.models.h264_entropy_encoding import H264EntropyEncoding
from openapi_server.models.h264_flicker_aq import H264FlickerAq
from openapi_server.models.h264_force_field_pictures import H264ForceFieldPictures
from openapi_server.models.h264_framerate_control import H264FramerateControl
from openapi_server.models.h264_gop_b_reference import H264GopBReference
from openapi_server.models.h264_gop_size_units import H264GopSizeUnits
from openapi_server.models.h264_level import H264Level
from openapi_server.models.h264_look_ahead_rate_control import H264LookAheadRateControl
from openapi_server.models.h264_par_control import H264ParControl
from openapi_server.models.h264_profile import H264Profile
from openapi_server.models.h264_quality_level import H264QualityLevel
from openapi_server.models.h264_rate_control_mode import H264RateControlMode
from openapi_server.models.h264_scan_type import H264ScanType
from openapi_server.models.h264_scene_change_detect import H264SceneChangeDetect
from openapi_server.models.h264_settings_color_space_settings import H264SettingsColorSpaceSettings
from openapi_server.models.h264_settings_filter_settings import H264SettingsFilterSettings
from openapi_server.models.h264_spatial_aq import H264SpatialAq
from openapi_server.models.h264_sub_gop_length import H264SubGopLength
from openapi_server.models.h264_syntax import H264Syntax
from openapi_server.models.h264_temporal_aq import H264TemporalAq
from openapi_server.models.h264_timecode_insertion_behavior import H264TimecodeInsertionBehavior
from openapi_server import util


class VideoCodecSettingsH264Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adaptive_quantization: H264AdaptiveQuantization=None, afd_signaling: AfdSignaling=None, bitrate: int=None, buf_fill_pct: int=None, buf_size: int=None, color_metadata: H264ColorMetadata=None, color_space_settings: H264SettingsColorSpaceSettings=None, entropy_encoding: H264EntropyEncoding=None, filter_settings: H264SettingsFilterSettings=None, fixed_afd: FixedAfd=None, flicker_aq: H264FlickerAq=None, force_field_pictures: H264ForceFieldPictures=None, framerate_control: H264FramerateControl=None, framerate_denominator: int=None, framerate_numerator: int=None, gop_b_reference: H264GopBReference=None, gop_closed_cadence: int=None, gop_num_b_frames: int=None, gop_size: float=None, gop_size_units: H264GopSizeUnits=None, level: H264Level=None, look_ahead_rate_control: H264LookAheadRateControl=None, max_bitrate: int=None, min_i_interval: int=None, num_ref_frames: int=None, par_control: H264ParControl=None, par_denominator: int=None, par_numerator: int=None, profile: H264Profile=None, quality_level: H264QualityLevel=None, qvbr_quality_level: int=None, rate_control_mode: H264RateControlMode=None, scan_type: H264ScanType=None, scene_change_detect: H264SceneChangeDetect=None, slices: int=None, softness: int=None, spatial_aq: H264SpatialAq=None, subgop_length: H264SubGopLength=None, syntax: H264Syntax=None, temporal_aq: H264TemporalAq=None, timecode_insertion: H264TimecodeInsertionBehavior=None, timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings=None):
        """VideoCodecSettingsH264Settings - a model defined in OpenAPI

        :param adaptive_quantization: The adaptive_quantization of this VideoCodecSettingsH264Settings.
        :param afd_signaling: The afd_signaling of this VideoCodecSettingsH264Settings.
        :param bitrate: The bitrate of this VideoCodecSettingsH264Settings.
        :param buf_fill_pct: The buf_fill_pct of this VideoCodecSettingsH264Settings.
        :param buf_size: The buf_size of this VideoCodecSettingsH264Settings.
        :param color_metadata: The color_metadata of this VideoCodecSettingsH264Settings.
        :param color_space_settings: The color_space_settings of this VideoCodecSettingsH264Settings.
        :param entropy_encoding: The entropy_encoding of this VideoCodecSettingsH264Settings.
        :param filter_settings: The filter_settings of this VideoCodecSettingsH264Settings.
        :param fixed_afd: The fixed_afd of this VideoCodecSettingsH264Settings.
        :param flicker_aq: The flicker_aq of this VideoCodecSettingsH264Settings.
        :param force_field_pictures: The force_field_pictures of this VideoCodecSettingsH264Settings.
        :param framerate_control: The framerate_control of this VideoCodecSettingsH264Settings.
        :param framerate_denominator: The framerate_denominator of this VideoCodecSettingsH264Settings.
        :param framerate_numerator: The framerate_numerator of this VideoCodecSettingsH264Settings.
        :param gop_b_reference: The gop_b_reference of this VideoCodecSettingsH264Settings.
        :param gop_closed_cadence: The gop_closed_cadence of this VideoCodecSettingsH264Settings.
        :param gop_num_b_frames: The gop_num_b_frames of this VideoCodecSettingsH264Settings.
        :param gop_size: The gop_size of this VideoCodecSettingsH264Settings.
        :param gop_size_units: The gop_size_units of this VideoCodecSettingsH264Settings.
        :param level: The level of this VideoCodecSettingsH264Settings.
        :param look_ahead_rate_control: The look_ahead_rate_control of this VideoCodecSettingsH264Settings.
        :param max_bitrate: The max_bitrate of this VideoCodecSettingsH264Settings.
        :param min_i_interval: The min_i_interval of this VideoCodecSettingsH264Settings.
        :param num_ref_frames: The num_ref_frames of this VideoCodecSettingsH264Settings.
        :param par_control: The par_control of this VideoCodecSettingsH264Settings.
        :param par_denominator: The par_denominator of this VideoCodecSettingsH264Settings.
        :param par_numerator: The par_numerator of this VideoCodecSettingsH264Settings.
        :param profile: The profile of this VideoCodecSettingsH264Settings.
        :param quality_level: The quality_level of this VideoCodecSettingsH264Settings.
        :param qvbr_quality_level: The qvbr_quality_level of this VideoCodecSettingsH264Settings.
        :param rate_control_mode: The rate_control_mode of this VideoCodecSettingsH264Settings.
        :param scan_type: The scan_type of this VideoCodecSettingsH264Settings.
        :param scene_change_detect: The scene_change_detect of this VideoCodecSettingsH264Settings.
        :param slices: The slices of this VideoCodecSettingsH264Settings.
        :param softness: The softness of this VideoCodecSettingsH264Settings.
        :param spatial_aq: The spatial_aq of this VideoCodecSettingsH264Settings.
        :param subgop_length: The subgop_length of this VideoCodecSettingsH264Settings.
        :param syntax: The syntax of this VideoCodecSettingsH264Settings.
        :param temporal_aq: The temporal_aq of this VideoCodecSettingsH264Settings.
        :param timecode_insertion: The timecode_insertion of this VideoCodecSettingsH264Settings.
        :param timecode_burnin_settings: The timecode_burnin_settings of this VideoCodecSettingsH264Settings.
        """
        self.openapi_types = {
            'adaptive_quantization': H264AdaptiveQuantization,
            'afd_signaling': AfdSignaling,
            'bitrate': int,
            'buf_fill_pct': int,
            'buf_size': int,
            'color_metadata': H264ColorMetadata,
            'color_space_settings': H264SettingsColorSpaceSettings,
            'entropy_encoding': H264EntropyEncoding,
            'filter_settings': H264SettingsFilterSettings,
            'fixed_afd': FixedAfd,
            'flicker_aq': H264FlickerAq,
            'force_field_pictures': H264ForceFieldPictures,
            'framerate_control': H264FramerateControl,
            'framerate_denominator': int,
            'framerate_numerator': int,
            'gop_b_reference': H264GopBReference,
            'gop_closed_cadence': int,
            'gop_num_b_frames': int,
            'gop_size': float,
            'gop_size_units': H264GopSizeUnits,
            'level': H264Level,
            'look_ahead_rate_control': H264LookAheadRateControl,
            'max_bitrate': int,
            'min_i_interval': int,
            'num_ref_frames': int,
            'par_control': H264ParControl,
            'par_denominator': int,
            'par_numerator': int,
            'profile': H264Profile,
            'quality_level': H264QualityLevel,
            'qvbr_quality_level': int,
            'rate_control_mode': H264RateControlMode,
            'scan_type': H264ScanType,
            'scene_change_detect': H264SceneChangeDetect,
            'slices': int,
            'softness': int,
            'spatial_aq': H264SpatialAq,
            'subgop_length': H264SubGopLength,
            'syntax': H264Syntax,
            'temporal_aq': H264TemporalAq,
            'timecode_insertion': H264TimecodeInsertionBehavior,
            'timecode_burnin_settings': FrameCaptureSettingsTimecodeBurninSettings
        }

        self.attribute_map = {
            'adaptive_quantization': 'AdaptiveQuantization',
            'afd_signaling': 'AfdSignaling',
            'bitrate': 'Bitrate',
            'buf_fill_pct': 'BufFillPct',
            'buf_size': 'BufSize',
            'color_metadata': 'ColorMetadata',
            'color_space_settings': 'ColorSpaceSettings',
            'entropy_encoding': 'EntropyEncoding',
            'filter_settings': 'FilterSettings',
            'fixed_afd': 'FixedAfd',
            'flicker_aq': 'FlickerAq',
            'force_field_pictures': 'ForceFieldPictures',
            'framerate_control': 'FramerateControl',
            'framerate_denominator': 'FramerateDenominator',
            'framerate_numerator': 'FramerateNumerator',
            'gop_b_reference': 'GopBReference',
            'gop_closed_cadence': 'GopClosedCadence',
            'gop_num_b_frames': 'GopNumBFrames',
            'gop_size': 'GopSize',
            'gop_size_units': 'GopSizeUnits',
            'level': 'Level',
            'look_ahead_rate_control': 'LookAheadRateControl',
            'max_bitrate': 'MaxBitrate',
            'min_i_interval': 'MinIInterval',
            'num_ref_frames': 'NumRefFrames',
            'par_control': 'ParControl',
            'par_denominator': 'ParDenominator',
            'par_numerator': 'ParNumerator',
            'profile': 'Profile',
            'quality_level': 'QualityLevel',
            'qvbr_quality_level': 'QvbrQualityLevel',
            'rate_control_mode': 'RateControlMode',
            'scan_type': 'ScanType',
            'scene_change_detect': 'SceneChangeDetect',
            'slices': 'Slices',
            'softness': 'Softness',
            'spatial_aq': 'SpatialAq',
            'subgop_length': 'SubgopLength',
            'syntax': 'Syntax',
            'temporal_aq': 'TemporalAq',
            'timecode_insertion': 'TimecodeInsertion',
            'timecode_burnin_settings': 'TimecodeBurninSettings'
        }

        self._adaptive_quantization = adaptive_quantization
        self._afd_signaling = afd_signaling
        self._bitrate = bitrate
        self._buf_fill_pct = buf_fill_pct
        self._buf_size = buf_size
        self._color_metadata = color_metadata
        self._color_space_settings = color_space_settings
        self._entropy_encoding = entropy_encoding
        self._filter_settings = filter_settings
        self._fixed_afd = fixed_afd
        self._flicker_aq = flicker_aq
        self._force_field_pictures = force_field_pictures
        self._framerate_control = framerate_control
        self._framerate_denominator = framerate_denominator
        self._framerate_numerator = framerate_numerator
        self._gop_b_reference = gop_b_reference
        self._gop_closed_cadence = gop_closed_cadence
        self._gop_num_b_frames = gop_num_b_frames
        self._gop_size = gop_size
        self._gop_size_units = gop_size_units
        self._level = level
        self._look_ahead_rate_control = look_ahead_rate_control
        self._max_bitrate = max_bitrate
        self._min_i_interval = min_i_interval
        self._num_ref_frames = num_ref_frames
        self._par_control = par_control
        self._par_denominator = par_denominator
        self._par_numerator = par_numerator
        self._profile = profile
        self._quality_level = quality_level
        self._qvbr_quality_level = qvbr_quality_level
        self._rate_control_mode = rate_control_mode
        self._scan_type = scan_type
        self._scene_change_detect = scene_change_detect
        self._slices = slices
        self._softness = softness
        self._spatial_aq = spatial_aq
        self._subgop_length = subgop_length
        self._syntax = syntax
        self._temporal_aq = temporal_aq
        self._timecode_insertion = timecode_insertion
        self._timecode_burnin_settings = timecode_burnin_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoCodecSettingsH264Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoCodecSettings_H264Settings of this VideoCodecSettingsH264Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adaptive_quantization(self):
        """Gets the adaptive_quantization of this VideoCodecSettingsH264Settings.


        :return: The adaptive_quantization of this VideoCodecSettingsH264Settings.
        :rtype: H264AdaptiveQuantization
        """
        return self._adaptive_quantization

    @adaptive_quantization.setter
    def adaptive_quantization(self, adaptive_quantization):
        """Sets the adaptive_quantization of this VideoCodecSettingsH264Settings.


        :param adaptive_quantization: The adaptive_quantization of this VideoCodecSettingsH264Settings.
        :type adaptive_quantization: H264AdaptiveQuantization
        """

        self._adaptive_quantization = adaptive_quantization

    @property
    def afd_signaling(self):
        """Gets the afd_signaling of this VideoCodecSettingsH264Settings.


        :return: The afd_signaling of this VideoCodecSettingsH264Settings.
        :rtype: AfdSignaling
        """
        return self._afd_signaling

    @afd_signaling.setter
    def afd_signaling(self, afd_signaling):
        """Sets the afd_signaling of this VideoCodecSettingsH264Settings.


        :param afd_signaling: The afd_signaling of this VideoCodecSettingsH264Settings.
        :type afd_signaling: AfdSignaling
        """

        self._afd_signaling = afd_signaling

    @property
    def bitrate(self):
        """Gets the bitrate of this VideoCodecSettingsH264Settings.


        :return: The bitrate of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this VideoCodecSettingsH264Settings.


        :param bitrate: The bitrate of this VideoCodecSettingsH264Settings.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def buf_fill_pct(self):
        """Gets the buf_fill_pct of this VideoCodecSettingsH264Settings.


        :return: The buf_fill_pct of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._buf_fill_pct

    @buf_fill_pct.setter
    def buf_fill_pct(self, buf_fill_pct):
        """Sets the buf_fill_pct of this VideoCodecSettingsH264Settings.


        :param buf_fill_pct: The buf_fill_pct of this VideoCodecSettingsH264Settings.
        :type buf_fill_pct: int
        """

        self._buf_fill_pct = buf_fill_pct

    @property
    def buf_size(self):
        """Gets the buf_size of this VideoCodecSettingsH264Settings.


        :return: The buf_size of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._buf_size

    @buf_size.setter
    def buf_size(self, buf_size):
        """Sets the buf_size of this VideoCodecSettingsH264Settings.


        :param buf_size: The buf_size of this VideoCodecSettingsH264Settings.
        :type buf_size: int
        """

        self._buf_size = buf_size

    @property
    def color_metadata(self):
        """Gets the color_metadata of this VideoCodecSettingsH264Settings.


        :return: The color_metadata of this VideoCodecSettingsH264Settings.
        :rtype: H264ColorMetadata
        """
        return self._color_metadata

    @color_metadata.setter
    def color_metadata(self, color_metadata):
        """Sets the color_metadata of this VideoCodecSettingsH264Settings.


        :param color_metadata: The color_metadata of this VideoCodecSettingsH264Settings.
        :type color_metadata: H264ColorMetadata
        """

        self._color_metadata = color_metadata

    @property
    def color_space_settings(self):
        """Gets the color_space_settings of this VideoCodecSettingsH264Settings.


        :return: The color_space_settings of this VideoCodecSettingsH264Settings.
        :rtype: H264SettingsColorSpaceSettings
        """
        return self._color_space_settings

    @color_space_settings.setter
    def color_space_settings(self, color_space_settings):
        """Sets the color_space_settings of this VideoCodecSettingsH264Settings.


        :param color_space_settings: The color_space_settings of this VideoCodecSettingsH264Settings.
        :type color_space_settings: H264SettingsColorSpaceSettings
        """

        self._color_space_settings = color_space_settings

    @property
    def entropy_encoding(self):
        """Gets the entropy_encoding of this VideoCodecSettingsH264Settings.


        :return: The entropy_encoding of this VideoCodecSettingsH264Settings.
        :rtype: H264EntropyEncoding
        """
        return self._entropy_encoding

    @entropy_encoding.setter
    def entropy_encoding(self, entropy_encoding):
        """Sets the entropy_encoding of this VideoCodecSettingsH264Settings.


        :param entropy_encoding: The entropy_encoding of this VideoCodecSettingsH264Settings.
        :type entropy_encoding: H264EntropyEncoding
        """

        self._entropy_encoding = entropy_encoding

    @property
    def filter_settings(self):
        """Gets the filter_settings of this VideoCodecSettingsH264Settings.


        :return: The filter_settings of this VideoCodecSettingsH264Settings.
        :rtype: H264SettingsFilterSettings
        """
        return self._filter_settings

    @filter_settings.setter
    def filter_settings(self, filter_settings):
        """Sets the filter_settings of this VideoCodecSettingsH264Settings.


        :param filter_settings: The filter_settings of this VideoCodecSettingsH264Settings.
        :type filter_settings: H264SettingsFilterSettings
        """

        self._filter_settings = filter_settings

    @property
    def fixed_afd(self):
        """Gets the fixed_afd of this VideoCodecSettingsH264Settings.


        :return: The fixed_afd of this VideoCodecSettingsH264Settings.
        :rtype: FixedAfd
        """
        return self._fixed_afd

    @fixed_afd.setter
    def fixed_afd(self, fixed_afd):
        """Sets the fixed_afd of this VideoCodecSettingsH264Settings.


        :param fixed_afd: The fixed_afd of this VideoCodecSettingsH264Settings.
        :type fixed_afd: FixedAfd
        """

        self._fixed_afd = fixed_afd

    @property
    def flicker_aq(self):
        """Gets the flicker_aq of this VideoCodecSettingsH264Settings.


        :return: The flicker_aq of this VideoCodecSettingsH264Settings.
        :rtype: H264FlickerAq
        """
        return self._flicker_aq

    @flicker_aq.setter
    def flicker_aq(self, flicker_aq):
        """Sets the flicker_aq of this VideoCodecSettingsH264Settings.


        :param flicker_aq: The flicker_aq of this VideoCodecSettingsH264Settings.
        :type flicker_aq: H264FlickerAq
        """

        self._flicker_aq = flicker_aq

    @property
    def force_field_pictures(self):
        """Gets the force_field_pictures of this VideoCodecSettingsH264Settings.


        :return: The force_field_pictures of this VideoCodecSettingsH264Settings.
        :rtype: H264ForceFieldPictures
        """
        return self._force_field_pictures

    @force_field_pictures.setter
    def force_field_pictures(self, force_field_pictures):
        """Sets the force_field_pictures of this VideoCodecSettingsH264Settings.


        :param force_field_pictures: The force_field_pictures of this VideoCodecSettingsH264Settings.
        :type force_field_pictures: H264ForceFieldPictures
        """

        self._force_field_pictures = force_field_pictures

    @property
    def framerate_control(self):
        """Gets the framerate_control of this VideoCodecSettingsH264Settings.


        :return: The framerate_control of this VideoCodecSettingsH264Settings.
        :rtype: H264FramerateControl
        """
        return self._framerate_control

    @framerate_control.setter
    def framerate_control(self, framerate_control):
        """Sets the framerate_control of this VideoCodecSettingsH264Settings.


        :param framerate_control: The framerate_control of this VideoCodecSettingsH264Settings.
        :type framerate_control: H264FramerateControl
        """

        self._framerate_control = framerate_control

    @property
    def framerate_denominator(self):
        """Gets the framerate_denominator of this VideoCodecSettingsH264Settings.


        :return: The framerate_denominator of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._framerate_denominator

    @framerate_denominator.setter
    def framerate_denominator(self, framerate_denominator):
        """Sets the framerate_denominator of this VideoCodecSettingsH264Settings.


        :param framerate_denominator: The framerate_denominator of this VideoCodecSettingsH264Settings.
        :type framerate_denominator: int
        """

        self._framerate_denominator = framerate_denominator

    @property
    def framerate_numerator(self):
        """Gets the framerate_numerator of this VideoCodecSettingsH264Settings.


        :return: The framerate_numerator of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._framerate_numerator

    @framerate_numerator.setter
    def framerate_numerator(self, framerate_numerator):
        """Sets the framerate_numerator of this VideoCodecSettingsH264Settings.


        :param framerate_numerator: The framerate_numerator of this VideoCodecSettingsH264Settings.
        :type framerate_numerator: int
        """

        self._framerate_numerator = framerate_numerator

    @property
    def gop_b_reference(self):
        """Gets the gop_b_reference of this VideoCodecSettingsH264Settings.


        :return: The gop_b_reference of this VideoCodecSettingsH264Settings.
        :rtype: H264GopBReference
        """
        return self._gop_b_reference

    @gop_b_reference.setter
    def gop_b_reference(self, gop_b_reference):
        """Sets the gop_b_reference of this VideoCodecSettingsH264Settings.


        :param gop_b_reference: The gop_b_reference of this VideoCodecSettingsH264Settings.
        :type gop_b_reference: H264GopBReference
        """

        self._gop_b_reference = gop_b_reference

    @property
    def gop_closed_cadence(self):
        """Gets the gop_closed_cadence of this VideoCodecSettingsH264Settings.


        :return: The gop_closed_cadence of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._gop_closed_cadence

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, gop_closed_cadence):
        """Sets the gop_closed_cadence of this VideoCodecSettingsH264Settings.


        :param gop_closed_cadence: The gop_closed_cadence of this VideoCodecSettingsH264Settings.
        :type gop_closed_cadence: int
        """

        self._gop_closed_cadence = gop_closed_cadence

    @property
    def gop_num_b_frames(self):
        """Gets the gop_num_b_frames of this VideoCodecSettingsH264Settings.


        :return: The gop_num_b_frames of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._gop_num_b_frames

    @gop_num_b_frames.setter
    def gop_num_b_frames(self, gop_num_b_frames):
        """Sets the gop_num_b_frames of this VideoCodecSettingsH264Settings.


        :param gop_num_b_frames: The gop_num_b_frames of this VideoCodecSettingsH264Settings.
        :type gop_num_b_frames: int
        """

        self._gop_num_b_frames = gop_num_b_frames

    @property
    def gop_size(self):
        """Gets the gop_size of this VideoCodecSettingsH264Settings.


        :return: The gop_size of this VideoCodecSettingsH264Settings.
        :rtype: float
        """
        return self._gop_size

    @gop_size.setter
    def gop_size(self, gop_size):
        """Sets the gop_size of this VideoCodecSettingsH264Settings.


        :param gop_size: The gop_size of this VideoCodecSettingsH264Settings.
        :type gop_size: float
        """

        self._gop_size = gop_size

    @property
    def gop_size_units(self):
        """Gets the gop_size_units of this VideoCodecSettingsH264Settings.


        :return: The gop_size_units of this VideoCodecSettingsH264Settings.
        :rtype: H264GopSizeUnits
        """
        return self._gop_size_units

    @gop_size_units.setter
    def gop_size_units(self, gop_size_units):
        """Sets the gop_size_units of this VideoCodecSettingsH264Settings.


        :param gop_size_units: The gop_size_units of this VideoCodecSettingsH264Settings.
        :type gop_size_units: H264GopSizeUnits
        """

        self._gop_size_units = gop_size_units

    @property
    def level(self):
        """Gets the level of this VideoCodecSettingsH264Settings.


        :return: The level of this VideoCodecSettingsH264Settings.
        :rtype: H264Level
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this VideoCodecSettingsH264Settings.


        :param level: The level of this VideoCodecSettingsH264Settings.
        :type level: H264Level
        """

        self._level = level

    @property
    def look_ahead_rate_control(self):
        """Gets the look_ahead_rate_control of this VideoCodecSettingsH264Settings.


        :return: The look_ahead_rate_control of this VideoCodecSettingsH264Settings.
        :rtype: H264LookAheadRateControl
        """
        return self._look_ahead_rate_control

    @look_ahead_rate_control.setter
    def look_ahead_rate_control(self, look_ahead_rate_control):
        """Sets the look_ahead_rate_control of this VideoCodecSettingsH264Settings.


        :param look_ahead_rate_control: The look_ahead_rate_control of this VideoCodecSettingsH264Settings.
        :type look_ahead_rate_control: H264LookAheadRateControl
        """

        self._look_ahead_rate_control = look_ahead_rate_control

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this VideoCodecSettingsH264Settings.


        :return: The max_bitrate of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this VideoCodecSettingsH264Settings.


        :param max_bitrate: The max_bitrate of this VideoCodecSettingsH264Settings.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def min_i_interval(self):
        """Gets the min_i_interval of this VideoCodecSettingsH264Settings.


        :return: The min_i_interval of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._min_i_interval

    @min_i_interval.setter
    def min_i_interval(self, min_i_interval):
        """Sets the min_i_interval of this VideoCodecSettingsH264Settings.


        :param min_i_interval: The min_i_interval of this VideoCodecSettingsH264Settings.
        :type min_i_interval: int
        """

        self._min_i_interval = min_i_interval

    @property
    def num_ref_frames(self):
        """Gets the num_ref_frames of this VideoCodecSettingsH264Settings.


        :return: The num_ref_frames of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._num_ref_frames

    @num_ref_frames.setter
    def num_ref_frames(self, num_ref_frames):
        """Sets the num_ref_frames of this VideoCodecSettingsH264Settings.


        :param num_ref_frames: The num_ref_frames of this VideoCodecSettingsH264Settings.
        :type num_ref_frames: int
        """

        self._num_ref_frames = num_ref_frames

    @property
    def par_control(self):
        """Gets the par_control of this VideoCodecSettingsH264Settings.


        :return: The par_control of this VideoCodecSettingsH264Settings.
        :rtype: H264ParControl
        """
        return self._par_control

    @par_control.setter
    def par_control(self, par_control):
        """Sets the par_control of this VideoCodecSettingsH264Settings.


        :param par_control: The par_control of this VideoCodecSettingsH264Settings.
        :type par_control: H264ParControl
        """

        self._par_control = par_control

    @property
    def par_denominator(self):
        """Gets the par_denominator of this VideoCodecSettingsH264Settings.


        :return: The par_denominator of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._par_denominator

    @par_denominator.setter
    def par_denominator(self, par_denominator):
        """Sets the par_denominator of this VideoCodecSettingsH264Settings.


        :param par_denominator: The par_denominator of this VideoCodecSettingsH264Settings.
        :type par_denominator: int
        """

        self._par_denominator = par_denominator

    @property
    def par_numerator(self):
        """Gets the par_numerator of this VideoCodecSettingsH264Settings.


        :return: The par_numerator of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._par_numerator

    @par_numerator.setter
    def par_numerator(self, par_numerator):
        """Sets the par_numerator of this VideoCodecSettingsH264Settings.


        :param par_numerator: The par_numerator of this VideoCodecSettingsH264Settings.
        :type par_numerator: int
        """

        self._par_numerator = par_numerator

    @property
    def profile(self):
        """Gets the profile of this VideoCodecSettingsH264Settings.


        :return: The profile of this VideoCodecSettingsH264Settings.
        :rtype: H264Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this VideoCodecSettingsH264Settings.


        :param profile: The profile of this VideoCodecSettingsH264Settings.
        :type profile: H264Profile
        """

        self._profile = profile

    @property
    def quality_level(self):
        """Gets the quality_level of this VideoCodecSettingsH264Settings.


        :return: The quality_level of this VideoCodecSettingsH264Settings.
        :rtype: H264QualityLevel
        """
        return self._quality_level

    @quality_level.setter
    def quality_level(self, quality_level):
        """Sets the quality_level of this VideoCodecSettingsH264Settings.


        :param quality_level: The quality_level of this VideoCodecSettingsH264Settings.
        :type quality_level: H264QualityLevel
        """

        self._quality_level = quality_level

    @property
    def qvbr_quality_level(self):
        """Gets the qvbr_quality_level of this VideoCodecSettingsH264Settings.


        :return: The qvbr_quality_level of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._qvbr_quality_level

    @qvbr_quality_level.setter
    def qvbr_quality_level(self, qvbr_quality_level):
        """Sets the qvbr_quality_level of this VideoCodecSettingsH264Settings.


        :param qvbr_quality_level: The qvbr_quality_level of this VideoCodecSettingsH264Settings.
        :type qvbr_quality_level: int
        """

        self._qvbr_quality_level = qvbr_quality_level

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this VideoCodecSettingsH264Settings.


        :return: The rate_control_mode of this VideoCodecSettingsH264Settings.
        :rtype: H264RateControlMode
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this VideoCodecSettingsH264Settings.


        :param rate_control_mode: The rate_control_mode of this VideoCodecSettingsH264Settings.
        :type rate_control_mode: H264RateControlMode
        """

        self._rate_control_mode = rate_control_mode

    @property
    def scan_type(self):
        """Gets the scan_type of this VideoCodecSettingsH264Settings.


        :return: The scan_type of this VideoCodecSettingsH264Settings.
        :rtype: H264ScanType
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this VideoCodecSettingsH264Settings.


        :param scan_type: The scan_type of this VideoCodecSettingsH264Settings.
        :type scan_type: H264ScanType
        """

        self._scan_type = scan_type

    @property
    def scene_change_detect(self):
        """Gets the scene_change_detect of this VideoCodecSettingsH264Settings.


        :return: The scene_change_detect of this VideoCodecSettingsH264Settings.
        :rtype: H264SceneChangeDetect
        """
        return self._scene_change_detect

    @scene_change_detect.setter
    def scene_change_detect(self, scene_change_detect):
        """Sets the scene_change_detect of this VideoCodecSettingsH264Settings.


        :param scene_change_detect: The scene_change_detect of this VideoCodecSettingsH264Settings.
        :type scene_change_detect: H264SceneChangeDetect
        """

        self._scene_change_detect = scene_change_detect

    @property
    def slices(self):
        """Gets the slices of this VideoCodecSettingsH264Settings.


        :return: The slices of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._slices

    @slices.setter
    def slices(self, slices):
        """Sets the slices of this VideoCodecSettingsH264Settings.


        :param slices: The slices of this VideoCodecSettingsH264Settings.
        :type slices: int
        """

        self._slices = slices

    @property
    def softness(self):
        """Gets the softness of this VideoCodecSettingsH264Settings.


        :return: The softness of this VideoCodecSettingsH264Settings.
        :rtype: int
        """
        return self._softness

    @softness.setter
    def softness(self, softness):
        """Sets the softness of this VideoCodecSettingsH264Settings.


        :param softness: The softness of this VideoCodecSettingsH264Settings.
        :type softness: int
        """

        self._softness = softness

    @property
    def spatial_aq(self):
        """Gets the spatial_aq of this VideoCodecSettingsH264Settings.


        :return: The spatial_aq of this VideoCodecSettingsH264Settings.
        :rtype: H264SpatialAq
        """
        return self._spatial_aq

    @spatial_aq.setter
    def spatial_aq(self, spatial_aq):
        """Sets the spatial_aq of this VideoCodecSettingsH264Settings.


        :param spatial_aq: The spatial_aq of this VideoCodecSettingsH264Settings.
        :type spatial_aq: H264SpatialAq
        """

        self._spatial_aq = spatial_aq

    @property
    def subgop_length(self):
        """Gets the subgop_length of this VideoCodecSettingsH264Settings.


        :return: The subgop_length of this VideoCodecSettingsH264Settings.
        :rtype: H264SubGopLength
        """
        return self._subgop_length

    @subgop_length.setter
    def subgop_length(self, subgop_length):
        """Sets the subgop_length of this VideoCodecSettingsH264Settings.


        :param subgop_length: The subgop_length of this VideoCodecSettingsH264Settings.
        :type subgop_length: H264SubGopLength
        """

        self._subgop_length = subgop_length

    @property
    def syntax(self):
        """Gets the syntax of this VideoCodecSettingsH264Settings.


        :return: The syntax of this VideoCodecSettingsH264Settings.
        :rtype: H264Syntax
        """
        return self._syntax

    @syntax.setter
    def syntax(self, syntax):
        """Sets the syntax of this VideoCodecSettingsH264Settings.


        :param syntax: The syntax of this VideoCodecSettingsH264Settings.
        :type syntax: H264Syntax
        """

        self._syntax = syntax

    @property
    def temporal_aq(self):
        """Gets the temporal_aq of this VideoCodecSettingsH264Settings.


        :return: The temporal_aq of this VideoCodecSettingsH264Settings.
        :rtype: H264TemporalAq
        """
        return self._temporal_aq

    @temporal_aq.setter
    def temporal_aq(self, temporal_aq):
        """Sets the temporal_aq of this VideoCodecSettingsH264Settings.


        :param temporal_aq: The temporal_aq of this VideoCodecSettingsH264Settings.
        :type temporal_aq: H264TemporalAq
        """

        self._temporal_aq = temporal_aq

    @property
    def timecode_insertion(self):
        """Gets the timecode_insertion of this VideoCodecSettingsH264Settings.


        :return: The timecode_insertion of this VideoCodecSettingsH264Settings.
        :rtype: H264TimecodeInsertionBehavior
        """
        return self._timecode_insertion

    @timecode_insertion.setter
    def timecode_insertion(self, timecode_insertion):
        """Sets the timecode_insertion of this VideoCodecSettingsH264Settings.


        :param timecode_insertion: The timecode_insertion of this VideoCodecSettingsH264Settings.
        :type timecode_insertion: H264TimecodeInsertionBehavior
        """

        self._timecode_insertion = timecode_insertion

    @property
    def timecode_burnin_settings(self):
        """Gets the timecode_burnin_settings of this VideoCodecSettingsH264Settings.


        :return: The timecode_burnin_settings of this VideoCodecSettingsH264Settings.
        :rtype: FrameCaptureSettingsTimecodeBurninSettings
        """
        return self._timecode_burnin_settings

    @timecode_burnin_settings.setter
    def timecode_burnin_settings(self, timecode_burnin_settings):
        """Sets the timecode_burnin_settings of this VideoCodecSettingsH264Settings.


        :param timecode_burnin_settings: The timecode_burnin_settings of this VideoCodecSettingsH264Settings.
        :type timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings
        """

        self._timecode_burnin_settings = timecode_burnin_settings
