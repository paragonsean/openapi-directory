# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nielsen_watermark_timezones import NielsenWatermarkTimezones
from openapi_server import util


class NielsenNaesIiNw(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_digit_string: str=None, sid: float=None, timezone: NielsenWatermarkTimezones=None):
        """NielsenNaesIiNw - a model defined in OpenAPI

        :param check_digit_string: The check_digit_string of this NielsenNaesIiNw.
        :param sid: The sid of this NielsenNaesIiNw.
        :param timezone: The timezone of this NielsenNaesIiNw.
        """
        self.openapi_types = {
            'check_digit_string': str,
            'sid': float,
            'timezone': NielsenWatermarkTimezones
        }

        self.attribute_map = {
            'check_digit_string': 'CheckDigitString',
            'sid': 'Sid',
            'timezone': 'Timezone'
        }

        self._check_digit_string = check_digit_string
        self._sid = sid
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NielsenNaesIiNw':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NielsenNaesIiNw of this NielsenNaesIiNw.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_digit_string(self):
        """Gets the check_digit_string of this NielsenNaesIiNw.


        :return: The check_digit_string of this NielsenNaesIiNw.
        :rtype: str
        """
        return self._check_digit_string

    @check_digit_string.setter
    def check_digit_string(self, check_digit_string):
        """Sets the check_digit_string of this NielsenNaesIiNw.


        :param check_digit_string: The check_digit_string of this NielsenNaesIiNw.
        :type check_digit_string: str
        """
        if check_digit_string is None:
            raise ValueError("Invalid value for `check_digit_string`, must not be `None`")

        self._check_digit_string = check_digit_string

    @property
    def sid(self):
        """Gets the sid of this NielsenNaesIiNw.


        :return: The sid of this NielsenNaesIiNw.
        :rtype: float
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this NielsenNaesIiNw.


        :param sid: The sid of this NielsenNaesIiNw.
        :type sid: float
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")

        self._sid = sid

    @property
    def timezone(self):
        """Gets the timezone of this NielsenNaesIiNw.


        :return: The timezone of this NielsenNaesIiNw.
        :rtype: NielsenWatermarkTimezones
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NielsenNaesIiNw.


        :param timezone: The timezone of this NielsenNaesIiNw.
        :type timezone: NielsenWatermarkTimezones
        """

        self._timezone = timezone
