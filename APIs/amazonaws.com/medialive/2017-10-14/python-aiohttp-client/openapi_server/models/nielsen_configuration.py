# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nielsen_pcm_to_id3_tagging_state import NielsenPcmToId3TaggingState
from openapi_server import util


class NielsenConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distributor_id: str=None, nielsen_pcm_to_id3_tagging: NielsenPcmToId3TaggingState=None):
        """NielsenConfiguration - a model defined in OpenAPI

        :param distributor_id: The distributor_id of this NielsenConfiguration.
        :param nielsen_pcm_to_id3_tagging: The nielsen_pcm_to_id3_tagging of this NielsenConfiguration.
        """
        self.openapi_types = {
            'distributor_id': str,
            'nielsen_pcm_to_id3_tagging': NielsenPcmToId3TaggingState
        }

        self.attribute_map = {
            'distributor_id': 'DistributorId',
            'nielsen_pcm_to_id3_tagging': 'NielsenPcmToId3Tagging'
        }

        self._distributor_id = distributor_id
        self._nielsen_pcm_to_id3_tagging = nielsen_pcm_to_id3_tagging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NielsenConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NielsenConfiguration of this NielsenConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distributor_id(self):
        """Gets the distributor_id of this NielsenConfiguration.


        :return: The distributor_id of this NielsenConfiguration.
        :rtype: str
        """
        return self._distributor_id

    @distributor_id.setter
    def distributor_id(self, distributor_id):
        """Sets the distributor_id of this NielsenConfiguration.


        :param distributor_id: The distributor_id of this NielsenConfiguration.
        :type distributor_id: str
        """

        self._distributor_id = distributor_id

    @property
    def nielsen_pcm_to_id3_tagging(self):
        """Gets the nielsen_pcm_to_id3_tagging of this NielsenConfiguration.


        :return: The nielsen_pcm_to_id3_tagging of this NielsenConfiguration.
        :rtype: NielsenPcmToId3TaggingState
        """
        return self._nielsen_pcm_to_id3_tagging

    @nielsen_pcm_to_id3_tagging.setter
    def nielsen_pcm_to_id3_tagging(self, nielsen_pcm_to_id3_tagging):
        """Sets the nielsen_pcm_to_id3_tagging of this NielsenConfiguration.


        :param nielsen_pcm_to_id3_tagging: The nielsen_pcm_to_id3_tagging of this NielsenConfiguration.
        :type nielsen_pcm_to_id3_tagging: NielsenPcmToId3TaggingState
        """

        self._nielsen_pcm_to_id3_tagging = nielsen_pcm_to_id3_tagging
