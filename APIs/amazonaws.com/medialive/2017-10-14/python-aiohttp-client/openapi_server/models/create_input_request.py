# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_input_request_vpc import CreateInputRequestVpc
from openapi_server.models.input_destination_request import InputDestinationRequest
from openapi_server.models.input_device_settings import InputDeviceSettings
from openapi_server.models.input_source_request import InputSourceRequest
from openapi_server.models.media_connect_flow_request import MediaConnectFlowRequest
from openapi_server import util


class CreateInputRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[InputDestinationRequest]=None, input_devices: List[InputDeviceSettings]=None, input_security_groups: List[str]=None, media_connect_flows: List[MediaConnectFlowRequest]=None, name: str=None, request_id: str=None, role_arn: str=None, sources: List[InputSourceRequest]=None, tags: Dict[str, str]=None, type: str=None, vpc: CreateInputRequestVpc=None):
        """CreateInputRequest - a model defined in OpenAPI

        :param destinations: The destinations of this CreateInputRequest.
        :param input_devices: The input_devices of this CreateInputRequest.
        :param input_security_groups: The input_security_groups of this CreateInputRequest.
        :param media_connect_flows: The media_connect_flows of this CreateInputRequest.
        :param name: The name of this CreateInputRequest.
        :param request_id: The request_id of this CreateInputRequest.
        :param role_arn: The role_arn of this CreateInputRequest.
        :param sources: The sources of this CreateInputRequest.
        :param tags: The tags of this CreateInputRequest.
        :param type: The type of this CreateInputRequest.
        :param vpc: The vpc of this CreateInputRequest.
        """
        self.openapi_types = {
            'destinations': List[InputDestinationRequest],
            'input_devices': List[InputDeviceSettings],
            'input_security_groups': List[str],
            'media_connect_flows': List[MediaConnectFlowRequest],
            'name': str,
            'request_id': str,
            'role_arn': str,
            'sources': List[InputSourceRequest],
            'tags': Dict[str, str],
            'type': str,
            'vpc': CreateInputRequestVpc
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'input_devices': 'inputDevices',
            'input_security_groups': 'inputSecurityGroups',
            'media_connect_flows': 'mediaConnectFlows',
            'name': 'name',
            'request_id': 'requestId',
            'role_arn': 'roleArn',
            'sources': 'sources',
            'tags': 'tags',
            'type': 'type',
            'vpc': 'vpc'
        }

        self._destinations = destinations
        self._input_devices = input_devices
        self._input_security_groups = input_security_groups
        self._media_connect_flows = media_connect_flows
        self._name = name
        self._request_id = request_id
        self._role_arn = role_arn
        self._sources = sources
        self._tags = tags
        self._type = type
        self._vpc = vpc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInputRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInput_request of this CreateInputRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this CreateInputRequest.

        Placeholder documentation for __listOfInputDestinationRequest

        :return: The destinations of this CreateInputRequest.
        :rtype: List[InputDestinationRequest]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this CreateInputRequest.

        Placeholder documentation for __listOfInputDestinationRequest

        :param destinations: The destinations of this CreateInputRequest.
        :type destinations: List[InputDestinationRequest]
        """

        self._destinations = destinations

    @property
    def input_devices(self):
        """Gets the input_devices of this CreateInputRequest.

        Placeholder documentation for __listOfInputDeviceSettings

        :return: The input_devices of this CreateInputRequest.
        :rtype: List[InputDeviceSettings]
        """
        return self._input_devices

    @input_devices.setter
    def input_devices(self, input_devices):
        """Sets the input_devices of this CreateInputRequest.

        Placeholder documentation for __listOfInputDeviceSettings

        :param input_devices: The input_devices of this CreateInputRequest.
        :type input_devices: List[InputDeviceSettings]
        """

        self._input_devices = input_devices

    @property
    def input_security_groups(self):
        """Gets the input_security_groups of this CreateInputRequest.

        Placeholder documentation for __listOf__string

        :return: The input_security_groups of this CreateInputRequest.
        :rtype: List[str]
        """
        return self._input_security_groups

    @input_security_groups.setter
    def input_security_groups(self, input_security_groups):
        """Sets the input_security_groups of this CreateInputRequest.

        Placeholder documentation for __listOf__string

        :param input_security_groups: The input_security_groups of this CreateInputRequest.
        :type input_security_groups: List[str]
        """

        self._input_security_groups = input_security_groups

    @property
    def media_connect_flows(self):
        """Gets the media_connect_flows of this CreateInputRequest.

        Placeholder documentation for __listOfMediaConnectFlowRequest

        :return: The media_connect_flows of this CreateInputRequest.
        :rtype: List[MediaConnectFlowRequest]
        """
        return self._media_connect_flows

    @media_connect_flows.setter
    def media_connect_flows(self, media_connect_flows):
        """Sets the media_connect_flows of this CreateInputRequest.

        Placeholder documentation for __listOfMediaConnectFlowRequest

        :param media_connect_flows: The media_connect_flows of this CreateInputRequest.
        :type media_connect_flows: List[MediaConnectFlowRequest]
        """

        self._media_connect_flows = media_connect_flows

    @property
    def name(self):
        """Gets the name of this CreateInputRequest.

        Placeholder documentation for __string

        :return: The name of this CreateInputRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateInputRequest.

        Placeholder documentation for __string

        :param name: The name of this CreateInputRequest.
        :type name: str
        """

        self._name = name

    @property
    def request_id(self):
        """Gets the request_id of this CreateInputRequest.

        Placeholder documentation for __string

        :return: The request_id of this CreateInputRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateInputRequest.

        Placeholder documentation for __string

        :param request_id: The request_id of this CreateInputRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateInputRequest.

        Placeholder documentation for __string

        :return: The role_arn of this CreateInputRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateInputRequest.

        Placeholder documentation for __string

        :param role_arn: The role_arn of this CreateInputRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def sources(self):
        """Gets the sources of this CreateInputRequest.

        Placeholder documentation for __listOfInputSourceRequest

        :return: The sources of this CreateInputRequest.
        :rtype: List[InputSourceRequest]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateInputRequest.

        Placeholder documentation for __listOfInputSourceRequest

        :param sources: The sources of this CreateInputRequest.
        :type sources: List[InputSourceRequest]
        """

        self._sources = sources

    @property
    def tags(self):
        """Gets the tags of this CreateInputRequest.

        Placeholder documentation for Tags

        :return: The tags of this CreateInputRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateInputRequest.

        Placeholder documentation for Tags

        :param tags: The tags of this CreateInputRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this CreateInputRequest.

        The different types of inputs that AWS Elemental MediaLive supports.

        :return: The type of this CreateInputRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateInputRequest.

        The different types of inputs that AWS Elemental MediaLive supports.

        :param type: The type of this CreateInputRequest.
        :type type: str
        """
        allowed_values = ["UDP_PUSH", "RTP_PUSH", "RTMP_PUSH", "RTMP_PULL", "URL_PULL", "MP4_FILE", "MEDIACONNECT", "INPUT_DEVICE", "AWS_CDI", "TS_FILE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vpc(self):
        """Gets the vpc of this CreateInputRequest.


        :return: The vpc of this CreateInputRequest.
        :rtype: CreateInputRequestVpc
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this CreateInputRequest.


        :param vpc: The vpc of this CreateInputRequest.
        :type vpc: CreateInputRequestVpc
        """

        self._vpc = vpc
