# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caption_selector_selector_settings import CaptionSelectorSelectorSettings
from openapi_server import util


class CaptionSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, name: str=None, selector_settings: CaptionSelectorSelectorSettings=None):
        """CaptionSelector - a model defined in OpenAPI

        :param language_code: The language_code of this CaptionSelector.
        :param name: The name of this CaptionSelector.
        :param selector_settings: The selector_settings of this CaptionSelector.
        """
        self.openapi_types = {
            'language_code': str,
            'name': str,
            'selector_settings': CaptionSelectorSelectorSettings
        }

        self.attribute_map = {
            'language_code': 'LanguageCode',
            'name': 'Name',
            'selector_settings': 'SelectorSettings'
        }

        self._language_code = language_code
        self._name = name
        self._selector_settings = selector_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptionSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptionSelector of this CaptionSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this CaptionSelector.


        :return: The language_code of this CaptionSelector.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CaptionSelector.


        :param language_code: The language_code of this CaptionSelector.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this CaptionSelector.


        :return: The name of this CaptionSelector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CaptionSelector.


        :param name: The name of this CaptionSelector.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def selector_settings(self):
        """Gets the selector_settings of this CaptionSelector.


        :return: The selector_settings of this CaptionSelector.
        :rtype: CaptionSelectorSelectorSettings
        """
        return self._selector_settings

    @selector_settings.setter
    def selector_settings(self, selector_settings):
        """Sets the selector_settings of this CaptionSelector.


        :param selector_settings: The selector_settings of this CaptionSelector.
        :type selector_settings: CaptionSelectorSelectorSettings
        """

        self._selector_settings = selector_settings
