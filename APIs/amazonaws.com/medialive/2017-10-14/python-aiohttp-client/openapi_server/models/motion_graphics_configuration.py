# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.motion_graphics_configuration_motion_graphics_settings import MotionGraphicsConfigurationMotionGraphicsSettings
from openapi_server.models.motion_graphics_insertion import MotionGraphicsInsertion
from openapi_server import util


class MotionGraphicsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, motion_graphics_insertion: MotionGraphicsInsertion=None, motion_graphics_settings: MotionGraphicsConfigurationMotionGraphicsSettings=None):
        """MotionGraphicsConfiguration - a model defined in OpenAPI

        :param motion_graphics_insertion: The motion_graphics_insertion of this MotionGraphicsConfiguration.
        :param motion_graphics_settings: The motion_graphics_settings of this MotionGraphicsConfiguration.
        """
        self.openapi_types = {
            'motion_graphics_insertion': MotionGraphicsInsertion,
            'motion_graphics_settings': MotionGraphicsConfigurationMotionGraphicsSettings
        }

        self.attribute_map = {
            'motion_graphics_insertion': 'MotionGraphicsInsertion',
            'motion_graphics_settings': 'MotionGraphicsSettings'
        }

        self._motion_graphics_insertion = motion_graphics_insertion
        self._motion_graphics_settings = motion_graphics_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MotionGraphicsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MotionGraphicsConfiguration of this MotionGraphicsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def motion_graphics_insertion(self):
        """Gets the motion_graphics_insertion of this MotionGraphicsConfiguration.


        :return: The motion_graphics_insertion of this MotionGraphicsConfiguration.
        :rtype: MotionGraphicsInsertion
        """
        return self._motion_graphics_insertion

    @motion_graphics_insertion.setter
    def motion_graphics_insertion(self, motion_graphics_insertion):
        """Sets the motion_graphics_insertion of this MotionGraphicsConfiguration.


        :param motion_graphics_insertion: The motion_graphics_insertion of this MotionGraphicsConfiguration.
        :type motion_graphics_insertion: MotionGraphicsInsertion
        """

        self._motion_graphics_insertion = motion_graphics_insertion

    @property
    def motion_graphics_settings(self):
        """Gets the motion_graphics_settings of this MotionGraphicsConfiguration.


        :return: The motion_graphics_settings of this MotionGraphicsConfiguration.
        :rtype: MotionGraphicsConfigurationMotionGraphicsSettings
        """
        return self._motion_graphics_settings

    @motion_graphics_settings.setter
    def motion_graphics_settings(self, motion_graphics_settings):
        """Sets the motion_graphics_settings of this MotionGraphicsConfiguration.


        :param motion_graphics_settings: The motion_graphics_settings of this MotionGraphicsConfiguration.
        :type motion_graphics_settings: MotionGraphicsConfigurationMotionGraphicsSettings
        """
        if motion_graphics_settings is None:
            raise ValueError("Invalid value for `motion_graphics_settings`, must not be `None`")

        self._motion_graphics_settings = motion_graphics_settings
