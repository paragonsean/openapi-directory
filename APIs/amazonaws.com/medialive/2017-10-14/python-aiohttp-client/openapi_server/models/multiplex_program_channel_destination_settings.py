# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultiplexProgramChannelDestinationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multiplex_id: str=None, program_name: str=None):
        """MultiplexProgramChannelDestinationSettings - a model defined in OpenAPI

        :param multiplex_id: The multiplex_id of this MultiplexProgramChannelDestinationSettings.
        :param program_name: The program_name of this MultiplexProgramChannelDestinationSettings.
        """
        self.openapi_types = {
            'multiplex_id': str,
            'program_name': str
        }

        self.attribute_map = {
            'multiplex_id': 'MultiplexId',
            'program_name': 'ProgramName'
        }

        self._multiplex_id = multiplex_id
        self._program_name = program_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiplexProgramChannelDestinationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiplexProgramChannelDestinationSettings of this MultiplexProgramChannelDestinationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multiplex_id(self):
        """Gets the multiplex_id of this MultiplexProgramChannelDestinationSettings.


        :return: The multiplex_id of this MultiplexProgramChannelDestinationSettings.
        :rtype: str
        """
        return self._multiplex_id

    @multiplex_id.setter
    def multiplex_id(self, multiplex_id):
        """Sets the multiplex_id of this MultiplexProgramChannelDestinationSettings.


        :param multiplex_id: The multiplex_id of this MultiplexProgramChannelDestinationSettings.
        :type multiplex_id: str
        """

        self._multiplex_id = multiplex_id

    @property
    def program_name(self):
        """Gets the program_name of this MultiplexProgramChannelDestinationSettings.


        :return: The program_name of this MultiplexProgramChannelDestinationSettings.
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this MultiplexProgramChannelDestinationSettings.


        :param program_name: The program_name of this MultiplexProgramChannelDestinationSettings.
        :type program_name: str
        """

        self._program_name = program_name
