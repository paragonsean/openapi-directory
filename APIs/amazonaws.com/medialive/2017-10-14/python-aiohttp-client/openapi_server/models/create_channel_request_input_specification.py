# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_codec import InputCodec
from openapi_server.models.input_maximum_bitrate import InputMaximumBitrate
from openapi_server.models.input_resolution import InputResolution
from openapi_server import util


class CreateChannelRequestInputSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec: InputCodec=None, maximum_bitrate: InputMaximumBitrate=None, resolution: InputResolution=None):
        """CreateChannelRequestInputSpecification - a model defined in OpenAPI

        :param codec: The codec of this CreateChannelRequestInputSpecification.
        :param maximum_bitrate: The maximum_bitrate of this CreateChannelRequestInputSpecification.
        :param resolution: The resolution of this CreateChannelRequestInputSpecification.
        """
        self.openapi_types = {
            'codec': InputCodec,
            'maximum_bitrate': InputMaximumBitrate,
            'resolution': InputResolution
        }

        self.attribute_map = {
            'codec': 'Codec',
            'maximum_bitrate': 'MaximumBitrate',
            'resolution': 'Resolution'
        }

        self._codec = codec
        self._maximum_bitrate = maximum_bitrate
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelRequestInputSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannel_request_inputSpecification of this CreateChannelRequestInputSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec(self):
        """Gets the codec of this CreateChannelRequestInputSpecification.


        :return: The codec of this CreateChannelRequestInputSpecification.
        :rtype: InputCodec
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this CreateChannelRequestInputSpecification.


        :param codec: The codec of this CreateChannelRequestInputSpecification.
        :type codec: InputCodec
        """

        self._codec = codec

    @property
    def maximum_bitrate(self):
        """Gets the maximum_bitrate of this CreateChannelRequestInputSpecification.


        :return: The maximum_bitrate of this CreateChannelRequestInputSpecification.
        :rtype: InputMaximumBitrate
        """
        return self._maximum_bitrate

    @maximum_bitrate.setter
    def maximum_bitrate(self, maximum_bitrate):
        """Sets the maximum_bitrate of this CreateChannelRequestInputSpecification.


        :param maximum_bitrate: The maximum_bitrate of this CreateChannelRequestInputSpecification.
        :type maximum_bitrate: InputMaximumBitrate
        """

        self._maximum_bitrate = maximum_bitrate

    @property
    def resolution(self):
        """Gets the resolution of this CreateChannelRequestInputSpecification.


        :return: The resolution of this CreateChannelRequestInputSpecification.
        :rtype: InputResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this CreateChannelRequestInputSpecification.


        :param resolution: The resolution of this CreateChannelRequestInputSpecification.
        :type resolution: InputResolution
        """

        self._resolution = resolution
