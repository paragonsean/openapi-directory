# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_selector_color_space import VideoSelectorColorSpace
from openapi_server.models.video_selector_color_space_settings import VideoSelectorColorSpaceSettings
from openapi_server.models.video_selector_color_space_usage import VideoSelectorColorSpaceUsage
from openapi_server.models.video_selector_selector_settings import VideoSelectorSelectorSettings
from openapi_server import util


class VideoSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_space: VideoSelectorColorSpace=None, color_space_settings: VideoSelectorColorSpaceSettings=None, color_space_usage: VideoSelectorColorSpaceUsage=None, selector_settings: VideoSelectorSelectorSettings=None):
        """VideoSelector - a model defined in OpenAPI

        :param color_space: The color_space of this VideoSelector.
        :param color_space_settings: The color_space_settings of this VideoSelector.
        :param color_space_usage: The color_space_usage of this VideoSelector.
        :param selector_settings: The selector_settings of this VideoSelector.
        """
        self.openapi_types = {
            'color_space': VideoSelectorColorSpace,
            'color_space_settings': VideoSelectorColorSpaceSettings,
            'color_space_usage': VideoSelectorColorSpaceUsage,
            'selector_settings': VideoSelectorSelectorSettings
        }

        self.attribute_map = {
            'color_space': 'ColorSpace',
            'color_space_settings': 'ColorSpaceSettings',
            'color_space_usage': 'ColorSpaceUsage',
            'selector_settings': 'SelectorSettings'
        }

        self._color_space = color_space
        self._color_space_settings = color_space_settings
        self._color_space_usage = color_space_usage
        self._selector_settings = selector_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoSelector of this VideoSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_space(self):
        """Gets the color_space of this VideoSelector.


        :return: The color_space of this VideoSelector.
        :rtype: VideoSelectorColorSpace
        """
        return self._color_space

    @color_space.setter
    def color_space(self, color_space):
        """Sets the color_space of this VideoSelector.


        :param color_space: The color_space of this VideoSelector.
        :type color_space: VideoSelectorColorSpace
        """

        self._color_space = color_space

    @property
    def color_space_settings(self):
        """Gets the color_space_settings of this VideoSelector.


        :return: The color_space_settings of this VideoSelector.
        :rtype: VideoSelectorColorSpaceSettings
        """
        return self._color_space_settings

    @color_space_settings.setter
    def color_space_settings(self, color_space_settings):
        """Sets the color_space_settings of this VideoSelector.


        :param color_space_settings: The color_space_settings of this VideoSelector.
        :type color_space_settings: VideoSelectorColorSpaceSettings
        """

        self._color_space_settings = color_space_settings

    @property
    def color_space_usage(self):
        """Gets the color_space_usage of this VideoSelector.


        :return: The color_space_usage of this VideoSelector.
        :rtype: VideoSelectorColorSpaceUsage
        """
        return self._color_space_usage

    @color_space_usage.setter
    def color_space_usage(self, color_space_usage):
        """Sets the color_space_usage of this VideoSelector.


        :param color_space_usage: The color_space_usage of this VideoSelector.
        :type color_space_usage: VideoSelectorColorSpaceUsage
        """

        self._color_space_usage = color_space_usage

    @property
    def selector_settings(self):
        """Gets the selector_settings of this VideoSelector.


        :return: The selector_settings of this VideoSelector.
        :rtype: VideoSelectorSelectorSettings
        """
        return self._selector_settings

    @selector_settings.setter
    def selector_settings(self, selector_settings):
        """Sets the selector_settings of this VideoSelector.


        :param selector_settings: The selector_settings of this VideoSelector.
        :type selector_settings: VideoSelectorSelectorSettings
        """

        self._selector_settings = selector_settings
