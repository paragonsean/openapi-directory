# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.thumbnail_state import ThumbnailState
from openapi_server import util


class CreateChannelRequestEncoderSettingsThumbnailConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: ThumbnailState=None):
        """CreateChannelRequestEncoderSettingsThumbnailConfiguration - a model defined in OpenAPI

        :param state: The state of this CreateChannelRequestEncoderSettingsThumbnailConfiguration.
        """
        self.openapi_types = {
            'state': ThumbnailState
        }

        self.attribute_map = {
            'state': 'State'
        }

        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelRequestEncoderSettingsThumbnailConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannel_request_encoderSettings_ThumbnailConfiguration of this CreateChannelRequestEncoderSettingsThumbnailConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this CreateChannelRequestEncoderSettingsThumbnailConfiguration.


        :return: The state of this CreateChannelRequestEncoderSettingsThumbnailConfiguration.
        :rtype: ThumbnailState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateChannelRequestEncoderSettingsThumbnailConfiguration.


        :param state: The state of this CreateChannelRequestEncoderSettingsThumbnailConfiguration.
        :type state: ThumbnailState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
