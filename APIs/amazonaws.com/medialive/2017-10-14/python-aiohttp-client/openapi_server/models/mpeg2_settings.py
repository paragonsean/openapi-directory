# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.afd_signaling import AfdSignaling
from openapi_server.models.fixed_afd import FixedAfd
from openapi_server.models.frame_capture_settings_timecode_burnin_settings import FrameCaptureSettingsTimecodeBurninSettings
from openapi_server.models.mpeg2_adaptive_quantization import Mpeg2AdaptiveQuantization
from openapi_server.models.mpeg2_color_metadata import Mpeg2ColorMetadata
from openapi_server.models.mpeg2_color_space import Mpeg2ColorSpace
from openapi_server.models.mpeg2_display_ratio import Mpeg2DisplayRatio
from openapi_server.models.mpeg2_gop_size_units import Mpeg2GopSizeUnits
from openapi_server.models.mpeg2_scan_type import Mpeg2ScanType
from openapi_server.models.mpeg2_settings_filter_settings import Mpeg2SettingsFilterSettings
from openapi_server.models.mpeg2_sub_gop_length import Mpeg2SubGopLength
from openapi_server.models.mpeg2_timecode_insertion_behavior import Mpeg2TimecodeInsertionBehavior
from openapi_server import util


class Mpeg2Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adaptive_quantization: Mpeg2AdaptiveQuantization=None, afd_signaling: AfdSignaling=None, color_metadata: Mpeg2ColorMetadata=None, color_space: Mpeg2ColorSpace=None, display_aspect_ratio: Mpeg2DisplayRatio=None, filter_settings: Mpeg2SettingsFilterSettings=None, fixed_afd: FixedAfd=None, framerate_denominator: int=None, framerate_numerator: int=None, gop_closed_cadence: int=None, gop_num_b_frames: int=None, gop_size: float=None, gop_size_units: Mpeg2GopSizeUnits=None, scan_type: Mpeg2ScanType=None, subgop_length: Mpeg2SubGopLength=None, timecode_insertion: Mpeg2TimecodeInsertionBehavior=None, timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings=None):
        """Mpeg2Settings - a model defined in OpenAPI

        :param adaptive_quantization: The adaptive_quantization of this Mpeg2Settings.
        :param afd_signaling: The afd_signaling of this Mpeg2Settings.
        :param color_metadata: The color_metadata of this Mpeg2Settings.
        :param color_space: The color_space of this Mpeg2Settings.
        :param display_aspect_ratio: The display_aspect_ratio of this Mpeg2Settings.
        :param filter_settings: The filter_settings of this Mpeg2Settings.
        :param fixed_afd: The fixed_afd of this Mpeg2Settings.
        :param framerate_denominator: The framerate_denominator of this Mpeg2Settings.
        :param framerate_numerator: The framerate_numerator of this Mpeg2Settings.
        :param gop_closed_cadence: The gop_closed_cadence of this Mpeg2Settings.
        :param gop_num_b_frames: The gop_num_b_frames of this Mpeg2Settings.
        :param gop_size: The gop_size of this Mpeg2Settings.
        :param gop_size_units: The gop_size_units of this Mpeg2Settings.
        :param scan_type: The scan_type of this Mpeg2Settings.
        :param subgop_length: The subgop_length of this Mpeg2Settings.
        :param timecode_insertion: The timecode_insertion of this Mpeg2Settings.
        :param timecode_burnin_settings: The timecode_burnin_settings of this Mpeg2Settings.
        """
        self.openapi_types = {
            'adaptive_quantization': Mpeg2AdaptiveQuantization,
            'afd_signaling': AfdSignaling,
            'color_metadata': Mpeg2ColorMetadata,
            'color_space': Mpeg2ColorSpace,
            'display_aspect_ratio': Mpeg2DisplayRatio,
            'filter_settings': Mpeg2SettingsFilterSettings,
            'fixed_afd': FixedAfd,
            'framerate_denominator': int,
            'framerate_numerator': int,
            'gop_closed_cadence': int,
            'gop_num_b_frames': int,
            'gop_size': float,
            'gop_size_units': Mpeg2GopSizeUnits,
            'scan_type': Mpeg2ScanType,
            'subgop_length': Mpeg2SubGopLength,
            'timecode_insertion': Mpeg2TimecodeInsertionBehavior,
            'timecode_burnin_settings': FrameCaptureSettingsTimecodeBurninSettings
        }

        self.attribute_map = {
            'adaptive_quantization': 'AdaptiveQuantization',
            'afd_signaling': 'AfdSignaling',
            'color_metadata': 'ColorMetadata',
            'color_space': 'ColorSpace',
            'display_aspect_ratio': 'DisplayAspectRatio',
            'filter_settings': 'FilterSettings',
            'fixed_afd': 'FixedAfd',
            'framerate_denominator': 'FramerateDenominator',
            'framerate_numerator': 'FramerateNumerator',
            'gop_closed_cadence': 'GopClosedCadence',
            'gop_num_b_frames': 'GopNumBFrames',
            'gop_size': 'GopSize',
            'gop_size_units': 'GopSizeUnits',
            'scan_type': 'ScanType',
            'subgop_length': 'SubgopLength',
            'timecode_insertion': 'TimecodeInsertion',
            'timecode_burnin_settings': 'TimecodeBurninSettings'
        }

        self._adaptive_quantization = adaptive_quantization
        self._afd_signaling = afd_signaling
        self._color_metadata = color_metadata
        self._color_space = color_space
        self._display_aspect_ratio = display_aspect_ratio
        self._filter_settings = filter_settings
        self._fixed_afd = fixed_afd
        self._framerate_denominator = framerate_denominator
        self._framerate_numerator = framerate_numerator
        self._gop_closed_cadence = gop_closed_cadence
        self._gop_num_b_frames = gop_num_b_frames
        self._gop_size = gop_size
        self._gop_size_units = gop_size_units
        self._scan_type = scan_type
        self._subgop_length = subgop_length
        self._timecode_insertion = timecode_insertion
        self._timecode_burnin_settings = timecode_burnin_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mpeg2Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mpeg2Settings of this Mpeg2Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adaptive_quantization(self):
        """Gets the adaptive_quantization of this Mpeg2Settings.


        :return: The adaptive_quantization of this Mpeg2Settings.
        :rtype: Mpeg2AdaptiveQuantization
        """
        return self._adaptive_quantization

    @adaptive_quantization.setter
    def adaptive_quantization(self, adaptive_quantization):
        """Sets the adaptive_quantization of this Mpeg2Settings.


        :param adaptive_quantization: The adaptive_quantization of this Mpeg2Settings.
        :type adaptive_quantization: Mpeg2AdaptiveQuantization
        """

        self._adaptive_quantization = adaptive_quantization

    @property
    def afd_signaling(self):
        """Gets the afd_signaling of this Mpeg2Settings.


        :return: The afd_signaling of this Mpeg2Settings.
        :rtype: AfdSignaling
        """
        return self._afd_signaling

    @afd_signaling.setter
    def afd_signaling(self, afd_signaling):
        """Sets the afd_signaling of this Mpeg2Settings.


        :param afd_signaling: The afd_signaling of this Mpeg2Settings.
        :type afd_signaling: AfdSignaling
        """

        self._afd_signaling = afd_signaling

    @property
    def color_metadata(self):
        """Gets the color_metadata of this Mpeg2Settings.


        :return: The color_metadata of this Mpeg2Settings.
        :rtype: Mpeg2ColorMetadata
        """
        return self._color_metadata

    @color_metadata.setter
    def color_metadata(self, color_metadata):
        """Sets the color_metadata of this Mpeg2Settings.


        :param color_metadata: The color_metadata of this Mpeg2Settings.
        :type color_metadata: Mpeg2ColorMetadata
        """

        self._color_metadata = color_metadata

    @property
    def color_space(self):
        """Gets the color_space of this Mpeg2Settings.


        :return: The color_space of this Mpeg2Settings.
        :rtype: Mpeg2ColorSpace
        """
        return self._color_space

    @color_space.setter
    def color_space(self, color_space):
        """Sets the color_space of this Mpeg2Settings.


        :param color_space: The color_space of this Mpeg2Settings.
        :type color_space: Mpeg2ColorSpace
        """

        self._color_space = color_space

    @property
    def display_aspect_ratio(self):
        """Gets the display_aspect_ratio of this Mpeg2Settings.


        :return: The display_aspect_ratio of this Mpeg2Settings.
        :rtype: Mpeg2DisplayRatio
        """
        return self._display_aspect_ratio

    @display_aspect_ratio.setter
    def display_aspect_ratio(self, display_aspect_ratio):
        """Sets the display_aspect_ratio of this Mpeg2Settings.


        :param display_aspect_ratio: The display_aspect_ratio of this Mpeg2Settings.
        :type display_aspect_ratio: Mpeg2DisplayRatio
        """

        self._display_aspect_ratio = display_aspect_ratio

    @property
    def filter_settings(self):
        """Gets the filter_settings of this Mpeg2Settings.


        :return: The filter_settings of this Mpeg2Settings.
        :rtype: Mpeg2SettingsFilterSettings
        """
        return self._filter_settings

    @filter_settings.setter
    def filter_settings(self, filter_settings):
        """Sets the filter_settings of this Mpeg2Settings.


        :param filter_settings: The filter_settings of this Mpeg2Settings.
        :type filter_settings: Mpeg2SettingsFilterSettings
        """

        self._filter_settings = filter_settings

    @property
    def fixed_afd(self):
        """Gets the fixed_afd of this Mpeg2Settings.


        :return: The fixed_afd of this Mpeg2Settings.
        :rtype: FixedAfd
        """
        return self._fixed_afd

    @fixed_afd.setter
    def fixed_afd(self, fixed_afd):
        """Sets the fixed_afd of this Mpeg2Settings.


        :param fixed_afd: The fixed_afd of this Mpeg2Settings.
        :type fixed_afd: FixedAfd
        """

        self._fixed_afd = fixed_afd

    @property
    def framerate_denominator(self):
        """Gets the framerate_denominator of this Mpeg2Settings.


        :return: The framerate_denominator of this Mpeg2Settings.
        :rtype: int
        """
        return self._framerate_denominator

    @framerate_denominator.setter
    def framerate_denominator(self, framerate_denominator):
        """Sets the framerate_denominator of this Mpeg2Settings.


        :param framerate_denominator: The framerate_denominator of this Mpeg2Settings.
        :type framerate_denominator: int
        """
        if framerate_denominator is None:
            raise ValueError("Invalid value for `framerate_denominator`, must not be `None`")

        self._framerate_denominator = framerate_denominator

    @property
    def framerate_numerator(self):
        """Gets the framerate_numerator of this Mpeg2Settings.


        :return: The framerate_numerator of this Mpeg2Settings.
        :rtype: int
        """
        return self._framerate_numerator

    @framerate_numerator.setter
    def framerate_numerator(self, framerate_numerator):
        """Sets the framerate_numerator of this Mpeg2Settings.


        :param framerate_numerator: The framerate_numerator of this Mpeg2Settings.
        :type framerate_numerator: int
        """
        if framerate_numerator is None:
            raise ValueError("Invalid value for `framerate_numerator`, must not be `None`")

        self._framerate_numerator = framerate_numerator

    @property
    def gop_closed_cadence(self):
        """Gets the gop_closed_cadence of this Mpeg2Settings.


        :return: The gop_closed_cadence of this Mpeg2Settings.
        :rtype: int
        """
        return self._gop_closed_cadence

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, gop_closed_cadence):
        """Sets the gop_closed_cadence of this Mpeg2Settings.


        :param gop_closed_cadence: The gop_closed_cadence of this Mpeg2Settings.
        :type gop_closed_cadence: int
        """

        self._gop_closed_cadence = gop_closed_cadence

    @property
    def gop_num_b_frames(self):
        """Gets the gop_num_b_frames of this Mpeg2Settings.


        :return: The gop_num_b_frames of this Mpeg2Settings.
        :rtype: int
        """
        return self._gop_num_b_frames

    @gop_num_b_frames.setter
    def gop_num_b_frames(self, gop_num_b_frames):
        """Sets the gop_num_b_frames of this Mpeg2Settings.


        :param gop_num_b_frames: The gop_num_b_frames of this Mpeg2Settings.
        :type gop_num_b_frames: int
        """

        self._gop_num_b_frames = gop_num_b_frames

    @property
    def gop_size(self):
        """Gets the gop_size of this Mpeg2Settings.


        :return: The gop_size of this Mpeg2Settings.
        :rtype: float
        """
        return self._gop_size

    @gop_size.setter
    def gop_size(self, gop_size):
        """Sets the gop_size of this Mpeg2Settings.


        :param gop_size: The gop_size of this Mpeg2Settings.
        :type gop_size: float
        """

        self._gop_size = gop_size

    @property
    def gop_size_units(self):
        """Gets the gop_size_units of this Mpeg2Settings.


        :return: The gop_size_units of this Mpeg2Settings.
        :rtype: Mpeg2GopSizeUnits
        """
        return self._gop_size_units

    @gop_size_units.setter
    def gop_size_units(self, gop_size_units):
        """Sets the gop_size_units of this Mpeg2Settings.


        :param gop_size_units: The gop_size_units of this Mpeg2Settings.
        :type gop_size_units: Mpeg2GopSizeUnits
        """

        self._gop_size_units = gop_size_units

    @property
    def scan_type(self):
        """Gets the scan_type of this Mpeg2Settings.


        :return: The scan_type of this Mpeg2Settings.
        :rtype: Mpeg2ScanType
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this Mpeg2Settings.


        :param scan_type: The scan_type of this Mpeg2Settings.
        :type scan_type: Mpeg2ScanType
        """

        self._scan_type = scan_type

    @property
    def subgop_length(self):
        """Gets the subgop_length of this Mpeg2Settings.


        :return: The subgop_length of this Mpeg2Settings.
        :rtype: Mpeg2SubGopLength
        """
        return self._subgop_length

    @subgop_length.setter
    def subgop_length(self, subgop_length):
        """Sets the subgop_length of this Mpeg2Settings.


        :param subgop_length: The subgop_length of this Mpeg2Settings.
        :type subgop_length: Mpeg2SubGopLength
        """

        self._subgop_length = subgop_length

    @property
    def timecode_insertion(self):
        """Gets the timecode_insertion of this Mpeg2Settings.


        :return: The timecode_insertion of this Mpeg2Settings.
        :rtype: Mpeg2TimecodeInsertionBehavior
        """
        return self._timecode_insertion

    @timecode_insertion.setter
    def timecode_insertion(self, timecode_insertion):
        """Sets the timecode_insertion of this Mpeg2Settings.


        :param timecode_insertion: The timecode_insertion of this Mpeg2Settings.
        :type timecode_insertion: Mpeg2TimecodeInsertionBehavior
        """

        self._timecode_insertion = timecode_insertion

    @property
    def timecode_burnin_settings(self):
        """Gets the timecode_burnin_settings of this Mpeg2Settings.


        :return: The timecode_burnin_settings of this Mpeg2Settings.
        :rtype: FrameCaptureSettingsTimecodeBurninSettings
        """
        return self._timecode_burnin_settings

    @timecode_burnin_settings.setter
    def timecode_burnin_settings(self, timecode_burnin_settings):
        """Sets the timecode_burnin_settings of this Mpeg2Settings.


        :param timecode_burnin_settings: The timecode_burnin_settings of this Mpeg2Settings.
        :type timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings
        """

        self._timecode_burnin_settings = timecode_burnin_settings
