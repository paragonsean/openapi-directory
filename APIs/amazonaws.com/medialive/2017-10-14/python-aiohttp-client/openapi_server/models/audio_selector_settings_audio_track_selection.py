# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_track_selection_dolby_e_decode import AudioTrackSelectionDolbyEDecode
from openapi_server import util


class AudioSelectorSettingsAudioTrackSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tracks: List=None, dolby_e_decode: AudioTrackSelectionDolbyEDecode=None):
        """AudioSelectorSettingsAudioTrackSelection - a model defined in OpenAPI

        :param tracks: The tracks of this AudioSelectorSettingsAudioTrackSelection.
        :param dolby_e_decode: The dolby_e_decode of this AudioSelectorSettingsAudioTrackSelection.
        """
        self.openapi_types = {
            'tracks': List,
            'dolby_e_decode': AudioTrackSelectionDolbyEDecode
        }

        self.attribute_map = {
            'tracks': 'Tracks',
            'dolby_e_decode': 'DolbyEDecode'
        }

        self._tracks = tracks
        self._dolby_e_decode = dolby_e_decode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioSelectorSettingsAudioTrackSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioSelectorSettings_AudioTrackSelection of this AudioSelectorSettingsAudioTrackSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tracks(self):
        """Gets the tracks of this AudioSelectorSettingsAudioTrackSelection.


        :return: The tracks of this AudioSelectorSettingsAudioTrackSelection.
        :rtype: List
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this AudioSelectorSettingsAudioTrackSelection.


        :param tracks: The tracks of this AudioSelectorSettingsAudioTrackSelection.
        :type tracks: List
        """
        if tracks is None:
            raise ValueError("Invalid value for `tracks`, must not be `None`")

        self._tracks = tracks

    @property
    def dolby_e_decode(self):
        """Gets the dolby_e_decode of this AudioSelectorSettingsAudioTrackSelection.


        :return: The dolby_e_decode of this AudioSelectorSettingsAudioTrackSelection.
        :rtype: AudioTrackSelectionDolbyEDecode
        """
        return self._dolby_e_decode

    @dolby_e_decode.setter
    def dolby_e_decode(self, dolby_e_decode):
        """Sets the dolby_e_decode of this AudioSelectorSettingsAudioTrackSelection.


        :param dolby_e_decode: The dolby_e_decode of this AudioSelectorSettingsAudioTrackSelection.
        :type dolby_e_decode: AudioTrackSelectionDolbyEDecode
        """

        self._dolby_e_decode = dolby_e_decode
