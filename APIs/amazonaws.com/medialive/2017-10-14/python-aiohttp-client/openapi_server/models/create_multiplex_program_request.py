# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_multiplex_program_request_multiplex_program_settings import CreateMultiplexProgramRequestMultiplexProgramSettings
from openapi_server import util


class CreateMultiplexProgramRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multiplex_program_settings: CreateMultiplexProgramRequestMultiplexProgramSettings=None, program_name: str=None, request_id: str=None):
        """CreateMultiplexProgramRequest - a model defined in OpenAPI

        :param multiplex_program_settings: The multiplex_program_settings of this CreateMultiplexProgramRequest.
        :param program_name: The program_name of this CreateMultiplexProgramRequest.
        :param request_id: The request_id of this CreateMultiplexProgramRequest.
        """
        self.openapi_types = {
            'multiplex_program_settings': CreateMultiplexProgramRequestMultiplexProgramSettings,
            'program_name': str,
            'request_id': str
        }

        self.attribute_map = {
            'multiplex_program_settings': 'multiplexProgramSettings',
            'program_name': 'programName',
            'request_id': 'requestId'
        }

        self._multiplex_program_settings = multiplex_program_settings
        self._program_name = program_name
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMultiplexProgramRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMultiplexProgram_request of this CreateMultiplexProgramRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multiplex_program_settings(self):
        """Gets the multiplex_program_settings of this CreateMultiplexProgramRequest.


        :return: The multiplex_program_settings of this CreateMultiplexProgramRequest.
        :rtype: CreateMultiplexProgramRequestMultiplexProgramSettings
        """
        return self._multiplex_program_settings

    @multiplex_program_settings.setter
    def multiplex_program_settings(self, multiplex_program_settings):
        """Sets the multiplex_program_settings of this CreateMultiplexProgramRequest.


        :param multiplex_program_settings: The multiplex_program_settings of this CreateMultiplexProgramRequest.
        :type multiplex_program_settings: CreateMultiplexProgramRequestMultiplexProgramSettings
        """
        if multiplex_program_settings is None:
            raise ValueError("Invalid value for `multiplex_program_settings`, must not be `None`")

        self._multiplex_program_settings = multiplex_program_settings

    @property
    def program_name(self):
        """Gets the program_name of this CreateMultiplexProgramRequest.

        Placeholder documentation for __string

        :return: The program_name of this CreateMultiplexProgramRequest.
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this CreateMultiplexProgramRequest.

        Placeholder documentation for __string

        :param program_name: The program_name of this CreateMultiplexProgramRequest.
        :type program_name: str
        """
        if program_name is None:
            raise ValueError("Invalid value for `program_name`, must not be `None`")

        self._program_name = program_name

    @property
    def request_id(self):
        """Gets the request_id of this CreateMultiplexProgramRequest.

        Placeholder documentation for __string

        :return: The request_id of this CreateMultiplexProgramRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateMultiplexProgramRequest.

        Placeholder documentation for __string

        :param request_id: The request_id of this CreateMultiplexProgramRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
