# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_channel_request_cdi_input_specification import CreateChannelRequestCdiInputSpecification
from openapi_server.models.create_channel_request_encoder_settings import CreateChannelRequestEncoderSettings
from openapi_server.models.create_channel_request_input_specification import CreateChannelRequestInputSpecification
from openapi_server.models.create_channel_request_maintenance import CreateChannelRequestMaintenance
from openapi_server.models.create_channel_request_vpc import CreateChannelRequestVpc
from openapi_server.models.input_attachment import InputAttachment
from openapi_server.models.output_destination import OutputDestination
from openapi_server import util


class CreateChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cdi_input_specification: CreateChannelRequestCdiInputSpecification=None, channel_class: str=None, destinations: List[OutputDestination]=None, encoder_settings: CreateChannelRequestEncoderSettings=None, input_attachments: List[InputAttachment]=None, input_specification: CreateChannelRequestInputSpecification=None, log_level: str=None, maintenance: CreateChannelRequestMaintenance=None, name: str=None, request_id: str=None, reserved: str=None, role_arn: str=None, tags: Dict[str, str]=None, vpc: CreateChannelRequestVpc=None):
        """CreateChannelRequest - a model defined in OpenAPI

        :param cdi_input_specification: The cdi_input_specification of this CreateChannelRequest.
        :param channel_class: The channel_class of this CreateChannelRequest.
        :param destinations: The destinations of this CreateChannelRequest.
        :param encoder_settings: The encoder_settings of this CreateChannelRequest.
        :param input_attachments: The input_attachments of this CreateChannelRequest.
        :param input_specification: The input_specification of this CreateChannelRequest.
        :param log_level: The log_level of this CreateChannelRequest.
        :param maintenance: The maintenance of this CreateChannelRequest.
        :param name: The name of this CreateChannelRequest.
        :param request_id: The request_id of this CreateChannelRequest.
        :param reserved: The reserved of this CreateChannelRequest.
        :param role_arn: The role_arn of this CreateChannelRequest.
        :param tags: The tags of this CreateChannelRequest.
        :param vpc: The vpc of this CreateChannelRequest.
        """
        self.openapi_types = {
            'cdi_input_specification': CreateChannelRequestCdiInputSpecification,
            'channel_class': str,
            'destinations': List[OutputDestination],
            'encoder_settings': CreateChannelRequestEncoderSettings,
            'input_attachments': List[InputAttachment],
            'input_specification': CreateChannelRequestInputSpecification,
            'log_level': str,
            'maintenance': CreateChannelRequestMaintenance,
            'name': str,
            'request_id': str,
            'reserved': str,
            'role_arn': str,
            'tags': Dict[str, str],
            'vpc': CreateChannelRequestVpc
        }

        self.attribute_map = {
            'cdi_input_specification': 'cdiInputSpecification',
            'channel_class': 'channelClass',
            'destinations': 'destinations',
            'encoder_settings': 'encoderSettings',
            'input_attachments': 'inputAttachments',
            'input_specification': 'inputSpecification',
            'log_level': 'logLevel',
            'maintenance': 'maintenance',
            'name': 'name',
            'request_id': 'requestId',
            'reserved': 'reserved',
            'role_arn': 'roleArn',
            'tags': 'tags',
            'vpc': 'vpc'
        }

        self._cdi_input_specification = cdi_input_specification
        self._channel_class = channel_class
        self._destinations = destinations
        self._encoder_settings = encoder_settings
        self._input_attachments = input_attachments
        self._input_specification = input_specification
        self._log_level = log_level
        self._maintenance = maintenance
        self._name = name
        self._request_id = request_id
        self._reserved = reserved
        self._role_arn = role_arn
        self._tags = tags
        self._vpc = vpc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannel_request of this CreateChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cdi_input_specification(self):
        """Gets the cdi_input_specification of this CreateChannelRequest.


        :return: The cdi_input_specification of this CreateChannelRequest.
        :rtype: CreateChannelRequestCdiInputSpecification
        """
        return self._cdi_input_specification

    @cdi_input_specification.setter
    def cdi_input_specification(self, cdi_input_specification):
        """Sets the cdi_input_specification of this CreateChannelRequest.


        :param cdi_input_specification: The cdi_input_specification of this CreateChannelRequest.
        :type cdi_input_specification: CreateChannelRequestCdiInputSpecification
        """

        self._cdi_input_specification = cdi_input_specification

    @property
    def channel_class(self):
        """Gets the channel_class of this CreateChannelRequest.

        A standard channel has two encoding pipelines and a single pipeline channel only has one.

        :return: The channel_class of this CreateChannelRequest.
        :rtype: str
        """
        return self._channel_class

    @channel_class.setter
    def channel_class(self, channel_class):
        """Sets the channel_class of this CreateChannelRequest.

        A standard channel has two encoding pipelines and a single pipeline channel only has one.

        :param channel_class: The channel_class of this CreateChannelRequest.
        :type channel_class: str
        """
        allowed_values = ["STANDARD", "SINGLE_PIPELINE"]  # noqa: E501
        if channel_class not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_class` ({0}), must be one of {1}"
                .format(channel_class, allowed_values)
            )

        self._channel_class = channel_class

    @property
    def destinations(self):
        """Gets the destinations of this CreateChannelRequest.

        Placeholder documentation for __listOfOutputDestination

        :return: The destinations of this CreateChannelRequest.
        :rtype: List[OutputDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this CreateChannelRequest.

        Placeholder documentation for __listOfOutputDestination

        :param destinations: The destinations of this CreateChannelRequest.
        :type destinations: List[OutputDestination]
        """

        self._destinations = destinations

    @property
    def encoder_settings(self):
        """Gets the encoder_settings of this CreateChannelRequest.


        :return: The encoder_settings of this CreateChannelRequest.
        :rtype: CreateChannelRequestEncoderSettings
        """
        return self._encoder_settings

    @encoder_settings.setter
    def encoder_settings(self, encoder_settings):
        """Sets the encoder_settings of this CreateChannelRequest.


        :param encoder_settings: The encoder_settings of this CreateChannelRequest.
        :type encoder_settings: CreateChannelRequestEncoderSettings
        """

        self._encoder_settings = encoder_settings

    @property
    def input_attachments(self):
        """Gets the input_attachments of this CreateChannelRequest.

        Placeholder documentation for __listOfInputAttachment

        :return: The input_attachments of this CreateChannelRequest.
        :rtype: List[InputAttachment]
        """
        return self._input_attachments

    @input_attachments.setter
    def input_attachments(self, input_attachments):
        """Sets the input_attachments of this CreateChannelRequest.

        Placeholder documentation for __listOfInputAttachment

        :param input_attachments: The input_attachments of this CreateChannelRequest.
        :type input_attachments: List[InputAttachment]
        """

        self._input_attachments = input_attachments

    @property
    def input_specification(self):
        """Gets the input_specification of this CreateChannelRequest.


        :return: The input_specification of this CreateChannelRequest.
        :rtype: CreateChannelRequestInputSpecification
        """
        return self._input_specification

    @input_specification.setter
    def input_specification(self, input_specification):
        """Sets the input_specification of this CreateChannelRequest.


        :param input_specification: The input_specification of this CreateChannelRequest.
        :type input_specification: CreateChannelRequestInputSpecification
        """

        self._input_specification = input_specification

    @property
    def log_level(self):
        """Gets the log_level of this CreateChannelRequest.

        The log level the user wants for their channel.

        :return: The log_level of this CreateChannelRequest.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this CreateChannelRequest.

        The log level the user wants for their channel.

        :param log_level: The log_level of this CreateChannelRequest.
        :type log_level: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO", "DEBUG", "DISABLED"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def maintenance(self):
        """Gets the maintenance of this CreateChannelRequest.


        :return: The maintenance of this CreateChannelRequest.
        :rtype: CreateChannelRequestMaintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this CreateChannelRequest.


        :param maintenance: The maintenance of this CreateChannelRequest.
        :type maintenance: CreateChannelRequestMaintenance
        """

        self._maintenance = maintenance

    @property
    def name(self):
        """Gets the name of this CreateChannelRequest.

        Placeholder documentation for __string

        :return: The name of this CreateChannelRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateChannelRequest.

        Placeholder documentation for __string

        :param name: The name of this CreateChannelRequest.
        :type name: str
        """

        self._name = name

    @property
    def request_id(self):
        """Gets the request_id of this CreateChannelRequest.

        Placeholder documentation for __string

        :return: The request_id of this CreateChannelRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateChannelRequest.

        Placeholder documentation for __string

        :param request_id: The request_id of this CreateChannelRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def reserved(self):
        """Gets the reserved of this CreateChannelRequest.

        Placeholder documentation for __string

        :return: The reserved of this CreateChannelRequest.
        :rtype: str
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this CreateChannelRequest.

        Placeholder documentation for __string

        :param reserved: The reserved of this CreateChannelRequest.
        :type reserved: str
        """

        self._reserved = reserved

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateChannelRequest.

        Placeholder documentation for __string

        :return: The role_arn of this CreateChannelRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateChannelRequest.

        Placeholder documentation for __string

        :param role_arn: The role_arn of this CreateChannelRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateChannelRequest.

        Placeholder documentation for Tags

        :return: The tags of this CreateChannelRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateChannelRequest.

        Placeholder documentation for Tags

        :param tags: The tags of this CreateChannelRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def vpc(self):
        """Gets the vpc of this CreateChannelRequest.


        :return: The vpc of this CreateChannelRequest.
        :rtype: CreateChannelRequestVpc
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this CreateChannelRequest.


        :param vpc: The vpc of this CreateChannelRequest.
        :type vpc: CreateChannelRequestVpc
        """

        self._vpc = vpc
