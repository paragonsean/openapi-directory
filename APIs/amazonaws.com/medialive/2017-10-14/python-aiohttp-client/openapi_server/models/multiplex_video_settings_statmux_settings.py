# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultiplexVideoSettingsStatmuxSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_bitrate: int=None, minimum_bitrate: int=None, priority: int=None):
        """MultiplexVideoSettingsStatmuxSettings - a model defined in OpenAPI

        :param maximum_bitrate: The maximum_bitrate of this MultiplexVideoSettingsStatmuxSettings.
        :param minimum_bitrate: The minimum_bitrate of this MultiplexVideoSettingsStatmuxSettings.
        :param priority: The priority of this MultiplexVideoSettingsStatmuxSettings.
        """
        self.openapi_types = {
            'maximum_bitrate': int,
            'minimum_bitrate': int,
            'priority': int
        }

        self.attribute_map = {
            'maximum_bitrate': 'MaximumBitrate',
            'minimum_bitrate': 'MinimumBitrate',
            'priority': 'Priority'
        }

        self._maximum_bitrate = maximum_bitrate
        self._minimum_bitrate = minimum_bitrate
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiplexVideoSettingsStatmuxSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiplexVideoSettings_StatmuxSettings of this MultiplexVideoSettingsStatmuxSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_bitrate(self):
        """Gets the maximum_bitrate of this MultiplexVideoSettingsStatmuxSettings.


        :return: The maximum_bitrate of this MultiplexVideoSettingsStatmuxSettings.
        :rtype: int
        """
        return self._maximum_bitrate

    @maximum_bitrate.setter
    def maximum_bitrate(self, maximum_bitrate):
        """Sets the maximum_bitrate of this MultiplexVideoSettingsStatmuxSettings.


        :param maximum_bitrate: The maximum_bitrate of this MultiplexVideoSettingsStatmuxSettings.
        :type maximum_bitrate: int
        """

        self._maximum_bitrate = maximum_bitrate

    @property
    def minimum_bitrate(self):
        """Gets the minimum_bitrate of this MultiplexVideoSettingsStatmuxSettings.


        :return: The minimum_bitrate of this MultiplexVideoSettingsStatmuxSettings.
        :rtype: int
        """
        return self._minimum_bitrate

    @minimum_bitrate.setter
    def minimum_bitrate(self, minimum_bitrate):
        """Sets the minimum_bitrate of this MultiplexVideoSettingsStatmuxSettings.


        :param minimum_bitrate: The minimum_bitrate of this MultiplexVideoSettingsStatmuxSettings.
        :type minimum_bitrate: int
        """

        self._minimum_bitrate = minimum_bitrate

    @property
    def priority(self):
        """Gets the priority of this MultiplexVideoSettingsStatmuxSettings.


        :return: The priority of this MultiplexVideoSettingsStatmuxSettings.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this MultiplexVideoSettingsStatmuxSettings.


        :param priority: The priority of this MultiplexVideoSettingsStatmuxSettings.
        :type priority: int
        """

        self._priority = priority
