# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_destination import OutputDestination
from openapi_server import util


class UpdateChannelClassRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_class: str=None, destinations: List[OutputDestination]=None):
        """UpdateChannelClassRequest - a model defined in OpenAPI

        :param channel_class: The channel_class of this UpdateChannelClassRequest.
        :param destinations: The destinations of this UpdateChannelClassRequest.
        """
        self.openapi_types = {
            'channel_class': str,
            'destinations': List[OutputDestination]
        }

        self.attribute_map = {
            'channel_class': 'channelClass',
            'destinations': 'destinations'
        }

        self._channel_class = channel_class
        self._destinations = destinations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateChannelClassRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateChannelClass_request of this UpdateChannelClassRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_class(self):
        """Gets the channel_class of this UpdateChannelClassRequest.

        A standard channel has two encoding pipelines and a single pipeline channel only has one.

        :return: The channel_class of this UpdateChannelClassRequest.
        :rtype: str
        """
        return self._channel_class

    @channel_class.setter
    def channel_class(self, channel_class):
        """Sets the channel_class of this UpdateChannelClassRequest.

        A standard channel has two encoding pipelines and a single pipeline channel only has one.

        :param channel_class: The channel_class of this UpdateChannelClassRequest.
        :type channel_class: str
        """
        allowed_values = ["STANDARD", "SINGLE_PIPELINE"]  # noqa: E501
        if channel_class not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_class` ({0}), must be one of {1}"
                .format(channel_class, allowed_values)
            )

        self._channel_class = channel_class

    @property
    def destinations(self):
        """Gets the destinations of this UpdateChannelClassRequest.

        Placeholder documentation for __listOfOutputDestination

        :return: The destinations of this UpdateChannelClassRequest.
        :rtype: List[OutputDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this UpdateChannelClassRequest.

        Placeholder documentation for __listOfOutputDestination

        :param destinations: The destinations of this UpdateChannelClassRequest.
        :type destinations: List[OutputDestination]
        """

        self._destinations = destinations
