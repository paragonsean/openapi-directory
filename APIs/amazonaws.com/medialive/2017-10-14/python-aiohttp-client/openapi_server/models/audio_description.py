# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_description_audio_normalization_settings import AudioDescriptionAudioNormalizationSettings
from openapi_server.models.audio_description_audio_type_control import AudioDescriptionAudioTypeControl
from openapi_server.models.audio_description_audio_watermarking_settings import AudioDescriptionAudioWatermarkingSettings
from openapi_server.models.audio_description_codec_settings import AudioDescriptionCodecSettings
from openapi_server.models.audio_description_language_code_control import AudioDescriptionLanguageCodeControl
from openapi_server.models.audio_description_remix_settings import AudioDescriptionRemixSettings
from openapi_server.models.audio_type import AudioType
from openapi_server import util


class AudioDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_normalization_settings: AudioDescriptionAudioNormalizationSettings=None, audio_selector_name: str=None, audio_type: AudioType=None, audio_type_control: AudioDescriptionAudioTypeControl=None, audio_watermarking_settings: AudioDescriptionAudioWatermarkingSettings=None, codec_settings: AudioDescriptionCodecSettings=None, language_code: str=None, language_code_control: AudioDescriptionLanguageCodeControl=None, name: str=None, remix_settings: AudioDescriptionRemixSettings=None, stream_name: str=None):
        """AudioDescription - a model defined in OpenAPI

        :param audio_normalization_settings: The audio_normalization_settings of this AudioDescription.
        :param audio_selector_name: The audio_selector_name of this AudioDescription.
        :param audio_type: The audio_type of this AudioDescription.
        :param audio_type_control: The audio_type_control of this AudioDescription.
        :param audio_watermarking_settings: The audio_watermarking_settings of this AudioDescription.
        :param codec_settings: The codec_settings of this AudioDescription.
        :param language_code: The language_code of this AudioDescription.
        :param language_code_control: The language_code_control of this AudioDescription.
        :param name: The name of this AudioDescription.
        :param remix_settings: The remix_settings of this AudioDescription.
        :param stream_name: The stream_name of this AudioDescription.
        """
        self.openapi_types = {
            'audio_normalization_settings': AudioDescriptionAudioNormalizationSettings,
            'audio_selector_name': str,
            'audio_type': AudioType,
            'audio_type_control': AudioDescriptionAudioTypeControl,
            'audio_watermarking_settings': AudioDescriptionAudioWatermarkingSettings,
            'codec_settings': AudioDescriptionCodecSettings,
            'language_code': str,
            'language_code_control': AudioDescriptionLanguageCodeControl,
            'name': str,
            'remix_settings': AudioDescriptionRemixSettings,
            'stream_name': str
        }

        self.attribute_map = {
            'audio_normalization_settings': 'AudioNormalizationSettings',
            'audio_selector_name': 'AudioSelectorName',
            'audio_type': 'AudioType',
            'audio_type_control': 'AudioTypeControl',
            'audio_watermarking_settings': 'AudioWatermarkingSettings',
            'codec_settings': 'CodecSettings',
            'language_code': 'LanguageCode',
            'language_code_control': 'LanguageCodeControl',
            'name': 'Name',
            'remix_settings': 'RemixSettings',
            'stream_name': 'StreamName'
        }

        self._audio_normalization_settings = audio_normalization_settings
        self._audio_selector_name = audio_selector_name
        self._audio_type = audio_type
        self._audio_type_control = audio_type_control
        self._audio_watermarking_settings = audio_watermarking_settings
        self._codec_settings = codec_settings
        self._language_code = language_code
        self._language_code_control = language_code_control
        self._name = name
        self._remix_settings = remix_settings
        self._stream_name = stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioDescription of this AudioDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_normalization_settings(self):
        """Gets the audio_normalization_settings of this AudioDescription.


        :return: The audio_normalization_settings of this AudioDescription.
        :rtype: AudioDescriptionAudioNormalizationSettings
        """
        return self._audio_normalization_settings

    @audio_normalization_settings.setter
    def audio_normalization_settings(self, audio_normalization_settings):
        """Sets the audio_normalization_settings of this AudioDescription.


        :param audio_normalization_settings: The audio_normalization_settings of this AudioDescription.
        :type audio_normalization_settings: AudioDescriptionAudioNormalizationSettings
        """

        self._audio_normalization_settings = audio_normalization_settings

    @property
    def audio_selector_name(self):
        """Gets the audio_selector_name of this AudioDescription.


        :return: The audio_selector_name of this AudioDescription.
        :rtype: str
        """
        return self._audio_selector_name

    @audio_selector_name.setter
    def audio_selector_name(self, audio_selector_name):
        """Sets the audio_selector_name of this AudioDescription.


        :param audio_selector_name: The audio_selector_name of this AudioDescription.
        :type audio_selector_name: str
        """
        if audio_selector_name is None:
            raise ValueError("Invalid value for `audio_selector_name`, must not be `None`")

        self._audio_selector_name = audio_selector_name

    @property
    def audio_type(self):
        """Gets the audio_type of this AudioDescription.


        :return: The audio_type of this AudioDescription.
        :rtype: AudioType
        """
        return self._audio_type

    @audio_type.setter
    def audio_type(self, audio_type):
        """Sets the audio_type of this AudioDescription.


        :param audio_type: The audio_type of this AudioDescription.
        :type audio_type: AudioType
        """

        self._audio_type = audio_type

    @property
    def audio_type_control(self):
        """Gets the audio_type_control of this AudioDescription.


        :return: The audio_type_control of this AudioDescription.
        :rtype: AudioDescriptionAudioTypeControl
        """
        return self._audio_type_control

    @audio_type_control.setter
    def audio_type_control(self, audio_type_control):
        """Sets the audio_type_control of this AudioDescription.


        :param audio_type_control: The audio_type_control of this AudioDescription.
        :type audio_type_control: AudioDescriptionAudioTypeControl
        """

        self._audio_type_control = audio_type_control

    @property
    def audio_watermarking_settings(self):
        """Gets the audio_watermarking_settings of this AudioDescription.


        :return: The audio_watermarking_settings of this AudioDescription.
        :rtype: AudioDescriptionAudioWatermarkingSettings
        """
        return self._audio_watermarking_settings

    @audio_watermarking_settings.setter
    def audio_watermarking_settings(self, audio_watermarking_settings):
        """Sets the audio_watermarking_settings of this AudioDescription.


        :param audio_watermarking_settings: The audio_watermarking_settings of this AudioDescription.
        :type audio_watermarking_settings: AudioDescriptionAudioWatermarkingSettings
        """

        self._audio_watermarking_settings = audio_watermarking_settings

    @property
    def codec_settings(self):
        """Gets the codec_settings of this AudioDescription.


        :return: The codec_settings of this AudioDescription.
        :rtype: AudioDescriptionCodecSettings
        """
        return self._codec_settings

    @codec_settings.setter
    def codec_settings(self, codec_settings):
        """Sets the codec_settings of this AudioDescription.


        :param codec_settings: The codec_settings of this AudioDescription.
        :type codec_settings: AudioDescriptionCodecSettings
        """

        self._codec_settings = codec_settings

    @property
    def language_code(self):
        """Gets the language_code of this AudioDescription.


        :return: The language_code of this AudioDescription.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AudioDescription.


        :param language_code: The language_code of this AudioDescription.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def language_code_control(self):
        """Gets the language_code_control of this AudioDescription.


        :return: The language_code_control of this AudioDescription.
        :rtype: AudioDescriptionLanguageCodeControl
        """
        return self._language_code_control

    @language_code_control.setter
    def language_code_control(self, language_code_control):
        """Sets the language_code_control of this AudioDescription.


        :param language_code_control: The language_code_control of this AudioDescription.
        :type language_code_control: AudioDescriptionLanguageCodeControl
        """

        self._language_code_control = language_code_control

    @property
    def name(self):
        """Gets the name of this AudioDescription.


        :return: The name of this AudioDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AudioDescription.


        :param name: The name of this AudioDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def remix_settings(self):
        """Gets the remix_settings of this AudioDescription.


        :return: The remix_settings of this AudioDescription.
        :rtype: AudioDescriptionRemixSettings
        """
        return self._remix_settings

    @remix_settings.setter
    def remix_settings(self, remix_settings):
        """Sets the remix_settings of this AudioDescription.


        :param remix_settings: The remix_settings of this AudioDescription.
        :type remix_settings: AudioDescriptionRemixSettings
        """

        self._remix_settings = remix_settings

    @property
    def stream_name(self):
        """Gets the stream_name of this AudioDescription.


        :return: The stream_name of this AudioDescription.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this AudioDescription.


        :param stream_name: The stream_name of this AudioDescription.
        :type stream_name: str
        """

        self._stream_name = stream_name
