# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_device_transfer_type import InputDeviceTransferType
from openapi_server import util


class TransferringInputDeviceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, message: str=None, target_customer_id: str=None, transfer_type: InputDeviceTransferType=None):
        """TransferringInputDeviceSummary - a model defined in OpenAPI

        :param id: The id of this TransferringInputDeviceSummary.
        :param message: The message of this TransferringInputDeviceSummary.
        :param target_customer_id: The target_customer_id of this TransferringInputDeviceSummary.
        :param transfer_type: The transfer_type of this TransferringInputDeviceSummary.
        """
        self.openapi_types = {
            'id': str,
            'message': str,
            'target_customer_id': str,
            'transfer_type': InputDeviceTransferType
        }

        self.attribute_map = {
            'id': 'Id',
            'message': 'Message',
            'target_customer_id': 'TargetCustomerId',
            'transfer_type': 'TransferType'
        }

        self._id = id
        self._message = message
        self._target_customer_id = target_customer_id
        self._transfer_type = transfer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferringInputDeviceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferringInputDeviceSummary of this TransferringInputDeviceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TransferringInputDeviceSummary.


        :return: The id of this TransferringInputDeviceSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransferringInputDeviceSummary.


        :param id: The id of this TransferringInputDeviceSummary.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this TransferringInputDeviceSummary.


        :return: The message of this TransferringInputDeviceSummary.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TransferringInputDeviceSummary.


        :param message: The message of this TransferringInputDeviceSummary.
        :type message: str
        """

        self._message = message

    @property
    def target_customer_id(self):
        """Gets the target_customer_id of this TransferringInputDeviceSummary.


        :return: The target_customer_id of this TransferringInputDeviceSummary.
        :rtype: str
        """
        return self._target_customer_id

    @target_customer_id.setter
    def target_customer_id(self, target_customer_id):
        """Sets the target_customer_id of this TransferringInputDeviceSummary.


        :param target_customer_id: The target_customer_id of this TransferringInputDeviceSummary.
        :type target_customer_id: str
        """

        self._target_customer_id = target_customer_id

    @property
    def transfer_type(self):
        """Gets the transfer_type of this TransferringInputDeviceSummary.


        :return: The transfer_type of this TransferringInputDeviceSummary.
        :rtype: InputDeviceTransferType
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this TransferringInputDeviceSummary.


        :param transfer_type: The transfer_type of this TransferringInputDeviceSummary.
        :type transfer_type: InputDeviceTransferType
        """

        self._transfer_type = transfer_type
