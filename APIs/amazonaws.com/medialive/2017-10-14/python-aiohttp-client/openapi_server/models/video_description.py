# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_description_codec_settings import VideoDescriptionCodecSettings
from openapi_server.models.video_description_respond_to_afd import VideoDescriptionRespondToAfd
from openapi_server.models.video_description_scaling_behavior import VideoDescriptionScalingBehavior
from openapi_server import util


class VideoDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codec_settings: VideoDescriptionCodecSettings=None, height: int=None, name: str=None, respond_to_afd: VideoDescriptionRespondToAfd=None, scaling_behavior: VideoDescriptionScalingBehavior=None, sharpness: int=None, width: int=None):
        """VideoDescription - a model defined in OpenAPI

        :param codec_settings: The codec_settings of this VideoDescription.
        :param height: The height of this VideoDescription.
        :param name: The name of this VideoDescription.
        :param respond_to_afd: The respond_to_afd of this VideoDescription.
        :param scaling_behavior: The scaling_behavior of this VideoDescription.
        :param sharpness: The sharpness of this VideoDescription.
        :param width: The width of this VideoDescription.
        """
        self.openapi_types = {
            'codec_settings': VideoDescriptionCodecSettings,
            'height': int,
            'name': str,
            'respond_to_afd': VideoDescriptionRespondToAfd,
            'scaling_behavior': VideoDescriptionScalingBehavior,
            'sharpness': int,
            'width': int
        }

        self.attribute_map = {
            'codec_settings': 'CodecSettings',
            'height': 'Height',
            'name': 'Name',
            'respond_to_afd': 'RespondToAfd',
            'scaling_behavior': 'ScalingBehavior',
            'sharpness': 'Sharpness',
            'width': 'Width'
        }

        self._codec_settings = codec_settings
        self._height = height
        self._name = name
        self._respond_to_afd = respond_to_afd
        self._scaling_behavior = scaling_behavior
        self._sharpness = sharpness
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoDescription of this VideoDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codec_settings(self):
        """Gets the codec_settings of this VideoDescription.


        :return: The codec_settings of this VideoDescription.
        :rtype: VideoDescriptionCodecSettings
        """
        return self._codec_settings

    @codec_settings.setter
    def codec_settings(self, codec_settings):
        """Sets the codec_settings of this VideoDescription.


        :param codec_settings: The codec_settings of this VideoDescription.
        :type codec_settings: VideoDescriptionCodecSettings
        """

        self._codec_settings = codec_settings

    @property
    def height(self):
        """Gets the height of this VideoDescription.


        :return: The height of this VideoDescription.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideoDescription.


        :param height: The height of this VideoDescription.
        :type height: int
        """

        self._height = height

    @property
    def name(self):
        """Gets the name of this VideoDescription.


        :return: The name of this VideoDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VideoDescription.


        :param name: The name of this VideoDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def respond_to_afd(self):
        """Gets the respond_to_afd of this VideoDescription.


        :return: The respond_to_afd of this VideoDescription.
        :rtype: VideoDescriptionRespondToAfd
        """
        return self._respond_to_afd

    @respond_to_afd.setter
    def respond_to_afd(self, respond_to_afd):
        """Sets the respond_to_afd of this VideoDescription.


        :param respond_to_afd: The respond_to_afd of this VideoDescription.
        :type respond_to_afd: VideoDescriptionRespondToAfd
        """

        self._respond_to_afd = respond_to_afd

    @property
    def scaling_behavior(self):
        """Gets the scaling_behavior of this VideoDescription.


        :return: The scaling_behavior of this VideoDescription.
        :rtype: VideoDescriptionScalingBehavior
        """
        return self._scaling_behavior

    @scaling_behavior.setter
    def scaling_behavior(self, scaling_behavior):
        """Sets the scaling_behavior of this VideoDescription.


        :param scaling_behavior: The scaling_behavior of this VideoDescription.
        :type scaling_behavior: VideoDescriptionScalingBehavior
        """

        self._scaling_behavior = scaling_behavior

    @property
    def sharpness(self):
        """Gets the sharpness of this VideoDescription.


        :return: The sharpness of this VideoDescription.
        :rtype: int
        """
        return self._sharpness

    @sharpness.setter
    def sharpness(self, sharpness):
        """Sets the sharpness of this VideoDescription.


        :param sharpness: The sharpness of this VideoDescription.
        :type sharpness: int
        """

        self._sharpness = sharpness

    @property
    def width(self):
        """Gets the width of this VideoDescription.


        :return: The width of this VideoDescription.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideoDescription.


        :param width: The width of this VideoDescription.
        :type width: int
        """

        self._width = width
