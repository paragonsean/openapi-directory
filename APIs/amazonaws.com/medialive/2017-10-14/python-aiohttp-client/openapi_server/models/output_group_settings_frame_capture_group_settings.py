# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frame_capture_group_settings_destination import FrameCaptureGroupSettingsDestination
from openapi_server.models.frame_capture_group_settings_frame_capture_cdn_settings import FrameCaptureGroupSettingsFrameCaptureCdnSettings
from openapi_server import util


class OutputGroupSettingsFrameCaptureGroupSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: FrameCaptureGroupSettingsDestination=None, frame_capture_cdn_settings: FrameCaptureGroupSettingsFrameCaptureCdnSettings=None):
        """OutputGroupSettingsFrameCaptureGroupSettings - a model defined in OpenAPI

        :param destination: The destination of this OutputGroupSettingsFrameCaptureGroupSettings.
        :param frame_capture_cdn_settings: The frame_capture_cdn_settings of this OutputGroupSettingsFrameCaptureGroupSettings.
        """
        self.openapi_types = {
            'destination': FrameCaptureGroupSettingsDestination,
            'frame_capture_cdn_settings': FrameCaptureGroupSettingsFrameCaptureCdnSettings
        }

        self.attribute_map = {
            'destination': 'Destination',
            'frame_capture_cdn_settings': 'FrameCaptureCdnSettings'
        }

        self._destination = destination
        self._frame_capture_cdn_settings = frame_capture_cdn_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputGroupSettingsFrameCaptureGroupSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputGroupSettings_FrameCaptureGroupSettings of this OutputGroupSettingsFrameCaptureGroupSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this OutputGroupSettingsFrameCaptureGroupSettings.


        :return: The destination of this OutputGroupSettingsFrameCaptureGroupSettings.
        :rtype: FrameCaptureGroupSettingsDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this OutputGroupSettingsFrameCaptureGroupSettings.


        :param destination: The destination of this OutputGroupSettingsFrameCaptureGroupSettings.
        :type destination: FrameCaptureGroupSettingsDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def frame_capture_cdn_settings(self):
        """Gets the frame_capture_cdn_settings of this OutputGroupSettingsFrameCaptureGroupSettings.


        :return: The frame_capture_cdn_settings of this OutputGroupSettingsFrameCaptureGroupSettings.
        :rtype: FrameCaptureGroupSettingsFrameCaptureCdnSettings
        """
        return self._frame_capture_cdn_settings

    @frame_capture_cdn_settings.setter
    def frame_capture_cdn_settings(self, frame_capture_cdn_settings):
        """Sets the frame_capture_cdn_settings of this OutputGroupSettingsFrameCaptureGroupSettings.


        :param frame_capture_cdn_settings: The frame_capture_cdn_settings of this OutputGroupSettingsFrameCaptureGroupSettings.
        :type frame_capture_cdn_settings: FrameCaptureGroupSettingsFrameCaptureCdnSettings
        """

        self._frame_capture_cdn_settings = frame_capture_cdn_settings
