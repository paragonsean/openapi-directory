# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_group_output_group_settings import OutputGroupOutputGroupSettings
from openapi_server import util


class OutputGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, output_group_settings: OutputGroupOutputGroupSettings=None, outputs: List=None):
        """OutputGroup - a model defined in OpenAPI

        :param name: The name of this OutputGroup.
        :param output_group_settings: The output_group_settings of this OutputGroup.
        :param outputs: The outputs of this OutputGroup.
        """
        self.openapi_types = {
            'name': str,
            'output_group_settings': OutputGroupOutputGroupSettings,
            'outputs': List
        }

        self.attribute_map = {
            'name': 'Name',
            'output_group_settings': 'OutputGroupSettings',
            'outputs': 'Outputs'
        }

        self._name = name
        self._output_group_settings = output_group_settings
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputGroup of this OutputGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this OutputGroup.


        :return: The name of this OutputGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OutputGroup.


        :param name: The name of this OutputGroup.
        :type name: str
        """

        self._name = name

    @property
    def output_group_settings(self):
        """Gets the output_group_settings of this OutputGroup.


        :return: The output_group_settings of this OutputGroup.
        :rtype: OutputGroupOutputGroupSettings
        """
        return self._output_group_settings

    @output_group_settings.setter
    def output_group_settings(self, output_group_settings):
        """Sets the output_group_settings of this OutputGroup.


        :param output_group_settings: The output_group_settings of this OutputGroup.
        :type output_group_settings: OutputGroupOutputGroupSettings
        """
        if output_group_settings is None:
            raise ValueError("Invalid value for `output_group_settings`, must not be `None`")

        self._output_group_settings = output_group_settings

    @property
    def outputs(self):
        """Gets the outputs of this OutputGroup.


        :return: The outputs of this OutputGroup.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this OutputGroup.


        :param outputs: The outputs of this OutputGroup.
        :type outputs: List
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs
