# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_clipping_settings_start_timecode import InputClippingSettingsStartTimecode
from openapi_server.models.input_clipping_settings_stop_timecode import InputClippingSettingsStopTimecode
from openapi_server.models.input_timecode_source import InputTimecodeSource
from openapi_server import util


class InputClippingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_timecode_source: InputTimecodeSource=None, start_timecode: InputClippingSettingsStartTimecode=None, stop_timecode: InputClippingSettingsStopTimecode=None):
        """InputClippingSettings - a model defined in OpenAPI

        :param input_timecode_source: The input_timecode_source of this InputClippingSettings.
        :param start_timecode: The start_timecode of this InputClippingSettings.
        :param stop_timecode: The stop_timecode of this InputClippingSettings.
        """
        self.openapi_types = {
            'input_timecode_source': InputTimecodeSource,
            'start_timecode': InputClippingSettingsStartTimecode,
            'stop_timecode': InputClippingSettingsStopTimecode
        }

        self.attribute_map = {
            'input_timecode_source': 'InputTimecodeSource',
            'start_timecode': 'StartTimecode',
            'stop_timecode': 'StopTimecode'
        }

        self._input_timecode_source = input_timecode_source
        self._start_timecode = start_timecode
        self._stop_timecode = stop_timecode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputClippingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputClippingSettings of this InputClippingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_timecode_source(self):
        """Gets the input_timecode_source of this InputClippingSettings.


        :return: The input_timecode_source of this InputClippingSettings.
        :rtype: InputTimecodeSource
        """
        return self._input_timecode_source

    @input_timecode_source.setter
    def input_timecode_source(self, input_timecode_source):
        """Sets the input_timecode_source of this InputClippingSettings.


        :param input_timecode_source: The input_timecode_source of this InputClippingSettings.
        :type input_timecode_source: InputTimecodeSource
        """
        if input_timecode_source is None:
            raise ValueError("Invalid value for `input_timecode_source`, must not be `None`")

        self._input_timecode_source = input_timecode_source

    @property
    def start_timecode(self):
        """Gets the start_timecode of this InputClippingSettings.


        :return: The start_timecode of this InputClippingSettings.
        :rtype: InputClippingSettingsStartTimecode
        """
        return self._start_timecode

    @start_timecode.setter
    def start_timecode(self, start_timecode):
        """Sets the start_timecode of this InputClippingSettings.


        :param start_timecode: The start_timecode of this InputClippingSettings.
        :type start_timecode: InputClippingSettingsStartTimecode
        """

        self._start_timecode = start_timecode

    @property
    def stop_timecode(self):
        """Gets the stop_timecode of this InputClippingSettings.


        :return: The stop_timecode of this InputClippingSettings.
        :rtype: InputClippingSettingsStopTimecode
        """
        return self._stop_timecode

    @stop_timecode.setter
    def stop_timecode(self, stop_timecode):
        """Sets the stop_timecode of this InputClippingSettings.


        :param stop_timecode: The stop_timecode of this InputClippingSettings.
        :type stop_timecode: InputClippingSettingsStopTimecode
        """

        self._stop_timecode = stop_timecode
