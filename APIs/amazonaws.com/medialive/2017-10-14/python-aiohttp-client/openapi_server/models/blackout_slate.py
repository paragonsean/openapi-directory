# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blackout_slate_blackout_slate_image import BlackoutSlateBlackoutSlateImage
from openapi_server.models.blackout_slate_network_end_blackout import BlackoutSlateNetworkEndBlackout
from openapi_server.models.blackout_slate_network_end_blackout_image import BlackoutSlateNetworkEndBlackoutImage
from openapi_server.models.blackout_slate_state import BlackoutSlateState
from openapi_server import util


class BlackoutSlate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blackout_slate_image: BlackoutSlateBlackoutSlateImage=None, network_end_blackout: BlackoutSlateNetworkEndBlackout=None, network_end_blackout_image: BlackoutSlateNetworkEndBlackoutImage=None, network_id: str=None, state: BlackoutSlateState=None):
        """BlackoutSlate - a model defined in OpenAPI

        :param blackout_slate_image: The blackout_slate_image of this BlackoutSlate.
        :param network_end_blackout: The network_end_blackout of this BlackoutSlate.
        :param network_end_blackout_image: The network_end_blackout_image of this BlackoutSlate.
        :param network_id: The network_id of this BlackoutSlate.
        :param state: The state of this BlackoutSlate.
        """
        self.openapi_types = {
            'blackout_slate_image': BlackoutSlateBlackoutSlateImage,
            'network_end_blackout': BlackoutSlateNetworkEndBlackout,
            'network_end_blackout_image': BlackoutSlateNetworkEndBlackoutImage,
            'network_id': str,
            'state': BlackoutSlateState
        }

        self.attribute_map = {
            'blackout_slate_image': 'BlackoutSlateImage',
            'network_end_blackout': 'NetworkEndBlackout',
            'network_end_blackout_image': 'NetworkEndBlackoutImage',
            'network_id': 'NetworkId',
            'state': 'State'
        }

        self._blackout_slate_image = blackout_slate_image
        self._network_end_blackout = network_end_blackout
        self._network_end_blackout_image = network_end_blackout_image
        self._network_id = network_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlackoutSlate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlackoutSlate of this BlackoutSlate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blackout_slate_image(self):
        """Gets the blackout_slate_image of this BlackoutSlate.


        :return: The blackout_slate_image of this BlackoutSlate.
        :rtype: BlackoutSlateBlackoutSlateImage
        """
        return self._blackout_slate_image

    @blackout_slate_image.setter
    def blackout_slate_image(self, blackout_slate_image):
        """Sets the blackout_slate_image of this BlackoutSlate.


        :param blackout_slate_image: The blackout_slate_image of this BlackoutSlate.
        :type blackout_slate_image: BlackoutSlateBlackoutSlateImage
        """

        self._blackout_slate_image = blackout_slate_image

    @property
    def network_end_blackout(self):
        """Gets the network_end_blackout of this BlackoutSlate.


        :return: The network_end_blackout of this BlackoutSlate.
        :rtype: BlackoutSlateNetworkEndBlackout
        """
        return self._network_end_blackout

    @network_end_blackout.setter
    def network_end_blackout(self, network_end_blackout):
        """Sets the network_end_blackout of this BlackoutSlate.


        :param network_end_blackout: The network_end_blackout of this BlackoutSlate.
        :type network_end_blackout: BlackoutSlateNetworkEndBlackout
        """

        self._network_end_blackout = network_end_blackout

    @property
    def network_end_blackout_image(self):
        """Gets the network_end_blackout_image of this BlackoutSlate.


        :return: The network_end_blackout_image of this BlackoutSlate.
        :rtype: BlackoutSlateNetworkEndBlackoutImage
        """
        return self._network_end_blackout_image

    @network_end_blackout_image.setter
    def network_end_blackout_image(self, network_end_blackout_image):
        """Sets the network_end_blackout_image of this BlackoutSlate.


        :param network_end_blackout_image: The network_end_blackout_image of this BlackoutSlate.
        :type network_end_blackout_image: BlackoutSlateNetworkEndBlackoutImage
        """

        self._network_end_blackout_image = network_end_blackout_image

    @property
    def network_id(self):
        """Gets the network_id of this BlackoutSlate.


        :return: The network_id of this BlackoutSlate.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this BlackoutSlate.


        :param network_id: The network_id of this BlackoutSlate.
        :type network_id: str
        """

        self._network_id = network_id

    @property
    def state(self):
        """Gets the state of this BlackoutSlate.


        :return: The state of this BlackoutSlate.
        :rtype: BlackoutSlateState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BlackoutSlate.


        :param state: The state of this BlackoutSlate.
        :type state: BlackoutSlateState
        """

        self._state = state
