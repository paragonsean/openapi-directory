# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scte35_descriptor_settings_segmentation_descriptor_scte35_descriptor_settings import Scte35DescriptorSettingsSegmentationDescriptorScte35DescriptorSettings
from openapi_server import util


class Scte35DescriptorSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segmentation_descriptor_scte35_descriptor_settings: Scte35DescriptorSettingsSegmentationDescriptorScte35DescriptorSettings=None):
        """Scte35DescriptorSettings - a model defined in OpenAPI

        :param segmentation_descriptor_scte35_descriptor_settings: The segmentation_descriptor_scte35_descriptor_settings of this Scte35DescriptorSettings.
        """
        self.openapi_types = {
            'segmentation_descriptor_scte35_descriptor_settings': Scte35DescriptorSettingsSegmentationDescriptorScte35DescriptorSettings
        }

        self.attribute_map = {
            'segmentation_descriptor_scte35_descriptor_settings': 'SegmentationDescriptorScte35DescriptorSettings'
        }

        self._segmentation_descriptor_scte35_descriptor_settings = segmentation_descriptor_scte35_descriptor_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scte35DescriptorSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scte35DescriptorSettings of this Scte35DescriptorSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segmentation_descriptor_scte35_descriptor_settings(self):
        """Gets the segmentation_descriptor_scte35_descriptor_settings of this Scte35DescriptorSettings.


        :return: The segmentation_descriptor_scte35_descriptor_settings of this Scte35DescriptorSettings.
        :rtype: Scte35DescriptorSettingsSegmentationDescriptorScte35DescriptorSettings
        """
        return self._segmentation_descriptor_scte35_descriptor_settings

    @segmentation_descriptor_scte35_descriptor_settings.setter
    def segmentation_descriptor_scte35_descriptor_settings(self, segmentation_descriptor_scte35_descriptor_settings):
        """Sets the segmentation_descriptor_scte35_descriptor_settings of this Scte35DescriptorSettings.


        :param segmentation_descriptor_scte35_descriptor_settings: The segmentation_descriptor_scte35_descriptor_settings of this Scte35DescriptorSettings.
        :type segmentation_descriptor_scte35_descriptor_settings: Scte35DescriptorSettingsSegmentationDescriptorScte35DescriptorSettings
        """
        if segmentation_descriptor_scte35_descriptor_settings is None:
            raise ValueError("Invalid value for `segmentation_descriptor_scte35_descriptor_settings`, must not be `None`")

        self._segmentation_descriptor_scte35_descriptor_settings = segmentation_descriptor_scte35_descriptor_settings
