# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nielsen_watermarks_cbet_stepaside import NielsenWatermarksCbetStepaside
from openapi_server import util


class NielsenWatermarksSettingsNielsenCbetSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cbet_check_digit_string: str=None, cbet_stepaside: NielsenWatermarksCbetStepaside=None, csid: str=None):
        """NielsenWatermarksSettingsNielsenCbetSettings - a model defined in OpenAPI

        :param cbet_check_digit_string: The cbet_check_digit_string of this NielsenWatermarksSettingsNielsenCbetSettings.
        :param cbet_stepaside: The cbet_stepaside of this NielsenWatermarksSettingsNielsenCbetSettings.
        :param csid: The csid of this NielsenWatermarksSettingsNielsenCbetSettings.
        """
        self.openapi_types = {
            'cbet_check_digit_string': str,
            'cbet_stepaside': NielsenWatermarksCbetStepaside,
            'csid': str
        }

        self.attribute_map = {
            'cbet_check_digit_string': 'CbetCheckDigitString',
            'cbet_stepaside': 'CbetStepaside',
            'csid': 'Csid'
        }

        self._cbet_check_digit_string = cbet_check_digit_string
        self._cbet_stepaside = cbet_stepaside
        self._csid = csid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NielsenWatermarksSettingsNielsenCbetSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NielsenWatermarksSettings_NielsenCbetSettings of this NielsenWatermarksSettingsNielsenCbetSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cbet_check_digit_string(self):
        """Gets the cbet_check_digit_string of this NielsenWatermarksSettingsNielsenCbetSettings.


        :return: The cbet_check_digit_string of this NielsenWatermarksSettingsNielsenCbetSettings.
        :rtype: str
        """
        return self._cbet_check_digit_string

    @cbet_check_digit_string.setter
    def cbet_check_digit_string(self, cbet_check_digit_string):
        """Sets the cbet_check_digit_string of this NielsenWatermarksSettingsNielsenCbetSettings.


        :param cbet_check_digit_string: The cbet_check_digit_string of this NielsenWatermarksSettingsNielsenCbetSettings.
        :type cbet_check_digit_string: str
        """
        if cbet_check_digit_string is None:
            raise ValueError("Invalid value for `cbet_check_digit_string`, must not be `None`")

        self._cbet_check_digit_string = cbet_check_digit_string

    @property
    def cbet_stepaside(self):
        """Gets the cbet_stepaside of this NielsenWatermarksSettingsNielsenCbetSettings.


        :return: The cbet_stepaside of this NielsenWatermarksSettingsNielsenCbetSettings.
        :rtype: NielsenWatermarksCbetStepaside
        """
        return self._cbet_stepaside

    @cbet_stepaside.setter
    def cbet_stepaside(self, cbet_stepaside):
        """Sets the cbet_stepaside of this NielsenWatermarksSettingsNielsenCbetSettings.


        :param cbet_stepaside: The cbet_stepaside of this NielsenWatermarksSettingsNielsenCbetSettings.
        :type cbet_stepaside: NielsenWatermarksCbetStepaside
        """
        if cbet_stepaside is None:
            raise ValueError("Invalid value for `cbet_stepaside`, must not be `None`")

        self._cbet_stepaside = cbet_stepaside

    @property
    def csid(self):
        """Gets the csid of this NielsenWatermarksSettingsNielsenCbetSettings.


        :return: The csid of this NielsenWatermarksSettingsNielsenCbetSettings.
        :rtype: str
        """
        return self._csid

    @csid.setter
    def csid(self, csid):
        """Sets the csid of this NielsenWatermarksSettingsNielsenCbetSettings.


        :param csid: The csid of this NielsenWatermarksSettingsNielsenCbetSettings.
        :type csid: str
        """
        if csid is None:
            raise ValueError("Invalid value for `csid`, must not be `None`")

        self._csid = csid
