# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioOnlyHlsSettingsAudioOnlyImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password_param: str=None, uri: str=None, username: str=None):
        """AudioOnlyHlsSettingsAudioOnlyImage - a model defined in OpenAPI

        :param password_param: The password_param of this AudioOnlyHlsSettingsAudioOnlyImage.
        :param uri: The uri of this AudioOnlyHlsSettingsAudioOnlyImage.
        :param username: The username of this AudioOnlyHlsSettingsAudioOnlyImage.
        """
        self.openapi_types = {
            'password_param': str,
            'uri': str,
            'username': str
        }

        self.attribute_map = {
            'password_param': 'PasswordParam',
            'uri': 'Uri',
            'username': 'Username'
        }

        self._password_param = password_param
        self._uri = uri
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioOnlyHlsSettingsAudioOnlyImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioOnlyHlsSettings_AudioOnlyImage of this AudioOnlyHlsSettingsAudioOnlyImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password_param(self):
        """Gets the password_param of this AudioOnlyHlsSettingsAudioOnlyImage.


        :return: The password_param of this AudioOnlyHlsSettingsAudioOnlyImage.
        :rtype: str
        """
        return self._password_param

    @password_param.setter
    def password_param(self, password_param):
        """Sets the password_param of this AudioOnlyHlsSettingsAudioOnlyImage.


        :param password_param: The password_param of this AudioOnlyHlsSettingsAudioOnlyImage.
        :type password_param: str
        """

        self._password_param = password_param

    @property
    def uri(self):
        """Gets the uri of this AudioOnlyHlsSettingsAudioOnlyImage.


        :return: The uri of this AudioOnlyHlsSettingsAudioOnlyImage.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AudioOnlyHlsSettingsAudioOnlyImage.


        :param uri: The uri of this AudioOnlyHlsSettingsAudioOnlyImage.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def username(self):
        """Gets the username of this AudioOnlyHlsSettingsAudioOnlyImage.


        :return: The username of this AudioOnlyHlsSettingsAudioOnlyImage.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AudioOnlyHlsSettingsAudioOnlyImage.


        :param username: The username of this AudioOnlyHlsSettingsAudioOnlyImage.
        :type username: str
        """

        self._username = username
