# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_multiplex_response_multiplex_settings import DeleteMultiplexResponseMultiplexSettings
from openapi_server.models.multiplex_state import MultiplexState
from openapi_server import util


class Multiplex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, availability_zones: List=None, destinations: List=None, id: str=None, multiplex_settings: DeleteMultiplexResponseMultiplexSettings=None, name: str=None, pipelines_running_count: int=None, program_count: int=None, state: MultiplexState=None, tags: Dict=None):
        """Multiplex - a model defined in OpenAPI

        :param arn: The arn of this Multiplex.
        :param availability_zones: The availability_zones of this Multiplex.
        :param destinations: The destinations of this Multiplex.
        :param id: The id of this Multiplex.
        :param multiplex_settings: The multiplex_settings of this Multiplex.
        :param name: The name of this Multiplex.
        :param pipelines_running_count: The pipelines_running_count of this Multiplex.
        :param program_count: The program_count of this Multiplex.
        :param state: The state of this Multiplex.
        :param tags: The tags of this Multiplex.
        """
        self.openapi_types = {
            'arn': str,
            'availability_zones': List,
            'destinations': List,
            'id': str,
            'multiplex_settings': DeleteMultiplexResponseMultiplexSettings,
            'name': str,
            'pipelines_running_count': int,
            'program_count': int,
            'state': MultiplexState,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'Arn',
            'availability_zones': 'AvailabilityZones',
            'destinations': 'Destinations',
            'id': 'Id',
            'multiplex_settings': 'MultiplexSettings',
            'name': 'Name',
            'pipelines_running_count': 'PipelinesRunningCount',
            'program_count': 'ProgramCount',
            'state': 'State',
            'tags': 'Tags'
        }

        self._arn = arn
        self._availability_zones = availability_zones
        self._destinations = destinations
        self._id = id
        self._multiplex_settings = multiplex_settings
        self._name = name
        self._pipelines_running_count = pipelines_running_count
        self._program_count = program_count
        self._state = state
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Multiplex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Multiplex of this Multiplex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Multiplex.


        :return: The arn of this Multiplex.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Multiplex.


        :param arn: The arn of this Multiplex.
        :type arn: str
        """

        self._arn = arn

    @property
    def availability_zones(self):
        """Gets the availability_zones of this Multiplex.


        :return: The availability_zones of this Multiplex.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this Multiplex.


        :param availability_zones: The availability_zones of this Multiplex.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones

    @property
    def destinations(self):
        """Gets the destinations of this Multiplex.


        :return: The destinations of this Multiplex.
        :rtype: List
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this Multiplex.


        :param destinations: The destinations of this Multiplex.
        :type destinations: List
        """

        self._destinations = destinations

    @property
    def id(self):
        """Gets the id of this Multiplex.


        :return: The id of this Multiplex.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Multiplex.


        :param id: The id of this Multiplex.
        :type id: str
        """

        self._id = id

    @property
    def multiplex_settings(self):
        """Gets the multiplex_settings of this Multiplex.


        :return: The multiplex_settings of this Multiplex.
        :rtype: DeleteMultiplexResponseMultiplexSettings
        """
        return self._multiplex_settings

    @multiplex_settings.setter
    def multiplex_settings(self, multiplex_settings):
        """Sets the multiplex_settings of this Multiplex.


        :param multiplex_settings: The multiplex_settings of this Multiplex.
        :type multiplex_settings: DeleteMultiplexResponseMultiplexSettings
        """

        self._multiplex_settings = multiplex_settings

    @property
    def name(self):
        """Gets the name of this Multiplex.


        :return: The name of this Multiplex.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Multiplex.


        :param name: The name of this Multiplex.
        :type name: str
        """

        self._name = name

    @property
    def pipelines_running_count(self):
        """Gets the pipelines_running_count of this Multiplex.


        :return: The pipelines_running_count of this Multiplex.
        :rtype: int
        """
        return self._pipelines_running_count

    @pipelines_running_count.setter
    def pipelines_running_count(self, pipelines_running_count):
        """Sets the pipelines_running_count of this Multiplex.


        :param pipelines_running_count: The pipelines_running_count of this Multiplex.
        :type pipelines_running_count: int
        """

        self._pipelines_running_count = pipelines_running_count

    @property
    def program_count(self):
        """Gets the program_count of this Multiplex.


        :return: The program_count of this Multiplex.
        :rtype: int
        """
        return self._program_count

    @program_count.setter
    def program_count(self, program_count):
        """Sets the program_count of this Multiplex.


        :param program_count: The program_count of this Multiplex.
        :type program_count: int
        """

        self._program_count = program_count

    @property
    def state(self):
        """Gets the state of this Multiplex.


        :return: The state of this Multiplex.
        :rtype: MultiplexState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Multiplex.


        :param state: The state of this Multiplex.
        :type state: MultiplexState
        """

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this Multiplex.


        :return: The tags of this Multiplex.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Multiplex.


        :param tags: The tags of this Multiplex.
        :type tags: Dict
        """

        self._tags = tags
