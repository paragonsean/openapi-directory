# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.afd_signaling import AfdSignaling
from openapi_server.models.fixed_afd import FixedAfd
from openapi_server.models.frame_capture_settings_timecode_burnin_settings import FrameCaptureSettingsTimecodeBurninSettings
from openapi_server.models.h265_adaptive_quantization import H265AdaptiveQuantization
from openapi_server.models.h265_alternative_transfer_function import H265AlternativeTransferFunction
from openapi_server.models.h265_color_metadata import H265ColorMetadata
from openapi_server.models.h265_flicker_aq import H265FlickerAq
from openapi_server.models.h265_gop_size_units import H265GopSizeUnits
from openapi_server.models.h265_level import H265Level
from openapi_server.models.h265_look_ahead_rate_control import H265LookAheadRateControl
from openapi_server.models.h265_profile import H265Profile
from openapi_server.models.h265_rate_control_mode import H265RateControlMode
from openapi_server.models.h265_scan_type import H265ScanType
from openapi_server.models.h265_scene_change_detect import H265SceneChangeDetect
from openapi_server.models.h265_settings_color_space_settings import H265SettingsColorSpaceSettings
from openapi_server.models.h265_settings_filter_settings import H265SettingsFilterSettings
from openapi_server.models.h265_tier import H265Tier
from openapi_server.models.h265_timecode_insertion_behavior import H265TimecodeInsertionBehavior
from openapi_server import util


class VideoCodecSettingsH265Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adaptive_quantization: H265AdaptiveQuantization=None, afd_signaling: AfdSignaling=None, alternative_transfer_function: H265AlternativeTransferFunction=None, bitrate: int=None, buf_size: int=None, color_metadata: H265ColorMetadata=None, color_space_settings: H265SettingsColorSpaceSettings=None, filter_settings: H265SettingsFilterSettings=None, fixed_afd: FixedAfd=None, flicker_aq: H265FlickerAq=None, framerate_denominator: int=None, framerate_numerator: int=None, gop_closed_cadence: int=None, gop_size: float=None, gop_size_units: H265GopSizeUnits=None, level: H265Level=None, look_ahead_rate_control: H265LookAheadRateControl=None, max_bitrate: int=None, min_i_interval: int=None, par_denominator: int=None, par_numerator: int=None, profile: H265Profile=None, qvbr_quality_level: int=None, rate_control_mode: H265RateControlMode=None, scan_type: H265ScanType=None, scene_change_detect: H265SceneChangeDetect=None, slices: int=None, tier: H265Tier=None, timecode_insertion: H265TimecodeInsertionBehavior=None, timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings=None):
        """VideoCodecSettingsH265Settings - a model defined in OpenAPI

        :param adaptive_quantization: The adaptive_quantization of this VideoCodecSettingsH265Settings.
        :param afd_signaling: The afd_signaling of this VideoCodecSettingsH265Settings.
        :param alternative_transfer_function: The alternative_transfer_function of this VideoCodecSettingsH265Settings.
        :param bitrate: The bitrate of this VideoCodecSettingsH265Settings.
        :param buf_size: The buf_size of this VideoCodecSettingsH265Settings.
        :param color_metadata: The color_metadata of this VideoCodecSettingsH265Settings.
        :param color_space_settings: The color_space_settings of this VideoCodecSettingsH265Settings.
        :param filter_settings: The filter_settings of this VideoCodecSettingsH265Settings.
        :param fixed_afd: The fixed_afd of this VideoCodecSettingsH265Settings.
        :param flicker_aq: The flicker_aq of this VideoCodecSettingsH265Settings.
        :param framerate_denominator: The framerate_denominator of this VideoCodecSettingsH265Settings.
        :param framerate_numerator: The framerate_numerator of this VideoCodecSettingsH265Settings.
        :param gop_closed_cadence: The gop_closed_cadence of this VideoCodecSettingsH265Settings.
        :param gop_size: The gop_size of this VideoCodecSettingsH265Settings.
        :param gop_size_units: The gop_size_units of this VideoCodecSettingsH265Settings.
        :param level: The level of this VideoCodecSettingsH265Settings.
        :param look_ahead_rate_control: The look_ahead_rate_control of this VideoCodecSettingsH265Settings.
        :param max_bitrate: The max_bitrate of this VideoCodecSettingsH265Settings.
        :param min_i_interval: The min_i_interval of this VideoCodecSettingsH265Settings.
        :param par_denominator: The par_denominator of this VideoCodecSettingsH265Settings.
        :param par_numerator: The par_numerator of this VideoCodecSettingsH265Settings.
        :param profile: The profile of this VideoCodecSettingsH265Settings.
        :param qvbr_quality_level: The qvbr_quality_level of this VideoCodecSettingsH265Settings.
        :param rate_control_mode: The rate_control_mode of this VideoCodecSettingsH265Settings.
        :param scan_type: The scan_type of this VideoCodecSettingsH265Settings.
        :param scene_change_detect: The scene_change_detect of this VideoCodecSettingsH265Settings.
        :param slices: The slices of this VideoCodecSettingsH265Settings.
        :param tier: The tier of this VideoCodecSettingsH265Settings.
        :param timecode_insertion: The timecode_insertion of this VideoCodecSettingsH265Settings.
        :param timecode_burnin_settings: The timecode_burnin_settings of this VideoCodecSettingsH265Settings.
        """
        self.openapi_types = {
            'adaptive_quantization': H265AdaptiveQuantization,
            'afd_signaling': AfdSignaling,
            'alternative_transfer_function': H265AlternativeTransferFunction,
            'bitrate': int,
            'buf_size': int,
            'color_metadata': H265ColorMetadata,
            'color_space_settings': H265SettingsColorSpaceSettings,
            'filter_settings': H265SettingsFilterSettings,
            'fixed_afd': FixedAfd,
            'flicker_aq': H265FlickerAq,
            'framerate_denominator': int,
            'framerate_numerator': int,
            'gop_closed_cadence': int,
            'gop_size': float,
            'gop_size_units': H265GopSizeUnits,
            'level': H265Level,
            'look_ahead_rate_control': H265LookAheadRateControl,
            'max_bitrate': int,
            'min_i_interval': int,
            'par_denominator': int,
            'par_numerator': int,
            'profile': H265Profile,
            'qvbr_quality_level': int,
            'rate_control_mode': H265RateControlMode,
            'scan_type': H265ScanType,
            'scene_change_detect': H265SceneChangeDetect,
            'slices': int,
            'tier': H265Tier,
            'timecode_insertion': H265TimecodeInsertionBehavior,
            'timecode_burnin_settings': FrameCaptureSettingsTimecodeBurninSettings
        }

        self.attribute_map = {
            'adaptive_quantization': 'AdaptiveQuantization',
            'afd_signaling': 'AfdSignaling',
            'alternative_transfer_function': 'AlternativeTransferFunction',
            'bitrate': 'Bitrate',
            'buf_size': 'BufSize',
            'color_metadata': 'ColorMetadata',
            'color_space_settings': 'ColorSpaceSettings',
            'filter_settings': 'FilterSettings',
            'fixed_afd': 'FixedAfd',
            'flicker_aq': 'FlickerAq',
            'framerate_denominator': 'FramerateDenominator',
            'framerate_numerator': 'FramerateNumerator',
            'gop_closed_cadence': 'GopClosedCadence',
            'gop_size': 'GopSize',
            'gop_size_units': 'GopSizeUnits',
            'level': 'Level',
            'look_ahead_rate_control': 'LookAheadRateControl',
            'max_bitrate': 'MaxBitrate',
            'min_i_interval': 'MinIInterval',
            'par_denominator': 'ParDenominator',
            'par_numerator': 'ParNumerator',
            'profile': 'Profile',
            'qvbr_quality_level': 'QvbrQualityLevel',
            'rate_control_mode': 'RateControlMode',
            'scan_type': 'ScanType',
            'scene_change_detect': 'SceneChangeDetect',
            'slices': 'Slices',
            'tier': 'Tier',
            'timecode_insertion': 'TimecodeInsertion',
            'timecode_burnin_settings': 'TimecodeBurninSettings'
        }

        self._adaptive_quantization = adaptive_quantization
        self._afd_signaling = afd_signaling
        self._alternative_transfer_function = alternative_transfer_function
        self._bitrate = bitrate
        self._buf_size = buf_size
        self._color_metadata = color_metadata
        self._color_space_settings = color_space_settings
        self._filter_settings = filter_settings
        self._fixed_afd = fixed_afd
        self._flicker_aq = flicker_aq
        self._framerate_denominator = framerate_denominator
        self._framerate_numerator = framerate_numerator
        self._gop_closed_cadence = gop_closed_cadence
        self._gop_size = gop_size
        self._gop_size_units = gop_size_units
        self._level = level
        self._look_ahead_rate_control = look_ahead_rate_control
        self._max_bitrate = max_bitrate
        self._min_i_interval = min_i_interval
        self._par_denominator = par_denominator
        self._par_numerator = par_numerator
        self._profile = profile
        self._qvbr_quality_level = qvbr_quality_level
        self._rate_control_mode = rate_control_mode
        self._scan_type = scan_type
        self._scene_change_detect = scene_change_detect
        self._slices = slices
        self._tier = tier
        self._timecode_insertion = timecode_insertion
        self._timecode_burnin_settings = timecode_burnin_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoCodecSettingsH265Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoCodecSettings_H265Settings of this VideoCodecSettingsH265Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adaptive_quantization(self):
        """Gets the adaptive_quantization of this VideoCodecSettingsH265Settings.


        :return: The adaptive_quantization of this VideoCodecSettingsH265Settings.
        :rtype: H265AdaptiveQuantization
        """
        return self._adaptive_quantization

    @adaptive_quantization.setter
    def adaptive_quantization(self, adaptive_quantization):
        """Sets the adaptive_quantization of this VideoCodecSettingsH265Settings.


        :param adaptive_quantization: The adaptive_quantization of this VideoCodecSettingsH265Settings.
        :type adaptive_quantization: H265AdaptiveQuantization
        """

        self._adaptive_quantization = adaptive_quantization

    @property
    def afd_signaling(self):
        """Gets the afd_signaling of this VideoCodecSettingsH265Settings.


        :return: The afd_signaling of this VideoCodecSettingsH265Settings.
        :rtype: AfdSignaling
        """
        return self._afd_signaling

    @afd_signaling.setter
    def afd_signaling(self, afd_signaling):
        """Sets the afd_signaling of this VideoCodecSettingsH265Settings.


        :param afd_signaling: The afd_signaling of this VideoCodecSettingsH265Settings.
        :type afd_signaling: AfdSignaling
        """

        self._afd_signaling = afd_signaling

    @property
    def alternative_transfer_function(self):
        """Gets the alternative_transfer_function of this VideoCodecSettingsH265Settings.


        :return: The alternative_transfer_function of this VideoCodecSettingsH265Settings.
        :rtype: H265AlternativeTransferFunction
        """
        return self._alternative_transfer_function

    @alternative_transfer_function.setter
    def alternative_transfer_function(self, alternative_transfer_function):
        """Sets the alternative_transfer_function of this VideoCodecSettingsH265Settings.


        :param alternative_transfer_function: The alternative_transfer_function of this VideoCodecSettingsH265Settings.
        :type alternative_transfer_function: H265AlternativeTransferFunction
        """

        self._alternative_transfer_function = alternative_transfer_function

    @property
    def bitrate(self):
        """Gets the bitrate of this VideoCodecSettingsH265Settings.


        :return: The bitrate of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this VideoCodecSettingsH265Settings.


        :param bitrate: The bitrate of this VideoCodecSettingsH265Settings.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def buf_size(self):
        """Gets the buf_size of this VideoCodecSettingsH265Settings.


        :return: The buf_size of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._buf_size

    @buf_size.setter
    def buf_size(self, buf_size):
        """Sets the buf_size of this VideoCodecSettingsH265Settings.


        :param buf_size: The buf_size of this VideoCodecSettingsH265Settings.
        :type buf_size: int
        """

        self._buf_size = buf_size

    @property
    def color_metadata(self):
        """Gets the color_metadata of this VideoCodecSettingsH265Settings.


        :return: The color_metadata of this VideoCodecSettingsH265Settings.
        :rtype: H265ColorMetadata
        """
        return self._color_metadata

    @color_metadata.setter
    def color_metadata(self, color_metadata):
        """Sets the color_metadata of this VideoCodecSettingsH265Settings.


        :param color_metadata: The color_metadata of this VideoCodecSettingsH265Settings.
        :type color_metadata: H265ColorMetadata
        """

        self._color_metadata = color_metadata

    @property
    def color_space_settings(self):
        """Gets the color_space_settings of this VideoCodecSettingsH265Settings.


        :return: The color_space_settings of this VideoCodecSettingsH265Settings.
        :rtype: H265SettingsColorSpaceSettings
        """
        return self._color_space_settings

    @color_space_settings.setter
    def color_space_settings(self, color_space_settings):
        """Sets the color_space_settings of this VideoCodecSettingsH265Settings.


        :param color_space_settings: The color_space_settings of this VideoCodecSettingsH265Settings.
        :type color_space_settings: H265SettingsColorSpaceSettings
        """

        self._color_space_settings = color_space_settings

    @property
    def filter_settings(self):
        """Gets the filter_settings of this VideoCodecSettingsH265Settings.


        :return: The filter_settings of this VideoCodecSettingsH265Settings.
        :rtype: H265SettingsFilterSettings
        """
        return self._filter_settings

    @filter_settings.setter
    def filter_settings(self, filter_settings):
        """Sets the filter_settings of this VideoCodecSettingsH265Settings.


        :param filter_settings: The filter_settings of this VideoCodecSettingsH265Settings.
        :type filter_settings: H265SettingsFilterSettings
        """

        self._filter_settings = filter_settings

    @property
    def fixed_afd(self):
        """Gets the fixed_afd of this VideoCodecSettingsH265Settings.


        :return: The fixed_afd of this VideoCodecSettingsH265Settings.
        :rtype: FixedAfd
        """
        return self._fixed_afd

    @fixed_afd.setter
    def fixed_afd(self, fixed_afd):
        """Sets the fixed_afd of this VideoCodecSettingsH265Settings.


        :param fixed_afd: The fixed_afd of this VideoCodecSettingsH265Settings.
        :type fixed_afd: FixedAfd
        """

        self._fixed_afd = fixed_afd

    @property
    def flicker_aq(self):
        """Gets the flicker_aq of this VideoCodecSettingsH265Settings.


        :return: The flicker_aq of this VideoCodecSettingsH265Settings.
        :rtype: H265FlickerAq
        """
        return self._flicker_aq

    @flicker_aq.setter
    def flicker_aq(self, flicker_aq):
        """Sets the flicker_aq of this VideoCodecSettingsH265Settings.


        :param flicker_aq: The flicker_aq of this VideoCodecSettingsH265Settings.
        :type flicker_aq: H265FlickerAq
        """

        self._flicker_aq = flicker_aq

    @property
    def framerate_denominator(self):
        """Gets the framerate_denominator of this VideoCodecSettingsH265Settings.


        :return: The framerate_denominator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._framerate_denominator

    @framerate_denominator.setter
    def framerate_denominator(self, framerate_denominator):
        """Sets the framerate_denominator of this VideoCodecSettingsH265Settings.


        :param framerate_denominator: The framerate_denominator of this VideoCodecSettingsH265Settings.
        :type framerate_denominator: int
        """
        if framerate_denominator is None:
            raise ValueError("Invalid value for `framerate_denominator`, must not be `None`")

        self._framerate_denominator = framerate_denominator

    @property
    def framerate_numerator(self):
        """Gets the framerate_numerator of this VideoCodecSettingsH265Settings.


        :return: The framerate_numerator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._framerate_numerator

    @framerate_numerator.setter
    def framerate_numerator(self, framerate_numerator):
        """Sets the framerate_numerator of this VideoCodecSettingsH265Settings.


        :param framerate_numerator: The framerate_numerator of this VideoCodecSettingsH265Settings.
        :type framerate_numerator: int
        """
        if framerate_numerator is None:
            raise ValueError("Invalid value for `framerate_numerator`, must not be `None`")

        self._framerate_numerator = framerate_numerator

    @property
    def gop_closed_cadence(self):
        """Gets the gop_closed_cadence of this VideoCodecSettingsH265Settings.


        :return: The gop_closed_cadence of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._gop_closed_cadence

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, gop_closed_cadence):
        """Sets the gop_closed_cadence of this VideoCodecSettingsH265Settings.


        :param gop_closed_cadence: The gop_closed_cadence of this VideoCodecSettingsH265Settings.
        :type gop_closed_cadence: int
        """

        self._gop_closed_cadence = gop_closed_cadence

    @property
    def gop_size(self):
        """Gets the gop_size of this VideoCodecSettingsH265Settings.


        :return: The gop_size of this VideoCodecSettingsH265Settings.
        :rtype: float
        """
        return self._gop_size

    @gop_size.setter
    def gop_size(self, gop_size):
        """Sets the gop_size of this VideoCodecSettingsH265Settings.


        :param gop_size: The gop_size of this VideoCodecSettingsH265Settings.
        :type gop_size: float
        """

        self._gop_size = gop_size

    @property
    def gop_size_units(self):
        """Gets the gop_size_units of this VideoCodecSettingsH265Settings.


        :return: The gop_size_units of this VideoCodecSettingsH265Settings.
        :rtype: H265GopSizeUnits
        """
        return self._gop_size_units

    @gop_size_units.setter
    def gop_size_units(self, gop_size_units):
        """Sets the gop_size_units of this VideoCodecSettingsH265Settings.


        :param gop_size_units: The gop_size_units of this VideoCodecSettingsH265Settings.
        :type gop_size_units: H265GopSizeUnits
        """

        self._gop_size_units = gop_size_units

    @property
    def level(self):
        """Gets the level of this VideoCodecSettingsH265Settings.


        :return: The level of this VideoCodecSettingsH265Settings.
        :rtype: H265Level
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this VideoCodecSettingsH265Settings.


        :param level: The level of this VideoCodecSettingsH265Settings.
        :type level: H265Level
        """

        self._level = level

    @property
    def look_ahead_rate_control(self):
        """Gets the look_ahead_rate_control of this VideoCodecSettingsH265Settings.


        :return: The look_ahead_rate_control of this VideoCodecSettingsH265Settings.
        :rtype: H265LookAheadRateControl
        """
        return self._look_ahead_rate_control

    @look_ahead_rate_control.setter
    def look_ahead_rate_control(self, look_ahead_rate_control):
        """Sets the look_ahead_rate_control of this VideoCodecSettingsH265Settings.


        :param look_ahead_rate_control: The look_ahead_rate_control of this VideoCodecSettingsH265Settings.
        :type look_ahead_rate_control: H265LookAheadRateControl
        """

        self._look_ahead_rate_control = look_ahead_rate_control

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this VideoCodecSettingsH265Settings.


        :return: The max_bitrate of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this VideoCodecSettingsH265Settings.


        :param max_bitrate: The max_bitrate of this VideoCodecSettingsH265Settings.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def min_i_interval(self):
        """Gets the min_i_interval of this VideoCodecSettingsH265Settings.


        :return: The min_i_interval of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._min_i_interval

    @min_i_interval.setter
    def min_i_interval(self, min_i_interval):
        """Sets the min_i_interval of this VideoCodecSettingsH265Settings.


        :param min_i_interval: The min_i_interval of this VideoCodecSettingsH265Settings.
        :type min_i_interval: int
        """

        self._min_i_interval = min_i_interval

    @property
    def par_denominator(self):
        """Gets the par_denominator of this VideoCodecSettingsH265Settings.


        :return: The par_denominator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._par_denominator

    @par_denominator.setter
    def par_denominator(self, par_denominator):
        """Sets the par_denominator of this VideoCodecSettingsH265Settings.


        :param par_denominator: The par_denominator of this VideoCodecSettingsH265Settings.
        :type par_denominator: int
        """

        self._par_denominator = par_denominator

    @property
    def par_numerator(self):
        """Gets the par_numerator of this VideoCodecSettingsH265Settings.


        :return: The par_numerator of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._par_numerator

    @par_numerator.setter
    def par_numerator(self, par_numerator):
        """Sets the par_numerator of this VideoCodecSettingsH265Settings.


        :param par_numerator: The par_numerator of this VideoCodecSettingsH265Settings.
        :type par_numerator: int
        """

        self._par_numerator = par_numerator

    @property
    def profile(self):
        """Gets the profile of this VideoCodecSettingsH265Settings.


        :return: The profile of this VideoCodecSettingsH265Settings.
        :rtype: H265Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this VideoCodecSettingsH265Settings.


        :param profile: The profile of this VideoCodecSettingsH265Settings.
        :type profile: H265Profile
        """

        self._profile = profile

    @property
    def qvbr_quality_level(self):
        """Gets the qvbr_quality_level of this VideoCodecSettingsH265Settings.


        :return: The qvbr_quality_level of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._qvbr_quality_level

    @qvbr_quality_level.setter
    def qvbr_quality_level(self, qvbr_quality_level):
        """Sets the qvbr_quality_level of this VideoCodecSettingsH265Settings.


        :param qvbr_quality_level: The qvbr_quality_level of this VideoCodecSettingsH265Settings.
        :type qvbr_quality_level: int
        """

        self._qvbr_quality_level = qvbr_quality_level

    @property
    def rate_control_mode(self):
        """Gets the rate_control_mode of this VideoCodecSettingsH265Settings.


        :return: The rate_control_mode of this VideoCodecSettingsH265Settings.
        :rtype: H265RateControlMode
        """
        return self._rate_control_mode

    @rate_control_mode.setter
    def rate_control_mode(self, rate_control_mode):
        """Sets the rate_control_mode of this VideoCodecSettingsH265Settings.


        :param rate_control_mode: The rate_control_mode of this VideoCodecSettingsH265Settings.
        :type rate_control_mode: H265RateControlMode
        """

        self._rate_control_mode = rate_control_mode

    @property
    def scan_type(self):
        """Gets the scan_type of this VideoCodecSettingsH265Settings.


        :return: The scan_type of this VideoCodecSettingsH265Settings.
        :rtype: H265ScanType
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this VideoCodecSettingsH265Settings.


        :param scan_type: The scan_type of this VideoCodecSettingsH265Settings.
        :type scan_type: H265ScanType
        """

        self._scan_type = scan_type

    @property
    def scene_change_detect(self):
        """Gets the scene_change_detect of this VideoCodecSettingsH265Settings.


        :return: The scene_change_detect of this VideoCodecSettingsH265Settings.
        :rtype: H265SceneChangeDetect
        """
        return self._scene_change_detect

    @scene_change_detect.setter
    def scene_change_detect(self, scene_change_detect):
        """Sets the scene_change_detect of this VideoCodecSettingsH265Settings.


        :param scene_change_detect: The scene_change_detect of this VideoCodecSettingsH265Settings.
        :type scene_change_detect: H265SceneChangeDetect
        """

        self._scene_change_detect = scene_change_detect

    @property
    def slices(self):
        """Gets the slices of this VideoCodecSettingsH265Settings.


        :return: The slices of this VideoCodecSettingsH265Settings.
        :rtype: int
        """
        return self._slices

    @slices.setter
    def slices(self, slices):
        """Sets the slices of this VideoCodecSettingsH265Settings.


        :param slices: The slices of this VideoCodecSettingsH265Settings.
        :type slices: int
        """

        self._slices = slices

    @property
    def tier(self):
        """Gets the tier of this VideoCodecSettingsH265Settings.


        :return: The tier of this VideoCodecSettingsH265Settings.
        :rtype: H265Tier
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this VideoCodecSettingsH265Settings.


        :param tier: The tier of this VideoCodecSettingsH265Settings.
        :type tier: H265Tier
        """

        self._tier = tier

    @property
    def timecode_insertion(self):
        """Gets the timecode_insertion of this VideoCodecSettingsH265Settings.


        :return: The timecode_insertion of this VideoCodecSettingsH265Settings.
        :rtype: H265TimecodeInsertionBehavior
        """
        return self._timecode_insertion

    @timecode_insertion.setter
    def timecode_insertion(self, timecode_insertion):
        """Sets the timecode_insertion of this VideoCodecSettingsH265Settings.


        :param timecode_insertion: The timecode_insertion of this VideoCodecSettingsH265Settings.
        :type timecode_insertion: H265TimecodeInsertionBehavior
        """

        self._timecode_insertion = timecode_insertion

    @property
    def timecode_burnin_settings(self):
        """Gets the timecode_burnin_settings of this VideoCodecSettingsH265Settings.


        :return: The timecode_burnin_settings of this VideoCodecSettingsH265Settings.
        :rtype: FrameCaptureSettingsTimecodeBurninSettings
        """
        return self._timecode_burnin_settings

    @timecode_burnin_settings.setter
    def timecode_burnin_settings(self, timecode_burnin_settings):
        """Sets the timecode_burnin_settings of this VideoCodecSettingsH265Settings.


        :param timecode_burnin_settings: The timecode_burnin_settings of this VideoCodecSettingsH265Settings.
        :type timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings
        """

        self._timecode_burnin_settings = timecode_burnin_settings
