# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateMultiplexRequestMultiplexSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_video_buffer_delay_milliseconds: int=None, transport_stream_bitrate: int=None, transport_stream_id: int=None, transport_stream_reserved_bitrate: int=None):
        """UpdateMultiplexRequestMultiplexSettings - a model defined in OpenAPI

        :param maximum_video_buffer_delay_milliseconds: The maximum_video_buffer_delay_milliseconds of this UpdateMultiplexRequestMultiplexSettings.
        :param transport_stream_bitrate: The transport_stream_bitrate of this UpdateMultiplexRequestMultiplexSettings.
        :param transport_stream_id: The transport_stream_id of this UpdateMultiplexRequestMultiplexSettings.
        :param transport_stream_reserved_bitrate: The transport_stream_reserved_bitrate of this UpdateMultiplexRequestMultiplexSettings.
        """
        self.openapi_types = {
            'maximum_video_buffer_delay_milliseconds': int,
            'transport_stream_bitrate': int,
            'transport_stream_id': int,
            'transport_stream_reserved_bitrate': int
        }

        self.attribute_map = {
            'maximum_video_buffer_delay_milliseconds': 'MaximumVideoBufferDelayMilliseconds',
            'transport_stream_bitrate': 'TransportStreamBitrate',
            'transport_stream_id': 'TransportStreamId',
            'transport_stream_reserved_bitrate': 'TransportStreamReservedBitrate'
        }

        self._maximum_video_buffer_delay_milliseconds = maximum_video_buffer_delay_milliseconds
        self._transport_stream_bitrate = transport_stream_bitrate
        self._transport_stream_id = transport_stream_id
        self._transport_stream_reserved_bitrate = transport_stream_reserved_bitrate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMultiplexRequestMultiplexSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMultiplexRequest_MultiplexSettings of this UpdateMultiplexRequestMultiplexSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_video_buffer_delay_milliseconds(self):
        """Gets the maximum_video_buffer_delay_milliseconds of this UpdateMultiplexRequestMultiplexSettings.


        :return: The maximum_video_buffer_delay_milliseconds of this UpdateMultiplexRequestMultiplexSettings.
        :rtype: int
        """
        return self._maximum_video_buffer_delay_milliseconds

    @maximum_video_buffer_delay_milliseconds.setter
    def maximum_video_buffer_delay_milliseconds(self, maximum_video_buffer_delay_milliseconds):
        """Sets the maximum_video_buffer_delay_milliseconds of this UpdateMultiplexRequestMultiplexSettings.


        :param maximum_video_buffer_delay_milliseconds: The maximum_video_buffer_delay_milliseconds of this UpdateMultiplexRequestMultiplexSettings.
        :type maximum_video_buffer_delay_milliseconds: int
        """

        self._maximum_video_buffer_delay_milliseconds = maximum_video_buffer_delay_milliseconds

    @property
    def transport_stream_bitrate(self):
        """Gets the transport_stream_bitrate of this UpdateMultiplexRequestMultiplexSettings.


        :return: The transport_stream_bitrate of this UpdateMultiplexRequestMultiplexSettings.
        :rtype: int
        """
        return self._transport_stream_bitrate

    @transport_stream_bitrate.setter
    def transport_stream_bitrate(self, transport_stream_bitrate):
        """Sets the transport_stream_bitrate of this UpdateMultiplexRequestMultiplexSettings.


        :param transport_stream_bitrate: The transport_stream_bitrate of this UpdateMultiplexRequestMultiplexSettings.
        :type transport_stream_bitrate: int
        """
        if transport_stream_bitrate is None:
            raise ValueError("Invalid value for `transport_stream_bitrate`, must not be `None`")

        self._transport_stream_bitrate = transport_stream_bitrate

    @property
    def transport_stream_id(self):
        """Gets the transport_stream_id of this UpdateMultiplexRequestMultiplexSettings.


        :return: The transport_stream_id of this UpdateMultiplexRequestMultiplexSettings.
        :rtype: int
        """
        return self._transport_stream_id

    @transport_stream_id.setter
    def transport_stream_id(self, transport_stream_id):
        """Sets the transport_stream_id of this UpdateMultiplexRequestMultiplexSettings.


        :param transport_stream_id: The transport_stream_id of this UpdateMultiplexRequestMultiplexSettings.
        :type transport_stream_id: int
        """
        if transport_stream_id is None:
            raise ValueError("Invalid value for `transport_stream_id`, must not be `None`")

        self._transport_stream_id = transport_stream_id

    @property
    def transport_stream_reserved_bitrate(self):
        """Gets the transport_stream_reserved_bitrate of this UpdateMultiplexRequestMultiplexSettings.


        :return: The transport_stream_reserved_bitrate of this UpdateMultiplexRequestMultiplexSettings.
        :rtype: int
        """
        return self._transport_stream_reserved_bitrate

    @transport_stream_reserved_bitrate.setter
    def transport_stream_reserved_bitrate(self, transport_stream_reserved_bitrate):
        """Sets the transport_stream_reserved_bitrate of this UpdateMultiplexRequestMultiplexSettings.


        :param transport_stream_reserved_bitrate: The transport_stream_reserved_bitrate of this UpdateMultiplexRequestMultiplexSettings.
        :type transport_stream_reserved_bitrate: int
        """

        self._transport_stream_reserved_bitrate = transport_stream_reserved_bitrate
