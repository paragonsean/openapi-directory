# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CaptionLanguageMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption_channel: int=None, language_code: str=None, language_description: str=None):
        """CaptionLanguageMapping - a model defined in OpenAPI

        :param caption_channel: The caption_channel of this CaptionLanguageMapping.
        :param language_code: The language_code of this CaptionLanguageMapping.
        :param language_description: The language_description of this CaptionLanguageMapping.
        """
        self.openapi_types = {
            'caption_channel': int,
            'language_code': str,
            'language_description': str
        }

        self.attribute_map = {
            'caption_channel': 'CaptionChannel',
            'language_code': 'LanguageCode',
            'language_description': 'LanguageDescription'
        }

        self._caption_channel = caption_channel
        self._language_code = language_code
        self._language_description = language_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptionLanguageMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptionLanguageMapping of this CaptionLanguageMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption_channel(self):
        """Gets the caption_channel of this CaptionLanguageMapping.


        :return: The caption_channel of this CaptionLanguageMapping.
        :rtype: int
        """
        return self._caption_channel

    @caption_channel.setter
    def caption_channel(self, caption_channel):
        """Sets the caption_channel of this CaptionLanguageMapping.


        :param caption_channel: The caption_channel of this CaptionLanguageMapping.
        :type caption_channel: int
        """
        if caption_channel is None:
            raise ValueError("Invalid value for `caption_channel`, must not be `None`")

        self._caption_channel = caption_channel

    @property
    def language_code(self):
        """Gets the language_code of this CaptionLanguageMapping.


        :return: The language_code of this CaptionLanguageMapping.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CaptionLanguageMapping.


        :param language_code: The language_code of this CaptionLanguageMapping.
        :type language_code: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def language_description(self):
        """Gets the language_description of this CaptionLanguageMapping.


        :return: The language_description of this CaptionLanguageMapping.
        :rtype: str
        """
        return self._language_description

    @language_description.setter
    def language_description(self, language_description):
        """Sets the language_description of this CaptionLanguageMapping.


        :param language_description: The language_description of this CaptionLanguageMapping.
        :type language_description: str
        """
        if language_description is None:
            raise ValueError("Invalid value for `language_description`, must not be `None`")

        self._language_description = language_description
