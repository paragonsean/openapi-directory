# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputChannelLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gain: int=None, input_channel: int=None):
        """InputChannelLevel - a model defined in OpenAPI

        :param gain: The gain of this InputChannelLevel.
        :param input_channel: The input_channel of this InputChannelLevel.
        """
        self.openapi_types = {
            'gain': int,
            'input_channel': int
        }

        self.attribute_map = {
            'gain': 'Gain',
            'input_channel': 'InputChannel'
        }

        self._gain = gain
        self._input_channel = input_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputChannelLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputChannelLevel of this InputChannelLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gain(self):
        """Gets the gain of this InputChannelLevel.


        :return: The gain of this InputChannelLevel.
        :rtype: int
        """
        return self._gain

    @gain.setter
    def gain(self, gain):
        """Sets the gain of this InputChannelLevel.


        :param gain: The gain of this InputChannelLevel.
        :type gain: int
        """
        if gain is None:
            raise ValueError("Invalid value for `gain`, must not be `None`")

        self._gain = gain

    @property
    def input_channel(self):
        """Gets the input_channel of this InputChannelLevel.


        :return: The input_channel of this InputChannelLevel.
        :rtype: int
        """
        return self._input_channel

    @input_channel.setter
    def input_channel(self, input_channel):
        """Sets the input_channel of this InputChannelLevel.


        :param input_channel: The input_channel of this InputChannelLevel.
        :type input_channel: int
        """
        if input_channel is None:
            raise ValueError("Invalid value for `input_channel`, must not be `None`")

        self._input_channel = input_channel
