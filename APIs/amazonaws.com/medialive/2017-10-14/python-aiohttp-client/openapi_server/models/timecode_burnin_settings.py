# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timecode_burnin_font_size import TimecodeBurninFontSize
from openapi_server.models.timecode_burnin_position import TimecodeBurninPosition
from openapi_server import util


class TimecodeBurninSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, font_size: TimecodeBurninFontSize=None, position: TimecodeBurninPosition=None, prefix: str=None):
        """TimecodeBurninSettings - a model defined in OpenAPI

        :param font_size: The font_size of this TimecodeBurninSettings.
        :param position: The position of this TimecodeBurninSettings.
        :param prefix: The prefix of this TimecodeBurninSettings.
        """
        self.openapi_types = {
            'font_size': TimecodeBurninFontSize,
            'position': TimecodeBurninPosition,
            'prefix': str
        }

        self.attribute_map = {
            'font_size': 'FontSize',
            'position': 'Position',
            'prefix': 'Prefix'
        }

        self._font_size = font_size
        self._position = position
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimecodeBurninSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimecodeBurninSettings of this TimecodeBurninSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def font_size(self):
        """Gets the font_size of this TimecodeBurninSettings.


        :return: The font_size of this TimecodeBurninSettings.
        :rtype: TimecodeBurninFontSize
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this TimecodeBurninSettings.


        :param font_size: The font_size of this TimecodeBurninSettings.
        :type font_size: TimecodeBurninFontSize
        """
        if font_size is None:
            raise ValueError("Invalid value for `font_size`, must not be `None`")

        self._font_size = font_size

    @property
    def position(self):
        """Gets the position of this TimecodeBurninSettings.


        :return: The position of this TimecodeBurninSettings.
        :rtype: TimecodeBurninPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TimecodeBurninSettings.


        :param position: The position of this TimecodeBurninSettings.
        :type position: TimecodeBurninPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def prefix(self):
        """Gets the prefix of this TimecodeBurninSettings.


        :return: The prefix of this TimecodeBurninSettings.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this TimecodeBurninSettings.


        :param prefix: The prefix of this TimecodeBurninSettings.
        :type prefix: str
        """

        self._prefix = prefix
