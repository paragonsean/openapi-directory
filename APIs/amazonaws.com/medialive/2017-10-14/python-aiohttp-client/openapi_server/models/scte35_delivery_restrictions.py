# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scte35_archive_allowed_flag import Scte35ArchiveAllowedFlag
from openapi_server.models.scte35_device_restrictions import Scte35DeviceRestrictions
from openapi_server.models.scte35_no_regional_blackout_flag import Scte35NoRegionalBlackoutFlag
from openapi_server.models.scte35_web_delivery_allowed_flag import Scte35WebDeliveryAllowedFlag
from openapi_server import util


class Scte35DeliveryRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_allowed_flag: Scte35ArchiveAllowedFlag=None, device_restrictions: Scte35DeviceRestrictions=None, no_regional_blackout_flag: Scte35NoRegionalBlackoutFlag=None, web_delivery_allowed_flag: Scte35WebDeliveryAllowedFlag=None):
        """Scte35DeliveryRestrictions - a model defined in OpenAPI

        :param archive_allowed_flag: The archive_allowed_flag of this Scte35DeliveryRestrictions.
        :param device_restrictions: The device_restrictions of this Scte35DeliveryRestrictions.
        :param no_regional_blackout_flag: The no_regional_blackout_flag of this Scte35DeliveryRestrictions.
        :param web_delivery_allowed_flag: The web_delivery_allowed_flag of this Scte35DeliveryRestrictions.
        """
        self.openapi_types = {
            'archive_allowed_flag': Scte35ArchiveAllowedFlag,
            'device_restrictions': Scte35DeviceRestrictions,
            'no_regional_blackout_flag': Scte35NoRegionalBlackoutFlag,
            'web_delivery_allowed_flag': Scte35WebDeliveryAllowedFlag
        }

        self.attribute_map = {
            'archive_allowed_flag': 'ArchiveAllowedFlag',
            'device_restrictions': 'DeviceRestrictions',
            'no_regional_blackout_flag': 'NoRegionalBlackoutFlag',
            'web_delivery_allowed_flag': 'WebDeliveryAllowedFlag'
        }

        self._archive_allowed_flag = archive_allowed_flag
        self._device_restrictions = device_restrictions
        self._no_regional_blackout_flag = no_regional_blackout_flag
        self._web_delivery_allowed_flag = web_delivery_allowed_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scte35DeliveryRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scte35DeliveryRestrictions of this Scte35DeliveryRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_allowed_flag(self):
        """Gets the archive_allowed_flag of this Scte35DeliveryRestrictions.


        :return: The archive_allowed_flag of this Scte35DeliveryRestrictions.
        :rtype: Scte35ArchiveAllowedFlag
        """
        return self._archive_allowed_flag

    @archive_allowed_flag.setter
    def archive_allowed_flag(self, archive_allowed_flag):
        """Sets the archive_allowed_flag of this Scte35DeliveryRestrictions.


        :param archive_allowed_flag: The archive_allowed_flag of this Scte35DeliveryRestrictions.
        :type archive_allowed_flag: Scte35ArchiveAllowedFlag
        """
        if archive_allowed_flag is None:
            raise ValueError("Invalid value for `archive_allowed_flag`, must not be `None`")

        self._archive_allowed_flag = archive_allowed_flag

    @property
    def device_restrictions(self):
        """Gets the device_restrictions of this Scte35DeliveryRestrictions.


        :return: The device_restrictions of this Scte35DeliveryRestrictions.
        :rtype: Scte35DeviceRestrictions
        """
        return self._device_restrictions

    @device_restrictions.setter
    def device_restrictions(self, device_restrictions):
        """Sets the device_restrictions of this Scte35DeliveryRestrictions.


        :param device_restrictions: The device_restrictions of this Scte35DeliveryRestrictions.
        :type device_restrictions: Scte35DeviceRestrictions
        """
        if device_restrictions is None:
            raise ValueError("Invalid value for `device_restrictions`, must not be `None`")

        self._device_restrictions = device_restrictions

    @property
    def no_regional_blackout_flag(self):
        """Gets the no_regional_blackout_flag of this Scte35DeliveryRestrictions.


        :return: The no_regional_blackout_flag of this Scte35DeliveryRestrictions.
        :rtype: Scte35NoRegionalBlackoutFlag
        """
        return self._no_regional_blackout_flag

    @no_regional_blackout_flag.setter
    def no_regional_blackout_flag(self, no_regional_blackout_flag):
        """Sets the no_regional_blackout_flag of this Scte35DeliveryRestrictions.


        :param no_regional_blackout_flag: The no_regional_blackout_flag of this Scte35DeliveryRestrictions.
        :type no_regional_blackout_flag: Scte35NoRegionalBlackoutFlag
        """
        if no_regional_blackout_flag is None:
            raise ValueError("Invalid value for `no_regional_blackout_flag`, must not be `None`")

        self._no_regional_blackout_flag = no_regional_blackout_flag

    @property
    def web_delivery_allowed_flag(self):
        """Gets the web_delivery_allowed_flag of this Scte35DeliveryRestrictions.


        :return: The web_delivery_allowed_flag of this Scte35DeliveryRestrictions.
        :rtype: Scte35WebDeliveryAllowedFlag
        """
        return self._web_delivery_allowed_flag

    @web_delivery_allowed_flag.setter
    def web_delivery_allowed_flag(self, web_delivery_allowed_flag):
        """Sets the web_delivery_allowed_flag of this Scte35DeliveryRestrictions.


        :param web_delivery_allowed_flag: The web_delivery_allowed_flag of this Scte35DeliveryRestrictions.
        :type web_delivery_allowed_flag: Scte35WebDeliveryAllowedFlag
        """
        if web_delivery_allowed_flag is None:
            raise ValueError("Invalid value for `web_delivery_allowed_flag`, must not be `None`")

        self._web_delivery_allowed_flag = web_delivery_allowed_flag
