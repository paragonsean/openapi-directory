# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frame_capture_interval_unit import FrameCaptureIntervalUnit
from openapi_server.models.frame_capture_settings_timecode_burnin_settings import FrameCaptureSettingsTimecodeBurninSettings
from openapi_server import util


class FrameCaptureSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_interval: int=None, capture_interval_units: FrameCaptureIntervalUnit=None, timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings=None):
        """FrameCaptureSettings - a model defined in OpenAPI

        :param capture_interval: The capture_interval of this FrameCaptureSettings.
        :param capture_interval_units: The capture_interval_units of this FrameCaptureSettings.
        :param timecode_burnin_settings: The timecode_burnin_settings of this FrameCaptureSettings.
        """
        self.openapi_types = {
            'capture_interval': int,
            'capture_interval_units': FrameCaptureIntervalUnit,
            'timecode_burnin_settings': FrameCaptureSettingsTimecodeBurninSettings
        }

        self.attribute_map = {
            'capture_interval': 'CaptureInterval',
            'capture_interval_units': 'CaptureIntervalUnits',
            'timecode_burnin_settings': 'TimecodeBurninSettings'
        }

        self._capture_interval = capture_interval
        self._capture_interval_units = capture_interval_units
        self._timecode_burnin_settings = timecode_burnin_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameCaptureSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrameCaptureSettings of this FrameCaptureSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_interval(self):
        """Gets the capture_interval of this FrameCaptureSettings.


        :return: The capture_interval of this FrameCaptureSettings.
        :rtype: int
        """
        return self._capture_interval

    @capture_interval.setter
    def capture_interval(self, capture_interval):
        """Sets the capture_interval of this FrameCaptureSettings.


        :param capture_interval: The capture_interval of this FrameCaptureSettings.
        :type capture_interval: int
        """

        self._capture_interval = capture_interval

    @property
    def capture_interval_units(self):
        """Gets the capture_interval_units of this FrameCaptureSettings.


        :return: The capture_interval_units of this FrameCaptureSettings.
        :rtype: FrameCaptureIntervalUnit
        """
        return self._capture_interval_units

    @capture_interval_units.setter
    def capture_interval_units(self, capture_interval_units):
        """Sets the capture_interval_units of this FrameCaptureSettings.


        :param capture_interval_units: The capture_interval_units of this FrameCaptureSettings.
        :type capture_interval_units: FrameCaptureIntervalUnit
        """

        self._capture_interval_units = capture_interval_units

    @property
    def timecode_burnin_settings(self):
        """Gets the timecode_burnin_settings of this FrameCaptureSettings.


        :return: The timecode_burnin_settings of this FrameCaptureSettings.
        :rtype: FrameCaptureSettingsTimecodeBurninSettings
        """
        return self._timecode_burnin_settings

    @timecode_burnin_settings.setter
    def timecode_burnin_settings(self, timecode_burnin_settings):
        """Sets the timecode_burnin_settings of this FrameCaptureSettings.


        :param timecode_burnin_settings: The timecode_burnin_settings of this FrameCaptureSettings.
        :type timecode_burnin_settings: FrameCaptureSettingsTimecodeBurninSettings
        """

        self._timecode_burnin_settings = timecode_burnin_settings
