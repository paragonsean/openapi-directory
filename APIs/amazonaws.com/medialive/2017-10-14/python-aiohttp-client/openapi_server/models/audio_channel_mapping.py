# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioChannelMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_channel_levels: List=None, output_channel: int=None):
        """AudioChannelMapping - a model defined in OpenAPI

        :param input_channel_levels: The input_channel_levels of this AudioChannelMapping.
        :param output_channel: The output_channel of this AudioChannelMapping.
        """
        self.openapi_types = {
            'input_channel_levels': List,
            'output_channel': int
        }

        self.attribute_map = {
            'input_channel_levels': 'InputChannelLevels',
            'output_channel': 'OutputChannel'
        }

        self._input_channel_levels = input_channel_levels
        self._output_channel = output_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioChannelMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioChannelMapping of this AudioChannelMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_channel_levels(self):
        """Gets the input_channel_levels of this AudioChannelMapping.


        :return: The input_channel_levels of this AudioChannelMapping.
        :rtype: List
        """
        return self._input_channel_levels

    @input_channel_levels.setter
    def input_channel_levels(self, input_channel_levels):
        """Sets the input_channel_levels of this AudioChannelMapping.


        :param input_channel_levels: The input_channel_levels of this AudioChannelMapping.
        :type input_channel_levels: List
        """
        if input_channel_levels is None:
            raise ValueError("Invalid value for `input_channel_levels`, must not be `None`")

        self._input_channel_levels = input_channel_levels

    @property
    def output_channel(self):
        """Gets the output_channel of this AudioChannelMapping.


        :return: The output_channel of this AudioChannelMapping.
        :rtype: int
        """
        return self._output_channel

    @output_channel.setter
    def output_channel(self, output_channel):
        """Sets the output_channel of this AudioChannelMapping.


        :param output_channel: The output_channel of this AudioChannelMapping.
        :type output_channel: int
        """
        if output_channel is None:
            raise ValueError("Invalid value for `output_channel`, must not be `None`")

        self._output_channel = output_channel
