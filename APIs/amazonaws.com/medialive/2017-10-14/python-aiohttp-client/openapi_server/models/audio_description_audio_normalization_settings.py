# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_normalization_algorithm import AudioNormalizationAlgorithm
from openapi_server.models.audio_normalization_algorithm_control import AudioNormalizationAlgorithmControl
from openapi_server import util


class AudioDescriptionAudioNormalizationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: AudioNormalizationAlgorithm=None, algorithm_control: AudioNormalizationAlgorithmControl=None, target_lkfs: float=None):
        """AudioDescriptionAudioNormalizationSettings - a model defined in OpenAPI

        :param algorithm: The algorithm of this AudioDescriptionAudioNormalizationSettings.
        :param algorithm_control: The algorithm_control of this AudioDescriptionAudioNormalizationSettings.
        :param target_lkfs: The target_lkfs of this AudioDescriptionAudioNormalizationSettings.
        """
        self.openapi_types = {
            'algorithm': AudioNormalizationAlgorithm,
            'algorithm_control': AudioNormalizationAlgorithmControl,
            'target_lkfs': float
        }

        self.attribute_map = {
            'algorithm': 'Algorithm',
            'algorithm_control': 'AlgorithmControl',
            'target_lkfs': 'TargetLkfs'
        }

        self._algorithm = algorithm
        self._algorithm_control = algorithm_control
        self._target_lkfs = target_lkfs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioDescriptionAudioNormalizationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioDescription_AudioNormalizationSettings of this AudioDescriptionAudioNormalizationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this AudioDescriptionAudioNormalizationSettings.


        :return: The algorithm of this AudioDescriptionAudioNormalizationSettings.
        :rtype: AudioNormalizationAlgorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this AudioDescriptionAudioNormalizationSettings.


        :param algorithm: The algorithm of this AudioDescriptionAudioNormalizationSettings.
        :type algorithm: AudioNormalizationAlgorithm
        """

        self._algorithm = algorithm

    @property
    def algorithm_control(self):
        """Gets the algorithm_control of this AudioDescriptionAudioNormalizationSettings.


        :return: The algorithm_control of this AudioDescriptionAudioNormalizationSettings.
        :rtype: AudioNormalizationAlgorithmControl
        """
        return self._algorithm_control

    @algorithm_control.setter
    def algorithm_control(self, algorithm_control):
        """Sets the algorithm_control of this AudioDescriptionAudioNormalizationSettings.


        :param algorithm_control: The algorithm_control of this AudioDescriptionAudioNormalizationSettings.
        :type algorithm_control: AudioNormalizationAlgorithmControl
        """

        self._algorithm_control = algorithm_control

    @property
    def target_lkfs(self):
        """Gets the target_lkfs of this AudioDescriptionAudioNormalizationSettings.


        :return: The target_lkfs of this AudioDescriptionAudioNormalizationSettings.
        :rtype: float
        """
        return self._target_lkfs

    @target_lkfs.setter
    def target_lkfs(self, target_lkfs):
        """Sets the target_lkfs of this AudioDescriptionAudioNormalizationSettings.


        :param target_lkfs: The target_lkfs of this AudioDescriptionAudioNormalizationSettings.
        :type target_lkfs: float
        """

        self._target_lkfs = target_lkfs
