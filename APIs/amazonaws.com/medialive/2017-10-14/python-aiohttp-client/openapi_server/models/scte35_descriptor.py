# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scte35_descriptor_scte35_descriptor_settings import Scte35DescriptorScte35DescriptorSettings
from openapi_server import util


class Scte35Descriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scte35_descriptor_settings: Scte35DescriptorScte35DescriptorSettings=None):
        """Scte35Descriptor - a model defined in OpenAPI

        :param scte35_descriptor_settings: The scte35_descriptor_settings of this Scte35Descriptor.
        """
        self.openapi_types = {
            'scte35_descriptor_settings': Scte35DescriptorScte35DescriptorSettings
        }

        self.attribute_map = {
            'scte35_descriptor_settings': 'Scte35DescriptorSettings'
        }

        self._scte35_descriptor_settings = scte35_descriptor_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scte35Descriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scte35Descriptor of this Scte35Descriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scte35_descriptor_settings(self):
        """Gets the scte35_descriptor_settings of this Scte35Descriptor.


        :return: The scte35_descriptor_settings of this Scte35Descriptor.
        :rtype: Scte35DescriptorScte35DescriptorSettings
        """
        return self._scte35_descriptor_settings

    @scte35_descriptor_settings.setter
    def scte35_descriptor_settings(self, scte35_descriptor_settings):
        """Sets the scte35_descriptor_settings of this Scte35Descriptor.


        :param scte35_descriptor_settings: The scte35_descriptor_settings of this Scte35Descriptor.
        :type scte35_descriptor_settings: Scte35DescriptorScte35DescriptorSettings
        """
        if scte35_descriptor_settings is None:
            raise ValueError("Invalid value for `scte35_descriptor_settings`, must not be `None`")

        self._scte35_descriptor_settings = scte35_descriptor_settings
