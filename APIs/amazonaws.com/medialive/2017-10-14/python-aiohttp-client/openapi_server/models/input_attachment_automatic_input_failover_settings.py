# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_preference import InputPreference
from openapi_server import util


class InputAttachmentAutomaticInputFailoverSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_clear_time_msec: int=None, failover_conditions: List=None, input_preference: InputPreference=None, secondary_input_id: str=None):
        """InputAttachmentAutomaticInputFailoverSettings - a model defined in OpenAPI

        :param error_clear_time_msec: The error_clear_time_msec of this InputAttachmentAutomaticInputFailoverSettings.
        :param failover_conditions: The failover_conditions of this InputAttachmentAutomaticInputFailoverSettings.
        :param input_preference: The input_preference of this InputAttachmentAutomaticInputFailoverSettings.
        :param secondary_input_id: The secondary_input_id of this InputAttachmentAutomaticInputFailoverSettings.
        """
        self.openapi_types = {
            'error_clear_time_msec': int,
            'failover_conditions': List,
            'input_preference': InputPreference,
            'secondary_input_id': str
        }

        self.attribute_map = {
            'error_clear_time_msec': 'ErrorClearTimeMsec',
            'failover_conditions': 'FailoverConditions',
            'input_preference': 'InputPreference',
            'secondary_input_id': 'SecondaryInputId'
        }

        self._error_clear_time_msec = error_clear_time_msec
        self._failover_conditions = failover_conditions
        self._input_preference = input_preference
        self._secondary_input_id = secondary_input_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputAttachmentAutomaticInputFailoverSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputAttachment_AutomaticInputFailoverSettings of this InputAttachmentAutomaticInputFailoverSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_clear_time_msec(self):
        """Gets the error_clear_time_msec of this InputAttachmentAutomaticInputFailoverSettings.


        :return: The error_clear_time_msec of this InputAttachmentAutomaticInputFailoverSettings.
        :rtype: int
        """
        return self._error_clear_time_msec

    @error_clear_time_msec.setter
    def error_clear_time_msec(self, error_clear_time_msec):
        """Sets the error_clear_time_msec of this InputAttachmentAutomaticInputFailoverSettings.


        :param error_clear_time_msec: The error_clear_time_msec of this InputAttachmentAutomaticInputFailoverSettings.
        :type error_clear_time_msec: int
        """

        self._error_clear_time_msec = error_clear_time_msec

    @property
    def failover_conditions(self):
        """Gets the failover_conditions of this InputAttachmentAutomaticInputFailoverSettings.


        :return: The failover_conditions of this InputAttachmentAutomaticInputFailoverSettings.
        :rtype: List
        """
        return self._failover_conditions

    @failover_conditions.setter
    def failover_conditions(self, failover_conditions):
        """Sets the failover_conditions of this InputAttachmentAutomaticInputFailoverSettings.


        :param failover_conditions: The failover_conditions of this InputAttachmentAutomaticInputFailoverSettings.
        :type failover_conditions: List
        """

        self._failover_conditions = failover_conditions

    @property
    def input_preference(self):
        """Gets the input_preference of this InputAttachmentAutomaticInputFailoverSettings.


        :return: The input_preference of this InputAttachmentAutomaticInputFailoverSettings.
        :rtype: InputPreference
        """
        return self._input_preference

    @input_preference.setter
    def input_preference(self, input_preference):
        """Sets the input_preference of this InputAttachmentAutomaticInputFailoverSettings.


        :param input_preference: The input_preference of this InputAttachmentAutomaticInputFailoverSettings.
        :type input_preference: InputPreference
        """

        self._input_preference = input_preference

    @property
    def secondary_input_id(self):
        """Gets the secondary_input_id of this InputAttachmentAutomaticInputFailoverSettings.


        :return: The secondary_input_id of this InputAttachmentAutomaticInputFailoverSettings.
        :rtype: str
        """
        return self._secondary_input_id

    @secondary_input_id.setter
    def secondary_input_id(self, secondary_input_id):
        """Sets the secondary_input_id of this InputAttachmentAutomaticInputFailoverSettings.


        :param secondary_input_id: The secondary_input_id of this InputAttachmentAutomaticInputFailoverSettings.
        :type secondary_input_id: str
        """
        if secondary_input_id is None:
            raise ValueError("Invalid value for `secondary_input_id`, must not be `None`")

        self._secondary_input_id = secondary_input_id
