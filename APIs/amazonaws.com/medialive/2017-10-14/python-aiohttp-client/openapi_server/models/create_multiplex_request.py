# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_multiplex_request_multiplex_settings import CreateMultiplexRequestMultiplexSettings
from openapi_server import util


class CreateMultiplexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zones: List[str]=None, multiplex_settings: CreateMultiplexRequestMultiplexSettings=None, name: str=None, request_id: str=None, tags: Dict[str, str]=None):
        """CreateMultiplexRequest - a model defined in OpenAPI

        :param availability_zones: The availability_zones of this CreateMultiplexRequest.
        :param multiplex_settings: The multiplex_settings of this CreateMultiplexRequest.
        :param name: The name of this CreateMultiplexRequest.
        :param request_id: The request_id of this CreateMultiplexRequest.
        :param tags: The tags of this CreateMultiplexRequest.
        """
        self.openapi_types = {
            'availability_zones': List[str],
            'multiplex_settings': CreateMultiplexRequestMultiplexSettings,
            'name': str,
            'request_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'availability_zones': 'availabilityZones',
            'multiplex_settings': 'multiplexSettings',
            'name': 'name',
            'request_id': 'requestId',
            'tags': 'tags'
        }

        self._availability_zones = availability_zones
        self._multiplex_settings = multiplex_settings
        self._name = name
        self._request_id = request_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMultiplexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMultiplex_request of this CreateMultiplexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zones(self):
        """Gets the availability_zones of this CreateMultiplexRequest.

        Placeholder documentation for __listOf__string

        :return: The availability_zones of this CreateMultiplexRequest.
        :rtype: List[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this CreateMultiplexRequest.

        Placeholder documentation for __listOf__string

        :param availability_zones: The availability_zones of this CreateMultiplexRequest.
        :type availability_zones: List[str]
        """
        if availability_zones is None:
            raise ValueError("Invalid value for `availability_zones`, must not be `None`")

        self._availability_zones = availability_zones

    @property
    def multiplex_settings(self):
        """Gets the multiplex_settings of this CreateMultiplexRequest.


        :return: The multiplex_settings of this CreateMultiplexRequest.
        :rtype: CreateMultiplexRequestMultiplexSettings
        """
        return self._multiplex_settings

    @multiplex_settings.setter
    def multiplex_settings(self, multiplex_settings):
        """Sets the multiplex_settings of this CreateMultiplexRequest.


        :param multiplex_settings: The multiplex_settings of this CreateMultiplexRequest.
        :type multiplex_settings: CreateMultiplexRequestMultiplexSettings
        """
        if multiplex_settings is None:
            raise ValueError("Invalid value for `multiplex_settings`, must not be `None`")

        self._multiplex_settings = multiplex_settings

    @property
    def name(self):
        """Gets the name of this CreateMultiplexRequest.

        Placeholder documentation for __string

        :return: The name of this CreateMultiplexRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateMultiplexRequest.

        Placeholder documentation for __string

        :param name: The name of this CreateMultiplexRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def request_id(self):
        """Gets the request_id of this CreateMultiplexRequest.

        Placeholder documentation for __string

        :return: The request_id of this CreateMultiplexRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateMultiplexRequest.

        Placeholder documentation for __string

        :param request_id: The request_id of this CreateMultiplexRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def tags(self):
        """Gets the tags of this CreateMultiplexRequest.

        Placeholder documentation for Tags

        :return: The tags of this CreateMultiplexRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMultiplexRequest.

        Placeholder documentation for Tags

        :param tags: The tags of this CreateMultiplexRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
