# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_language_selection_policy import AudioLanguageSelectionPolicy
from openapi_server import util


class AudioLanguageSelection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, language_selection_policy: AudioLanguageSelectionPolicy=None):
        """AudioLanguageSelection - a model defined in OpenAPI

        :param language_code: The language_code of this AudioLanguageSelection.
        :param language_selection_policy: The language_selection_policy of this AudioLanguageSelection.
        """
        self.openapi_types = {
            'language_code': str,
            'language_selection_policy': AudioLanguageSelectionPolicy
        }

        self.attribute_map = {
            'language_code': 'LanguageCode',
            'language_selection_policy': 'LanguageSelectionPolicy'
        }

        self._language_code = language_code
        self._language_selection_policy = language_selection_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioLanguageSelection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioLanguageSelection of this AudioLanguageSelection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this AudioLanguageSelection.


        :return: The language_code of this AudioLanguageSelection.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AudioLanguageSelection.


        :param language_code: The language_code of this AudioLanguageSelection.
        :type language_code: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def language_selection_policy(self):
        """Gets the language_selection_policy of this AudioLanguageSelection.


        :return: The language_selection_policy of this AudioLanguageSelection.
        :rtype: AudioLanguageSelectionPolicy
        """
        return self._language_selection_policy

    @language_selection_policy.setter
    def language_selection_policy(self, language_selection_policy):
        """Sets the language_selection_policy of this AudioLanguageSelection.


        :param language_selection_policy: The language_selection_policy of this AudioLanguageSelection.
        :type language_selection_policy: AudioLanguageSelectionPolicy
        """

        self._language_selection_policy = language_selection_policy
