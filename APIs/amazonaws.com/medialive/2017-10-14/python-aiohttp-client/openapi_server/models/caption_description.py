# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accessibility_type import AccessibilityType
from openapi_server.models.caption_description_destination_settings import CaptionDescriptionDestinationSettings
from openapi_server import util


class CaptionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessibility: AccessibilityType=None, caption_selector_name: str=None, destination_settings: CaptionDescriptionDestinationSettings=None, language_code: str=None, language_description: str=None, name: str=None):
        """CaptionDescription - a model defined in OpenAPI

        :param accessibility: The accessibility of this CaptionDescription.
        :param caption_selector_name: The caption_selector_name of this CaptionDescription.
        :param destination_settings: The destination_settings of this CaptionDescription.
        :param language_code: The language_code of this CaptionDescription.
        :param language_description: The language_description of this CaptionDescription.
        :param name: The name of this CaptionDescription.
        """
        self.openapi_types = {
            'accessibility': AccessibilityType,
            'caption_selector_name': str,
            'destination_settings': CaptionDescriptionDestinationSettings,
            'language_code': str,
            'language_description': str,
            'name': str
        }

        self.attribute_map = {
            'accessibility': 'Accessibility',
            'caption_selector_name': 'CaptionSelectorName',
            'destination_settings': 'DestinationSettings',
            'language_code': 'LanguageCode',
            'language_description': 'LanguageDescription',
            'name': 'Name'
        }

        self._accessibility = accessibility
        self._caption_selector_name = caption_selector_name
        self._destination_settings = destination_settings
        self._language_code = language_code
        self._language_description = language_description
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CaptionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CaptionDescription of this CaptionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessibility(self):
        """Gets the accessibility of this CaptionDescription.


        :return: The accessibility of this CaptionDescription.
        :rtype: AccessibilityType
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this CaptionDescription.


        :param accessibility: The accessibility of this CaptionDescription.
        :type accessibility: AccessibilityType
        """

        self._accessibility = accessibility

    @property
    def caption_selector_name(self):
        """Gets the caption_selector_name of this CaptionDescription.


        :return: The caption_selector_name of this CaptionDescription.
        :rtype: str
        """
        return self._caption_selector_name

    @caption_selector_name.setter
    def caption_selector_name(self, caption_selector_name):
        """Sets the caption_selector_name of this CaptionDescription.


        :param caption_selector_name: The caption_selector_name of this CaptionDescription.
        :type caption_selector_name: str
        """
        if caption_selector_name is None:
            raise ValueError("Invalid value for `caption_selector_name`, must not be `None`")

        self._caption_selector_name = caption_selector_name

    @property
    def destination_settings(self):
        """Gets the destination_settings of this CaptionDescription.


        :return: The destination_settings of this CaptionDescription.
        :rtype: CaptionDescriptionDestinationSettings
        """
        return self._destination_settings

    @destination_settings.setter
    def destination_settings(self, destination_settings):
        """Sets the destination_settings of this CaptionDescription.


        :param destination_settings: The destination_settings of this CaptionDescription.
        :type destination_settings: CaptionDescriptionDestinationSettings
        """

        self._destination_settings = destination_settings

    @property
    def language_code(self):
        """Gets the language_code of this CaptionDescription.


        :return: The language_code of this CaptionDescription.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CaptionDescription.


        :param language_code: The language_code of this CaptionDescription.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def language_description(self):
        """Gets the language_description of this CaptionDescription.


        :return: The language_description of this CaptionDescription.
        :rtype: str
        """
        return self._language_description

    @language_description.setter
    def language_description(self, language_description):
        """Sets the language_description of this CaptionDescription.


        :param language_description: The language_description of this CaptionDescription.
        :type language_description: str
        """

        self._language_description = language_description

    @property
    def name(self):
        """Gets the name of this CaptionDescription.


        :return: The name of this CaptionDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CaptionDescription.


        :param name: The name of this CaptionDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
