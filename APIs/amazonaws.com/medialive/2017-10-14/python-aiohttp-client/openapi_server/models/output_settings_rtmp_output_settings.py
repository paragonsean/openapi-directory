# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rtmp_output_certificate_mode import RtmpOutputCertificateMode
from openapi_server.models.rtmp_output_settings_destination import RtmpOutputSettingsDestination
from openapi_server import util


class OutputSettingsRtmpOutputSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_mode: RtmpOutputCertificateMode=None, connection_retry_interval: int=None, destination: RtmpOutputSettingsDestination=None, num_retries: int=None):
        """OutputSettingsRtmpOutputSettings - a model defined in OpenAPI

        :param certificate_mode: The certificate_mode of this OutputSettingsRtmpOutputSettings.
        :param connection_retry_interval: The connection_retry_interval of this OutputSettingsRtmpOutputSettings.
        :param destination: The destination of this OutputSettingsRtmpOutputSettings.
        :param num_retries: The num_retries of this OutputSettingsRtmpOutputSettings.
        """
        self.openapi_types = {
            'certificate_mode': RtmpOutputCertificateMode,
            'connection_retry_interval': int,
            'destination': RtmpOutputSettingsDestination,
            'num_retries': int
        }

        self.attribute_map = {
            'certificate_mode': 'CertificateMode',
            'connection_retry_interval': 'ConnectionRetryInterval',
            'destination': 'Destination',
            'num_retries': 'NumRetries'
        }

        self._certificate_mode = certificate_mode
        self._connection_retry_interval = connection_retry_interval
        self._destination = destination
        self._num_retries = num_retries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputSettingsRtmpOutputSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputSettings_RtmpOutputSettings of this OutputSettingsRtmpOutputSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_mode(self):
        """Gets the certificate_mode of this OutputSettingsRtmpOutputSettings.


        :return: The certificate_mode of this OutputSettingsRtmpOutputSettings.
        :rtype: RtmpOutputCertificateMode
        """
        return self._certificate_mode

    @certificate_mode.setter
    def certificate_mode(self, certificate_mode):
        """Sets the certificate_mode of this OutputSettingsRtmpOutputSettings.


        :param certificate_mode: The certificate_mode of this OutputSettingsRtmpOutputSettings.
        :type certificate_mode: RtmpOutputCertificateMode
        """

        self._certificate_mode = certificate_mode

    @property
    def connection_retry_interval(self):
        """Gets the connection_retry_interval of this OutputSettingsRtmpOutputSettings.


        :return: The connection_retry_interval of this OutputSettingsRtmpOutputSettings.
        :rtype: int
        """
        return self._connection_retry_interval

    @connection_retry_interval.setter
    def connection_retry_interval(self, connection_retry_interval):
        """Sets the connection_retry_interval of this OutputSettingsRtmpOutputSettings.


        :param connection_retry_interval: The connection_retry_interval of this OutputSettingsRtmpOutputSettings.
        :type connection_retry_interval: int
        """

        self._connection_retry_interval = connection_retry_interval

    @property
    def destination(self):
        """Gets the destination of this OutputSettingsRtmpOutputSettings.


        :return: The destination of this OutputSettingsRtmpOutputSettings.
        :rtype: RtmpOutputSettingsDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this OutputSettingsRtmpOutputSettings.


        :param destination: The destination of this OutputSettingsRtmpOutputSettings.
        :type destination: RtmpOutputSettingsDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def num_retries(self):
        """Gets the num_retries of this OutputSettingsRtmpOutputSettings.


        :return: The num_retries of this OutputSettingsRtmpOutputSettings.
        :rtype: int
        """
        return self._num_retries

    @num_retries.setter
    def num_retries(self, num_retries):
        """Sets the num_retries of this OutputSettingsRtmpOutputSettings.


        :param num_retries: The num_retries of this OutputSettingsRtmpOutputSettings.
        :type num_retries: int
        """

        self._num_retries = num_retries
