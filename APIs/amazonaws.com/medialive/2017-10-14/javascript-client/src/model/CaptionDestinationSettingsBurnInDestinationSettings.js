/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BurnInAlignment from './BurnInAlignment';
import BurnInBackgroundColor from './BurnInBackgroundColor';
import BurnInDestinationSettings from './BurnInDestinationSettings';
import BurnInDestinationSettingsFont from './BurnInDestinationSettingsFont';
import BurnInFontColor from './BurnInFontColor';
import BurnInOutlineColor from './BurnInOutlineColor';
import BurnInShadowColor from './BurnInShadowColor';
import BurnInTeletextGridControl from './BurnInTeletextGridControl';

/**
 * The CaptionDestinationSettingsBurnInDestinationSettings model module.
 * @module model/CaptionDestinationSettingsBurnInDestinationSettings
 * @version 2017-10-14
 */
class CaptionDestinationSettingsBurnInDestinationSettings {
    /**
     * Constructs a new <code>CaptionDestinationSettingsBurnInDestinationSettings</code>.
     * @alias module:model/CaptionDestinationSettingsBurnInDestinationSettings
     * @implements module:model/BurnInDestinationSettings
     */
    constructor() { 
        BurnInDestinationSettings.initialize(this);
        CaptionDestinationSettingsBurnInDestinationSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CaptionDestinationSettingsBurnInDestinationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaptionDestinationSettingsBurnInDestinationSettings} obj Optional instance to populate.
     * @return {module:model/CaptionDestinationSettingsBurnInDestinationSettings} The populated <code>CaptionDestinationSettingsBurnInDestinationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CaptionDestinationSettingsBurnInDestinationSettings();
            BurnInDestinationSettings.constructFromObject(data, obj);

            if (data.hasOwnProperty('Alignment')) {
                obj['Alignment'] = ApiClient.convertToType(data['Alignment'], BurnInAlignment);
            }
            if (data.hasOwnProperty('BackgroundColor')) {
                obj['BackgroundColor'] = ApiClient.convertToType(data['BackgroundColor'], BurnInBackgroundColor);
            }
            if (data.hasOwnProperty('BackgroundOpacity')) {
                obj['BackgroundOpacity'] = ApiClient.convertToType(data['BackgroundOpacity'], 'Number');
            }
            if (data.hasOwnProperty('Font')) {
                obj['Font'] = BurnInDestinationSettingsFont.constructFromObject(data['Font']);
            }
            if (data.hasOwnProperty('FontColor')) {
                obj['FontColor'] = ApiClient.convertToType(data['FontColor'], BurnInFontColor);
            }
            if (data.hasOwnProperty('FontOpacity')) {
                obj['FontOpacity'] = ApiClient.convertToType(data['FontOpacity'], 'Number');
            }
            if (data.hasOwnProperty('FontResolution')) {
                obj['FontResolution'] = ApiClient.convertToType(data['FontResolution'], 'Number');
            }
            if (data.hasOwnProperty('FontSize')) {
                obj['FontSize'] = ApiClient.convertToType(data['FontSize'], 'String');
            }
            if (data.hasOwnProperty('OutlineColor')) {
                obj['OutlineColor'] = ApiClient.convertToType(data['OutlineColor'], BurnInOutlineColor);
            }
            if (data.hasOwnProperty('OutlineSize')) {
                obj['OutlineSize'] = ApiClient.convertToType(data['OutlineSize'], 'Number');
            }
            if (data.hasOwnProperty('ShadowColor')) {
                obj['ShadowColor'] = ApiClient.convertToType(data['ShadowColor'], BurnInShadowColor);
            }
            if (data.hasOwnProperty('ShadowOpacity')) {
                obj['ShadowOpacity'] = ApiClient.convertToType(data['ShadowOpacity'], 'Number');
            }
            if (data.hasOwnProperty('ShadowXOffset')) {
                obj['ShadowXOffset'] = ApiClient.convertToType(data['ShadowXOffset'], 'Number');
            }
            if (data.hasOwnProperty('ShadowYOffset')) {
                obj['ShadowYOffset'] = ApiClient.convertToType(data['ShadowYOffset'], 'Number');
            }
            if (data.hasOwnProperty('TeletextGridControl')) {
                obj['TeletextGridControl'] = ApiClient.convertToType(data['TeletextGridControl'], BurnInTeletextGridControl);
            }
            if (data.hasOwnProperty('XPosition')) {
                obj['XPosition'] = ApiClient.convertToType(data['XPosition'], 'Number');
            }
            if (data.hasOwnProperty('YPosition')) {
                obj['YPosition'] = ApiClient.convertToType(data['YPosition'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaptionDestinationSettingsBurnInDestinationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaptionDestinationSettingsBurnInDestinationSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Alignment`
        if (data['Alignment']) { // data not null
          BurnInAlignment.validateJSON(data['Alignment']);
        }
        // validate the optional field `BackgroundColor`
        if (data['BackgroundColor']) { // data not null
          BurnInBackgroundColor.validateJSON(data['BackgroundColor']);
        }
        // validate the optional field `BackgroundOpacity`
        if (data['BackgroundOpacity']) { // data not null
          Number.validateJSON(data['BackgroundOpacity']);
        }
        // validate the optional field `Font`
        if (data['Font']) { // data not null
          BurnInDestinationSettingsFont.validateJSON(data['Font']);
        }
        // validate the optional field `FontColor`
        if (data['FontColor']) { // data not null
          BurnInFontColor.validateJSON(data['FontColor']);
        }
        // validate the optional field `FontOpacity`
        if (data['FontOpacity']) { // data not null
          Number.validateJSON(data['FontOpacity']);
        }
        // validate the optional field `FontResolution`
        if (data['FontResolution']) { // data not null
          Number.validateJSON(data['FontResolution']);
        }
        // validate the optional field `FontSize`
        if (data['FontSize']) { // data not null
          String.validateJSON(data['FontSize']);
        }
        // validate the optional field `OutlineColor`
        if (data['OutlineColor']) { // data not null
          BurnInOutlineColor.validateJSON(data['OutlineColor']);
        }
        // validate the optional field `OutlineSize`
        if (data['OutlineSize']) { // data not null
          Number.validateJSON(data['OutlineSize']);
        }
        // validate the optional field `ShadowColor`
        if (data['ShadowColor']) { // data not null
          BurnInShadowColor.validateJSON(data['ShadowColor']);
        }
        // validate the optional field `ShadowOpacity`
        if (data['ShadowOpacity']) { // data not null
          Number.validateJSON(data['ShadowOpacity']);
        }
        // validate the optional field `ShadowXOffset`
        if (data['ShadowXOffset']) { // data not null
          Number.validateJSON(data['ShadowXOffset']);
        }
        // validate the optional field `ShadowYOffset`
        if (data['ShadowYOffset']) { // data not null
          Number.validateJSON(data['ShadowYOffset']);
        }
        // validate the optional field `TeletextGridControl`
        if (data['TeletextGridControl']) { // data not null
          BurnInTeletextGridControl.validateJSON(data['TeletextGridControl']);
        }
        // validate the optional field `XPosition`
        if (data['XPosition']) { // data not null
          Number.validateJSON(data['XPosition']);
        }
        // validate the optional field `YPosition`
        if (data['YPosition']) { // data not null
          Number.validateJSON(data['YPosition']);
        }

        return true;
    }


}



/**
 * @member {module:model/BurnInAlignment} Alignment
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['Alignment'] = undefined;

/**
 * @member {module:model/BurnInBackgroundColor} BackgroundColor
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['BackgroundColor'] = undefined;

/**
 * @member {Number} BackgroundOpacity
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['BackgroundOpacity'] = undefined;

/**
 * @member {module:model/BurnInDestinationSettingsFont} Font
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['Font'] = undefined;

/**
 * @member {module:model/BurnInFontColor} FontColor
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['FontColor'] = undefined;

/**
 * @member {Number} FontOpacity
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['FontOpacity'] = undefined;

/**
 * @member {Number} FontResolution
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['FontResolution'] = undefined;

/**
 * @member {String} FontSize
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['FontSize'] = undefined;

/**
 * @member {module:model/BurnInOutlineColor} OutlineColor
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['OutlineColor'] = undefined;

/**
 * @member {Number} OutlineSize
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['OutlineSize'] = undefined;

/**
 * @member {module:model/BurnInShadowColor} ShadowColor
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['ShadowColor'] = undefined;

/**
 * @member {Number} ShadowOpacity
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['ShadowOpacity'] = undefined;

/**
 * @member {Number} ShadowXOffset
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['ShadowXOffset'] = undefined;

/**
 * @member {Number} ShadowYOffset
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['ShadowYOffset'] = undefined;

/**
 * @member {module:model/BurnInTeletextGridControl} TeletextGridControl
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['TeletextGridControl'] = undefined;

/**
 * @member {Number} XPosition
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['XPosition'] = undefined;

/**
 * @member {Number} YPosition
 */
CaptionDestinationSettingsBurnInDestinationSettings.prototype['YPosition'] = undefined;


// Implement BurnInDestinationSettings interface:
/**
 * @member {module:model/BurnInAlignment} Alignment
 */
BurnInDestinationSettings.prototype['Alignment'] = undefined;
/**
 * @member {module:model/BurnInBackgroundColor} BackgroundColor
 */
BurnInDestinationSettings.prototype['BackgroundColor'] = undefined;
/**
 * @member {Number} BackgroundOpacity
 */
BurnInDestinationSettings.prototype['BackgroundOpacity'] = undefined;
/**
 * @member {module:model/BurnInDestinationSettingsFont} Font
 */
BurnInDestinationSettings.prototype['Font'] = undefined;
/**
 * @member {module:model/BurnInFontColor} FontColor
 */
BurnInDestinationSettings.prototype['FontColor'] = undefined;
/**
 * @member {Number} FontOpacity
 */
BurnInDestinationSettings.prototype['FontOpacity'] = undefined;
/**
 * @member {Number} FontResolution
 */
BurnInDestinationSettings.prototype['FontResolution'] = undefined;
/**
 * @member {String} FontSize
 */
BurnInDestinationSettings.prototype['FontSize'] = undefined;
/**
 * @member {module:model/BurnInOutlineColor} OutlineColor
 */
BurnInDestinationSettings.prototype['OutlineColor'] = undefined;
/**
 * @member {Number} OutlineSize
 */
BurnInDestinationSettings.prototype['OutlineSize'] = undefined;
/**
 * @member {module:model/BurnInShadowColor} ShadowColor
 */
BurnInDestinationSettings.prototype['ShadowColor'] = undefined;
/**
 * @member {Number} ShadowOpacity
 */
BurnInDestinationSettings.prototype['ShadowOpacity'] = undefined;
/**
 * @member {Number} ShadowXOffset
 */
BurnInDestinationSettings.prototype['ShadowXOffset'] = undefined;
/**
 * @member {Number} ShadowYOffset
 */
BurnInDestinationSettings.prototype['ShadowYOffset'] = undefined;
/**
 * @member {module:model/BurnInTeletextGridControl} TeletextGridControl
 */
BurnInDestinationSettings.prototype['TeletextGridControl'] = undefined;
/**
 * @member {Number} XPosition
 */
BurnInDestinationSettings.prototype['XPosition'] = undefined;
/**
 * @member {Number} YPosition
 */
BurnInDestinationSettings.prototype['YPosition'] = undefined;




export default CaptionDestinationSettingsBurnInDestinationSettings;

