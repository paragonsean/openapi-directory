/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputDestinationRequest from './InputDestinationRequest';
import InputDeviceRequest from './InputDeviceRequest';
import InputSourceRequest from './InputSourceRequest';
import MediaConnectFlowRequest from './MediaConnectFlowRequest';

/**
 * The UpdateInputRequest model module.
 * @module model/UpdateInputRequest
 * @version 2017-10-14
 */
class UpdateInputRequest {
    /**
     * Constructs a new <code>UpdateInputRequest</code>.
     * @alias module:model/UpdateInputRequest
     */
    constructor() { 
        
        UpdateInputRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateInputRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateInputRequest} obj Optional instance to populate.
     * @return {module:model/UpdateInputRequest} The populated <code>UpdateInputRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateInputRequest();

            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [InputDestinationRequest]);
            }
            if (data.hasOwnProperty('inputDevices')) {
                obj['inputDevices'] = ApiClient.convertToType(data['inputDevices'], [InputDeviceRequest]);
            }
            if (data.hasOwnProperty('inputSecurityGroups')) {
                obj['inputSecurityGroups'] = ApiClient.convertToType(data['inputSecurityGroups'], ['String']);
            }
            if (data.hasOwnProperty('mediaConnectFlows')) {
                obj['mediaConnectFlows'] = ApiClient.convertToType(data['mediaConnectFlows'], [MediaConnectFlowRequest]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [InputSourceRequest]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateInputRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateInputRequest</code>.
     */
    static validateJSON(data) {
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                InputDestinationRequest.validateJSON(item);
            };
        }
        if (data['inputDevices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputDevices'])) {
                throw new Error("Expected the field `inputDevices` to be an array in the JSON data but got " + data['inputDevices']);
            }
            // validate the optional field `inputDevices` (array)
            for (const item of data['inputDevices']) {
                InputDeviceRequest.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inputSecurityGroups'])) {
            throw new Error("Expected the field `inputSecurityGroups` to be an array in the JSON data but got " + data['inputSecurityGroups']);
        }
        if (data['mediaConnectFlows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mediaConnectFlows'])) {
                throw new Error("Expected the field `mediaConnectFlows` to be an array in the JSON data but got " + data['mediaConnectFlows']);
            }
            // validate the optional field `mediaConnectFlows` (array)
            for (const item of data['mediaConnectFlows']) {
                MediaConnectFlowRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                InputSourceRequest.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Placeholder documentation for __listOfInputDestinationRequest
 * @member {Array.<module:model/InputDestinationRequest>} destinations
 */
UpdateInputRequest.prototype['destinations'] = undefined;

/**
 * Placeholder documentation for __listOfInputDeviceRequest
 * @member {Array.<module:model/InputDeviceRequest>} inputDevices
 */
UpdateInputRequest.prototype['inputDevices'] = undefined;

/**
 * Placeholder documentation for __listOf__string
 * @member {Array.<String>} inputSecurityGroups
 */
UpdateInputRequest.prototype['inputSecurityGroups'] = undefined;

/**
 * Placeholder documentation for __listOfMediaConnectFlowRequest
 * @member {Array.<module:model/MediaConnectFlowRequest>} mediaConnectFlows
 */
UpdateInputRequest.prototype['mediaConnectFlows'] = undefined;

/**
 * Placeholder documentation for __string
 * @member {String} name
 */
UpdateInputRequest.prototype['name'] = undefined;

/**
 * Placeholder documentation for __string
 * @member {String} roleArn
 */
UpdateInputRequest.prototype['roleArn'] = undefined;

/**
 * Placeholder documentation for __listOfInputSourceRequest
 * @member {Array.<module:model/InputSourceRequest>} sources
 */
UpdateInputRequest.prototype['sources'] = undefined;






export default UpdateInputRequest;

