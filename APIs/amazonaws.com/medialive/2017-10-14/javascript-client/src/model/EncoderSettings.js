/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateChannelRequestEncoderSettingsAvailBlanking from './CreateChannelRequestEncoderSettingsAvailBlanking';
import CreateChannelRequestEncoderSettingsAvailConfiguration from './CreateChannelRequestEncoderSettingsAvailConfiguration';
import CreateChannelRequestEncoderSettingsBlackoutSlate from './CreateChannelRequestEncoderSettingsBlackoutSlate';
import CreateChannelRequestEncoderSettingsFeatureActivations from './CreateChannelRequestEncoderSettingsFeatureActivations';
import CreateChannelRequestEncoderSettingsGlobalConfiguration from './CreateChannelRequestEncoderSettingsGlobalConfiguration';
import CreateChannelRequestEncoderSettingsMotionGraphicsConfiguration from './CreateChannelRequestEncoderSettingsMotionGraphicsConfiguration';
import CreateChannelRequestEncoderSettingsNielsenConfiguration from './CreateChannelRequestEncoderSettingsNielsenConfiguration';
import CreateChannelRequestEncoderSettingsThumbnailConfiguration from './CreateChannelRequestEncoderSettingsThumbnailConfiguration';
import CreateChannelRequestEncoderSettingsTimecodeConfig from './CreateChannelRequestEncoderSettingsTimecodeConfig';

/**
 * The EncoderSettings model module.
 * @module model/EncoderSettings
 * @version 2017-10-14
 */
class EncoderSettings {
    /**
     * Constructs a new <code>EncoderSettings</code>.
     * Encoder Settings
     * @alias module:model/EncoderSettings
     * @param audioDescriptions {Array} 
     * @param outputGroups {Array} 
     * @param timecodeConfig {module:model/CreateChannelRequestEncoderSettingsTimecodeConfig} 
     * @param videoDescriptions {Array} 
     */
    constructor(audioDescriptions, outputGroups, timecodeConfig, videoDescriptions) { 
        
        EncoderSettings.initialize(this, audioDescriptions, outputGroups, timecodeConfig, videoDescriptions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioDescriptions, outputGroups, timecodeConfig, videoDescriptions) { 
        obj['AudioDescriptions'] = audioDescriptions;
        obj['OutputGroups'] = outputGroups;
        obj['TimecodeConfig'] = timecodeConfig;
        obj['VideoDescriptions'] = videoDescriptions;
    }

    /**
     * Constructs a <code>EncoderSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncoderSettings} obj Optional instance to populate.
     * @return {module:model/EncoderSettings} The populated <code>EncoderSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncoderSettings();

            if (data.hasOwnProperty('AudioDescriptions')) {
                obj['AudioDescriptions'] = ApiClient.convertToType(data['AudioDescriptions'], Array);
            }
            if (data.hasOwnProperty('AvailBlanking')) {
                obj['AvailBlanking'] = CreateChannelRequestEncoderSettingsAvailBlanking.constructFromObject(data['AvailBlanking']);
            }
            if (data.hasOwnProperty('AvailConfiguration')) {
                obj['AvailConfiguration'] = CreateChannelRequestEncoderSettingsAvailConfiguration.constructFromObject(data['AvailConfiguration']);
            }
            if (data.hasOwnProperty('BlackoutSlate')) {
                obj['BlackoutSlate'] = CreateChannelRequestEncoderSettingsBlackoutSlate.constructFromObject(data['BlackoutSlate']);
            }
            if (data.hasOwnProperty('CaptionDescriptions')) {
                obj['CaptionDescriptions'] = ApiClient.convertToType(data['CaptionDescriptions'], Array);
            }
            if (data.hasOwnProperty('FeatureActivations')) {
                obj['FeatureActivations'] = CreateChannelRequestEncoderSettingsFeatureActivations.constructFromObject(data['FeatureActivations']);
            }
            if (data.hasOwnProperty('GlobalConfiguration')) {
                obj['GlobalConfiguration'] = CreateChannelRequestEncoderSettingsGlobalConfiguration.constructFromObject(data['GlobalConfiguration']);
            }
            if (data.hasOwnProperty('MotionGraphicsConfiguration')) {
                obj['MotionGraphicsConfiguration'] = CreateChannelRequestEncoderSettingsMotionGraphicsConfiguration.constructFromObject(data['MotionGraphicsConfiguration']);
            }
            if (data.hasOwnProperty('NielsenConfiguration')) {
                obj['NielsenConfiguration'] = CreateChannelRequestEncoderSettingsNielsenConfiguration.constructFromObject(data['NielsenConfiguration']);
            }
            if (data.hasOwnProperty('OutputGroups')) {
                obj['OutputGroups'] = ApiClient.convertToType(data['OutputGroups'], Array);
            }
            if (data.hasOwnProperty('TimecodeConfig')) {
                obj['TimecodeConfig'] = CreateChannelRequestEncoderSettingsTimecodeConfig.constructFromObject(data['TimecodeConfig']);
            }
            if (data.hasOwnProperty('VideoDescriptions')) {
                obj['VideoDescriptions'] = ApiClient.convertToType(data['VideoDescriptions'], Array);
            }
            if (data.hasOwnProperty('ThumbnailConfiguration')) {
                obj['ThumbnailConfiguration'] = CreateChannelRequestEncoderSettingsThumbnailConfiguration.constructFromObject(data['ThumbnailConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncoderSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncoderSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EncoderSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AudioDescriptions`
        if (data['AudioDescriptions']) { // data not null
          Array.validateJSON(data['AudioDescriptions']);
        }
        // validate the optional field `AvailBlanking`
        if (data['AvailBlanking']) { // data not null
          CreateChannelRequestEncoderSettingsAvailBlanking.validateJSON(data['AvailBlanking']);
        }
        // validate the optional field `AvailConfiguration`
        if (data['AvailConfiguration']) { // data not null
          CreateChannelRequestEncoderSettingsAvailConfiguration.validateJSON(data['AvailConfiguration']);
        }
        // validate the optional field `BlackoutSlate`
        if (data['BlackoutSlate']) { // data not null
          CreateChannelRequestEncoderSettingsBlackoutSlate.validateJSON(data['BlackoutSlate']);
        }
        // validate the optional field `CaptionDescriptions`
        if (data['CaptionDescriptions']) { // data not null
          Array.validateJSON(data['CaptionDescriptions']);
        }
        // validate the optional field `FeatureActivations`
        if (data['FeatureActivations']) { // data not null
          CreateChannelRequestEncoderSettingsFeatureActivations.validateJSON(data['FeatureActivations']);
        }
        // validate the optional field `GlobalConfiguration`
        if (data['GlobalConfiguration']) { // data not null
          CreateChannelRequestEncoderSettingsGlobalConfiguration.validateJSON(data['GlobalConfiguration']);
        }
        // validate the optional field `MotionGraphicsConfiguration`
        if (data['MotionGraphicsConfiguration']) { // data not null
          CreateChannelRequestEncoderSettingsMotionGraphicsConfiguration.validateJSON(data['MotionGraphicsConfiguration']);
        }
        // validate the optional field `NielsenConfiguration`
        if (data['NielsenConfiguration']) { // data not null
          CreateChannelRequestEncoderSettingsNielsenConfiguration.validateJSON(data['NielsenConfiguration']);
        }
        // validate the optional field `OutputGroups`
        if (data['OutputGroups']) { // data not null
          Array.validateJSON(data['OutputGroups']);
        }
        // validate the optional field `TimecodeConfig`
        if (data['TimecodeConfig']) { // data not null
          CreateChannelRequestEncoderSettingsTimecodeConfig.validateJSON(data['TimecodeConfig']);
        }
        // validate the optional field `VideoDescriptions`
        if (data['VideoDescriptions']) { // data not null
          Array.validateJSON(data['VideoDescriptions']);
        }
        // validate the optional field `ThumbnailConfiguration`
        if (data['ThumbnailConfiguration']) { // data not null
          CreateChannelRequestEncoderSettingsThumbnailConfiguration.validateJSON(data['ThumbnailConfiguration']);
        }

        return true;
    }


}

EncoderSettings.RequiredProperties = ["AudioDescriptions", "OutputGroups", "TimecodeConfig", "VideoDescriptions"];

/**
 * @member {Array} AudioDescriptions
 */
EncoderSettings.prototype['AudioDescriptions'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsAvailBlanking} AvailBlanking
 */
EncoderSettings.prototype['AvailBlanking'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsAvailConfiguration} AvailConfiguration
 */
EncoderSettings.prototype['AvailConfiguration'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsBlackoutSlate} BlackoutSlate
 */
EncoderSettings.prototype['BlackoutSlate'] = undefined;

/**
 * @member {Array} CaptionDescriptions
 */
EncoderSettings.prototype['CaptionDescriptions'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsFeatureActivations} FeatureActivations
 */
EncoderSettings.prototype['FeatureActivations'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsGlobalConfiguration} GlobalConfiguration
 */
EncoderSettings.prototype['GlobalConfiguration'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsMotionGraphicsConfiguration} MotionGraphicsConfiguration
 */
EncoderSettings.prototype['MotionGraphicsConfiguration'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsNielsenConfiguration} NielsenConfiguration
 */
EncoderSettings.prototype['NielsenConfiguration'] = undefined;

/**
 * @member {Array} OutputGroups
 */
EncoderSettings.prototype['OutputGroups'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsTimecodeConfig} TimecodeConfig
 */
EncoderSettings.prototype['TimecodeConfig'] = undefined;

/**
 * @member {Array} VideoDescriptions
 */
EncoderSettings.prototype['VideoDescriptions'] = undefined;

/**
 * @member {module:model/CreateChannelRequestEncoderSettingsThumbnailConfiguration} ThumbnailConfiguration
 */
EncoderSettings.prototype['ThumbnailConfiguration'] = undefined;






export default EncoderSettings;

