/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AfdSignaling from './AfdSignaling';
import FixedAfd from './FixedAfd';
import FrameCaptureSettingsTimecodeBurninSettings from './FrameCaptureSettingsTimecodeBurninSettings';
import H264AdaptiveQuantization from './H264AdaptiveQuantization';
import H264ColorMetadata from './H264ColorMetadata';
import H264EntropyEncoding from './H264EntropyEncoding';
import H264FlickerAq from './H264FlickerAq';
import H264ForceFieldPictures from './H264ForceFieldPictures';
import H264FramerateControl from './H264FramerateControl';
import H264GopBReference from './H264GopBReference';
import H264GopSizeUnits from './H264GopSizeUnits';
import H264Level from './H264Level';
import H264LookAheadRateControl from './H264LookAheadRateControl';
import H264ParControl from './H264ParControl';
import H264Profile from './H264Profile';
import H264QualityLevel from './H264QualityLevel';
import H264RateControlMode from './H264RateControlMode';
import H264ScanType from './H264ScanType';
import H264SceneChangeDetect from './H264SceneChangeDetect';
import H264Settings from './H264Settings';
import H264SettingsColorSpaceSettings from './H264SettingsColorSpaceSettings';
import H264SettingsFilterSettings from './H264SettingsFilterSettings';
import H264SpatialAq from './H264SpatialAq';
import H264SubGopLength from './H264SubGopLength';
import H264Syntax from './H264Syntax';
import H264TemporalAq from './H264TemporalAq';
import H264TimecodeInsertionBehavior from './H264TimecodeInsertionBehavior';

/**
 * The VideoCodecSettingsH264Settings model module.
 * @module model/VideoCodecSettingsH264Settings
 * @version 2017-10-14
 */
class VideoCodecSettingsH264Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsH264Settings</code>.
     * @alias module:model/VideoCodecSettingsH264Settings
     * @implements module:model/H264Settings
     */
    constructor() { 
        H264Settings.initialize(this);
        VideoCodecSettingsH264Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoCodecSettingsH264Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsH264Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsH264Settings} The populated <code>VideoCodecSettingsH264Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsH264Settings();
            H264Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], H264AdaptiveQuantization);
            }
            if (data.hasOwnProperty('AfdSignaling')) {
                obj['AfdSignaling'] = ApiClient.convertToType(data['AfdSignaling'], AfdSignaling);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BufFillPct')) {
                obj['BufFillPct'] = ApiClient.convertToType(data['BufFillPct'], 'Number');
            }
            if (data.hasOwnProperty('BufSize')) {
                obj['BufSize'] = ApiClient.convertToType(data['BufSize'], 'Number');
            }
            if (data.hasOwnProperty('ColorMetadata')) {
                obj['ColorMetadata'] = ApiClient.convertToType(data['ColorMetadata'], H264ColorMetadata);
            }
            if (data.hasOwnProperty('ColorSpaceSettings')) {
                obj['ColorSpaceSettings'] = H264SettingsColorSpaceSettings.constructFromObject(data['ColorSpaceSettings']);
            }
            if (data.hasOwnProperty('EntropyEncoding')) {
                obj['EntropyEncoding'] = ApiClient.convertToType(data['EntropyEncoding'], H264EntropyEncoding);
            }
            if (data.hasOwnProperty('FilterSettings')) {
                obj['FilterSettings'] = H264SettingsFilterSettings.constructFromObject(data['FilterSettings']);
            }
            if (data.hasOwnProperty('FixedAfd')) {
                obj['FixedAfd'] = ApiClient.convertToType(data['FixedAfd'], FixedAfd);
            }
            if (data.hasOwnProperty('FlickerAq')) {
                obj['FlickerAq'] = ApiClient.convertToType(data['FlickerAq'], H264FlickerAq);
            }
            if (data.hasOwnProperty('ForceFieldPictures')) {
                obj['ForceFieldPictures'] = ApiClient.convertToType(data['ForceFieldPictures'], H264ForceFieldPictures);
            }
            if (data.hasOwnProperty('FramerateControl')) {
                obj['FramerateControl'] = ApiClient.convertToType(data['FramerateControl'], H264FramerateControl);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopBReference')) {
                obj['GopBReference'] = ApiClient.convertToType(data['GopBReference'], H264GopBReference);
            }
            if (data.hasOwnProperty('GopClosedCadence')) {
                obj['GopClosedCadence'] = ApiClient.convertToType(data['GopClosedCadence'], 'Number');
            }
            if (data.hasOwnProperty('GopNumBFrames')) {
                obj['GopNumBFrames'] = ApiClient.convertToType(data['GopNumBFrames'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('GopSizeUnits')) {
                obj['GopSizeUnits'] = ApiClient.convertToType(data['GopSizeUnits'], H264GopSizeUnits);
            }
            if (data.hasOwnProperty('Level')) {
                obj['Level'] = ApiClient.convertToType(data['Level'], H264Level);
            }
            if (data.hasOwnProperty('LookAheadRateControl')) {
                obj['LookAheadRateControl'] = ApiClient.convertToType(data['LookAheadRateControl'], H264LookAheadRateControl);
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MinIInterval')) {
                obj['MinIInterval'] = ApiClient.convertToType(data['MinIInterval'], 'Number');
            }
            if (data.hasOwnProperty('NumRefFrames')) {
                obj['NumRefFrames'] = ApiClient.convertToType(data['NumRefFrames'], 'Number');
            }
            if (data.hasOwnProperty('ParControl')) {
                obj['ParControl'] = ApiClient.convertToType(data['ParControl'], H264ParControl);
            }
            if (data.hasOwnProperty('ParDenominator')) {
                obj['ParDenominator'] = ApiClient.convertToType(data['ParDenominator'], 'Number');
            }
            if (data.hasOwnProperty('ParNumerator')) {
                obj['ParNumerator'] = ApiClient.convertToType(data['ParNumerator'], 'Number');
            }
            if (data.hasOwnProperty('Profile')) {
                obj['Profile'] = ApiClient.convertToType(data['Profile'], H264Profile);
            }
            if (data.hasOwnProperty('QualityLevel')) {
                obj['QualityLevel'] = ApiClient.convertToType(data['QualityLevel'], H264QualityLevel);
            }
            if (data.hasOwnProperty('QvbrQualityLevel')) {
                obj['QvbrQualityLevel'] = ApiClient.convertToType(data['QvbrQualityLevel'], 'Number');
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], H264RateControlMode);
            }
            if (data.hasOwnProperty('ScanType')) {
                obj['ScanType'] = ApiClient.convertToType(data['ScanType'], H264ScanType);
            }
            if (data.hasOwnProperty('SceneChangeDetect')) {
                obj['SceneChangeDetect'] = ApiClient.convertToType(data['SceneChangeDetect'], H264SceneChangeDetect);
            }
            if (data.hasOwnProperty('Slices')) {
                obj['Slices'] = ApiClient.convertToType(data['Slices'], 'Number');
            }
            if (data.hasOwnProperty('Softness')) {
                obj['Softness'] = ApiClient.convertToType(data['Softness'], 'Number');
            }
            if (data.hasOwnProperty('SpatialAq')) {
                obj['SpatialAq'] = ApiClient.convertToType(data['SpatialAq'], H264SpatialAq);
            }
            if (data.hasOwnProperty('SubgopLength')) {
                obj['SubgopLength'] = ApiClient.convertToType(data['SubgopLength'], H264SubGopLength);
            }
            if (data.hasOwnProperty('Syntax')) {
                obj['Syntax'] = ApiClient.convertToType(data['Syntax'], H264Syntax);
            }
            if (data.hasOwnProperty('TemporalAq')) {
                obj['TemporalAq'] = ApiClient.convertToType(data['TemporalAq'], H264TemporalAq);
            }
            if (data.hasOwnProperty('TimecodeInsertion')) {
                obj['TimecodeInsertion'] = ApiClient.convertToType(data['TimecodeInsertion'], H264TimecodeInsertionBehavior);
            }
            if (data.hasOwnProperty('TimecodeBurninSettings')) {
                obj['TimecodeBurninSettings'] = FrameCaptureSettingsTimecodeBurninSettings.constructFromObject(data['TimecodeBurninSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsH264Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsH264Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          H264AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `AfdSignaling`
        if (data['AfdSignaling']) { // data not null
          AfdSignaling.validateJSON(data['AfdSignaling']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `BufFillPct`
        if (data['BufFillPct']) { // data not null
          Number.validateJSON(data['BufFillPct']);
        }
        // validate the optional field `BufSize`
        if (data['BufSize']) { // data not null
          Number.validateJSON(data['BufSize']);
        }
        // validate the optional field `ColorMetadata`
        if (data['ColorMetadata']) { // data not null
          H264ColorMetadata.validateJSON(data['ColorMetadata']);
        }
        // validate the optional field `ColorSpaceSettings`
        if (data['ColorSpaceSettings']) { // data not null
          H264SettingsColorSpaceSettings.validateJSON(data['ColorSpaceSettings']);
        }
        // validate the optional field `EntropyEncoding`
        if (data['EntropyEncoding']) { // data not null
          H264EntropyEncoding.validateJSON(data['EntropyEncoding']);
        }
        // validate the optional field `FilterSettings`
        if (data['FilterSettings']) { // data not null
          H264SettingsFilterSettings.validateJSON(data['FilterSettings']);
        }
        // validate the optional field `FixedAfd`
        if (data['FixedAfd']) { // data not null
          FixedAfd.validateJSON(data['FixedAfd']);
        }
        // validate the optional field `FlickerAq`
        if (data['FlickerAq']) { // data not null
          H264FlickerAq.validateJSON(data['FlickerAq']);
        }
        // validate the optional field `ForceFieldPictures`
        if (data['ForceFieldPictures']) { // data not null
          H264ForceFieldPictures.validateJSON(data['ForceFieldPictures']);
        }
        // validate the optional field `FramerateControl`
        if (data['FramerateControl']) { // data not null
          H264FramerateControl.validateJSON(data['FramerateControl']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopBReference`
        if (data['GopBReference']) { // data not null
          H264GopBReference.validateJSON(data['GopBReference']);
        }
        // validate the optional field `GopClosedCadence`
        if (data['GopClosedCadence']) { // data not null
          Number.validateJSON(data['GopClosedCadence']);
        }
        // validate the optional field `GopNumBFrames`
        if (data['GopNumBFrames']) { // data not null
          Number.validateJSON(data['GopNumBFrames']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `GopSizeUnits`
        if (data['GopSizeUnits']) { // data not null
          H264GopSizeUnits.validateJSON(data['GopSizeUnits']);
        }
        // validate the optional field `Level`
        if (data['Level']) { // data not null
          H264Level.validateJSON(data['Level']);
        }
        // validate the optional field `LookAheadRateControl`
        if (data['LookAheadRateControl']) { // data not null
          H264LookAheadRateControl.validateJSON(data['LookAheadRateControl']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `MinIInterval`
        if (data['MinIInterval']) { // data not null
          Number.validateJSON(data['MinIInterval']);
        }
        // validate the optional field `NumRefFrames`
        if (data['NumRefFrames']) { // data not null
          Number.validateJSON(data['NumRefFrames']);
        }
        // validate the optional field `ParControl`
        if (data['ParControl']) { // data not null
          H264ParControl.validateJSON(data['ParControl']);
        }
        // validate the optional field `ParDenominator`
        if (data['ParDenominator']) { // data not null
          Number.validateJSON(data['ParDenominator']);
        }
        // validate the optional field `ParNumerator`
        if (data['ParNumerator']) { // data not null
          Number.validateJSON(data['ParNumerator']);
        }
        // validate the optional field `Profile`
        if (data['Profile']) { // data not null
          H264Profile.validateJSON(data['Profile']);
        }
        // validate the optional field `QualityLevel`
        if (data['QualityLevel']) { // data not null
          H264QualityLevel.validateJSON(data['QualityLevel']);
        }
        // validate the optional field `QvbrQualityLevel`
        if (data['QvbrQualityLevel']) { // data not null
          Number.validateJSON(data['QvbrQualityLevel']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          H264RateControlMode.validateJSON(data['RateControlMode']);
        }
        // validate the optional field `ScanType`
        if (data['ScanType']) { // data not null
          H264ScanType.validateJSON(data['ScanType']);
        }
        // validate the optional field `SceneChangeDetect`
        if (data['SceneChangeDetect']) { // data not null
          H264SceneChangeDetect.validateJSON(data['SceneChangeDetect']);
        }
        // validate the optional field `Slices`
        if (data['Slices']) { // data not null
          Number.validateJSON(data['Slices']);
        }
        // validate the optional field `Softness`
        if (data['Softness']) { // data not null
          Number.validateJSON(data['Softness']);
        }
        // validate the optional field `SpatialAq`
        if (data['SpatialAq']) { // data not null
          H264SpatialAq.validateJSON(data['SpatialAq']);
        }
        // validate the optional field `SubgopLength`
        if (data['SubgopLength']) { // data not null
          H264SubGopLength.validateJSON(data['SubgopLength']);
        }
        // validate the optional field `Syntax`
        if (data['Syntax']) { // data not null
          H264Syntax.validateJSON(data['Syntax']);
        }
        // validate the optional field `TemporalAq`
        if (data['TemporalAq']) { // data not null
          H264TemporalAq.validateJSON(data['TemporalAq']);
        }
        // validate the optional field `TimecodeInsertion`
        if (data['TimecodeInsertion']) { // data not null
          H264TimecodeInsertionBehavior.validateJSON(data['TimecodeInsertion']);
        }
        // validate the optional field `TimecodeBurninSettings`
        if (data['TimecodeBurninSettings']) { // data not null
          FrameCaptureSettingsTimecodeBurninSettings.validateJSON(data['TimecodeBurninSettings']);
        }

        return true;
    }


}



/**
 * @member {module:model/H264AdaptiveQuantization} AdaptiveQuantization
 */
VideoCodecSettingsH264Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
VideoCodecSettingsH264Settings.prototype['AfdSignaling'] = undefined;

/**
 * @member {Number} Bitrate
 */
VideoCodecSettingsH264Settings.prototype['Bitrate'] = undefined;

/**
 * @member {Number} BufFillPct
 */
VideoCodecSettingsH264Settings.prototype['BufFillPct'] = undefined;

/**
 * @member {Number} BufSize
 */
VideoCodecSettingsH264Settings.prototype['BufSize'] = undefined;

/**
 * @member {module:model/H264ColorMetadata} ColorMetadata
 */
VideoCodecSettingsH264Settings.prototype['ColorMetadata'] = undefined;

/**
 * @member {module:model/H264SettingsColorSpaceSettings} ColorSpaceSettings
 */
VideoCodecSettingsH264Settings.prototype['ColorSpaceSettings'] = undefined;

/**
 * @member {module:model/H264EntropyEncoding} EntropyEncoding
 */
VideoCodecSettingsH264Settings.prototype['EntropyEncoding'] = undefined;

/**
 * @member {module:model/H264SettingsFilterSettings} FilterSettings
 */
VideoCodecSettingsH264Settings.prototype['FilterSettings'] = undefined;

/**
 * @member {module:model/FixedAfd} FixedAfd
 */
VideoCodecSettingsH264Settings.prototype['FixedAfd'] = undefined;

/**
 * @member {module:model/H264FlickerAq} FlickerAq
 */
VideoCodecSettingsH264Settings.prototype['FlickerAq'] = undefined;

/**
 * @member {module:model/H264ForceFieldPictures} ForceFieldPictures
 */
VideoCodecSettingsH264Settings.prototype['ForceFieldPictures'] = undefined;

/**
 * @member {module:model/H264FramerateControl} FramerateControl
 */
VideoCodecSettingsH264Settings.prototype['FramerateControl'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsH264Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsH264Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {module:model/H264GopBReference} GopBReference
 */
VideoCodecSettingsH264Settings.prototype['GopBReference'] = undefined;

/**
 * @member {Number} GopClosedCadence
 */
VideoCodecSettingsH264Settings.prototype['GopClosedCadence'] = undefined;

/**
 * @member {Number} GopNumBFrames
 */
VideoCodecSettingsH264Settings.prototype['GopNumBFrames'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsH264Settings.prototype['GopSize'] = undefined;

/**
 * @member {module:model/H264GopSizeUnits} GopSizeUnits
 */
VideoCodecSettingsH264Settings.prototype['GopSizeUnits'] = undefined;

/**
 * @member {module:model/H264Level} Level
 */
VideoCodecSettingsH264Settings.prototype['Level'] = undefined;

/**
 * @member {module:model/H264LookAheadRateControl} LookAheadRateControl
 */
VideoCodecSettingsH264Settings.prototype['LookAheadRateControl'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
VideoCodecSettingsH264Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} MinIInterval
 */
VideoCodecSettingsH264Settings.prototype['MinIInterval'] = undefined;

/**
 * @member {Number} NumRefFrames
 */
VideoCodecSettingsH264Settings.prototype['NumRefFrames'] = undefined;

/**
 * @member {module:model/H264ParControl} ParControl
 */
VideoCodecSettingsH264Settings.prototype['ParControl'] = undefined;

/**
 * @member {Number} ParDenominator
 */
VideoCodecSettingsH264Settings.prototype['ParDenominator'] = undefined;

/**
 * @member {Number} ParNumerator
 */
VideoCodecSettingsH264Settings.prototype['ParNumerator'] = undefined;

/**
 * @member {module:model/H264Profile} Profile
 */
VideoCodecSettingsH264Settings.prototype['Profile'] = undefined;

/**
 * @member {module:model/H264QualityLevel} QualityLevel
 */
VideoCodecSettingsH264Settings.prototype['QualityLevel'] = undefined;

/**
 * @member {Number} QvbrQualityLevel
 */
VideoCodecSettingsH264Settings.prototype['QvbrQualityLevel'] = undefined;

/**
 * @member {module:model/H264RateControlMode} RateControlMode
 */
VideoCodecSettingsH264Settings.prototype['RateControlMode'] = undefined;

/**
 * @member {module:model/H264ScanType} ScanType
 */
VideoCodecSettingsH264Settings.prototype['ScanType'] = undefined;

/**
 * @member {module:model/H264SceneChangeDetect} SceneChangeDetect
 */
VideoCodecSettingsH264Settings.prototype['SceneChangeDetect'] = undefined;

/**
 * @member {Number} Slices
 */
VideoCodecSettingsH264Settings.prototype['Slices'] = undefined;

/**
 * @member {Number} Softness
 */
VideoCodecSettingsH264Settings.prototype['Softness'] = undefined;

/**
 * @member {module:model/H264SpatialAq} SpatialAq
 */
VideoCodecSettingsH264Settings.prototype['SpatialAq'] = undefined;

/**
 * @member {module:model/H264SubGopLength} SubgopLength
 */
VideoCodecSettingsH264Settings.prototype['SubgopLength'] = undefined;

/**
 * @member {module:model/H264Syntax} Syntax
 */
VideoCodecSettingsH264Settings.prototype['Syntax'] = undefined;

/**
 * @member {module:model/H264TemporalAq} TemporalAq
 */
VideoCodecSettingsH264Settings.prototype['TemporalAq'] = undefined;

/**
 * @member {module:model/H264TimecodeInsertionBehavior} TimecodeInsertion
 */
VideoCodecSettingsH264Settings.prototype['TimecodeInsertion'] = undefined;

/**
 * @member {module:model/FrameCaptureSettingsTimecodeBurninSettings} TimecodeBurninSettings
 */
VideoCodecSettingsH264Settings.prototype['TimecodeBurninSettings'] = undefined;


// Implement H264Settings interface:
/**
 * @member {module:model/H264AdaptiveQuantization} AdaptiveQuantization
 */
H264Settings.prototype['AdaptiveQuantization'] = undefined;
/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
H264Settings.prototype['AfdSignaling'] = undefined;
/**
 * @member {Number} Bitrate
 */
H264Settings.prototype['Bitrate'] = undefined;
/**
 * @member {Number} BufFillPct
 */
H264Settings.prototype['BufFillPct'] = undefined;
/**
 * @member {Number} BufSize
 */
H264Settings.prototype['BufSize'] = undefined;
/**
 * @member {module:model/H264ColorMetadata} ColorMetadata
 */
H264Settings.prototype['ColorMetadata'] = undefined;
/**
 * @member {module:model/H264SettingsColorSpaceSettings} ColorSpaceSettings
 */
H264Settings.prototype['ColorSpaceSettings'] = undefined;
/**
 * @member {module:model/H264EntropyEncoding} EntropyEncoding
 */
H264Settings.prototype['EntropyEncoding'] = undefined;
/**
 * @member {module:model/H264SettingsFilterSettings} FilterSettings
 */
H264Settings.prototype['FilterSettings'] = undefined;
/**
 * @member {module:model/FixedAfd} FixedAfd
 */
H264Settings.prototype['FixedAfd'] = undefined;
/**
 * @member {module:model/H264FlickerAq} FlickerAq
 */
H264Settings.prototype['FlickerAq'] = undefined;
/**
 * @member {module:model/H264ForceFieldPictures} ForceFieldPictures
 */
H264Settings.prototype['ForceFieldPictures'] = undefined;
/**
 * @member {module:model/H264FramerateControl} FramerateControl
 */
H264Settings.prototype['FramerateControl'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
H264Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
H264Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {module:model/H264GopBReference} GopBReference
 */
H264Settings.prototype['GopBReference'] = undefined;
/**
 * @member {Number} GopClosedCadence
 */
H264Settings.prototype['GopClosedCadence'] = undefined;
/**
 * @member {Number} GopNumBFrames
 */
H264Settings.prototype['GopNumBFrames'] = undefined;
/**
 * @member {Number} GopSize
 */
H264Settings.prototype['GopSize'] = undefined;
/**
 * @member {module:model/H264GopSizeUnits} GopSizeUnits
 */
H264Settings.prototype['GopSizeUnits'] = undefined;
/**
 * @member {module:model/H264Level} Level
 */
H264Settings.prototype['Level'] = undefined;
/**
 * @member {module:model/H264LookAheadRateControl} LookAheadRateControl
 */
H264Settings.prototype['LookAheadRateControl'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
H264Settings.prototype['MaxBitrate'] = undefined;
/**
 * @member {Number} MinIInterval
 */
H264Settings.prototype['MinIInterval'] = undefined;
/**
 * @member {Number} NumRefFrames
 */
H264Settings.prototype['NumRefFrames'] = undefined;
/**
 * @member {module:model/H264ParControl} ParControl
 */
H264Settings.prototype['ParControl'] = undefined;
/**
 * @member {Number} ParDenominator
 */
H264Settings.prototype['ParDenominator'] = undefined;
/**
 * @member {Number} ParNumerator
 */
H264Settings.prototype['ParNumerator'] = undefined;
/**
 * @member {module:model/H264Profile} Profile
 */
H264Settings.prototype['Profile'] = undefined;
/**
 * @member {module:model/H264QualityLevel} QualityLevel
 */
H264Settings.prototype['QualityLevel'] = undefined;
/**
 * @member {Number} QvbrQualityLevel
 */
H264Settings.prototype['QvbrQualityLevel'] = undefined;
/**
 * @member {module:model/H264RateControlMode} RateControlMode
 */
H264Settings.prototype['RateControlMode'] = undefined;
/**
 * @member {module:model/H264ScanType} ScanType
 */
H264Settings.prototype['ScanType'] = undefined;
/**
 * @member {module:model/H264SceneChangeDetect} SceneChangeDetect
 */
H264Settings.prototype['SceneChangeDetect'] = undefined;
/**
 * @member {Number} Slices
 */
H264Settings.prototype['Slices'] = undefined;
/**
 * @member {Number} Softness
 */
H264Settings.prototype['Softness'] = undefined;
/**
 * @member {module:model/H264SpatialAq} SpatialAq
 */
H264Settings.prototype['SpatialAq'] = undefined;
/**
 * @member {module:model/H264SubGopLength} SubgopLength
 */
H264Settings.prototype['SubgopLength'] = undefined;
/**
 * @member {module:model/H264Syntax} Syntax
 */
H264Settings.prototype['Syntax'] = undefined;
/**
 * @member {module:model/H264TemporalAq} TemporalAq
 */
H264Settings.prototype['TemporalAq'] = undefined;
/**
 * @member {module:model/H264TimecodeInsertionBehavior} TimecodeInsertion
 */
H264Settings.prototype['TimecodeInsertion'] = undefined;
/**
 * @member {module:model/FrameCaptureSettingsTimecodeBurninSettings} TimecodeBurninSettings
 */
H264Settings.prototype['TimecodeBurninSettings'] = undefined;




export default VideoCodecSettingsH264Settings;

