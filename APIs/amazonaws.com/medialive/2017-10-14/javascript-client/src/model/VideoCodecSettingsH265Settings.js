/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AfdSignaling from './AfdSignaling';
import FixedAfd from './FixedAfd';
import FrameCaptureSettingsTimecodeBurninSettings from './FrameCaptureSettingsTimecodeBurninSettings';
import H265AdaptiveQuantization from './H265AdaptiveQuantization';
import H265AlternativeTransferFunction from './H265AlternativeTransferFunction';
import H265ColorMetadata from './H265ColorMetadata';
import H265FlickerAq from './H265FlickerAq';
import H265GopSizeUnits from './H265GopSizeUnits';
import H265Level from './H265Level';
import H265LookAheadRateControl from './H265LookAheadRateControl';
import H265Profile from './H265Profile';
import H265RateControlMode from './H265RateControlMode';
import H265ScanType from './H265ScanType';
import H265SceneChangeDetect from './H265SceneChangeDetect';
import H265Settings from './H265Settings';
import H265SettingsColorSpaceSettings from './H265SettingsColorSpaceSettings';
import H265SettingsFilterSettings from './H265SettingsFilterSettings';
import H265Tier from './H265Tier';
import H265TimecodeInsertionBehavior from './H265TimecodeInsertionBehavior';

/**
 * The VideoCodecSettingsH265Settings model module.
 * @module model/VideoCodecSettingsH265Settings
 * @version 2017-10-14
 */
class VideoCodecSettingsH265Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsH265Settings</code>.
     * @alias module:model/VideoCodecSettingsH265Settings
     * @implements module:model/H265Settings
     * @param framerateDenominator {Number} 
     * @param framerateNumerator {Number} 
     */
    constructor(framerateDenominator, framerateNumerator) { 
        H265Settings.initialize(this, framerateDenominator, framerateNumerator);
        VideoCodecSettingsH265Settings.initialize(this, framerateDenominator, framerateNumerator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, framerateDenominator, framerateNumerator) { 
        obj['FramerateDenominator'] = framerateDenominator;
        obj['FramerateNumerator'] = framerateNumerator;
    }

    /**
     * Constructs a <code>VideoCodecSettingsH265Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsH265Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsH265Settings} The populated <code>VideoCodecSettingsH265Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsH265Settings();
            H265Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], H265AdaptiveQuantization);
            }
            if (data.hasOwnProperty('AfdSignaling')) {
                obj['AfdSignaling'] = ApiClient.convertToType(data['AfdSignaling'], AfdSignaling);
            }
            if (data.hasOwnProperty('AlternativeTransferFunction')) {
                obj['AlternativeTransferFunction'] = ApiClient.convertToType(data['AlternativeTransferFunction'], H265AlternativeTransferFunction);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BufSize')) {
                obj['BufSize'] = ApiClient.convertToType(data['BufSize'], 'Number');
            }
            if (data.hasOwnProperty('ColorMetadata')) {
                obj['ColorMetadata'] = ApiClient.convertToType(data['ColorMetadata'], H265ColorMetadata);
            }
            if (data.hasOwnProperty('ColorSpaceSettings')) {
                obj['ColorSpaceSettings'] = H265SettingsColorSpaceSettings.constructFromObject(data['ColorSpaceSettings']);
            }
            if (data.hasOwnProperty('FilterSettings')) {
                obj['FilterSettings'] = H265SettingsFilterSettings.constructFromObject(data['FilterSettings']);
            }
            if (data.hasOwnProperty('FixedAfd')) {
                obj['FixedAfd'] = ApiClient.convertToType(data['FixedAfd'], FixedAfd);
            }
            if (data.hasOwnProperty('FlickerAq')) {
                obj['FlickerAq'] = ApiClient.convertToType(data['FlickerAq'], H265FlickerAq);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopClosedCadence')) {
                obj['GopClosedCadence'] = ApiClient.convertToType(data['GopClosedCadence'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('GopSizeUnits')) {
                obj['GopSizeUnits'] = ApiClient.convertToType(data['GopSizeUnits'], H265GopSizeUnits);
            }
            if (data.hasOwnProperty('Level')) {
                obj['Level'] = ApiClient.convertToType(data['Level'], H265Level);
            }
            if (data.hasOwnProperty('LookAheadRateControl')) {
                obj['LookAheadRateControl'] = ApiClient.convertToType(data['LookAheadRateControl'], H265LookAheadRateControl);
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MinIInterval')) {
                obj['MinIInterval'] = ApiClient.convertToType(data['MinIInterval'], 'Number');
            }
            if (data.hasOwnProperty('ParDenominator')) {
                obj['ParDenominator'] = ApiClient.convertToType(data['ParDenominator'], 'Number');
            }
            if (data.hasOwnProperty('ParNumerator')) {
                obj['ParNumerator'] = ApiClient.convertToType(data['ParNumerator'], 'Number');
            }
            if (data.hasOwnProperty('Profile')) {
                obj['Profile'] = ApiClient.convertToType(data['Profile'], H265Profile);
            }
            if (data.hasOwnProperty('QvbrQualityLevel')) {
                obj['QvbrQualityLevel'] = ApiClient.convertToType(data['QvbrQualityLevel'], 'Number');
            }
            if (data.hasOwnProperty('RateControlMode')) {
                obj['RateControlMode'] = ApiClient.convertToType(data['RateControlMode'], H265RateControlMode);
            }
            if (data.hasOwnProperty('ScanType')) {
                obj['ScanType'] = ApiClient.convertToType(data['ScanType'], H265ScanType);
            }
            if (data.hasOwnProperty('SceneChangeDetect')) {
                obj['SceneChangeDetect'] = ApiClient.convertToType(data['SceneChangeDetect'], H265SceneChangeDetect);
            }
            if (data.hasOwnProperty('Slices')) {
                obj['Slices'] = ApiClient.convertToType(data['Slices'], 'Number');
            }
            if (data.hasOwnProperty('Tier')) {
                obj['Tier'] = ApiClient.convertToType(data['Tier'], H265Tier);
            }
            if (data.hasOwnProperty('TimecodeInsertion')) {
                obj['TimecodeInsertion'] = ApiClient.convertToType(data['TimecodeInsertion'], H265TimecodeInsertionBehavior);
            }
            if (data.hasOwnProperty('TimecodeBurninSettings')) {
                obj['TimecodeBurninSettings'] = FrameCaptureSettingsTimecodeBurninSettings.constructFromObject(data['TimecodeBurninSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsH265Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsH265Settings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoCodecSettingsH265Settings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          H265AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `AfdSignaling`
        if (data['AfdSignaling']) { // data not null
          AfdSignaling.validateJSON(data['AfdSignaling']);
        }
        // validate the optional field `AlternativeTransferFunction`
        if (data['AlternativeTransferFunction']) { // data not null
          H265AlternativeTransferFunction.validateJSON(data['AlternativeTransferFunction']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `BufSize`
        if (data['BufSize']) { // data not null
          Number.validateJSON(data['BufSize']);
        }
        // validate the optional field `ColorMetadata`
        if (data['ColorMetadata']) { // data not null
          H265ColorMetadata.validateJSON(data['ColorMetadata']);
        }
        // validate the optional field `ColorSpaceSettings`
        if (data['ColorSpaceSettings']) { // data not null
          H265SettingsColorSpaceSettings.validateJSON(data['ColorSpaceSettings']);
        }
        // validate the optional field `FilterSettings`
        if (data['FilterSettings']) { // data not null
          H265SettingsFilterSettings.validateJSON(data['FilterSettings']);
        }
        // validate the optional field `FixedAfd`
        if (data['FixedAfd']) { // data not null
          FixedAfd.validateJSON(data['FixedAfd']);
        }
        // validate the optional field `FlickerAq`
        if (data['FlickerAq']) { // data not null
          H265FlickerAq.validateJSON(data['FlickerAq']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopClosedCadence`
        if (data['GopClosedCadence']) { // data not null
          Number.validateJSON(data['GopClosedCadence']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `GopSizeUnits`
        if (data['GopSizeUnits']) { // data not null
          H265GopSizeUnits.validateJSON(data['GopSizeUnits']);
        }
        // validate the optional field `Level`
        if (data['Level']) { // data not null
          H265Level.validateJSON(data['Level']);
        }
        // validate the optional field `LookAheadRateControl`
        if (data['LookAheadRateControl']) { // data not null
          H265LookAheadRateControl.validateJSON(data['LookAheadRateControl']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `MinIInterval`
        if (data['MinIInterval']) { // data not null
          Number.validateJSON(data['MinIInterval']);
        }
        // validate the optional field `ParDenominator`
        if (data['ParDenominator']) { // data not null
          Number.validateJSON(data['ParDenominator']);
        }
        // validate the optional field `ParNumerator`
        if (data['ParNumerator']) { // data not null
          Number.validateJSON(data['ParNumerator']);
        }
        // validate the optional field `Profile`
        if (data['Profile']) { // data not null
          H265Profile.validateJSON(data['Profile']);
        }
        // validate the optional field `QvbrQualityLevel`
        if (data['QvbrQualityLevel']) { // data not null
          Number.validateJSON(data['QvbrQualityLevel']);
        }
        // validate the optional field `RateControlMode`
        if (data['RateControlMode']) { // data not null
          H265RateControlMode.validateJSON(data['RateControlMode']);
        }
        // validate the optional field `ScanType`
        if (data['ScanType']) { // data not null
          H265ScanType.validateJSON(data['ScanType']);
        }
        // validate the optional field `SceneChangeDetect`
        if (data['SceneChangeDetect']) { // data not null
          H265SceneChangeDetect.validateJSON(data['SceneChangeDetect']);
        }
        // validate the optional field `Slices`
        if (data['Slices']) { // data not null
          Number.validateJSON(data['Slices']);
        }
        // validate the optional field `Tier`
        if (data['Tier']) { // data not null
          H265Tier.validateJSON(data['Tier']);
        }
        // validate the optional field `TimecodeInsertion`
        if (data['TimecodeInsertion']) { // data not null
          H265TimecodeInsertionBehavior.validateJSON(data['TimecodeInsertion']);
        }
        // validate the optional field `TimecodeBurninSettings`
        if (data['TimecodeBurninSettings']) { // data not null
          FrameCaptureSettingsTimecodeBurninSettings.validateJSON(data['TimecodeBurninSettings']);
        }

        return true;
    }


}

VideoCodecSettingsH265Settings.RequiredProperties = ["FramerateDenominator", "FramerateNumerator"];

/**
 * @member {module:model/H265AdaptiveQuantization} AdaptiveQuantization
 */
VideoCodecSettingsH265Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
VideoCodecSettingsH265Settings.prototype['AfdSignaling'] = undefined;

/**
 * @member {module:model/H265AlternativeTransferFunction} AlternativeTransferFunction
 */
VideoCodecSettingsH265Settings.prototype['AlternativeTransferFunction'] = undefined;

/**
 * @member {Number} Bitrate
 */
VideoCodecSettingsH265Settings.prototype['Bitrate'] = undefined;

/**
 * @member {Number} BufSize
 */
VideoCodecSettingsH265Settings.prototype['BufSize'] = undefined;

/**
 * @member {module:model/H265ColorMetadata} ColorMetadata
 */
VideoCodecSettingsH265Settings.prototype['ColorMetadata'] = undefined;

/**
 * @member {module:model/H265SettingsColorSpaceSettings} ColorSpaceSettings
 */
VideoCodecSettingsH265Settings.prototype['ColorSpaceSettings'] = undefined;

/**
 * @member {module:model/H265SettingsFilterSettings} FilterSettings
 */
VideoCodecSettingsH265Settings.prototype['FilterSettings'] = undefined;

/**
 * @member {module:model/FixedAfd} FixedAfd
 */
VideoCodecSettingsH265Settings.prototype['FixedAfd'] = undefined;

/**
 * @member {module:model/H265FlickerAq} FlickerAq
 */
VideoCodecSettingsH265Settings.prototype['FlickerAq'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsH265Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsH265Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {Number} GopClosedCadence
 */
VideoCodecSettingsH265Settings.prototype['GopClosedCadence'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsH265Settings.prototype['GopSize'] = undefined;

/**
 * @member {module:model/H265GopSizeUnits} GopSizeUnits
 */
VideoCodecSettingsH265Settings.prototype['GopSizeUnits'] = undefined;

/**
 * @member {module:model/H265Level} Level
 */
VideoCodecSettingsH265Settings.prototype['Level'] = undefined;

/**
 * @member {module:model/H265LookAheadRateControl} LookAheadRateControl
 */
VideoCodecSettingsH265Settings.prototype['LookAheadRateControl'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
VideoCodecSettingsH265Settings.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} MinIInterval
 */
VideoCodecSettingsH265Settings.prototype['MinIInterval'] = undefined;

/**
 * @member {Number} ParDenominator
 */
VideoCodecSettingsH265Settings.prototype['ParDenominator'] = undefined;

/**
 * @member {Number} ParNumerator
 */
VideoCodecSettingsH265Settings.prototype['ParNumerator'] = undefined;

/**
 * @member {module:model/H265Profile} Profile
 */
VideoCodecSettingsH265Settings.prototype['Profile'] = undefined;

/**
 * @member {Number} QvbrQualityLevel
 */
VideoCodecSettingsH265Settings.prototype['QvbrQualityLevel'] = undefined;

/**
 * @member {module:model/H265RateControlMode} RateControlMode
 */
VideoCodecSettingsH265Settings.prototype['RateControlMode'] = undefined;

/**
 * @member {module:model/H265ScanType} ScanType
 */
VideoCodecSettingsH265Settings.prototype['ScanType'] = undefined;

/**
 * @member {module:model/H265SceneChangeDetect} SceneChangeDetect
 */
VideoCodecSettingsH265Settings.prototype['SceneChangeDetect'] = undefined;

/**
 * @member {Number} Slices
 */
VideoCodecSettingsH265Settings.prototype['Slices'] = undefined;

/**
 * @member {module:model/H265Tier} Tier
 */
VideoCodecSettingsH265Settings.prototype['Tier'] = undefined;

/**
 * @member {module:model/H265TimecodeInsertionBehavior} TimecodeInsertion
 */
VideoCodecSettingsH265Settings.prototype['TimecodeInsertion'] = undefined;

/**
 * @member {module:model/FrameCaptureSettingsTimecodeBurninSettings} TimecodeBurninSettings
 */
VideoCodecSettingsH265Settings.prototype['TimecodeBurninSettings'] = undefined;


// Implement H265Settings interface:
/**
 * @member {module:model/H265AdaptiveQuantization} AdaptiveQuantization
 */
H265Settings.prototype['AdaptiveQuantization'] = undefined;
/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
H265Settings.prototype['AfdSignaling'] = undefined;
/**
 * @member {module:model/H265AlternativeTransferFunction} AlternativeTransferFunction
 */
H265Settings.prototype['AlternativeTransferFunction'] = undefined;
/**
 * @member {Number} Bitrate
 */
H265Settings.prototype['Bitrate'] = undefined;
/**
 * @member {Number} BufSize
 */
H265Settings.prototype['BufSize'] = undefined;
/**
 * @member {module:model/H265ColorMetadata} ColorMetadata
 */
H265Settings.prototype['ColorMetadata'] = undefined;
/**
 * @member {module:model/H265SettingsColorSpaceSettings} ColorSpaceSettings
 */
H265Settings.prototype['ColorSpaceSettings'] = undefined;
/**
 * @member {module:model/H265SettingsFilterSettings} FilterSettings
 */
H265Settings.prototype['FilterSettings'] = undefined;
/**
 * @member {module:model/FixedAfd} FixedAfd
 */
H265Settings.prototype['FixedAfd'] = undefined;
/**
 * @member {module:model/H265FlickerAq} FlickerAq
 */
H265Settings.prototype['FlickerAq'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
H265Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
H265Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {Number} GopClosedCadence
 */
H265Settings.prototype['GopClosedCadence'] = undefined;
/**
 * @member {Number} GopSize
 */
H265Settings.prototype['GopSize'] = undefined;
/**
 * @member {module:model/H265GopSizeUnits} GopSizeUnits
 */
H265Settings.prototype['GopSizeUnits'] = undefined;
/**
 * @member {module:model/H265Level} Level
 */
H265Settings.prototype['Level'] = undefined;
/**
 * @member {module:model/H265LookAheadRateControl} LookAheadRateControl
 */
H265Settings.prototype['LookAheadRateControl'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
H265Settings.prototype['MaxBitrate'] = undefined;
/**
 * @member {Number} MinIInterval
 */
H265Settings.prototype['MinIInterval'] = undefined;
/**
 * @member {Number} ParDenominator
 */
H265Settings.prototype['ParDenominator'] = undefined;
/**
 * @member {Number} ParNumerator
 */
H265Settings.prototype['ParNumerator'] = undefined;
/**
 * @member {module:model/H265Profile} Profile
 */
H265Settings.prototype['Profile'] = undefined;
/**
 * @member {Number} QvbrQualityLevel
 */
H265Settings.prototype['QvbrQualityLevel'] = undefined;
/**
 * @member {module:model/H265RateControlMode} RateControlMode
 */
H265Settings.prototype['RateControlMode'] = undefined;
/**
 * @member {module:model/H265ScanType} ScanType
 */
H265Settings.prototype['ScanType'] = undefined;
/**
 * @member {module:model/H265SceneChangeDetect} SceneChangeDetect
 */
H265Settings.prototype['SceneChangeDetect'] = undefined;
/**
 * @member {Number} Slices
 */
H265Settings.prototype['Slices'] = undefined;
/**
 * @member {module:model/H265Tier} Tier
 */
H265Settings.prototype['Tier'] = undefined;
/**
 * @member {module:model/H265TimecodeInsertionBehavior} TimecodeInsertion
 */
H265Settings.prototype['TimecodeInsertion'] = undefined;
/**
 * @member {module:model/FrameCaptureSettingsTimecodeBurninSettings} TimecodeBurninSettings
 */
H265Settings.prototype['TimecodeBurninSettings'] = undefined;




export default VideoCodecSettingsH265Settings;

