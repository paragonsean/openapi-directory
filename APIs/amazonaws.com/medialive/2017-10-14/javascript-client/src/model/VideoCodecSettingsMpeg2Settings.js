/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AfdSignaling from './AfdSignaling';
import FixedAfd from './FixedAfd';
import FrameCaptureSettingsTimecodeBurninSettings from './FrameCaptureSettingsTimecodeBurninSettings';
import Mpeg2AdaptiveQuantization from './Mpeg2AdaptiveQuantization';
import Mpeg2ColorMetadata from './Mpeg2ColorMetadata';
import Mpeg2ColorSpace from './Mpeg2ColorSpace';
import Mpeg2DisplayRatio from './Mpeg2DisplayRatio';
import Mpeg2GopSizeUnits from './Mpeg2GopSizeUnits';
import Mpeg2ScanType from './Mpeg2ScanType';
import Mpeg2Settings from './Mpeg2Settings';
import Mpeg2SettingsFilterSettings from './Mpeg2SettingsFilterSettings';
import Mpeg2SubGopLength from './Mpeg2SubGopLength';
import Mpeg2TimecodeInsertionBehavior from './Mpeg2TimecodeInsertionBehavior';

/**
 * The VideoCodecSettingsMpeg2Settings model module.
 * @module model/VideoCodecSettingsMpeg2Settings
 * @version 2017-10-14
 */
class VideoCodecSettingsMpeg2Settings {
    /**
     * Constructs a new <code>VideoCodecSettingsMpeg2Settings</code>.
     * @alias module:model/VideoCodecSettingsMpeg2Settings
     * @implements module:model/Mpeg2Settings
     * @param framerateDenominator {Number} 
     * @param framerateNumerator {Number} 
     */
    constructor(framerateDenominator, framerateNumerator) { 
        Mpeg2Settings.initialize(this, framerateDenominator, framerateNumerator);
        VideoCodecSettingsMpeg2Settings.initialize(this, framerateDenominator, framerateNumerator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, framerateDenominator, framerateNumerator) { 
        obj['FramerateDenominator'] = framerateDenominator;
        obj['FramerateNumerator'] = framerateNumerator;
    }

    /**
     * Constructs a <code>VideoCodecSettingsMpeg2Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCodecSettingsMpeg2Settings} obj Optional instance to populate.
     * @return {module:model/VideoCodecSettingsMpeg2Settings} The populated <code>VideoCodecSettingsMpeg2Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCodecSettingsMpeg2Settings();
            Mpeg2Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AdaptiveQuantization')) {
                obj['AdaptiveQuantization'] = ApiClient.convertToType(data['AdaptiveQuantization'], Mpeg2AdaptiveQuantization);
            }
            if (data.hasOwnProperty('AfdSignaling')) {
                obj['AfdSignaling'] = ApiClient.convertToType(data['AfdSignaling'], AfdSignaling);
            }
            if (data.hasOwnProperty('ColorMetadata')) {
                obj['ColorMetadata'] = ApiClient.convertToType(data['ColorMetadata'], Mpeg2ColorMetadata);
            }
            if (data.hasOwnProperty('ColorSpace')) {
                obj['ColorSpace'] = ApiClient.convertToType(data['ColorSpace'], Mpeg2ColorSpace);
            }
            if (data.hasOwnProperty('DisplayAspectRatio')) {
                obj['DisplayAspectRatio'] = ApiClient.convertToType(data['DisplayAspectRatio'], Mpeg2DisplayRatio);
            }
            if (data.hasOwnProperty('FilterSettings')) {
                obj['FilterSettings'] = Mpeg2SettingsFilterSettings.constructFromObject(data['FilterSettings']);
            }
            if (data.hasOwnProperty('FixedAfd')) {
                obj['FixedAfd'] = ApiClient.convertToType(data['FixedAfd'], FixedAfd);
            }
            if (data.hasOwnProperty('FramerateDenominator')) {
                obj['FramerateDenominator'] = ApiClient.convertToType(data['FramerateDenominator'], 'Number');
            }
            if (data.hasOwnProperty('FramerateNumerator')) {
                obj['FramerateNumerator'] = ApiClient.convertToType(data['FramerateNumerator'], 'Number');
            }
            if (data.hasOwnProperty('GopClosedCadence')) {
                obj['GopClosedCadence'] = ApiClient.convertToType(data['GopClosedCadence'], 'Number');
            }
            if (data.hasOwnProperty('GopNumBFrames')) {
                obj['GopNumBFrames'] = ApiClient.convertToType(data['GopNumBFrames'], 'Number');
            }
            if (data.hasOwnProperty('GopSize')) {
                obj['GopSize'] = ApiClient.convertToType(data['GopSize'], 'Number');
            }
            if (data.hasOwnProperty('GopSizeUnits')) {
                obj['GopSizeUnits'] = ApiClient.convertToType(data['GopSizeUnits'], Mpeg2GopSizeUnits);
            }
            if (data.hasOwnProperty('ScanType')) {
                obj['ScanType'] = ApiClient.convertToType(data['ScanType'], Mpeg2ScanType);
            }
            if (data.hasOwnProperty('SubgopLength')) {
                obj['SubgopLength'] = ApiClient.convertToType(data['SubgopLength'], Mpeg2SubGopLength);
            }
            if (data.hasOwnProperty('TimecodeInsertion')) {
                obj['TimecodeInsertion'] = ApiClient.convertToType(data['TimecodeInsertion'], Mpeg2TimecodeInsertionBehavior);
            }
            if (data.hasOwnProperty('TimecodeBurninSettings')) {
                obj['TimecodeBurninSettings'] = FrameCaptureSettingsTimecodeBurninSettings.constructFromObject(data['TimecodeBurninSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCodecSettingsMpeg2Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCodecSettingsMpeg2Settings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoCodecSettingsMpeg2Settings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AdaptiveQuantization`
        if (data['AdaptiveQuantization']) { // data not null
          Mpeg2AdaptiveQuantization.validateJSON(data['AdaptiveQuantization']);
        }
        // validate the optional field `AfdSignaling`
        if (data['AfdSignaling']) { // data not null
          AfdSignaling.validateJSON(data['AfdSignaling']);
        }
        // validate the optional field `ColorMetadata`
        if (data['ColorMetadata']) { // data not null
          Mpeg2ColorMetadata.validateJSON(data['ColorMetadata']);
        }
        // validate the optional field `ColorSpace`
        if (data['ColorSpace']) { // data not null
          Mpeg2ColorSpace.validateJSON(data['ColorSpace']);
        }
        // validate the optional field `DisplayAspectRatio`
        if (data['DisplayAspectRatio']) { // data not null
          Mpeg2DisplayRatio.validateJSON(data['DisplayAspectRatio']);
        }
        // validate the optional field `FilterSettings`
        if (data['FilterSettings']) { // data not null
          Mpeg2SettingsFilterSettings.validateJSON(data['FilterSettings']);
        }
        // validate the optional field `FixedAfd`
        if (data['FixedAfd']) { // data not null
          FixedAfd.validateJSON(data['FixedAfd']);
        }
        // validate the optional field `FramerateDenominator`
        if (data['FramerateDenominator']) { // data not null
          Number.validateJSON(data['FramerateDenominator']);
        }
        // validate the optional field `FramerateNumerator`
        if (data['FramerateNumerator']) { // data not null
          Number.validateJSON(data['FramerateNumerator']);
        }
        // validate the optional field `GopClosedCadence`
        if (data['GopClosedCadence']) { // data not null
          Number.validateJSON(data['GopClosedCadence']);
        }
        // validate the optional field `GopNumBFrames`
        if (data['GopNumBFrames']) { // data not null
          Number.validateJSON(data['GopNumBFrames']);
        }
        // validate the optional field `GopSize`
        if (data['GopSize']) { // data not null
          Number.validateJSON(data['GopSize']);
        }
        // validate the optional field `GopSizeUnits`
        if (data['GopSizeUnits']) { // data not null
          Mpeg2GopSizeUnits.validateJSON(data['GopSizeUnits']);
        }
        // validate the optional field `ScanType`
        if (data['ScanType']) { // data not null
          Mpeg2ScanType.validateJSON(data['ScanType']);
        }
        // validate the optional field `SubgopLength`
        if (data['SubgopLength']) { // data not null
          Mpeg2SubGopLength.validateJSON(data['SubgopLength']);
        }
        // validate the optional field `TimecodeInsertion`
        if (data['TimecodeInsertion']) { // data not null
          Mpeg2TimecodeInsertionBehavior.validateJSON(data['TimecodeInsertion']);
        }
        // validate the optional field `TimecodeBurninSettings`
        if (data['TimecodeBurninSettings']) { // data not null
          FrameCaptureSettingsTimecodeBurninSettings.validateJSON(data['TimecodeBurninSettings']);
        }

        return true;
    }


}

VideoCodecSettingsMpeg2Settings.RequiredProperties = ["FramerateDenominator", "FramerateNumerator"];

/**
 * @member {module:model/Mpeg2AdaptiveQuantization} AdaptiveQuantization
 */
VideoCodecSettingsMpeg2Settings.prototype['AdaptiveQuantization'] = undefined;

/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
VideoCodecSettingsMpeg2Settings.prototype['AfdSignaling'] = undefined;

/**
 * @member {module:model/Mpeg2ColorMetadata} ColorMetadata
 */
VideoCodecSettingsMpeg2Settings.prototype['ColorMetadata'] = undefined;

/**
 * @member {module:model/Mpeg2ColorSpace} ColorSpace
 */
VideoCodecSettingsMpeg2Settings.prototype['ColorSpace'] = undefined;

/**
 * @member {module:model/Mpeg2DisplayRatio} DisplayAspectRatio
 */
VideoCodecSettingsMpeg2Settings.prototype['DisplayAspectRatio'] = undefined;

/**
 * @member {module:model/Mpeg2SettingsFilterSettings} FilterSettings
 */
VideoCodecSettingsMpeg2Settings.prototype['FilterSettings'] = undefined;

/**
 * @member {module:model/FixedAfd} FixedAfd
 */
VideoCodecSettingsMpeg2Settings.prototype['FixedAfd'] = undefined;

/**
 * @member {Number} FramerateDenominator
 */
VideoCodecSettingsMpeg2Settings.prototype['FramerateDenominator'] = undefined;

/**
 * @member {Number} FramerateNumerator
 */
VideoCodecSettingsMpeg2Settings.prototype['FramerateNumerator'] = undefined;

/**
 * @member {Number} GopClosedCadence
 */
VideoCodecSettingsMpeg2Settings.prototype['GopClosedCadence'] = undefined;

/**
 * @member {Number} GopNumBFrames
 */
VideoCodecSettingsMpeg2Settings.prototype['GopNumBFrames'] = undefined;

/**
 * @member {Number} GopSize
 */
VideoCodecSettingsMpeg2Settings.prototype['GopSize'] = undefined;

/**
 * @member {module:model/Mpeg2GopSizeUnits} GopSizeUnits
 */
VideoCodecSettingsMpeg2Settings.prototype['GopSizeUnits'] = undefined;

/**
 * @member {module:model/Mpeg2ScanType} ScanType
 */
VideoCodecSettingsMpeg2Settings.prototype['ScanType'] = undefined;

/**
 * @member {module:model/Mpeg2SubGopLength} SubgopLength
 */
VideoCodecSettingsMpeg2Settings.prototype['SubgopLength'] = undefined;

/**
 * @member {module:model/Mpeg2TimecodeInsertionBehavior} TimecodeInsertion
 */
VideoCodecSettingsMpeg2Settings.prototype['TimecodeInsertion'] = undefined;

/**
 * @member {module:model/FrameCaptureSettingsTimecodeBurninSettings} TimecodeBurninSettings
 */
VideoCodecSettingsMpeg2Settings.prototype['TimecodeBurninSettings'] = undefined;


// Implement Mpeg2Settings interface:
/**
 * @member {module:model/Mpeg2AdaptiveQuantization} AdaptiveQuantization
 */
Mpeg2Settings.prototype['AdaptiveQuantization'] = undefined;
/**
 * @member {module:model/AfdSignaling} AfdSignaling
 */
Mpeg2Settings.prototype['AfdSignaling'] = undefined;
/**
 * @member {module:model/Mpeg2ColorMetadata} ColorMetadata
 */
Mpeg2Settings.prototype['ColorMetadata'] = undefined;
/**
 * @member {module:model/Mpeg2ColorSpace} ColorSpace
 */
Mpeg2Settings.prototype['ColorSpace'] = undefined;
/**
 * @member {module:model/Mpeg2DisplayRatio} DisplayAspectRatio
 */
Mpeg2Settings.prototype['DisplayAspectRatio'] = undefined;
/**
 * @member {module:model/Mpeg2SettingsFilterSettings} FilterSettings
 */
Mpeg2Settings.prototype['FilterSettings'] = undefined;
/**
 * @member {module:model/FixedAfd} FixedAfd
 */
Mpeg2Settings.prototype['FixedAfd'] = undefined;
/**
 * @member {Number} FramerateDenominator
 */
Mpeg2Settings.prototype['FramerateDenominator'] = undefined;
/**
 * @member {Number} FramerateNumerator
 */
Mpeg2Settings.prototype['FramerateNumerator'] = undefined;
/**
 * @member {Number} GopClosedCadence
 */
Mpeg2Settings.prototype['GopClosedCadence'] = undefined;
/**
 * @member {Number} GopNumBFrames
 */
Mpeg2Settings.prototype['GopNumBFrames'] = undefined;
/**
 * @member {Number} GopSize
 */
Mpeg2Settings.prototype['GopSize'] = undefined;
/**
 * @member {module:model/Mpeg2GopSizeUnits} GopSizeUnits
 */
Mpeg2Settings.prototype['GopSizeUnits'] = undefined;
/**
 * @member {module:model/Mpeg2ScanType} ScanType
 */
Mpeg2Settings.prototype['ScanType'] = undefined;
/**
 * @member {module:model/Mpeg2SubGopLength} SubgopLength
 */
Mpeg2Settings.prototype['SubgopLength'] = undefined;
/**
 * @member {module:model/Mpeg2TimecodeInsertionBehavior} TimecodeInsertion
 */
Mpeg2Settings.prototype['TimecodeInsertion'] = undefined;
/**
 * @member {module:model/FrameCaptureSettingsTimecodeBurninSettings} TimecodeBurninSettings
 */
Mpeg2Settings.prototype['TimecodeBurninSettings'] = undefined;




export default VideoCodecSettingsMpeg2Settings;

