/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NielsenConfiguration from './NielsenConfiguration';
import NielsenPcmToId3TaggingState from './NielsenPcmToId3TaggingState';

/**
 * The CreateChannelRequestEncoderSettingsNielsenConfiguration model module.
 * @module model/CreateChannelRequestEncoderSettingsNielsenConfiguration
 * @version 2017-10-14
 */
class CreateChannelRequestEncoderSettingsNielsenConfiguration {
    /**
     * Constructs a new <code>CreateChannelRequestEncoderSettingsNielsenConfiguration</code>.
     * @alias module:model/CreateChannelRequestEncoderSettingsNielsenConfiguration
     * @implements module:model/NielsenConfiguration
     */
    constructor() { 
        NielsenConfiguration.initialize(this);
        CreateChannelRequestEncoderSettingsNielsenConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateChannelRequestEncoderSettingsNielsenConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateChannelRequestEncoderSettingsNielsenConfiguration} obj Optional instance to populate.
     * @return {module:model/CreateChannelRequestEncoderSettingsNielsenConfiguration} The populated <code>CreateChannelRequestEncoderSettingsNielsenConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateChannelRequestEncoderSettingsNielsenConfiguration();
            NielsenConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('DistributorId')) {
                obj['DistributorId'] = ApiClient.convertToType(data['DistributorId'], 'String');
            }
            if (data.hasOwnProperty('NielsenPcmToId3Tagging')) {
                obj['NielsenPcmToId3Tagging'] = ApiClient.convertToType(data['NielsenPcmToId3Tagging'], NielsenPcmToId3TaggingState);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateChannelRequestEncoderSettingsNielsenConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateChannelRequestEncoderSettingsNielsenConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DistributorId`
        if (data['DistributorId']) { // data not null
          String.validateJSON(data['DistributorId']);
        }
        // validate the optional field `NielsenPcmToId3Tagging`
        if (data['NielsenPcmToId3Tagging']) { // data not null
          NielsenPcmToId3TaggingState.validateJSON(data['NielsenPcmToId3Tagging']);
        }

        return true;
    }


}



/**
 * @member {String} DistributorId
 */
CreateChannelRequestEncoderSettingsNielsenConfiguration.prototype['DistributorId'] = undefined;

/**
 * @member {module:model/NielsenPcmToId3TaggingState} NielsenPcmToId3Tagging
 */
CreateChannelRequestEncoderSettingsNielsenConfiguration.prototype['NielsenPcmToId3Tagging'] = undefined;


// Implement NielsenConfiguration interface:
/**
 * @member {String} DistributorId
 */
NielsenConfiguration.prototype['DistributorId'] = undefined;
/**
 * @member {module:model/NielsenPcmToId3TaggingState} NielsenPcmToId3Tagging
 */
NielsenConfiguration.prototype['NielsenPcmToId3Tagging'] = undefined;




export default CreateChannelRequestEncoderSettingsNielsenConfiguration;

