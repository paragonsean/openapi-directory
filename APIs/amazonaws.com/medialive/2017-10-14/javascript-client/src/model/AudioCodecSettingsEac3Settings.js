/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Eac3AttenuationControl from './Eac3AttenuationControl';
import Eac3BitstreamMode from './Eac3BitstreamMode';
import Eac3CodingMode from './Eac3CodingMode';
import Eac3DcFilter from './Eac3DcFilter';
import Eac3DrcLine from './Eac3DrcLine';
import Eac3DrcRf from './Eac3DrcRf';
import Eac3LfeControl from './Eac3LfeControl';
import Eac3LfeFilter from './Eac3LfeFilter';
import Eac3MetadataControl from './Eac3MetadataControl';
import Eac3PassthroughControl from './Eac3PassthroughControl';
import Eac3PhaseControl from './Eac3PhaseControl';
import Eac3Settings from './Eac3Settings';
import Eac3StereoDownmix from './Eac3StereoDownmix';
import Eac3SurroundExMode from './Eac3SurroundExMode';
import Eac3SurroundMode from './Eac3SurroundMode';

/**
 * The AudioCodecSettingsEac3Settings model module.
 * @module model/AudioCodecSettingsEac3Settings
 * @version 2017-10-14
 */
class AudioCodecSettingsEac3Settings {
    /**
     * Constructs a new <code>AudioCodecSettingsEac3Settings</code>.
     * @alias module:model/AudioCodecSettingsEac3Settings
     * @implements module:model/Eac3Settings
     */
    constructor() { 
        Eac3Settings.initialize(this);
        AudioCodecSettingsEac3Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioCodecSettingsEac3Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioCodecSettingsEac3Settings} obj Optional instance to populate.
     * @return {module:model/AudioCodecSettingsEac3Settings} The populated <code>AudioCodecSettingsEac3Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioCodecSettingsEac3Settings();
            Eac3Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('AttenuationControl')) {
                obj['AttenuationControl'] = ApiClient.convertToType(data['AttenuationControl'], Eac3AttenuationControl);
            }
            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('BitstreamMode')) {
                obj['BitstreamMode'] = ApiClient.convertToType(data['BitstreamMode'], Eac3BitstreamMode);
            }
            if (data.hasOwnProperty('CodingMode')) {
                obj['CodingMode'] = ApiClient.convertToType(data['CodingMode'], Eac3CodingMode);
            }
            if (data.hasOwnProperty('DcFilter')) {
                obj['DcFilter'] = ApiClient.convertToType(data['DcFilter'], Eac3DcFilter);
            }
            if (data.hasOwnProperty('Dialnorm')) {
                obj['Dialnorm'] = ApiClient.convertToType(data['Dialnorm'], 'Number');
            }
            if (data.hasOwnProperty('DrcLine')) {
                obj['DrcLine'] = ApiClient.convertToType(data['DrcLine'], Eac3DrcLine);
            }
            if (data.hasOwnProperty('DrcRf')) {
                obj['DrcRf'] = ApiClient.convertToType(data['DrcRf'], Eac3DrcRf);
            }
            if (data.hasOwnProperty('LfeControl')) {
                obj['LfeControl'] = ApiClient.convertToType(data['LfeControl'], Eac3LfeControl);
            }
            if (data.hasOwnProperty('LfeFilter')) {
                obj['LfeFilter'] = ApiClient.convertToType(data['LfeFilter'], Eac3LfeFilter);
            }
            if (data.hasOwnProperty('LoRoCenterMixLevel')) {
                obj['LoRoCenterMixLevel'] = ApiClient.convertToType(data['LoRoCenterMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('LoRoSurroundMixLevel')) {
                obj['LoRoSurroundMixLevel'] = ApiClient.convertToType(data['LoRoSurroundMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('LtRtCenterMixLevel')) {
                obj['LtRtCenterMixLevel'] = ApiClient.convertToType(data['LtRtCenterMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('LtRtSurroundMixLevel')) {
                obj['LtRtSurroundMixLevel'] = ApiClient.convertToType(data['LtRtSurroundMixLevel'], 'Number');
            }
            if (data.hasOwnProperty('MetadataControl')) {
                obj['MetadataControl'] = ApiClient.convertToType(data['MetadataControl'], Eac3MetadataControl);
            }
            if (data.hasOwnProperty('PassthroughControl')) {
                obj['PassthroughControl'] = ApiClient.convertToType(data['PassthroughControl'], Eac3PassthroughControl);
            }
            if (data.hasOwnProperty('PhaseControl')) {
                obj['PhaseControl'] = ApiClient.convertToType(data['PhaseControl'], Eac3PhaseControl);
            }
            if (data.hasOwnProperty('StereoDownmix')) {
                obj['StereoDownmix'] = ApiClient.convertToType(data['StereoDownmix'], Eac3StereoDownmix);
            }
            if (data.hasOwnProperty('SurroundExMode')) {
                obj['SurroundExMode'] = ApiClient.convertToType(data['SurroundExMode'], Eac3SurroundExMode);
            }
            if (data.hasOwnProperty('SurroundMode')) {
                obj['SurroundMode'] = ApiClient.convertToType(data['SurroundMode'], Eac3SurroundMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioCodecSettingsEac3Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioCodecSettingsEac3Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AttenuationControl`
        if (data['AttenuationControl']) { // data not null
          Eac3AttenuationControl.validateJSON(data['AttenuationControl']);
        }
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `BitstreamMode`
        if (data['BitstreamMode']) { // data not null
          Eac3BitstreamMode.validateJSON(data['BitstreamMode']);
        }
        // validate the optional field `CodingMode`
        if (data['CodingMode']) { // data not null
          Eac3CodingMode.validateJSON(data['CodingMode']);
        }
        // validate the optional field `DcFilter`
        if (data['DcFilter']) { // data not null
          Eac3DcFilter.validateJSON(data['DcFilter']);
        }
        // validate the optional field `Dialnorm`
        if (data['Dialnorm']) { // data not null
          Number.validateJSON(data['Dialnorm']);
        }
        // validate the optional field `DrcLine`
        if (data['DrcLine']) { // data not null
          Eac3DrcLine.validateJSON(data['DrcLine']);
        }
        // validate the optional field `DrcRf`
        if (data['DrcRf']) { // data not null
          Eac3DrcRf.validateJSON(data['DrcRf']);
        }
        // validate the optional field `LfeControl`
        if (data['LfeControl']) { // data not null
          Eac3LfeControl.validateJSON(data['LfeControl']);
        }
        // validate the optional field `LfeFilter`
        if (data['LfeFilter']) { // data not null
          Eac3LfeFilter.validateJSON(data['LfeFilter']);
        }
        // validate the optional field `LoRoCenterMixLevel`
        if (data['LoRoCenterMixLevel']) { // data not null
          Number.validateJSON(data['LoRoCenterMixLevel']);
        }
        // validate the optional field `LoRoSurroundMixLevel`
        if (data['LoRoSurroundMixLevel']) { // data not null
          Number.validateJSON(data['LoRoSurroundMixLevel']);
        }
        // validate the optional field `LtRtCenterMixLevel`
        if (data['LtRtCenterMixLevel']) { // data not null
          Number.validateJSON(data['LtRtCenterMixLevel']);
        }
        // validate the optional field `LtRtSurroundMixLevel`
        if (data['LtRtSurroundMixLevel']) { // data not null
          Number.validateJSON(data['LtRtSurroundMixLevel']);
        }
        // validate the optional field `MetadataControl`
        if (data['MetadataControl']) { // data not null
          Eac3MetadataControl.validateJSON(data['MetadataControl']);
        }
        // validate the optional field `PassthroughControl`
        if (data['PassthroughControl']) { // data not null
          Eac3PassthroughControl.validateJSON(data['PassthroughControl']);
        }
        // validate the optional field `PhaseControl`
        if (data['PhaseControl']) { // data not null
          Eac3PhaseControl.validateJSON(data['PhaseControl']);
        }
        // validate the optional field `StereoDownmix`
        if (data['StereoDownmix']) { // data not null
          Eac3StereoDownmix.validateJSON(data['StereoDownmix']);
        }
        // validate the optional field `SurroundExMode`
        if (data['SurroundExMode']) { // data not null
          Eac3SurroundExMode.validateJSON(data['SurroundExMode']);
        }
        // validate the optional field `SurroundMode`
        if (data['SurroundMode']) { // data not null
          Eac3SurroundMode.validateJSON(data['SurroundMode']);
        }

        return true;
    }


}



/**
 * @member {module:model/Eac3AttenuationControl} AttenuationControl
 */
AudioCodecSettingsEac3Settings.prototype['AttenuationControl'] = undefined;

/**
 * @member {Number} Bitrate
 */
AudioCodecSettingsEac3Settings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/Eac3BitstreamMode} BitstreamMode
 */
AudioCodecSettingsEac3Settings.prototype['BitstreamMode'] = undefined;

/**
 * @member {module:model/Eac3CodingMode} CodingMode
 */
AudioCodecSettingsEac3Settings.prototype['CodingMode'] = undefined;

/**
 * @member {module:model/Eac3DcFilter} DcFilter
 */
AudioCodecSettingsEac3Settings.prototype['DcFilter'] = undefined;

/**
 * @member {Number} Dialnorm
 */
AudioCodecSettingsEac3Settings.prototype['Dialnorm'] = undefined;

/**
 * @member {module:model/Eac3DrcLine} DrcLine
 */
AudioCodecSettingsEac3Settings.prototype['DrcLine'] = undefined;

/**
 * @member {module:model/Eac3DrcRf} DrcRf
 */
AudioCodecSettingsEac3Settings.prototype['DrcRf'] = undefined;

/**
 * @member {module:model/Eac3LfeControl} LfeControl
 */
AudioCodecSettingsEac3Settings.prototype['LfeControl'] = undefined;

/**
 * @member {module:model/Eac3LfeFilter} LfeFilter
 */
AudioCodecSettingsEac3Settings.prototype['LfeFilter'] = undefined;

/**
 * @member {Number} LoRoCenterMixLevel
 */
AudioCodecSettingsEac3Settings.prototype['LoRoCenterMixLevel'] = undefined;

/**
 * @member {Number} LoRoSurroundMixLevel
 */
AudioCodecSettingsEac3Settings.prototype['LoRoSurroundMixLevel'] = undefined;

/**
 * @member {Number} LtRtCenterMixLevel
 */
AudioCodecSettingsEac3Settings.prototype['LtRtCenterMixLevel'] = undefined;

/**
 * @member {Number} LtRtSurroundMixLevel
 */
AudioCodecSettingsEac3Settings.prototype['LtRtSurroundMixLevel'] = undefined;

/**
 * @member {module:model/Eac3MetadataControl} MetadataControl
 */
AudioCodecSettingsEac3Settings.prototype['MetadataControl'] = undefined;

/**
 * @member {module:model/Eac3PassthroughControl} PassthroughControl
 */
AudioCodecSettingsEac3Settings.prototype['PassthroughControl'] = undefined;

/**
 * @member {module:model/Eac3PhaseControl} PhaseControl
 */
AudioCodecSettingsEac3Settings.prototype['PhaseControl'] = undefined;

/**
 * @member {module:model/Eac3StereoDownmix} StereoDownmix
 */
AudioCodecSettingsEac3Settings.prototype['StereoDownmix'] = undefined;

/**
 * @member {module:model/Eac3SurroundExMode} SurroundExMode
 */
AudioCodecSettingsEac3Settings.prototype['SurroundExMode'] = undefined;

/**
 * @member {module:model/Eac3SurroundMode} SurroundMode
 */
AudioCodecSettingsEac3Settings.prototype['SurroundMode'] = undefined;


// Implement Eac3Settings interface:
/**
 * @member {module:model/Eac3AttenuationControl} AttenuationControl
 */
Eac3Settings.prototype['AttenuationControl'] = undefined;
/**
 * @member {Number} Bitrate
 */
Eac3Settings.prototype['Bitrate'] = undefined;
/**
 * @member {module:model/Eac3BitstreamMode} BitstreamMode
 */
Eac3Settings.prototype['BitstreamMode'] = undefined;
/**
 * @member {module:model/Eac3CodingMode} CodingMode
 */
Eac3Settings.prototype['CodingMode'] = undefined;
/**
 * @member {module:model/Eac3DcFilter} DcFilter
 */
Eac3Settings.prototype['DcFilter'] = undefined;
/**
 * @member {Number} Dialnorm
 */
Eac3Settings.prototype['Dialnorm'] = undefined;
/**
 * @member {module:model/Eac3DrcLine} DrcLine
 */
Eac3Settings.prototype['DrcLine'] = undefined;
/**
 * @member {module:model/Eac3DrcRf} DrcRf
 */
Eac3Settings.prototype['DrcRf'] = undefined;
/**
 * @member {module:model/Eac3LfeControl} LfeControl
 */
Eac3Settings.prototype['LfeControl'] = undefined;
/**
 * @member {module:model/Eac3LfeFilter} LfeFilter
 */
Eac3Settings.prototype['LfeFilter'] = undefined;
/**
 * @member {Number} LoRoCenterMixLevel
 */
Eac3Settings.prototype['LoRoCenterMixLevel'] = undefined;
/**
 * @member {Number} LoRoSurroundMixLevel
 */
Eac3Settings.prototype['LoRoSurroundMixLevel'] = undefined;
/**
 * @member {Number} LtRtCenterMixLevel
 */
Eac3Settings.prototype['LtRtCenterMixLevel'] = undefined;
/**
 * @member {Number} LtRtSurroundMixLevel
 */
Eac3Settings.prototype['LtRtSurroundMixLevel'] = undefined;
/**
 * @member {module:model/Eac3MetadataControl} MetadataControl
 */
Eac3Settings.prototype['MetadataControl'] = undefined;
/**
 * @member {module:model/Eac3PassthroughControl} PassthroughControl
 */
Eac3Settings.prototype['PassthroughControl'] = undefined;
/**
 * @member {module:model/Eac3PhaseControl} PhaseControl
 */
Eac3Settings.prototype['PhaseControl'] = undefined;
/**
 * @member {module:model/Eac3StereoDownmix} StereoDownmix
 */
Eac3Settings.prototype['StereoDownmix'] = undefined;
/**
 * @member {module:model/Eac3SurroundExMode} SurroundExMode
 */
Eac3Settings.prototype['SurroundExMode'] = undefined;
/**
 * @member {module:model/Eac3SurroundMode} SurroundMode
 */
Eac3Settings.prototype['SurroundMode'] = undefined;




export default AudioCodecSettingsEac3Settings;

