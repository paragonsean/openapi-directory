/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputDeviceIpScheme from './InputDeviceIpScheme';

/**
 * The InputDeviceNetworkSettings model module.
 * @module model/InputDeviceNetworkSettings
 * @version 2017-10-14
 */
class InputDeviceNetworkSettings {
    /**
     * Constructs a new <code>InputDeviceNetworkSettings</code>.
     * The network settings for the input device.
     * @alias module:model/InputDeviceNetworkSettings
     */
    constructor() { 
        
        InputDeviceNetworkSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputDeviceNetworkSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputDeviceNetworkSettings} obj Optional instance to populate.
     * @return {module:model/InputDeviceNetworkSettings} The populated <code>InputDeviceNetworkSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputDeviceNetworkSettings();

            if (data.hasOwnProperty('DnsAddresses')) {
                obj['DnsAddresses'] = ApiClient.convertToType(data['DnsAddresses'], Array);
            }
            if (data.hasOwnProperty('Gateway')) {
                obj['Gateway'] = ApiClient.convertToType(data['Gateway'], 'String');
            }
            if (data.hasOwnProperty('IpAddress')) {
                obj['IpAddress'] = ApiClient.convertToType(data['IpAddress'], 'String');
            }
            if (data.hasOwnProperty('IpScheme')) {
                obj['IpScheme'] = ApiClient.convertToType(data['IpScheme'], InputDeviceIpScheme);
            }
            if (data.hasOwnProperty('SubnetMask')) {
                obj['SubnetMask'] = ApiClient.convertToType(data['SubnetMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputDeviceNetworkSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputDeviceNetworkSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DnsAddresses`
        if (data['DnsAddresses']) { // data not null
          Array.validateJSON(data['DnsAddresses']);
        }
        // validate the optional field `Gateway`
        if (data['Gateway']) { // data not null
          String.validateJSON(data['Gateway']);
        }
        // validate the optional field `IpAddress`
        if (data['IpAddress']) { // data not null
          String.validateJSON(data['IpAddress']);
        }
        // validate the optional field `IpScheme`
        if (data['IpScheme']) { // data not null
          InputDeviceIpScheme.validateJSON(data['IpScheme']);
        }
        // validate the optional field `SubnetMask`
        if (data['SubnetMask']) { // data not null
          String.validateJSON(data['SubnetMask']);
        }

        return true;
    }


}



/**
 * @member {Array} DnsAddresses
 */
InputDeviceNetworkSettings.prototype['DnsAddresses'] = undefined;

/**
 * @member {String} Gateway
 */
InputDeviceNetworkSettings.prototype['Gateway'] = undefined;

/**
 * @member {String} IpAddress
 */
InputDeviceNetworkSettings.prototype['IpAddress'] = undefined;

/**
 * @member {module:model/InputDeviceIpScheme} IpScheme
 */
InputDeviceNetworkSettings.prototype['IpScheme'] = undefined;

/**
 * @member {String} SubnetMask
 */
InputDeviceNetworkSettings.prototype['SubnetMask'] = undefined;






export default InputDeviceNetworkSettings;

