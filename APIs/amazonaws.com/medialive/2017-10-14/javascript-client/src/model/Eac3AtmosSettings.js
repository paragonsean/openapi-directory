/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Eac3AtmosCodingMode from './Eac3AtmosCodingMode';
import Eac3AtmosDrcLine from './Eac3AtmosDrcLine';
import Eac3AtmosDrcRf from './Eac3AtmosDrcRf';

/**
 * The Eac3AtmosSettings model module.
 * @module model/Eac3AtmosSettings
 * @version 2017-10-14
 */
class Eac3AtmosSettings {
    /**
     * Constructs a new <code>Eac3AtmosSettings</code>.
     * Eac3 Atmos Settings
     * @alias module:model/Eac3AtmosSettings
     */
    constructor() { 
        
        Eac3AtmosSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Eac3AtmosSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Eac3AtmosSettings} obj Optional instance to populate.
     * @return {module:model/Eac3AtmosSettings} The populated <code>Eac3AtmosSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Eac3AtmosSettings();

            if (data.hasOwnProperty('Bitrate')) {
                obj['Bitrate'] = ApiClient.convertToType(data['Bitrate'], 'Number');
            }
            if (data.hasOwnProperty('CodingMode')) {
                obj['CodingMode'] = ApiClient.convertToType(data['CodingMode'], Eac3AtmosCodingMode);
            }
            if (data.hasOwnProperty('Dialnorm')) {
                obj['Dialnorm'] = ApiClient.convertToType(data['Dialnorm'], 'Number');
            }
            if (data.hasOwnProperty('DrcLine')) {
                obj['DrcLine'] = ApiClient.convertToType(data['DrcLine'], Eac3AtmosDrcLine);
            }
            if (data.hasOwnProperty('DrcRf')) {
                obj['DrcRf'] = ApiClient.convertToType(data['DrcRf'], Eac3AtmosDrcRf);
            }
            if (data.hasOwnProperty('HeightTrim')) {
                obj['HeightTrim'] = ApiClient.convertToType(data['HeightTrim'], 'Number');
            }
            if (data.hasOwnProperty('SurroundTrim')) {
                obj['SurroundTrim'] = ApiClient.convertToType(data['SurroundTrim'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Eac3AtmosSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Eac3AtmosSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Bitrate`
        if (data['Bitrate']) { // data not null
          Number.validateJSON(data['Bitrate']);
        }
        // validate the optional field `CodingMode`
        if (data['CodingMode']) { // data not null
          Eac3AtmosCodingMode.validateJSON(data['CodingMode']);
        }
        // validate the optional field `Dialnorm`
        if (data['Dialnorm']) { // data not null
          Number.validateJSON(data['Dialnorm']);
        }
        // validate the optional field `DrcLine`
        if (data['DrcLine']) { // data not null
          Eac3AtmosDrcLine.validateJSON(data['DrcLine']);
        }
        // validate the optional field `DrcRf`
        if (data['DrcRf']) { // data not null
          Eac3AtmosDrcRf.validateJSON(data['DrcRf']);
        }
        // validate the optional field `HeightTrim`
        if (data['HeightTrim']) { // data not null
          Number.validateJSON(data['HeightTrim']);
        }
        // validate the optional field `SurroundTrim`
        if (data['SurroundTrim']) { // data not null
          Number.validateJSON(data['SurroundTrim']);
        }

        return true;
    }


}



/**
 * @member {Number} Bitrate
 */
Eac3AtmosSettings.prototype['Bitrate'] = undefined;

/**
 * @member {module:model/Eac3AtmosCodingMode} CodingMode
 */
Eac3AtmosSettings.prototype['CodingMode'] = undefined;

/**
 * @member {Number} Dialnorm
 */
Eac3AtmosSettings.prototype['Dialnorm'] = undefined;

/**
 * @member {module:model/Eac3AtmosDrcLine} DrcLine
 */
Eac3AtmosSettings.prototype['DrcLine'] = undefined;

/**
 * @member {module:model/Eac3AtmosDrcRf} DrcRf
 */
Eac3AtmosSettings.prototype['DrcRf'] = undefined;

/**
 * @member {Number} HeightTrim
 */
Eac3AtmosSettings.prototype['HeightTrim'] = undefined;

/**
 * @member {Number} SurroundTrim
 */
Eac3AtmosSettings.prototype['SurroundTrim'] = undefined;






export default Eac3AtmosSettings;

