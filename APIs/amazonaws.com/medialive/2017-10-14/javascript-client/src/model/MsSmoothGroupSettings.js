/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputLossActionForMsSmoothOut from './InputLossActionForMsSmoothOut';
import MsSmoothGroupSettingsDestination from './MsSmoothGroupSettingsDestination';
import SmoothGroupAudioOnlyTimecodeControl from './SmoothGroupAudioOnlyTimecodeControl';
import SmoothGroupCertificateMode from './SmoothGroupCertificateMode';
import SmoothGroupEventIdMode from './SmoothGroupEventIdMode';
import SmoothGroupEventStopBehavior from './SmoothGroupEventStopBehavior';
import SmoothGroupSegmentationMode from './SmoothGroupSegmentationMode';
import SmoothGroupSparseTrackType from './SmoothGroupSparseTrackType';
import SmoothGroupStreamManifestBehavior from './SmoothGroupStreamManifestBehavior';
import SmoothGroupTimestampOffsetMode from './SmoothGroupTimestampOffsetMode';

/**
 * The MsSmoothGroupSettings model module.
 * @module model/MsSmoothGroupSettings
 * @version 2017-10-14
 */
class MsSmoothGroupSettings {
    /**
     * Constructs a new <code>MsSmoothGroupSettings</code>.
     * Ms Smooth Group Settings
     * @alias module:model/MsSmoothGroupSettings
     * @param destination {module:model/MsSmoothGroupSettingsDestination} 
     */
    constructor(destination) { 
        
        MsSmoothGroupSettings.initialize(this, destination);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination) { 
        obj['Destination'] = destination;
    }

    /**
     * Constructs a <code>MsSmoothGroupSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MsSmoothGroupSettings} obj Optional instance to populate.
     * @return {module:model/MsSmoothGroupSettings} The populated <code>MsSmoothGroupSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MsSmoothGroupSettings();

            if (data.hasOwnProperty('AcquisitionPointId')) {
                obj['AcquisitionPointId'] = ApiClient.convertToType(data['AcquisitionPointId'], 'String');
            }
            if (data.hasOwnProperty('AudioOnlyTimecodeControl')) {
                obj['AudioOnlyTimecodeControl'] = ApiClient.convertToType(data['AudioOnlyTimecodeControl'], SmoothGroupAudioOnlyTimecodeControl);
            }
            if (data.hasOwnProperty('CertificateMode')) {
                obj['CertificateMode'] = ApiClient.convertToType(data['CertificateMode'], SmoothGroupCertificateMode);
            }
            if (data.hasOwnProperty('ConnectionRetryInterval')) {
                obj['ConnectionRetryInterval'] = ApiClient.convertToType(data['ConnectionRetryInterval'], 'Number');
            }
            if (data.hasOwnProperty('Destination')) {
                obj['Destination'] = MsSmoothGroupSettingsDestination.constructFromObject(data['Destination']);
            }
            if (data.hasOwnProperty('EventId')) {
                obj['EventId'] = ApiClient.convertToType(data['EventId'], 'String');
            }
            if (data.hasOwnProperty('EventIdMode')) {
                obj['EventIdMode'] = ApiClient.convertToType(data['EventIdMode'], SmoothGroupEventIdMode);
            }
            if (data.hasOwnProperty('EventStopBehavior')) {
                obj['EventStopBehavior'] = ApiClient.convertToType(data['EventStopBehavior'], SmoothGroupEventStopBehavior);
            }
            if (data.hasOwnProperty('FilecacheDuration')) {
                obj['FilecacheDuration'] = ApiClient.convertToType(data['FilecacheDuration'], 'Number');
            }
            if (data.hasOwnProperty('FragmentLength')) {
                obj['FragmentLength'] = ApiClient.convertToType(data['FragmentLength'], 'Number');
            }
            if (data.hasOwnProperty('InputLossAction')) {
                obj['InputLossAction'] = ApiClient.convertToType(data['InputLossAction'], InputLossActionForMsSmoothOut);
            }
            if (data.hasOwnProperty('NumRetries')) {
                obj['NumRetries'] = ApiClient.convertToType(data['NumRetries'], 'Number');
            }
            if (data.hasOwnProperty('RestartDelay')) {
                obj['RestartDelay'] = ApiClient.convertToType(data['RestartDelay'], 'Number');
            }
            if (data.hasOwnProperty('SegmentationMode')) {
                obj['SegmentationMode'] = ApiClient.convertToType(data['SegmentationMode'], SmoothGroupSegmentationMode);
            }
            if (data.hasOwnProperty('SendDelayMs')) {
                obj['SendDelayMs'] = ApiClient.convertToType(data['SendDelayMs'], 'Number');
            }
            if (data.hasOwnProperty('SparseTrackType')) {
                obj['SparseTrackType'] = ApiClient.convertToType(data['SparseTrackType'], SmoothGroupSparseTrackType);
            }
            if (data.hasOwnProperty('StreamManifestBehavior')) {
                obj['StreamManifestBehavior'] = ApiClient.convertToType(data['StreamManifestBehavior'], SmoothGroupStreamManifestBehavior);
            }
            if (data.hasOwnProperty('TimestampOffset')) {
                obj['TimestampOffset'] = ApiClient.convertToType(data['TimestampOffset'], 'String');
            }
            if (data.hasOwnProperty('TimestampOffsetMode')) {
                obj['TimestampOffsetMode'] = ApiClient.convertToType(data['TimestampOffsetMode'], SmoothGroupTimestampOffsetMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MsSmoothGroupSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MsSmoothGroupSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MsSmoothGroupSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AcquisitionPointId`
        if (data['AcquisitionPointId']) { // data not null
          String.validateJSON(data['AcquisitionPointId']);
        }
        // validate the optional field `AudioOnlyTimecodeControl`
        if (data['AudioOnlyTimecodeControl']) { // data not null
          SmoothGroupAudioOnlyTimecodeControl.validateJSON(data['AudioOnlyTimecodeControl']);
        }
        // validate the optional field `CertificateMode`
        if (data['CertificateMode']) { // data not null
          SmoothGroupCertificateMode.validateJSON(data['CertificateMode']);
        }
        // validate the optional field `ConnectionRetryInterval`
        if (data['ConnectionRetryInterval']) { // data not null
          Number.validateJSON(data['ConnectionRetryInterval']);
        }
        // validate the optional field `Destination`
        if (data['Destination']) { // data not null
          MsSmoothGroupSettingsDestination.validateJSON(data['Destination']);
        }
        // validate the optional field `EventId`
        if (data['EventId']) { // data not null
          String.validateJSON(data['EventId']);
        }
        // validate the optional field `EventIdMode`
        if (data['EventIdMode']) { // data not null
          SmoothGroupEventIdMode.validateJSON(data['EventIdMode']);
        }
        // validate the optional field `EventStopBehavior`
        if (data['EventStopBehavior']) { // data not null
          SmoothGroupEventStopBehavior.validateJSON(data['EventStopBehavior']);
        }
        // validate the optional field `FilecacheDuration`
        if (data['FilecacheDuration']) { // data not null
          Number.validateJSON(data['FilecacheDuration']);
        }
        // validate the optional field `FragmentLength`
        if (data['FragmentLength']) { // data not null
          Number.validateJSON(data['FragmentLength']);
        }
        // validate the optional field `InputLossAction`
        if (data['InputLossAction']) { // data not null
          InputLossActionForMsSmoothOut.validateJSON(data['InputLossAction']);
        }
        // validate the optional field `NumRetries`
        if (data['NumRetries']) { // data not null
          Number.validateJSON(data['NumRetries']);
        }
        // validate the optional field `RestartDelay`
        if (data['RestartDelay']) { // data not null
          Number.validateJSON(data['RestartDelay']);
        }
        // validate the optional field `SegmentationMode`
        if (data['SegmentationMode']) { // data not null
          SmoothGroupSegmentationMode.validateJSON(data['SegmentationMode']);
        }
        // validate the optional field `SendDelayMs`
        if (data['SendDelayMs']) { // data not null
          Number.validateJSON(data['SendDelayMs']);
        }
        // validate the optional field `SparseTrackType`
        if (data['SparseTrackType']) { // data not null
          SmoothGroupSparseTrackType.validateJSON(data['SparseTrackType']);
        }
        // validate the optional field `StreamManifestBehavior`
        if (data['StreamManifestBehavior']) { // data not null
          SmoothGroupStreamManifestBehavior.validateJSON(data['StreamManifestBehavior']);
        }
        // validate the optional field `TimestampOffset`
        if (data['TimestampOffset']) { // data not null
          String.validateJSON(data['TimestampOffset']);
        }
        // validate the optional field `TimestampOffsetMode`
        if (data['TimestampOffsetMode']) { // data not null
          SmoothGroupTimestampOffsetMode.validateJSON(data['TimestampOffsetMode']);
        }

        return true;
    }


}

MsSmoothGroupSettings.RequiredProperties = ["Destination"];

/**
 * @member {String} AcquisitionPointId
 */
MsSmoothGroupSettings.prototype['AcquisitionPointId'] = undefined;

/**
 * @member {module:model/SmoothGroupAudioOnlyTimecodeControl} AudioOnlyTimecodeControl
 */
MsSmoothGroupSettings.prototype['AudioOnlyTimecodeControl'] = undefined;

/**
 * @member {module:model/SmoothGroupCertificateMode} CertificateMode
 */
MsSmoothGroupSettings.prototype['CertificateMode'] = undefined;

/**
 * @member {Number} ConnectionRetryInterval
 */
MsSmoothGroupSettings.prototype['ConnectionRetryInterval'] = undefined;

/**
 * @member {module:model/MsSmoothGroupSettingsDestination} Destination
 */
MsSmoothGroupSettings.prototype['Destination'] = undefined;

/**
 * @member {String} EventId
 */
MsSmoothGroupSettings.prototype['EventId'] = undefined;

/**
 * @member {module:model/SmoothGroupEventIdMode} EventIdMode
 */
MsSmoothGroupSettings.prototype['EventIdMode'] = undefined;

/**
 * @member {module:model/SmoothGroupEventStopBehavior} EventStopBehavior
 */
MsSmoothGroupSettings.prototype['EventStopBehavior'] = undefined;

/**
 * @member {Number} FilecacheDuration
 */
MsSmoothGroupSettings.prototype['FilecacheDuration'] = undefined;

/**
 * @member {Number} FragmentLength
 */
MsSmoothGroupSettings.prototype['FragmentLength'] = undefined;

/**
 * @member {module:model/InputLossActionForMsSmoothOut} InputLossAction
 */
MsSmoothGroupSettings.prototype['InputLossAction'] = undefined;

/**
 * @member {Number} NumRetries
 */
MsSmoothGroupSettings.prototype['NumRetries'] = undefined;

/**
 * @member {Number} RestartDelay
 */
MsSmoothGroupSettings.prototype['RestartDelay'] = undefined;

/**
 * @member {module:model/SmoothGroupSegmentationMode} SegmentationMode
 */
MsSmoothGroupSettings.prototype['SegmentationMode'] = undefined;

/**
 * @member {Number} SendDelayMs
 */
MsSmoothGroupSettings.prototype['SendDelayMs'] = undefined;

/**
 * @member {module:model/SmoothGroupSparseTrackType} SparseTrackType
 */
MsSmoothGroupSettings.prototype['SparseTrackType'] = undefined;

/**
 * @member {module:model/SmoothGroupStreamManifestBehavior} StreamManifestBehavior
 */
MsSmoothGroupSettings.prototype['StreamManifestBehavior'] = undefined;

/**
 * @member {String} TimestampOffset
 */
MsSmoothGroupSettings.prototype['TimestampOffset'] = undefined;

/**
 * @member {module:model/SmoothGroupTimestampOffsetMode} TimestampOffsetMode
 */
MsSmoothGroupSettings.prototype['TimestampOffsetMode'] = undefined;






export default MsSmoothGroupSettings;

