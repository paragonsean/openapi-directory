/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputLocation from './InputLocation';

/**
 * The BurnInDestinationSettingsFont model module.
 * @module model/BurnInDestinationSettingsFont
 * @version 2017-10-14
 */
class BurnInDestinationSettingsFont {
    /**
     * Constructs a new <code>BurnInDestinationSettingsFont</code>.
     * @alias module:model/BurnInDestinationSettingsFont
     * @implements module:model/InputLocation
     * @param uri {String} 
     */
    constructor(uri) { 
        InputLocation.initialize(this, uri);
        BurnInDestinationSettingsFont.initialize(this, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uri) { 
        obj['Uri'] = uri;
    }

    /**
     * Constructs a <code>BurnInDestinationSettingsFont</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BurnInDestinationSettingsFont} obj Optional instance to populate.
     * @return {module:model/BurnInDestinationSettingsFont} The populated <code>BurnInDestinationSettingsFont</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BurnInDestinationSettingsFont();
            InputLocation.constructFromObject(data, obj);

            if (data.hasOwnProperty('PasswordParam')) {
                obj['PasswordParam'] = ApiClient.convertToType(data['PasswordParam'], 'String');
            }
            if (data.hasOwnProperty('Uri')) {
                obj['Uri'] = ApiClient.convertToType(data['Uri'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BurnInDestinationSettingsFont</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BurnInDestinationSettingsFont</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BurnInDestinationSettingsFont.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `PasswordParam`
        if (data['PasswordParam']) { // data not null
          String.validateJSON(data['PasswordParam']);
        }
        // validate the optional field `Uri`
        if (data['Uri']) { // data not null
          String.validateJSON(data['Uri']);
        }
        // validate the optional field `Username`
        if (data['Username']) { // data not null
          String.validateJSON(data['Username']);
        }

        return true;
    }


}

BurnInDestinationSettingsFont.RequiredProperties = ["Uri"];

/**
 * @member {String} PasswordParam
 */
BurnInDestinationSettingsFont.prototype['PasswordParam'] = undefined;

/**
 * @member {String} Uri
 */
BurnInDestinationSettingsFont.prototype['Uri'] = undefined;

/**
 * @member {String} Username
 */
BurnInDestinationSettingsFont.prototype['Username'] = undefined;


// Implement InputLocation interface:
/**
 * @member {String} PasswordParam
 */
InputLocation.prototype['PasswordParam'] = undefined;
/**
 * @member {String} Uri
 */
InputLocation.prototype['Uri'] = undefined;
/**
 * @member {String} Username
 */
InputLocation.prototype['Username'] = undefined;




export default BurnInDestinationSettingsFont;

