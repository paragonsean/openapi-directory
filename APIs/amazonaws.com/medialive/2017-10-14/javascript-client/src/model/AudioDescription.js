/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioDescriptionAudioNormalizationSettings from './AudioDescriptionAudioNormalizationSettings';
import AudioDescriptionAudioTypeControl from './AudioDescriptionAudioTypeControl';
import AudioDescriptionAudioWatermarkingSettings from './AudioDescriptionAudioWatermarkingSettings';
import AudioDescriptionCodecSettings from './AudioDescriptionCodecSettings';
import AudioDescriptionLanguageCodeControl from './AudioDescriptionLanguageCodeControl';
import AudioDescriptionRemixSettings from './AudioDescriptionRemixSettings';
import AudioType from './AudioType';

/**
 * The AudioDescription model module.
 * @module model/AudioDescription
 * @version 2017-10-14
 */
class AudioDescription {
    /**
     * Constructs a new <code>AudioDescription</code>.
     * Audio Description
     * @alias module:model/AudioDescription
     * @param audioSelectorName {String} 
     * @param name {String} 
     */
    constructor(audioSelectorName, name) { 
        
        AudioDescription.initialize(this, audioSelectorName, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioSelectorName, name) { 
        obj['AudioSelectorName'] = audioSelectorName;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>AudioDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioDescription} obj Optional instance to populate.
     * @return {module:model/AudioDescription} The populated <code>AudioDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioDescription();

            if (data.hasOwnProperty('AudioNormalizationSettings')) {
                obj['AudioNormalizationSettings'] = AudioDescriptionAudioNormalizationSettings.constructFromObject(data['AudioNormalizationSettings']);
            }
            if (data.hasOwnProperty('AudioSelectorName')) {
                obj['AudioSelectorName'] = ApiClient.convertToType(data['AudioSelectorName'], 'String');
            }
            if (data.hasOwnProperty('AudioType')) {
                obj['AudioType'] = ApiClient.convertToType(data['AudioType'], AudioType);
            }
            if (data.hasOwnProperty('AudioTypeControl')) {
                obj['AudioTypeControl'] = ApiClient.convertToType(data['AudioTypeControl'], AudioDescriptionAudioTypeControl);
            }
            if (data.hasOwnProperty('AudioWatermarkingSettings')) {
                obj['AudioWatermarkingSettings'] = AudioDescriptionAudioWatermarkingSettings.constructFromObject(data['AudioWatermarkingSettings']);
            }
            if (data.hasOwnProperty('CodecSettings')) {
                obj['CodecSettings'] = AudioDescriptionCodecSettings.constructFromObject(data['CodecSettings']);
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], 'String');
            }
            if (data.hasOwnProperty('LanguageCodeControl')) {
                obj['LanguageCodeControl'] = ApiClient.convertToType(data['LanguageCodeControl'], AudioDescriptionLanguageCodeControl);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RemixSettings')) {
                obj['RemixSettings'] = AudioDescriptionRemixSettings.constructFromObject(data['RemixSettings']);
            }
            if (data.hasOwnProperty('StreamName')) {
                obj['StreamName'] = ApiClient.convertToType(data['StreamName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AudioNormalizationSettings`
        if (data['AudioNormalizationSettings']) { // data not null
          AudioDescriptionAudioNormalizationSettings.validateJSON(data['AudioNormalizationSettings']);
        }
        // validate the optional field `AudioSelectorName`
        if (data['AudioSelectorName']) { // data not null
          String.validateJSON(data['AudioSelectorName']);
        }
        // validate the optional field `AudioType`
        if (data['AudioType']) { // data not null
          AudioType.validateJSON(data['AudioType']);
        }
        // validate the optional field `AudioTypeControl`
        if (data['AudioTypeControl']) { // data not null
          AudioDescriptionAudioTypeControl.validateJSON(data['AudioTypeControl']);
        }
        // validate the optional field `AudioWatermarkingSettings`
        if (data['AudioWatermarkingSettings']) { // data not null
          AudioDescriptionAudioWatermarkingSettings.validateJSON(data['AudioWatermarkingSettings']);
        }
        // validate the optional field `CodecSettings`
        if (data['CodecSettings']) { // data not null
          AudioDescriptionCodecSettings.validateJSON(data['CodecSettings']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          String.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `LanguageCodeControl`
        if (data['LanguageCodeControl']) { // data not null
          AudioDescriptionLanguageCodeControl.validateJSON(data['LanguageCodeControl']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `RemixSettings`
        if (data['RemixSettings']) { // data not null
          AudioDescriptionRemixSettings.validateJSON(data['RemixSettings']);
        }
        // validate the optional field `StreamName`
        if (data['StreamName']) { // data not null
          String.validateJSON(data['StreamName']);
        }

        return true;
    }


}

AudioDescription.RequiredProperties = ["AudioSelectorName", "Name"];

/**
 * @member {module:model/AudioDescriptionAudioNormalizationSettings} AudioNormalizationSettings
 */
AudioDescription.prototype['AudioNormalizationSettings'] = undefined;

/**
 * @member {String} AudioSelectorName
 */
AudioDescription.prototype['AudioSelectorName'] = undefined;

/**
 * @member {module:model/AudioType} AudioType
 */
AudioDescription.prototype['AudioType'] = undefined;

/**
 * @member {module:model/AudioDescriptionAudioTypeControl} AudioTypeControl
 */
AudioDescription.prototype['AudioTypeControl'] = undefined;

/**
 * @member {module:model/AudioDescriptionAudioWatermarkingSettings} AudioWatermarkingSettings
 */
AudioDescription.prototype['AudioWatermarkingSettings'] = undefined;

/**
 * @member {module:model/AudioDescriptionCodecSettings} CodecSettings
 */
AudioDescription.prototype['CodecSettings'] = undefined;

/**
 * @member {String} LanguageCode
 */
AudioDescription.prototype['LanguageCode'] = undefined;

/**
 * @member {module:model/AudioDescriptionLanguageCodeControl} LanguageCodeControl
 */
AudioDescription.prototype['LanguageCodeControl'] = undefined;

/**
 * @member {String} Name
 */
AudioDescription.prototype['Name'] = undefined;

/**
 * @member {module:model/AudioDescriptionRemixSettings} RemixSettings
 */
AudioDescription.prototype['RemixSettings'] = undefined;

/**
 * @member {String} StreamName
 */
AudioDescription.prototype['StreamName'] = undefined;






export default AudioDescription;

