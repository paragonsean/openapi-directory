/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchDeleteRequest from '../model/BatchDeleteRequest';
import BatchDeleteResponse from '../model/BatchDeleteResponse';
import BatchStartRequest from '../model/BatchStartRequest';
import BatchStartResponse from '../model/BatchStartResponse';
import BatchStopResponse from '../model/BatchStopResponse';
import BatchUpdateScheduleRequest from '../model/BatchUpdateScheduleRequest';
import BatchUpdateScheduleResponse from '../model/BatchUpdateScheduleResponse';
import ClaimDeviceRequest from '../model/ClaimDeviceRequest';
import CreateChannelRequest from '../model/CreateChannelRequest';
import CreateChannelResponse from '../model/CreateChannelResponse';
import CreateInputRequest from '../model/CreateInputRequest';
import CreateInputResponse from '../model/CreateInputResponse';
import CreateInputSecurityGroupRequest from '../model/CreateInputSecurityGroupRequest';
import CreateInputSecurityGroupResponse from '../model/CreateInputSecurityGroupResponse';
import CreateMultiplexProgramRequest from '../model/CreateMultiplexProgramRequest';
import CreateMultiplexProgramResponse from '../model/CreateMultiplexProgramResponse';
import CreateMultiplexRequest from '../model/CreateMultiplexRequest';
import CreateMultiplexResponse from '../model/CreateMultiplexResponse';
import CreatePartnerInputRequest from '../model/CreatePartnerInputRequest';
import CreatePartnerInputResponse from '../model/CreatePartnerInputResponse';
import CreateTagsRequest from '../model/CreateTagsRequest';
import DeleteChannelResponse from '../model/DeleteChannelResponse';
import DeleteMultiplexProgramResponse from '../model/DeleteMultiplexProgramResponse';
import DeleteMultiplexResponse from '../model/DeleteMultiplexResponse';
import DeleteReservationResponse from '../model/DeleteReservationResponse';
import DescribeAccountConfigurationResponse from '../model/DescribeAccountConfigurationResponse';
import DescribeChannelResponse from '../model/DescribeChannelResponse';
import DescribeInputDeviceResponse from '../model/DescribeInputDeviceResponse';
import DescribeInputDeviceThumbnailResponse from '../model/DescribeInputDeviceThumbnailResponse';
import DescribeInputResponse from '../model/DescribeInputResponse';
import DescribeInputSecurityGroupResponse from '../model/DescribeInputSecurityGroupResponse';
import DescribeMultiplexProgramResponse from '../model/DescribeMultiplexProgramResponse';
import DescribeMultiplexResponse from '../model/DescribeMultiplexResponse';
import DescribeOfferingResponse from '../model/DescribeOfferingResponse';
import DescribeReservationResponse from '../model/DescribeReservationResponse';
import DescribeScheduleResponse from '../model/DescribeScheduleResponse';
import DescribeThumbnailsResponse from '../model/DescribeThumbnailsResponse';
import ListChannelsResponse from '../model/ListChannelsResponse';
import ListInputDeviceTransfersResponse from '../model/ListInputDeviceTransfersResponse';
import ListInputDevicesResponse from '../model/ListInputDevicesResponse';
import ListInputSecurityGroupsResponse from '../model/ListInputSecurityGroupsResponse';
import ListInputsResponse from '../model/ListInputsResponse';
import ListMultiplexProgramsResponse from '../model/ListMultiplexProgramsResponse';
import ListMultiplexesResponse from '../model/ListMultiplexesResponse';
import ListOfferingsResponse from '../model/ListOfferingsResponse';
import ListReservationsResponse from '../model/ListReservationsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PurchaseOfferingRequest from '../model/PurchaseOfferingRequest';
import PurchaseOfferingResponse from '../model/PurchaseOfferingResponse';
import RebootInputDeviceRequest from '../model/RebootInputDeviceRequest';
import StartChannelResponse from '../model/StartChannelResponse';
import StartMultiplexResponse from '../model/StartMultiplexResponse';
import StopChannelResponse from '../model/StopChannelResponse';
import StopMultiplexResponse from '../model/StopMultiplexResponse';
import TransferInputDeviceRequest from '../model/TransferInputDeviceRequest';
import UpdateAccountConfigurationRequest from '../model/UpdateAccountConfigurationRequest';
import UpdateAccountConfigurationResponse from '../model/UpdateAccountConfigurationResponse';
import UpdateChannelClassRequest from '../model/UpdateChannelClassRequest';
import UpdateChannelClassResponse from '../model/UpdateChannelClassResponse';
import UpdateChannelRequest from '../model/UpdateChannelRequest';
import UpdateChannelResponse from '../model/UpdateChannelResponse';
import UpdateInputDeviceRequest from '../model/UpdateInputDeviceRequest';
import UpdateInputDeviceResponse from '../model/UpdateInputDeviceResponse';
import UpdateInputRequest from '../model/UpdateInputRequest';
import UpdateInputResponse from '../model/UpdateInputResponse';
import UpdateInputSecurityGroupResponse from '../model/UpdateInputSecurityGroupResponse';
import UpdateMultiplexProgramRequest from '../model/UpdateMultiplexProgramRequest';
import UpdateMultiplexProgramResponse from '../model/UpdateMultiplexProgramResponse';
import UpdateMultiplexRequest from '../model/UpdateMultiplexRequest';
import UpdateMultiplexResponse from '../model/UpdateMultiplexResponse';
import UpdateReservationRequest from '../model/UpdateReservationRequest';
import UpdateReservationResponse from '../model/UpdateReservationResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-10-14
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptInputDeviceTransfer operation.
     * @callback module:api/DefaultApi~acceptInputDeviceTransferCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept an incoming input device transfer. The ownership of the device will transfer to your AWS account.
     * @param {String} inputDeviceId The unique ID of the input device to accept. For example, hd-123456789abcdef.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptInputDeviceTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acceptInputDeviceTransfer(inputDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling acceptInputDeviceTransfer");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDelete operation.
     * @callback module:api/DefaultApi~batchDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts delete of resources.
     * @param {module:model/BatchDeleteRequest} batchDeleteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteResponse}
     */
    batchDelete(batchDeleteRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteRequest;
      // verify the required parameter 'batchDeleteRequest' is set
      if (batchDeleteRequest === undefined || batchDeleteRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteRequest' when calling batchDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteResponse;
      return this.apiClient.callApi(
        '/prod/batch/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchStart operation.
     * @callback module:api/DefaultApi~batchStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchStartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts existing resources
     * @param {module:model/BatchStartRequest} batchStartRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchStartResponse}
     */
    batchStart(batchStartRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchStartRequest;
      // verify the required parameter 'batchStartRequest' is set
      if (batchStartRequest === undefined || batchStartRequest === null) {
        throw new Error("Missing the required parameter 'batchStartRequest' when calling batchStart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchStartResponse;
      return this.apiClient.callApi(
        '/prod/batch/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchStop operation.
     * @callback module:api/DefaultApi~batchStopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchStopResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops running resources
     * @param {module:model/BatchStartRequest} batchStartRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchStopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchStopResponse}
     */
    batchStop(batchStartRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchStartRequest;
      // verify the required parameter 'batchStartRequest' is set
      if (batchStartRequest === undefined || batchStartRequest === null) {
        throw new Error("Missing the required parameter 'batchStartRequest' when calling batchStop");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchStopResponse;
      return this.apiClient.callApi(
        '/prod/batch/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateSchedule operation.
     * @callback module:api/DefaultApi~batchUpdateScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a channel schedule
     * @param {String} channelId Id of the channel whose schedule is being updated.
     * @param {module:model/BatchUpdateScheduleRequest} batchUpdateScheduleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateScheduleResponse}
     */
    batchUpdateSchedule(channelId, batchUpdateScheduleRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateScheduleRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling batchUpdateSchedule");
      }
      // verify the required parameter 'batchUpdateScheduleRequest' is set
      if (batchUpdateScheduleRequest === undefined || batchUpdateScheduleRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateScheduleRequest' when calling batchUpdateSchedule");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateScheduleResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/schedule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelInputDeviceTransfer operation.
     * @callback module:api/DefaultApi~cancelInputDeviceTransferCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an input device transfer that you have requested.
     * @param {String} inputDeviceId The unique ID of the input device to cancel. For example, hd-123456789abcdef.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelInputDeviceTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelInputDeviceTransfer(inputDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling cancelInputDeviceTransfer");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the claimDevice operation.
     * @callback module:api/DefaultApi~claimDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a request to claim an AWS Elemental device that you have purchased from a third-party vendor. After the request succeeds, you will own the device.
     * @param {module:model/ClaimDeviceRequest} claimDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~claimDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    claimDevice(claimDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = claimDeviceRequest;
      // verify the required parameter 'claimDeviceRequest' is set
      if (claimDeviceRequest === undefined || claimDeviceRequest === null) {
        throw new Error("Missing the required parameter 'claimDeviceRequest' when calling claimDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/claimDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannel operation.
     * @callback module:api/DefaultApi~createChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new channel
     * @param {module:model/CreateChannelRequest} createChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelResponse}
     */
    createChannel(createChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChannelRequest;
      // verify the required parameter 'createChannelRequest' is set
      if (createChannelRequest === undefined || createChannelRequest === null) {
        throw new Error("Missing the required parameter 'createChannelRequest' when calling createChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelResponse;
      return this.apiClient.callApi(
        '/prod/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInput operation.
     * @callback module:api/DefaultApi~createInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an input
     * @param {module:model/CreateInputRequest} createInputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInputResponse}
     */
    createInput(createInputRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInputRequest;
      // verify the required parameter 'createInputRequest' is set
      if (createInputRequest === undefined || createInputRequest === null) {
        throw new Error("Missing the required parameter 'createInputRequest' when calling createInput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInputResponse;
      return this.apiClient.callApi(
        '/prod/inputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInputSecurityGroup operation.
     * @callback module:api/DefaultApi~createInputSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInputSecurityGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Input Security Group
     * @param {module:model/CreateInputSecurityGroupRequest} createInputSecurityGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInputSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInputSecurityGroupResponse}
     */
    createInputSecurityGroup(createInputSecurityGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInputSecurityGroupRequest;
      // verify the required parameter 'createInputSecurityGroupRequest' is set
      if (createInputSecurityGroupRequest === undefined || createInputSecurityGroupRequest === null) {
        throw new Error("Missing the required parameter 'createInputSecurityGroupRequest' when calling createInputSecurityGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInputSecurityGroupResponse;
      return this.apiClient.callApi(
        '/prod/inputSecurityGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMultiplex operation.
     * @callback module:api/DefaultApi~createMultiplexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMultiplexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new multiplex.
     * @param {module:model/CreateMultiplexRequest} createMultiplexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMultiplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMultiplexResponse}
     */
    createMultiplex(createMultiplexRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMultiplexRequest;
      // verify the required parameter 'createMultiplexRequest' is set
      if (createMultiplexRequest === undefined || createMultiplexRequest === null) {
        throw new Error("Missing the required parameter 'createMultiplexRequest' when calling createMultiplex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMultiplexResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMultiplexProgram operation.
     * @callback module:api/DefaultApi~createMultiplexProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMultiplexProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new program in the multiplex.
     * @param {String} multiplexId ID of the multiplex where the program is to be created.
     * @param {module:model/CreateMultiplexProgramRequest} createMultiplexProgramRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMultiplexProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMultiplexProgramResponse}
     */
    createMultiplexProgram(multiplexId, createMultiplexProgramRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMultiplexProgramRequest;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling createMultiplexProgram");
      }
      // verify the required parameter 'createMultiplexProgramRequest' is set
      if (createMultiplexProgramRequest === undefined || createMultiplexProgramRequest === null) {
        throw new Error("Missing the required parameter 'createMultiplexProgramRequest' when calling createMultiplexProgram");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMultiplexProgramResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/programs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPartnerInput operation.
     * @callback module:api/DefaultApi~createPartnerInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePartnerInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a partner input
     * @param {String} inputId Unique ID of the input.
     * @param {module:model/CreatePartnerInputRequest} createPartnerInputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPartnerInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePartnerInputResponse}
     */
    createPartnerInput(inputId, createPartnerInputRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPartnerInputRequest;
      // verify the required parameter 'inputId' is set
      if (inputId === undefined || inputId === null) {
        throw new Error("Missing the required parameter 'inputId' when calling createPartnerInput");
      }
      // verify the required parameter 'createPartnerInputRequest' is set
      if (createPartnerInputRequest === undefined || createPartnerInputRequest === null) {
        throw new Error("Missing the required parameter 'createPartnerInputRequest' when calling createPartnerInput");
      }

      let pathParams = {
        'inputId': inputId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePartnerInputResponse;
      return this.apiClient.callApi(
        '/prod/inputs/{inputId}/partners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTags operation.
     * @callback module:api/DefaultApi~createTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tags for a resource
     * @param {String} resourceArn 
     * @param {module:model/CreateTagsRequest} createTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTags(resourceArn, createTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTagsRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling createTags");
      }
      // verify the required parameter 'createTagsRequest' is set
      if (createTagsRequest === undefined || createTagsRequest === null) {
        throw new Error("Missing the required parameter 'createTagsRequest' when calling createTags");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/prod/tags/{resource-arn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/DefaultApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts deletion of channel. The associated outputs are also deleted.
     * @param {String} channelId Unique ID of the channel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteChannelResponse}
     */
    deleteChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteChannel");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteChannelResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInput operation.
     * @callback module:api/DefaultApi~deleteInputCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the input end point
     * @param {String} inputId Unique ID of the input
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInput(inputId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputId' is set
      if (inputId === undefined || inputId === null) {
        throw new Error("Missing the required parameter 'inputId' when calling deleteInput");
      }

      let pathParams = {
        'inputId': inputId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputs/{inputId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInputSecurityGroup operation.
     * @callback module:api/DefaultApi~deleteInputSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Input Security Group
     * @param {String} inputSecurityGroupId The Input Security Group to delete
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInputSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInputSecurityGroup(inputSecurityGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputSecurityGroupId' is set
      if (inputSecurityGroupId === undefined || inputSecurityGroupId === null) {
        throw new Error("Missing the required parameter 'inputSecurityGroupId' when calling deleteInputSecurityGroup");
      }

      let pathParams = {
        'inputSecurityGroupId': inputSecurityGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputSecurityGroups/{inputSecurityGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMultiplex operation.
     * @callback module:api/DefaultApi~deleteMultiplexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMultiplexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a multiplex. The multiplex must be idle.
     * @param {String} multiplexId The ID of the multiplex.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMultiplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMultiplexResponse}
     */
    deleteMultiplex(multiplexId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling deleteMultiplex");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteMultiplexResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMultiplexProgram operation.
     * @callback module:api/DefaultApi~deleteMultiplexProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMultiplexProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a program from a multiplex.
     * @param {String} multiplexId The ID of the multiplex that the program belongs to.
     * @param {String} programName The multiplex program name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMultiplexProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMultiplexProgramResponse}
     */
    deleteMultiplexProgram(multiplexId, programName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling deleteMultiplexProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling deleteMultiplexProgram");
      }

      let pathParams = {
        'multiplexId': multiplexId,
        'programName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteMultiplexProgramResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/programs/{programName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReservation operation.
     * @callback module:api/DefaultApi~deleteReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an expired reservation.
     * @param {String} reservationId Unique reservation ID, e.g. '1234567'
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteReservationResponse}
     */
    deleteReservation(reservationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling deleteReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteReservationResponse;
      return this.apiClient.callApi(
        '/prod/reservations/{reservationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSchedule operation.
     * @callback module:api/DefaultApi~deleteScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all schedule actions on a channel.
     * @param {String} channelId Id of the channel whose schedule is being deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSchedule(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteSchedule");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/schedule', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTags operation.
     * @callback module:api/DefaultApi~deleteTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags for a resource
     * @param {String} resourceArn 
     * @param {Array.<String>} tagKeys An array of tag keys to delete
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTags(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling deleteTags");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling deleteTags");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/prod/tags/{resource-arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccountConfiguration operation.
     * @callback module:api/DefaultApi~describeAccountConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account configuration
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountConfigurationResponse}
     */
    describeAccountConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAccountConfigurationResponse;
      return this.apiClient.callApi(
        '/prod/accountConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeChannel operation.
     * @callback module:api/DefaultApi~describeChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a channel
     * @param {String} channelId channel ID
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeChannelResponse}
     */
    describeChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling describeChannel");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeChannelResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInput operation.
     * @callback module:api/DefaultApi~describeInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces details about an input
     * @param {String} inputId Unique ID of the input
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInputResponse}
     */
    describeInput(inputId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputId' is set
      if (inputId === undefined || inputId === null) {
        throw new Error("Missing the required parameter 'inputId' when calling describeInput");
      }

      let pathParams = {
        'inputId': inputId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInputResponse;
      return this.apiClient.callApi(
        '/prod/inputs/{inputId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInputDevice operation.
     * @callback module:api/DefaultApi~describeInputDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInputDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details for the input device
     * @param {String} inputDeviceId The unique ID of this input device. For example, hd-123456789abcdef.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInputDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInputDeviceResponse}
     */
    describeInputDevice(inputDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling describeInputDevice");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInputDeviceResponse;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInputDeviceThumbnail operation.
     * @callback module:api/DefaultApi~describeInputDeviceThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInputDeviceThumbnailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest thumbnail data for the input device.
     * @param {String} inputDeviceId The unique ID of this input device. For example, hd-123456789abcdef.
     * @param {module:model/String} accept The HTTP Accept header. Indicates the requested type for the thumbnail.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInputDeviceThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInputDeviceThumbnailResponse}
     */
    describeInputDeviceThumbnail(inputDeviceId, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling describeInputDeviceThumbnail");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling describeInputDeviceThumbnail");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'accept': accept
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInputDeviceThumbnailResponse;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/thumbnailData#accept', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInputSecurityGroup operation.
     * @callback module:api/DefaultApi~describeInputSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInputSecurityGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces a summary of an Input Security Group
     * @param {String} inputSecurityGroupId The id of the Input Security Group to describe
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInputSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInputSecurityGroupResponse}
     */
    describeInputSecurityGroup(inputSecurityGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputSecurityGroupId' is set
      if (inputSecurityGroupId === undefined || inputSecurityGroupId === null) {
        throw new Error("Missing the required parameter 'inputSecurityGroupId' when calling describeInputSecurityGroup");
      }

      let pathParams = {
        'inputSecurityGroupId': inputSecurityGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInputSecurityGroupResponse;
      return this.apiClient.callApi(
        '/prod/inputSecurityGroups/{inputSecurityGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMultiplex operation.
     * @callback module:api/DefaultApi~describeMultiplexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMultiplexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a multiplex.
     * @param {String} multiplexId The ID of the multiplex.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMultiplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMultiplexResponse}
     */
    describeMultiplex(multiplexId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling describeMultiplex");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeMultiplexResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMultiplexProgram operation.
     * @callback module:api/DefaultApi~describeMultiplexProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMultiplexProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details for a program in a multiplex.
     * @param {String} multiplexId The ID of the multiplex that the program belongs to.
     * @param {String} programName The name of the program.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMultiplexProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMultiplexProgramResponse}
     */
    describeMultiplexProgram(multiplexId, programName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling describeMultiplexProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling describeMultiplexProgram");
      }

      let pathParams = {
        'multiplexId': multiplexId,
        'programName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeMultiplexProgramResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/programs/{programName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOffering operation.
     * @callback module:api/DefaultApi~describeOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for an offering.
     * @param {String} offeringId Unique offering ID, e.g. '87654321'
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOfferingResponse}
     */
    describeOffering(offeringId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling describeOffering");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeOfferingResponse;
      return this.apiClient.callApi(
        '/prod/offerings/{offeringId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservation operation.
     * @callback module:api/DefaultApi~describeReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for a reservation.
     * @param {String} reservationId Unique reservation ID, e.g. '1234567'
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservationResponse}
     */
    describeReservation(reservationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling describeReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReservationResponse;
      return this.apiClient.callApi(
        '/prod/reservations/{reservationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSchedule operation.
     * @callback module:api/DefaultApi~describeScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a channel schedule
     * @param {String} channelId Id of the channel whose schedule is being updated.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~describeScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeScheduleResponse}
     */
    describeSchedule(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling describeSchedule");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeScheduleResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeThumbnails operation.
     * @callback module:api/DefaultApi~describeThumbnailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeThumbnailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe the latest thumbnails data.
     * @param {String} channelId Unique ID of the channel
     * @param {String} pipelineId Pipeline ID (\"0\" or \"1\")
     * @param {String} thumbnailType thumbnail type
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeThumbnailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeThumbnailsResponse}
     */
    describeThumbnails(channelId, pipelineId, thumbnailType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling describeThumbnails");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling describeThumbnails");
      }
      // verify the required parameter 'thumbnailType' is set
      if (thumbnailType === undefined || thumbnailType === null) {
        throw new Error("Missing the required parameter 'thumbnailType' when calling describeThumbnails");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'pipelineId': pipelineId,
        'thumbnailType': thumbnailType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeThumbnailsResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/thumbnails#pipelineId&thumbnailType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannels operation.
     * @callback module:api/DefaultApi~listChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces list of channels that have been created
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelsResponse}
     */
    listChannels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelsResponse;
      return this.apiClient.callApi(
        '/prod/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputDeviceTransfers operation.
     * @callback module:api/DefaultApi~listInputDeviceTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInputDeviceTransfersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.
     * @param {String} transferType 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInputDeviceTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInputDeviceTransfersResponse}
     */
    listInputDeviceTransfers(transferType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transferType' is set
      if (transferType === undefined || transferType === null) {
        throw new Error("Missing the required parameter 'transferType' when calling listInputDeviceTransfers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'transferType': transferType,
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInputDeviceTransfersResponse;
      return this.apiClient.callApi(
        '/prod/inputDeviceTransfers#transferType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputDevices operation.
     * @callback module:api/DefaultApi~listInputDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInputDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List input devices
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInputDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInputDevicesResponse}
     */
    listInputDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInputDevicesResponse;
      return this.apiClient.callApi(
        '/prod/inputDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputSecurityGroups operation.
     * @callback module:api/DefaultApi~listInputSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInputSecurityGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces a list of Input Security Groups for an account
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInputSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInputSecurityGroupsResponse}
     */
    listInputSecurityGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInputSecurityGroupsResponse;
      return this.apiClient.callApi(
        '/prod/inputSecurityGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputs operation.
     * @callback module:api/DefaultApi~listInputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInputsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces list of inputs that have been created
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInputsResponse}
     */
    listInputs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInputsResponse;
      return this.apiClient.callApi(
        '/prod/inputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMultiplexPrograms operation.
     * @callback module:api/DefaultApi~listMultiplexProgramsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMultiplexProgramsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the programs that currently exist for a specific multiplex.
     * @param {String} multiplexId The ID of the multiplex that the programs belong to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of items to return.
     * @param {String} [nextToken] The token to retrieve the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMultiplexProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMultiplexProgramsResponse}
     */
    listMultiplexPrograms(multiplexId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling listMultiplexPrograms");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMultiplexProgramsResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMultiplexes operation.
     * @callback module:api/DefaultApi~listMultiplexesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMultiplexesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of the existing multiplexes.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of items to return.
     * @param {String} [nextToken] The token to retrieve the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMultiplexesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMultiplexesResponse}
     */
    listMultiplexes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMultiplexesResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfferings operation.
     * @callback module:api/DefaultApi~listOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfferingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List offerings available for purchase.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [channelClass] Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE' 
     * @param {String} [channelConfiguration] Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID) 
     * @param {String} [codec] Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
     * @param {String} [duration] Filter by offering duration, e.g. '12'
     * @param {Number} [maxResults] 
     * @param {String} [maximumBitrate] Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS' 
     * @param {String} [maximumFramerate] Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
     * @param {String} [nextToken] 
     * @param {String} [resolution] Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
     * @param {String} [resourceType] Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
     * @param {String} [specialFeature] Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION' 
     * @param {String} [videoQuality] Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM' 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfferingsResponse}
     */
    listOfferings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channelClass': opts['channelClass'],
        'channelConfiguration': opts['channelConfiguration'],
        'codec': opts['codec'],
        'duration': opts['duration'],
        'maxResults': opts['maxResults'],
        'maximumBitrate': opts['maximumBitrate'],
        'maximumFramerate': opts['maximumFramerate'],
        'nextToken': opts['nextToken'],
        'resolution': opts['resolution'],
        'resourceType': opts['resourceType'],
        'specialFeature': opts['specialFeature'],
        'videoQuality': opts['videoQuality'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOfferingsResponse;
      return this.apiClient.callApi(
        '/prod/offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReservations operation.
     * @callback module:api/DefaultApi~listReservationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReservationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List purchased reservations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [channelClass] Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE' 
     * @param {String} [codec] Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
     * @param {Number} [maxResults] 
     * @param {String} [maximumBitrate] Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS' 
     * @param {String} [maximumFramerate] Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
     * @param {String} [nextToken] 
     * @param {String} [resolution] Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
     * @param {String} [resourceType] Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
     * @param {String} [specialFeature] Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION' 
     * @param {String} [videoQuality] Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM' 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listReservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReservationsResponse}
     */
    listReservations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channelClass': opts['channelClass'],
        'codec': opts['codec'],
        'maxResults': opts['maxResults'],
        'maximumBitrate': opts['maximumBitrate'],
        'maximumFramerate': opts['maximumFramerate'],
        'nextToken': opts['nextToken'],
        'resolution': opts['resolution'],
        'resourceType': opts['resourceType'],
        'specialFeature': opts['specialFeature'],
        'videoQuality': opts['videoQuality'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReservationsResponse;
      return this.apiClient.callApi(
        '/prod/reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces list of tags that have been created for a resource
     * @param {String} resourceArn 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/prod/tags/{resource-arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseOffering operation.
     * @callback module:api/DefaultApi~purchaseOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase an offering and create a reservation.
     * @param {String} offeringId Offering to purchase, e.g. '87654321'
     * @param {module:model/PurchaseOfferingRequest} purchaseOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~purchaseOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOfferingResponse}
     */
    purchaseOffering(offeringId, purchaseOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = purchaseOfferingRequest;
      // verify the required parameter 'offeringId' is set
      if (offeringId === undefined || offeringId === null) {
        throw new Error("Missing the required parameter 'offeringId' when calling purchaseOffering");
      }
      // verify the required parameter 'purchaseOfferingRequest' is set
      if (purchaseOfferingRequest === undefined || purchaseOfferingRequest === null) {
        throw new Error("Missing the required parameter 'purchaseOfferingRequest' when calling purchaseOffering");
      }

      let pathParams = {
        'offeringId': offeringId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOfferingResponse;
      return this.apiClient.callApi(
        '/prod/offerings/{offeringId}/purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootInputDevice operation.
     * @callback module:api/DefaultApi~rebootInputDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a reboot command to the specified input device. The device will begin rebooting within a few seconds of sending the command. When the reboot is complete, the device’s connection status will change to connected.
     * @param {String} inputDeviceId The unique ID of the input device to reboot. For example, hd-123456789abcdef.
     * @param {module:model/RebootInputDeviceRequest} rebootInputDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rebootInputDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rebootInputDevice(inputDeviceId, rebootInputDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = rebootInputDeviceRequest;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling rebootInputDevice");
      }
      // verify the required parameter 'rebootInputDeviceRequest' is set
      if (rebootInputDeviceRequest === undefined || rebootInputDeviceRequest === null) {
        throw new Error("Missing the required parameter 'rebootInputDeviceRequest' when calling rebootInputDevice");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectInputDeviceTransfer operation.
     * @callback module:api/DefaultApi~rejectInputDeviceTransferCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject the transfer of the specified input device to your AWS account.
     * @param {String} inputDeviceId The unique ID of the input device to reject. For example, hd-123456789abcdef.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectInputDeviceTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rejectInputDeviceTransfer(inputDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling rejectInputDeviceTransfer");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startChannel operation.
     * @callback module:api/DefaultApi~startChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an existing channel
     * @param {String} channelId A request to start a channel
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartChannelResponse}
     */
    startChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling startChannel");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartChannelResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startInputDeviceMaintenanceWindow operation.
     * @callback module:api/DefaultApi~startInputDeviceMaintenanceWindowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a maintenance window for the specified input device. Starting a maintenance window will give the device up to two hours to install software. If the device was streaming prior to the maintenance, it will resume streaming when the software is fully installed. Devices automatically install updates while they are powered on and their MediaLive channels are stopped. A maintenance window allows you to update a device without having to stop MediaLive channels that use the device. The device must remain powered on and connected to the internet for the duration of the maintenance.
     * @param {String} inputDeviceId The unique ID of the input device to start a maintenance window for. For example, hd-123456789abcdef.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startInputDeviceMaintenanceWindowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startInputDeviceMaintenanceWindow(inputDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling startInputDeviceMaintenanceWindow");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/startInputDeviceMaintenanceWindow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startMultiplex operation.
     * @callback module:api/DefaultApi~startMultiplexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartMultiplexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.
     * @param {String} multiplexId The ID of the multiplex.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startMultiplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartMultiplexResponse}
     */
    startMultiplex(multiplexId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling startMultiplex");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartMultiplexResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopChannel operation.
     * @callback module:api/DefaultApi~stopChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a running channel
     * @param {String} channelId A request to stop a running channel
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopChannelResponse}
     */
    stopChannel(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling stopChannel");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopChannelResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopMultiplex operation.
     * @callback module:api/DefaultApi~stopMultiplexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopMultiplexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a running multiplex. If the multiplex isn't running, this action has no effect.
     * @param {String} multiplexId The ID of the multiplex.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopMultiplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopMultiplexResponse}
     */
    stopMultiplex(multiplexId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling stopMultiplex");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopMultiplexResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferInputDevice operation.
     * @callback module:api/DefaultApi~transferInputDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an input device transfer to another AWS account. After you make the request, the other account must accept or reject the transfer.
     * @param {String} inputDeviceId The unique ID of this input device. For example, hd-123456789abcdef.
     * @param {module:model/TransferInputDeviceRequest} transferInputDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~transferInputDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    transferInputDevice(inputDeviceId, transferInputDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = transferInputDeviceRequest;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling transferInputDevice");
      }
      // verify the required parameter 'transferInputDeviceRequest' is set
      if (transferInputDeviceRequest === undefined || transferInputDeviceRequest === null) {
        throw new Error("Missing the required parameter 'transferInputDeviceRequest' when calling transferInputDevice");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountConfiguration operation.
     * @callback module:api/DefaultApi~updateAccountConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAccountConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update account configuration
     * @param {module:model/UpdateAccountConfigurationRequest} updateAccountConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccountConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAccountConfigurationResponse}
     */
    updateAccountConfiguration(updateAccountConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAccountConfigurationRequest;
      // verify the required parameter 'updateAccountConfigurationRequest' is set
      if (updateAccountConfigurationRequest === undefined || updateAccountConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateAccountConfigurationRequest' when calling updateAccountConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccountConfigurationResponse;
      return this.apiClient.callApi(
        '/prod/accountConfiguration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/DefaultApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a channel.
     * @param {String} channelId channel ID
     * @param {module:model/UpdateChannelRequest} updateChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelResponse}
     */
    updateChannel(channelId, updateChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannel");
      }
      // verify the required parameter 'updateChannelRequest' is set
      if (updateChannelRequest === undefined || updateChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelRequest' when calling updateChannel");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelClass operation.
     * @callback module:api/DefaultApi~updateChannelClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelClassResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the class of the channel.
     * @param {String} channelId Channel Id of the channel whose class should be updated.
     * @param {module:model/UpdateChannelClassRequest} updateChannelClassRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChannelClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelClassResponse}
     */
    updateChannelClass(channelId, updateChannelClassRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChannelClassRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannelClass");
      }
      // verify the required parameter 'updateChannelClassRequest' is set
      if (updateChannelClassRequest === undefined || updateChannelClassRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelClassRequest' when calling updateChannelClass");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelClassResponse;
      return this.apiClient.callApi(
        '/prod/channels/{channelId}/channelClass', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInput operation.
     * @callback module:api/DefaultApi~updateInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an input.
     * @param {String} inputId Unique ID of the input.
     * @param {module:model/UpdateInputRequest} updateInputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInputResponse}
     */
    updateInput(inputId, updateInputRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInputRequest;
      // verify the required parameter 'inputId' is set
      if (inputId === undefined || inputId === null) {
        throw new Error("Missing the required parameter 'inputId' when calling updateInput");
      }
      // verify the required parameter 'updateInputRequest' is set
      if (updateInputRequest === undefined || updateInputRequest === null) {
        throw new Error("Missing the required parameter 'updateInputRequest' when calling updateInput");
      }

      let pathParams = {
        'inputId': inputId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInputResponse;
      return this.apiClient.callApi(
        '/prod/inputs/{inputId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInputDevice operation.
     * @callback module:api/DefaultApi~updateInputDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInputDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the parameters for the input device.
     * @param {String} inputDeviceId The unique ID of the input device. For example, hd-123456789abcdef.
     * @param {module:model/UpdateInputDeviceRequest} updateInputDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInputDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInputDeviceResponse}
     */
    updateInputDevice(inputDeviceId, updateInputDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInputDeviceRequest;
      // verify the required parameter 'inputDeviceId' is set
      if (inputDeviceId === undefined || inputDeviceId === null) {
        throw new Error("Missing the required parameter 'inputDeviceId' when calling updateInputDevice");
      }
      // verify the required parameter 'updateInputDeviceRequest' is set
      if (updateInputDeviceRequest === undefined || updateInputDeviceRequest === null) {
        throw new Error("Missing the required parameter 'updateInputDeviceRequest' when calling updateInputDevice");
      }

      let pathParams = {
        'inputDeviceId': inputDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInputDeviceResponse;
      return this.apiClient.callApi(
        '/prod/inputDevices/{inputDeviceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInputSecurityGroup operation.
     * @callback module:api/DefaultApi~updateInputSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInputSecurityGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Input Security Group's Whilelists.
     * @param {String} inputSecurityGroupId The id of the Input Security Group to update.
     * @param {module:model/CreateInputSecurityGroupRequest} createInputSecurityGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInputSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInputSecurityGroupResponse}
     */
    updateInputSecurityGroup(inputSecurityGroupId, createInputSecurityGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInputSecurityGroupRequest;
      // verify the required parameter 'inputSecurityGroupId' is set
      if (inputSecurityGroupId === undefined || inputSecurityGroupId === null) {
        throw new Error("Missing the required parameter 'inputSecurityGroupId' when calling updateInputSecurityGroup");
      }
      // verify the required parameter 'createInputSecurityGroupRequest' is set
      if (createInputSecurityGroupRequest === undefined || createInputSecurityGroupRequest === null) {
        throw new Error("Missing the required parameter 'createInputSecurityGroupRequest' when calling updateInputSecurityGroup");
      }

      let pathParams = {
        'inputSecurityGroupId': inputSecurityGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInputSecurityGroupResponse;
      return this.apiClient.callApi(
        '/prod/inputSecurityGroups/{inputSecurityGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMultiplex operation.
     * @callback module:api/DefaultApi~updateMultiplexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMultiplexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a multiplex.
     * @param {String} multiplexId ID of the multiplex to update.
     * @param {module:model/UpdateMultiplexRequest} updateMultiplexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMultiplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMultiplexResponse}
     */
    updateMultiplex(multiplexId, updateMultiplexRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMultiplexRequest;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling updateMultiplex");
      }
      // verify the required parameter 'updateMultiplexRequest' is set
      if (updateMultiplexRequest === undefined || updateMultiplexRequest === null) {
        throw new Error("Missing the required parameter 'updateMultiplexRequest' when calling updateMultiplex");
      }

      let pathParams = {
        'multiplexId': multiplexId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMultiplexResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMultiplexProgram operation.
     * @callback module:api/DefaultApi~updateMultiplexProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMultiplexProgramResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a program in a multiplex.
     * @param {String} multiplexId The ID of the multiplex of the program to update.
     * @param {String} programName The name of the program to update.
     * @param {module:model/UpdateMultiplexProgramRequest} updateMultiplexProgramRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMultiplexProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMultiplexProgramResponse}
     */
    updateMultiplexProgram(multiplexId, programName, updateMultiplexProgramRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMultiplexProgramRequest;
      // verify the required parameter 'multiplexId' is set
      if (multiplexId === undefined || multiplexId === null) {
        throw new Error("Missing the required parameter 'multiplexId' when calling updateMultiplexProgram");
      }
      // verify the required parameter 'programName' is set
      if (programName === undefined || programName === null) {
        throw new Error("Missing the required parameter 'programName' when calling updateMultiplexProgram");
      }
      // verify the required parameter 'updateMultiplexProgramRequest' is set
      if (updateMultiplexProgramRequest === undefined || updateMultiplexProgramRequest === null) {
        throw new Error("Missing the required parameter 'updateMultiplexProgramRequest' when calling updateMultiplexProgram");
      }

      let pathParams = {
        'multiplexId': multiplexId,
        'programName': programName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMultiplexProgramResponse;
      return this.apiClient.callApi(
        '/prod/multiplexes/{multiplexId}/programs/{programName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReservation operation.
     * @callback module:api/DefaultApi~updateReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update reservation.
     * @param {String} reservationId Unique reservation ID, e.g. '1234567'
     * @param {module:model/UpdateReservationRequest} updateReservationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateReservationResponse}
     */
    updateReservation(reservationId, updateReservationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateReservationRequest;
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling updateReservation");
      }
      // verify the required parameter 'updateReservationRequest' is set
      if (updateReservationRequest === undefined || updateReservationRequest === null) {
        throw new Error("Missing the required parameter 'updateReservationRequest' when calling updateReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateReservationResponse;
      return this.apiClient.callApi(
        '/prod/reservations/{reservationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
