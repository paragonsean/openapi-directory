/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaLive);
  }
}(this, function(expect, AwsElementalMediaLive) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaLive.DeleteChannelResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeleteChannelResponse', function() {
    it('should create an instance of DeleteChannelResponse', function() {
      // uncomment below and update the code to test DeleteChannelResponse
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be.a(AwsElementalMediaLive.DeleteChannelResponse);
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property cdiInputSpecification (base name: "CdiInputSpecification")', function() {
      // uncomment below and update the code to test the property cdiInputSpecification
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property channelClass (base name: "ChannelClass")', function() {
      // uncomment below and update the code to test the property channelClass
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property destinations (base name: "Destinations")', function() {
      // uncomment below and update the code to test the property destinations
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property egressEndpoints (base name: "EgressEndpoints")', function() {
      // uncomment below and update the code to test the property egressEndpoints
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property encoderSettings (base name: "EncoderSettings")', function() {
      // uncomment below and update the code to test the property encoderSettings
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property inputAttachments (base name: "InputAttachments")', function() {
      // uncomment below and update the code to test the property inputAttachments
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property inputSpecification (base name: "InputSpecification")', function() {
      // uncomment below and update the code to test the property inputSpecification
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property logLevel (base name: "LogLevel")', function() {
      // uncomment below and update the code to test the property logLevel
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property maintenance (base name: "Maintenance")', function() {
      // uncomment below and update the code to test the property maintenance
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property pipelineDetails (base name: "PipelineDetails")', function() {
      // uncomment below and update the code to test the property pipelineDetails
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property pipelinesRunningCount (base name: "PipelinesRunningCount")', function() {
      // uncomment below and update the code to test the property pipelinesRunningCount
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "RoleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property vpc (base name: "Vpc")', function() {
      // uncomment below and update the code to test the property vpc
      //var instance = new AwsElementalMediaLive.DeleteChannelResponse();
      //expect(instance).to.be();
    });

  });

}));
