/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaLive);
  }
}(this, function(expect, AwsElementalMediaLive) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VideoCodecSettingsH265Settings', function() {
    it('should create an instance of VideoCodecSettingsH265Settings', function() {
      // uncomment below and update the code to test VideoCodecSettingsH265Settings
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be.a(AwsElementalMediaLive.VideoCodecSettingsH265Settings);
    });

    it('should have the property adaptiveQuantization (base name: "AdaptiveQuantization")', function() {
      // uncomment below and update the code to test the property adaptiveQuantization
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property afdSignaling (base name: "AfdSignaling")', function() {
      // uncomment below and update the code to test the property afdSignaling
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property alternativeTransferFunction (base name: "AlternativeTransferFunction")', function() {
      // uncomment below and update the code to test the property alternativeTransferFunction
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property bitrate (base name: "Bitrate")', function() {
      // uncomment below and update the code to test the property bitrate
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property bufSize (base name: "BufSize")', function() {
      // uncomment below and update the code to test the property bufSize
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property colorMetadata (base name: "ColorMetadata")', function() {
      // uncomment below and update the code to test the property colorMetadata
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property colorSpaceSettings (base name: "ColorSpaceSettings")', function() {
      // uncomment below and update the code to test the property colorSpaceSettings
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property filterSettings (base name: "FilterSettings")', function() {
      // uncomment below and update the code to test the property filterSettings
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property fixedAfd (base name: "FixedAfd")', function() {
      // uncomment below and update the code to test the property fixedAfd
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property flickerAq (base name: "FlickerAq")', function() {
      // uncomment below and update the code to test the property flickerAq
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property framerateDenominator (base name: "FramerateDenominator")', function() {
      // uncomment below and update the code to test the property framerateDenominator
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property framerateNumerator (base name: "FramerateNumerator")', function() {
      // uncomment below and update the code to test the property framerateNumerator
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopClosedCadence (base name: "GopClosedCadence")', function() {
      // uncomment below and update the code to test the property gopClosedCadence
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopSize (base name: "GopSize")', function() {
      // uncomment below and update the code to test the property gopSize
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property gopSizeUnits (base name: "GopSizeUnits")', function() {
      // uncomment below and update the code to test the property gopSizeUnits
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property level (base name: "Level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property lookAheadRateControl (base name: "LookAheadRateControl")', function() {
      // uncomment below and update the code to test the property lookAheadRateControl
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property maxBitrate (base name: "MaxBitrate")', function() {
      // uncomment below and update the code to test the property maxBitrate
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property minIInterval (base name: "MinIInterval")', function() {
      // uncomment below and update the code to test the property minIInterval
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property parDenominator (base name: "ParDenominator")', function() {
      // uncomment below and update the code to test the property parDenominator
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property parNumerator (base name: "ParNumerator")', function() {
      // uncomment below and update the code to test the property parNumerator
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property profile (base name: "Profile")', function() {
      // uncomment below and update the code to test the property profile
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property qvbrQualityLevel (base name: "QvbrQualityLevel")', function() {
      // uncomment below and update the code to test the property qvbrQualityLevel
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property rateControlMode (base name: "RateControlMode")', function() {
      // uncomment below and update the code to test the property rateControlMode
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property scanType (base name: "ScanType")', function() {
      // uncomment below and update the code to test the property scanType
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property sceneChangeDetect (base name: "SceneChangeDetect")', function() {
      // uncomment below and update the code to test the property sceneChangeDetect
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property slices (base name: "Slices")', function() {
      // uncomment below and update the code to test the property slices
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property tier (base name: "Tier")', function() {
      // uncomment below and update the code to test the property tier
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property timecodeInsertion (base name: "TimecodeInsertion")', function() {
      // uncomment below and update the code to test the property timecodeInsertion
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

    it('should have the property timecodeBurninSettings (base name: "TimecodeBurninSettings")', function() {
      // uncomment below and update the code to test the property timecodeBurninSettings
      //var instance = new AwsElementalMediaLive.VideoCodecSettingsH265Settings();
      //expect(instance).to.be();
    });

  });

}));
