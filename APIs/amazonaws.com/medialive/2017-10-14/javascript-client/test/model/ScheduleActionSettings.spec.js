/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaLive);
  }
}(this, function(expect, AwsElementalMediaLive) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaLive.ScheduleActionSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScheduleActionSettings', function() {
    it('should create an instance of ScheduleActionSettings', function() {
      // uncomment below and update the code to test ScheduleActionSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be.a(AwsElementalMediaLive.ScheduleActionSettings);
    });

    it('should have the property hlsId3SegmentTaggingSettings (base name: "HlsId3SegmentTaggingSettings")', function() {
      // uncomment below and update the code to test the property hlsId3SegmentTaggingSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property hlsTimedMetadataSettings (base name: "HlsTimedMetadataSettings")', function() {
      // uncomment below and update the code to test the property hlsTimedMetadataSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property inputPrepareSettings (base name: "InputPrepareSettings")', function() {
      // uncomment below and update the code to test the property inputPrepareSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property inputSwitchSettings (base name: "InputSwitchSettings")', function() {
      // uncomment below and update the code to test the property inputSwitchSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property motionGraphicsImageActivateSettings (base name: "MotionGraphicsImageActivateSettings")', function() {
      // uncomment below and update the code to test the property motionGraphicsImageActivateSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property motionGraphicsImageDeactivateSettings (base name: "MotionGraphicsImageDeactivateSettings")', function() {
      // uncomment below and update the code to test the property motionGraphicsImageDeactivateSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property pauseStateSettings (base name: "PauseStateSettings")', function() {
      // uncomment below and update the code to test the property pauseStateSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property scte35InputSettings (base name: "Scte35InputSettings")', function() {
      // uncomment below and update the code to test the property scte35InputSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property scte35ReturnToNetworkSettings (base name: "Scte35ReturnToNetworkSettings")', function() {
      // uncomment below and update the code to test the property scte35ReturnToNetworkSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property scte35SpliceInsertSettings (base name: "Scte35SpliceInsertSettings")', function() {
      // uncomment below and update the code to test the property scte35SpliceInsertSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property scte35TimeSignalSettings (base name: "Scte35TimeSignalSettings")', function() {
      // uncomment below and update the code to test the property scte35TimeSignalSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property staticImageActivateSettings (base name: "StaticImageActivateSettings")', function() {
      // uncomment below and update the code to test the property staticImageActivateSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

    it('should have the property staticImageDeactivateSettings (base name: "StaticImageDeactivateSettings")', function() {
      // uncomment below and update the code to test the property staticImageDeactivateSettings
      //var instance = new AwsElementalMediaLive.ScheduleActionSettings();
      //expect(instance).to.be();
    });

  });

}));
