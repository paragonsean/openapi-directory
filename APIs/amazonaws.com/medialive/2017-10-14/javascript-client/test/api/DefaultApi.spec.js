/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaLive);
  }
}(this, function(expect, AwsElementalMediaLive) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaLive.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acceptInputDeviceTransfer', function() {
      it('should call acceptInputDeviceTransfer successfully', function(done) {
        //uncomment below and update the code to test acceptInputDeviceTransfer
        //instance.acceptInputDeviceTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDelete', function() {
      it('should call batchDelete successfully', function(done) {
        //uncomment below and update the code to test batchDelete
        //instance.batchDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchStart', function() {
      it('should call batchStart successfully', function(done) {
        //uncomment below and update the code to test batchStart
        //instance.batchStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchStop', function() {
      it('should call batchStop successfully', function(done) {
        //uncomment below and update the code to test batchStop
        //instance.batchStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateSchedule', function() {
      it('should call batchUpdateSchedule successfully', function(done) {
        //uncomment below and update the code to test batchUpdateSchedule
        //instance.batchUpdateSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelInputDeviceTransfer', function() {
      it('should call cancelInputDeviceTransfer successfully', function(done) {
        //uncomment below and update the code to test cancelInputDeviceTransfer
        //instance.cancelInputDeviceTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('claimDevice', function() {
      it('should call claimDevice successfully', function(done) {
        //uncomment below and update the code to test claimDevice
        //instance.claimDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createInput', function() {
      it('should call createInput successfully', function(done) {
        //uncomment below and update the code to test createInput
        //instance.createInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createInputSecurityGroup', function() {
      it('should call createInputSecurityGroup successfully', function(done) {
        //uncomment below and update the code to test createInputSecurityGroup
        //instance.createInputSecurityGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMultiplex', function() {
      it('should call createMultiplex successfully', function(done) {
        //uncomment below and update the code to test createMultiplex
        //instance.createMultiplex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMultiplexProgram', function() {
      it('should call createMultiplexProgram successfully', function(done) {
        //uncomment below and update the code to test createMultiplexProgram
        //instance.createMultiplexProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPartnerInput', function() {
      it('should call createPartnerInput successfully', function(done) {
        //uncomment below and update the code to test createPartnerInput
        //instance.createPartnerInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTags', function() {
      it('should call createTags successfully', function(done) {
        //uncomment below and update the code to test createTags
        //instance.createTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInput', function() {
      it('should call deleteInput successfully', function(done) {
        //uncomment below and update the code to test deleteInput
        //instance.deleteInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInputSecurityGroup', function() {
      it('should call deleteInputSecurityGroup successfully', function(done) {
        //uncomment below and update the code to test deleteInputSecurityGroup
        //instance.deleteInputSecurityGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMultiplex', function() {
      it('should call deleteMultiplex successfully', function(done) {
        //uncomment below and update the code to test deleteMultiplex
        //instance.deleteMultiplex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMultiplexProgram', function() {
      it('should call deleteMultiplexProgram successfully', function(done) {
        //uncomment below and update the code to test deleteMultiplexProgram
        //instance.deleteMultiplexProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReservation', function() {
      it('should call deleteReservation successfully', function(done) {
        //uncomment below and update the code to test deleteReservation
        //instance.deleteReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSchedule', function() {
      it('should call deleteSchedule successfully', function(done) {
        //uncomment below and update the code to test deleteSchedule
        //instance.deleteSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTags', function() {
      it('should call deleteTags successfully', function(done) {
        //uncomment below and update the code to test deleteTags
        //instance.deleteTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountConfiguration', function() {
      it('should call describeAccountConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeAccountConfiguration
        //instance.describeAccountConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannel', function() {
      it('should call describeChannel successfully', function(done) {
        //uncomment below and update the code to test describeChannel
        //instance.describeChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInput', function() {
      it('should call describeInput successfully', function(done) {
        //uncomment below and update the code to test describeInput
        //instance.describeInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInputDevice', function() {
      it('should call describeInputDevice successfully', function(done) {
        //uncomment below and update the code to test describeInputDevice
        //instance.describeInputDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInputDeviceThumbnail', function() {
      it('should call describeInputDeviceThumbnail successfully', function(done) {
        //uncomment below and update the code to test describeInputDeviceThumbnail
        //instance.describeInputDeviceThumbnail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInputSecurityGroup', function() {
      it('should call describeInputSecurityGroup successfully', function(done) {
        //uncomment below and update the code to test describeInputSecurityGroup
        //instance.describeInputSecurityGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMultiplex', function() {
      it('should call describeMultiplex successfully', function(done) {
        //uncomment below and update the code to test describeMultiplex
        //instance.describeMultiplex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMultiplexProgram', function() {
      it('should call describeMultiplexProgram successfully', function(done) {
        //uncomment below and update the code to test describeMultiplexProgram
        //instance.describeMultiplexProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOffering', function() {
      it('should call describeOffering successfully', function(done) {
        //uncomment below and update the code to test describeOffering
        //instance.describeOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservation', function() {
      it('should call describeReservation successfully', function(done) {
        //uncomment below and update the code to test describeReservation
        //instance.describeReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSchedule', function() {
      it('should call describeSchedule successfully', function(done) {
        //uncomment below and update the code to test describeSchedule
        //instance.describeSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeThumbnails', function() {
      it('should call describeThumbnails successfully', function(done) {
        //uncomment below and update the code to test describeThumbnails
        //instance.describeThumbnails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInputDeviceTransfers', function() {
      it('should call listInputDeviceTransfers successfully', function(done) {
        //uncomment below and update the code to test listInputDeviceTransfers
        //instance.listInputDeviceTransfers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInputDevices', function() {
      it('should call listInputDevices successfully', function(done) {
        //uncomment below and update the code to test listInputDevices
        //instance.listInputDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInputSecurityGroups', function() {
      it('should call listInputSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test listInputSecurityGroups
        //instance.listInputSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInputs', function() {
      it('should call listInputs successfully', function(done) {
        //uncomment below and update the code to test listInputs
        //instance.listInputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMultiplexPrograms', function() {
      it('should call listMultiplexPrograms successfully', function(done) {
        //uncomment below and update the code to test listMultiplexPrograms
        //instance.listMultiplexPrograms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMultiplexes', function() {
      it('should call listMultiplexes successfully', function(done) {
        //uncomment below and update the code to test listMultiplexes
        //instance.listMultiplexes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOfferings', function() {
      it('should call listOfferings successfully', function(done) {
        //uncomment below and update the code to test listOfferings
        //instance.listOfferings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReservations', function() {
      it('should call listReservations successfully', function(done) {
        //uncomment below and update the code to test listReservations
        //instance.listReservations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('purchaseOffering', function() {
      it('should call purchaseOffering successfully', function(done) {
        //uncomment below and update the code to test purchaseOffering
        //instance.purchaseOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebootInputDevice', function() {
      it('should call rebootInputDevice successfully', function(done) {
        //uncomment below and update the code to test rebootInputDevice
        //instance.rebootInputDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rejectInputDeviceTransfer', function() {
      it('should call rejectInputDeviceTransfer successfully', function(done) {
        //uncomment below and update the code to test rejectInputDeviceTransfer
        //instance.rejectInputDeviceTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startChannel', function() {
      it('should call startChannel successfully', function(done) {
        //uncomment below and update the code to test startChannel
        //instance.startChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startInputDeviceMaintenanceWindow', function() {
      it('should call startInputDeviceMaintenanceWindow successfully', function(done) {
        //uncomment below and update the code to test startInputDeviceMaintenanceWindow
        //instance.startInputDeviceMaintenanceWindow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startMultiplex', function() {
      it('should call startMultiplex successfully', function(done) {
        //uncomment below and update the code to test startMultiplex
        //instance.startMultiplex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopChannel', function() {
      it('should call stopChannel successfully', function(done) {
        //uncomment below and update the code to test stopChannel
        //instance.stopChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopMultiplex', function() {
      it('should call stopMultiplex successfully', function(done) {
        //uncomment below and update the code to test stopMultiplex
        //instance.stopMultiplex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transferInputDevice', function() {
      it('should call transferInputDevice successfully', function(done) {
        //uncomment below and update the code to test transferInputDevice
        //instance.transferInputDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccountConfiguration', function() {
      it('should call updateAccountConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateAccountConfiguration
        //instance.updateAccountConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelClass', function() {
      it('should call updateChannelClass successfully', function(done) {
        //uncomment below and update the code to test updateChannelClass
        //instance.updateChannelClass(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInput', function() {
      it('should call updateInput successfully', function(done) {
        //uncomment below and update the code to test updateInput
        //instance.updateInput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInputDevice', function() {
      it('should call updateInputDevice successfully', function(done) {
        //uncomment below and update the code to test updateInputDevice
        //instance.updateInputDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInputSecurityGroup', function() {
      it('should call updateInputSecurityGroup successfully', function(done) {
        //uncomment below and update the code to test updateInputSecurityGroup
        //instance.updateInputSecurityGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMultiplex', function() {
      it('should call updateMultiplex successfully', function(done) {
        //uncomment below and update the code to test updateMultiplex
        //instance.updateMultiplex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMultiplexProgram', function() {
      it('should call updateMultiplexProgram successfully', function(done) {
        //uncomment below and update the code to test updateMultiplexProgram
        //instance.updateMultiplexProgram(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReservation', function() {
      it('should call updateReservation successfully', function(done) {
        //uncomment below and update the code to test updateReservation
        //instance.updateReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
