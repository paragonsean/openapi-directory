/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteChannelResponse_EncoderSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteChannelResponse_EncoderSettings::OAIDeleteChannelResponse_EncoderSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteChannelResponse_EncoderSettings::OAIDeleteChannelResponse_EncoderSettings() {
    this->initializeModel();
}

OAIDeleteChannelResponse_EncoderSettings::~OAIDeleteChannelResponse_EncoderSettings() {}

void OAIDeleteChannelResponse_EncoderSettings::initializeModel() {

    m_audio_descriptions_isSet = false;
    m_audio_descriptions_isValid = false;

    m_avail_blanking_isSet = false;
    m_avail_blanking_isValid = false;

    m_avail_configuration_isSet = false;
    m_avail_configuration_isValid = false;

    m_blackout_slate_isSet = false;
    m_blackout_slate_isValid = false;

    m_caption_descriptions_isSet = false;
    m_caption_descriptions_isValid = false;

    m_feature_activations_isSet = false;
    m_feature_activations_isValid = false;

    m_global_configuration_isSet = false;
    m_global_configuration_isValid = false;

    m_motion_graphics_configuration_isSet = false;
    m_motion_graphics_configuration_isValid = false;

    m_nielsen_configuration_isSet = false;
    m_nielsen_configuration_isValid = false;

    m_output_groups_isSet = false;
    m_output_groups_isValid = false;

    m_timecode_config_isSet = false;
    m_timecode_config_isValid = false;

    m_video_descriptions_isSet = false;
    m_video_descriptions_isValid = false;

    m_thumbnail_configuration_isSet = false;
    m_thumbnail_configuration_isValid = false;
}

void OAIDeleteChannelResponse_EncoderSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteChannelResponse_EncoderSettings::fromJsonObject(QJsonObject json) {

    m_audio_descriptions_isValid = ::OpenAPI::fromJsonValue(m_audio_descriptions, json[QString("AudioDescriptions")]);
    m_audio_descriptions_isSet = !json[QString("AudioDescriptions")].isNull() && m_audio_descriptions_isValid;

    m_avail_blanking_isValid = ::OpenAPI::fromJsonValue(m_avail_blanking, json[QString("AvailBlanking")]);
    m_avail_blanking_isSet = !json[QString("AvailBlanking")].isNull() && m_avail_blanking_isValid;

    m_avail_configuration_isValid = ::OpenAPI::fromJsonValue(m_avail_configuration, json[QString("AvailConfiguration")]);
    m_avail_configuration_isSet = !json[QString("AvailConfiguration")].isNull() && m_avail_configuration_isValid;

    m_blackout_slate_isValid = ::OpenAPI::fromJsonValue(m_blackout_slate, json[QString("BlackoutSlate")]);
    m_blackout_slate_isSet = !json[QString("BlackoutSlate")].isNull() && m_blackout_slate_isValid;

    m_caption_descriptions_isValid = ::OpenAPI::fromJsonValue(m_caption_descriptions, json[QString("CaptionDescriptions")]);
    m_caption_descriptions_isSet = !json[QString("CaptionDescriptions")].isNull() && m_caption_descriptions_isValid;

    m_feature_activations_isValid = ::OpenAPI::fromJsonValue(m_feature_activations, json[QString("FeatureActivations")]);
    m_feature_activations_isSet = !json[QString("FeatureActivations")].isNull() && m_feature_activations_isValid;

    m_global_configuration_isValid = ::OpenAPI::fromJsonValue(m_global_configuration, json[QString("GlobalConfiguration")]);
    m_global_configuration_isSet = !json[QString("GlobalConfiguration")].isNull() && m_global_configuration_isValid;

    m_motion_graphics_configuration_isValid = ::OpenAPI::fromJsonValue(m_motion_graphics_configuration, json[QString("MotionGraphicsConfiguration")]);
    m_motion_graphics_configuration_isSet = !json[QString("MotionGraphicsConfiguration")].isNull() && m_motion_graphics_configuration_isValid;

    m_nielsen_configuration_isValid = ::OpenAPI::fromJsonValue(m_nielsen_configuration, json[QString("NielsenConfiguration")]);
    m_nielsen_configuration_isSet = !json[QString("NielsenConfiguration")].isNull() && m_nielsen_configuration_isValid;

    m_output_groups_isValid = ::OpenAPI::fromJsonValue(m_output_groups, json[QString("OutputGroups")]);
    m_output_groups_isSet = !json[QString("OutputGroups")].isNull() && m_output_groups_isValid;

    m_timecode_config_isValid = ::OpenAPI::fromJsonValue(m_timecode_config, json[QString("TimecodeConfig")]);
    m_timecode_config_isSet = !json[QString("TimecodeConfig")].isNull() && m_timecode_config_isValid;

    m_video_descriptions_isValid = ::OpenAPI::fromJsonValue(m_video_descriptions, json[QString("VideoDescriptions")]);
    m_video_descriptions_isSet = !json[QString("VideoDescriptions")].isNull() && m_video_descriptions_isValid;

    m_thumbnail_configuration_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_configuration, json[QString("ThumbnailConfiguration")]);
    m_thumbnail_configuration_isSet = !json[QString("ThumbnailConfiguration")].isNull() && m_thumbnail_configuration_isValid;
}

QString OAIDeleteChannelResponse_EncoderSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteChannelResponse_EncoderSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_descriptions.isSet()) {
        obj.insert(QString("AudioDescriptions"), ::OpenAPI::toJsonValue(m_audio_descriptions));
    }
    if (m_avail_blanking.isSet()) {
        obj.insert(QString("AvailBlanking"), ::OpenAPI::toJsonValue(m_avail_blanking));
    }
    if (m_avail_configuration.isSet()) {
        obj.insert(QString("AvailConfiguration"), ::OpenAPI::toJsonValue(m_avail_configuration));
    }
    if (m_blackout_slate.isSet()) {
        obj.insert(QString("BlackoutSlate"), ::OpenAPI::toJsonValue(m_blackout_slate));
    }
    if (m_caption_descriptions.isSet()) {
        obj.insert(QString("CaptionDescriptions"), ::OpenAPI::toJsonValue(m_caption_descriptions));
    }
    if (m_feature_activations.isSet()) {
        obj.insert(QString("FeatureActivations"), ::OpenAPI::toJsonValue(m_feature_activations));
    }
    if (m_global_configuration.isSet()) {
        obj.insert(QString("GlobalConfiguration"), ::OpenAPI::toJsonValue(m_global_configuration));
    }
    if (m_motion_graphics_configuration.isSet()) {
        obj.insert(QString("MotionGraphicsConfiguration"), ::OpenAPI::toJsonValue(m_motion_graphics_configuration));
    }
    if (m_nielsen_configuration.isSet()) {
        obj.insert(QString("NielsenConfiguration"), ::OpenAPI::toJsonValue(m_nielsen_configuration));
    }
    if (m_output_groups.isSet()) {
        obj.insert(QString("OutputGroups"), ::OpenAPI::toJsonValue(m_output_groups));
    }
    if (m_timecode_config.isSet()) {
        obj.insert(QString("TimecodeConfig"), ::OpenAPI::toJsonValue(m_timecode_config));
    }
    if (m_video_descriptions.isSet()) {
        obj.insert(QString("VideoDescriptions"), ::OpenAPI::toJsonValue(m_video_descriptions));
    }
    if (m_thumbnail_configuration.isSet()) {
        obj.insert(QString("ThumbnailConfiguration"), ::OpenAPI::toJsonValue(m_thumbnail_configuration));
    }
    return obj;
}

QList OAIDeleteChannelResponse_EncoderSettings::getAudioDescriptions() const {
    return m_audio_descriptions;
}
void OAIDeleteChannelResponse_EncoderSettings::setAudioDescriptions(const QList &audio_descriptions) {
    m_audio_descriptions = audio_descriptions;
    m_audio_descriptions_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_audio_descriptions_Set() const{
    return m_audio_descriptions_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_audio_descriptions_Valid() const{
    return m_audio_descriptions_isValid;
}

OAICreateChannel_request_encoderSettings_AvailBlanking OAIDeleteChannelResponse_EncoderSettings::getAvailBlanking() const {
    return m_avail_blanking;
}
void OAIDeleteChannelResponse_EncoderSettings::setAvailBlanking(const OAICreateChannel_request_encoderSettings_AvailBlanking &avail_blanking) {
    m_avail_blanking = avail_blanking;
    m_avail_blanking_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_avail_blanking_Set() const{
    return m_avail_blanking_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_avail_blanking_Valid() const{
    return m_avail_blanking_isValid;
}

OAICreateChannel_request_encoderSettings_AvailConfiguration OAIDeleteChannelResponse_EncoderSettings::getAvailConfiguration() const {
    return m_avail_configuration;
}
void OAIDeleteChannelResponse_EncoderSettings::setAvailConfiguration(const OAICreateChannel_request_encoderSettings_AvailConfiguration &avail_configuration) {
    m_avail_configuration = avail_configuration;
    m_avail_configuration_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_avail_configuration_Set() const{
    return m_avail_configuration_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_avail_configuration_Valid() const{
    return m_avail_configuration_isValid;
}

OAICreateChannel_request_encoderSettings_BlackoutSlate OAIDeleteChannelResponse_EncoderSettings::getBlackoutSlate() const {
    return m_blackout_slate;
}
void OAIDeleteChannelResponse_EncoderSettings::setBlackoutSlate(const OAICreateChannel_request_encoderSettings_BlackoutSlate &blackout_slate) {
    m_blackout_slate = blackout_slate;
    m_blackout_slate_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_blackout_slate_Set() const{
    return m_blackout_slate_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_blackout_slate_Valid() const{
    return m_blackout_slate_isValid;
}

QList OAIDeleteChannelResponse_EncoderSettings::getCaptionDescriptions() const {
    return m_caption_descriptions;
}
void OAIDeleteChannelResponse_EncoderSettings::setCaptionDescriptions(const QList &caption_descriptions) {
    m_caption_descriptions = caption_descriptions;
    m_caption_descriptions_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_caption_descriptions_Set() const{
    return m_caption_descriptions_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_caption_descriptions_Valid() const{
    return m_caption_descriptions_isValid;
}

OAICreateChannel_request_encoderSettings_FeatureActivations OAIDeleteChannelResponse_EncoderSettings::getFeatureActivations() const {
    return m_feature_activations;
}
void OAIDeleteChannelResponse_EncoderSettings::setFeatureActivations(const OAICreateChannel_request_encoderSettings_FeatureActivations &feature_activations) {
    m_feature_activations = feature_activations;
    m_feature_activations_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_feature_activations_Set() const{
    return m_feature_activations_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_feature_activations_Valid() const{
    return m_feature_activations_isValid;
}

OAICreateChannel_request_encoderSettings_GlobalConfiguration OAIDeleteChannelResponse_EncoderSettings::getGlobalConfiguration() const {
    return m_global_configuration;
}
void OAIDeleteChannelResponse_EncoderSettings::setGlobalConfiguration(const OAICreateChannel_request_encoderSettings_GlobalConfiguration &global_configuration) {
    m_global_configuration = global_configuration;
    m_global_configuration_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_global_configuration_Set() const{
    return m_global_configuration_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_global_configuration_Valid() const{
    return m_global_configuration_isValid;
}

OAICreateChannel_request_encoderSettings_MotionGraphicsConfiguration OAIDeleteChannelResponse_EncoderSettings::getMotionGraphicsConfiguration() const {
    return m_motion_graphics_configuration;
}
void OAIDeleteChannelResponse_EncoderSettings::setMotionGraphicsConfiguration(const OAICreateChannel_request_encoderSettings_MotionGraphicsConfiguration &motion_graphics_configuration) {
    m_motion_graphics_configuration = motion_graphics_configuration;
    m_motion_graphics_configuration_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_motion_graphics_configuration_Set() const{
    return m_motion_graphics_configuration_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_motion_graphics_configuration_Valid() const{
    return m_motion_graphics_configuration_isValid;
}

OAICreateChannel_request_encoderSettings_NielsenConfiguration OAIDeleteChannelResponse_EncoderSettings::getNielsenConfiguration() const {
    return m_nielsen_configuration;
}
void OAIDeleteChannelResponse_EncoderSettings::setNielsenConfiguration(const OAICreateChannel_request_encoderSettings_NielsenConfiguration &nielsen_configuration) {
    m_nielsen_configuration = nielsen_configuration;
    m_nielsen_configuration_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_nielsen_configuration_Set() const{
    return m_nielsen_configuration_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_nielsen_configuration_Valid() const{
    return m_nielsen_configuration_isValid;
}

QList OAIDeleteChannelResponse_EncoderSettings::getOutputGroups() const {
    return m_output_groups;
}
void OAIDeleteChannelResponse_EncoderSettings::setOutputGroups(const QList &output_groups) {
    m_output_groups = output_groups;
    m_output_groups_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_output_groups_Set() const{
    return m_output_groups_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_output_groups_Valid() const{
    return m_output_groups_isValid;
}

OAICreateChannel_request_encoderSettings_TimecodeConfig OAIDeleteChannelResponse_EncoderSettings::getTimecodeConfig() const {
    return m_timecode_config;
}
void OAIDeleteChannelResponse_EncoderSettings::setTimecodeConfig(const OAICreateChannel_request_encoderSettings_TimecodeConfig &timecode_config) {
    m_timecode_config = timecode_config;
    m_timecode_config_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_timecode_config_Set() const{
    return m_timecode_config_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_timecode_config_Valid() const{
    return m_timecode_config_isValid;
}

QList OAIDeleteChannelResponse_EncoderSettings::getVideoDescriptions() const {
    return m_video_descriptions;
}
void OAIDeleteChannelResponse_EncoderSettings::setVideoDescriptions(const QList &video_descriptions) {
    m_video_descriptions = video_descriptions;
    m_video_descriptions_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_video_descriptions_Set() const{
    return m_video_descriptions_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_video_descriptions_Valid() const{
    return m_video_descriptions_isValid;
}

OAICreateChannel_request_encoderSettings_ThumbnailConfiguration OAIDeleteChannelResponse_EncoderSettings::getThumbnailConfiguration() const {
    return m_thumbnail_configuration;
}
void OAIDeleteChannelResponse_EncoderSettings::setThumbnailConfiguration(const OAICreateChannel_request_encoderSettings_ThumbnailConfiguration &thumbnail_configuration) {
    m_thumbnail_configuration = thumbnail_configuration;
    m_thumbnail_configuration_isSet = true;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_thumbnail_configuration_Set() const{
    return m_thumbnail_configuration_isSet;
}

bool OAIDeleteChannelResponse_EncoderSettings::is_thumbnail_configuration_Valid() const{
    return m_thumbnail_configuration_isValid;
}

bool OAIDeleteChannelResponse_EncoderSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_blanking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blackout_slate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_activations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_graphics_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteChannelResponse_EncoderSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_descriptions_isValid && m_output_groups_isValid && m_timecode_config_isValid && m_video_descriptions_isValid && true;
}

} // namespace OpenAPI
