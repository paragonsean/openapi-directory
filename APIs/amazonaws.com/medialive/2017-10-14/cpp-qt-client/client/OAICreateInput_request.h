/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateInput_request.h
 *
 * 
 */

#ifndef OAICreateInput_request_H
#define OAICreateInput_request_H

#include <QJsonObject>

#include "OAICreateInput_request_vpc.h"
#include "OAIInputDestinationRequest.h"
#include "OAIInputDeviceSettings.h"
#include "OAIInputSourceRequest.h"
#include "OAIMediaConnectFlowRequest.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputDestinationRequest;
class OAIInputDeviceSettings;
class OAIMediaConnectFlowRequest;
class OAIInputSourceRequest;
class OAICreateInput_request_vpc;

class OAICreateInput_request : public OAIObject {
public:
    OAICreateInput_request();
    OAICreateInput_request(QString json);
    ~OAICreateInput_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIInputDestinationRequest> getDestinations() const;
    void setDestinations(const QList<OAIInputDestinationRequest> &destinations);
    bool is_destinations_Set() const;
    bool is_destinations_Valid() const;

    QList<OAIInputDeviceSettings> getInputDevices() const;
    void setInputDevices(const QList<OAIInputDeviceSettings> &input_devices);
    bool is_input_devices_Set() const;
    bool is_input_devices_Valid() const;

    QList<QString> getInputSecurityGroups() const;
    void setInputSecurityGroups(const QList<QString> &input_security_groups);
    bool is_input_security_groups_Set() const;
    bool is_input_security_groups_Valid() const;

    QList<OAIMediaConnectFlowRequest> getMediaConnectFlows() const;
    void setMediaConnectFlows(const QList<OAIMediaConnectFlowRequest> &media_connect_flows);
    bool is_media_connect_flows_Set() const;
    bool is_media_connect_flows_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QList<OAIInputSourceRequest> getSources() const;
    void setSources(const QList<OAIInputSourceRequest> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAICreateInput_request_vpc getVpc() const;
    void setVpc(const OAICreateInput_request_vpc &vpc);
    bool is_vpc_Set() const;
    bool is_vpc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIInputDestinationRequest> m_destinations;
    bool m_destinations_isSet;
    bool m_destinations_isValid;

    QList<OAIInputDeviceSettings> m_input_devices;
    bool m_input_devices_isSet;
    bool m_input_devices_isValid;

    QList<QString> m_input_security_groups;
    bool m_input_security_groups_isSet;
    bool m_input_security_groups_isValid;

    QList<OAIMediaConnectFlowRequest> m_media_connect_flows;
    bool m_media_connect_flows_isSet;
    bool m_media_connect_flows_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QList<OAIInputSourceRequest> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAICreateInput_request_vpc m_vpc;
    bool m_vpc_isSet;
    bool m_vpc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateInput_request)

#endif // OAICreateInput_request_H
