/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoDescription_CodecSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoDescription_CodecSettings::OAIVideoDescription_CodecSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoDescription_CodecSettings::OAIVideoDescription_CodecSettings() {
    this->initializeModel();
}

OAIVideoDescription_CodecSettings::~OAIVideoDescription_CodecSettings() {}

void OAIVideoDescription_CodecSettings::initializeModel() {

    m_frame_capture_settings_isSet = false;
    m_frame_capture_settings_isValid = false;

    m_h264_settings_isSet = false;
    m_h264_settings_isValid = false;

    m_h265_settings_isSet = false;
    m_h265_settings_isValid = false;

    m_mpeg2_settings_isSet = false;
    m_mpeg2_settings_isValid = false;
}

void OAIVideoDescription_CodecSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoDescription_CodecSettings::fromJsonObject(QJsonObject json) {

    m_frame_capture_settings_isValid = ::OpenAPI::fromJsonValue(m_frame_capture_settings, json[QString("FrameCaptureSettings")]);
    m_frame_capture_settings_isSet = !json[QString("FrameCaptureSettings")].isNull() && m_frame_capture_settings_isValid;

    m_h264_settings_isValid = ::OpenAPI::fromJsonValue(m_h264_settings, json[QString("H264Settings")]);
    m_h264_settings_isSet = !json[QString("H264Settings")].isNull() && m_h264_settings_isValid;

    m_h265_settings_isValid = ::OpenAPI::fromJsonValue(m_h265_settings, json[QString("H265Settings")]);
    m_h265_settings_isSet = !json[QString("H265Settings")].isNull() && m_h265_settings_isValid;

    m_mpeg2_settings_isValid = ::OpenAPI::fromJsonValue(m_mpeg2_settings, json[QString("Mpeg2Settings")]);
    m_mpeg2_settings_isSet = !json[QString("Mpeg2Settings")].isNull() && m_mpeg2_settings_isValid;
}

QString OAIVideoDescription_CodecSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoDescription_CodecSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_frame_capture_settings.isSet()) {
        obj.insert(QString("FrameCaptureSettings"), ::OpenAPI::toJsonValue(m_frame_capture_settings));
    }
    if (m_h264_settings.isSet()) {
        obj.insert(QString("H264Settings"), ::OpenAPI::toJsonValue(m_h264_settings));
    }
    if (m_h265_settings.isSet()) {
        obj.insert(QString("H265Settings"), ::OpenAPI::toJsonValue(m_h265_settings));
    }
    if (m_mpeg2_settings.isSet()) {
        obj.insert(QString("Mpeg2Settings"), ::OpenAPI::toJsonValue(m_mpeg2_settings));
    }
    return obj;
}

OAIVideoCodecSettings_FrameCaptureSettings OAIVideoDescription_CodecSettings::getFrameCaptureSettings() const {
    return m_frame_capture_settings;
}
void OAIVideoDescription_CodecSettings::setFrameCaptureSettings(const OAIVideoCodecSettings_FrameCaptureSettings &frame_capture_settings) {
    m_frame_capture_settings = frame_capture_settings;
    m_frame_capture_settings_isSet = true;
}

bool OAIVideoDescription_CodecSettings::is_frame_capture_settings_Set() const{
    return m_frame_capture_settings_isSet;
}

bool OAIVideoDescription_CodecSettings::is_frame_capture_settings_Valid() const{
    return m_frame_capture_settings_isValid;
}

OAIVideoCodecSettings_H264Settings OAIVideoDescription_CodecSettings::getH264Settings() const {
    return m_h264_settings;
}
void OAIVideoDescription_CodecSettings::setH264Settings(const OAIVideoCodecSettings_H264Settings &h264_settings) {
    m_h264_settings = h264_settings;
    m_h264_settings_isSet = true;
}

bool OAIVideoDescription_CodecSettings::is_h264_settings_Set() const{
    return m_h264_settings_isSet;
}

bool OAIVideoDescription_CodecSettings::is_h264_settings_Valid() const{
    return m_h264_settings_isValid;
}

OAIVideoCodecSettings_H265Settings OAIVideoDescription_CodecSettings::getH265Settings() const {
    return m_h265_settings;
}
void OAIVideoDescription_CodecSettings::setH265Settings(const OAIVideoCodecSettings_H265Settings &h265_settings) {
    m_h265_settings = h265_settings;
    m_h265_settings_isSet = true;
}

bool OAIVideoDescription_CodecSettings::is_h265_settings_Set() const{
    return m_h265_settings_isSet;
}

bool OAIVideoDescription_CodecSettings::is_h265_settings_Valid() const{
    return m_h265_settings_isValid;
}

OAIVideoCodecSettings_Mpeg2Settings OAIVideoDescription_CodecSettings::getMpeg2Settings() const {
    return m_mpeg2_settings;
}
void OAIVideoDescription_CodecSettings::setMpeg2Settings(const OAIVideoCodecSettings_Mpeg2Settings &mpeg2_settings) {
    m_mpeg2_settings = mpeg2_settings;
    m_mpeg2_settings_isSet = true;
}

bool OAIVideoDescription_CodecSettings::is_mpeg2_settings_Set() const{
    return m_mpeg2_settings_isSet;
}

bool OAIVideoDescription_CodecSettings::is_mpeg2_settings_Valid() const{
    return m_mpeg2_settings_isValid;
}

bool OAIVideoDescription_CodecSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frame_capture_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h264_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h265_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpeg2_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoDescription_CodecSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
