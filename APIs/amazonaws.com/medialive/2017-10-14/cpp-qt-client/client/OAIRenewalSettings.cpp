/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenewalSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenewalSettings::OAIRenewalSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenewalSettings::OAIRenewalSettings() {
    this->initializeModel();
}

OAIRenewalSettings::~OAIRenewalSettings() {}

void OAIRenewalSettings::initializeModel() {

    m_automatic_renewal_isSet = false;
    m_automatic_renewal_isValid = false;

    m_renewal_count_isSet = false;
    m_renewal_count_isValid = false;
}

void OAIRenewalSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenewalSettings::fromJsonObject(QJsonObject json) {

    m_automatic_renewal_isValid = ::OpenAPI::fromJsonValue(m_automatic_renewal, json[QString("AutomaticRenewal")]);
    m_automatic_renewal_isSet = !json[QString("AutomaticRenewal")].isNull() && m_automatic_renewal_isValid;

    m_renewal_count_isValid = ::OpenAPI::fromJsonValue(m_renewal_count, json[QString("RenewalCount")]);
    m_renewal_count_isSet = !json[QString("RenewalCount")].isNull() && m_renewal_count_isValid;
}

QString OAIRenewalSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenewalSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_renewal.isSet()) {
        obj.insert(QString("AutomaticRenewal"), ::OpenAPI::toJsonValue(m_automatic_renewal));
    }
    if (m_renewal_count_isSet) {
        obj.insert(QString("RenewalCount"), ::OpenAPI::toJsonValue(m_renewal_count));
    }
    return obj;
}

OAIReservationAutomaticRenewal OAIRenewalSettings::getAutomaticRenewal() const {
    return m_automatic_renewal;
}
void OAIRenewalSettings::setAutomaticRenewal(const OAIReservationAutomaticRenewal &automatic_renewal) {
    m_automatic_renewal = automatic_renewal;
    m_automatic_renewal_isSet = true;
}

bool OAIRenewalSettings::is_automatic_renewal_Set() const{
    return m_automatic_renewal_isSet;
}

bool OAIRenewalSettings::is_automatic_renewal_Valid() const{
    return m_automatic_renewal_isValid;
}

qint32 OAIRenewalSettings::getRenewalCount() const {
    return m_renewal_count;
}
void OAIRenewalSettings::setRenewalCount(const qint32 &renewal_count) {
    m_renewal_count = renewal_count;
    m_renewal_count_isSet = true;
}

bool OAIRenewalSettings::is_renewal_count_Set() const{
    return m_renewal_count_isSet;
}

bool OAIRenewalSettings::is_renewal_count_Valid() const{
    return m_renewal_count_isValid;
}

bool OAIRenewalSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_renewal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenewalSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
