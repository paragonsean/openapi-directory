/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioSelector_SelectorSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioSelector_SelectorSettings::OAIAudioSelector_SelectorSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioSelector_SelectorSettings::OAIAudioSelector_SelectorSettings() {
    this->initializeModel();
}

OAIAudioSelector_SelectorSettings::~OAIAudioSelector_SelectorSettings() {}

void OAIAudioSelector_SelectorSettings::initializeModel() {

    m_audio_hls_rendition_selection_isSet = false;
    m_audio_hls_rendition_selection_isValid = false;

    m_audio_language_selection_isSet = false;
    m_audio_language_selection_isValid = false;

    m_audio_pid_selection_isSet = false;
    m_audio_pid_selection_isValid = false;

    m_audio_track_selection_isSet = false;
    m_audio_track_selection_isValid = false;
}

void OAIAudioSelector_SelectorSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioSelector_SelectorSettings::fromJsonObject(QJsonObject json) {

    m_audio_hls_rendition_selection_isValid = ::OpenAPI::fromJsonValue(m_audio_hls_rendition_selection, json[QString("AudioHlsRenditionSelection")]);
    m_audio_hls_rendition_selection_isSet = !json[QString("AudioHlsRenditionSelection")].isNull() && m_audio_hls_rendition_selection_isValid;

    m_audio_language_selection_isValid = ::OpenAPI::fromJsonValue(m_audio_language_selection, json[QString("AudioLanguageSelection")]);
    m_audio_language_selection_isSet = !json[QString("AudioLanguageSelection")].isNull() && m_audio_language_selection_isValid;

    m_audio_pid_selection_isValid = ::OpenAPI::fromJsonValue(m_audio_pid_selection, json[QString("AudioPidSelection")]);
    m_audio_pid_selection_isSet = !json[QString("AudioPidSelection")].isNull() && m_audio_pid_selection_isValid;

    m_audio_track_selection_isValid = ::OpenAPI::fromJsonValue(m_audio_track_selection, json[QString("AudioTrackSelection")]);
    m_audio_track_selection_isSet = !json[QString("AudioTrackSelection")].isNull() && m_audio_track_selection_isValid;
}

QString OAIAudioSelector_SelectorSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioSelector_SelectorSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_hls_rendition_selection.isSet()) {
        obj.insert(QString("AudioHlsRenditionSelection"), ::OpenAPI::toJsonValue(m_audio_hls_rendition_selection));
    }
    if (m_audio_language_selection.isSet()) {
        obj.insert(QString("AudioLanguageSelection"), ::OpenAPI::toJsonValue(m_audio_language_selection));
    }
    if (m_audio_pid_selection.isSet()) {
        obj.insert(QString("AudioPidSelection"), ::OpenAPI::toJsonValue(m_audio_pid_selection));
    }
    if (m_audio_track_selection.isSet()) {
        obj.insert(QString("AudioTrackSelection"), ::OpenAPI::toJsonValue(m_audio_track_selection));
    }
    return obj;
}

OAIAudioSelectorSettings_AudioHlsRenditionSelection OAIAudioSelector_SelectorSettings::getAudioHlsRenditionSelection() const {
    return m_audio_hls_rendition_selection;
}
void OAIAudioSelector_SelectorSettings::setAudioHlsRenditionSelection(const OAIAudioSelectorSettings_AudioHlsRenditionSelection &audio_hls_rendition_selection) {
    m_audio_hls_rendition_selection = audio_hls_rendition_selection;
    m_audio_hls_rendition_selection_isSet = true;
}

bool OAIAudioSelector_SelectorSettings::is_audio_hls_rendition_selection_Set() const{
    return m_audio_hls_rendition_selection_isSet;
}

bool OAIAudioSelector_SelectorSettings::is_audio_hls_rendition_selection_Valid() const{
    return m_audio_hls_rendition_selection_isValid;
}

OAIAudioSelectorSettings_AudioLanguageSelection OAIAudioSelector_SelectorSettings::getAudioLanguageSelection() const {
    return m_audio_language_selection;
}
void OAIAudioSelector_SelectorSettings::setAudioLanguageSelection(const OAIAudioSelectorSettings_AudioLanguageSelection &audio_language_selection) {
    m_audio_language_selection = audio_language_selection;
    m_audio_language_selection_isSet = true;
}

bool OAIAudioSelector_SelectorSettings::is_audio_language_selection_Set() const{
    return m_audio_language_selection_isSet;
}

bool OAIAudioSelector_SelectorSettings::is_audio_language_selection_Valid() const{
    return m_audio_language_selection_isValid;
}

OAIAudioSelectorSettings_AudioPidSelection OAIAudioSelector_SelectorSettings::getAudioPidSelection() const {
    return m_audio_pid_selection;
}
void OAIAudioSelector_SelectorSettings::setAudioPidSelection(const OAIAudioSelectorSettings_AudioPidSelection &audio_pid_selection) {
    m_audio_pid_selection = audio_pid_selection;
    m_audio_pid_selection_isSet = true;
}

bool OAIAudioSelector_SelectorSettings::is_audio_pid_selection_Set() const{
    return m_audio_pid_selection_isSet;
}

bool OAIAudioSelector_SelectorSettings::is_audio_pid_selection_Valid() const{
    return m_audio_pid_selection_isValid;
}

OAIAudioSelectorSettings_AudioTrackSelection OAIAudioSelector_SelectorSettings::getAudioTrackSelection() const {
    return m_audio_track_selection;
}
void OAIAudioSelector_SelectorSettings::setAudioTrackSelection(const OAIAudioSelectorSettings_AudioTrackSelection &audio_track_selection) {
    m_audio_track_selection = audio_track_selection;
    m_audio_track_selection_isSet = true;
}

bool OAIAudioSelector_SelectorSettings::is_audio_track_selection_Set() const{
    return m_audio_track_selection_isSet;
}

bool OAIAudioSelector_SelectorSettings::is_audio_track_selection_Valid() const{
    return m_audio_track_selection_isValid;
}

bool OAIAudioSelector_SelectorSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_hls_rendition_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_language_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_pid_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_track_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioSelector_SelectorSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
