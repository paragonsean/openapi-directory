/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInputDeviceResponse_NetworkSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInputDeviceResponse_NetworkSettings::OAIDescribeInputDeviceResponse_NetworkSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInputDeviceResponse_NetworkSettings::OAIDescribeInputDeviceResponse_NetworkSettings() {
    this->initializeModel();
}

OAIDescribeInputDeviceResponse_NetworkSettings::~OAIDescribeInputDeviceResponse_NetworkSettings() {}

void OAIDescribeInputDeviceResponse_NetworkSettings::initializeModel() {

    m_dns_addresses_isSet = false;
    m_dns_addresses_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ip_scheme_isSet = false;
    m_ip_scheme_isValid = false;

    m_subnet_mask_isSet = false;
    m_subnet_mask_isValid = false;
}

void OAIDescribeInputDeviceResponse_NetworkSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInputDeviceResponse_NetworkSettings::fromJsonObject(QJsonObject json) {

    m_dns_addresses_isValid = ::OpenAPI::fromJsonValue(m_dns_addresses, json[QString("DnsAddresses")]);
    m_dns_addresses_isSet = !json[QString("DnsAddresses")].isNull() && m_dns_addresses_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("Gateway")]);
    m_gateway_isSet = !json[QString("Gateway")].isNull() && m_gateway_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_ip_scheme_isValid = ::OpenAPI::fromJsonValue(m_ip_scheme, json[QString("IpScheme")]);
    m_ip_scheme_isSet = !json[QString("IpScheme")].isNull() && m_ip_scheme_isValid;

    m_subnet_mask_isValid = ::OpenAPI::fromJsonValue(m_subnet_mask, json[QString("SubnetMask")]);
    m_subnet_mask_isSet = !json[QString("SubnetMask")].isNull() && m_subnet_mask_isValid;
}

QString OAIDescribeInputDeviceResponse_NetworkSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInputDeviceResponse_NetworkSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_addresses.isSet()) {
        obj.insert(QString("DnsAddresses"), ::OpenAPI::toJsonValue(m_dns_addresses));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("Gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ip_scheme.isSet()) {
        obj.insert(QString("IpScheme"), ::OpenAPI::toJsonValue(m_ip_scheme));
    }
    if (m_subnet_mask_isSet) {
        obj.insert(QString("SubnetMask"), ::OpenAPI::toJsonValue(m_subnet_mask));
    }
    return obj;
}

QList OAIDescribeInputDeviceResponse_NetworkSettings::getDnsAddresses() const {
    return m_dns_addresses;
}
void OAIDescribeInputDeviceResponse_NetworkSettings::setDnsAddresses(const QList &dns_addresses) {
    m_dns_addresses = dns_addresses;
    m_dns_addresses_isSet = true;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_dns_addresses_Set() const{
    return m_dns_addresses_isSet;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_dns_addresses_Valid() const{
    return m_dns_addresses_isValid;
}

QString OAIDescribeInputDeviceResponse_NetworkSettings::getGateway() const {
    return m_gateway;
}
void OAIDescribeInputDeviceResponse_NetworkSettings::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIDescribeInputDeviceResponse_NetworkSettings::getIpAddress() const {
    return m_ip_address;
}
void OAIDescribeInputDeviceResponse_NetworkSettings::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIInputDeviceIpScheme OAIDescribeInputDeviceResponse_NetworkSettings::getIpScheme() const {
    return m_ip_scheme;
}
void OAIDescribeInputDeviceResponse_NetworkSettings::setIpScheme(const OAIInputDeviceIpScheme &ip_scheme) {
    m_ip_scheme = ip_scheme;
    m_ip_scheme_isSet = true;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_ip_scheme_Set() const{
    return m_ip_scheme_isSet;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_ip_scheme_Valid() const{
    return m_ip_scheme_isValid;
}

QString OAIDescribeInputDeviceResponse_NetworkSettings::getSubnetMask() const {
    return m_subnet_mask;
}
void OAIDescribeInputDeviceResponse_NetworkSettings::setSubnetMask(const QString &subnet_mask) {
    m_subnet_mask = subnet_mask;
    m_subnet_mask_isSet = true;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_subnet_mask_Set() const{
    return m_subnet_mask_isSet;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::is_subnet_mask_Valid() const{
    return m_subnet_mask_isValid;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInputDeviceResponse_NetworkSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
