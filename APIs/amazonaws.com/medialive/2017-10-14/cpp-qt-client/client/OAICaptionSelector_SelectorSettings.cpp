/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionSelector_SelectorSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionSelector_SelectorSettings::OAICaptionSelector_SelectorSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionSelector_SelectorSettings::OAICaptionSelector_SelectorSettings() {
    this->initializeModel();
}

OAICaptionSelector_SelectorSettings::~OAICaptionSelector_SelectorSettings() {}

void OAICaptionSelector_SelectorSettings::initializeModel() {

    m_ancillary_source_settings_isSet = false;
    m_ancillary_source_settings_isValid = false;

    m_arib_source_settings_isSet = false;
    m_arib_source_settings_isValid = false;

    m_dvb_sub_source_settings_isSet = false;
    m_dvb_sub_source_settings_isValid = false;

    m_embedded_source_settings_isSet = false;
    m_embedded_source_settings_isValid = false;

    m_scte20_source_settings_isSet = false;
    m_scte20_source_settings_isValid = false;

    m_scte27_source_settings_isSet = false;
    m_scte27_source_settings_isValid = false;

    m_teletext_source_settings_isSet = false;
    m_teletext_source_settings_isValid = false;
}

void OAICaptionSelector_SelectorSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptionSelector_SelectorSettings::fromJsonObject(QJsonObject json) {

    m_ancillary_source_settings_isValid = ::OpenAPI::fromJsonValue(m_ancillary_source_settings, json[QString("AncillarySourceSettings")]);
    m_ancillary_source_settings_isSet = !json[QString("AncillarySourceSettings")].isNull() && m_ancillary_source_settings_isValid;

    m_arib_source_settings_isValid = ::OpenAPI::fromJsonValue(m_arib_source_settings, json[QString("AribSourceSettings")]);
    m_arib_source_settings_isSet = !json[QString("AribSourceSettings")].isNull() && m_arib_source_settings_isValid;

    m_dvb_sub_source_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_sub_source_settings, json[QString("DvbSubSourceSettings")]);
    m_dvb_sub_source_settings_isSet = !json[QString("DvbSubSourceSettings")].isNull() && m_dvb_sub_source_settings_isValid;

    m_embedded_source_settings_isValid = ::OpenAPI::fromJsonValue(m_embedded_source_settings, json[QString("EmbeddedSourceSettings")]);
    m_embedded_source_settings_isSet = !json[QString("EmbeddedSourceSettings")].isNull() && m_embedded_source_settings_isValid;

    m_scte20_source_settings_isValid = ::OpenAPI::fromJsonValue(m_scte20_source_settings, json[QString("Scte20SourceSettings")]);
    m_scte20_source_settings_isSet = !json[QString("Scte20SourceSettings")].isNull() && m_scte20_source_settings_isValid;

    m_scte27_source_settings_isValid = ::OpenAPI::fromJsonValue(m_scte27_source_settings, json[QString("Scte27SourceSettings")]);
    m_scte27_source_settings_isSet = !json[QString("Scte27SourceSettings")].isNull() && m_scte27_source_settings_isValid;

    m_teletext_source_settings_isValid = ::OpenAPI::fromJsonValue(m_teletext_source_settings, json[QString("TeletextSourceSettings")]);
    m_teletext_source_settings_isSet = !json[QString("TeletextSourceSettings")].isNull() && m_teletext_source_settings_isValid;
}

QString OAICaptionSelector_SelectorSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptionSelector_SelectorSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ancillary_source_settings.isSet()) {
        obj.insert(QString("AncillarySourceSettings"), ::OpenAPI::toJsonValue(m_ancillary_source_settings));
    }
    if (m_arib_source_settings.isSet()) {
        obj.insert(QString("AribSourceSettings"), ::OpenAPI::toJsonValue(m_arib_source_settings));
    }
    if (m_dvb_sub_source_settings.isSet()) {
        obj.insert(QString("DvbSubSourceSettings"), ::OpenAPI::toJsonValue(m_dvb_sub_source_settings));
    }
    if (m_embedded_source_settings.isSet()) {
        obj.insert(QString("EmbeddedSourceSettings"), ::OpenAPI::toJsonValue(m_embedded_source_settings));
    }
    if (m_scte20_source_settings.isSet()) {
        obj.insert(QString("Scte20SourceSettings"), ::OpenAPI::toJsonValue(m_scte20_source_settings));
    }
    if (m_scte27_source_settings.isSet()) {
        obj.insert(QString("Scte27SourceSettings"), ::OpenAPI::toJsonValue(m_scte27_source_settings));
    }
    if (m_teletext_source_settings.isSet()) {
        obj.insert(QString("TeletextSourceSettings"), ::OpenAPI::toJsonValue(m_teletext_source_settings));
    }
    return obj;
}

OAICaptionSelectorSettings_AncillarySourceSettings OAICaptionSelector_SelectorSettings::getAncillarySourceSettings() const {
    return m_ancillary_source_settings;
}
void OAICaptionSelector_SelectorSettings::setAncillarySourceSettings(const OAICaptionSelectorSettings_AncillarySourceSettings &ancillary_source_settings) {
    m_ancillary_source_settings = ancillary_source_settings;
    m_ancillary_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_ancillary_source_settings_Set() const{
    return m_ancillary_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_ancillary_source_settings_Valid() const{
    return m_ancillary_source_settings_isValid;
}

OAIObject OAICaptionSelector_SelectorSettings::getAribSourceSettings() const {
    return m_arib_source_settings;
}
void OAICaptionSelector_SelectorSettings::setAribSourceSettings(const OAIObject &arib_source_settings) {
    m_arib_source_settings = arib_source_settings;
    m_arib_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_arib_source_settings_Set() const{
    return m_arib_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_arib_source_settings_Valid() const{
    return m_arib_source_settings_isValid;
}

OAICaptionSelectorSettings_DvbSubSourceSettings OAICaptionSelector_SelectorSettings::getDvbSubSourceSettings() const {
    return m_dvb_sub_source_settings;
}
void OAICaptionSelector_SelectorSettings::setDvbSubSourceSettings(const OAICaptionSelectorSettings_DvbSubSourceSettings &dvb_sub_source_settings) {
    m_dvb_sub_source_settings = dvb_sub_source_settings;
    m_dvb_sub_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_dvb_sub_source_settings_Set() const{
    return m_dvb_sub_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_dvb_sub_source_settings_Valid() const{
    return m_dvb_sub_source_settings_isValid;
}

OAICaptionSelectorSettings_EmbeddedSourceSettings OAICaptionSelector_SelectorSettings::getEmbeddedSourceSettings() const {
    return m_embedded_source_settings;
}
void OAICaptionSelector_SelectorSettings::setEmbeddedSourceSettings(const OAICaptionSelectorSettings_EmbeddedSourceSettings &embedded_source_settings) {
    m_embedded_source_settings = embedded_source_settings;
    m_embedded_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_embedded_source_settings_Set() const{
    return m_embedded_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_embedded_source_settings_Valid() const{
    return m_embedded_source_settings_isValid;
}

OAICaptionSelectorSettings_Scte20SourceSettings OAICaptionSelector_SelectorSettings::getScte20SourceSettings() const {
    return m_scte20_source_settings;
}
void OAICaptionSelector_SelectorSettings::setScte20SourceSettings(const OAICaptionSelectorSettings_Scte20SourceSettings &scte20_source_settings) {
    m_scte20_source_settings = scte20_source_settings;
    m_scte20_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_scte20_source_settings_Set() const{
    return m_scte20_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_scte20_source_settings_Valid() const{
    return m_scte20_source_settings_isValid;
}

OAICaptionSelectorSettings_Scte27SourceSettings OAICaptionSelector_SelectorSettings::getScte27SourceSettings() const {
    return m_scte27_source_settings;
}
void OAICaptionSelector_SelectorSettings::setScte27SourceSettings(const OAICaptionSelectorSettings_Scte27SourceSettings &scte27_source_settings) {
    m_scte27_source_settings = scte27_source_settings;
    m_scte27_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_scte27_source_settings_Set() const{
    return m_scte27_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_scte27_source_settings_Valid() const{
    return m_scte27_source_settings_isValid;
}

OAICaptionSelectorSettings_TeletextSourceSettings OAICaptionSelector_SelectorSettings::getTeletextSourceSettings() const {
    return m_teletext_source_settings;
}
void OAICaptionSelector_SelectorSettings::setTeletextSourceSettings(const OAICaptionSelectorSettings_TeletextSourceSettings &teletext_source_settings) {
    m_teletext_source_settings = teletext_source_settings;
    m_teletext_source_settings_isSet = true;
}

bool OAICaptionSelector_SelectorSettings::is_teletext_source_settings_Set() const{
    return m_teletext_source_settings_isSet;
}

bool OAICaptionSelector_SelectorSettings::is_teletext_source_settings_Valid() const{
    return m_teletext_source_settings_isValid;
}

bool OAICaptionSelector_SelectorSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancillary_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arib_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sub_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte20_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte27_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teletext_source_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptionSelector_SelectorSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
