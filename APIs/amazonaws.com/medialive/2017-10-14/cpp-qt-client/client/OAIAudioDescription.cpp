/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioDescription::OAIAudioDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioDescription::OAIAudioDescription() {
    this->initializeModel();
}

OAIAudioDescription::~OAIAudioDescription() {}

void OAIAudioDescription::initializeModel() {

    m_audio_normalization_settings_isSet = false;
    m_audio_normalization_settings_isValid = false;

    m_audio_selector_name_isSet = false;
    m_audio_selector_name_isValid = false;

    m_audio_type_isSet = false;
    m_audio_type_isValid = false;

    m_audio_type_control_isSet = false;
    m_audio_type_control_isValid = false;

    m_audio_watermarking_settings_isSet = false;
    m_audio_watermarking_settings_isValid = false;

    m_codec_settings_isSet = false;
    m_codec_settings_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_language_code_control_isSet = false;
    m_language_code_control_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_remix_settings_isSet = false;
    m_remix_settings_isValid = false;

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;
}

void OAIAudioDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioDescription::fromJsonObject(QJsonObject json) {

    m_audio_normalization_settings_isValid = ::OpenAPI::fromJsonValue(m_audio_normalization_settings, json[QString("AudioNormalizationSettings")]);
    m_audio_normalization_settings_isSet = !json[QString("AudioNormalizationSettings")].isNull() && m_audio_normalization_settings_isValid;

    m_audio_selector_name_isValid = ::OpenAPI::fromJsonValue(m_audio_selector_name, json[QString("AudioSelectorName")]);
    m_audio_selector_name_isSet = !json[QString("AudioSelectorName")].isNull() && m_audio_selector_name_isValid;

    m_audio_type_isValid = ::OpenAPI::fromJsonValue(m_audio_type, json[QString("AudioType")]);
    m_audio_type_isSet = !json[QString("AudioType")].isNull() && m_audio_type_isValid;

    m_audio_type_control_isValid = ::OpenAPI::fromJsonValue(m_audio_type_control, json[QString("AudioTypeControl")]);
    m_audio_type_control_isSet = !json[QString("AudioTypeControl")].isNull() && m_audio_type_control_isValid;

    m_audio_watermarking_settings_isValid = ::OpenAPI::fromJsonValue(m_audio_watermarking_settings, json[QString("AudioWatermarkingSettings")]);
    m_audio_watermarking_settings_isSet = !json[QString("AudioWatermarkingSettings")].isNull() && m_audio_watermarking_settings_isValid;

    m_codec_settings_isValid = ::OpenAPI::fromJsonValue(m_codec_settings, json[QString("CodecSettings")]);
    m_codec_settings_isSet = !json[QString("CodecSettings")].isNull() && m_codec_settings_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_language_code_control_isValid = ::OpenAPI::fromJsonValue(m_language_code_control, json[QString("LanguageCodeControl")]);
    m_language_code_control_isSet = !json[QString("LanguageCodeControl")].isNull() && m_language_code_control_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_remix_settings_isValid = ::OpenAPI::fromJsonValue(m_remix_settings, json[QString("RemixSettings")]);
    m_remix_settings_isSet = !json[QString("RemixSettings")].isNull() && m_remix_settings_isValid;

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;
}

QString OAIAudioDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_normalization_settings.isSet()) {
        obj.insert(QString("AudioNormalizationSettings"), ::OpenAPI::toJsonValue(m_audio_normalization_settings));
    }
    if (m_audio_selector_name_isSet) {
        obj.insert(QString("AudioSelectorName"), ::OpenAPI::toJsonValue(m_audio_selector_name));
    }
    if (m_audio_type.isSet()) {
        obj.insert(QString("AudioType"), ::OpenAPI::toJsonValue(m_audio_type));
    }
    if (m_audio_type_control.isSet()) {
        obj.insert(QString("AudioTypeControl"), ::OpenAPI::toJsonValue(m_audio_type_control));
    }
    if (m_audio_watermarking_settings.isSet()) {
        obj.insert(QString("AudioWatermarkingSettings"), ::OpenAPI::toJsonValue(m_audio_watermarking_settings));
    }
    if (m_codec_settings.isSet()) {
        obj.insert(QString("CodecSettings"), ::OpenAPI::toJsonValue(m_codec_settings));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_language_code_control.isSet()) {
        obj.insert(QString("LanguageCodeControl"), ::OpenAPI::toJsonValue(m_language_code_control));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_remix_settings.isSet()) {
        obj.insert(QString("RemixSettings"), ::OpenAPI::toJsonValue(m_remix_settings));
    }
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    return obj;
}

OAIAudioDescription_AudioNormalizationSettings OAIAudioDescription::getAudioNormalizationSettings() const {
    return m_audio_normalization_settings;
}
void OAIAudioDescription::setAudioNormalizationSettings(const OAIAudioDescription_AudioNormalizationSettings &audio_normalization_settings) {
    m_audio_normalization_settings = audio_normalization_settings;
    m_audio_normalization_settings_isSet = true;
}

bool OAIAudioDescription::is_audio_normalization_settings_Set() const{
    return m_audio_normalization_settings_isSet;
}

bool OAIAudioDescription::is_audio_normalization_settings_Valid() const{
    return m_audio_normalization_settings_isValid;
}

QString OAIAudioDescription::getAudioSelectorName() const {
    return m_audio_selector_name;
}
void OAIAudioDescription::setAudioSelectorName(const QString &audio_selector_name) {
    m_audio_selector_name = audio_selector_name;
    m_audio_selector_name_isSet = true;
}

bool OAIAudioDescription::is_audio_selector_name_Set() const{
    return m_audio_selector_name_isSet;
}

bool OAIAudioDescription::is_audio_selector_name_Valid() const{
    return m_audio_selector_name_isValid;
}

OAIAudioType OAIAudioDescription::getAudioType() const {
    return m_audio_type;
}
void OAIAudioDescription::setAudioType(const OAIAudioType &audio_type) {
    m_audio_type = audio_type;
    m_audio_type_isSet = true;
}

bool OAIAudioDescription::is_audio_type_Set() const{
    return m_audio_type_isSet;
}

bool OAIAudioDescription::is_audio_type_Valid() const{
    return m_audio_type_isValid;
}

OAIAudioDescriptionAudioTypeControl OAIAudioDescription::getAudioTypeControl() const {
    return m_audio_type_control;
}
void OAIAudioDescription::setAudioTypeControl(const OAIAudioDescriptionAudioTypeControl &audio_type_control) {
    m_audio_type_control = audio_type_control;
    m_audio_type_control_isSet = true;
}

bool OAIAudioDescription::is_audio_type_control_Set() const{
    return m_audio_type_control_isSet;
}

bool OAIAudioDescription::is_audio_type_control_Valid() const{
    return m_audio_type_control_isValid;
}

OAIAudioDescription_AudioWatermarkingSettings OAIAudioDescription::getAudioWatermarkingSettings() const {
    return m_audio_watermarking_settings;
}
void OAIAudioDescription::setAudioWatermarkingSettings(const OAIAudioDescription_AudioWatermarkingSettings &audio_watermarking_settings) {
    m_audio_watermarking_settings = audio_watermarking_settings;
    m_audio_watermarking_settings_isSet = true;
}

bool OAIAudioDescription::is_audio_watermarking_settings_Set() const{
    return m_audio_watermarking_settings_isSet;
}

bool OAIAudioDescription::is_audio_watermarking_settings_Valid() const{
    return m_audio_watermarking_settings_isValid;
}

OAIAudioDescription_CodecSettings OAIAudioDescription::getCodecSettings() const {
    return m_codec_settings;
}
void OAIAudioDescription::setCodecSettings(const OAIAudioDescription_CodecSettings &codec_settings) {
    m_codec_settings = codec_settings;
    m_codec_settings_isSet = true;
}

bool OAIAudioDescription::is_codec_settings_Set() const{
    return m_codec_settings_isSet;
}

bool OAIAudioDescription::is_codec_settings_Valid() const{
    return m_codec_settings_isValid;
}

QString OAIAudioDescription::getLanguageCode() const {
    return m_language_code;
}
void OAIAudioDescription::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIAudioDescription::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIAudioDescription::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIAudioDescriptionLanguageCodeControl OAIAudioDescription::getLanguageCodeControl() const {
    return m_language_code_control;
}
void OAIAudioDescription::setLanguageCodeControl(const OAIAudioDescriptionLanguageCodeControl &language_code_control) {
    m_language_code_control = language_code_control;
    m_language_code_control_isSet = true;
}

bool OAIAudioDescription::is_language_code_control_Set() const{
    return m_language_code_control_isSet;
}

bool OAIAudioDescription::is_language_code_control_Valid() const{
    return m_language_code_control_isValid;
}

QString OAIAudioDescription::getName() const {
    return m_name;
}
void OAIAudioDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAudioDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAudioDescription::is_name_Valid() const{
    return m_name_isValid;
}

OAIAudioDescription_RemixSettings OAIAudioDescription::getRemixSettings() const {
    return m_remix_settings;
}
void OAIAudioDescription::setRemixSettings(const OAIAudioDescription_RemixSettings &remix_settings) {
    m_remix_settings = remix_settings;
    m_remix_settings_isSet = true;
}

bool OAIAudioDescription::is_remix_settings_Set() const{
    return m_remix_settings_isSet;
}

bool OAIAudioDescription::is_remix_settings_Valid() const{
    return m_remix_settings_isValid;
}

QString OAIAudioDescription::getStreamName() const {
    return m_stream_name;
}
void OAIAudioDescription::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIAudioDescription::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIAudioDescription::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

bool OAIAudioDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_normalization_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_selector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_type_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_watermarking_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remix_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_selector_name_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
