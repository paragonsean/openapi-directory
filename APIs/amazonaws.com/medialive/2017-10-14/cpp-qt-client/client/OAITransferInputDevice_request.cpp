/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferInputDevice_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferInputDevice_request::OAITransferInputDevice_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferInputDevice_request::OAITransferInputDevice_request() {
    this->initializeModel();
}

OAITransferInputDevice_request::~OAITransferInputDevice_request() {}

void OAITransferInputDevice_request::initializeModel() {

    m_target_customer_id_isSet = false;
    m_target_customer_id_isValid = false;

    m_target_region_isSet = false;
    m_target_region_isValid = false;

    m_transfer_message_isSet = false;
    m_transfer_message_isValid = false;
}

void OAITransferInputDevice_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferInputDevice_request::fromJsonObject(QJsonObject json) {

    m_target_customer_id_isValid = ::OpenAPI::fromJsonValue(m_target_customer_id, json[QString("targetCustomerId")]);
    m_target_customer_id_isSet = !json[QString("targetCustomerId")].isNull() && m_target_customer_id_isValid;

    m_target_region_isValid = ::OpenAPI::fromJsonValue(m_target_region, json[QString("targetRegion")]);
    m_target_region_isSet = !json[QString("targetRegion")].isNull() && m_target_region_isValid;

    m_transfer_message_isValid = ::OpenAPI::fromJsonValue(m_transfer_message, json[QString("transferMessage")]);
    m_transfer_message_isSet = !json[QString("transferMessage")].isNull() && m_transfer_message_isValid;
}

QString OAITransferInputDevice_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferInputDevice_request::asJsonObject() const {
    QJsonObject obj;
    if (m_target_customer_id_isSet) {
        obj.insert(QString("targetCustomerId"), ::OpenAPI::toJsonValue(m_target_customer_id));
    }
    if (m_target_region_isSet) {
        obj.insert(QString("targetRegion"), ::OpenAPI::toJsonValue(m_target_region));
    }
    if (m_transfer_message_isSet) {
        obj.insert(QString("transferMessage"), ::OpenAPI::toJsonValue(m_transfer_message));
    }
    return obj;
}

QString OAITransferInputDevice_request::getTargetCustomerId() const {
    return m_target_customer_id;
}
void OAITransferInputDevice_request::setTargetCustomerId(const QString &target_customer_id) {
    m_target_customer_id = target_customer_id;
    m_target_customer_id_isSet = true;
}

bool OAITransferInputDevice_request::is_target_customer_id_Set() const{
    return m_target_customer_id_isSet;
}

bool OAITransferInputDevice_request::is_target_customer_id_Valid() const{
    return m_target_customer_id_isValid;
}

QString OAITransferInputDevice_request::getTargetRegion() const {
    return m_target_region;
}
void OAITransferInputDevice_request::setTargetRegion(const QString &target_region) {
    m_target_region = target_region;
    m_target_region_isSet = true;
}

bool OAITransferInputDevice_request::is_target_region_Set() const{
    return m_target_region_isSet;
}

bool OAITransferInputDevice_request::is_target_region_Valid() const{
    return m_target_region_isValid;
}

QString OAITransferInputDevice_request::getTransferMessage() const {
    return m_transfer_message;
}
void OAITransferInputDevice_request::setTransferMessage(const QString &transfer_message) {
    m_transfer_message = transfer_message;
    m_transfer_message_isSet = true;
}

bool OAITransferInputDevice_request::is_transfer_message_Set() const{
    return m_transfer_message_isSet;
}

bool OAITransferInputDevice_request::is_transfer_message_Valid() const{
    return m_transfer_message_isValid;
}

bool OAITransferInputDevice_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferInputDevice_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
