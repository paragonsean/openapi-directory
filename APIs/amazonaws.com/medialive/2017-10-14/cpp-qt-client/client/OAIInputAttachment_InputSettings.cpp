/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputAttachment_InputSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputAttachment_InputSettings::OAIInputAttachment_InputSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputAttachment_InputSettings::OAIInputAttachment_InputSettings() {
    this->initializeModel();
}

OAIInputAttachment_InputSettings::~OAIInputAttachment_InputSettings() {}

void OAIInputAttachment_InputSettings::initializeModel() {

    m_audio_selectors_isSet = false;
    m_audio_selectors_isValid = false;

    m_caption_selectors_isSet = false;
    m_caption_selectors_isValid = false;

    m_deblock_filter_isSet = false;
    m_deblock_filter_isValid = false;

    m_denoise_filter_isSet = false;
    m_denoise_filter_isValid = false;

    m_filter_strength_isSet = false;
    m_filter_strength_isValid = false;

    m_input_filter_isSet = false;
    m_input_filter_isValid = false;

    m_network_input_settings_isSet = false;
    m_network_input_settings_isValid = false;

    m_scte35_pid_isSet = false;
    m_scte35_pid_isValid = false;

    m_smpte2038_data_preference_isSet = false;
    m_smpte2038_data_preference_isValid = false;

    m_source_end_behavior_isSet = false;
    m_source_end_behavior_isValid = false;

    m_video_selector_isSet = false;
    m_video_selector_isValid = false;
}

void OAIInputAttachment_InputSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputAttachment_InputSettings::fromJsonObject(QJsonObject json) {

    m_audio_selectors_isValid = ::OpenAPI::fromJsonValue(m_audio_selectors, json[QString("AudioSelectors")]);
    m_audio_selectors_isSet = !json[QString("AudioSelectors")].isNull() && m_audio_selectors_isValid;

    m_caption_selectors_isValid = ::OpenAPI::fromJsonValue(m_caption_selectors, json[QString("CaptionSelectors")]);
    m_caption_selectors_isSet = !json[QString("CaptionSelectors")].isNull() && m_caption_selectors_isValid;

    m_deblock_filter_isValid = ::OpenAPI::fromJsonValue(m_deblock_filter, json[QString("DeblockFilter")]);
    m_deblock_filter_isSet = !json[QString("DeblockFilter")].isNull() && m_deblock_filter_isValid;

    m_denoise_filter_isValid = ::OpenAPI::fromJsonValue(m_denoise_filter, json[QString("DenoiseFilter")]);
    m_denoise_filter_isSet = !json[QString("DenoiseFilter")].isNull() && m_denoise_filter_isValid;

    m_filter_strength_isValid = ::OpenAPI::fromJsonValue(m_filter_strength, json[QString("FilterStrength")]);
    m_filter_strength_isSet = !json[QString("FilterStrength")].isNull() && m_filter_strength_isValid;

    m_input_filter_isValid = ::OpenAPI::fromJsonValue(m_input_filter, json[QString("InputFilter")]);
    m_input_filter_isSet = !json[QString("InputFilter")].isNull() && m_input_filter_isValid;

    m_network_input_settings_isValid = ::OpenAPI::fromJsonValue(m_network_input_settings, json[QString("NetworkInputSettings")]);
    m_network_input_settings_isSet = !json[QString("NetworkInputSettings")].isNull() && m_network_input_settings_isValid;

    m_scte35_pid_isValid = ::OpenAPI::fromJsonValue(m_scte35_pid, json[QString("Scte35Pid")]);
    m_scte35_pid_isSet = !json[QString("Scte35Pid")].isNull() && m_scte35_pid_isValid;

    m_smpte2038_data_preference_isValid = ::OpenAPI::fromJsonValue(m_smpte2038_data_preference, json[QString("Smpte2038DataPreference")]);
    m_smpte2038_data_preference_isSet = !json[QString("Smpte2038DataPreference")].isNull() && m_smpte2038_data_preference_isValid;

    m_source_end_behavior_isValid = ::OpenAPI::fromJsonValue(m_source_end_behavior, json[QString("SourceEndBehavior")]);
    m_source_end_behavior_isSet = !json[QString("SourceEndBehavior")].isNull() && m_source_end_behavior_isValid;

    m_video_selector_isValid = ::OpenAPI::fromJsonValue(m_video_selector, json[QString("VideoSelector")]);
    m_video_selector_isSet = !json[QString("VideoSelector")].isNull() && m_video_selector_isValid;
}

QString OAIInputAttachment_InputSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputAttachment_InputSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_selectors.isSet()) {
        obj.insert(QString("AudioSelectors"), ::OpenAPI::toJsonValue(m_audio_selectors));
    }
    if (m_caption_selectors.isSet()) {
        obj.insert(QString("CaptionSelectors"), ::OpenAPI::toJsonValue(m_caption_selectors));
    }
    if (m_deblock_filter.isSet()) {
        obj.insert(QString("DeblockFilter"), ::OpenAPI::toJsonValue(m_deblock_filter));
    }
    if (m_denoise_filter.isSet()) {
        obj.insert(QString("DenoiseFilter"), ::OpenAPI::toJsonValue(m_denoise_filter));
    }
    if (m_filter_strength_isSet) {
        obj.insert(QString("FilterStrength"), ::OpenAPI::toJsonValue(m_filter_strength));
    }
    if (m_input_filter.isSet()) {
        obj.insert(QString("InputFilter"), ::OpenAPI::toJsonValue(m_input_filter));
    }
    if (m_network_input_settings.isSet()) {
        obj.insert(QString("NetworkInputSettings"), ::OpenAPI::toJsonValue(m_network_input_settings));
    }
    if (m_scte35_pid_isSet) {
        obj.insert(QString("Scte35Pid"), ::OpenAPI::toJsonValue(m_scte35_pid));
    }
    if (m_smpte2038_data_preference.isSet()) {
        obj.insert(QString("Smpte2038DataPreference"), ::OpenAPI::toJsonValue(m_smpte2038_data_preference));
    }
    if (m_source_end_behavior.isSet()) {
        obj.insert(QString("SourceEndBehavior"), ::OpenAPI::toJsonValue(m_source_end_behavior));
    }
    if (m_video_selector.isSet()) {
        obj.insert(QString("VideoSelector"), ::OpenAPI::toJsonValue(m_video_selector));
    }
    return obj;
}

QList OAIInputAttachment_InputSettings::getAudioSelectors() const {
    return m_audio_selectors;
}
void OAIInputAttachment_InputSettings::setAudioSelectors(const QList &audio_selectors) {
    m_audio_selectors = audio_selectors;
    m_audio_selectors_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_audio_selectors_Set() const{
    return m_audio_selectors_isSet;
}

bool OAIInputAttachment_InputSettings::is_audio_selectors_Valid() const{
    return m_audio_selectors_isValid;
}

QList OAIInputAttachment_InputSettings::getCaptionSelectors() const {
    return m_caption_selectors;
}
void OAIInputAttachment_InputSettings::setCaptionSelectors(const QList &caption_selectors) {
    m_caption_selectors = caption_selectors;
    m_caption_selectors_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_caption_selectors_Set() const{
    return m_caption_selectors_isSet;
}

bool OAIInputAttachment_InputSettings::is_caption_selectors_Valid() const{
    return m_caption_selectors_isValid;
}

OAIInputDeblockFilter OAIInputAttachment_InputSettings::getDeblockFilter() const {
    return m_deblock_filter;
}
void OAIInputAttachment_InputSettings::setDeblockFilter(const OAIInputDeblockFilter &deblock_filter) {
    m_deblock_filter = deblock_filter;
    m_deblock_filter_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_deblock_filter_Set() const{
    return m_deblock_filter_isSet;
}

bool OAIInputAttachment_InputSettings::is_deblock_filter_Valid() const{
    return m_deblock_filter_isValid;
}

OAIInputDenoiseFilter OAIInputAttachment_InputSettings::getDenoiseFilter() const {
    return m_denoise_filter;
}
void OAIInputAttachment_InputSettings::setDenoiseFilter(const OAIInputDenoiseFilter &denoise_filter) {
    m_denoise_filter = denoise_filter;
    m_denoise_filter_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_denoise_filter_Set() const{
    return m_denoise_filter_isSet;
}

bool OAIInputAttachment_InputSettings::is_denoise_filter_Valid() const{
    return m_denoise_filter_isValid;
}

qint32 OAIInputAttachment_InputSettings::getFilterStrength() const {
    return m_filter_strength;
}
void OAIInputAttachment_InputSettings::setFilterStrength(const qint32 &filter_strength) {
    m_filter_strength = filter_strength;
    m_filter_strength_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_filter_strength_Set() const{
    return m_filter_strength_isSet;
}

bool OAIInputAttachment_InputSettings::is_filter_strength_Valid() const{
    return m_filter_strength_isValid;
}

OAIInputFilter OAIInputAttachment_InputSettings::getInputFilter() const {
    return m_input_filter;
}
void OAIInputAttachment_InputSettings::setInputFilter(const OAIInputFilter &input_filter) {
    m_input_filter = input_filter;
    m_input_filter_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_input_filter_Set() const{
    return m_input_filter_isSet;
}

bool OAIInputAttachment_InputSettings::is_input_filter_Valid() const{
    return m_input_filter_isValid;
}

OAIInputSettings_NetworkInputSettings OAIInputAttachment_InputSettings::getNetworkInputSettings() const {
    return m_network_input_settings;
}
void OAIInputAttachment_InputSettings::setNetworkInputSettings(const OAIInputSettings_NetworkInputSettings &network_input_settings) {
    m_network_input_settings = network_input_settings;
    m_network_input_settings_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_network_input_settings_Set() const{
    return m_network_input_settings_isSet;
}

bool OAIInputAttachment_InputSettings::is_network_input_settings_Valid() const{
    return m_network_input_settings_isValid;
}

qint32 OAIInputAttachment_InputSettings::getScte35Pid() const {
    return m_scte35_pid;
}
void OAIInputAttachment_InputSettings::setScte35Pid(const qint32 &scte35_pid) {
    m_scte35_pid = scte35_pid;
    m_scte35_pid_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_scte35_pid_Set() const{
    return m_scte35_pid_isSet;
}

bool OAIInputAttachment_InputSettings::is_scte35_pid_Valid() const{
    return m_scte35_pid_isValid;
}

OAISmpte2038DataPreference OAIInputAttachment_InputSettings::getSmpte2038DataPreference() const {
    return m_smpte2038_data_preference;
}
void OAIInputAttachment_InputSettings::setSmpte2038DataPreference(const OAISmpte2038DataPreference &smpte2038_data_preference) {
    m_smpte2038_data_preference = smpte2038_data_preference;
    m_smpte2038_data_preference_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_smpte2038_data_preference_Set() const{
    return m_smpte2038_data_preference_isSet;
}

bool OAIInputAttachment_InputSettings::is_smpte2038_data_preference_Valid() const{
    return m_smpte2038_data_preference_isValid;
}

OAIInputSourceEndBehavior OAIInputAttachment_InputSettings::getSourceEndBehavior() const {
    return m_source_end_behavior;
}
void OAIInputAttachment_InputSettings::setSourceEndBehavior(const OAIInputSourceEndBehavior &source_end_behavior) {
    m_source_end_behavior = source_end_behavior;
    m_source_end_behavior_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_source_end_behavior_Set() const{
    return m_source_end_behavior_isSet;
}

bool OAIInputAttachment_InputSettings::is_source_end_behavior_Valid() const{
    return m_source_end_behavior_isValid;
}

OAIInputSettings_VideoSelector OAIInputAttachment_InputSettings::getVideoSelector() const {
    return m_video_selector;
}
void OAIInputAttachment_InputSettings::setVideoSelector(const OAIInputSettings_VideoSelector &video_selector) {
    m_video_selector = video_selector;
    m_video_selector_isSet = true;
}

bool OAIInputAttachment_InputSettings::is_video_selector_Set() const{
    return m_video_selector_isSet;
}

bool OAIInputAttachment_InputSettings::is_video_selector_Valid() const{
    return m_video_selector_isValid;
}

bool OAIInputAttachment_InputSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deblock_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_denoise_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_input_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smpte2038_data_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_end_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputAttachment_InputSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
