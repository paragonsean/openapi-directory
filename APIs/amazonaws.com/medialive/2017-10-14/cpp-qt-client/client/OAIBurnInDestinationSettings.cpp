/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBurnInDestinationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBurnInDestinationSettings::OAIBurnInDestinationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBurnInDestinationSettings::OAIBurnInDestinationSettings() {
    this->initializeModel();
}

OAIBurnInDestinationSettings::~OAIBurnInDestinationSettings() {}

void OAIBurnInDestinationSettings::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_background_opacity_isSet = false;
    m_background_opacity_isValid = false;

    m_font_isSet = false;
    m_font_isValid = false;

    m_font_color_isSet = false;
    m_font_color_isValid = false;

    m_font_opacity_isSet = false;
    m_font_opacity_isValid = false;

    m_font_resolution_isSet = false;
    m_font_resolution_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_outline_color_isSet = false;
    m_outline_color_isValid = false;

    m_outline_size_isSet = false;
    m_outline_size_isValid = false;

    m_shadow_color_isSet = false;
    m_shadow_color_isValid = false;

    m_shadow_opacity_isSet = false;
    m_shadow_opacity_isValid = false;

    m_shadow_x_offset_isSet = false;
    m_shadow_x_offset_isValid = false;

    m_shadow_y_offset_isSet = false;
    m_shadow_y_offset_isValid = false;

    m_teletext_grid_control_isSet = false;
    m_teletext_grid_control_isValid = false;

    m_x_position_isSet = false;
    m_x_position_isValid = false;

    m_y_position_isSet = false;
    m_y_position_isValid = false;
}

void OAIBurnInDestinationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBurnInDestinationSettings::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("Alignment")]);
    m_alignment_isSet = !json[QString("Alignment")].isNull() && m_alignment_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_background_opacity_isValid = ::OpenAPI::fromJsonValue(m_background_opacity, json[QString("BackgroundOpacity")]);
    m_background_opacity_isSet = !json[QString("BackgroundOpacity")].isNull() && m_background_opacity_isValid;

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("Font")]);
    m_font_isSet = !json[QString("Font")].isNull() && m_font_isValid;

    m_font_color_isValid = ::OpenAPI::fromJsonValue(m_font_color, json[QString("FontColor")]);
    m_font_color_isSet = !json[QString("FontColor")].isNull() && m_font_color_isValid;

    m_font_opacity_isValid = ::OpenAPI::fromJsonValue(m_font_opacity, json[QString("FontOpacity")]);
    m_font_opacity_isSet = !json[QString("FontOpacity")].isNull() && m_font_opacity_isValid;

    m_font_resolution_isValid = ::OpenAPI::fromJsonValue(m_font_resolution, json[QString("FontResolution")]);
    m_font_resolution_isSet = !json[QString("FontResolution")].isNull() && m_font_resolution_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("FontSize")]);
    m_font_size_isSet = !json[QString("FontSize")].isNull() && m_font_size_isValid;

    m_outline_color_isValid = ::OpenAPI::fromJsonValue(m_outline_color, json[QString("OutlineColor")]);
    m_outline_color_isSet = !json[QString("OutlineColor")].isNull() && m_outline_color_isValid;

    m_outline_size_isValid = ::OpenAPI::fromJsonValue(m_outline_size, json[QString("OutlineSize")]);
    m_outline_size_isSet = !json[QString("OutlineSize")].isNull() && m_outline_size_isValid;

    m_shadow_color_isValid = ::OpenAPI::fromJsonValue(m_shadow_color, json[QString("ShadowColor")]);
    m_shadow_color_isSet = !json[QString("ShadowColor")].isNull() && m_shadow_color_isValid;

    m_shadow_opacity_isValid = ::OpenAPI::fromJsonValue(m_shadow_opacity, json[QString("ShadowOpacity")]);
    m_shadow_opacity_isSet = !json[QString("ShadowOpacity")].isNull() && m_shadow_opacity_isValid;

    m_shadow_x_offset_isValid = ::OpenAPI::fromJsonValue(m_shadow_x_offset, json[QString("ShadowXOffset")]);
    m_shadow_x_offset_isSet = !json[QString("ShadowXOffset")].isNull() && m_shadow_x_offset_isValid;

    m_shadow_y_offset_isValid = ::OpenAPI::fromJsonValue(m_shadow_y_offset, json[QString("ShadowYOffset")]);
    m_shadow_y_offset_isSet = !json[QString("ShadowYOffset")].isNull() && m_shadow_y_offset_isValid;

    m_teletext_grid_control_isValid = ::OpenAPI::fromJsonValue(m_teletext_grid_control, json[QString("TeletextGridControl")]);
    m_teletext_grid_control_isSet = !json[QString("TeletextGridControl")].isNull() && m_teletext_grid_control_isValid;

    m_x_position_isValid = ::OpenAPI::fromJsonValue(m_x_position, json[QString("XPosition")]);
    m_x_position_isSet = !json[QString("XPosition")].isNull() && m_x_position_isValid;

    m_y_position_isValid = ::OpenAPI::fromJsonValue(m_y_position, json[QString("YPosition")]);
    m_y_position_isSet = !json[QString("YPosition")].isNull() && m_y_position_isValid;
}

QString OAIBurnInDestinationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBurnInDestinationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment.isSet()) {
        obj.insert(QString("Alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_background_opacity_isSet) {
        obj.insert(QString("BackgroundOpacity"), ::OpenAPI::toJsonValue(m_background_opacity));
    }
    if (m_font.isSet()) {
        obj.insert(QString("Font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_font_color.isSet()) {
        obj.insert(QString("FontColor"), ::OpenAPI::toJsonValue(m_font_color));
    }
    if (m_font_opacity_isSet) {
        obj.insert(QString("FontOpacity"), ::OpenAPI::toJsonValue(m_font_opacity));
    }
    if (m_font_resolution_isSet) {
        obj.insert(QString("FontResolution"), ::OpenAPI::toJsonValue(m_font_resolution));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("FontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_outline_color.isSet()) {
        obj.insert(QString("OutlineColor"), ::OpenAPI::toJsonValue(m_outline_color));
    }
    if (m_outline_size_isSet) {
        obj.insert(QString("OutlineSize"), ::OpenAPI::toJsonValue(m_outline_size));
    }
    if (m_shadow_color.isSet()) {
        obj.insert(QString("ShadowColor"), ::OpenAPI::toJsonValue(m_shadow_color));
    }
    if (m_shadow_opacity_isSet) {
        obj.insert(QString("ShadowOpacity"), ::OpenAPI::toJsonValue(m_shadow_opacity));
    }
    if (m_shadow_x_offset_isSet) {
        obj.insert(QString("ShadowXOffset"), ::OpenAPI::toJsonValue(m_shadow_x_offset));
    }
    if (m_shadow_y_offset_isSet) {
        obj.insert(QString("ShadowYOffset"), ::OpenAPI::toJsonValue(m_shadow_y_offset));
    }
    if (m_teletext_grid_control.isSet()) {
        obj.insert(QString("TeletextGridControl"), ::OpenAPI::toJsonValue(m_teletext_grid_control));
    }
    if (m_x_position_isSet) {
        obj.insert(QString("XPosition"), ::OpenAPI::toJsonValue(m_x_position));
    }
    if (m_y_position_isSet) {
        obj.insert(QString("YPosition"), ::OpenAPI::toJsonValue(m_y_position));
    }
    return obj;
}

OAIBurnInAlignment OAIBurnInDestinationSettings::getAlignment() const {
    return m_alignment;
}
void OAIBurnInDestinationSettings::setAlignment(const OAIBurnInAlignment &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIBurnInDestinationSettings::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIBurnInDestinationSettings::is_alignment_Valid() const{
    return m_alignment_isValid;
}

OAIBurnInBackgroundColor OAIBurnInDestinationSettings::getBackgroundColor() const {
    return m_background_color;
}
void OAIBurnInDestinationSettings::setBackgroundColor(const OAIBurnInBackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIBurnInDestinationSettings::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIBurnInDestinationSettings::is_background_color_Valid() const{
    return m_background_color_isValid;
}

qint32 OAIBurnInDestinationSettings::getBackgroundOpacity() const {
    return m_background_opacity;
}
void OAIBurnInDestinationSettings::setBackgroundOpacity(const qint32 &background_opacity) {
    m_background_opacity = background_opacity;
    m_background_opacity_isSet = true;
}

bool OAIBurnInDestinationSettings::is_background_opacity_Set() const{
    return m_background_opacity_isSet;
}

bool OAIBurnInDestinationSettings::is_background_opacity_Valid() const{
    return m_background_opacity_isValid;
}

OAIBurnInDestinationSettings_Font OAIBurnInDestinationSettings::getFont() const {
    return m_font;
}
void OAIBurnInDestinationSettings::setFont(const OAIBurnInDestinationSettings_Font &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAIBurnInDestinationSettings::is_font_Set() const{
    return m_font_isSet;
}

bool OAIBurnInDestinationSettings::is_font_Valid() const{
    return m_font_isValid;
}

OAIBurnInFontColor OAIBurnInDestinationSettings::getFontColor() const {
    return m_font_color;
}
void OAIBurnInDestinationSettings::setFontColor(const OAIBurnInFontColor &font_color) {
    m_font_color = font_color;
    m_font_color_isSet = true;
}

bool OAIBurnInDestinationSettings::is_font_color_Set() const{
    return m_font_color_isSet;
}

bool OAIBurnInDestinationSettings::is_font_color_Valid() const{
    return m_font_color_isValid;
}

qint32 OAIBurnInDestinationSettings::getFontOpacity() const {
    return m_font_opacity;
}
void OAIBurnInDestinationSettings::setFontOpacity(const qint32 &font_opacity) {
    m_font_opacity = font_opacity;
    m_font_opacity_isSet = true;
}

bool OAIBurnInDestinationSettings::is_font_opacity_Set() const{
    return m_font_opacity_isSet;
}

bool OAIBurnInDestinationSettings::is_font_opacity_Valid() const{
    return m_font_opacity_isValid;
}

qint32 OAIBurnInDestinationSettings::getFontResolution() const {
    return m_font_resolution;
}
void OAIBurnInDestinationSettings::setFontResolution(const qint32 &font_resolution) {
    m_font_resolution = font_resolution;
    m_font_resolution_isSet = true;
}

bool OAIBurnInDestinationSettings::is_font_resolution_Set() const{
    return m_font_resolution_isSet;
}

bool OAIBurnInDestinationSettings::is_font_resolution_Valid() const{
    return m_font_resolution_isValid;
}

QString OAIBurnInDestinationSettings::getFontSize() const {
    return m_font_size;
}
void OAIBurnInDestinationSettings::setFontSize(const QString &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIBurnInDestinationSettings::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIBurnInDestinationSettings::is_font_size_Valid() const{
    return m_font_size_isValid;
}

OAIBurnInOutlineColor OAIBurnInDestinationSettings::getOutlineColor() const {
    return m_outline_color;
}
void OAIBurnInDestinationSettings::setOutlineColor(const OAIBurnInOutlineColor &outline_color) {
    m_outline_color = outline_color;
    m_outline_color_isSet = true;
}

bool OAIBurnInDestinationSettings::is_outline_color_Set() const{
    return m_outline_color_isSet;
}

bool OAIBurnInDestinationSettings::is_outline_color_Valid() const{
    return m_outline_color_isValid;
}

qint32 OAIBurnInDestinationSettings::getOutlineSize() const {
    return m_outline_size;
}
void OAIBurnInDestinationSettings::setOutlineSize(const qint32 &outline_size) {
    m_outline_size = outline_size;
    m_outline_size_isSet = true;
}

bool OAIBurnInDestinationSettings::is_outline_size_Set() const{
    return m_outline_size_isSet;
}

bool OAIBurnInDestinationSettings::is_outline_size_Valid() const{
    return m_outline_size_isValid;
}

OAIBurnInShadowColor OAIBurnInDestinationSettings::getShadowColor() const {
    return m_shadow_color;
}
void OAIBurnInDestinationSettings::setShadowColor(const OAIBurnInShadowColor &shadow_color) {
    m_shadow_color = shadow_color;
    m_shadow_color_isSet = true;
}

bool OAIBurnInDestinationSettings::is_shadow_color_Set() const{
    return m_shadow_color_isSet;
}

bool OAIBurnInDestinationSettings::is_shadow_color_Valid() const{
    return m_shadow_color_isValid;
}

qint32 OAIBurnInDestinationSettings::getShadowOpacity() const {
    return m_shadow_opacity;
}
void OAIBurnInDestinationSettings::setShadowOpacity(const qint32 &shadow_opacity) {
    m_shadow_opacity = shadow_opacity;
    m_shadow_opacity_isSet = true;
}

bool OAIBurnInDestinationSettings::is_shadow_opacity_Set() const{
    return m_shadow_opacity_isSet;
}

bool OAIBurnInDestinationSettings::is_shadow_opacity_Valid() const{
    return m_shadow_opacity_isValid;
}

qint32 OAIBurnInDestinationSettings::getShadowXOffset() const {
    return m_shadow_x_offset;
}
void OAIBurnInDestinationSettings::setShadowXOffset(const qint32 &shadow_x_offset) {
    m_shadow_x_offset = shadow_x_offset;
    m_shadow_x_offset_isSet = true;
}

bool OAIBurnInDestinationSettings::is_shadow_x_offset_Set() const{
    return m_shadow_x_offset_isSet;
}

bool OAIBurnInDestinationSettings::is_shadow_x_offset_Valid() const{
    return m_shadow_x_offset_isValid;
}

qint32 OAIBurnInDestinationSettings::getShadowYOffset() const {
    return m_shadow_y_offset;
}
void OAIBurnInDestinationSettings::setShadowYOffset(const qint32 &shadow_y_offset) {
    m_shadow_y_offset = shadow_y_offset;
    m_shadow_y_offset_isSet = true;
}

bool OAIBurnInDestinationSettings::is_shadow_y_offset_Set() const{
    return m_shadow_y_offset_isSet;
}

bool OAIBurnInDestinationSettings::is_shadow_y_offset_Valid() const{
    return m_shadow_y_offset_isValid;
}

OAIBurnInTeletextGridControl OAIBurnInDestinationSettings::getTeletextGridControl() const {
    return m_teletext_grid_control;
}
void OAIBurnInDestinationSettings::setTeletextGridControl(const OAIBurnInTeletextGridControl &teletext_grid_control) {
    m_teletext_grid_control = teletext_grid_control;
    m_teletext_grid_control_isSet = true;
}

bool OAIBurnInDestinationSettings::is_teletext_grid_control_Set() const{
    return m_teletext_grid_control_isSet;
}

bool OAIBurnInDestinationSettings::is_teletext_grid_control_Valid() const{
    return m_teletext_grid_control_isValid;
}

qint32 OAIBurnInDestinationSettings::getXPosition() const {
    return m_x_position;
}
void OAIBurnInDestinationSettings::setXPosition(const qint32 &x_position) {
    m_x_position = x_position;
    m_x_position_isSet = true;
}

bool OAIBurnInDestinationSettings::is_x_position_Set() const{
    return m_x_position_isSet;
}

bool OAIBurnInDestinationSettings::is_x_position_Valid() const{
    return m_x_position_isValid;
}

qint32 OAIBurnInDestinationSettings::getYPosition() const {
    return m_y_position;
}
void OAIBurnInDestinationSettings::setYPosition(const qint32 &y_position) {
    m_y_position = y_position;
    m_y_position_isSet = true;
}

bool OAIBurnInDestinationSettings::is_y_position_Set() const{
    return m_y_position_isSet;
}

bool OAIBurnInDestinationSettings::is_y_position_Valid() const{
    return m_y_position_isValid;
}

bool OAIBurnInDestinationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outline_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_x_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_y_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teletext_grid_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBurnInDestinationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
