/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiplexSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiplexSettings::OAIMultiplexSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiplexSettings::OAIMultiplexSettings() {
    this->initializeModel();
}

OAIMultiplexSettings::~OAIMultiplexSettings() {}

void OAIMultiplexSettings::initializeModel() {

    m_maximum_video_buffer_delay_milliseconds_isSet = false;
    m_maximum_video_buffer_delay_milliseconds_isValid = false;

    m_transport_stream_bitrate_isSet = false;
    m_transport_stream_bitrate_isValid = false;

    m_transport_stream_id_isSet = false;
    m_transport_stream_id_isValid = false;

    m_transport_stream_reserved_bitrate_isSet = false;
    m_transport_stream_reserved_bitrate_isValid = false;
}

void OAIMultiplexSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiplexSettings::fromJsonObject(QJsonObject json) {

    m_maximum_video_buffer_delay_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_video_buffer_delay_milliseconds, json[QString("MaximumVideoBufferDelayMilliseconds")]);
    m_maximum_video_buffer_delay_milliseconds_isSet = !json[QString("MaximumVideoBufferDelayMilliseconds")].isNull() && m_maximum_video_buffer_delay_milliseconds_isValid;

    m_transport_stream_bitrate_isValid = ::OpenAPI::fromJsonValue(m_transport_stream_bitrate, json[QString("TransportStreamBitrate")]);
    m_transport_stream_bitrate_isSet = !json[QString("TransportStreamBitrate")].isNull() && m_transport_stream_bitrate_isValid;

    m_transport_stream_id_isValid = ::OpenAPI::fromJsonValue(m_transport_stream_id, json[QString("TransportStreamId")]);
    m_transport_stream_id_isSet = !json[QString("TransportStreamId")].isNull() && m_transport_stream_id_isValid;

    m_transport_stream_reserved_bitrate_isValid = ::OpenAPI::fromJsonValue(m_transport_stream_reserved_bitrate, json[QString("TransportStreamReservedBitrate")]);
    m_transport_stream_reserved_bitrate_isSet = !json[QString("TransportStreamReservedBitrate")].isNull() && m_transport_stream_reserved_bitrate_isValid;
}

QString OAIMultiplexSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiplexSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_video_buffer_delay_milliseconds_isSet) {
        obj.insert(QString("MaximumVideoBufferDelayMilliseconds"), ::OpenAPI::toJsonValue(m_maximum_video_buffer_delay_milliseconds));
    }
    if (m_transport_stream_bitrate_isSet) {
        obj.insert(QString("TransportStreamBitrate"), ::OpenAPI::toJsonValue(m_transport_stream_bitrate));
    }
    if (m_transport_stream_id_isSet) {
        obj.insert(QString("TransportStreamId"), ::OpenAPI::toJsonValue(m_transport_stream_id));
    }
    if (m_transport_stream_reserved_bitrate_isSet) {
        obj.insert(QString("TransportStreamReservedBitrate"), ::OpenAPI::toJsonValue(m_transport_stream_reserved_bitrate));
    }
    return obj;
}

qint32 OAIMultiplexSettings::getMaximumVideoBufferDelayMilliseconds() const {
    return m_maximum_video_buffer_delay_milliseconds;
}
void OAIMultiplexSettings::setMaximumVideoBufferDelayMilliseconds(const qint32 &maximum_video_buffer_delay_milliseconds) {
    m_maximum_video_buffer_delay_milliseconds = maximum_video_buffer_delay_milliseconds;
    m_maximum_video_buffer_delay_milliseconds_isSet = true;
}

bool OAIMultiplexSettings::is_maximum_video_buffer_delay_milliseconds_Set() const{
    return m_maximum_video_buffer_delay_milliseconds_isSet;
}

bool OAIMultiplexSettings::is_maximum_video_buffer_delay_milliseconds_Valid() const{
    return m_maximum_video_buffer_delay_milliseconds_isValid;
}

qint32 OAIMultiplexSettings::getTransportStreamBitrate() const {
    return m_transport_stream_bitrate;
}
void OAIMultiplexSettings::setTransportStreamBitrate(const qint32 &transport_stream_bitrate) {
    m_transport_stream_bitrate = transport_stream_bitrate;
    m_transport_stream_bitrate_isSet = true;
}

bool OAIMultiplexSettings::is_transport_stream_bitrate_Set() const{
    return m_transport_stream_bitrate_isSet;
}

bool OAIMultiplexSettings::is_transport_stream_bitrate_Valid() const{
    return m_transport_stream_bitrate_isValid;
}

qint32 OAIMultiplexSettings::getTransportStreamId() const {
    return m_transport_stream_id;
}
void OAIMultiplexSettings::setTransportStreamId(const qint32 &transport_stream_id) {
    m_transport_stream_id = transport_stream_id;
    m_transport_stream_id_isSet = true;
}

bool OAIMultiplexSettings::is_transport_stream_id_Set() const{
    return m_transport_stream_id_isSet;
}

bool OAIMultiplexSettings::is_transport_stream_id_Valid() const{
    return m_transport_stream_id_isValid;
}

qint32 OAIMultiplexSettings::getTransportStreamReservedBitrate() const {
    return m_transport_stream_reserved_bitrate;
}
void OAIMultiplexSettings::setTransportStreamReservedBitrate(const qint32 &transport_stream_reserved_bitrate) {
    m_transport_stream_reserved_bitrate = transport_stream_reserved_bitrate;
    m_transport_stream_reserved_bitrate_isSet = true;
}

bool OAIMultiplexSettings::is_transport_stream_reserved_bitrate_Set() const{
    return m_transport_stream_reserved_bitrate_isSet;
}

bool OAIMultiplexSettings::is_transport_stream_reserved_bitrate_Valid() const{
    return m_transport_stream_reserved_bitrate_isValid;
}

bool OAIMultiplexSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_video_buffer_delay_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_stream_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_stream_reserved_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiplexSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transport_stream_bitrate_isValid && m_transport_stream_id_isValid && true;
}

} // namespace OpenAPI
