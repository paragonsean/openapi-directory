/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_encoderSettings_GlobalConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_encoderSettings_GlobalConfiguration::OAICreateChannel_request_encoderSettings_GlobalConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_encoderSettings_GlobalConfiguration::OAICreateChannel_request_encoderSettings_GlobalConfiguration() {
    this->initializeModel();
}

OAICreateChannel_request_encoderSettings_GlobalConfiguration::~OAICreateChannel_request_encoderSettings_GlobalConfiguration() {}

void OAICreateChannel_request_encoderSettings_GlobalConfiguration::initializeModel() {

    m_initial_audio_gain_isSet = false;
    m_initial_audio_gain_isValid = false;

    m_input_end_action_isSet = false;
    m_input_end_action_isValid = false;

    m_input_loss_behavior_isSet = false;
    m_input_loss_behavior_isValid = false;

    m_output_locking_mode_isSet = false;
    m_output_locking_mode_isValid = false;

    m_output_timing_source_isSet = false;
    m_output_timing_source_isValid = false;

    m_support_low_framerate_inputs_isSet = false;
    m_support_low_framerate_inputs_isValid = false;
}

void OAICreateChannel_request_encoderSettings_GlobalConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_encoderSettings_GlobalConfiguration::fromJsonObject(QJsonObject json) {

    m_initial_audio_gain_isValid = ::OpenAPI::fromJsonValue(m_initial_audio_gain, json[QString("InitialAudioGain")]);
    m_initial_audio_gain_isSet = !json[QString("InitialAudioGain")].isNull() && m_initial_audio_gain_isValid;

    m_input_end_action_isValid = ::OpenAPI::fromJsonValue(m_input_end_action, json[QString("InputEndAction")]);
    m_input_end_action_isSet = !json[QString("InputEndAction")].isNull() && m_input_end_action_isValid;

    m_input_loss_behavior_isValid = ::OpenAPI::fromJsonValue(m_input_loss_behavior, json[QString("InputLossBehavior")]);
    m_input_loss_behavior_isSet = !json[QString("InputLossBehavior")].isNull() && m_input_loss_behavior_isValid;

    m_output_locking_mode_isValid = ::OpenAPI::fromJsonValue(m_output_locking_mode, json[QString("OutputLockingMode")]);
    m_output_locking_mode_isSet = !json[QString("OutputLockingMode")].isNull() && m_output_locking_mode_isValid;

    m_output_timing_source_isValid = ::OpenAPI::fromJsonValue(m_output_timing_source, json[QString("OutputTimingSource")]);
    m_output_timing_source_isSet = !json[QString("OutputTimingSource")].isNull() && m_output_timing_source_isValid;

    m_support_low_framerate_inputs_isValid = ::OpenAPI::fromJsonValue(m_support_low_framerate_inputs, json[QString("SupportLowFramerateInputs")]);
    m_support_low_framerate_inputs_isSet = !json[QString("SupportLowFramerateInputs")].isNull() && m_support_low_framerate_inputs_isValid;
}

QString OAICreateChannel_request_encoderSettings_GlobalConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_encoderSettings_GlobalConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_audio_gain_isSet) {
        obj.insert(QString("InitialAudioGain"), ::OpenAPI::toJsonValue(m_initial_audio_gain));
    }
    if (m_input_end_action.isSet()) {
        obj.insert(QString("InputEndAction"), ::OpenAPI::toJsonValue(m_input_end_action));
    }
    if (m_input_loss_behavior.isSet()) {
        obj.insert(QString("InputLossBehavior"), ::OpenAPI::toJsonValue(m_input_loss_behavior));
    }
    if (m_output_locking_mode.isSet()) {
        obj.insert(QString("OutputLockingMode"), ::OpenAPI::toJsonValue(m_output_locking_mode));
    }
    if (m_output_timing_source.isSet()) {
        obj.insert(QString("OutputTimingSource"), ::OpenAPI::toJsonValue(m_output_timing_source));
    }
    if (m_support_low_framerate_inputs.isSet()) {
        obj.insert(QString("SupportLowFramerateInputs"), ::OpenAPI::toJsonValue(m_support_low_framerate_inputs));
    }
    return obj;
}

qint32 OAICreateChannel_request_encoderSettings_GlobalConfiguration::getInitialAudioGain() const {
    return m_initial_audio_gain;
}
void OAICreateChannel_request_encoderSettings_GlobalConfiguration::setInitialAudioGain(const qint32 &initial_audio_gain) {
    m_initial_audio_gain = initial_audio_gain;
    m_initial_audio_gain_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_initial_audio_gain_Set() const{
    return m_initial_audio_gain_isSet;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_initial_audio_gain_Valid() const{
    return m_initial_audio_gain_isValid;
}

OAIGlobalConfigurationInputEndAction OAICreateChannel_request_encoderSettings_GlobalConfiguration::getInputEndAction() const {
    return m_input_end_action;
}
void OAICreateChannel_request_encoderSettings_GlobalConfiguration::setInputEndAction(const OAIGlobalConfigurationInputEndAction &input_end_action) {
    m_input_end_action = input_end_action;
    m_input_end_action_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_input_end_action_Set() const{
    return m_input_end_action_isSet;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_input_end_action_Valid() const{
    return m_input_end_action_isValid;
}

OAIGlobalConfiguration_InputLossBehavior OAICreateChannel_request_encoderSettings_GlobalConfiguration::getInputLossBehavior() const {
    return m_input_loss_behavior;
}
void OAICreateChannel_request_encoderSettings_GlobalConfiguration::setInputLossBehavior(const OAIGlobalConfiguration_InputLossBehavior &input_loss_behavior) {
    m_input_loss_behavior = input_loss_behavior;
    m_input_loss_behavior_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_input_loss_behavior_Set() const{
    return m_input_loss_behavior_isSet;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_input_loss_behavior_Valid() const{
    return m_input_loss_behavior_isValid;
}

OAIGlobalConfigurationOutputLockingMode OAICreateChannel_request_encoderSettings_GlobalConfiguration::getOutputLockingMode() const {
    return m_output_locking_mode;
}
void OAICreateChannel_request_encoderSettings_GlobalConfiguration::setOutputLockingMode(const OAIGlobalConfigurationOutputLockingMode &output_locking_mode) {
    m_output_locking_mode = output_locking_mode;
    m_output_locking_mode_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_output_locking_mode_Set() const{
    return m_output_locking_mode_isSet;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_output_locking_mode_Valid() const{
    return m_output_locking_mode_isValid;
}

OAIGlobalConfigurationOutputTimingSource OAICreateChannel_request_encoderSettings_GlobalConfiguration::getOutputTimingSource() const {
    return m_output_timing_source;
}
void OAICreateChannel_request_encoderSettings_GlobalConfiguration::setOutputTimingSource(const OAIGlobalConfigurationOutputTimingSource &output_timing_source) {
    m_output_timing_source = output_timing_source;
    m_output_timing_source_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_output_timing_source_Set() const{
    return m_output_timing_source_isSet;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_output_timing_source_Valid() const{
    return m_output_timing_source_isValid;
}

OAIGlobalConfigurationLowFramerateInputs OAICreateChannel_request_encoderSettings_GlobalConfiguration::getSupportLowFramerateInputs() const {
    return m_support_low_framerate_inputs;
}
void OAICreateChannel_request_encoderSettings_GlobalConfiguration::setSupportLowFramerateInputs(const OAIGlobalConfigurationLowFramerateInputs &support_low_framerate_inputs) {
    m_support_low_framerate_inputs = support_low_framerate_inputs;
    m_support_low_framerate_inputs_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_support_low_framerate_inputs_Set() const{
    return m_support_low_framerate_inputs_isSet;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::is_support_low_framerate_inputs_Valid() const{
    return m_support_low_framerate_inputs_isValid;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_audio_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_end_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_locking_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_timing_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_low_framerate_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_encoderSettings_GlobalConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
