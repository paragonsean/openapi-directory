/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputClippingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputClippingSettings::OAIInputClippingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputClippingSettings::OAIInputClippingSettings() {
    this->initializeModel();
}

OAIInputClippingSettings::~OAIInputClippingSettings() {}

void OAIInputClippingSettings::initializeModel() {

    m_input_timecode_source_isSet = false;
    m_input_timecode_source_isValid = false;

    m_start_timecode_isSet = false;
    m_start_timecode_isValid = false;

    m_stop_timecode_isSet = false;
    m_stop_timecode_isValid = false;
}

void OAIInputClippingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputClippingSettings::fromJsonObject(QJsonObject json) {

    m_input_timecode_source_isValid = ::OpenAPI::fromJsonValue(m_input_timecode_source, json[QString("InputTimecodeSource")]);
    m_input_timecode_source_isSet = !json[QString("InputTimecodeSource")].isNull() && m_input_timecode_source_isValid;

    m_start_timecode_isValid = ::OpenAPI::fromJsonValue(m_start_timecode, json[QString("StartTimecode")]);
    m_start_timecode_isSet = !json[QString("StartTimecode")].isNull() && m_start_timecode_isValid;

    m_stop_timecode_isValid = ::OpenAPI::fromJsonValue(m_stop_timecode, json[QString("StopTimecode")]);
    m_stop_timecode_isSet = !json[QString("StopTimecode")].isNull() && m_stop_timecode_isValid;
}

QString OAIInputClippingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputClippingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_input_timecode_source.isSet()) {
        obj.insert(QString("InputTimecodeSource"), ::OpenAPI::toJsonValue(m_input_timecode_source));
    }
    if (m_start_timecode.isSet()) {
        obj.insert(QString("StartTimecode"), ::OpenAPI::toJsonValue(m_start_timecode));
    }
    if (m_stop_timecode.isSet()) {
        obj.insert(QString("StopTimecode"), ::OpenAPI::toJsonValue(m_stop_timecode));
    }
    return obj;
}

OAIInputTimecodeSource OAIInputClippingSettings::getInputTimecodeSource() const {
    return m_input_timecode_source;
}
void OAIInputClippingSettings::setInputTimecodeSource(const OAIInputTimecodeSource &input_timecode_source) {
    m_input_timecode_source = input_timecode_source;
    m_input_timecode_source_isSet = true;
}

bool OAIInputClippingSettings::is_input_timecode_source_Set() const{
    return m_input_timecode_source_isSet;
}

bool OAIInputClippingSettings::is_input_timecode_source_Valid() const{
    return m_input_timecode_source_isValid;
}

OAIInputClippingSettings_StartTimecode OAIInputClippingSettings::getStartTimecode() const {
    return m_start_timecode;
}
void OAIInputClippingSettings::setStartTimecode(const OAIInputClippingSettings_StartTimecode &start_timecode) {
    m_start_timecode = start_timecode;
    m_start_timecode_isSet = true;
}

bool OAIInputClippingSettings::is_start_timecode_Set() const{
    return m_start_timecode_isSet;
}

bool OAIInputClippingSettings::is_start_timecode_Valid() const{
    return m_start_timecode_isValid;
}

OAIInputClippingSettings_StopTimecode OAIInputClippingSettings::getStopTimecode() const {
    return m_stop_timecode;
}
void OAIInputClippingSettings::setStopTimecode(const OAIInputClippingSettings_StopTimecode &stop_timecode) {
    m_stop_timecode = stop_timecode;
    m_stop_timecode_isSet = true;
}

bool OAIInputClippingSettings::is_stop_timecode_Set() const{
    return m_stop_timecode_isSet;
}

bool OAIInputClippingSettings::is_stop_timecode_Valid() const{
    return m_stop_timecode_isValid;
}

bool OAIInputClippingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_timecode_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timecode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_timecode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputClippingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_timecode_source_isValid && true;
}

} // namespace OpenAPI
