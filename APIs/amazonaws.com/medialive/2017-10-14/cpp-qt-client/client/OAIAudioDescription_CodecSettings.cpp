/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioDescription_CodecSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioDescription_CodecSettings::OAIAudioDescription_CodecSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioDescription_CodecSettings::OAIAudioDescription_CodecSettings() {
    this->initializeModel();
}

OAIAudioDescription_CodecSettings::~OAIAudioDescription_CodecSettings() {}

void OAIAudioDescription_CodecSettings::initializeModel() {

    m_aac_settings_isSet = false;
    m_aac_settings_isValid = false;

    m_ac3_settings_isSet = false;
    m_ac3_settings_isValid = false;

    m_eac3_atmos_settings_isSet = false;
    m_eac3_atmos_settings_isValid = false;

    m_eac3_settings_isSet = false;
    m_eac3_settings_isValid = false;

    m_mp2_settings_isSet = false;
    m_mp2_settings_isValid = false;

    m_pass_through_settings_isSet = false;
    m_pass_through_settings_isValid = false;

    m_wav_settings_isSet = false;
    m_wav_settings_isValid = false;
}

void OAIAudioDescription_CodecSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioDescription_CodecSettings::fromJsonObject(QJsonObject json) {

    m_aac_settings_isValid = ::OpenAPI::fromJsonValue(m_aac_settings, json[QString("AacSettings")]);
    m_aac_settings_isSet = !json[QString("AacSettings")].isNull() && m_aac_settings_isValid;

    m_ac3_settings_isValid = ::OpenAPI::fromJsonValue(m_ac3_settings, json[QString("Ac3Settings")]);
    m_ac3_settings_isSet = !json[QString("Ac3Settings")].isNull() && m_ac3_settings_isValid;

    m_eac3_atmos_settings_isValid = ::OpenAPI::fromJsonValue(m_eac3_atmos_settings, json[QString("Eac3AtmosSettings")]);
    m_eac3_atmos_settings_isSet = !json[QString("Eac3AtmosSettings")].isNull() && m_eac3_atmos_settings_isValid;

    m_eac3_settings_isValid = ::OpenAPI::fromJsonValue(m_eac3_settings, json[QString("Eac3Settings")]);
    m_eac3_settings_isSet = !json[QString("Eac3Settings")].isNull() && m_eac3_settings_isValid;

    m_mp2_settings_isValid = ::OpenAPI::fromJsonValue(m_mp2_settings, json[QString("Mp2Settings")]);
    m_mp2_settings_isSet = !json[QString("Mp2Settings")].isNull() && m_mp2_settings_isValid;

    m_pass_through_settings_isValid = ::OpenAPI::fromJsonValue(m_pass_through_settings, json[QString("PassThroughSettings")]);
    m_pass_through_settings_isSet = !json[QString("PassThroughSettings")].isNull() && m_pass_through_settings_isValid;

    m_wav_settings_isValid = ::OpenAPI::fromJsonValue(m_wav_settings, json[QString("WavSettings")]);
    m_wav_settings_isSet = !json[QString("WavSettings")].isNull() && m_wav_settings_isValid;
}

QString OAIAudioDescription_CodecSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioDescription_CodecSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_aac_settings.isSet()) {
        obj.insert(QString("AacSettings"), ::OpenAPI::toJsonValue(m_aac_settings));
    }
    if (m_ac3_settings.isSet()) {
        obj.insert(QString("Ac3Settings"), ::OpenAPI::toJsonValue(m_ac3_settings));
    }
    if (m_eac3_atmos_settings.isSet()) {
        obj.insert(QString("Eac3AtmosSettings"), ::OpenAPI::toJsonValue(m_eac3_atmos_settings));
    }
    if (m_eac3_settings.isSet()) {
        obj.insert(QString("Eac3Settings"), ::OpenAPI::toJsonValue(m_eac3_settings));
    }
    if (m_mp2_settings.isSet()) {
        obj.insert(QString("Mp2Settings"), ::OpenAPI::toJsonValue(m_mp2_settings));
    }
    if (m_pass_through_settings.isSet()) {
        obj.insert(QString("PassThroughSettings"), ::OpenAPI::toJsonValue(m_pass_through_settings));
    }
    if (m_wav_settings.isSet()) {
        obj.insert(QString("WavSettings"), ::OpenAPI::toJsonValue(m_wav_settings));
    }
    return obj;
}

OAIAudioCodecSettings_AacSettings OAIAudioDescription_CodecSettings::getAacSettings() const {
    return m_aac_settings;
}
void OAIAudioDescription_CodecSettings::setAacSettings(const OAIAudioCodecSettings_AacSettings &aac_settings) {
    m_aac_settings = aac_settings;
    m_aac_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_aac_settings_Set() const{
    return m_aac_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_aac_settings_Valid() const{
    return m_aac_settings_isValid;
}

OAIAudioCodecSettings_Ac3Settings OAIAudioDescription_CodecSettings::getAc3Settings() const {
    return m_ac3_settings;
}
void OAIAudioDescription_CodecSettings::setAc3Settings(const OAIAudioCodecSettings_Ac3Settings &ac3_settings) {
    m_ac3_settings = ac3_settings;
    m_ac3_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_ac3_settings_Set() const{
    return m_ac3_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_ac3_settings_Valid() const{
    return m_ac3_settings_isValid;
}

OAIAudioCodecSettings_Eac3AtmosSettings OAIAudioDescription_CodecSettings::getEac3AtmosSettings() const {
    return m_eac3_atmos_settings;
}
void OAIAudioDescription_CodecSettings::setEac3AtmosSettings(const OAIAudioCodecSettings_Eac3AtmosSettings &eac3_atmos_settings) {
    m_eac3_atmos_settings = eac3_atmos_settings;
    m_eac3_atmos_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_eac3_atmos_settings_Set() const{
    return m_eac3_atmos_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_eac3_atmos_settings_Valid() const{
    return m_eac3_atmos_settings_isValid;
}

OAIAudioCodecSettings_Eac3Settings OAIAudioDescription_CodecSettings::getEac3Settings() const {
    return m_eac3_settings;
}
void OAIAudioDescription_CodecSettings::setEac3Settings(const OAIAudioCodecSettings_Eac3Settings &eac3_settings) {
    m_eac3_settings = eac3_settings;
    m_eac3_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_eac3_settings_Set() const{
    return m_eac3_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_eac3_settings_Valid() const{
    return m_eac3_settings_isValid;
}

OAIAudioCodecSettings_Mp2Settings OAIAudioDescription_CodecSettings::getMp2Settings() const {
    return m_mp2_settings;
}
void OAIAudioDescription_CodecSettings::setMp2Settings(const OAIAudioCodecSettings_Mp2Settings &mp2_settings) {
    m_mp2_settings = mp2_settings;
    m_mp2_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_mp2_settings_Set() const{
    return m_mp2_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_mp2_settings_Valid() const{
    return m_mp2_settings_isValid;
}

OAIObject OAIAudioDescription_CodecSettings::getPassThroughSettings() const {
    return m_pass_through_settings;
}
void OAIAudioDescription_CodecSettings::setPassThroughSettings(const OAIObject &pass_through_settings) {
    m_pass_through_settings = pass_through_settings;
    m_pass_through_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_pass_through_settings_Set() const{
    return m_pass_through_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_pass_through_settings_Valid() const{
    return m_pass_through_settings_isValid;
}

OAIAudioCodecSettings_WavSettings OAIAudioDescription_CodecSettings::getWavSettings() const {
    return m_wav_settings;
}
void OAIAudioDescription_CodecSettings::setWavSettings(const OAIAudioCodecSettings_WavSettings &wav_settings) {
    m_wav_settings = wav_settings;
    m_wav_settings_isSet = true;
}

bool OAIAudioDescription_CodecSettings::is_wav_settings_Set() const{
    return m_wav_settings_isSet;
}

bool OAIAudioDescription_CodecSettings::is_wav_settings_Valid() const{
    return m_wav_settings_isValid;
}

bool OAIAudioDescription_CodecSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aac_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ac3_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eac3_atmos_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eac3_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp2_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_through_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wav_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioDescription_CodecSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
