/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailSettings_Esam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailSettings_Esam::OAIAvailSettings_Esam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailSettings_Esam::OAIAvailSettings_Esam() {
    this->initializeModel();
}

OAIAvailSettings_Esam::~OAIAvailSettings_Esam() {}

void OAIAvailSettings_Esam::initializeModel() {

    m_acquisition_point_id_isSet = false;
    m_acquisition_point_id_isValid = false;

    m_ad_avail_offset_isSet = false;
    m_ad_avail_offset_isValid = false;

    m_password_param_isSet = false;
    m_password_param_isValid = false;

    m_pois_endpoint_isSet = false;
    m_pois_endpoint_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_zone_identity_isSet = false;
    m_zone_identity_isValid = false;
}

void OAIAvailSettings_Esam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailSettings_Esam::fromJsonObject(QJsonObject json) {

    m_acquisition_point_id_isValid = ::OpenAPI::fromJsonValue(m_acquisition_point_id, json[QString("AcquisitionPointId")]);
    m_acquisition_point_id_isSet = !json[QString("AcquisitionPointId")].isNull() && m_acquisition_point_id_isValid;

    m_ad_avail_offset_isValid = ::OpenAPI::fromJsonValue(m_ad_avail_offset, json[QString("AdAvailOffset")]);
    m_ad_avail_offset_isSet = !json[QString("AdAvailOffset")].isNull() && m_ad_avail_offset_isValid;

    m_password_param_isValid = ::OpenAPI::fromJsonValue(m_password_param, json[QString("PasswordParam")]);
    m_password_param_isSet = !json[QString("PasswordParam")].isNull() && m_password_param_isValid;

    m_pois_endpoint_isValid = ::OpenAPI::fromJsonValue(m_pois_endpoint, json[QString("PoisEndpoint")]);
    m_pois_endpoint_isSet = !json[QString("PoisEndpoint")].isNull() && m_pois_endpoint_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_zone_identity_isValid = ::OpenAPI::fromJsonValue(m_zone_identity, json[QString("ZoneIdentity")]);
    m_zone_identity_isSet = !json[QString("ZoneIdentity")].isNull() && m_zone_identity_isValid;
}

QString OAIAvailSettings_Esam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailSettings_Esam::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_point_id_isSet) {
        obj.insert(QString("AcquisitionPointId"), ::OpenAPI::toJsonValue(m_acquisition_point_id));
    }
    if (m_ad_avail_offset_isSet) {
        obj.insert(QString("AdAvailOffset"), ::OpenAPI::toJsonValue(m_ad_avail_offset));
    }
    if (m_password_param_isSet) {
        obj.insert(QString("PasswordParam"), ::OpenAPI::toJsonValue(m_password_param));
    }
    if (m_pois_endpoint_isSet) {
        obj.insert(QString("PoisEndpoint"), ::OpenAPI::toJsonValue(m_pois_endpoint));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_zone_identity_isSet) {
        obj.insert(QString("ZoneIdentity"), ::OpenAPI::toJsonValue(m_zone_identity));
    }
    return obj;
}

QString OAIAvailSettings_Esam::getAcquisitionPointId() const {
    return m_acquisition_point_id;
}
void OAIAvailSettings_Esam::setAcquisitionPointId(const QString &acquisition_point_id) {
    m_acquisition_point_id = acquisition_point_id;
    m_acquisition_point_id_isSet = true;
}

bool OAIAvailSettings_Esam::is_acquisition_point_id_Set() const{
    return m_acquisition_point_id_isSet;
}

bool OAIAvailSettings_Esam::is_acquisition_point_id_Valid() const{
    return m_acquisition_point_id_isValid;
}

qint32 OAIAvailSettings_Esam::getAdAvailOffset() const {
    return m_ad_avail_offset;
}
void OAIAvailSettings_Esam::setAdAvailOffset(const qint32 &ad_avail_offset) {
    m_ad_avail_offset = ad_avail_offset;
    m_ad_avail_offset_isSet = true;
}

bool OAIAvailSettings_Esam::is_ad_avail_offset_Set() const{
    return m_ad_avail_offset_isSet;
}

bool OAIAvailSettings_Esam::is_ad_avail_offset_Valid() const{
    return m_ad_avail_offset_isValid;
}

QString OAIAvailSettings_Esam::getPasswordParam() const {
    return m_password_param;
}
void OAIAvailSettings_Esam::setPasswordParam(const QString &password_param) {
    m_password_param = password_param;
    m_password_param_isSet = true;
}

bool OAIAvailSettings_Esam::is_password_param_Set() const{
    return m_password_param_isSet;
}

bool OAIAvailSettings_Esam::is_password_param_Valid() const{
    return m_password_param_isValid;
}

QString OAIAvailSettings_Esam::getPoisEndpoint() const {
    return m_pois_endpoint;
}
void OAIAvailSettings_Esam::setPoisEndpoint(const QString &pois_endpoint) {
    m_pois_endpoint = pois_endpoint;
    m_pois_endpoint_isSet = true;
}

bool OAIAvailSettings_Esam::is_pois_endpoint_Set() const{
    return m_pois_endpoint_isSet;
}

bool OAIAvailSettings_Esam::is_pois_endpoint_Valid() const{
    return m_pois_endpoint_isValid;
}

QString OAIAvailSettings_Esam::getUsername() const {
    return m_username;
}
void OAIAvailSettings_Esam::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAvailSettings_Esam::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAvailSettings_Esam::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIAvailSettings_Esam::getZoneIdentity() const {
    return m_zone_identity;
}
void OAIAvailSettings_Esam::setZoneIdentity(const QString &zone_identity) {
    m_zone_identity = zone_identity;
    m_zone_identity_isSet = true;
}

bool OAIAvailSettings_Esam::is_zone_identity_Set() const{
    return m_zone_identity_isSet;
}

bool OAIAvailSettings_Esam::is_zone_identity_Valid() const{
    return m_zone_identity_isValid;
}

bool OAIAvailSettings_Esam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_avail_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_param_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pois_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_identity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailSettings_Esam::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acquisition_point_id_isValid && m_pois_endpoint_isValid && true;
}

} // namespace OpenAPI
