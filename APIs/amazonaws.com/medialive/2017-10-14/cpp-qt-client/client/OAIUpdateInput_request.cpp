/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInput_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInput_request::OAIUpdateInput_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInput_request::OAIUpdateInput_request() {
    this->initializeModel();
}

OAIUpdateInput_request::~OAIUpdateInput_request() {}

void OAIUpdateInput_request::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_input_devices_isSet = false;
    m_input_devices_isValid = false;

    m_input_security_groups_isSet = false;
    m_input_security_groups_isValid = false;

    m_media_connect_flows_isSet = false;
    m_media_connect_flows_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIUpdateInput_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInput_request::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_input_devices_isValid = ::OpenAPI::fromJsonValue(m_input_devices, json[QString("inputDevices")]);
    m_input_devices_isSet = !json[QString("inputDevices")].isNull() && m_input_devices_isValid;

    m_input_security_groups_isValid = ::OpenAPI::fromJsonValue(m_input_security_groups, json[QString("inputSecurityGroups")]);
    m_input_security_groups_isSet = !json[QString("inputSecurityGroups")].isNull() && m_input_security_groups_isValid;

    m_media_connect_flows_isValid = ::OpenAPI::fromJsonValue(m_media_connect_flows, json[QString("mediaConnectFlows")]);
    m_media_connect_flows_isSet = !json[QString("mediaConnectFlows")].isNull() && m_media_connect_flows_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIUpdateInput_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInput_request::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_input_devices.size() > 0) {
        obj.insert(QString("inputDevices"), ::OpenAPI::toJsonValue(m_input_devices));
    }
    if (m_input_security_groups.size() > 0) {
        obj.insert(QString("inputSecurityGroups"), ::OpenAPI::toJsonValue(m_input_security_groups));
    }
    if (m_media_connect_flows.size() > 0) {
        obj.insert(QString("mediaConnectFlows"), ::OpenAPI::toJsonValue(m_media_connect_flows));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QList<OAIInputDestinationRequest> OAIUpdateInput_request::getDestinations() const {
    return m_destinations;
}
void OAIUpdateInput_request::setDestinations(const QList<OAIInputDestinationRequest> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIUpdateInput_request::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIUpdateInput_request::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QList<OAIInputDeviceRequest> OAIUpdateInput_request::getInputDevices() const {
    return m_input_devices;
}
void OAIUpdateInput_request::setInputDevices(const QList<OAIInputDeviceRequest> &input_devices) {
    m_input_devices = input_devices;
    m_input_devices_isSet = true;
}

bool OAIUpdateInput_request::is_input_devices_Set() const{
    return m_input_devices_isSet;
}

bool OAIUpdateInput_request::is_input_devices_Valid() const{
    return m_input_devices_isValid;
}

QList<QString> OAIUpdateInput_request::getInputSecurityGroups() const {
    return m_input_security_groups;
}
void OAIUpdateInput_request::setInputSecurityGroups(const QList<QString> &input_security_groups) {
    m_input_security_groups = input_security_groups;
    m_input_security_groups_isSet = true;
}

bool OAIUpdateInput_request::is_input_security_groups_Set() const{
    return m_input_security_groups_isSet;
}

bool OAIUpdateInput_request::is_input_security_groups_Valid() const{
    return m_input_security_groups_isValid;
}

QList<OAIMediaConnectFlowRequest> OAIUpdateInput_request::getMediaConnectFlows() const {
    return m_media_connect_flows;
}
void OAIUpdateInput_request::setMediaConnectFlows(const QList<OAIMediaConnectFlowRequest> &media_connect_flows) {
    m_media_connect_flows = media_connect_flows;
    m_media_connect_flows_isSet = true;
}

bool OAIUpdateInput_request::is_media_connect_flows_Set() const{
    return m_media_connect_flows_isSet;
}

bool OAIUpdateInput_request::is_media_connect_flows_Valid() const{
    return m_media_connect_flows_isValid;
}

QString OAIUpdateInput_request::getName() const {
    return m_name;
}
void OAIUpdateInput_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateInput_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateInput_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateInput_request::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateInput_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateInput_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateInput_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList<OAIInputSourceRequest> OAIUpdateInput_request::getSources() const {
    return m_sources;
}
void OAIUpdateInput_request::setSources(const QList<OAIInputSourceRequest> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIUpdateInput_request::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIUpdateInput_request::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIUpdateInput_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_connect_flows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInput_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
