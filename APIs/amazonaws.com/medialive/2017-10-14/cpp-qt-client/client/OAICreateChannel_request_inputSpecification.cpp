/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_inputSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_inputSpecification::OAICreateChannel_request_inputSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_inputSpecification::OAICreateChannel_request_inputSpecification() {
    this->initializeModel();
}

OAICreateChannel_request_inputSpecification::~OAICreateChannel_request_inputSpecification() {}

void OAICreateChannel_request_inputSpecification::initializeModel() {

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_maximum_bitrate_isSet = false;
    m_maximum_bitrate_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;
}

void OAICreateChannel_request_inputSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_inputSpecification::fromJsonObject(QJsonObject json) {

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("Codec")]);
    m_codec_isSet = !json[QString("Codec")].isNull() && m_codec_isValid;

    m_maximum_bitrate_isValid = ::OpenAPI::fromJsonValue(m_maximum_bitrate, json[QString("MaximumBitrate")]);
    m_maximum_bitrate_isSet = !json[QString("MaximumBitrate")].isNull() && m_maximum_bitrate_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("Resolution")]);
    m_resolution_isSet = !json[QString("Resolution")].isNull() && m_resolution_isValid;
}

QString OAICreateChannel_request_inputSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_inputSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_codec.isSet()) {
        obj.insert(QString("Codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_maximum_bitrate.isSet()) {
        obj.insert(QString("MaximumBitrate"), ::OpenAPI::toJsonValue(m_maximum_bitrate));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("Resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    return obj;
}

OAIInputCodec OAICreateChannel_request_inputSpecification::getCodec() const {
    return m_codec;
}
void OAICreateChannel_request_inputSpecification::setCodec(const OAIInputCodec &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAICreateChannel_request_inputSpecification::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAICreateChannel_request_inputSpecification::is_codec_Valid() const{
    return m_codec_isValid;
}

OAIInputMaximumBitrate OAICreateChannel_request_inputSpecification::getMaximumBitrate() const {
    return m_maximum_bitrate;
}
void OAICreateChannel_request_inputSpecification::setMaximumBitrate(const OAIInputMaximumBitrate &maximum_bitrate) {
    m_maximum_bitrate = maximum_bitrate;
    m_maximum_bitrate_isSet = true;
}

bool OAICreateChannel_request_inputSpecification::is_maximum_bitrate_Set() const{
    return m_maximum_bitrate_isSet;
}

bool OAICreateChannel_request_inputSpecification::is_maximum_bitrate_Valid() const{
    return m_maximum_bitrate_isValid;
}

OAIInputResolution OAICreateChannel_request_inputSpecification::getResolution() const {
    return m_resolution;
}
void OAICreateChannel_request_inputSpecification::setResolution(const OAIInputResolution &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAICreateChannel_request_inputSpecification::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAICreateChannel_request_inputSpecification::is_resolution_Valid() const{
    return m_resolution_isValid;
}

bool OAICreateChannel_request_inputSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_bitrate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_inputSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
