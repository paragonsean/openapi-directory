/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiplexVideoSettings_StatmuxSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiplexVideoSettings_StatmuxSettings::OAIMultiplexVideoSettings_StatmuxSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiplexVideoSettings_StatmuxSettings::OAIMultiplexVideoSettings_StatmuxSettings() {
    this->initializeModel();
}

OAIMultiplexVideoSettings_StatmuxSettings::~OAIMultiplexVideoSettings_StatmuxSettings() {}

void OAIMultiplexVideoSettings_StatmuxSettings::initializeModel() {

    m_maximum_bitrate_isSet = false;
    m_maximum_bitrate_isValid = false;

    m_minimum_bitrate_isSet = false;
    m_minimum_bitrate_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIMultiplexVideoSettings_StatmuxSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiplexVideoSettings_StatmuxSettings::fromJsonObject(QJsonObject json) {

    m_maximum_bitrate_isValid = ::OpenAPI::fromJsonValue(m_maximum_bitrate, json[QString("MaximumBitrate")]);
    m_maximum_bitrate_isSet = !json[QString("MaximumBitrate")].isNull() && m_maximum_bitrate_isValid;

    m_minimum_bitrate_isValid = ::OpenAPI::fromJsonValue(m_minimum_bitrate, json[QString("MinimumBitrate")]);
    m_minimum_bitrate_isSet = !json[QString("MinimumBitrate")].isNull() && m_minimum_bitrate_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;
}

QString OAIMultiplexVideoSettings_StatmuxSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiplexVideoSettings_StatmuxSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_bitrate_isSet) {
        obj.insert(QString("MaximumBitrate"), ::OpenAPI::toJsonValue(m_maximum_bitrate));
    }
    if (m_minimum_bitrate_isSet) {
        obj.insert(QString("MinimumBitrate"), ::OpenAPI::toJsonValue(m_minimum_bitrate));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

qint32 OAIMultiplexVideoSettings_StatmuxSettings::getMaximumBitrate() const {
    return m_maximum_bitrate;
}
void OAIMultiplexVideoSettings_StatmuxSettings::setMaximumBitrate(const qint32 &maximum_bitrate) {
    m_maximum_bitrate = maximum_bitrate;
    m_maximum_bitrate_isSet = true;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::is_maximum_bitrate_Set() const{
    return m_maximum_bitrate_isSet;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::is_maximum_bitrate_Valid() const{
    return m_maximum_bitrate_isValid;
}

qint32 OAIMultiplexVideoSettings_StatmuxSettings::getMinimumBitrate() const {
    return m_minimum_bitrate;
}
void OAIMultiplexVideoSettings_StatmuxSettings::setMinimumBitrate(const qint32 &minimum_bitrate) {
    m_minimum_bitrate = minimum_bitrate;
    m_minimum_bitrate_isSet = true;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::is_minimum_bitrate_Set() const{
    return m_minimum_bitrate_isSet;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::is_minimum_bitrate_Valid() const{
    return m_minimum_bitrate_isValid;
}

qint32 OAIMultiplexVideoSettings_StatmuxSettings::getPriority() const {
    return m_priority;
}
void OAIMultiplexVideoSettings_StatmuxSettings::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiplexVideoSettings_StatmuxSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
