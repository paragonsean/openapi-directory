/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyProviderSettings_StaticKeySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyProviderSettings_StaticKeySettings::OAIKeyProviderSettings_StaticKeySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyProviderSettings_StaticKeySettings::OAIKeyProviderSettings_StaticKeySettings() {
    this->initializeModel();
}

OAIKeyProviderSettings_StaticKeySettings::~OAIKeyProviderSettings_StaticKeySettings() {}

void OAIKeyProviderSettings_StaticKeySettings::initializeModel() {

    m_key_provider_server_isSet = false;
    m_key_provider_server_isValid = false;

    m_static_key_value_isSet = false;
    m_static_key_value_isValid = false;
}

void OAIKeyProviderSettings_StaticKeySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyProviderSettings_StaticKeySettings::fromJsonObject(QJsonObject json) {

    m_key_provider_server_isValid = ::OpenAPI::fromJsonValue(m_key_provider_server, json[QString("KeyProviderServer")]);
    m_key_provider_server_isSet = !json[QString("KeyProviderServer")].isNull() && m_key_provider_server_isValid;

    m_static_key_value_isValid = ::OpenAPI::fromJsonValue(m_static_key_value, json[QString("StaticKeyValue")]);
    m_static_key_value_isSet = !json[QString("StaticKeyValue")].isNull() && m_static_key_value_isValid;
}

QString OAIKeyProviderSettings_StaticKeySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyProviderSettings_StaticKeySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_key_provider_server.isSet()) {
        obj.insert(QString("KeyProviderServer"), ::OpenAPI::toJsonValue(m_key_provider_server));
    }
    if (m_static_key_value_isSet) {
        obj.insert(QString("StaticKeyValue"), ::OpenAPI::toJsonValue(m_static_key_value));
    }
    return obj;
}

OAIStaticKeySettings_KeyProviderServer OAIKeyProviderSettings_StaticKeySettings::getKeyProviderServer() const {
    return m_key_provider_server;
}
void OAIKeyProviderSettings_StaticKeySettings::setKeyProviderServer(const OAIStaticKeySettings_KeyProviderServer &key_provider_server) {
    m_key_provider_server = key_provider_server;
    m_key_provider_server_isSet = true;
}

bool OAIKeyProviderSettings_StaticKeySettings::is_key_provider_server_Set() const{
    return m_key_provider_server_isSet;
}

bool OAIKeyProviderSettings_StaticKeySettings::is_key_provider_server_Valid() const{
    return m_key_provider_server_isValid;
}

QString OAIKeyProviderSettings_StaticKeySettings::getStaticKeyValue() const {
    return m_static_key_value;
}
void OAIKeyProviderSettings_StaticKeySettings::setStaticKeyValue(const QString &static_key_value) {
    m_static_key_value = static_key_value;
    m_static_key_value_isSet = true;
}

bool OAIKeyProviderSettings_StaticKeySettings::is_static_key_value_Set() const{
    return m_static_key_value_isSet;
}

bool OAIKeyProviderSettings_StaticKeySettings::is_static_key_value_Valid() const{
    return m_static_key_value_isValid;
}

bool OAIKeyProviderSettings_StaticKeySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_provider_server.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyProviderSettings_StaticKeySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_static_key_value_isValid && true;
}

} // namespace OpenAPI
