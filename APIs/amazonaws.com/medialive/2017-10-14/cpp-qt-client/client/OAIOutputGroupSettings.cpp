/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputGroupSettings::OAIOutputGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputGroupSettings::OAIOutputGroupSettings() {
    this->initializeModel();
}

OAIOutputGroupSettings::~OAIOutputGroupSettings() {}

void OAIOutputGroupSettings::initializeModel() {

    m_archive_group_settings_isSet = false;
    m_archive_group_settings_isValid = false;

    m_frame_capture_group_settings_isSet = false;
    m_frame_capture_group_settings_isValid = false;

    m_hls_group_settings_isSet = false;
    m_hls_group_settings_isValid = false;

    m_media_package_group_settings_isSet = false;
    m_media_package_group_settings_isValid = false;

    m_ms_smooth_group_settings_isSet = false;
    m_ms_smooth_group_settings_isValid = false;

    m_multiplex_group_settings_isSet = false;
    m_multiplex_group_settings_isValid = false;

    m_rtmp_group_settings_isSet = false;
    m_rtmp_group_settings_isValid = false;

    m_udp_group_settings_isSet = false;
    m_udp_group_settings_isValid = false;
}

void OAIOutputGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputGroupSettings::fromJsonObject(QJsonObject json) {

    m_archive_group_settings_isValid = ::OpenAPI::fromJsonValue(m_archive_group_settings, json[QString("ArchiveGroupSettings")]);
    m_archive_group_settings_isSet = !json[QString("ArchiveGroupSettings")].isNull() && m_archive_group_settings_isValid;

    m_frame_capture_group_settings_isValid = ::OpenAPI::fromJsonValue(m_frame_capture_group_settings, json[QString("FrameCaptureGroupSettings")]);
    m_frame_capture_group_settings_isSet = !json[QString("FrameCaptureGroupSettings")].isNull() && m_frame_capture_group_settings_isValid;

    m_hls_group_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_group_settings, json[QString("HlsGroupSettings")]);
    m_hls_group_settings_isSet = !json[QString("HlsGroupSettings")].isNull() && m_hls_group_settings_isValid;

    m_media_package_group_settings_isValid = ::OpenAPI::fromJsonValue(m_media_package_group_settings, json[QString("MediaPackageGroupSettings")]);
    m_media_package_group_settings_isSet = !json[QString("MediaPackageGroupSettings")].isNull() && m_media_package_group_settings_isValid;

    m_ms_smooth_group_settings_isValid = ::OpenAPI::fromJsonValue(m_ms_smooth_group_settings, json[QString("MsSmoothGroupSettings")]);
    m_ms_smooth_group_settings_isSet = !json[QString("MsSmoothGroupSettings")].isNull() && m_ms_smooth_group_settings_isValid;

    m_multiplex_group_settings_isValid = ::OpenAPI::fromJsonValue(m_multiplex_group_settings, json[QString("MultiplexGroupSettings")]);
    m_multiplex_group_settings_isSet = !json[QString("MultiplexGroupSettings")].isNull() && m_multiplex_group_settings_isValid;

    m_rtmp_group_settings_isValid = ::OpenAPI::fromJsonValue(m_rtmp_group_settings, json[QString("RtmpGroupSettings")]);
    m_rtmp_group_settings_isSet = !json[QString("RtmpGroupSettings")].isNull() && m_rtmp_group_settings_isValid;

    m_udp_group_settings_isValid = ::OpenAPI::fromJsonValue(m_udp_group_settings, json[QString("UdpGroupSettings")]);
    m_udp_group_settings_isSet = !json[QString("UdpGroupSettings")].isNull() && m_udp_group_settings_isValid;
}

QString OAIOutputGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_group_settings.isSet()) {
        obj.insert(QString("ArchiveGroupSettings"), ::OpenAPI::toJsonValue(m_archive_group_settings));
    }
    if (m_frame_capture_group_settings.isSet()) {
        obj.insert(QString("FrameCaptureGroupSettings"), ::OpenAPI::toJsonValue(m_frame_capture_group_settings));
    }
    if (m_hls_group_settings.isSet()) {
        obj.insert(QString("HlsGroupSettings"), ::OpenAPI::toJsonValue(m_hls_group_settings));
    }
    if (m_media_package_group_settings.isSet()) {
        obj.insert(QString("MediaPackageGroupSettings"), ::OpenAPI::toJsonValue(m_media_package_group_settings));
    }
    if (m_ms_smooth_group_settings.isSet()) {
        obj.insert(QString("MsSmoothGroupSettings"), ::OpenAPI::toJsonValue(m_ms_smooth_group_settings));
    }
    if (m_multiplex_group_settings.isSet()) {
        obj.insert(QString("MultiplexGroupSettings"), ::OpenAPI::toJsonValue(m_multiplex_group_settings));
    }
    if (m_rtmp_group_settings.isSet()) {
        obj.insert(QString("RtmpGroupSettings"), ::OpenAPI::toJsonValue(m_rtmp_group_settings));
    }
    if (m_udp_group_settings.isSet()) {
        obj.insert(QString("UdpGroupSettings"), ::OpenAPI::toJsonValue(m_udp_group_settings));
    }
    return obj;
}

OAIOutputGroupSettings_ArchiveGroupSettings OAIOutputGroupSettings::getArchiveGroupSettings() const {
    return m_archive_group_settings;
}
void OAIOutputGroupSettings::setArchiveGroupSettings(const OAIOutputGroupSettings_ArchiveGroupSettings &archive_group_settings) {
    m_archive_group_settings = archive_group_settings;
    m_archive_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_archive_group_settings_Set() const{
    return m_archive_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_archive_group_settings_Valid() const{
    return m_archive_group_settings_isValid;
}

OAIOutputGroupSettings_FrameCaptureGroupSettings OAIOutputGroupSettings::getFrameCaptureGroupSettings() const {
    return m_frame_capture_group_settings;
}
void OAIOutputGroupSettings::setFrameCaptureGroupSettings(const OAIOutputGroupSettings_FrameCaptureGroupSettings &frame_capture_group_settings) {
    m_frame_capture_group_settings = frame_capture_group_settings;
    m_frame_capture_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_frame_capture_group_settings_Set() const{
    return m_frame_capture_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_frame_capture_group_settings_Valid() const{
    return m_frame_capture_group_settings_isValid;
}

OAIOutputGroupSettings_HlsGroupSettings OAIOutputGroupSettings::getHlsGroupSettings() const {
    return m_hls_group_settings;
}
void OAIOutputGroupSettings::setHlsGroupSettings(const OAIOutputGroupSettings_HlsGroupSettings &hls_group_settings) {
    m_hls_group_settings = hls_group_settings;
    m_hls_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_hls_group_settings_Set() const{
    return m_hls_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_hls_group_settings_Valid() const{
    return m_hls_group_settings_isValid;
}

OAIOutputGroupSettings_MediaPackageGroupSettings OAIOutputGroupSettings::getMediaPackageGroupSettings() const {
    return m_media_package_group_settings;
}
void OAIOutputGroupSettings::setMediaPackageGroupSettings(const OAIOutputGroupSettings_MediaPackageGroupSettings &media_package_group_settings) {
    m_media_package_group_settings = media_package_group_settings;
    m_media_package_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_media_package_group_settings_Set() const{
    return m_media_package_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_media_package_group_settings_Valid() const{
    return m_media_package_group_settings_isValid;
}

OAIOutputGroupSettings_MsSmoothGroupSettings OAIOutputGroupSettings::getMsSmoothGroupSettings() const {
    return m_ms_smooth_group_settings;
}
void OAIOutputGroupSettings::setMsSmoothGroupSettings(const OAIOutputGroupSettings_MsSmoothGroupSettings &ms_smooth_group_settings) {
    m_ms_smooth_group_settings = ms_smooth_group_settings;
    m_ms_smooth_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_ms_smooth_group_settings_Set() const{
    return m_ms_smooth_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_ms_smooth_group_settings_Valid() const{
    return m_ms_smooth_group_settings_isValid;
}

OAIObject OAIOutputGroupSettings::getMultiplexGroupSettings() const {
    return m_multiplex_group_settings;
}
void OAIOutputGroupSettings::setMultiplexGroupSettings(const OAIObject &multiplex_group_settings) {
    m_multiplex_group_settings = multiplex_group_settings;
    m_multiplex_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_multiplex_group_settings_Set() const{
    return m_multiplex_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_multiplex_group_settings_Valid() const{
    return m_multiplex_group_settings_isValid;
}

OAIOutputGroupSettings_RtmpGroupSettings OAIOutputGroupSettings::getRtmpGroupSettings() const {
    return m_rtmp_group_settings;
}
void OAIOutputGroupSettings::setRtmpGroupSettings(const OAIOutputGroupSettings_RtmpGroupSettings &rtmp_group_settings) {
    m_rtmp_group_settings = rtmp_group_settings;
    m_rtmp_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_rtmp_group_settings_Set() const{
    return m_rtmp_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_rtmp_group_settings_Valid() const{
    return m_rtmp_group_settings_isValid;
}

OAIOutputGroupSettings_UdpGroupSettings OAIOutputGroupSettings::getUdpGroupSettings() const {
    return m_udp_group_settings;
}
void OAIOutputGroupSettings::setUdpGroupSettings(const OAIOutputGroupSettings_UdpGroupSettings &udp_group_settings) {
    m_udp_group_settings = udp_group_settings;
    m_udp_group_settings_isSet = true;
}

bool OAIOutputGroupSettings::is_udp_group_settings_Set() const{
    return m_udp_group_settings_isSet;
}

bool OAIOutputGroupSettings::is_udp_group_settings_Valid() const{
    return m_udp_group_settings_isValid;
}

bool OAIOutputGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_capture_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_package_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_smooth_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplex_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtmp_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_group_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
