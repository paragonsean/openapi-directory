/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInputSecurityGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInputSecurityGroupResponse::OAIDescribeInputSecurityGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInputSecurityGroupResponse::OAIDescribeInputSecurityGroupResponse() {
    this->initializeModel();
}

OAIDescribeInputSecurityGroupResponse::~OAIDescribeInputSecurityGroupResponse() {}

void OAIDescribeInputSecurityGroupResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_whitelist_rules_isSet = false;
    m_whitelist_rules_isValid = false;
}

void OAIDescribeInputSecurityGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInputSecurityGroupResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_whitelist_rules_isValid = ::OpenAPI::fromJsonValue(m_whitelist_rules, json[QString("WhitelistRules")]);
    m_whitelist_rules_isSet = !json[QString("WhitelistRules")].isNull() && m_whitelist_rules_isValid;
}

QString OAIDescribeInputSecurityGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInputSecurityGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_whitelist_rules.isSet()) {
        obj.insert(QString("WhitelistRules"), ::OpenAPI::toJsonValue(m_whitelist_rules));
    }
    return obj;
}

QString OAIDescribeInputSecurityGroupResponse::getArn() const {
    return m_arn;
}
void OAIDescribeInputSecurityGroupResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeInputSecurityGroupResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeInputSecurityGroupResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeInputSecurityGroupResponse::getId() const {
    return m_id;
}
void OAIDescribeInputSecurityGroupResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeInputSecurityGroupResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeInputSecurityGroupResponse::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIDescribeInputSecurityGroupResponse::getInputs() const {
    return m_inputs;
}
void OAIDescribeInputSecurityGroupResponse::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIDescribeInputSecurityGroupResponse::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIDescribeInputSecurityGroupResponse::is_inputs_Valid() const{
    return m_inputs_isValid;
}

OAIInputSecurityGroupState OAIDescribeInputSecurityGroupResponse::getState() const {
    return m_state;
}
void OAIDescribeInputSecurityGroupResponse::setState(const OAIInputSecurityGroupState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeInputSecurityGroupResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeInputSecurityGroupResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIDescribeInputSecurityGroupResponse::getTags() const {
    return m_tags;
}
void OAIDescribeInputSecurityGroupResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeInputSecurityGroupResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeInputSecurityGroupResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIDescribeInputSecurityGroupResponse::getWhitelistRules() const {
    return m_whitelist_rules;
}
void OAIDescribeInputSecurityGroupResponse::setWhitelistRules(const QList &whitelist_rules) {
    m_whitelist_rules = whitelist_rules;
    m_whitelist_rules_isSet = true;
}

bool OAIDescribeInputSecurityGroupResponse::is_whitelist_rules_Set() const{
    return m_whitelist_rules_isSet;
}

bool OAIDescribeInputSecurityGroupResponse::is_whitelist_rules_Valid() const{
    return m_whitelist_rules_isValid;
}

bool OAIDescribeInputSecurityGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelist_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInputSecurityGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
