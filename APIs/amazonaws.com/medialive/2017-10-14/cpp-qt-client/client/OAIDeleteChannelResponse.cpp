/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteChannelResponse::OAIDeleteChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteChannelResponse::OAIDeleteChannelResponse() {
    this->initializeModel();
}

OAIDeleteChannelResponse::~OAIDeleteChannelResponse() {}

void OAIDeleteChannelResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_cdi_input_specification_isSet = false;
    m_cdi_input_specification_isValid = false;

    m_channel_class_isSet = false;
    m_channel_class_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_egress_endpoints_isSet = false;
    m_egress_endpoints_isValid = false;

    m_encoder_settings_isSet = false;
    m_encoder_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_attachments_isSet = false;
    m_input_attachments_isValid = false;

    m_input_specification_isSet = false;
    m_input_specification_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_maintenance_isSet = false;
    m_maintenance_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pipeline_details_isSet = false;
    m_pipeline_details_isValid = false;

    m_pipelines_running_count_isSet = false;
    m_pipelines_running_count_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;
}

void OAIDeleteChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteChannelResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_cdi_input_specification_isValid = ::OpenAPI::fromJsonValue(m_cdi_input_specification, json[QString("CdiInputSpecification")]);
    m_cdi_input_specification_isSet = !json[QString("CdiInputSpecification")].isNull() && m_cdi_input_specification_isValid;

    m_channel_class_isValid = ::OpenAPI::fromJsonValue(m_channel_class, json[QString("ChannelClass")]);
    m_channel_class_isSet = !json[QString("ChannelClass")].isNull() && m_channel_class_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_egress_endpoints_isValid = ::OpenAPI::fromJsonValue(m_egress_endpoints, json[QString("EgressEndpoints")]);
    m_egress_endpoints_isSet = !json[QString("EgressEndpoints")].isNull() && m_egress_endpoints_isValid;

    m_encoder_settings_isValid = ::OpenAPI::fromJsonValue(m_encoder_settings, json[QString("EncoderSettings")]);
    m_encoder_settings_isSet = !json[QString("EncoderSettings")].isNull() && m_encoder_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_input_attachments_isValid = ::OpenAPI::fromJsonValue(m_input_attachments, json[QString("InputAttachments")]);
    m_input_attachments_isSet = !json[QString("InputAttachments")].isNull() && m_input_attachments_isValid;

    m_input_specification_isValid = ::OpenAPI::fromJsonValue(m_input_specification, json[QString("InputSpecification")]);
    m_input_specification_isSet = !json[QString("InputSpecification")].isNull() && m_input_specification_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;

    m_maintenance_isValid = ::OpenAPI::fromJsonValue(m_maintenance, json[QString("Maintenance")]);
    m_maintenance_isSet = !json[QString("Maintenance")].isNull() && m_maintenance_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_pipeline_details_isValid = ::OpenAPI::fromJsonValue(m_pipeline_details, json[QString("PipelineDetails")]);
    m_pipeline_details_isSet = !json[QString("PipelineDetails")].isNull() && m_pipeline_details_isValid;

    m_pipelines_running_count_isValid = ::OpenAPI::fromJsonValue(m_pipelines_running_count, json[QString("PipelinesRunningCount")]);
    m_pipelines_running_count_isSet = !json[QString("PipelinesRunningCount")].isNull() && m_pipelines_running_count_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;
}

QString OAIDeleteChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_cdi_input_specification.isSet()) {
        obj.insert(QString("CdiInputSpecification"), ::OpenAPI::toJsonValue(m_cdi_input_specification));
    }
    if (m_channel_class.isSet()) {
        obj.insert(QString("ChannelClass"), ::OpenAPI::toJsonValue(m_channel_class));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_egress_endpoints.isSet()) {
        obj.insert(QString("EgressEndpoints"), ::OpenAPI::toJsonValue(m_egress_endpoints));
    }
    if (m_encoder_settings.isSet()) {
        obj.insert(QString("EncoderSettings"), ::OpenAPI::toJsonValue(m_encoder_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_attachments.isSet()) {
        obj.insert(QString("InputAttachments"), ::OpenAPI::toJsonValue(m_input_attachments));
    }
    if (m_input_specification.isSet()) {
        obj.insert(QString("InputSpecification"), ::OpenAPI::toJsonValue(m_input_specification));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_maintenance.isSet()) {
        obj.insert(QString("Maintenance"), ::OpenAPI::toJsonValue(m_maintenance));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pipeline_details.isSet()) {
        obj.insert(QString("PipelineDetails"), ::OpenAPI::toJsonValue(m_pipeline_details));
    }
    if (m_pipelines_running_count_isSet) {
        obj.insert(QString("PipelinesRunningCount"), ::OpenAPI::toJsonValue(m_pipelines_running_count));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc.isSet()) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    return obj;
}

QString OAIDeleteChannelResponse::getArn() const {
    return m_arn;
}
void OAIDeleteChannelResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteChannelResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteChannelResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIDeleteChannelResponse_CdiInputSpecification OAIDeleteChannelResponse::getCdiInputSpecification() const {
    return m_cdi_input_specification;
}
void OAIDeleteChannelResponse::setCdiInputSpecification(const OAIDeleteChannelResponse_CdiInputSpecification &cdi_input_specification) {
    m_cdi_input_specification = cdi_input_specification;
    m_cdi_input_specification_isSet = true;
}

bool OAIDeleteChannelResponse::is_cdi_input_specification_Set() const{
    return m_cdi_input_specification_isSet;
}

bool OAIDeleteChannelResponse::is_cdi_input_specification_Valid() const{
    return m_cdi_input_specification_isValid;
}

OAIChannelClass OAIDeleteChannelResponse::getChannelClass() const {
    return m_channel_class;
}
void OAIDeleteChannelResponse::setChannelClass(const OAIChannelClass &channel_class) {
    m_channel_class = channel_class;
    m_channel_class_isSet = true;
}

bool OAIDeleteChannelResponse::is_channel_class_Set() const{
    return m_channel_class_isSet;
}

bool OAIDeleteChannelResponse::is_channel_class_Valid() const{
    return m_channel_class_isValid;
}

QList OAIDeleteChannelResponse::getDestinations() const {
    return m_destinations;
}
void OAIDeleteChannelResponse::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIDeleteChannelResponse::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIDeleteChannelResponse::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QList OAIDeleteChannelResponse::getEgressEndpoints() const {
    return m_egress_endpoints;
}
void OAIDeleteChannelResponse::setEgressEndpoints(const QList &egress_endpoints) {
    m_egress_endpoints = egress_endpoints;
    m_egress_endpoints_isSet = true;
}

bool OAIDeleteChannelResponse::is_egress_endpoints_Set() const{
    return m_egress_endpoints_isSet;
}

bool OAIDeleteChannelResponse::is_egress_endpoints_Valid() const{
    return m_egress_endpoints_isValid;
}

OAIDeleteChannelResponse_EncoderSettings OAIDeleteChannelResponse::getEncoderSettings() const {
    return m_encoder_settings;
}
void OAIDeleteChannelResponse::setEncoderSettings(const OAIDeleteChannelResponse_EncoderSettings &encoder_settings) {
    m_encoder_settings = encoder_settings;
    m_encoder_settings_isSet = true;
}

bool OAIDeleteChannelResponse::is_encoder_settings_Set() const{
    return m_encoder_settings_isSet;
}

bool OAIDeleteChannelResponse::is_encoder_settings_Valid() const{
    return m_encoder_settings_isValid;
}

QString OAIDeleteChannelResponse::getId() const {
    return m_id;
}
void OAIDeleteChannelResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeleteChannelResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeleteChannelResponse::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIDeleteChannelResponse::getInputAttachments() const {
    return m_input_attachments;
}
void OAIDeleteChannelResponse::setInputAttachments(const QList &input_attachments) {
    m_input_attachments = input_attachments;
    m_input_attachments_isSet = true;
}

bool OAIDeleteChannelResponse::is_input_attachments_Set() const{
    return m_input_attachments_isSet;
}

bool OAIDeleteChannelResponse::is_input_attachments_Valid() const{
    return m_input_attachments_isValid;
}

OAIDeleteChannelResponse_InputSpecification OAIDeleteChannelResponse::getInputSpecification() const {
    return m_input_specification;
}
void OAIDeleteChannelResponse::setInputSpecification(const OAIDeleteChannelResponse_InputSpecification &input_specification) {
    m_input_specification = input_specification;
    m_input_specification_isSet = true;
}

bool OAIDeleteChannelResponse::is_input_specification_Set() const{
    return m_input_specification_isSet;
}

bool OAIDeleteChannelResponse::is_input_specification_Valid() const{
    return m_input_specification_isValid;
}

OAILogLevel OAIDeleteChannelResponse::getLogLevel() const {
    return m_log_level;
}
void OAIDeleteChannelResponse::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIDeleteChannelResponse::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIDeleteChannelResponse::is_log_level_Valid() const{
    return m_log_level_isValid;
}

OAIDeleteChannelResponse_Maintenance OAIDeleteChannelResponse::getMaintenance() const {
    return m_maintenance;
}
void OAIDeleteChannelResponse::setMaintenance(const OAIDeleteChannelResponse_Maintenance &maintenance) {
    m_maintenance = maintenance;
    m_maintenance_isSet = true;
}

bool OAIDeleteChannelResponse::is_maintenance_Set() const{
    return m_maintenance_isSet;
}

bool OAIDeleteChannelResponse::is_maintenance_Valid() const{
    return m_maintenance_isValid;
}

QString OAIDeleteChannelResponse::getName() const {
    return m_name;
}
void OAIDeleteChannelResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeleteChannelResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeleteChannelResponse::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIDeleteChannelResponse::getPipelineDetails() const {
    return m_pipeline_details;
}
void OAIDeleteChannelResponse::setPipelineDetails(const QList &pipeline_details) {
    m_pipeline_details = pipeline_details;
    m_pipeline_details_isSet = true;
}

bool OAIDeleteChannelResponse::is_pipeline_details_Set() const{
    return m_pipeline_details_isSet;
}

bool OAIDeleteChannelResponse::is_pipeline_details_Valid() const{
    return m_pipeline_details_isValid;
}

qint32 OAIDeleteChannelResponse::getPipelinesRunningCount() const {
    return m_pipelines_running_count;
}
void OAIDeleteChannelResponse::setPipelinesRunningCount(const qint32 &pipelines_running_count) {
    m_pipelines_running_count = pipelines_running_count;
    m_pipelines_running_count_isSet = true;
}

bool OAIDeleteChannelResponse::is_pipelines_running_count_Set() const{
    return m_pipelines_running_count_isSet;
}

bool OAIDeleteChannelResponse::is_pipelines_running_count_Valid() const{
    return m_pipelines_running_count_isValid;
}

QString OAIDeleteChannelResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDeleteChannelResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDeleteChannelResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDeleteChannelResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIChannelState OAIDeleteChannelResponse::getState() const {
    return m_state;
}
void OAIDeleteChannelResponse::setState(const OAIChannelState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeleteChannelResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeleteChannelResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIDeleteChannelResponse::getTags() const {
    return m_tags;
}
void OAIDeleteChannelResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeleteChannelResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeleteChannelResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDeleteChannelResponse_Vpc OAIDeleteChannelResponse::getVpc() const {
    return m_vpc;
}
void OAIDeleteChannelResponse::setVpc(const OAIDeleteChannelResponse_Vpc &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIDeleteChannelResponse::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIDeleteChannelResponse::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAIDeleteChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdi_input_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoder_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipelines_running_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
