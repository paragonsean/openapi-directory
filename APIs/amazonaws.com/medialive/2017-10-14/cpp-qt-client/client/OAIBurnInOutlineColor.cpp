/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBurnInOutlineColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBurnInOutlineColor::OAIBurnInOutlineColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBurnInOutlineColor::OAIBurnInOutlineColor() {
    this->initializeModel();
}

OAIBurnInOutlineColor::~OAIBurnInOutlineColor() {}

void OAIBurnInOutlineColor::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBurnInOutlineColor::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBurnInOutlineColor::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BLACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurnInOutlineColor::BLACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BLUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurnInOutlineColor::BLUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GREEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurnInOutlineColor::GREEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurnInOutlineColor::RED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WHITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurnInOutlineColor::WHITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("YELLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBurnInOutlineColor::YELLOW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBurnInOutlineColor::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBurnInOutlineColor::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBurnInOutlineColor::BLACK:
            val = "BLACK";
            break;
        case eOAIBurnInOutlineColor::BLUE:
            val = "BLUE";
            break;
        case eOAIBurnInOutlineColor::GREEN:
            val = "GREEN";
            break;
        case eOAIBurnInOutlineColor::RED:
            val = "RED";
            break;
        case eOAIBurnInOutlineColor::WHITE:
            val = "WHITE";
            break;
        case eOAIBurnInOutlineColor::YELLOW:
            val = "YELLOW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBurnInOutlineColor::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBurnInOutlineColor::eOAIBurnInOutlineColor OAIBurnInOutlineColor::getValue() const {
    return m_value;
}

void OAIBurnInOutlineColor::setValue(const OAIBurnInOutlineColor::eOAIBurnInOutlineColor& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBurnInOutlineColor::isSet() const {
    
    return m_value_isSet;
}

bool OAIBurnInOutlineColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
