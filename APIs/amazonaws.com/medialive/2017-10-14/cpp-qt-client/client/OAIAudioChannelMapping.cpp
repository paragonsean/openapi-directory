/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioChannelMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioChannelMapping::OAIAudioChannelMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioChannelMapping::OAIAudioChannelMapping() {
    this->initializeModel();
}

OAIAudioChannelMapping::~OAIAudioChannelMapping() {}

void OAIAudioChannelMapping::initializeModel() {

    m_input_channel_levels_isSet = false;
    m_input_channel_levels_isValid = false;

    m_output_channel_isSet = false;
    m_output_channel_isValid = false;
}

void OAIAudioChannelMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioChannelMapping::fromJsonObject(QJsonObject json) {

    m_input_channel_levels_isValid = ::OpenAPI::fromJsonValue(m_input_channel_levels, json[QString("InputChannelLevels")]);
    m_input_channel_levels_isSet = !json[QString("InputChannelLevels")].isNull() && m_input_channel_levels_isValid;

    m_output_channel_isValid = ::OpenAPI::fromJsonValue(m_output_channel, json[QString("OutputChannel")]);
    m_output_channel_isSet = !json[QString("OutputChannel")].isNull() && m_output_channel_isValid;
}

QString OAIAudioChannelMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioChannelMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_input_channel_levels.isSet()) {
        obj.insert(QString("InputChannelLevels"), ::OpenAPI::toJsonValue(m_input_channel_levels));
    }
    if (m_output_channel_isSet) {
        obj.insert(QString("OutputChannel"), ::OpenAPI::toJsonValue(m_output_channel));
    }
    return obj;
}

QList OAIAudioChannelMapping::getInputChannelLevels() const {
    return m_input_channel_levels;
}
void OAIAudioChannelMapping::setInputChannelLevels(const QList &input_channel_levels) {
    m_input_channel_levels = input_channel_levels;
    m_input_channel_levels_isSet = true;
}

bool OAIAudioChannelMapping::is_input_channel_levels_Set() const{
    return m_input_channel_levels_isSet;
}

bool OAIAudioChannelMapping::is_input_channel_levels_Valid() const{
    return m_input_channel_levels_isValid;
}

qint32 OAIAudioChannelMapping::getOutputChannel() const {
    return m_output_channel;
}
void OAIAudioChannelMapping::setOutputChannel(const qint32 &output_channel) {
    m_output_channel = output_channel;
    m_output_channel_isSet = true;
}

bool OAIAudioChannelMapping::is_output_channel_Set() const{
    return m_output_channel_isSet;
}

bool OAIAudioChannelMapping::is_output_channel_Valid() const{
    return m_output_channel_isValid;
}

bool OAIAudioChannelMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_channel_levels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioChannelMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_channel_levels_isValid && m_output_channel_isValid && true;
}

} // namespace OpenAPI
