/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleActionSettings_StaticImageActivateSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleActionSettings_StaticImageActivateSettings::OAIScheduleActionSettings_StaticImageActivateSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleActionSettings_StaticImageActivateSettings::OAIScheduleActionSettings_StaticImageActivateSettings() {
    this->initializeModel();
}

OAIScheduleActionSettings_StaticImageActivateSettings::~OAIScheduleActionSettings_StaticImageActivateSettings() {}

void OAIScheduleActionSettings_StaticImageActivateSettings::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fade_in_isSet = false;
    m_fade_in_isValid = false;

    m_fade_out_isSet = false;
    m_fade_out_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_x_isSet = false;
    m_image_x_isValid = false;

    m_image_y_isSet = false;
    m_image_y_isValid = false;

    m_layer_isSet = false;
    m_layer_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIScheduleActionSettings_StaticImageActivateSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleActionSettings_StaticImageActivateSettings::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_fade_in_isValid = ::OpenAPI::fromJsonValue(m_fade_in, json[QString("FadeIn")]);
    m_fade_in_isSet = !json[QString("FadeIn")].isNull() && m_fade_in_isValid;

    m_fade_out_isValid = ::OpenAPI::fromJsonValue(m_fade_out, json[QString("FadeOut")]);
    m_fade_out_isSet = !json[QString("FadeOut")].isNull() && m_fade_out_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_image_x_isValid = ::OpenAPI::fromJsonValue(m_image_x, json[QString("ImageX")]);
    m_image_x_isSet = !json[QString("ImageX")].isNull() && m_image_x_isValid;

    m_image_y_isValid = ::OpenAPI::fromJsonValue(m_image_y, json[QString("ImageY")]);
    m_image_y_isSet = !json[QString("ImageY")].isNull() && m_image_y_isValid;

    m_layer_isValid = ::OpenAPI::fromJsonValue(m_layer, json[QString("Layer")]);
    m_layer_isSet = !json[QString("Layer")].isNull() && m_layer_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("Opacity")]);
    m_opacity_isSet = !json[QString("Opacity")].isNull() && m_opacity_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIScheduleActionSettings_StaticImageActivateSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleActionSettings_StaticImageActivateSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fade_in_isSet) {
        obj.insert(QString("FadeIn"), ::OpenAPI::toJsonValue(m_fade_in));
    }
    if (m_fade_out_isSet) {
        obj.insert(QString("FadeOut"), ::OpenAPI::toJsonValue(m_fade_out));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_image.isSet()) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_x_isSet) {
        obj.insert(QString("ImageX"), ::OpenAPI::toJsonValue(m_image_x));
    }
    if (m_image_y_isSet) {
        obj.insert(QString("ImageY"), ::OpenAPI::toJsonValue(m_image_y));
    }
    if (m_layer_isSet) {
        obj.insert(QString("Layer"), ::OpenAPI::toJsonValue(m_layer));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("Opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getDuration() const {
    return m_duration;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getFadeIn() const {
    return m_fade_in;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setFadeIn(const qint32 &fade_in) {
    m_fade_in = fade_in;
    m_fade_in_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_fade_in_Set() const{
    return m_fade_in_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_fade_in_Valid() const{
    return m_fade_in_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getFadeOut() const {
    return m_fade_out;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setFadeOut(const qint32 &fade_out) {
    m_fade_out = fade_out;
    m_fade_out_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_fade_out_Set() const{
    return m_fade_out_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_fade_out_Valid() const{
    return m_fade_out_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getHeight() const {
    return m_height;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_height_Set() const{
    return m_height_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_height_Valid() const{
    return m_height_isValid;
}

OAIStaticImageActivateScheduleActionSettings_Image OAIScheduleActionSettings_StaticImageActivateSettings::getImage() const {
    return m_image;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setImage(const OAIStaticImageActivateScheduleActionSettings_Image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_image_Set() const{
    return m_image_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getImageX() const {
    return m_image_x;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setImageX(const qint32 &image_x) {
    m_image_x = image_x;
    m_image_x_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_image_x_Set() const{
    return m_image_x_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_image_x_Valid() const{
    return m_image_x_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getImageY() const {
    return m_image_y;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setImageY(const qint32 &image_y) {
    m_image_y = image_y;
    m_image_y_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_image_y_Set() const{
    return m_image_y_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_image_y_Valid() const{
    return m_image_y_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getLayer() const {
    return m_layer;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setLayer(const qint32 &layer) {
    m_layer = layer;
    m_layer_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_layer_Set() const{
    return m_layer_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_layer_Valid() const{
    return m_layer_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getOpacity() const {
    return m_opacity;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setOpacity(const qint32 &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_opacity_Valid() const{
    return m_opacity_isValid;
}

qint32 OAIScheduleActionSettings_StaticImageActivateSettings::getWidth() const {
    return m_width;
}
void OAIScheduleActionSettings_StaticImageActivateSettings::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_width_Set() const{
    return m_width_isSet;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fade_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleActionSettings_StaticImageActivateSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && true;
}

} // namespace OpenAPI
