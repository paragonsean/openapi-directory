/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInputSettings_HlsInputSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInputSettings_HlsInputSettings::OAINetworkInputSettings_HlsInputSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInputSettings_HlsInputSettings::OAINetworkInputSettings_HlsInputSettings() {
    this->initializeModel();
}

OAINetworkInputSettings_HlsInputSettings::~OAINetworkInputSettings_HlsInputSettings() {}

void OAINetworkInputSettings_HlsInputSettings::initializeModel() {

    m_bandwidth_isSet = false;
    m_bandwidth_isValid = false;

    m_buffer_segments_isSet = false;
    m_buffer_segments_isValid = false;

    m_retries_isSet = false;
    m_retries_isValid = false;

    m_retry_interval_isSet = false;
    m_retry_interval_isValid = false;

    m_scte35_source_isSet = false;
    m_scte35_source_isValid = false;
}

void OAINetworkInputSettings_HlsInputSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInputSettings_HlsInputSettings::fromJsonObject(QJsonObject json) {

    m_bandwidth_isValid = ::OpenAPI::fromJsonValue(m_bandwidth, json[QString("Bandwidth")]);
    m_bandwidth_isSet = !json[QString("Bandwidth")].isNull() && m_bandwidth_isValid;

    m_buffer_segments_isValid = ::OpenAPI::fromJsonValue(m_buffer_segments, json[QString("BufferSegments")]);
    m_buffer_segments_isSet = !json[QString("BufferSegments")].isNull() && m_buffer_segments_isValid;

    m_retries_isValid = ::OpenAPI::fromJsonValue(m_retries, json[QString("Retries")]);
    m_retries_isSet = !json[QString("Retries")].isNull() && m_retries_isValid;

    m_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_retry_interval, json[QString("RetryInterval")]);
    m_retry_interval_isSet = !json[QString("RetryInterval")].isNull() && m_retry_interval_isValid;

    m_scte35_source_isValid = ::OpenAPI::fromJsonValue(m_scte35_source, json[QString("Scte35Source")]);
    m_scte35_source_isSet = !json[QString("Scte35Source")].isNull() && m_scte35_source_isValid;
}

QString OAINetworkInputSettings_HlsInputSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInputSettings_HlsInputSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_isSet) {
        obj.insert(QString("Bandwidth"), ::OpenAPI::toJsonValue(m_bandwidth));
    }
    if (m_buffer_segments_isSet) {
        obj.insert(QString("BufferSegments"), ::OpenAPI::toJsonValue(m_buffer_segments));
    }
    if (m_retries_isSet) {
        obj.insert(QString("Retries"), ::OpenAPI::toJsonValue(m_retries));
    }
    if (m_retry_interval_isSet) {
        obj.insert(QString("RetryInterval"), ::OpenAPI::toJsonValue(m_retry_interval));
    }
    if (m_scte35_source.isSet()) {
        obj.insert(QString("Scte35Source"), ::OpenAPI::toJsonValue(m_scte35_source));
    }
    return obj;
}

qint32 OAINetworkInputSettings_HlsInputSettings::getBandwidth() const {
    return m_bandwidth;
}
void OAINetworkInputSettings_HlsInputSettings::setBandwidth(const qint32 &bandwidth) {
    m_bandwidth = bandwidth;
    m_bandwidth_isSet = true;
}

bool OAINetworkInputSettings_HlsInputSettings::is_bandwidth_Set() const{
    return m_bandwidth_isSet;
}

bool OAINetworkInputSettings_HlsInputSettings::is_bandwidth_Valid() const{
    return m_bandwidth_isValid;
}

qint32 OAINetworkInputSettings_HlsInputSettings::getBufferSegments() const {
    return m_buffer_segments;
}
void OAINetworkInputSettings_HlsInputSettings::setBufferSegments(const qint32 &buffer_segments) {
    m_buffer_segments = buffer_segments;
    m_buffer_segments_isSet = true;
}

bool OAINetworkInputSettings_HlsInputSettings::is_buffer_segments_Set() const{
    return m_buffer_segments_isSet;
}

bool OAINetworkInputSettings_HlsInputSettings::is_buffer_segments_Valid() const{
    return m_buffer_segments_isValid;
}

qint32 OAINetworkInputSettings_HlsInputSettings::getRetries() const {
    return m_retries;
}
void OAINetworkInputSettings_HlsInputSettings::setRetries(const qint32 &retries) {
    m_retries = retries;
    m_retries_isSet = true;
}

bool OAINetworkInputSettings_HlsInputSettings::is_retries_Set() const{
    return m_retries_isSet;
}

bool OAINetworkInputSettings_HlsInputSettings::is_retries_Valid() const{
    return m_retries_isValid;
}

qint32 OAINetworkInputSettings_HlsInputSettings::getRetryInterval() const {
    return m_retry_interval;
}
void OAINetworkInputSettings_HlsInputSettings::setRetryInterval(const qint32 &retry_interval) {
    m_retry_interval = retry_interval;
    m_retry_interval_isSet = true;
}

bool OAINetworkInputSettings_HlsInputSettings::is_retry_interval_Set() const{
    return m_retry_interval_isSet;
}

bool OAINetworkInputSettings_HlsInputSettings::is_retry_interval_Valid() const{
    return m_retry_interval_isValid;
}

OAIHlsScte35SourceType OAINetworkInputSettings_HlsInputSettings::getScte35Source() const {
    return m_scte35_source;
}
void OAINetworkInputSettings_HlsInputSettings::setScte35Source(const OAIHlsScte35SourceType &scte35_source) {
    m_scte35_source = scte35_source;
    m_scte35_source_isSet = true;
}

bool OAINetworkInputSettings_HlsInputSettings::is_scte35_source_Set() const{
    return m_scte35_source_isSet;
}

bool OAINetworkInputSettings_HlsInputSettings::is_scte35_source_Valid() const{
    return m_scte35_source_isValid;
}

bool OAINetworkInputSettings_HlsInputSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffer_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInputSettings_HlsInputSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
