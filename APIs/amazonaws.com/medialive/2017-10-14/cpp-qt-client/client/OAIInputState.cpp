/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputState::OAIInputState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputState::OAIInputState() {
    this->initializeModel();
}

OAIInputState::~OAIInputState() {}

void OAIInputState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInputState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInputState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DETACHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputState::DETACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ATTACHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputState::ATTACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputState::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInputState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInputState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInputState::CREATING:
            val = "CREATING";
            break;
        case eOAIInputState::DETACHED:
            val = "DETACHED";
            break;
        case eOAIInputState::ATTACHED:
            val = "ATTACHED";
            break;
        case eOAIInputState::DELETING:
            val = "DELETING";
            break;
        case eOAIInputState::DELETED:
            val = "DELETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInputState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInputState::eOAIInputState OAIInputState::getValue() const {
    return m_value;
}

void OAIInputState::setValue(const OAIInputState::eOAIInputState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInputState::isSet() const {
    
    return m_value_isSet;
}

bool OAIInputState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
