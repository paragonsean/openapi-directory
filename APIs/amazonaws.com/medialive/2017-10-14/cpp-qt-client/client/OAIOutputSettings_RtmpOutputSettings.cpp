/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputSettings_RtmpOutputSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputSettings_RtmpOutputSettings::OAIOutputSettings_RtmpOutputSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputSettings_RtmpOutputSettings::OAIOutputSettings_RtmpOutputSettings() {
    this->initializeModel();
}

OAIOutputSettings_RtmpOutputSettings::~OAIOutputSettings_RtmpOutputSettings() {}

void OAIOutputSettings_RtmpOutputSettings::initializeModel() {

    m_certificate_mode_isSet = false;
    m_certificate_mode_isValid = false;

    m_connection_retry_interval_isSet = false;
    m_connection_retry_interval_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_num_retries_isSet = false;
    m_num_retries_isValid = false;
}

void OAIOutputSettings_RtmpOutputSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputSettings_RtmpOutputSettings::fromJsonObject(QJsonObject json) {

    m_certificate_mode_isValid = ::OpenAPI::fromJsonValue(m_certificate_mode, json[QString("CertificateMode")]);
    m_certificate_mode_isSet = !json[QString("CertificateMode")].isNull() && m_certificate_mode_isValid;

    m_connection_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_connection_retry_interval, json[QString("ConnectionRetryInterval")]);
    m_connection_retry_interval_isSet = !json[QString("ConnectionRetryInterval")].isNull() && m_connection_retry_interval_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_num_retries_isValid = ::OpenAPI::fromJsonValue(m_num_retries, json[QString("NumRetries")]);
    m_num_retries_isSet = !json[QString("NumRetries")].isNull() && m_num_retries_isValid;
}

QString OAIOutputSettings_RtmpOutputSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputSettings_RtmpOutputSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_mode.isSet()) {
        obj.insert(QString("CertificateMode"), ::OpenAPI::toJsonValue(m_certificate_mode));
    }
    if (m_connection_retry_interval_isSet) {
        obj.insert(QString("ConnectionRetryInterval"), ::OpenAPI::toJsonValue(m_connection_retry_interval));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_num_retries_isSet) {
        obj.insert(QString("NumRetries"), ::OpenAPI::toJsonValue(m_num_retries));
    }
    return obj;
}

OAIRtmpOutputCertificateMode OAIOutputSettings_RtmpOutputSettings::getCertificateMode() const {
    return m_certificate_mode;
}
void OAIOutputSettings_RtmpOutputSettings::setCertificateMode(const OAIRtmpOutputCertificateMode &certificate_mode) {
    m_certificate_mode = certificate_mode;
    m_certificate_mode_isSet = true;
}

bool OAIOutputSettings_RtmpOutputSettings::is_certificate_mode_Set() const{
    return m_certificate_mode_isSet;
}

bool OAIOutputSettings_RtmpOutputSettings::is_certificate_mode_Valid() const{
    return m_certificate_mode_isValid;
}

qint32 OAIOutputSettings_RtmpOutputSettings::getConnectionRetryInterval() const {
    return m_connection_retry_interval;
}
void OAIOutputSettings_RtmpOutputSettings::setConnectionRetryInterval(const qint32 &connection_retry_interval) {
    m_connection_retry_interval = connection_retry_interval;
    m_connection_retry_interval_isSet = true;
}

bool OAIOutputSettings_RtmpOutputSettings::is_connection_retry_interval_Set() const{
    return m_connection_retry_interval_isSet;
}

bool OAIOutputSettings_RtmpOutputSettings::is_connection_retry_interval_Valid() const{
    return m_connection_retry_interval_isValid;
}

OAIRtmpOutputSettings_Destination OAIOutputSettings_RtmpOutputSettings::getDestination() const {
    return m_destination;
}
void OAIOutputSettings_RtmpOutputSettings::setDestination(const OAIRtmpOutputSettings_Destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIOutputSettings_RtmpOutputSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIOutputSettings_RtmpOutputSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

qint32 OAIOutputSettings_RtmpOutputSettings::getNumRetries() const {
    return m_num_retries;
}
void OAIOutputSettings_RtmpOutputSettings::setNumRetries(const qint32 &num_retries) {
    m_num_retries = num_retries;
    m_num_retries_isSet = true;
}

bool OAIOutputSettings_RtmpOutputSettings::is_num_retries_Set() const{
    return m_num_retries_isSet;
}

bool OAIOutputSettings_RtmpOutputSettings::is_num_retries_Valid() const{
    return m_num_retries_isValid;
}

bool OAIOutputSettings_RtmpOutputSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_retries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputSettings_RtmpOutputSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && true;
}

} // namespace OpenAPI
