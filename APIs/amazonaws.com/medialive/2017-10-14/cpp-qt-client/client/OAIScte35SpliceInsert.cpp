/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScte35SpliceInsert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScte35SpliceInsert::OAIScte35SpliceInsert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScte35SpliceInsert::OAIScte35SpliceInsert() {
    this->initializeModel();
}

OAIScte35SpliceInsert::~OAIScte35SpliceInsert() {}

void OAIScte35SpliceInsert::initializeModel() {

    m_ad_avail_offset_isSet = false;
    m_ad_avail_offset_isValid = false;

    m_no_regional_blackout_flag_isSet = false;
    m_no_regional_blackout_flag_isValid = false;

    m_web_delivery_allowed_flag_isSet = false;
    m_web_delivery_allowed_flag_isValid = false;
}

void OAIScte35SpliceInsert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScte35SpliceInsert::fromJsonObject(QJsonObject json) {

    m_ad_avail_offset_isValid = ::OpenAPI::fromJsonValue(m_ad_avail_offset, json[QString("AdAvailOffset")]);
    m_ad_avail_offset_isSet = !json[QString("AdAvailOffset")].isNull() && m_ad_avail_offset_isValid;

    m_no_regional_blackout_flag_isValid = ::OpenAPI::fromJsonValue(m_no_regional_blackout_flag, json[QString("NoRegionalBlackoutFlag")]);
    m_no_regional_blackout_flag_isSet = !json[QString("NoRegionalBlackoutFlag")].isNull() && m_no_regional_blackout_flag_isValid;

    m_web_delivery_allowed_flag_isValid = ::OpenAPI::fromJsonValue(m_web_delivery_allowed_flag, json[QString("WebDeliveryAllowedFlag")]);
    m_web_delivery_allowed_flag_isSet = !json[QString("WebDeliveryAllowedFlag")].isNull() && m_web_delivery_allowed_flag_isValid;
}

QString OAIScte35SpliceInsert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScte35SpliceInsert::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_avail_offset_isSet) {
        obj.insert(QString("AdAvailOffset"), ::OpenAPI::toJsonValue(m_ad_avail_offset));
    }
    if (m_no_regional_blackout_flag.isSet()) {
        obj.insert(QString("NoRegionalBlackoutFlag"), ::OpenAPI::toJsonValue(m_no_regional_blackout_flag));
    }
    if (m_web_delivery_allowed_flag.isSet()) {
        obj.insert(QString("WebDeliveryAllowedFlag"), ::OpenAPI::toJsonValue(m_web_delivery_allowed_flag));
    }
    return obj;
}

qint32 OAIScte35SpliceInsert::getAdAvailOffset() const {
    return m_ad_avail_offset;
}
void OAIScte35SpliceInsert::setAdAvailOffset(const qint32 &ad_avail_offset) {
    m_ad_avail_offset = ad_avail_offset;
    m_ad_avail_offset_isSet = true;
}

bool OAIScte35SpliceInsert::is_ad_avail_offset_Set() const{
    return m_ad_avail_offset_isSet;
}

bool OAIScte35SpliceInsert::is_ad_avail_offset_Valid() const{
    return m_ad_avail_offset_isValid;
}

OAIScte35SpliceInsertNoRegionalBlackoutBehavior OAIScte35SpliceInsert::getNoRegionalBlackoutFlag() const {
    return m_no_regional_blackout_flag;
}
void OAIScte35SpliceInsert::setNoRegionalBlackoutFlag(const OAIScte35SpliceInsertNoRegionalBlackoutBehavior &no_regional_blackout_flag) {
    m_no_regional_blackout_flag = no_regional_blackout_flag;
    m_no_regional_blackout_flag_isSet = true;
}

bool OAIScte35SpliceInsert::is_no_regional_blackout_flag_Set() const{
    return m_no_regional_blackout_flag_isSet;
}

bool OAIScte35SpliceInsert::is_no_regional_blackout_flag_Valid() const{
    return m_no_regional_blackout_flag_isValid;
}

OAIScte35SpliceInsertWebDeliveryAllowedBehavior OAIScte35SpliceInsert::getWebDeliveryAllowedFlag() const {
    return m_web_delivery_allowed_flag;
}
void OAIScte35SpliceInsert::setWebDeliveryAllowedFlag(const OAIScte35SpliceInsertWebDeliveryAllowedBehavior &web_delivery_allowed_flag) {
    m_web_delivery_allowed_flag = web_delivery_allowed_flag;
    m_web_delivery_allowed_flag_isSet = true;
}

bool OAIScte35SpliceInsert::is_web_delivery_allowed_flag_Set() const{
    return m_web_delivery_allowed_flag_isSet;
}

bool OAIScte35SpliceInsert::is_web_delivery_allowed_flag_Valid() const{
    return m_web_delivery_allowed_flag_isValid;
}

bool OAIScte35SpliceInsert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_avail_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_regional_blackout_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_delivery_allowed_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScte35SpliceInsert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
