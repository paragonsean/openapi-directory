/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeInputDeviceResponse_HdDeviceSettings.h
 *
 * 
 */

#ifndef OAIDescribeInputDeviceResponse_HdDeviceSettings_H
#define OAIDescribeInputDeviceResponse_HdDeviceSettings_H

#include <QJsonObject>

#include "OAIInputDeviceActiveInput.h"
#include "OAIInputDeviceConfiguredInput.h"
#include "OAIInputDeviceScanType.h"
#include "OAIInputDeviceState.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeInputDeviceResponse_HdDeviceSettings : public OAIObject {
public:
    OAIDescribeInputDeviceResponse_HdDeviceSettings();
    OAIDescribeInputDeviceResponse_HdDeviceSettings(QString json);
    ~OAIDescribeInputDeviceResponse_HdDeviceSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInputDeviceActiveInput getActiveInput() const;
    void setActiveInput(const OAIInputDeviceActiveInput &active_input);
    bool is_active_input_Set() const;
    bool is_active_input_Valid() const;

    OAIInputDeviceConfiguredInput getConfiguredInput() const;
    void setConfiguredInput(const OAIInputDeviceConfiguredInput &configured_input);
    bool is_configured_input_Set() const;
    bool is_configured_input_Valid() const;

    OAIInputDeviceState getDeviceState() const;
    void setDeviceState(const OAIInputDeviceState &device_state);
    bool is_device_state_Set() const;
    bool is_device_state_Valid() const;

    double getFramerate() const;
    void setFramerate(const double &framerate);
    bool is_framerate_Set() const;
    bool is_framerate_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    qint32 getMaxBitrate() const;
    void setMaxBitrate(const qint32 &max_bitrate);
    bool is_max_bitrate_Set() const;
    bool is_max_bitrate_Valid() const;

    OAIInputDeviceScanType getScanType() const;
    void setScanType(const OAIInputDeviceScanType &scan_type);
    bool is_scan_type_Set() const;
    bool is_scan_type_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    qint32 getLatencyMs() const;
    void setLatencyMs(const qint32 &latency_ms);
    bool is_latency_ms_Set() const;
    bool is_latency_ms_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInputDeviceActiveInput m_active_input;
    bool m_active_input_isSet;
    bool m_active_input_isValid;

    OAIInputDeviceConfiguredInput m_configured_input;
    bool m_configured_input_isSet;
    bool m_configured_input_isValid;

    OAIInputDeviceState m_device_state;
    bool m_device_state_isSet;
    bool m_device_state_isValid;

    double m_framerate;
    bool m_framerate_isSet;
    bool m_framerate_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    qint32 m_max_bitrate;
    bool m_max_bitrate_isSet;
    bool m_max_bitrate_isValid;

    OAIInputDeviceScanType m_scan_type;
    bool m_scan_type_isSet;
    bool m_scan_type_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;

    qint32 m_latency_ms;
    bool m_latency_ms_isSet;
    bool m_latency_ms_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeInputDeviceResponse_HdDeviceSettings)

#endif // OAIDescribeInputDeviceResponse_HdDeviceSettings_H
