/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannelRequest::OAIUpdateChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannelRequest::OAIUpdateChannelRequest() {
    this->initializeModel();
}

OAIUpdateChannelRequest::~OAIUpdateChannelRequest() {}

void OAIUpdateChannelRequest::initializeModel() {

    m_cdi_input_specification_isSet = false;
    m_cdi_input_specification_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_encoder_settings_isSet = false;
    m_encoder_settings_isValid = false;

    m_input_attachments_isSet = false;
    m_input_attachments_isValid = false;

    m_input_specification_isSet = false;
    m_input_specification_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_maintenance_isSet = false;
    m_maintenance_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIUpdateChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannelRequest::fromJsonObject(QJsonObject json) {

    m_cdi_input_specification_isValid = ::OpenAPI::fromJsonValue(m_cdi_input_specification, json[QString("CdiInputSpecification")]);
    m_cdi_input_specification_isSet = !json[QString("CdiInputSpecification")].isNull() && m_cdi_input_specification_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_encoder_settings_isValid = ::OpenAPI::fromJsonValue(m_encoder_settings, json[QString("EncoderSettings")]);
    m_encoder_settings_isSet = !json[QString("EncoderSettings")].isNull() && m_encoder_settings_isValid;

    m_input_attachments_isValid = ::OpenAPI::fromJsonValue(m_input_attachments, json[QString("InputAttachments")]);
    m_input_attachments_isSet = !json[QString("InputAttachments")].isNull() && m_input_attachments_isValid;

    m_input_specification_isValid = ::OpenAPI::fromJsonValue(m_input_specification, json[QString("InputSpecification")]);
    m_input_specification_isSet = !json[QString("InputSpecification")].isNull() && m_input_specification_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;

    m_maintenance_isValid = ::OpenAPI::fromJsonValue(m_maintenance, json[QString("Maintenance")]);
    m_maintenance_isSet = !json[QString("Maintenance")].isNull() && m_maintenance_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIUpdateChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cdi_input_specification.isSet()) {
        obj.insert(QString("CdiInputSpecification"), ::OpenAPI::toJsonValue(m_cdi_input_specification));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_encoder_settings.isSet()) {
        obj.insert(QString("EncoderSettings"), ::OpenAPI::toJsonValue(m_encoder_settings));
    }
    if (m_input_attachments.isSet()) {
        obj.insert(QString("InputAttachments"), ::OpenAPI::toJsonValue(m_input_attachments));
    }
    if (m_input_specification.isSet()) {
        obj.insert(QString("InputSpecification"), ::OpenAPI::toJsonValue(m_input_specification));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_maintenance.isSet()) {
        obj.insert(QString("Maintenance"), ::OpenAPI::toJsonValue(m_maintenance));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

OAIDeleteChannelResponse_CdiInputSpecification OAIUpdateChannelRequest::getCdiInputSpecification() const {
    return m_cdi_input_specification;
}
void OAIUpdateChannelRequest::setCdiInputSpecification(const OAIDeleteChannelResponse_CdiInputSpecification &cdi_input_specification) {
    m_cdi_input_specification = cdi_input_specification;
    m_cdi_input_specification_isSet = true;
}

bool OAIUpdateChannelRequest::is_cdi_input_specification_Set() const{
    return m_cdi_input_specification_isSet;
}

bool OAIUpdateChannelRequest::is_cdi_input_specification_Valid() const{
    return m_cdi_input_specification_isValid;
}

QList OAIUpdateChannelRequest::getDestinations() const {
    return m_destinations;
}
void OAIUpdateChannelRequest::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIUpdateChannelRequest::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIUpdateChannelRequest::is_destinations_Valid() const{
    return m_destinations_isValid;
}

OAIUpdateChannelRequest_EncoderSettings OAIUpdateChannelRequest::getEncoderSettings() const {
    return m_encoder_settings;
}
void OAIUpdateChannelRequest::setEncoderSettings(const OAIUpdateChannelRequest_EncoderSettings &encoder_settings) {
    m_encoder_settings = encoder_settings;
    m_encoder_settings_isSet = true;
}

bool OAIUpdateChannelRequest::is_encoder_settings_Set() const{
    return m_encoder_settings_isSet;
}

bool OAIUpdateChannelRequest::is_encoder_settings_Valid() const{
    return m_encoder_settings_isValid;
}

QList OAIUpdateChannelRequest::getInputAttachments() const {
    return m_input_attachments;
}
void OAIUpdateChannelRequest::setInputAttachments(const QList &input_attachments) {
    m_input_attachments = input_attachments;
    m_input_attachments_isSet = true;
}

bool OAIUpdateChannelRequest::is_input_attachments_Set() const{
    return m_input_attachments_isSet;
}

bool OAIUpdateChannelRequest::is_input_attachments_Valid() const{
    return m_input_attachments_isValid;
}

OAIDeleteChannelResponse_InputSpecification OAIUpdateChannelRequest::getInputSpecification() const {
    return m_input_specification;
}
void OAIUpdateChannelRequest::setInputSpecification(const OAIDeleteChannelResponse_InputSpecification &input_specification) {
    m_input_specification = input_specification;
    m_input_specification_isSet = true;
}

bool OAIUpdateChannelRequest::is_input_specification_Set() const{
    return m_input_specification_isSet;
}

bool OAIUpdateChannelRequest::is_input_specification_Valid() const{
    return m_input_specification_isValid;
}

OAILogLevel OAIUpdateChannelRequest::getLogLevel() const {
    return m_log_level;
}
void OAIUpdateChannelRequest::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIUpdateChannelRequest::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIUpdateChannelRequest::is_log_level_Valid() const{
    return m_log_level_isValid;
}

OAIUpdateChannelRequest_Maintenance OAIUpdateChannelRequest::getMaintenance() const {
    return m_maintenance;
}
void OAIUpdateChannelRequest::setMaintenance(const OAIUpdateChannelRequest_Maintenance &maintenance) {
    m_maintenance = maintenance;
    m_maintenance_isSet = true;
}

bool OAIUpdateChannelRequest::is_maintenance_Set() const{
    return m_maintenance_isSet;
}

bool OAIUpdateChannelRequest::is_maintenance_Valid() const{
    return m_maintenance_isValid;
}

QString OAIUpdateChannelRequest::getName() const {
    return m_name;
}
void OAIUpdateChannelRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateChannelRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateChannelRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateChannelRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateChannelRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateChannelRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateChannelRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIUpdateChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cdi_input_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoder_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
