/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputChannelLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputChannelLevel::OAIInputChannelLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputChannelLevel::OAIInputChannelLevel() {
    this->initializeModel();
}

OAIInputChannelLevel::~OAIInputChannelLevel() {}

void OAIInputChannelLevel::initializeModel() {

    m_gain_isSet = false;
    m_gain_isValid = false;

    m_input_channel_isSet = false;
    m_input_channel_isValid = false;
}

void OAIInputChannelLevel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputChannelLevel::fromJsonObject(QJsonObject json) {

    m_gain_isValid = ::OpenAPI::fromJsonValue(m_gain, json[QString("Gain")]);
    m_gain_isSet = !json[QString("Gain")].isNull() && m_gain_isValid;

    m_input_channel_isValid = ::OpenAPI::fromJsonValue(m_input_channel, json[QString("InputChannel")]);
    m_input_channel_isSet = !json[QString("InputChannel")].isNull() && m_input_channel_isValid;
}

QString OAIInputChannelLevel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputChannelLevel::asJsonObject() const {
    QJsonObject obj;
    if (m_gain_isSet) {
        obj.insert(QString("Gain"), ::OpenAPI::toJsonValue(m_gain));
    }
    if (m_input_channel_isSet) {
        obj.insert(QString("InputChannel"), ::OpenAPI::toJsonValue(m_input_channel));
    }
    return obj;
}

qint32 OAIInputChannelLevel::getGain() const {
    return m_gain;
}
void OAIInputChannelLevel::setGain(const qint32 &gain) {
    m_gain = gain;
    m_gain_isSet = true;
}

bool OAIInputChannelLevel::is_gain_Set() const{
    return m_gain_isSet;
}

bool OAIInputChannelLevel::is_gain_Valid() const{
    return m_gain_isValid;
}

qint32 OAIInputChannelLevel::getInputChannel() const {
    return m_input_channel;
}
void OAIInputChannelLevel::setInputChannel(const qint32 &input_channel) {
    m_input_channel = input_channel;
    m_input_channel_isSet = true;
}

bool OAIInputChannelLevel::is_input_channel_Set() const{
    return m_input_channel_isSet;
}

bool OAIInputChannelLevel::is_input_channel_Valid() const{
    return m_input_channel_isValid;
}

bool OAIInputChannelLevel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputChannelLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gain_isValid && m_input_channel_isValid && true;
}

} // namespace OpenAPI
