/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputGroupSettings_HlsGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputGroupSettings_HlsGroupSettings::OAIOutputGroupSettings_HlsGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputGroupSettings_HlsGroupSettings::OAIOutputGroupSettings_HlsGroupSettings() {
    this->initializeModel();
}

OAIOutputGroupSettings_HlsGroupSettings::~OAIOutputGroupSettings_HlsGroupSettings() {}

void OAIOutputGroupSettings_HlsGroupSettings::initializeModel() {

    m_ad_markers_isSet = false;
    m_ad_markers_isValid = false;

    m_base_url_content_isSet = false;
    m_base_url_content_isValid = false;

    m_base_url_content1_isSet = false;
    m_base_url_content1_isValid = false;

    m_base_url_manifest_isSet = false;
    m_base_url_manifest_isValid = false;

    m_base_url_manifest1_isSet = false;
    m_base_url_manifest1_isValid = false;

    m_caption_language_mappings_isSet = false;
    m_caption_language_mappings_isValid = false;

    m_caption_language_setting_isSet = false;
    m_caption_language_setting_isValid = false;

    m_client_cache_isSet = false;
    m_client_cache_isValid = false;

    m_codec_specification_isSet = false;
    m_codec_specification_isValid = false;

    m_constant_iv_isSet = false;
    m_constant_iv_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_directory_structure_isSet = false;
    m_directory_structure_isValid = false;

    m_discontinuity_tags_isSet = false;
    m_discontinuity_tags_isValid = false;

    m_encryption_type_isSet = false;
    m_encryption_type_isValid = false;

    m_hls_cdn_settings_isSet = false;
    m_hls_cdn_settings_isValid = false;

    m_hls_id3_segment_tagging_isSet = false;
    m_hls_id3_segment_tagging_isValid = false;

    m_i_frame_only_playlists_isSet = false;
    m_i_frame_only_playlists_isValid = false;

    m_incomplete_segment_behavior_isSet = false;
    m_incomplete_segment_behavior_isValid = false;

    m_index_n_segments_isSet = false;
    m_index_n_segments_isValid = false;

    m_input_loss_action_isSet = false;
    m_input_loss_action_isValid = false;

    m_iv_in_manifest_isSet = false;
    m_iv_in_manifest_isValid = false;

    m_iv_source_isSet = false;
    m_iv_source_isValid = false;

    m_keep_segments_isSet = false;
    m_keep_segments_isValid = false;

    m_key_format_isSet = false;
    m_key_format_isValid = false;

    m_key_format_versions_isSet = false;
    m_key_format_versions_isValid = false;

    m_key_provider_settings_isSet = false;
    m_key_provider_settings_isValid = false;

    m_manifest_compression_isSet = false;
    m_manifest_compression_isValid = false;

    m_manifest_duration_format_isSet = false;
    m_manifest_duration_format_isValid = false;

    m_min_segment_length_isSet = false;
    m_min_segment_length_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_output_selection_isSet = false;
    m_output_selection_isValid = false;

    m_program_date_time_isSet = false;
    m_program_date_time_isValid = false;

    m_program_date_time_clock_isSet = false;
    m_program_date_time_clock_isValid = false;

    m_program_date_time_period_isSet = false;
    m_program_date_time_period_isValid = false;

    m_redundant_manifest_isSet = false;
    m_redundant_manifest_isValid = false;

    m_segment_length_isSet = false;
    m_segment_length_isValid = false;

    m_segmentation_mode_isSet = false;
    m_segmentation_mode_isValid = false;

    m_segments_per_subdirectory_isSet = false;
    m_segments_per_subdirectory_isValid = false;

    m_stream_inf_resolution_isSet = false;
    m_stream_inf_resolution_isValid = false;

    m_timed_metadata_id3_frame_isSet = false;
    m_timed_metadata_id3_frame_isValid = false;

    m_timed_metadata_id3_period_isSet = false;
    m_timed_metadata_id3_period_isValid = false;

    m_timestamp_delta_milliseconds_isSet = false;
    m_timestamp_delta_milliseconds_isValid = false;

    m_ts_file_mode_isSet = false;
    m_ts_file_mode_isValid = false;
}

void OAIOutputGroupSettings_HlsGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputGroupSettings_HlsGroupSettings::fromJsonObject(QJsonObject json) {

    m_ad_markers_isValid = ::OpenAPI::fromJsonValue(m_ad_markers, json[QString("AdMarkers")]);
    m_ad_markers_isSet = !json[QString("AdMarkers")].isNull() && m_ad_markers_isValid;

    m_base_url_content_isValid = ::OpenAPI::fromJsonValue(m_base_url_content, json[QString("BaseUrlContent")]);
    m_base_url_content_isSet = !json[QString("BaseUrlContent")].isNull() && m_base_url_content_isValid;

    m_base_url_content1_isValid = ::OpenAPI::fromJsonValue(m_base_url_content1, json[QString("BaseUrlContent1")]);
    m_base_url_content1_isSet = !json[QString("BaseUrlContent1")].isNull() && m_base_url_content1_isValid;

    m_base_url_manifest_isValid = ::OpenAPI::fromJsonValue(m_base_url_manifest, json[QString("BaseUrlManifest")]);
    m_base_url_manifest_isSet = !json[QString("BaseUrlManifest")].isNull() && m_base_url_manifest_isValid;

    m_base_url_manifest1_isValid = ::OpenAPI::fromJsonValue(m_base_url_manifest1, json[QString("BaseUrlManifest1")]);
    m_base_url_manifest1_isSet = !json[QString("BaseUrlManifest1")].isNull() && m_base_url_manifest1_isValid;

    m_caption_language_mappings_isValid = ::OpenAPI::fromJsonValue(m_caption_language_mappings, json[QString("CaptionLanguageMappings")]);
    m_caption_language_mappings_isSet = !json[QString("CaptionLanguageMappings")].isNull() && m_caption_language_mappings_isValid;

    m_caption_language_setting_isValid = ::OpenAPI::fromJsonValue(m_caption_language_setting, json[QString("CaptionLanguageSetting")]);
    m_caption_language_setting_isSet = !json[QString("CaptionLanguageSetting")].isNull() && m_caption_language_setting_isValid;

    m_client_cache_isValid = ::OpenAPI::fromJsonValue(m_client_cache, json[QString("ClientCache")]);
    m_client_cache_isSet = !json[QString("ClientCache")].isNull() && m_client_cache_isValid;

    m_codec_specification_isValid = ::OpenAPI::fromJsonValue(m_codec_specification, json[QString("CodecSpecification")]);
    m_codec_specification_isSet = !json[QString("CodecSpecification")].isNull() && m_codec_specification_isValid;

    m_constant_iv_isValid = ::OpenAPI::fromJsonValue(m_constant_iv, json[QString("ConstantIv")]);
    m_constant_iv_isSet = !json[QString("ConstantIv")].isNull() && m_constant_iv_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_directory_structure_isValid = ::OpenAPI::fromJsonValue(m_directory_structure, json[QString("DirectoryStructure")]);
    m_directory_structure_isSet = !json[QString("DirectoryStructure")].isNull() && m_directory_structure_isValid;

    m_discontinuity_tags_isValid = ::OpenAPI::fromJsonValue(m_discontinuity_tags, json[QString("DiscontinuityTags")]);
    m_discontinuity_tags_isSet = !json[QString("DiscontinuityTags")].isNull() && m_discontinuity_tags_isValid;

    m_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_type, json[QString("EncryptionType")]);
    m_encryption_type_isSet = !json[QString("EncryptionType")].isNull() && m_encryption_type_isValid;

    m_hls_cdn_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_cdn_settings, json[QString("HlsCdnSettings")]);
    m_hls_cdn_settings_isSet = !json[QString("HlsCdnSettings")].isNull() && m_hls_cdn_settings_isValid;

    m_hls_id3_segment_tagging_isValid = ::OpenAPI::fromJsonValue(m_hls_id3_segment_tagging, json[QString("HlsId3SegmentTagging")]);
    m_hls_id3_segment_tagging_isSet = !json[QString("HlsId3SegmentTagging")].isNull() && m_hls_id3_segment_tagging_isValid;

    m_i_frame_only_playlists_isValid = ::OpenAPI::fromJsonValue(m_i_frame_only_playlists, json[QString("IFrameOnlyPlaylists")]);
    m_i_frame_only_playlists_isSet = !json[QString("IFrameOnlyPlaylists")].isNull() && m_i_frame_only_playlists_isValid;

    m_incomplete_segment_behavior_isValid = ::OpenAPI::fromJsonValue(m_incomplete_segment_behavior, json[QString("IncompleteSegmentBehavior")]);
    m_incomplete_segment_behavior_isSet = !json[QString("IncompleteSegmentBehavior")].isNull() && m_incomplete_segment_behavior_isValid;

    m_index_n_segments_isValid = ::OpenAPI::fromJsonValue(m_index_n_segments, json[QString("IndexNSegments")]);
    m_index_n_segments_isSet = !json[QString("IndexNSegments")].isNull() && m_index_n_segments_isValid;

    m_input_loss_action_isValid = ::OpenAPI::fromJsonValue(m_input_loss_action, json[QString("InputLossAction")]);
    m_input_loss_action_isSet = !json[QString("InputLossAction")].isNull() && m_input_loss_action_isValid;

    m_iv_in_manifest_isValid = ::OpenAPI::fromJsonValue(m_iv_in_manifest, json[QString("IvInManifest")]);
    m_iv_in_manifest_isSet = !json[QString("IvInManifest")].isNull() && m_iv_in_manifest_isValid;

    m_iv_source_isValid = ::OpenAPI::fromJsonValue(m_iv_source, json[QString("IvSource")]);
    m_iv_source_isSet = !json[QString("IvSource")].isNull() && m_iv_source_isValid;

    m_keep_segments_isValid = ::OpenAPI::fromJsonValue(m_keep_segments, json[QString("KeepSegments")]);
    m_keep_segments_isSet = !json[QString("KeepSegments")].isNull() && m_keep_segments_isValid;

    m_key_format_isValid = ::OpenAPI::fromJsonValue(m_key_format, json[QString("KeyFormat")]);
    m_key_format_isSet = !json[QString("KeyFormat")].isNull() && m_key_format_isValid;

    m_key_format_versions_isValid = ::OpenAPI::fromJsonValue(m_key_format_versions, json[QString("KeyFormatVersions")]);
    m_key_format_versions_isSet = !json[QString("KeyFormatVersions")].isNull() && m_key_format_versions_isValid;

    m_key_provider_settings_isValid = ::OpenAPI::fromJsonValue(m_key_provider_settings, json[QString("KeyProviderSettings")]);
    m_key_provider_settings_isSet = !json[QString("KeyProviderSettings")].isNull() && m_key_provider_settings_isValid;

    m_manifest_compression_isValid = ::OpenAPI::fromJsonValue(m_manifest_compression, json[QString("ManifestCompression")]);
    m_manifest_compression_isSet = !json[QString("ManifestCompression")].isNull() && m_manifest_compression_isValid;

    m_manifest_duration_format_isValid = ::OpenAPI::fromJsonValue(m_manifest_duration_format, json[QString("ManifestDurationFormat")]);
    m_manifest_duration_format_isSet = !json[QString("ManifestDurationFormat")].isNull() && m_manifest_duration_format_isValid;

    m_min_segment_length_isValid = ::OpenAPI::fromJsonValue(m_min_segment_length, json[QString("MinSegmentLength")]);
    m_min_segment_length_isSet = !json[QString("MinSegmentLength")].isNull() && m_min_segment_length_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_output_selection_isValid = ::OpenAPI::fromJsonValue(m_output_selection, json[QString("OutputSelection")]);
    m_output_selection_isSet = !json[QString("OutputSelection")].isNull() && m_output_selection_isValid;

    m_program_date_time_isValid = ::OpenAPI::fromJsonValue(m_program_date_time, json[QString("ProgramDateTime")]);
    m_program_date_time_isSet = !json[QString("ProgramDateTime")].isNull() && m_program_date_time_isValid;

    m_program_date_time_clock_isValid = ::OpenAPI::fromJsonValue(m_program_date_time_clock, json[QString("ProgramDateTimeClock")]);
    m_program_date_time_clock_isSet = !json[QString("ProgramDateTimeClock")].isNull() && m_program_date_time_clock_isValid;

    m_program_date_time_period_isValid = ::OpenAPI::fromJsonValue(m_program_date_time_period, json[QString("ProgramDateTimePeriod")]);
    m_program_date_time_period_isSet = !json[QString("ProgramDateTimePeriod")].isNull() && m_program_date_time_period_isValid;

    m_redundant_manifest_isValid = ::OpenAPI::fromJsonValue(m_redundant_manifest, json[QString("RedundantManifest")]);
    m_redundant_manifest_isSet = !json[QString("RedundantManifest")].isNull() && m_redundant_manifest_isValid;

    m_segment_length_isValid = ::OpenAPI::fromJsonValue(m_segment_length, json[QString("SegmentLength")]);
    m_segment_length_isSet = !json[QString("SegmentLength")].isNull() && m_segment_length_isValid;

    m_segmentation_mode_isValid = ::OpenAPI::fromJsonValue(m_segmentation_mode, json[QString("SegmentationMode")]);
    m_segmentation_mode_isSet = !json[QString("SegmentationMode")].isNull() && m_segmentation_mode_isValid;

    m_segments_per_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_segments_per_subdirectory, json[QString("SegmentsPerSubdirectory")]);
    m_segments_per_subdirectory_isSet = !json[QString("SegmentsPerSubdirectory")].isNull() && m_segments_per_subdirectory_isValid;

    m_stream_inf_resolution_isValid = ::OpenAPI::fromJsonValue(m_stream_inf_resolution, json[QString("StreamInfResolution")]);
    m_stream_inf_resolution_isSet = !json[QString("StreamInfResolution")].isNull() && m_stream_inf_resolution_isValid;

    m_timed_metadata_id3_frame_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_id3_frame, json[QString("TimedMetadataId3Frame")]);
    m_timed_metadata_id3_frame_isSet = !json[QString("TimedMetadataId3Frame")].isNull() && m_timed_metadata_id3_frame_isValid;

    m_timed_metadata_id3_period_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_id3_period, json[QString("TimedMetadataId3Period")]);
    m_timed_metadata_id3_period_isSet = !json[QString("TimedMetadataId3Period")].isNull() && m_timed_metadata_id3_period_isValid;

    m_timestamp_delta_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_timestamp_delta_milliseconds, json[QString("TimestampDeltaMilliseconds")]);
    m_timestamp_delta_milliseconds_isSet = !json[QString("TimestampDeltaMilliseconds")].isNull() && m_timestamp_delta_milliseconds_isValid;

    m_ts_file_mode_isValid = ::OpenAPI::fromJsonValue(m_ts_file_mode, json[QString("TsFileMode")]);
    m_ts_file_mode_isSet = !json[QString("TsFileMode")].isNull() && m_ts_file_mode_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputGroupSettings_HlsGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_markers.isSet()) {
        obj.insert(QString("AdMarkers"), ::OpenAPI::toJsonValue(m_ad_markers));
    }
    if (m_base_url_content_isSet) {
        obj.insert(QString("BaseUrlContent"), ::OpenAPI::toJsonValue(m_base_url_content));
    }
    if (m_base_url_content1_isSet) {
        obj.insert(QString("BaseUrlContent1"), ::OpenAPI::toJsonValue(m_base_url_content1));
    }
    if (m_base_url_manifest_isSet) {
        obj.insert(QString("BaseUrlManifest"), ::OpenAPI::toJsonValue(m_base_url_manifest));
    }
    if (m_base_url_manifest1_isSet) {
        obj.insert(QString("BaseUrlManifest1"), ::OpenAPI::toJsonValue(m_base_url_manifest1));
    }
    if (m_caption_language_mappings.isSet()) {
        obj.insert(QString("CaptionLanguageMappings"), ::OpenAPI::toJsonValue(m_caption_language_mappings));
    }
    if (m_caption_language_setting.isSet()) {
        obj.insert(QString("CaptionLanguageSetting"), ::OpenAPI::toJsonValue(m_caption_language_setting));
    }
    if (m_client_cache.isSet()) {
        obj.insert(QString("ClientCache"), ::OpenAPI::toJsonValue(m_client_cache));
    }
    if (m_codec_specification.isSet()) {
        obj.insert(QString("CodecSpecification"), ::OpenAPI::toJsonValue(m_codec_specification));
    }
    if (m_constant_iv_isSet) {
        obj.insert(QString("ConstantIv"), ::OpenAPI::toJsonValue(m_constant_iv));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_directory_structure.isSet()) {
        obj.insert(QString("DirectoryStructure"), ::OpenAPI::toJsonValue(m_directory_structure));
    }
    if (m_discontinuity_tags.isSet()) {
        obj.insert(QString("DiscontinuityTags"), ::OpenAPI::toJsonValue(m_discontinuity_tags));
    }
    if (m_encryption_type.isSet()) {
        obj.insert(QString("EncryptionType"), ::OpenAPI::toJsonValue(m_encryption_type));
    }
    if (m_hls_cdn_settings.isSet()) {
        obj.insert(QString("HlsCdnSettings"), ::OpenAPI::toJsonValue(m_hls_cdn_settings));
    }
    if (m_hls_id3_segment_tagging.isSet()) {
        obj.insert(QString("HlsId3SegmentTagging"), ::OpenAPI::toJsonValue(m_hls_id3_segment_tagging));
    }
    if (m_i_frame_only_playlists.isSet()) {
        obj.insert(QString("IFrameOnlyPlaylists"), ::OpenAPI::toJsonValue(m_i_frame_only_playlists));
    }
    if (m_incomplete_segment_behavior.isSet()) {
        obj.insert(QString("IncompleteSegmentBehavior"), ::OpenAPI::toJsonValue(m_incomplete_segment_behavior));
    }
    if (m_index_n_segments_isSet) {
        obj.insert(QString("IndexNSegments"), ::OpenAPI::toJsonValue(m_index_n_segments));
    }
    if (m_input_loss_action.isSet()) {
        obj.insert(QString("InputLossAction"), ::OpenAPI::toJsonValue(m_input_loss_action));
    }
    if (m_iv_in_manifest.isSet()) {
        obj.insert(QString("IvInManifest"), ::OpenAPI::toJsonValue(m_iv_in_manifest));
    }
    if (m_iv_source.isSet()) {
        obj.insert(QString("IvSource"), ::OpenAPI::toJsonValue(m_iv_source));
    }
    if (m_keep_segments_isSet) {
        obj.insert(QString("KeepSegments"), ::OpenAPI::toJsonValue(m_keep_segments));
    }
    if (m_key_format_isSet) {
        obj.insert(QString("KeyFormat"), ::OpenAPI::toJsonValue(m_key_format));
    }
    if (m_key_format_versions_isSet) {
        obj.insert(QString("KeyFormatVersions"), ::OpenAPI::toJsonValue(m_key_format_versions));
    }
    if (m_key_provider_settings.isSet()) {
        obj.insert(QString("KeyProviderSettings"), ::OpenAPI::toJsonValue(m_key_provider_settings));
    }
    if (m_manifest_compression.isSet()) {
        obj.insert(QString("ManifestCompression"), ::OpenAPI::toJsonValue(m_manifest_compression));
    }
    if (m_manifest_duration_format.isSet()) {
        obj.insert(QString("ManifestDurationFormat"), ::OpenAPI::toJsonValue(m_manifest_duration_format));
    }
    if (m_min_segment_length_isSet) {
        obj.insert(QString("MinSegmentLength"), ::OpenAPI::toJsonValue(m_min_segment_length));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_output_selection.isSet()) {
        obj.insert(QString("OutputSelection"), ::OpenAPI::toJsonValue(m_output_selection));
    }
    if (m_program_date_time.isSet()) {
        obj.insert(QString("ProgramDateTime"), ::OpenAPI::toJsonValue(m_program_date_time));
    }
    if (m_program_date_time_clock.isSet()) {
        obj.insert(QString("ProgramDateTimeClock"), ::OpenAPI::toJsonValue(m_program_date_time_clock));
    }
    if (m_program_date_time_period_isSet) {
        obj.insert(QString("ProgramDateTimePeriod"), ::OpenAPI::toJsonValue(m_program_date_time_period));
    }
    if (m_redundant_manifest.isSet()) {
        obj.insert(QString("RedundantManifest"), ::OpenAPI::toJsonValue(m_redundant_manifest));
    }
    if (m_segment_length_isSet) {
        obj.insert(QString("SegmentLength"), ::OpenAPI::toJsonValue(m_segment_length));
    }
    if (m_segmentation_mode.isSet()) {
        obj.insert(QString("SegmentationMode"), ::OpenAPI::toJsonValue(m_segmentation_mode));
    }
    if (m_segments_per_subdirectory_isSet) {
        obj.insert(QString("SegmentsPerSubdirectory"), ::OpenAPI::toJsonValue(m_segments_per_subdirectory));
    }
    if (m_stream_inf_resolution.isSet()) {
        obj.insert(QString("StreamInfResolution"), ::OpenAPI::toJsonValue(m_stream_inf_resolution));
    }
    if (m_timed_metadata_id3_frame.isSet()) {
        obj.insert(QString("TimedMetadataId3Frame"), ::OpenAPI::toJsonValue(m_timed_metadata_id3_frame));
    }
    if (m_timed_metadata_id3_period_isSet) {
        obj.insert(QString("TimedMetadataId3Period"), ::OpenAPI::toJsonValue(m_timed_metadata_id3_period));
    }
    if (m_timestamp_delta_milliseconds_isSet) {
        obj.insert(QString("TimestampDeltaMilliseconds"), ::OpenAPI::toJsonValue(m_timestamp_delta_milliseconds));
    }
    if (m_ts_file_mode.isSet()) {
        obj.insert(QString("TsFileMode"), ::OpenAPI::toJsonValue(m_ts_file_mode));
    }
    return obj;
}

QList OAIOutputGroupSettings_HlsGroupSettings::getAdMarkers() const {
    return m_ad_markers;
}
void OAIOutputGroupSettings_HlsGroupSettings::setAdMarkers(const QList &ad_markers) {
    m_ad_markers = ad_markers;
    m_ad_markers_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_ad_markers_Set() const{
    return m_ad_markers_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_ad_markers_Valid() const{
    return m_ad_markers_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getBaseUrlContent() const {
    return m_base_url_content;
}
void OAIOutputGroupSettings_HlsGroupSettings::setBaseUrlContent(const QString &base_url_content) {
    m_base_url_content = base_url_content;
    m_base_url_content_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_content_Set() const{
    return m_base_url_content_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_content_Valid() const{
    return m_base_url_content_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getBaseUrlContent1() const {
    return m_base_url_content1;
}
void OAIOutputGroupSettings_HlsGroupSettings::setBaseUrlContent1(const QString &base_url_content1) {
    m_base_url_content1 = base_url_content1;
    m_base_url_content1_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_content1_Set() const{
    return m_base_url_content1_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_content1_Valid() const{
    return m_base_url_content1_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getBaseUrlManifest() const {
    return m_base_url_manifest;
}
void OAIOutputGroupSettings_HlsGroupSettings::setBaseUrlManifest(const QString &base_url_manifest) {
    m_base_url_manifest = base_url_manifest;
    m_base_url_manifest_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_manifest_Set() const{
    return m_base_url_manifest_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_manifest_Valid() const{
    return m_base_url_manifest_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getBaseUrlManifest1() const {
    return m_base_url_manifest1;
}
void OAIOutputGroupSettings_HlsGroupSettings::setBaseUrlManifest1(const QString &base_url_manifest1) {
    m_base_url_manifest1 = base_url_manifest1;
    m_base_url_manifest1_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_manifest1_Set() const{
    return m_base_url_manifest1_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_base_url_manifest1_Valid() const{
    return m_base_url_manifest1_isValid;
}

QList OAIOutputGroupSettings_HlsGroupSettings::getCaptionLanguageMappings() const {
    return m_caption_language_mappings;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCaptionLanguageMappings(const QList &caption_language_mappings) {
    m_caption_language_mappings = caption_language_mappings;
    m_caption_language_mappings_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_mappings_Set() const{
    return m_caption_language_mappings_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_mappings_Valid() const{
    return m_caption_language_mappings_isValid;
}

OAIHlsCaptionLanguageSetting OAIOutputGroupSettings_HlsGroupSettings::getCaptionLanguageSetting() const {
    return m_caption_language_setting;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCaptionLanguageSetting(const OAIHlsCaptionLanguageSetting &caption_language_setting) {
    m_caption_language_setting = caption_language_setting;
    m_caption_language_setting_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_setting_Set() const{
    return m_caption_language_setting_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_caption_language_setting_Valid() const{
    return m_caption_language_setting_isValid;
}

OAIHlsClientCache OAIOutputGroupSettings_HlsGroupSettings::getClientCache() const {
    return m_client_cache;
}
void OAIOutputGroupSettings_HlsGroupSettings::setClientCache(const OAIHlsClientCache &client_cache) {
    m_client_cache = client_cache;
    m_client_cache_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_client_cache_Set() const{
    return m_client_cache_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_client_cache_Valid() const{
    return m_client_cache_isValid;
}

OAIHlsCodecSpecification OAIOutputGroupSettings_HlsGroupSettings::getCodecSpecification() const {
    return m_codec_specification;
}
void OAIOutputGroupSettings_HlsGroupSettings::setCodecSpecification(const OAIHlsCodecSpecification &codec_specification) {
    m_codec_specification = codec_specification;
    m_codec_specification_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_codec_specification_Set() const{
    return m_codec_specification_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_codec_specification_Valid() const{
    return m_codec_specification_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getConstantIv() const {
    return m_constant_iv;
}
void OAIOutputGroupSettings_HlsGroupSettings::setConstantIv(const QString &constant_iv) {
    m_constant_iv = constant_iv;
    m_constant_iv_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_constant_iv_Set() const{
    return m_constant_iv_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_constant_iv_Valid() const{
    return m_constant_iv_isValid;
}

OAIHlsGroupSettings_Destination OAIOutputGroupSettings_HlsGroupSettings::getDestination() const {
    return m_destination;
}
void OAIOutputGroupSettings_HlsGroupSettings::setDestination(const OAIHlsGroupSettings_Destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIHlsDirectoryStructure OAIOutputGroupSettings_HlsGroupSettings::getDirectoryStructure() const {
    return m_directory_structure;
}
void OAIOutputGroupSettings_HlsGroupSettings::setDirectoryStructure(const OAIHlsDirectoryStructure &directory_structure) {
    m_directory_structure = directory_structure;
    m_directory_structure_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_directory_structure_Set() const{
    return m_directory_structure_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_directory_structure_Valid() const{
    return m_directory_structure_isValid;
}

OAIHlsDiscontinuityTags OAIOutputGroupSettings_HlsGroupSettings::getDiscontinuityTags() const {
    return m_discontinuity_tags;
}
void OAIOutputGroupSettings_HlsGroupSettings::setDiscontinuityTags(const OAIHlsDiscontinuityTags &discontinuity_tags) {
    m_discontinuity_tags = discontinuity_tags;
    m_discontinuity_tags_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_discontinuity_tags_Set() const{
    return m_discontinuity_tags_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_discontinuity_tags_Valid() const{
    return m_discontinuity_tags_isValid;
}

OAIHlsEncryptionType OAIOutputGroupSettings_HlsGroupSettings::getEncryptionType() const {
    return m_encryption_type;
}
void OAIOutputGroupSettings_HlsGroupSettings::setEncryptionType(const OAIHlsEncryptionType &encryption_type) {
    m_encryption_type = encryption_type;
    m_encryption_type_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_encryption_type_Set() const{
    return m_encryption_type_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_encryption_type_Valid() const{
    return m_encryption_type_isValid;
}

OAIHlsGroupSettings_HlsCdnSettings OAIOutputGroupSettings_HlsGroupSettings::getHlsCdnSettings() const {
    return m_hls_cdn_settings;
}
void OAIOutputGroupSettings_HlsGroupSettings::setHlsCdnSettings(const OAIHlsGroupSettings_HlsCdnSettings &hls_cdn_settings) {
    m_hls_cdn_settings = hls_cdn_settings;
    m_hls_cdn_settings_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_hls_cdn_settings_Set() const{
    return m_hls_cdn_settings_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_hls_cdn_settings_Valid() const{
    return m_hls_cdn_settings_isValid;
}

OAIHlsId3SegmentTaggingState OAIOutputGroupSettings_HlsGroupSettings::getHlsId3SegmentTagging() const {
    return m_hls_id3_segment_tagging;
}
void OAIOutputGroupSettings_HlsGroupSettings::setHlsId3SegmentTagging(const OAIHlsId3SegmentTaggingState &hls_id3_segment_tagging) {
    m_hls_id3_segment_tagging = hls_id3_segment_tagging;
    m_hls_id3_segment_tagging_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_hls_id3_segment_tagging_Set() const{
    return m_hls_id3_segment_tagging_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_hls_id3_segment_tagging_Valid() const{
    return m_hls_id3_segment_tagging_isValid;
}

OAIIFrameOnlyPlaylistType OAIOutputGroupSettings_HlsGroupSettings::getIFrameOnlyPlaylists() const {
    return m_i_frame_only_playlists;
}
void OAIOutputGroupSettings_HlsGroupSettings::setIFrameOnlyPlaylists(const OAIIFrameOnlyPlaylistType &i_frame_only_playlists) {
    m_i_frame_only_playlists = i_frame_only_playlists;
    m_i_frame_only_playlists_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_i_frame_only_playlists_Set() const{
    return m_i_frame_only_playlists_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_i_frame_only_playlists_Valid() const{
    return m_i_frame_only_playlists_isValid;
}

OAIHlsIncompleteSegmentBehavior OAIOutputGroupSettings_HlsGroupSettings::getIncompleteSegmentBehavior() const {
    return m_incomplete_segment_behavior;
}
void OAIOutputGroupSettings_HlsGroupSettings::setIncompleteSegmentBehavior(const OAIHlsIncompleteSegmentBehavior &incomplete_segment_behavior) {
    m_incomplete_segment_behavior = incomplete_segment_behavior;
    m_incomplete_segment_behavior_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_incomplete_segment_behavior_Set() const{
    return m_incomplete_segment_behavior_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_incomplete_segment_behavior_Valid() const{
    return m_incomplete_segment_behavior_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getIndexNSegments() const {
    return m_index_n_segments;
}
void OAIOutputGroupSettings_HlsGroupSettings::setIndexNSegments(const qint32 &index_n_segments) {
    m_index_n_segments = index_n_segments;
    m_index_n_segments_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_index_n_segments_Set() const{
    return m_index_n_segments_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_index_n_segments_Valid() const{
    return m_index_n_segments_isValid;
}

OAIInputLossActionForHlsOut OAIOutputGroupSettings_HlsGroupSettings::getInputLossAction() const {
    return m_input_loss_action;
}
void OAIOutputGroupSettings_HlsGroupSettings::setInputLossAction(const OAIInputLossActionForHlsOut &input_loss_action) {
    m_input_loss_action = input_loss_action;
    m_input_loss_action_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_input_loss_action_Set() const{
    return m_input_loss_action_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_input_loss_action_Valid() const{
    return m_input_loss_action_isValid;
}

OAIHlsIvInManifest OAIOutputGroupSettings_HlsGroupSettings::getIvInManifest() const {
    return m_iv_in_manifest;
}
void OAIOutputGroupSettings_HlsGroupSettings::setIvInManifest(const OAIHlsIvInManifest &iv_in_manifest) {
    m_iv_in_manifest = iv_in_manifest;
    m_iv_in_manifest_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_iv_in_manifest_Set() const{
    return m_iv_in_manifest_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_iv_in_manifest_Valid() const{
    return m_iv_in_manifest_isValid;
}

OAIHlsIvSource OAIOutputGroupSettings_HlsGroupSettings::getIvSource() const {
    return m_iv_source;
}
void OAIOutputGroupSettings_HlsGroupSettings::setIvSource(const OAIHlsIvSource &iv_source) {
    m_iv_source = iv_source;
    m_iv_source_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_iv_source_Set() const{
    return m_iv_source_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_iv_source_Valid() const{
    return m_iv_source_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getKeepSegments() const {
    return m_keep_segments;
}
void OAIOutputGroupSettings_HlsGroupSettings::setKeepSegments(const qint32 &keep_segments) {
    m_keep_segments = keep_segments;
    m_keep_segments_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_keep_segments_Set() const{
    return m_keep_segments_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_keep_segments_Valid() const{
    return m_keep_segments_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getKeyFormat() const {
    return m_key_format;
}
void OAIOutputGroupSettings_HlsGroupSettings::setKeyFormat(const QString &key_format) {
    m_key_format = key_format;
    m_key_format_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_key_format_Set() const{
    return m_key_format_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_key_format_Valid() const{
    return m_key_format_isValid;
}

QString OAIOutputGroupSettings_HlsGroupSettings::getKeyFormatVersions() const {
    return m_key_format_versions;
}
void OAIOutputGroupSettings_HlsGroupSettings::setKeyFormatVersions(const QString &key_format_versions) {
    m_key_format_versions = key_format_versions;
    m_key_format_versions_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_key_format_versions_Set() const{
    return m_key_format_versions_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_key_format_versions_Valid() const{
    return m_key_format_versions_isValid;
}

OAIHlsGroupSettings_KeyProviderSettings OAIOutputGroupSettings_HlsGroupSettings::getKeyProviderSettings() const {
    return m_key_provider_settings;
}
void OAIOutputGroupSettings_HlsGroupSettings::setKeyProviderSettings(const OAIHlsGroupSettings_KeyProviderSettings &key_provider_settings) {
    m_key_provider_settings = key_provider_settings;
    m_key_provider_settings_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_key_provider_settings_Set() const{
    return m_key_provider_settings_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_key_provider_settings_Valid() const{
    return m_key_provider_settings_isValid;
}

OAIHlsManifestCompression OAIOutputGroupSettings_HlsGroupSettings::getManifestCompression() const {
    return m_manifest_compression;
}
void OAIOutputGroupSettings_HlsGroupSettings::setManifestCompression(const OAIHlsManifestCompression &manifest_compression) {
    m_manifest_compression = manifest_compression;
    m_manifest_compression_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_compression_Set() const{
    return m_manifest_compression_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_compression_Valid() const{
    return m_manifest_compression_isValid;
}

OAIHlsManifestDurationFormat OAIOutputGroupSettings_HlsGroupSettings::getManifestDurationFormat() const {
    return m_manifest_duration_format;
}
void OAIOutputGroupSettings_HlsGroupSettings::setManifestDurationFormat(const OAIHlsManifestDurationFormat &manifest_duration_format) {
    m_manifest_duration_format = manifest_duration_format;
    m_manifest_duration_format_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_duration_format_Set() const{
    return m_manifest_duration_format_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_manifest_duration_format_Valid() const{
    return m_manifest_duration_format_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getMinSegmentLength() const {
    return m_min_segment_length;
}
void OAIOutputGroupSettings_HlsGroupSettings::setMinSegmentLength(const qint32 &min_segment_length) {
    m_min_segment_length = min_segment_length;
    m_min_segment_length_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_min_segment_length_Set() const{
    return m_min_segment_length_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_min_segment_length_Valid() const{
    return m_min_segment_length_isValid;
}

OAIHlsMode OAIOutputGroupSettings_HlsGroupSettings::getMode() const {
    return m_mode;
}
void OAIOutputGroupSettings_HlsGroupSettings::setMode(const OAIHlsMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIHlsOutputSelection OAIOutputGroupSettings_HlsGroupSettings::getOutputSelection() const {
    return m_output_selection;
}
void OAIOutputGroupSettings_HlsGroupSettings::setOutputSelection(const OAIHlsOutputSelection &output_selection) {
    m_output_selection = output_selection;
    m_output_selection_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_output_selection_Set() const{
    return m_output_selection_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_output_selection_Valid() const{
    return m_output_selection_isValid;
}

OAIHlsProgramDateTime OAIOutputGroupSettings_HlsGroupSettings::getProgramDateTime() const {
    return m_program_date_time;
}
void OAIOutputGroupSettings_HlsGroupSettings::setProgramDateTime(const OAIHlsProgramDateTime &program_date_time) {
    m_program_date_time = program_date_time;
    m_program_date_time_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_Set() const{
    return m_program_date_time_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_Valid() const{
    return m_program_date_time_isValid;
}

OAIHlsProgramDateTimeClock OAIOutputGroupSettings_HlsGroupSettings::getProgramDateTimeClock() const {
    return m_program_date_time_clock;
}
void OAIOutputGroupSettings_HlsGroupSettings::setProgramDateTimeClock(const OAIHlsProgramDateTimeClock &program_date_time_clock) {
    m_program_date_time_clock = program_date_time_clock;
    m_program_date_time_clock_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_clock_Set() const{
    return m_program_date_time_clock_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_clock_Valid() const{
    return m_program_date_time_clock_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getProgramDateTimePeriod() const {
    return m_program_date_time_period;
}
void OAIOutputGroupSettings_HlsGroupSettings::setProgramDateTimePeriod(const qint32 &program_date_time_period) {
    m_program_date_time_period = program_date_time_period;
    m_program_date_time_period_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_period_Set() const{
    return m_program_date_time_period_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_program_date_time_period_Valid() const{
    return m_program_date_time_period_isValid;
}

OAIHlsRedundantManifest OAIOutputGroupSettings_HlsGroupSettings::getRedundantManifest() const {
    return m_redundant_manifest;
}
void OAIOutputGroupSettings_HlsGroupSettings::setRedundantManifest(const OAIHlsRedundantManifest &redundant_manifest) {
    m_redundant_manifest = redundant_manifest;
    m_redundant_manifest_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_redundant_manifest_Set() const{
    return m_redundant_manifest_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_redundant_manifest_Valid() const{
    return m_redundant_manifest_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getSegmentLength() const {
    return m_segment_length;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentLength(const qint32 &segment_length) {
    m_segment_length = segment_length;
    m_segment_length_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_length_Set() const{
    return m_segment_length_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segment_length_Valid() const{
    return m_segment_length_isValid;
}

OAIHlsSegmentationMode OAIOutputGroupSettings_HlsGroupSettings::getSegmentationMode() const {
    return m_segmentation_mode;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentationMode(const OAIHlsSegmentationMode &segmentation_mode) {
    m_segmentation_mode = segmentation_mode;
    m_segmentation_mode_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segmentation_mode_Set() const{
    return m_segmentation_mode_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segmentation_mode_Valid() const{
    return m_segmentation_mode_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getSegmentsPerSubdirectory() const {
    return m_segments_per_subdirectory;
}
void OAIOutputGroupSettings_HlsGroupSettings::setSegmentsPerSubdirectory(const qint32 &segments_per_subdirectory) {
    m_segments_per_subdirectory = segments_per_subdirectory;
    m_segments_per_subdirectory_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segments_per_subdirectory_Set() const{
    return m_segments_per_subdirectory_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_segments_per_subdirectory_Valid() const{
    return m_segments_per_subdirectory_isValid;
}

OAIHlsStreamInfResolution OAIOutputGroupSettings_HlsGroupSettings::getStreamInfResolution() const {
    return m_stream_inf_resolution;
}
void OAIOutputGroupSettings_HlsGroupSettings::setStreamInfResolution(const OAIHlsStreamInfResolution &stream_inf_resolution) {
    m_stream_inf_resolution = stream_inf_resolution;
    m_stream_inf_resolution_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_stream_inf_resolution_Set() const{
    return m_stream_inf_resolution_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_stream_inf_resolution_Valid() const{
    return m_stream_inf_resolution_isValid;
}

OAIHlsTimedMetadataId3Frame OAIOutputGroupSettings_HlsGroupSettings::getTimedMetadataId3Frame() const {
    return m_timed_metadata_id3_frame;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTimedMetadataId3Frame(const OAIHlsTimedMetadataId3Frame &timed_metadata_id3_frame) {
    m_timed_metadata_id3_frame = timed_metadata_id3_frame;
    m_timed_metadata_id3_frame_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_frame_Set() const{
    return m_timed_metadata_id3_frame_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_frame_Valid() const{
    return m_timed_metadata_id3_frame_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getTimedMetadataId3Period() const {
    return m_timed_metadata_id3_period;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTimedMetadataId3Period(const qint32 &timed_metadata_id3_period) {
    m_timed_metadata_id3_period = timed_metadata_id3_period;
    m_timed_metadata_id3_period_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_period_Set() const{
    return m_timed_metadata_id3_period_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timed_metadata_id3_period_Valid() const{
    return m_timed_metadata_id3_period_isValid;
}

qint32 OAIOutputGroupSettings_HlsGroupSettings::getTimestampDeltaMilliseconds() const {
    return m_timestamp_delta_milliseconds;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTimestampDeltaMilliseconds(const qint32 &timestamp_delta_milliseconds) {
    m_timestamp_delta_milliseconds = timestamp_delta_milliseconds;
    m_timestamp_delta_milliseconds_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timestamp_delta_milliseconds_Set() const{
    return m_timestamp_delta_milliseconds_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_timestamp_delta_milliseconds_Valid() const{
    return m_timestamp_delta_milliseconds_isValid;
}

OAIHlsTsFileMode OAIOutputGroupSettings_HlsGroupSettings::getTsFileMode() const {
    return m_ts_file_mode;
}
void OAIOutputGroupSettings_HlsGroupSettings::setTsFileMode(const OAIHlsTsFileMode &ts_file_mode) {
    m_ts_file_mode = ts_file_mode;
    m_ts_file_mode_isSet = true;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_ts_file_mode_Set() const{
    return m_ts_file_mode_isSet;
}

bool OAIOutputGroupSettings_HlsGroupSettings::is_ts_file_mode_Valid() const{
    return m_ts_file_mode_isValid;
}

bool OAIOutputGroupSettings_HlsGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_content1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_manifest1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_language_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_language_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_cache.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constant_iv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_structure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discontinuity_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_cdn_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_id3_segment_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_frame_only_playlists.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incomplete_segment_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_n_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iv_in_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iv_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_format_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_provider_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_duration_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time_clock.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redundant_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_per_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_inf_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_id3_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_id3_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_delta_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_file_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputGroupSettings_HlsGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && true;
}

} // namespace OpenAPI
