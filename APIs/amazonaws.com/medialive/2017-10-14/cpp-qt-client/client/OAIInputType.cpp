/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputType::OAIInputType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputType::OAIInputType() {
    this->initializeModel();
}

OAIInputType::~OAIInputType() {}

void OAIInputType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInputType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInputType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UDP_PUSH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::UDP_PUSH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RTP_PUSH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::RTP_PUSH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RTMP_PUSH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::RTMP_PUSH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RTMP_PULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::RTMP_PULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("URL_PULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::URL_PULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MP4_FILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::MP4_FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIACONNECT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::MEDIACONNECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INPUT_DEVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::INPUT_DEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_CDI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::AWS_CDI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TS_FILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputType::TS_FILE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInputType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInputType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInputType::UDP_PUSH:
            val = "UDP_PUSH";
            break;
        case eOAIInputType::RTP_PUSH:
            val = "RTP_PUSH";
            break;
        case eOAIInputType::RTMP_PUSH:
            val = "RTMP_PUSH";
            break;
        case eOAIInputType::RTMP_PULL:
            val = "RTMP_PULL";
            break;
        case eOAIInputType::URL_PULL:
            val = "URL_PULL";
            break;
        case eOAIInputType::MP4_FILE:
            val = "MP4_FILE";
            break;
        case eOAIInputType::MEDIACONNECT:
            val = "MEDIACONNECT";
            break;
        case eOAIInputType::INPUT_DEVICE:
            val = "INPUT_DEVICE";
            break;
        case eOAIInputType::AWS_CDI:
            val = "AWS_CDI";
            break;
        case eOAIInputType::TS_FILE:
            val = "TS_FILE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInputType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInputType::eOAIInputType OAIInputType::getValue() const {
    return m_value;
}

void OAIInputType::setValue(const OAIInputType::eOAIInputType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInputType::isSet() const {
    
    return m_value_isSet;
}

bool OAIInputType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
