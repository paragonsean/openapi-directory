/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInputDeviceRequest_UhdDeviceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInputDeviceRequest_UhdDeviceSettings::OAIUpdateInputDeviceRequest_UhdDeviceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInputDeviceRequest_UhdDeviceSettings::OAIUpdateInputDeviceRequest_UhdDeviceSettings() {
    this->initializeModel();
}

OAIUpdateInputDeviceRequest_UhdDeviceSettings::~OAIUpdateInputDeviceRequest_UhdDeviceSettings() {}

void OAIUpdateInputDeviceRequest_UhdDeviceSettings::initializeModel() {

    m_configured_input_isSet = false;
    m_configured_input_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_latency_ms_isSet = false;
    m_latency_ms_isValid = false;
}

void OAIUpdateInputDeviceRequest_UhdDeviceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInputDeviceRequest_UhdDeviceSettings::fromJsonObject(QJsonObject json) {

    m_configured_input_isValid = ::OpenAPI::fromJsonValue(m_configured_input, json[QString("ConfiguredInput")]);
    m_configured_input_isSet = !json[QString("ConfiguredInput")].isNull() && m_configured_input_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;

    m_latency_ms_isValid = ::OpenAPI::fromJsonValue(m_latency_ms, json[QString("LatencyMs")]);
    m_latency_ms_isSet = !json[QString("LatencyMs")].isNull() && m_latency_ms_isValid;
}

QString OAIUpdateInputDeviceRequest_UhdDeviceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInputDeviceRequest_UhdDeviceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_configured_input.isSet()) {
        obj.insert(QString("ConfiguredInput"), ::OpenAPI::toJsonValue(m_configured_input));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_latency_ms_isSet) {
        obj.insert(QString("LatencyMs"), ::OpenAPI::toJsonValue(m_latency_ms));
    }
    return obj;
}

OAIInputDeviceConfiguredInput OAIUpdateInputDeviceRequest_UhdDeviceSettings::getConfiguredInput() const {
    return m_configured_input;
}
void OAIUpdateInputDeviceRequest_UhdDeviceSettings::setConfiguredInput(const OAIInputDeviceConfiguredInput &configured_input) {
    m_configured_input = configured_input;
    m_configured_input_isSet = true;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::is_configured_input_Set() const{
    return m_configured_input_isSet;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::is_configured_input_Valid() const{
    return m_configured_input_isValid;
}

qint32 OAIUpdateInputDeviceRequest_UhdDeviceSettings::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIUpdateInputDeviceRequest_UhdDeviceSettings::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

qint32 OAIUpdateInputDeviceRequest_UhdDeviceSettings::getLatencyMs() const {
    return m_latency_ms;
}
void OAIUpdateInputDeviceRequest_UhdDeviceSettings::setLatencyMs(const qint32 &latency_ms) {
    m_latency_ms = latency_ms;
    m_latency_ms_isSet = true;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::is_latency_ms_Set() const{
    return m_latency_ms_isSet;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::is_latency_ms_Valid() const{
    return m_latency_ms_isValid;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configured_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInputDeviceRequest_UhdDeviceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
