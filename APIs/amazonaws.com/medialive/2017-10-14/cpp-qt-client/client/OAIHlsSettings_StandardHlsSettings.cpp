/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsSettings_StandardHlsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsSettings_StandardHlsSettings::OAIHlsSettings_StandardHlsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsSettings_StandardHlsSettings::OAIHlsSettings_StandardHlsSettings() {
    this->initializeModel();
}

OAIHlsSettings_StandardHlsSettings::~OAIHlsSettings_StandardHlsSettings() {}

void OAIHlsSettings_StandardHlsSettings::initializeModel() {

    m_audio_rendition_sets_isSet = false;
    m_audio_rendition_sets_isValid = false;

    m_m3u8_settings_isSet = false;
    m_m3u8_settings_isValid = false;
}

void OAIHlsSettings_StandardHlsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsSettings_StandardHlsSettings::fromJsonObject(QJsonObject json) {

    m_audio_rendition_sets_isValid = ::OpenAPI::fromJsonValue(m_audio_rendition_sets, json[QString("AudioRenditionSets")]);
    m_audio_rendition_sets_isSet = !json[QString("AudioRenditionSets")].isNull() && m_audio_rendition_sets_isValid;

    m_m3u8_settings_isValid = ::OpenAPI::fromJsonValue(m_m3u8_settings, json[QString("M3u8Settings")]);
    m_m3u8_settings_isSet = !json[QString("M3u8Settings")].isNull() && m_m3u8_settings_isValid;
}

QString OAIHlsSettings_StandardHlsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsSettings_StandardHlsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_rendition_sets_isSet) {
        obj.insert(QString("AudioRenditionSets"), ::OpenAPI::toJsonValue(m_audio_rendition_sets));
    }
    if (m_m3u8_settings.isSet()) {
        obj.insert(QString("M3u8Settings"), ::OpenAPI::toJsonValue(m_m3u8_settings));
    }
    return obj;
}

QString OAIHlsSettings_StandardHlsSettings::getAudioRenditionSets() const {
    return m_audio_rendition_sets;
}
void OAIHlsSettings_StandardHlsSettings::setAudioRenditionSets(const QString &audio_rendition_sets) {
    m_audio_rendition_sets = audio_rendition_sets;
    m_audio_rendition_sets_isSet = true;
}

bool OAIHlsSettings_StandardHlsSettings::is_audio_rendition_sets_Set() const{
    return m_audio_rendition_sets_isSet;
}

bool OAIHlsSettings_StandardHlsSettings::is_audio_rendition_sets_Valid() const{
    return m_audio_rendition_sets_isValid;
}

OAIStandardHlsSettings_M3u8Settings OAIHlsSettings_StandardHlsSettings::getM3u8Settings() const {
    return m_m3u8_settings;
}
void OAIHlsSettings_StandardHlsSettings::setM3u8Settings(const OAIStandardHlsSettings_M3u8Settings &m3u8_settings) {
    m_m3u8_settings = m3u8_settings;
    m_m3u8_settings_isSet = true;
}

bool OAIHlsSettings_StandardHlsSettings::is_m3u8_settings_Set() const{
    return m_m3u8_settings_isSet;
}

bool OAIHlsSettings_StandardHlsSettings::is_m3u8_settings_Valid() const{
    return m_m3u8_settings_isValid;
}

bool OAIHlsSettings_StandardHlsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_rendition_sets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_m3u8_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsSettings_StandardHlsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_m3u8_settings_isValid && true;
}

} // namespace OpenAPI
