/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEbuTtDDestinationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEbuTtDDestinationSettings::OAIEbuTtDDestinationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEbuTtDDestinationSettings::OAIEbuTtDDestinationSettings() {
    this->initializeModel();
}

OAIEbuTtDDestinationSettings::~OAIEbuTtDDestinationSettings() {}

void OAIEbuTtDDestinationSettings::initializeModel() {

    m_copyright_holder_isSet = false;
    m_copyright_holder_isValid = false;

    m_fill_line_gap_isSet = false;
    m_fill_line_gap_isValid = false;

    m_font_family_isSet = false;
    m_font_family_isValid = false;

    m_style_control_isSet = false;
    m_style_control_isValid = false;
}

void OAIEbuTtDDestinationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEbuTtDDestinationSettings::fromJsonObject(QJsonObject json) {

    m_copyright_holder_isValid = ::OpenAPI::fromJsonValue(m_copyright_holder, json[QString("CopyrightHolder")]);
    m_copyright_holder_isSet = !json[QString("CopyrightHolder")].isNull() && m_copyright_holder_isValid;

    m_fill_line_gap_isValid = ::OpenAPI::fromJsonValue(m_fill_line_gap, json[QString("FillLineGap")]);
    m_fill_line_gap_isSet = !json[QString("FillLineGap")].isNull() && m_fill_line_gap_isValid;

    m_font_family_isValid = ::OpenAPI::fromJsonValue(m_font_family, json[QString("FontFamily")]);
    m_font_family_isSet = !json[QString("FontFamily")].isNull() && m_font_family_isValid;

    m_style_control_isValid = ::OpenAPI::fromJsonValue(m_style_control, json[QString("StyleControl")]);
    m_style_control_isSet = !json[QString("StyleControl")].isNull() && m_style_control_isValid;
}

QString OAIEbuTtDDestinationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEbuTtDDestinationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_copyright_holder_isSet) {
        obj.insert(QString("CopyrightHolder"), ::OpenAPI::toJsonValue(m_copyright_holder));
    }
    if (m_fill_line_gap.isSet()) {
        obj.insert(QString("FillLineGap"), ::OpenAPI::toJsonValue(m_fill_line_gap));
    }
    if (m_font_family_isSet) {
        obj.insert(QString("FontFamily"), ::OpenAPI::toJsonValue(m_font_family));
    }
    if (m_style_control.isSet()) {
        obj.insert(QString("StyleControl"), ::OpenAPI::toJsonValue(m_style_control));
    }
    return obj;
}

QString OAIEbuTtDDestinationSettings::getCopyrightHolder() const {
    return m_copyright_holder;
}
void OAIEbuTtDDestinationSettings::setCopyrightHolder(const QString &copyright_holder) {
    m_copyright_holder = copyright_holder;
    m_copyright_holder_isSet = true;
}

bool OAIEbuTtDDestinationSettings::is_copyright_holder_Set() const{
    return m_copyright_holder_isSet;
}

bool OAIEbuTtDDestinationSettings::is_copyright_holder_Valid() const{
    return m_copyright_holder_isValid;
}

OAIEbuTtDFillLineGapControl OAIEbuTtDDestinationSettings::getFillLineGap() const {
    return m_fill_line_gap;
}
void OAIEbuTtDDestinationSettings::setFillLineGap(const OAIEbuTtDFillLineGapControl &fill_line_gap) {
    m_fill_line_gap = fill_line_gap;
    m_fill_line_gap_isSet = true;
}

bool OAIEbuTtDDestinationSettings::is_fill_line_gap_Set() const{
    return m_fill_line_gap_isSet;
}

bool OAIEbuTtDDestinationSettings::is_fill_line_gap_Valid() const{
    return m_fill_line_gap_isValid;
}

QString OAIEbuTtDDestinationSettings::getFontFamily() const {
    return m_font_family;
}
void OAIEbuTtDDestinationSettings::setFontFamily(const QString &font_family) {
    m_font_family = font_family;
    m_font_family_isSet = true;
}

bool OAIEbuTtDDestinationSettings::is_font_family_Set() const{
    return m_font_family_isSet;
}

bool OAIEbuTtDDestinationSettings::is_font_family_Valid() const{
    return m_font_family_isValid;
}

OAIEbuTtDDestinationStyleControl OAIEbuTtDDestinationSettings::getStyleControl() const {
    return m_style_control;
}
void OAIEbuTtDDestinationSettings::setStyleControl(const OAIEbuTtDDestinationStyleControl &style_control) {
    m_style_control = style_control;
    m_style_control_isSet = true;
}

bool OAIEbuTtDDestinationSettings::is_style_control_Set() const{
    return m_style_control_isSet;
}

bool OAIEbuTtDDestinationSettings::is_style_control_Valid() const{
    return m_style_control_isValid;
}

bool OAIEbuTtDDestinationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copyright_holder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_line_gap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_control.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEbuTtDDestinationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
