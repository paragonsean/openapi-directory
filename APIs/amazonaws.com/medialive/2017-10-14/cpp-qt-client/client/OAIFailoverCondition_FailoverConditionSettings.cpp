/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverCondition_FailoverConditionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverCondition_FailoverConditionSettings::OAIFailoverCondition_FailoverConditionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverCondition_FailoverConditionSettings::OAIFailoverCondition_FailoverConditionSettings() {
    this->initializeModel();
}

OAIFailoverCondition_FailoverConditionSettings::~OAIFailoverCondition_FailoverConditionSettings() {}

void OAIFailoverCondition_FailoverConditionSettings::initializeModel() {

    m_audio_silence_settings_isSet = false;
    m_audio_silence_settings_isValid = false;

    m_input_loss_settings_isSet = false;
    m_input_loss_settings_isValid = false;

    m_video_black_settings_isSet = false;
    m_video_black_settings_isValid = false;
}

void OAIFailoverCondition_FailoverConditionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverCondition_FailoverConditionSettings::fromJsonObject(QJsonObject json) {

    m_audio_silence_settings_isValid = ::OpenAPI::fromJsonValue(m_audio_silence_settings, json[QString("AudioSilenceSettings")]);
    m_audio_silence_settings_isSet = !json[QString("AudioSilenceSettings")].isNull() && m_audio_silence_settings_isValid;

    m_input_loss_settings_isValid = ::OpenAPI::fromJsonValue(m_input_loss_settings, json[QString("InputLossSettings")]);
    m_input_loss_settings_isSet = !json[QString("InputLossSettings")].isNull() && m_input_loss_settings_isValid;

    m_video_black_settings_isValid = ::OpenAPI::fromJsonValue(m_video_black_settings, json[QString("VideoBlackSettings")]);
    m_video_black_settings_isSet = !json[QString("VideoBlackSettings")].isNull() && m_video_black_settings_isValid;
}

QString OAIFailoverCondition_FailoverConditionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverCondition_FailoverConditionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_silence_settings.isSet()) {
        obj.insert(QString("AudioSilenceSettings"), ::OpenAPI::toJsonValue(m_audio_silence_settings));
    }
    if (m_input_loss_settings.isSet()) {
        obj.insert(QString("InputLossSettings"), ::OpenAPI::toJsonValue(m_input_loss_settings));
    }
    if (m_video_black_settings.isSet()) {
        obj.insert(QString("VideoBlackSettings"), ::OpenAPI::toJsonValue(m_video_black_settings));
    }
    return obj;
}

OAIFailoverConditionSettings_AudioSilenceSettings OAIFailoverCondition_FailoverConditionSettings::getAudioSilenceSettings() const {
    return m_audio_silence_settings;
}
void OAIFailoverCondition_FailoverConditionSettings::setAudioSilenceSettings(const OAIFailoverConditionSettings_AudioSilenceSettings &audio_silence_settings) {
    m_audio_silence_settings = audio_silence_settings;
    m_audio_silence_settings_isSet = true;
}

bool OAIFailoverCondition_FailoverConditionSettings::is_audio_silence_settings_Set() const{
    return m_audio_silence_settings_isSet;
}

bool OAIFailoverCondition_FailoverConditionSettings::is_audio_silence_settings_Valid() const{
    return m_audio_silence_settings_isValid;
}

OAIFailoverConditionSettings_InputLossSettings OAIFailoverCondition_FailoverConditionSettings::getInputLossSettings() const {
    return m_input_loss_settings;
}
void OAIFailoverCondition_FailoverConditionSettings::setInputLossSettings(const OAIFailoverConditionSettings_InputLossSettings &input_loss_settings) {
    m_input_loss_settings = input_loss_settings;
    m_input_loss_settings_isSet = true;
}

bool OAIFailoverCondition_FailoverConditionSettings::is_input_loss_settings_Set() const{
    return m_input_loss_settings_isSet;
}

bool OAIFailoverCondition_FailoverConditionSettings::is_input_loss_settings_Valid() const{
    return m_input_loss_settings_isValid;
}

OAIFailoverConditionSettings_VideoBlackSettings OAIFailoverCondition_FailoverConditionSettings::getVideoBlackSettings() const {
    return m_video_black_settings;
}
void OAIFailoverCondition_FailoverConditionSettings::setVideoBlackSettings(const OAIFailoverConditionSettings_VideoBlackSettings &video_black_settings) {
    m_video_black_settings = video_black_settings;
    m_video_black_settings_isSet = true;
}

bool OAIFailoverCondition_FailoverConditionSettings::is_video_black_settings_Set() const{
    return m_video_black_settings_isSet;
}

bool OAIFailoverCondition_FailoverConditionSettings::is_video_black_settings_Valid() const{
    return m_video_black_settings_isValid;
}

bool OAIFailoverCondition_FailoverConditionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_silence_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_black_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverCondition_FailoverConditionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
