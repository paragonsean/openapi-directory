/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoSelector::OAIVideoSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoSelector::OAIVideoSelector() {
    this->initializeModel();
}

OAIVideoSelector::~OAIVideoSelector() {}

void OAIVideoSelector::initializeModel() {

    m_color_space_isSet = false;
    m_color_space_isValid = false;

    m_color_space_settings_isSet = false;
    m_color_space_settings_isValid = false;

    m_color_space_usage_isSet = false;
    m_color_space_usage_isValid = false;

    m_selector_settings_isSet = false;
    m_selector_settings_isValid = false;
}

void OAIVideoSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoSelector::fromJsonObject(QJsonObject json) {

    m_color_space_isValid = ::OpenAPI::fromJsonValue(m_color_space, json[QString("ColorSpace")]);
    m_color_space_isSet = !json[QString("ColorSpace")].isNull() && m_color_space_isValid;

    m_color_space_settings_isValid = ::OpenAPI::fromJsonValue(m_color_space_settings, json[QString("ColorSpaceSettings")]);
    m_color_space_settings_isSet = !json[QString("ColorSpaceSettings")].isNull() && m_color_space_settings_isValid;

    m_color_space_usage_isValid = ::OpenAPI::fromJsonValue(m_color_space_usage, json[QString("ColorSpaceUsage")]);
    m_color_space_usage_isSet = !json[QString("ColorSpaceUsage")].isNull() && m_color_space_usage_isValid;

    m_selector_settings_isValid = ::OpenAPI::fromJsonValue(m_selector_settings, json[QString("SelectorSettings")]);
    m_selector_settings_isSet = !json[QString("SelectorSettings")].isNull() && m_selector_settings_isValid;
}

QString OAIVideoSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_color_space.isSet()) {
        obj.insert(QString("ColorSpace"), ::OpenAPI::toJsonValue(m_color_space));
    }
    if (m_color_space_settings.isSet()) {
        obj.insert(QString("ColorSpaceSettings"), ::OpenAPI::toJsonValue(m_color_space_settings));
    }
    if (m_color_space_usage.isSet()) {
        obj.insert(QString("ColorSpaceUsage"), ::OpenAPI::toJsonValue(m_color_space_usage));
    }
    if (m_selector_settings.isSet()) {
        obj.insert(QString("SelectorSettings"), ::OpenAPI::toJsonValue(m_selector_settings));
    }
    return obj;
}

OAIVideoSelectorColorSpace OAIVideoSelector::getColorSpace() const {
    return m_color_space;
}
void OAIVideoSelector::setColorSpace(const OAIVideoSelectorColorSpace &color_space) {
    m_color_space = color_space;
    m_color_space_isSet = true;
}

bool OAIVideoSelector::is_color_space_Set() const{
    return m_color_space_isSet;
}

bool OAIVideoSelector::is_color_space_Valid() const{
    return m_color_space_isValid;
}

OAIVideoSelector_ColorSpaceSettings OAIVideoSelector::getColorSpaceSettings() const {
    return m_color_space_settings;
}
void OAIVideoSelector::setColorSpaceSettings(const OAIVideoSelector_ColorSpaceSettings &color_space_settings) {
    m_color_space_settings = color_space_settings;
    m_color_space_settings_isSet = true;
}

bool OAIVideoSelector::is_color_space_settings_Set() const{
    return m_color_space_settings_isSet;
}

bool OAIVideoSelector::is_color_space_settings_Valid() const{
    return m_color_space_settings_isValid;
}

OAIVideoSelectorColorSpaceUsage OAIVideoSelector::getColorSpaceUsage() const {
    return m_color_space_usage;
}
void OAIVideoSelector::setColorSpaceUsage(const OAIVideoSelectorColorSpaceUsage &color_space_usage) {
    m_color_space_usage = color_space_usage;
    m_color_space_usage_isSet = true;
}

bool OAIVideoSelector::is_color_space_usage_Set() const{
    return m_color_space_usage_isSet;
}

bool OAIVideoSelector::is_color_space_usage_Valid() const{
    return m_color_space_usage_isValid;
}

OAIVideoSelector_SelectorSettings OAIVideoSelector::getSelectorSettings() const {
    return m_selector_settings;
}
void OAIVideoSelector::setSelectorSettings(const OAIVideoSelector_SelectorSettings &selector_settings) {
    m_selector_settings = selector_settings;
    m_selector_settings_isSet = true;
}

bool OAIVideoSelector::is_selector_settings_Set() const{
    return m_selector_settings_isSet;
}

bool OAIVideoSelector::is_selector_settings_Valid() const{
    return m_selector_settings_isValid;
}

bool OAIVideoSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_space.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_space_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_space_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
