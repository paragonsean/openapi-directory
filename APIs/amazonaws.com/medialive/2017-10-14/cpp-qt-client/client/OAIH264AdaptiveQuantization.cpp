/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIH264AdaptiveQuantization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIH264AdaptiveQuantization::OAIH264AdaptiveQuantization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIH264AdaptiveQuantization::OAIH264AdaptiveQuantization() {
    this->initializeModel();
}

OAIH264AdaptiveQuantization::~OAIH264AdaptiveQuantization() {}

void OAIH264AdaptiveQuantization::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIH264AdaptiveQuantization::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIH264AdaptiveQuantization::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HIGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::HIGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HIGHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::HIGHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::LOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::MAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264AdaptiveQuantization::OFF;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIH264AdaptiveQuantization::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIH264AdaptiveQuantization::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIH264AdaptiveQuantization::AUTO:
            val = "AUTO";
            break;
        case eOAIH264AdaptiveQuantization::HIGH:
            val = "HIGH";
            break;
        case eOAIH264AdaptiveQuantization::HIGHER:
            val = "HIGHER";
            break;
        case eOAIH264AdaptiveQuantization::LOW:
            val = "LOW";
            break;
        case eOAIH264AdaptiveQuantization::MAX:
            val = "MAX";
            break;
        case eOAIH264AdaptiveQuantization::MEDIUM:
            val = "MEDIUM";
            break;
        case eOAIH264AdaptiveQuantization::OFF:
            val = "OFF";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIH264AdaptiveQuantization::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIH264AdaptiveQuantization::eOAIH264AdaptiveQuantization OAIH264AdaptiveQuantization::getValue() const {
    return m_value;
}

void OAIH264AdaptiveQuantization::setValue(const OAIH264AdaptiveQuantization::eOAIH264AdaptiveQuantization& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIH264AdaptiveQuantization::isSet() const {
    
    return m_value_isSet;
}

bool OAIH264AdaptiveQuantization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
