/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioDescription_CodecSettings.h
 *
 * 
 */

#ifndef OAIAudioDescription_CodecSettings_H
#define OAIAudioDescription_CodecSettings_H

#include <QJsonObject>

#include "OAIAudioCodecSettings_AacSettings.h"
#include "OAIAudioCodecSettings_Ac3Settings.h"
#include "OAIAudioCodecSettings_Eac3AtmosSettings.h"
#include "OAIAudioCodecSettings_Eac3Settings.h"
#include "OAIAudioCodecSettings_Mp2Settings.h"
#include "OAIAudioCodecSettings_WavSettings.h"
#include "OAIObject.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioCodecSettings_AacSettings;
class OAIAudioCodecSettings_Ac3Settings;
class OAIAudioCodecSettings_Eac3AtmosSettings;
class OAIAudioCodecSettings_Eac3Settings;
class OAIAudioCodecSettings_Mp2Settings;
class OAIAudioCodecSettings_WavSettings;

class OAIAudioDescription_CodecSettings : public OAIObject {
public:
    OAIAudioDescription_CodecSettings();
    OAIAudioDescription_CodecSettings(QString json);
    ~OAIAudioDescription_CodecSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioCodecSettings_AacSettings getAacSettings() const;
    void setAacSettings(const OAIAudioCodecSettings_AacSettings &aac_settings);
    bool is_aac_settings_Set() const;
    bool is_aac_settings_Valid() const;

    OAIAudioCodecSettings_Ac3Settings getAc3Settings() const;
    void setAc3Settings(const OAIAudioCodecSettings_Ac3Settings &ac3_settings);
    bool is_ac3_settings_Set() const;
    bool is_ac3_settings_Valid() const;

    OAIAudioCodecSettings_Eac3AtmosSettings getEac3AtmosSettings() const;
    void setEac3AtmosSettings(const OAIAudioCodecSettings_Eac3AtmosSettings &eac3_atmos_settings);
    bool is_eac3_atmos_settings_Set() const;
    bool is_eac3_atmos_settings_Valid() const;

    OAIAudioCodecSettings_Eac3Settings getEac3Settings() const;
    void setEac3Settings(const OAIAudioCodecSettings_Eac3Settings &eac3_settings);
    bool is_eac3_settings_Set() const;
    bool is_eac3_settings_Valid() const;

    OAIAudioCodecSettings_Mp2Settings getMp2Settings() const;
    void setMp2Settings(const OAIAudioCodecSettings_Mp2Settings &mp2_settings);
    bool is_mp2_settings_Set() const;
    bool is_mp2_settings_Valid() const;

    OAIObject getPassThroughSettings() const;
    void setPassThroughSettings(const OAIObject &pass_through_settings);
    bool is_pass_through_settings_Set() const;
    bool is_pass_through_settings_Valid() const;

    OAIAudioCodecSettings_WavSettings getWavSettings() const;
    void setWavSettings(const OAIAudioCodecSettings_WavSettings &wav_settings);
    bool is_wav_settings_Set() const;
    bool is_wav_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioCodecSettings_AacSettings m_aac_settings;
    bool m_aac_settings_isSet;
    bool m_aac_settings_isValid;

    OAIAudioCodecSettings_Ac3Settings m_ac3_settings;
    bool m_ac3_settings_isSet;
    bool m_ac3_settings_isValid;

    OAIAudioCodecSettings_Eac3AtmosSettings m_eac3_atmos_settings;
    bool m_eac3_atmos_settings_isSet;
    bool m_eac3_atmos_settings_isValid;

    OAIAudioCodecSettings_Eac3Settings m_eac3_settings;
    bool m_eac3_settings_isSet;
    bool m_eac3_settings_isValid;

    OAIAudioCodecSettings_Mp2Settings m_mp2_settings;
    bool m_mp2_settings_isSet;
    bool m_mp2_settings_isValid;

    OAIObject m_pass_through_settings;
    bool m_pass_through_settings_isSet;
    bool m_pass_through_settings_isValid;

    OAIAudioCodecSettings_WavSettings m_wav_settings;
    bool m_wav_settings_isSet;
    bool m_wav_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioDescription_CodecSettings)

#endif // OAIAudioDescription_CodecSettings_H
