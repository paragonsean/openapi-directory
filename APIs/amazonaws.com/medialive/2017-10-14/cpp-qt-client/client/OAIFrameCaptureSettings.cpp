/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrameCaptureSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrameCaptureSettings::OAIFrameCaptureSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrameCaptureSettings::OAIFrameCaptureSettings() {
    this->initializeModel();
}

OAIFrameCaptureSettings::~OAIFrameCaptureSettings() {}

void OAIFrameCaptureSettings::initializeModel() {

    m_capture_interval_isSet = false;
    m_capture_interval_isValid = false;

    m_capture_interval_units_isSet = false;
    m_capture_interval_units_isValid = false;

    m_timecode_burnin_settings_isSet = false;
    m_timecode_burnin_settings_isValid = false;
}

void OAIFrameCaptureSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrameCaptureSettings::fromJsonObject(QJsonObject json) {

    m_capture_interval_isValid = ::OpenAPI::fromJsonValue(m_capture_interval, json[QString("CaptureInterval")]);
    m_capture_interval_isSet = !json[QString("CaptureInterval")].isNull() && m_capture_interval_isValid;

    m_capture_interval_units_isValid = ::OpenAPI::fromJsonValue(m_capture_interval_units, json[QString("CaptureIntervalUnits")]);
    m_capture_interval_units_isSet = !json[QString("CaptureIntervalUnits")].isNull() && m_capture_interval_units_isValid;

    m_timecode_burnin_settings_isValid = ::OpenAPI::fromJsonValue(m_timecode_burnin_settings, json[QString("TimecodeBurninSettings")]);
    m_timecode_burnin_settings_isSet = !json[QString("TimecodeBurninSettings")].isNull() && m_timecode_burnin_settings_isValid;
}

QString OAIFrameCaptureSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrameCaptureSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_capture_interval_isSet) {
        obj.insert(QString("CaptureInterval"), ::OpenAPI::toJsonValue(m_capture_interval));
    }
    if (m_capture_interval_units.isSet()) {
        obj.insert(QString("CaptureIntervalUnits"), ::OpenAPI::toJsonValue(m_capture_interval_units));
    }
    if (m_timecode_burnin_settings.isSet()) {
        obj.insert(QString("TimecodeBurninSettings"), ::OpenAPI::toJsonValue(m_timecode_burnin_settings));
    }
    return obj;
}

qint32 OAIFrameCaptureSettings::getCaptureInterval() const {
    return m_capture_interval;
}
void OAIFrameCaptureSettings::setCaptureInterval(const qint32 &capture_interval) {
    m_capture_interval = capture_interval;
    m_capture_interval_isSet = true;
}

bool OAIFrameCaptureSettings::is_capture_interval_Set() const{
    return m_capture_interval_isSet;
}

bool OAIFrameCaptureSettings::is_capture_interval_Valid() const{
    return m_capture_interval_isValid;
}

OAIFrameCaptureIntervalUnit OAIFrameCaptureSettings::getCaptureIntervalUnits() const {
    return m_capture_interval_units;
}
void OAIFrameCaptureSettings::setCaptureIntervalUnits(const OAIFrameCaptureIntervalUnit &capture_interval_units) {
    m_capture_interval_units = capture_interval_units;
    m_capture_interval_units_isSet = true;
}

bool OAIFrameCaptureSettings::is_capture_interval_units_Set() const{
    return m_capture_interval_units_isSet;
}

bool OAIFrameCaptureSettings::is_capture_interval_units_Valid() const{
    return m_capture_interval_units_isValid;
}

OAIFrameCaptureSettings_TimecodeBurninSettings OAIFrameCaptureSettings::getTimecodeBurninSettings() const {
    return m_timecode_burnin_settings;
}
void OAIFrameCaptureSettings::setTimecodeBurninSettings(const OAIFrameCaptureSettings_TimecodeBurninSettings &timecode_burnin_settings) {
    m_timecode_burnin_settings = timecode_burnin_settings;
    m_timecode_burnin_settings_isSet = true;
}

bool OAIFrameCaptureSettings::is_timecode_burnin_settings_Set() const{
    return m_timecode_burnin_settings_isSet;
}

bool OAIFrameCaptureSettings::is_timecode_burnin_settings_Valid() const{
    return m_timecode_burnin_settings_isValid;
}

bool OAIFrameCaptureSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capture_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_interval_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timecode_burnin_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrameCaptureSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
