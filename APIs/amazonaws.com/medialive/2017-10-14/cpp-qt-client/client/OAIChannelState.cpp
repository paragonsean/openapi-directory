/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelState::OAIChannelState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelState::OAIChannelState() {
    this->initializeModel();
}

OAIChannelState::~OAIChannelState() {}

void OAIChannelState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIChannelState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIChannelState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::CREATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IDLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::IDLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECOVERING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::RECOVERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelState::UPDATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIChannelState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIChannelState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIChannelState::CREATING:
            val = "CREATING";
            break;
        case eOAIChannelState::CREATE_FAILED:
            val = "CREATE_FAILED";
            break;
        case eOAIChannelState::IDLE:
            val = "IDLE";
            break;
        case eOAIChannelState::STARTING:
            val = "STARTING";
            break;
        case eOAIChannelState::RUNNING:
            val = "RUNNING";
            break;
        case eOAIChannelState::RECOVERING:
            val = "RECOVERING";
            break;
        case eOAIChannelState::STOPPING:
            val = "STOPPING";
            break;
        case eOAIChannelState::DELETING:
            val = "DELETING";
            break;
        case eOAIChannelState::DELETED:
            val = "DELETED";
            break;
        case eOAIChannelState::UPDATING:
            val = "UPDATING";
            break;
        case eOAIChannelState::UPDATE_FAILED:
            val = "UPDATE_FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIChannelState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIChannelState::eOAIChannelState OAIChannelState::getValue() const {
    return m_value;
}

void OAIChannelState::setValue(const OAIChannelState::eOAIChannelState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIChannelState::isSet() const {
    
    return m_value_isSet;
}

bool OAIChannelState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
