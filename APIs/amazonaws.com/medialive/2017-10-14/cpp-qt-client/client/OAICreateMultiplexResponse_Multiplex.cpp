/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMultiplexResponse_Multiplex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMultiplexResponse_Multiplex::OAICreateMultiplexResponse_Multiplex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMultiplexResponse_Multiplex::OAICreateMultiplexResponse_Multiplex() {
    this->initializeModel();
}

OAICreateMultiplexResponse_Multiplex::~OAICreateMultiplexResponse_Multiplex() {}

void OAICreateMultiplexResponse_Multiplex::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multiplex_settings_isSet = false;
    m_multiplex_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pipelines_running_count_isSet = false;
    m_pipelines_running_count_isValid = false;

    m_program_count_isSet = false;
    m_program_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMultiplexResponse_Multiplex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMultiplexResponse_Multiplex::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_multiplex_settings_isValid = ::OpenAPI::fromJsonValue(m_multiplex_settings, json[QString("MultiplexSettings")]);
    m_multiplex_settings_isSet = !json[QString("MultiplexSettings")].isNull() && m_multiplex_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_pipelines_running_count_isValid = ::OpenAPI::fromJsonValue(m_pipelines_running_count, json[QString("PipelinesRunningCount")]);
    m_pipelines_running_count_isSet = !json[QString("PipelinesRunningCount")].isNull() && m_pipelines_running_count_isValid;

    m_program_count_isValid = ::OpenAPI::fromJsonValue(m_program_count, json[QString("ProgramCount")]);
    m_program_count_isSet = !json[QString("ProgramCount")].isNull() && m_program_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateMultiplexResponse_Multiplex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMultiplexResponse_Multiplex::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multiplex_settings.isSet()) {
        obj.insert(QString("MultiplexSettings"), ::OpenAPI::toJsonValue(m_multiplex_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pipelines_running_count_isSet) {
        obj.insert(QString("PipelinesRunningCount"), ::OpenAPI::toJsonValue(m_pipelines_running_count));
    }
    if (m_program_count_isSet) {
        obj.insert(QString("ProgramCount"), ::OpenAPI::toJsonValue(m_program_count));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateMultiplexResponse_Multiplex::getArn() const {
    return m_arn;
}
void OAICreateMultiplexResponse_Multiplex::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_arn_Valid() const{
    return m_arn_isValid;
}

QList OAICreateMultiplexResponse_Multiplex::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAICreateMultiplexResponse_Multiplex::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QList OAICreateMultiplexResponse_Multiplex::getDestinations() const {
    return m_destinations;
}
void OAICreateMultiplexResponse_Multiplex::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAICreateMultiplexResponse_Multiplex::getId() const {
    return m_id;
}
void OAICreateMultiplexResponse_Multiplex::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_id_Valid() const{
    return m_id_isValid;
}

OAIDeleteMultiplexResponse_MultiplexSettings OAICreateMultiplexResponse_Multiplex::getMultiplexSettings() const {
    return m_multiplex_settings;
}
void OAICreateMultiplexResponse_Multiplex::setMultiplexSettings(const OAIDeleteMultiplexResponse_MultiplexSettings &multiplex_settings) {
    m_multiplex_settings = multiplex_settings;
    m_multiplex_settings_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_multiplex_settings_Set() const{
    return m_multiplex_settings_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_multiplex_settings_Valid() const{
    return m_multiplex_settings_isValid;
}

QString OAICreateMultiplexResponse_Multiplex::getName() const {
    return m_name;
}
void OAICreateMultiplexResponse_Multiplex::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateMultiplexResponse_Multiplex::getPipelinesRunningCount() const {
    return m_pipelines_running_count;
}
void OAICreateMultiplexResponse_Multiplex::setPipelinesRunningCount(const qint32 &pipelines_running_count) {
    m_pipelines_running_count = pipelines_running_count;
    m_pipelines_running_count_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_pipelines_running_count_Set() const{
    return m_pipelines_running_count_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_pipelines_running_count_Valid() const{
    return m_pipelines_running_count_isValid;
}

qint32 OAICreateMultiplexResponse_Multiplex::getProgramCount() const {
    return m_program_count;
}
void OAICreateMultiplexResponse_Multiplex::setProgramCount(const qint32 &program_count) {
    m_program_count = program_count;
    m_program_count_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_program_count_Set() const{
    return m_program_count_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_program_count_Valid() const{
    return m_program_count_isValid;
}

OAIMultiplexState OAICreateMultiplexResponse_Multiplex::getState() const {
    return m_state;
}
void OAICreateMultiplexResponse_Multiplex::setState(const OAIMultiplexState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAICreateMultiplexResponse_Multiplex::getTags() const {
    return m_tags;
}
void OAICreateMultiplexResponse_Multiplex::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMultiplexResponse_Multiplex::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMultiplexResponse_Multiplex::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMultiplexResponse_Multiplex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplex_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipelines_running_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMultiplexResponse_Multiplex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
