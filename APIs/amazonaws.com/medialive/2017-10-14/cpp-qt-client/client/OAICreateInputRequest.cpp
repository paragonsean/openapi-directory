/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInputRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInputRequest::OAICreateInputRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInputRequest::OAICreateInputRequest() {
    this->initializeModel();
}

OAICreateInputRequest::~OAICreateInputRequest() {}

void OAICreateInputRequest::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_input_devices_isSet = false;
    m_input_devices_isValid = false;

    m_input_security_groups_isSet = false;
    m_input_security_groups_isValid = false;

    m_media_connect_flows_isSet = false;
    m_media_connect_flows_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;
}

void OAICreateInputRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInputRequest::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_input_devices_isValid = ::OpenAPI::fromJsonValue(m_input_devices, json[QString("InputDevices")]);
    m_input_devices_isSet = !json[QString("InputDevices")].isNull() && m_input_devices_isValid;

    m_input_security_groups_isValid = ::OpenAPI::fromJsonValue(m_input_security_groups, json[QString("InputSecurityGroups")]);
    m_input_security_groups_isSet = !json[QString("InputSecurityGroups")].isNull() && m_input_security_groups_isValid;

    m_media_connect_flows_isValid = ::OpenAPI::fromJsonValue(m_media_connect_flows, json[QString("MediaConnectFlows")]);
    m_media_connect_flows_isSet = !json[QString("MediaConnectFlows")].isNull() && m_media_connect_flows_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("Sources")]);
    m_sources_isSet = !json[QString("Sources")].isNull() && m_sources_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;
}

QString OAICreateInputRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInputRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_input_devices.isSet()) {
        obj.insert(QString("InputDevices"), ::OpenAPI::toJsonValue(m_input_devices));
    }
    if (m_input_security_groups.isSet()) {
        obj.insert(QString("InputSecurityGroups"), ::OpenAPI::toJsonValue(m_input_security_groups));
    }
    if (m_media_connect_flows.isSet()) {
        obj.insert(QString("MediaConnectFlows"), ::OpenAPI::toJsonValue(m_media_connect_flows));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("Sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vpc.isSet()) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    return obj;
}

QList OAICreateInputRequest::getDestinations() const {
    return m_destinations;
}
void OAICreateInputRequest::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAICreateInputRequest::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAICreateInputRequest::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QList OAICreateInputRequest::getInputDevices() const {
    return m_input_devices;
}
void OAICreateInputRequest::setInputDevices(const QList &input_devices) {
    m_input_devices = input_devices;
    m_input_devices_isSet = true;
}

bool OAICreateInputRequest::is_input_devices_Set() const{
    return m_input_devices_isSet;
}

bool OAICreateInputRequest::is_input_devices_Valid() const{
    return m_input_devices_isValid;
}

QList OAICreateInputRequest::getInputSecurityGroups() const {
    return m_input_security_groups;
}
void OAICreateInputRequest::setInputSecurityGroups(const QList &input_security_groups) {
    m_input_security_groups = input_security_groups;
    m_input_security_groups_isSet = true;
}

bool OAICreateInputRequest::is_input_security_groups_Set() const{
    return m_input_security_groups_isSet;
}

bool OAICreateInputRequest::is_input_security_groups_Valid() const{
    return m_input_security_groups_isValid;
}

QList OAICreateInputRequest::getMediaConnectFlows() const {
    return m_media_connect_flows;
}
void OAICreateInputRequest::setMediaConnectFlows(const QList &media_connect_flows) {
    m_media_connect_flows = media_connect_flows;
    m_media_connect_flows_isSet = true;
}

bool OAICreateInputRequest::is_media_connect_flows_Set() const{
    return m_media_connect_flows_isSet;
}

bool OAICreateInputRequest::is_media_connect_flows_Valid() const{
    return m_media_connect_flows_isValid;
}

QString OAICreateInputRequest::getName() const {
    return m_name;
}
void OAICreateInputRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateInputRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateInputRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateInputRequest::getRequestId() const {
    return m_request_id;
}
void OAICreateInputRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateInputRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateInputRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAICreateInputRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateInputRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateInputRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateInputRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreateInputRequest::getSources() const {
    return m_sources;
}
void OAICreateInputRequest::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICreateInputRequest::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICreateInputRequest::is_sources_Valid() const{
    return m_sources_isValid;
}

QMap OAICreateInputRequest::getTags() const {
    return m_tags;
}
void OAICreateInputRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateInputRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateInputRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIInputType OAICreateInputRequest::getType() const {
    return m_type;
}
void OAICreateInputRequest::setType(const OAIInputType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateInputRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateInputRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateInputRequest_Vpc OAICreateInputRequest::getVpc() const {
    return m_vpc;
}
void OAICreateInputRequest::setVpc(const OAICreateInputRequest_Vpc &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAICreateInputRequest::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAICreateInputRequest::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAICreateInputRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_connect_flows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInputRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
