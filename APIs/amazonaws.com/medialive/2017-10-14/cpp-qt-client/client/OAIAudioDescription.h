/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioDescription.h
 *
 * Audio Description
 */

#ifndef OAIAudioDescription_H
#define OAIAudioDescription_H

#include <QJsonObject>

#include "OAIAudioDescriptionAudioTypeControl.h"
#include "OAIAudioDescriptionLanguageCodeControl.h"
#include "OAIAudioDescription_AudioNormalizationSettings.h"
#include "OAIAudioDescription_AudioWatermarkingSettings.h"
#include "OAIAudioDescription_CodecSettings.h"
#include "OAIAudioDescription_RemixSettings.h"
#include "OAIAudioType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioDescription_AudioNormalizationSettings;
class OAIAudioDescription_AudioWatermarkingSettings;
class OAIAudioDescription_CodecSettings;
class OAIAudioDescription_RemixSettings;

class OAIAudioDescription : public OAIObject {
public:
    OAIAudioDescription();
    OAIAudioDescription(QString json);
    ~OAIAudioDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioDescription_AudioNormalizationSettings getAudioNormalizationSettings() const;
    void setAudioNormalizationSettings(const OAIAudioDescription_AudioNormalizationSettings &audio_normalization_settings);
    bool is_audio_normalization_settings_Set() const;
    bool is_audio_normalization_settings_Valid() const;

    QString getAudioSelectorName() const;
    void setAudioSelectorName(const QString &audio_selector_name);
    bool is_audio_selector_name_Set() const;
    bool is_audio_selector_name_Valid() const;

    OAIAudioType getAudioType() const;
    void setAudioType(const OAIAudioType &audio_type);
    bool is_audio_type_Set() const;
    bool is_audio_type_Valid() const;

    OAIAudioDescriptionAudioTypeControl getAudioTypeControl() const;
    void setAudioTypeControl(const OAIAudioDescriptionAudioTypeControl &audio_type_control);
    bool is_audio_type_control_Set() const;
    bool is_audio_type_control_Valid() const;

    OAIAudioDescription_AudioWatermarkingSettings getAudioWatermarkingSettings() const;
    void setAudioWatermarkingSettings(const OAIAudioDescription_AudioWatermarkingSettings &audio_watermarking_settings);
    bool is_audio_watermarking_settings_Set() const;
    bool is_audio_watermarking_settings_Valid() const;

    OAIAudioDescription_CodecSettings getCodecSettings() const;
    void setCodecSettings(const OAIAudioDescription_CodecSettings &codec_settings);
    bool is_codec_settings_Set() const;
    bool is_codec_settings_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAIAudioDescriptionLanguageCodeControl getLanguageCodeControl() const;
    void setLanguageCodeControl(const OAIAudioDescriptionLanguageCodeControl &language_code_control);
    bool is_language_code_control_Set() const;
    bool is_language_code_control_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIAudioDescription_RemixSettings getRemixSettings() const;
    void setRemixSettings(const OAIAudioDescription_RemixSettings &remix_settings);
    bool is_remix_settings_Set() const;
    bool is_remix_settings_Valid() const;

    QString getStreamName() const;
    void setStreamName(const QString &stream_name);
    bool is_stream_name_Set() const;
    bool is_stream_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioDescription_AudioNormalizationSettings m_audio_normalization_settings;
    bool m_audio_normalization_settings_isSet;
    bool m_audio_normalization_settings_isValid;

    QString m_audio_selector_name;
    bool m_audio_selector_name_isSet;
    bool m_audio_selector_name_isValid;

    OAIAudioType m_audio_type;
    bool m_audio_type_isSet;
    bool m_audio_type_isValid;

    OAIAudioDescriptionAudioTypeControl m_audio_type_control;
    bool m_audio_type_control_isSet;
    bool m_audio_type_control_isValid;

    OAIAudioDescription_AudioWatermarkingSettings m_audio_watermarking_settings;
    bool m_audio_watermarking_settings_isSet;
    bool m_audio_watermarking_settings_isValid;

    OAIAudioDescription_CodecSettings m_codec_settings;
    bool m_codec_settings_isSet;
    bool m_codec_settings_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAIAudioDescriptionLanguageCodeControl m_language_code_control;
    bool m_language_code_control_isSet;
    bool m_language_code_control_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIAudioDescription_RemixSettings m_remix_settings;
    bool m_remix_settings_isSet;
    bool m_remix_settings_isValid;

    QString m_stream_name;
    bool m_stream_name_isSet;
    bool m_stream_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioDescription)

#endif // OAIAudioDescription_H
