/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMultiplex_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMultiplex_request::OAICreateMultiplex_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMultiplex_request::OAICreateMultiplex_request() {
    this->initializeModel();
}

OAICreateMultiplex_request::~OAICreateMultiplex_request() {}

void OAICreateMultiplex_request::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_multiplex_settings_isSet = false;
    m_multiplex_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMultiplex_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMultiplex_request::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("availabilityZones")]);
    m_availability_zones_isSet = !json[QString("availabilityZones")].isNull() && m_availability_zones_isValid;

    m_multiplex_settings_isValid = ::OpenAPI::fromJsonValue(m_multiplex_settings, json[QString("multiplexSettings")]);
    m_multiplex_settings_isSet = !json[QString("multiplexSettings")].isNull() && m_multiplex_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateMultiplex_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMultiplex_request::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.size() > 0) {
        obj.insert(QString("availabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_multiplex_settings.isSet()) {
        obj.insert(QString("multiplexSettings"), ::OpenAPI::toJsonValue(m_multiplex_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAICreateMultiplex_request::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAICreateMultiplex_request::setAvailabilityZones(const QList<QString> &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAICreateMultiplex_request::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAICreateMultiplex_request::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

OAICreateMultiplex_request_multiplexSettings OAICreateMultiplex_request::getMultiplexSettings() const {
    return m_multiplex_settings;
}
void OAICreateMultiplex_request::setMultiplexSettings(const OAICreateMultiplex_request_multiplexSettings &multiplex_settings) {
    m_multiplex_settings = multiplex_settings;
    m_multiplex_settings_isSet = true;
}

bool OAICreateMultiplex_request::is_multiplex_settings_Set() const{
    return m_multiplex_settings_isSet;
}

bool OAICreateMultiplex_request::is_multiplex_settings_Valid() const{
    return m_multiplex_settings_isValid;
}

QString OAICreateMultiplex_request::getName() const {
    return m_name;
}
void OAICreateMultiplex_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateMultiplex_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateMultiplex_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateMultiplex_request::getRequestId() const {
    return m_request_id;
}
void OAICreateMultiplex_request::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateMultiplex_request::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateMultiplex_request::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QMap<QString, QString> OAICreateMultiplex_request::getTags() const {
    return m_tags;
}
void OAICreateMultiplex_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMultiplex_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMultiplex_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMultiplex_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplex_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMultiplex_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_availability_zones_isValid && m_multiplex_settings_isValid && m_name_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
