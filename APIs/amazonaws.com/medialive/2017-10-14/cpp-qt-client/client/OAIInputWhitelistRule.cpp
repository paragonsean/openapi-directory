/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputWhitelistRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputWhitelistRule::OAIInputWhitelistRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputWhitelistRule::OAIInputWhitelistRule() {
    this->initializeModel();
}

OAIInputWhitelistRule::~OAIInputWhitelistRule() {}

void OAIInputWhitelistRule::initializeModel() {

    m_cidr_isSet = false;
    m_cidr_isValid = false;
}

void OAIInputWhitelistRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputWhitelistRule::fromJsonObject(QJsonObject json) {

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("Cidr")]);
    m_cidr_isSet = !json[QString("Cidr")].isNull() && m_cidr_isValid;
}

QString OAIInputWhitelistRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputWhitelistRule::asJsonObject() const {
    QJsonObject obj;
    if (m_cidr_isSet) {
        obj.insert(QString("Cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    return obj;
}

QString OAIInputWhitelistRule::getCidr() const {
    return m_cidr;
}
void OAIInputWhitelistRule::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAIInputWhitelistRule::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAIInputWhitelistRule::is_cidr_Valid() const{
    return m_cidr_isValid;
}

bool OAIInputWhitelistRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputWhitelistRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
