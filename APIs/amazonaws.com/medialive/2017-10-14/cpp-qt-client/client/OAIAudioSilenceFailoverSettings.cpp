/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioSilenceFailoverSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioSilenceFailoverSettings::OAIAudioSilenceFailoverSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioSilenceFailoverSettings::OAIAudioSilenceFailoverSettings() {
    this->initializeModel();
}

OAIAudioSilenceFailoverSettings::~OAIAudioSilenceFailoverSettings() {}

void OAIAudioSilenceFailoverSettings::initializeModel() {

    m_audio_selector_name_isSet = false;
    m_audio_selector_name_isValid = false;

    m_audio_silence_threshold_msec_isSet = false;
    m_audio_silence_threshold_msec_isValid = false;
}

void OAIAudioSilenceFailoverSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioSilenceFailoverSettings::fromJsonObject(QJsonObject json) {

    m_audio_selector_name_isValid = ::OpenAPI::fromJsonValue(m_audio_selector_name, json[QString("AudioSelectorName")]);
    m_audio_selector_name_isSet = !json[QString("AudioSelectorName")].isNull() && m_audio_selector_name_isValid;

    m_audio_silence_threshold_msec_isValid = ::OpenAPI::fromJsonValue(m_audio_silence_threshold_msec, json[QString("AudioSilenceThresholdMsec")]);
    m_audio_silence_threshold_msec_isSet = !json[QString("AudioSilenceThresholdMsec")].isNull() && m_audio_silence_threshold_msec_isValid;
}

QString OAIAudioSilenceFailoverSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioSilenceFailoverSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_selector_name_isSet) {
        obj.insert(QString("AudioSelectorName"), ::OpenAPI::toJsonValue(m_audio_selector_name));
    }
    if (m_audio_silence_threshold_msec_isSet) {
        obj.insert(QString("AudioSilenceThresholdMsec"), ::OpenAPI::toJsonValue(m_audio_silence_threshold_msec));
    }
    return obj;
}

QString OAIAudioSilenceFailoverSettings::getAudioSelectorName() const {
    return m_audio_selector_name;
}
void OAIAudioSilenceFailoverSettings::setAudioSelectorName(const QString &audio_selector_name) {
    m_audio_selector_name = audio_selector_name;
    m_audio_selector_name_isSet = true;
}

bool OAIAudioSilenceFailoverSettings::is_audio_selector_name_Set() const{
    return m_audio_selector_name_isSet;
}

bool OAIAudioSilenceFailoverSettings::is_audio_selector_name_Valid() const{
    return m_audio_selector_name_isValid;
}

qint32 OAIAudioSilenceFailoverSettings::getAudioSilenceThresholdMsec() const {
    return m_audio_silence_threshold_msec;
}
void OAIAudioSilenceFailoverSettings::setAudioSilenceThresholdMsec(const qint32 &audio_silence_threshold_msec) {
    m_audio_silence_threshold_msec = audio_silence_threshold_msec;
    m_audio_silence_threshold_msec_isSet = true;
}

bool OAIAudioSilenceFailoverSettings::is_audio_silence_threshold_msec_Set() const{
    return m_audio_silence_threshold_msec_isSet;
}

bool OAIAudioSilenceFailoverSettings::is_audio_silence_threshold_msec_Valid() const{
    return m_audio_silence_threshold_msec_isValid;
}

bool OAIAudioSilenceFailoverSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_selector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_silence_threshold_msec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioSilenceFailoverSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_selector_name_isValid && true;
}

} // namespace OpenAPI
