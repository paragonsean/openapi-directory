/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoCodecSettings_Mpeg2Settings.h
 *
 * 
 */

#ifndef OAIVideoCodecSettings_Mpeg2Settings_H
#define OAIVideoCodecSettings_Mpeg2Settings_H

#include <QJsonObject>

#include "OAIAfdSignaling.h"
#include "OAIFixedAfd.h"
#include "OAIFrameCaptureSettings_TimecodeBurninSettings.h"
#include "OAIMpeg2AdaptiveQuantization.h"
#include "OAIMpeg2ColorMetadata.h"
#include "OAIMpeg2ColorSpace.h"
#include "OAIMpeg2DisplayRatio.h"
#include "OAIMpeg2GopSizeUnits.h"
#include "OAIMpeg2ScanType.h"
#include "OAIMpeg2Settings_FilterSettings.h"
#include "OAIMpeg2SubGopLength.h"
#include "OAIMpeg2TimecodeInsertionBehavior.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMpeg2Settings_FilterSettings;
class OAIFrameCaptureSettings_TimecodeBurninSettings;

class OAIVideoCodecSettings_Mpeg2Settings : public OAIObject {
public:
    OAIVideoCodecSettings_Mpeg2Settings();
    OAIVideoCodecSettings_Mpeg2Settings(QString json);
    ~OAIVideoCodecSettings_Mpeg2Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMpeg2AdaptiveQuantization getAdaptiveQuantization() const;
    void setAdaptiveQuantization(const OAIMpeg2AdaptiveQuantization &adaptive_quantization);
    bool is_adaptive_quantization_Set() const;
    bool is_adaptive_quantization_Valid() const;

    OAIAfdSignaling getAfdSignaling() const;
    void setAfdSignaling(const OAIAfdSignaling &afd_signaling);
    bool is_afd_signaling_Set() const;
    bool is_afd_signaling_Valid() const;

    OAIMpeg2ColorMetadata getColorMetadata() const;
    void setColorMetadata(const OAIMpeg2ColorMetadata &color_metadata);
    bool is_color_metadata_Set() const;
    bool is_color_metadata_Valid() const;

    OAIMpeg2ColorSpace getColorSpace() const;
    void setColorSpace(const OAIMpeg2ColorSpace &color_space);
    bool is_color_space_Set() const;
    bool is_color_space_Valid() const;

    OAIMpeg2DisplayRatio getDisplayAspectRatio() const;
    void setDisplayAspectRatio(const OAIMpeg2DisplayRatio &display_aspect_ratio);
    bool is_display_aspect_ratio_Set() const;
    bool is_display_aspect_ratio_Valid() const;

    OAIMpeg2Settings_FilterSettings getFilterSettings() const;
    void setFilterSettings(const OAIMpeg2Settings_FilterSettings &filter_settings);
    bool is_filter_settings_Set() const;
    bool is_filter_settings_Valid() const;

    OAIFixedAfd getFixedAfd() const;
    void setFixedAfd(const OAIFixedAfd &fixed_afd);
    bool is_fixed_afd_Set() const;
    bool is_fixed_afd_Valid() const;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    qint32 getGopClosedCadence() const;
    void setGopClosedCadence(const qint32 &gop_closed_cadence);
    bool is_gop_closed_cadence_Set() const;
    bool is_gop_closed_cadence_Valid() const;

    qint32 getGopNumBFrames() const;
    void setGopNumBFrames(const qint32 &gop_num_b_frames);
    bool is_gop_num_b_frames_Set() const;
    bool is_gop_num_b_frames_Valid() const;

    double getGopSize() const;
    void setGopSize(const double &gop_size);
    bool is_gop_size_Set() const;
    bool is_gop_size_Valid() const;

    OAIMpeg2GopSizeUnits getGopSizeUnits() const;
    void setGopSizeUnits(const OAIMpeg2GopSizeUnits &gop_size_units);
    bool is_gop_size_units_Set() const;
    bool is_gop_size_units_Valid() const;

    OAIMpeg2ScanType getScanType() const;
    void setScanType(const OAIMpeg2ScanType &scan_type);
    bool is_scan_type_Set() const;
    bool is_scan_type_Valid() const;

    OAIMpeg2SubGopLength getSubgopLength() const;
    void setSubgopLength(const OAIMpeg2SubGopLength &subgop_length);
    bool is_subgop_length_Set() const;
    bool is_subgop_length_Valid() const;

    OAIMpeg2TimecodeInsertionBehavior getTimecodeInsertion() const;
    void setTimecodeInsertion(const OAIMpeg2TimecodeInsertionBehavior &timecode_insertion);
    bool is_timecode_insertion_Set() const;
    bool is_timecode_insertion_Valid() const;

    OAIFrameCaptureSettings_TimecodeBurninSettings getTimecodeBurninSettings() const;
    void setTimecodeBurninSettings(const OAIFrameCaptureSettings_TimecodeBurninSettings &timecode_burnin_settings);
    bool is_timecode_burnin_settings_Set() const;
    bool is_timecode_burnin_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMpeg2AdaptiveQuantization m_adaptive_quantization;
    bool m_adaptive_quantization_isSet;
    bool m_adaptive_quantization_isValid;

    OAIAfdSignaling m_afd_signaling;
    bool m_afd_signaling_isSet;
    bool m_afd_signaling_isValid;

    OAIMpeg2ColorMetadata m_color_metadata;
    bool m_color_metadata_isSet;
    bool m_color_metadata_isValid;

    OAIMpeg2ColorSpace m_color_space;
    bool m_color_space_isSet;
    bool m_color_space_isValid;

    OAIMpeg2DisplayRatio m_display_aspect_ratio;
    bool m_display_aspect_ratio_isSet;
    bool m_display_aspect_ratio_isValid;

    OAIMpeg2Settings_FilterSettings m_filter_settings;
    bool m_filter_settings_isSet;
    bool m_filter_settings_isValid;

    OAIFixedAfd m_fixed_afd;
    bool m_fixed_afd_isSet;
    bool m_fixed_afd_isValid;

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    qint32 m_gop_closed_cadence;
    bool m_gop_closed_cadence_isSet;
    bool m_gop_closed_cadence_isValid;

    qint32 m_gop_num_b_frames;
    bool m_gop_num_b_frames_isSet;
    bool m_gop_num_b_frames_isValid;

    double m_gop_size;
    bool m_gop_size_isSet;
    bool m_gop_size_isValid;

    OAIMpeg2GopSizeUnits m_gop_size_units;
    bool m_gop_size_units_isSet;
    bool m_gop_size_units_isValid;

    OAIMpeg2ScanType m_scan_type;
    bool m_scan_type_isSet;
    bool m_scan_type_isValid;

    OAIMpeg2SubGopLength m_subgop_length;
    bool m_subgop_length_isSet;
    bool m_subgop_length_isValid;

    OAIMpeg2TimecodeInsertionBehavior m_timecode_insertion;
    bool m_timecode_insertion_isSet;
    bool m_timecode_insertion_isValid;

    OAIFrameCaptureSettings_TimecodeBurninSettings m_timecode_burnin_settings;
    bool m_timecode_burnin_settings_isSet;
    bool m_timecode_burnin_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoCodecSettings_Mpeg2Settings)

#endif // OAIVideoCodecSettings_Mpeg2Settings_H
