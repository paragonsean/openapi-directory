/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_encoderSettings_TimecodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_encoderSettings_TimecodeConfig::OAICreateChannel_request_encoderSettings_TimecodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_encoderSettings_TimecodeConfig::OAICreateChannel_request_encoderSettings_TimecodeConfig() {
    this->initializeModel();
}

OAICreateChannel_request_encoderSettings_TimecodeConfig::~OAICreateChannel_request_encoderSettings_TimecodeConfig() {}

void OAICreateChannel_request_encoderSettings_TimecodeConfig::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_sync_threshold_isSet = false;
    m_sync_threshold_isValid = false;
}

void OAICreateChannel_request_encoderSettings_TimecodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_encoderSettings_TimecodeConfig::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_sync_threshold_isValid = ::OpenAPI::fromJsonValue(m_sync_threshold, json[QString("SyncThreshold")]);
    m_sync_threshold_isSet = !json[QString("SyncThreshold")].isNull() && m_sync_threshold_isValid;
}

QString OAICreateChannel_request_encoderSettings_TimecodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_encoderSettings_TimecodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_sync_threshold_isSet) {
        obj.insert(QString("SyncThreshold"), ::OpenAPI::toJsonValue(m_sync_threshold));
    }
    return obj;
}

OAITimecodeConfigSource OAICreateChannel_request_encoderSettings_TimecodeConfig::getSource() const {
    return m_source;
}
void OAICreateChannel_request_encoderSettings_TimecodeConfig::setSource(const OAITimecodeConfigSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_TimecodeConfig::is_source_Set() const{
    return m_source_isSet;
}

bool OAICreateChannel_request_encoderSettings_TimecodeConfig::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAICreateChannel_request_encoderSettings_TimecodeConfig::getSyncThreshold() const {
    return m_sync_threshold;
}
void OAICreateChannel_request_encoderSettings_TimecodeConfig::setSyncThreshold(const qint32 &sync_threshold) {
    m_sync_threshold = sync_threshold;
    m_sync_threshold_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_TimecodeConfig::is_sync_threshold_Set() const{
    return m_sync_threshold_isSet;
}

bool OAICreateChannel_request_encoderSettings_TimecodeConfig::is_sync_threshold_Valid() const{
    return m_sync_threshold_isValid;
}

bool OAICreateChannel_request_encoderSettings_TimecodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_encoderSettings_TimecodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
