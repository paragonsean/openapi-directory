/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_encoderSettings_AvailBlanking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_encoderSettings_AvailBlanking::OAICreateChannel_request_encoderSettings_AvailBlanking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_encoderSettings_AvailBlanking::OAICreateChannel_request_encoderSettings_AvailBlanking() {
    this->initializeModel();
}

OAICreateChannel_request_encoderSettings_AvailBlanking::~OAICreateChannel_request_encoderSettings_AvailBlanking() {}

void OAICreateChannel_request_encoderSettings_AvailBlanking::initializeModel() {

    m_avail_blanking_image_isSet = false;
    m_avail_blanking_image_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICreateChannel_request_encoderSettings_AvailBlanking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_encoderSettings_AvailBlanking::fromJsonObject(QJsonObject json) {

    m_avail_blanking_image_isValid = ::OpenAPI::fromJsonValue(m_avail_blanking_image, json[QString("AvailBlankingImage")]);
    m_avail_blanking_image_isSet = !json[QString("AvailBlankingImage")].isNull() && m_avail_blanking_image_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAICreateChannel_request_encoderSettings_AvailBlanking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_encoderSettings_AvailBlanking::asJsonObject() const {
    QJsonObject obj;
    if (m_avail_blanking_image.isSet()) {
        obj.insert(QString("AvailBlankingImage"), ::OpenAPI::toJsonValue(m_avail_blanking_image));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIAvailBlanking_AvailBlankingImage OAICreateChannel_request_encoderSettings_AvailBlanking::getAvailBlankingImage() const {
    return m_avail_blanking_image;
}
void OAICreateChannel_request_encoderSettings_AvailBlanking::setAvailBlankingImage(const OAIAvailBlanking_AvailBlankingImage &avail_blanking_image) {
    m_avail_blanking_image = avail_blanking_image;
    m_avail_blanking_image_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_AvailBlanking::is_avail_blanking_image_Set() const{
    return m_avail_blanking_image_isSet;
}

bool OAICreateChannel_request_encoderSettings_AvailBlanking::is_avail_blanking_image_Valid() const{
    return m_avail_blanking_image_isValid;
}

OAIAvailBlankingState OAICreateChannel_request_encoderSettings_AvailBlanking::getState() const {
    return m_state;
}
void OAICreateChannel_request_encoderSettings_AvailBlanking::setState(const OAIAvailBlankingState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_AvailBlanking::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateChannel_request_encoderSettings_AvailBlanking::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICreateChannel_request_encoderSettings_AvailBlanking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avail_blanking_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_encoderSettings_AvailBlanking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
