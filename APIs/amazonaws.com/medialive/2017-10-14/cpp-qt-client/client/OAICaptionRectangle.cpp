/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICaptionRectangle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICaptionRectangle::OAICaptionRectangle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICaptionRectangle::OAICaptionRectangle() {
    this->initializeModel();
}

OAICaptionRectangle::~OAICaptionRectangle() {}

void OAICaptionRectangle::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_left_offset_isSet = false;
    m_left_offset_isValid = false;

    m_top_offset_isSet = false;
    m_top_offset_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICaptionRectangle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICaptionRectangle::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_left_offset_isValid = ::OpenAPI::fromJsonValue(m_left_offset, json[QString("LeftOffset")]);
    m_left_offset_isSet = !json[QString("LeftOffset")].isNull() && m_left_offset_isValid;

    m_top_offset_isValid = ::OpenAPI::fromJsonValue(m_top_offset, json[QString("TopOffset")]);
    m_top_offset_isSet = !json[QString("TopOffset")].isNull() && m_top_offset_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAICaptionRectangle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICaptionRectangle::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_left_offset_isSet) {
        obj.insert(QString("LeftOffset"), ::OpenAPI::toJsonValue(m_left_offset));
    }
    if (m_top_offset_isSet) {
        obj.insert(QString("TopOffset"), ::OpenAPI::toJsonValue(m_top_offset));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAICaptionRectangle::getHeight() const {
    return m_height;
}
void OAICaptionRectangle::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICaptionRectangle::is_height_Set() const{
    return m_height_isSet;
}

bool OAICaptionRectangle::is_height_Valid() const{
    return m_height_isValid;
}

double OAICaptionRectangle::getLeftOffset() const {
    return m_left_offset;
}
void OAICaptionRectangle::setLeftOffset(const double &left_offset) {
    m_left_offset = left_offset;
    m_left_offset_isSet = true;
}

bool OAICaptionRectangle::is_left_offset_Set() const{
    return m_left_offset_isSet;
}

bool OAICaptionRectangle::is_left_offset_Valid() const{
    return m_left_offset_isValid;
}

double OAICaptionRectangle::getTopOffset() const {
    return m_top_offset;
}
void OAICaptionRectangle::setTopOffset(const double &top_offset) {
    m_top_offset = top_offset;
    m_top_offset_isSet = true;
}

bool OAICaptionRectangle::is_top_offset_Set() const{
    return m_top_offset_isSet;
}

bool OAICaptionRectangle::is_top_offset_Valid() const{
    return m_top_offset_isValid;
}

double OAICaptionRectangle::getWidth() const {
    return m_width;
}
void OAICaptionRectangle::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICaptionRectangle::is_width_Set() const{
    return m_width_isSet;
}

bool OAICaptionRectangle::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICaptionRectangle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICaptionRectangle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_height_isValid && m_left_offset_isValid && m_top_offset_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
