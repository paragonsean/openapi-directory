/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioWatermarkSettings_NielsenWatermarksSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioWatermarkSettings_NielsenWatermarksSettings::OAIAudioWatermarkSettings_NielsenWatermarksSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioWatermarkSettings_NielsenWatermarksSettings::OAIAudioWatermarkSettings_NielsenWatermarksSettings() {
    this->initializeModel();
}

OAIAudioWatermarkSettings_NielsenWatermarksSettings::~OAIAudioWatermarkSettings_NielsenWatermarksSettings() {}

void OAIAudioWatermarkSettings_NielsenWatermarksSettings::initializeModel() {

    m_nielsen_cbet_settings_isSet = false;
    m_nielsen_cbet_settings_isValid = false;

    m_nielsen_distribution_type_isSet = false;
    m_nielsen_distribution_type_isValid = false;

    m_nielsen_naes_ii_nw_settings_isSet = false;
    m_nielsen_naes_ii_nw_settings_isValid = false;
}

void OAIAudioWatermarkSettings_NielsenWatermarksSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioWatermarkSettings_NielsenWatermarksSettings::fromJsonObject(QJsonObject json) {

    m_nielsen_cbet_settings_isValid = ::OpenAPI::fromJsonValue(m_nielsen_cbet_settings, json[QString("NielsenCbetSettings")]);
    m_nielsen_cbet_settings_isSet = !json[QString("NielsenCbetSettings")].isNull() && m_nielsen_cbet_settings_isValid;

    m_nielsen_distribution_type_isValid = ::OpenAPI::fromJsonValue(m_nielsen_distribution_type, json[QString("NielsenDistributionType")]);
    m_nielsen_distribution_type_isSet = !json[QString("NielsenDistributionType")].isNull() && m_nielsen_distribution_type_isValid;

    m_nielsen_naes_ii_nw_settings_isValid = ::OpenAPI::fromJsonValue(m_nielsen_naes_ii_nw_settings, json[QString("NielsenNaesIiNwSettings")]);
    m_nielsen_naes_ii_nw_settings_isSet = !json[QString("NielsenNaesIiNwSettings")].isNull() && m_nielsen_naes_ii_nw_settings_isValid;
}

QString OAIAudioWatermarkSettings_NielsenWatermarksSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioWatermarkSettings_NielsenWatermarksSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_nielsen_cbet_settings.isSet()) {
        obj.insert(QString("NielsenCbetSettings"), ::OpenAPI::toJsonValue(m_nielsen_cbet_settings));
    }
    if (m_nielsen_distribution_type.isSet()) {
        obj.insert(QString("NielsenDistributionType"), ::OpenAPI::toJsonValue(m_nielsen_distribution_type));
    }
    if (m_nielsen_naes_ii_nw_settings.isSet()) {
        obj.insert(QString("NielsenNaesIiNwSettings"), ::OpenAPI::toJsonValue(m_nielsen_naes_ii_nw_settings));
    }
    return obj;
}

OAINielsenWatermarksSettings_NielsenCbetSettings OAIAudioWatermarkSettings_NielsenWatermarksSettings::getNielsenCbetSettings() const {
    return m_nielsen_cbet_settings;
}
void OAIAudioWatermarkSettings_NielsenWatermarksSettings::setNielsenCbetSettings(const OAINielsenWatermarksSettings_NielsenCbetSettings &nielsen_cbet_settings) {
    m_nielsen_cbet_settings = nielsen_cbet_settings;
    m_nielsen_cbet_settings_isSet = true;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::is_nielsen_cbet_settings_Set() const{
    return m_nielsen_cbet_settings_isSet;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::is_nielsen_cbet_settings_Valid() const{
    return m_nielsen_cbet_settings_isValid;
}

OAINielsenWatermarksDistributionTypes OAIAudioWatermarkSettings_NielsenWatermarksSettings::getNielsenDistributionType() const {
    return m_nielsen_distribution_type;
}
void OAIAudioWatermarkSettings_NielsenWatermarksSettings::setNielsenDistributionType(const OAINielsenWatermarksDistributionTypes &nielsen_distribution_type) {
    m_nielsen_distribution_type = nielsen_distribution_type;
    m_nielsen_distribution_type_isSet = true;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::is_nielsen_distribution_type_Set() const{
    return m_nielsen_distribution_type_isSet;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::is_nielsen_distribution_type_Valid() const{
    return m_nielsen_distribution_type_isValid;
}

OAINielsenWatermarksSettings_NielsenNaesIiNwSettings OAIAudioWatermarkSettings_NielsenWatermarksSettings::getNielsenNaesIiNwSettings() const {
    return m_nielsen_naes_ii_nw_settings;
}
void OAIAudioWatermarkSettings_NielsenWatermarksSettings::setNielsenNaesIiNwSettings(const OAINielsenWatermarksSettings_NielsenNaesIiNwSettings &nielsen_naes_ii_nw_settings) {
    m_nielsen_naes_ii_nw_settings = nielsen_naes_ii_nw_settings;
    m_nielsen_naes_ii_nw_settings_isSet = true;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::is_nielsen_naes_ii_nw_settings_Set() const{
    return m_nielsen_naes_ii_nw_settings_isSet;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::is_nielsen_naes_ii_nw_settings_Valid() const{
    return m_nielsen_naes_ii_nw_settings_isValid;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nielsen_cbet_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_distribution_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_naes_ii_nw_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioWatermarkSettings_NielsenWatermarksSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
