/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputGroupSettings_RtmpGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputGroupSettings_RtmpGroupSettings::OAIOutputGroupSettings_RtmpGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputGroupSettings_RtmpGroupSettings::OAIOutputGroupSettings_RtmpGroupSettings() {
    this->initializeModel();
}

OAIOutputGroupSettings_RtmpGroupSettings::~OAIOutputGroupSettings_RtmpGroupSettings() {}

void OAIOutputGroupSettings_RtmpGroupSettings::initializeModel() {

    m_ad_markers_isSet = false;
    m_ad_markers_isValid = false;

    m_authentication_scheme_isSet = false;
    m_authentication_scheme_isValid = false;

    m_cache_full_behavior_isSet = false;
    m_cache_full_behavior_isValid = false;

    m_cache_length_isSet = false;
    m_cache_length_isValid = false;

    m_caption_data_isSet = false;
    m_caption_data_isValid = false;

    m_input_loss_action_isSet = false;
    m_input_loss_action_isValid = false;

    m_restart_delay_isSet = false;
    m_restart_delay_isValid = false;
}

void OAIOutputGroupSettings_RtmpGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputGroupSettings_RtmpGroupSettings::fromJsonObject(QJsonObject json) {

    m_ad_markers_isValid = ::OpenAPI::fromJsonValue(m_ad_markers, json[QString("AdMarkers")]);
    m_ad_markers_isSet = !json[QString("AdMarkers")].isNull() && m_ad_markers_isValid;

    m_authentication_scheme_isValid = ::OpenAPI::fromJsonValue(m_authentication_scheme, json[QString("AuthenticationScheme")]);
    m_authentication_scheme_isSet = !json[QString("AuthenticationScheme")].isNull() && m_authentication_scheme_isValid;

    m_cache_full_behavior_isValid = ::OpenAPI::fromJsonValue(m_cache_full_behavior, json[QString("CacheFullBehavior")]);
    m_cache_full_behavior_isSet = !json[QString("CacheFullBehavior")].isNull() && m_cache_full_behavior_isValid;

    m_cache_length_isValid = ::OpenAPI::fromJsonValue(m_cache_length, json[QString("CacheLength")]);
    m_cache_length_isSet = !json[QString("CacheLength")].isNull() && m_cache_length_isValid;

    m_caption_data_isValid = ::OpenAPI::fromJsonValue(m_caption_data, json[QString("CaptionData")]);
    m_caption_data_isSet = !json[QString("CaptionData")].isNull() && m_caption_data_isValid;

    m_input_loss_action_isValid = ::OpenAPI::fromJsonValue(m_input_loss_action, json[QString("InputLossAction")]);
    m_input_loss_action_isSet = !json[QString("InputLossAction")].isNull() && m_input_loss_action_isValid;

    m_restart_delay_isValid = ::OpenAPI::fromJsonValue(m_restart_delay, json[QString("RestartDelay")]);
    m_restart_delay_isSet = !json[QString("RestartDelay")].isNull() && m_restart_delay_isValid;
}

QString OAIOutputGroupSettings_RtmpGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputGroupSettings_RtmpGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_markers.isSet()) {
        obj.insert(QString("AdMarkers"), ::OpenAPI::toJsonValue(m_ad_markers));
    }
    if (m_authentication_scheme.isSet()) {
        obj.insert(QString("AuthenticationScheme"), ::OpenAPI::toJsonValue(m_authentication_scheme));
    }
    if (m_cache_full_behavior.isSet()) {
        obj.insert(QString("CacheFullBehavior"), ::OpenAPI::toJsonValue(m_cache_full_behavior));
    }
    if (m_cache_length_isSet) {
        obj.insert(QString("CacheLength"), ::OpenAPI::toJsonValue(m_cache_length));
    }
    if (m_caption_data.isSet()) {
        obj.insert(QString("CaptionData"), ::OpenAPI::toJsonValue(m_caption_data));
    }
    if (m_input_loss_action.isSet()) {
        obj.insert(QString("InputLossAction"), ::OpenAPI::toJsonValue(m_input_loss_action));
    }
    if (m_restart_delay_isSet) {
        obj.insert(QString("RestartDelay"), ::OpenAPI::toJsonValue(m_restart_delay));
    }
    return obj;
}

QList OAIOutputGroupSettings_RtmpGroupSettings::getAdMarkers() const {
    return m_ad_markers;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setAdMarkers(const QList &ad_markers) {
    m_ad_markers = ad_markers;
    m_ad_markers_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_ad_markers_Set() const{
    return m_ad_markers_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_ad_markers_Valid() const{
    return m_ad_markers_isValid;
}

OAIAuthenticationScheme OAIOutputGroupSettings_RtmpGroupSettings::getAuthenticationScheme() const {
    return m_authentication_scheme;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setAuthenticationScheme(const OAIAuthenticationScheme &authentication_scheme) {
    m_authentication_scheme = authentication_scheme;
    m_authentication_scheme_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_authentication_scheme_Set() const{
    return m_authentication_scheme_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_authentication_scheme_Valid() const{
    return m_authentication_scheme_isValid;
}

OAIRtmpCacheFullBehavior OAIOutputGroupSettings_RtmpGroupSettings::getCacheFullBehavior() const {
    return m_cache_full_behavior;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setCacheFullBehavior(const OAIRtmpCacheFullBehavior &cache_full_behavior) {
    m_cache_full_behavior = cache_full_behavior;
    m_cache_full_behavior_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_cache_full_behavior_Set() const{
    return m_cache_full_behavior_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_cache_full_behavior_Valid() const{
    return m_cache_full_behavior_isValid;
}

qint32 OAIOutputGroupSettings_RtmpGroupSettings::getCacheLength() const {
    return m_cache_length;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setCacheLength(const qint32 &cache_length) {
    m_cache_length = cache_length;
    m_cache_length_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_cache_length_Set() const{
    return m_cache_length_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_cache_length_Valid() const{
    return m_cache_length_isValid;
}

OAIRtmpCaptionData OAIOutputGroupSettings_RtmpGroupSettings::getCaptionData() const {
    return m_caption_data;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setCaptionData(const OAIRtmpCaptionData &caption_data) {
    m_caption_data = caption_data;
    m_caption_data_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_caption_data_Set() const{
    return m_caption_data_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_caption_data_Valid() const{
    return m_caption_data_isValid;
}

OAIInputLossActionForRtmpOut OAIOutputGroupSettings_RtmpGroupSettings::getInputLossAction() const {
    return m_input_loss_action;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setInputLossAction(const OAIInputLossActionForRtmpOut &input_loss_action) {
    m_input_loss_action = input_loss_action;
    m_input_loss_action_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_input_loss_action_Set() const{
    return m_input_loss_action_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_input_loss_action_Valid() const{
    return m_input_loss_action_isValid;
}

qint32 OAIOutputGroupSettings_RtmpGroupSettings::getRestartDelay() const {
    return m_restart_delay;
}
void OAIOutputGroupSettings_RtmpGroupSettings::setRestartDelay(const qint32 &restart_delay) {
    m_restart_delay = restart_delay;
    m_restart_delay_isSet = true;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_restart_delay_Set() const{
    return m_restart_delay_isSet;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::is_restart_delay_Valid() const{
    return m_restart_delay_isValid;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_full_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_delay_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputGroupSettings_RtmpGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
