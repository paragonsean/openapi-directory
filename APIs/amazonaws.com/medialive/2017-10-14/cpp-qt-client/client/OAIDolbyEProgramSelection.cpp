/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDolbyEProgramSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDolbyEProgramSelection::OAIDolbyEProgramSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDolbyEProgramSelection::OAIDolbyEProgramSelection() {
    this->initializeModel();
}

OAIDolbyEProgramSelection::~OAIDolbyEProgramSelection() {}

void OAIDolbyEProgramSelection::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDolbyEProgramSelection::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDolbyEProgramSelection::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ALL_CHANNELS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::ALL_CHANNELS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_6", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_6;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_7", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_7;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROGRAM_8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDolbyEProgramSelection::PROGRAM_8;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDolbyEProgramSelection::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDolbyEProgramSelection::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDolbyEProgramSelection::ALL_CHANNELS:
            val = "ALL_CHANNELS";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_1:
            val = "PROGRAM_1";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_2:
            val = "PROGRAM_2";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_3:
            val = "PROGRAM_3";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_4:
            val = "PROGRAM_4";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_5:
            val = "PROGRAM_5";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_6:
            val = "PROGRAM_6";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_7:
            val = "PROGRAM_7";
            break;
        case eOAIDolbyEProgramSelection::PROGRAM_8:
            val = "PROGRAM_8";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDolbyEProgramSelection::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDolbyEProgramSelection::eOAIDolbyEProgramSelection OAIDolbyEProgramSelection::getValue() const {
    return m_value;
}

void OAIDolbyEProgramSelection::setValue(const OAIDolbyEProgramSelection::eOAIDolbyEProgramSelection& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDolbyEProgramSelection::isSet() const {
    
    return m_value_isSet;
}

bool OAIDolbyEProgramSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
