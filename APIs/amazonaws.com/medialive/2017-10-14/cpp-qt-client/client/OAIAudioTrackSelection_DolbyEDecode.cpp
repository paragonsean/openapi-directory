/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioTrackSelection_DolbyEDecode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioTrackSelection_DolbyEDecode::OAIAudioTrackSelection_DolbyEDecode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioTrackSelection_DolbyEDecode::OAIAudioTrackSelection_DolbyEDecode() {
    this->initializeModel();
}

OAIAudioTrackSelection_DolbyEDecode::~OAIAudioTrackSelection_DolbyEDecode() {}

void OAIAudioTrackSelection_DolbyEDecode::initializeModel() {

    m_program_selection_isSet = false;
    m_program_selection_isValid = false;
}

void OAIAudioTrackSelection_DolbyEDecode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioTrackSelection_DolbyEDecode::fromJsonObject(QJsonObject json) {

    m_program_selection_isValid = ::OpenAPI::fromJsonValue(m_program_selection, json[QString("ProgramSelection")]);
    m_program_selection_isSet = !json[QString("ProgramSelection")].isNull() && m_program_selection_isValid;
}

QString OAIAudioTrackSelection_DolbyEDecode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioTrackSelection_DolbyEDecode::asJsonObject() const {
    QJsonObject obj;
    if (m_program_selection.isSet()) {
        obj.insert(QString("ProgramSelection"), ::OpenAPI::toJsonValue(m_program_selection));
    }
    return obj;
}

OAIDolbyEProgramSelection OAIAudioTrackSelection_DolbyEDecode::getProgramSelection() const {
    return m_program_selection;
}
void OAIAudioTrackSelection_DolbyEDecode::setProgramSelection(const OAIDolbyEProgramSelection &program_selection) {
    m_program_selection = program_selection;
    m_program_selection_isSet = true;
}

bool OAIAudioTrackSelection_DolbyEDecode::is_program_selection_Set() const{
    return m_program_selection_isSet;
}

bool OAIAudioTrackSelection_DolbyEDecode::is_program_selection_Valid() const{
    return m_program_selection_isValid;
}

bool OAIAudioTrackSelection_DolbyEDecode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_program_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioTrackSelection_DolbyEDecode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_program_selection_isValid && true;
}

} // namespace OpenAPI
