/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDestination::OAIInputDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDestination::OAIInputDestination() {
    this->initializeModel();
}

OAIInputDestination::~OAIInputDestination() {}

void OAIInputDestination::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;
}

void OAIInputDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDestination::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("Ip")]);
    m_ip_isSet = !json[QString("Ip")].isNull() && m_ip_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;
}

QString OAIInputDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("Ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vpc.isSet()) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    return obj;
}

QString OAIInputDestination::getIp() const {
    return m_ip;
}
void OAIInputDestination::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIInputDestination::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIInputDestination::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIInputDestination::getPort() const {
    return m_port;
}
void OAIInputDestination::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIInputDestination::is_port_Set() const{
    return m_port_isSet;
}

bool OAIInputDestination::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIInputDestination::getUrl() const {
    return m_url;
}
void OAIInputDestination::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInputDestination::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInputDestination::is_url_Valid() const{
    return m_url_isValid;
}

OAIInputDestination_Vpc OAIInputDestination::getVpc() const {
    return m_vpc;
}
void OAIInputDestination::setVpc(const OAIInputDestination_Vpc &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIInputDestination::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIInputDestination::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAIInputDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
