/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioSelector_SelectorSettings.h
 *
 * 
 */

#ifndef OAIAudioSelector_SelectorSettings_H
#define OAIAudioSelector_SelectorSettings_H

#include <QJsonObject>

#include "OAIAudioSelectorSettings_AudioHlsRenditionSelection.h"
#include "OAIAudioSelectorSettings_AudioLanguageSelection.h"
#include "OAIAudioSelectorSettings_AudioPidSelection.h"
#include "OAIAudioSelectorSettings_AudioTrackSelection.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioSelectorSettings_AudioHlsRenditionSelection;
class OAIAudioSelectorSettings_AudioLanguageSelection;
class OAIAudioSelectorSettings_AudioPidSelection;
class OAIAudioSelectorSettings_AudioTrackSelection;

class OAIAudioSelector_SelectorSettings : public OAIObject {
public:
    OAIAudioSelector_SelectorSettings();
    OAIAudioSelector_SelectorSettings(QString json);
    ~OAIAudioSelector_SelectorSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioSelectorSettings_AudioHlsRenditionSelection getAudioHlsRenditionSelection() const;
    void setAudioHlsRenditionSelection(const OAIAudioSelectorSettings_AudioHlsRenditionSelection &audio_hls_rendition_selection);
    bool is_audio_hls_rendition_selection_Set() const;
    bool is_audio_hls_rendition_selection_Valid() const;

    OAIAudioSelectorSettings_AudioLanguageSelection getAudioLanguageSelection() const;
    void setAudioLanguageSelection(const OAIAudioSelectorSettings_AudioLanguageSelection &audio_language_selection);
    bool is_audio_language_selection_Set() const;
    bool is_audio_language_selection_Valid() const;

    OAIAudioSelectorSettings_AudioPidSelection getAudioPidSelection() const;
    void setAudioPidSelection(const OAIAudioSelectorSettings_AudioPidSelection &audio_pid_selection);
    bool is_audio_pid_selection_Set() const;
    bool is_audio_pid_selection_Valid() const;

    OAIAudioSelectorSettings_AudioTrackSelection getAudioTrackSelection() const;
    void setAudioTrackSelection(const OAIAudioSelectorSettings_AudioTrackSelection &audio_track_selection);
    bool is_audio_track_selection_Set() const;
    bool is_audio_track_selection_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioSelectorSettings_AudioHlsRenditionSelection m_audio_hls_rendition_selection;
    bool m_audio_hls_rendition_selection_isSet;
    bool m_audio_hls_rendition_selection_isValid;

    OAIAudioSelectorSettings_AudioLanguageSelection m_audio_language_selection;
    bool m_audio_language_selection_isSet;
    bool m_audio_language_selection_isValid;

    OAIAudioSelectorSettings_AudioPidSelection m_audio_pid_selection;
    bool m_audio_pid_selection_isSet;
    bool m_audio_pid_selection_isValid;

    OAIAudioSelectorSettings_AudioTrackSelection m_audio_track_selection;
    bool m_audio_track_selection_isSet;
    bool m_audio_track_selection_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioSelector_SelectorSettings)

#endif // OAIAudioSelector_SelectorSettings_H
