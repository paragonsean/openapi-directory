/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINielsenWatermarkTimezones.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINielsenWatermarkTimezones::OAINielsenWatermarkTimezones(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINielsenWatermarkTimezones::OAINielsenWatermarkTimezones() {
    this->initializeModel();
}

OAINielsenWatermarkTimezones::~OAINielsenWatermarkTimezones() {}

void OAINielsenWatermarkTimezones::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINielsenWatermarkTimezones::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINielsenWatermarkTimezones::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AMERICA_PUERTO_RICO", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::AMERICA_PUERTO_RICO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_ALASKA", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_ALASKA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_ARIZONA", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_ARIZONA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_CENTRAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_CENTRAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_EASTERN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_EASTERN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_HAWAII", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_HAWAII;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_MOUNTAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_MOUNTAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_PACIFIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_PACIFIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US_SAMOA", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::US_SAMOA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTC", Qt::CaseInsensitive) == 0) {
        m_value = eOAINielsenWatermarkTimezones::UTC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINielsenWatermarkTimezones::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINielsenWatermarkTimezones::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINielsenWatermarkTimezones::AMERICA_PUERTO_RICO:
            val = "AMERICA_PUERTO_RICO";
            break;
        case eOAINielsenWatermarkTimezones::US_ALASKA:
            val = "US_ALASKA";
            break;
        case eOAINielsenWatermarkTimezones::US_ARIZONA:
            val = "US_ARIZONA";
            break;
        case eOAINielsenWatermarkTimezones::US_CENTRAL:
            val = "US_CENTRAL";
            break;
        case eOAINielsenWatermarkTimezones::US_EASTERN:
            val = "US_EASTERN";
            break;
        case eOAINielsenWatermarkTimezones::US_HAWAII:
            val = "US_HAWAII";
            break;
        case eOAINielsenWatermarkTimezones::US_MOUNTAIN:
            val = "US_MOUNTAIN";
            break;
        case eOAINielsenWatermarkTimezones::US_PACIFIC:
            val = "US_PACIFIC";
            break;
        case eOAINielsenWatermarkTimezones::US_SAMOA:
            val = "US_SAMOA";
            break;
        case eOAINielsenWatermarkTimezones::UTC:
            val = "UTC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINielsenWatermarkTimezones::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINielsenWatermarkTimezones::eOAINielsenWatermarkTimezones OAINielsenWatermarkTimezones::getValue() const {
    return m_value;
}

void OAINielsenWatermarkTimezones::setValue(const OAINielsenWatermarkTimezones::eOAINielsenWatermarkTimezones& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINielsenWatermarkTimezones::isSet() const {
    
    return m_value_isSet;
}

bool OAINielsenWatermarkTimezones::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
