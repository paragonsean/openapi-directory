/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputSettings::OAIOutputSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputSettings::OAIOutputSettings() {
    this->initializeModel();
}

OAIOutputSettings::~OAIOutputSettings() {}

void OAIOutputSettings::initializeModel() {

    m_archive_output_settings_isSet = false;
    m_archive_output_settings_isValid = false;

    m_frame_capture_output_settings_isSet = false;
    m_frame_capture_output_settings_isValid = false;

    m_hls_output_settings_isSet = false;
    m_hls_output_settings_isValid = false;

    m_media_package_output_settings_isSet = false;
    m_media_package_output_settings_isValid = false;

    m_ms_smooth_output_settings_isSet = false;
    m_ms_smooth_output_settings_isValid = false;

    m_multiplex_output_settings_isSet = false;
    m_multiplex_output_settings_isValid = false;

    m_rtmp_output_settings_isSet = false;
    m_rtmp_output_settings_isValid = false;

    m_udp_output_settings_isSet = false;
    m_udp_output_settings_isValid = false;
}

void OAIOutputSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputSettings::fromJsonObject(QJsonObject json) {

    m_archive_output_settings_isValid = ::OpenAPI::fromJsonValue(m_archive_output_settings, json[QString("ArchiveOutputSettings")]);
    m_archive_output_settings_isSet = !json[QString("ArchiveOutputSettings")].isNull() && m_archive_output_settings_isValid;

    m_frame_capture_output_settings_isValid = ::OpenAPI::fromJsonValue(m_frame_capture_output_settings, json[QString("FrameCaptureOutputSettings")]);
    m_frame_capture_output_settings_isSet = !json[QString("FrameCaptureOutputSettings")].isNull() && m_frame_capture_output_settings_isValid;

    m_hls_output_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_output_settings, json[QString("HlsOutputSettings")]);
    m_hls_output_settings_isSet = !json[QString("HlsOutputSettings")].isNull() && m_hls_output_settings_isValid;

    m_media_package_output_settings_isValid = ::OpenAPI::fromJsonValue(m_media_package_output_settings, json[QString("MediaPackageOutputSettings")]);
    m_media_package_output_settings_isSet = !json[QString("MediaPackageOutputSettings")].isNull() && m_media_package_output_settings_isValid;

    m_ms_smooth_output_settings_isValid = ::OpenAPI::fromJsonValue(m_ms_smooth_output_settings, json[QString("MsSmoothOutputSettings")]);
    m_ms_smooth_output_settings_isSet = !json[QString("MsSmoothOutputSettings")].isNull() && m_ms_smooth_output_settings_isValid;

    m_multiplex_output_settings_isValid = ::OpenAPI::fromJsonValue(m_multiplex_output_settings, json[QString("MultiplexOutputSettings")]);
    m_multiplex_output_settings_isSet = !json[QString("MultiplexOutputSettings")].isNull() && m_multiplex_output_settings_isValid;

    m_rtmp_output_settings_isValid = ::OpenAPI::fromJsonValue(m_rtmp_output_settings, json[QString("RtmpOutputSettings")]);
    m_rtmp_output_settings_isSet = !json[QString("RtmpOutputSettings")].isNull() && m_rtmp_output_settings_isValid;

    m_udp_output_settings_isValid = ::OpenAPI::fromJsonValue(m_udp_output_settings, json[QString("UdpOutputSettings")]);
    m_udp_output_settings_isSet = !json[QString("UdpOutputSettings")].isNull() && m_udp_output_settings_isValid;
}

QString OAIOutputSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_output_settings.isSet()) {
        obj.insert(QString("ArchiveOutputSettings"), ::OpenAPI::toJsonValue(m_archive_output_settings));
    }
    if (m_frame_capture_output_settings.isSet()) {
        obj.insert(QString("FrameCaptureOutputSettings"), ::OpenAPI::toJsonValue(m_frame_capture_output_settings));
    }
    if (m_hls_output_settings.isSet()) {
        obj.insert(QString("HlsOutputSettings"), ::OpenAPI::toJsonValue(m_hls_output_settings));
    }
    if (m_media_package_output_settings.isSet()) {
        obj.insert(QString("MediaPackageOutputSettings"), ::OpenAPI::toJsonValue(m_media_package_output_settings));
    }
    if (m_ms_smooth_output_settings.isSet()) {
        obj.insert(QString("MsSmoothOutputSettings"), ::OpenAPI::toJsonValue(m_ms_smooth_output_settings));
    }
    if (m_multiplex_output_settings.isSet()) {
        obj.insert(QString("MultiplexOutputSettings"), ::OpenAPI::toJsonValue(m_multiplex_output_settings));
    }
    if (m_rtmp_output_settings.isSet()) {
        obj.insert(QString("RtmpOutputSettings"), ::OpenAPI::toJsonValue(m_rtmp_output_settings));
    }
    if (m_udp_output_settings.isSet()) {
        obj.insert(QString("UdpOutputSettings"), ::OpenAPI::toJsonValue(m_udp_output_settings));
    }
    return obj;
}

OAIOutputSettings_ArchiveOutputSettings OAIOutputSettings::getArchiveOutputSettings() const {
    return m_archive_output_settings;
}
void OAIOutputSettings::setArchiveOutputSettings(const OAIOutputSettings_ArchiveOutputSettings &archive_output_settings) {
    m_archive_output_settings = archive_output_settings;
    m_archive_output_settings_isSet = true;
}

bool OAIOutputSettings::is_archive_output_settings_Set() const{
    return m_archive_output_settings_isSet;
}

bool OAIOutputSettings::is_archive_output_settings_Valid() const{
    return m_archive_output_settings_isValid;
}

OAIOutputSettings_FrameCaptureOutputSettings OAIOutputSettings::getFrameCaptureOutputSettings() const {
    return m_frame_capture_output_settings;
}
void OAIOutputSettings::setFrameCaptureOutputSettings(const OAIOutputSettings_FrameCaptureOutputSettings &frame_capture_output_settings) {
    m_frame_capture_output_settings = frame_capture_output_settings;
    m_frame_capture_output_settings_isSet = true;
}

bool OAIOutputSettings::is_frame_capture_output_settings_Set() const{
    return m_frame_capture_output_settings_isSet;
}

bool OAIOutputSettings::is_frame_capture_output_settings_Valid() const{
    return m_frame_capture_output_settings_isValid;
}

OAIOutputSettings_HlsOutputSettings OAIOutputSettings::getHlsOutputSettings() const {
    return m_hls_output_settings;
}
void OAIOutputSettings::setHlsOutputSettings(const OAIOutputSettings_HlsOutputSettings &hls_output_settings) {
    m_hls_output_settings = hls_output_settings;
    m_hls_output_settings_isSet = true;
}

bool OAIOutputSettings::is_hls_output_settings_Set() const{
    return m_hls_output_settings_isSet;
}

bool OAIOutputSettings::is_hls_output_settings_Valid() const{
    return m_hls_output_settings_isValid;
}

OAIObject OAIOutputSettings::getMediaPackageOutputSettings() const {
    return m_media_package_output_settings;
}
void OAIOutputSettings::setMediaPackageOutputSettings(const OAIObject &media_package_output_settings) {
    m_media_package_output_settings = media_package_output_settings;
    m_media_package_output_settings_isSet = true;
}

bool OAIOutputSettings::is_media_package_output_settings_Set() const{
    return m_media_package_output_settings_isSet;
}

bool OAIOutputSettings::is_media_package_output_settings_Valid() const{
    return m_media_package_output_settings_isValid;
}

OAIOutputSettings_MsSmoothOutputSettings OAIOutputSettings::getMsSmoothOutputSettings() const {
    return m_ms_smooth_output_settings;
}
void OAIOutputSettings::setMsSmoothOutputSettings(const OAIOutputSettings_MsSmoothOutputSettings &ms_smooth_output_settings) {
    m_ms_smooth_output_settings = ms_smooth_output_settings;
    m_ms_smooth_output_settings_isSet = true;
}

bool OAIOutputSettings::is_ms_smooth_output_settings_Set() const{
    return m_ms_smooth_output_settings_isSet;
}

bool OAIOutputSettings::is_ms_smooth_output_settings_Valid() const{
    return m_ms_smooth_output_settings_isValid;
}

OAIOutputSettings_MultiplexOutputSettings OAIOutputSettings::getMultiplexOutputSettings() const {
    return m_multiplex_output_settings;
}
void OAIOutputSettings::setMultiplexOutputSettings(const OAIOutputSettings_MultiplexOutputSettings &multiplex_output_settings) {
    m_multiplex_output_settings = multiplex_output_settings;
    m_multiplex_output_settings_isSet = true;
}

bool OAIOutputSettings::is_multiplex_output_settings_Set() const{
    return m_multiplex_output_settings_isSet;
}

bool OAIOutputSettings::is_multiplex_output_settings_Valid() const{
    return m_multiplex_output_settings_isValid;
}

OAIOutputSettings_RtmpOutputSettings OAIOutputSettings::getRtmpOutputSettings() const {
    return m_rtmp_output_settings;
}
void OAIOutputSettings::setRtmpOutputSettings(const OAIOutputSettings_RtmpOutputSettings &rtmp_output_settings) {
    m_rtmp_output_settings = rtmp_output_settings;
    m_rtmp_output_settings_isSet = true;
}

bool OAIOutputSettings::is_rtmp_output_settings_Set() const{
    return m_rtmp_output_settings_isSet;
}

bool OAIOutputSettings::is_rtmp_output_settings_Valid() const{
    return m_rtmp_output_settings_isValid;
}

OAIOutputSettings_UdpOutputSettings OAIOutputSettings::getUdpOutputSettings() const {
    return m_udp_output_settings;
}
void OAIOutputSettings::setUdpOutputSettings(const OAIOutputSettings_UdpOutputSettings &udp_output_settings) {
    m_udp_output_settings = udp_output_settings;
    m_udp_output_settings_isSet = true;
}

bool OAIOutputSettings::is_udp_output_settings_Set() const{
    return m_udp_output_settings_isSet;
}

bool OAIOutputSettings::is_udp_output_settings_Valid() const{
    return m_udp_output_settings_isValid;
}

bool OAIOutputSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_capture_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_package_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ms_smooth_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplex_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtmp_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
