/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDestination::OAIOutputDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDestination::OAIOutputDestination() {
    this->initializeModel();
}

OAIOutputDestination::~OAIOutputDestination() {}

void OAIOutputDestination::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_package_settings_isSet = false;
    m_media_package_settings_isValid = false;

    m_multiplex_settings_isSet = false;
    m_multiplex_settings_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIOutputDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDestination::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_media_package_settings_isValid = ::OpenAPI::fromJsonValue(m_media_package_settings, json[QString("MediaPackageSettings")]);
    m_media_package_settings_isSet = !json[QString("MediaPackageSettings")].isNull() && m_media_package_settings_isValid;

    m_multiplex_settings_isValid = ::OpenAPI::fromJsonValue(m_multiplex_settings, json[QString("MultiplexSettings")]);
    m_multiplex_settings_isSet = !json[QString("MultiplexSettings")].isNull() && m_multiplex_settings_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAIOutputDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_package_settings.isSet()) {
        obj.insert(QString("MediaPackageSettings"), ::OpenAPI::toJsonValue(m_media_package_settings));
    }
    if (m_multiplex_settings.isSet()) {
        obj.insert(QString("MultiplexSettings"), ::OpenAPI::toJsonValue(m_multiplex_settings));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

QString OAIOutputDestination::getId() const {
    return m_id;
}
void OAIOutputDestination::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOutputDestination::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOutputDestination::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIOutputDestination::getMediaPackageSettings() const {
    return m_media_package_settings;
}
void OAIOutputDestination::setMediaPackageSettings(const QList &media_package_settings) {
    m_media_package_settings = media_package_settings;
    m_media_package_settings_isSet = true;
}

bool OAIOutputDestination::is_media_package_settings_Set() const{
    return m_media_package_settings_isSet;
}

bool OAIOutputDestination::is_media_package_settings_Valid() const{
    return m_media_package_settings_isValid;
}

OAIOutputDestination_MultiplexSettings OAIOutputDestination::getMultiplexSettings() const {
    return m_multiplex_settings;
}
void OAIOutputDestination::setMultiplexSettings(const OAIOutputDestination_MultiplexSettings &multiplex_settings) {
    m_multiplex_settings = multiplex_settings;
    m_multiplex_settings_isSet = true;
}

bool OAIOutputDestination::is_multiplex_settings_Set() const{
    return m_multiplex_settings_isSet;
}

bool OAIOutputDestination::is_multiplex_settings_Valid() const{
    return m_multiplex_settings_isValid;
}

QList OAIOutputDestination::getSettings() const {
    return m_settings;
}
void OAIOutputDestination::setSettings(const QList &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIOutputDestination::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIOutputDestination::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIOutputDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_package_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplex_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
