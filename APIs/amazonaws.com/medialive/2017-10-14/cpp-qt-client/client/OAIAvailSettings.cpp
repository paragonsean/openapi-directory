/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailSettings::OAIAvailSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailSettings::OAIAvailSettings() {
    this->initializeModel();
}

OAIAvailSettings::~OAIAvailSettings() {}

void OAIAvailSettings::initializeModel() {

    m_esam_isSet = false;
    m_esam_isValid = false;

    m_scte35_splice_insert_isSet = false;
    m_scte35_splice_insert_isValid = false;

    m_scte35_time_signal_apos_isSet = false;
    m_scte35_time_signal_apos_isValid = false;
}

void OAIAvailSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailSettings::fromJsonObject(QJsonObject json) {

    m_esam_isValid = ::OpenAPI::fromJsonValue(m_esam, json[QString("Esam")]);
    m_esam_isSet = !json[QString("Esam")].isNull() && m_esam_isValid;

    m_scte35_splice_insert_isValid = ::OpenAPI::fromJsonValue(m_scte35_splice_insert, json[QString("Scte35SpliceInsert")]);
    m_scte35_splice_insert_isSet = !json[QString("Scte35SpliceInsert")].isNull() && m_scte35_splice_insert_isValid;

    m_scte35_time_signal_apos_isValid = ::OpenAPI::fromJsonValue(m_scte35_time_signal_apos, json[QString("Scte35TimeSignalApos")]);
    m_scte35_time_signal_apos_isSet = !json[QString("Scte35TimeSignalApos")].isNull() && m_scte35_time_signal_apos_isValid;
}

QString OAIAvailSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_esam.isSet()) {
        obj.insert(QString("Esam"), ::OpenAPI::toJsonValue(m_esam));
    }
    if (m_scte35_splice_insert.isSet()) {
        obj.insert(QString("Scte35SpliceInsert"), ::OpenAPI::toJsonValue(m_scte35_splice_insert));
    }
    if (m_scte35_time_signal_apos.isSet()) {
        obj.insert(QString("Scte35TimeSignalApos"), ::OpenAPI::toJsonValue(m_scte35_time_signal_apos));
    }
    return obj;
}

OAIAvailSettings_Esam OAIAvailSettings::getEsam() const {
    return m_esam;
}
void OAIAvailSettings::setEsam(const OAIAvailSettings_Esam &esam) {
    m_esam = esam;
    m_esam_isSet = true;
}

bool OAIAvailSettings::is_esam_Set() const{
    return m_esam_isSet;
}

bool OAIAvailSettings::is_esam_Valid() const{
    return m_esam_isValid;
}

OAIAvailSettings_Scte35SpliceInsert OAIAvailSettings::getScte35SpliceInsert() const {
    return m_scte35_splice_insert;
}
void OAIAvailSettings::setScte35SpliceInsert(const OAIAvailSettings_Scte35SpliceInsert &scte35_splice_insert) {
    m_scte35_splice_insert = scte35_splice_insert;
    m_scte35_splice_insert_isSet = true;
}

bool OAIAvailSettings::is_scte35_splice_insert_Set() const{
    return m_scte35_splice_insert_isSet;
}

bool OAIAvailSettings::is_scte35_splice_insert_Valid() const{
    return m_scte35_splice_insert_isValid;
}

OAIAvailSettings_Scte35TimeSignalApos OAIAvailSettings::getScte35TimeSignalApos() const {
    return m_scte35_time_signal_apos;
}
void OAIAvailSettings::setScte35TimeSignalApos(const OAIAvailSettings_Scte35TimeSignalApos &scte35_time_signal_apos) {
    m_scte35_time_signal_apos = scte35_time_signal_apos;
    m_scte35_time_signal_apos_isSet = true;
}

bool OAIAvailSettings::is_scte35_time_signal_apos_Set() const{
    return m_scte35_time_signal_apos_isSet;
}

bool OAIAvailSettings::is_scte35_time_signal_apos_Valid() const{
    return m_scte35_time_signal_apos_isValid;
}

bool OAIAvailSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_esam.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_splice_insert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_time_signal_apos.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
