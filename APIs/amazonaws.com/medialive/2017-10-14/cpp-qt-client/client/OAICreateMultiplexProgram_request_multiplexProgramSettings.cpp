/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMultiplexProgram_request_multiplexProgramSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMultiplexProgram_request_multiplexProgramSettings::OAICreateMultiplexProgram_request_multiplexProgramSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMultiplexProgram_request_multiplexProgramSettings::OAICreateMultiplexProgram_request_multiplexProgramSettings() {
    this->initializeModel();
}

OAICreateMultiplexProgram_request_multiplexProgramSettings::~OAICreateMultiplexProgram_request_multiplexProgramSettings() {}

void OAICreateMultiplexProgram_request_multiplexProgramSettings::initializeModel() {

    m_preferred_channel_pipeline_isSet = false;
    m_preferred_channel_pipeline_isValid = false;

    m_program_number_isSet = false;
    m_program_number_isValid = false;

    m_service_descriptor_isSet = false;
    m_service_descriptor_isValid = false;

    m_video_settings_isSet = false;
    m_video_settings_isValid = false;
}

void OAICreateMultiplexProgram_request_multiplexProgramSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMultiplexProgram_request_multiplexProgramSettings::fromJsonObject(QJsonObject json) {

    m_preferred_channel_pipeline_isValid = ::OpenAPI::fromJsonValue(m_preferred_channel_pipeline, json[QString("PreferredChannelPipeline")]);
    m_preferred_channel_pipeline_isSet = !json[QString("PreferredChannelPipeline")].isNull() && m_preferred_channel_pipeline_isValid;

    m_program_number_isValid = ::OpenAPI::fromJsonValue(m_program_number, json[QString("ProgramNumber")]);
    m_program_number_isSet = !json[QString("ProgramNumber")].isNull() && m_program_number_isValid;

    m_service_descriptor_isValid = ::OpenAPI::fromJsonValue(m_service_descriptor, json[QString("ServiceDescriptor")]);
    m_service_descriptor_isSet = !json[QString("ServiceDescriptor")].isNull() && m_service_descriptor_isValid;

    m_video_settings_isValid = ::OpenAPI::fromJsonValue(m_video_settings, json[QString("VideoSettings")]);
    m_video_settings_isSet = !json[QString("VideoSettings")].isNull() && m_video_settings_isValid;
}

QString OAICreateMultiplexProgram_request_multiplexProgramSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMultiplexProgram_request_multiplexProgramSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_preferred_channel_pipeline.isSet()) {
        obj.insert(QString("PreferredChannelPipeline"), ::OpenAPI::toJsonValue(m_preferred_channel_pipeline));
    }
    if (m_program_number_isSet) {
        obj.insert(QString("ProgramNumber"), ::OpenAPI::toJsonValue(m_program_number));
    }
    if (m_service_descriptor.isSet()) {
        obj.insert(QString("ServiceDescriptor"), ::OpenAPI::toJsonValue(m_service_descriptor));
    }
    if (m_video_settings.isSet()) {
        obj.insert(QString("VideoSettings"), ::OpenAPI::toJsonValue(m_video_settings));
    }
    return obj;
}

OAIPreferredChannelPipeline OAICreateMultiplexProgram_request_multiplexProgramSettings::getPreferredChannelPipeline() const {
    return m_preferred_channel_pipeline;
}
void OAICreateMultiplexProgram_request_multiplexProgramSettings::setPreferredChannelPipeline(const OAIPreferredChannelPipeline &preferred_channel_pipeline) {
    m_preferred_channel_pipeline = preferred_channel_pipeline;
    m_preferred_channel_pipeline_isSet = true;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_preferred_channel_pipeline_Set() const{
    return m_preferred_channel_pipeline_isSet;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_preferred_channel_pipeline_Valid() const{
    return m_preferred_channel_pipeline_isValid;
}

qint32 OAICreateMultiplexProgram_request_multiplexProgramSettings::getProgramNumber() const {
    return m_program_number;
}
void OAICreateMultiplexProgram_request_multiplexProgramSettings::setProgramNumber(const qint32 &program_number) {
    m_program_number = program_number;
    m_program_number_isSet = true;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_program_number_Set() const{
    return m_program_number_isSet;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_program_number_Valid() const{
    return m_program_number_isValid;
}

OAICreateMultiplexProgram_request_multiplexProgramSettings_ServiceDescriptor OAICreateMultiplexProgram_request_multiplexProgramSettings::getServiceDescriptor() const {
    return m_service_descriptor;
}
void OAICreateMultiplexProgram_request_multiplexProgramSettings::setServiceDescriptor(const OAICreateMultiplexProgram_request_multiplexProgramSettings_ServiceDescriptor &service_descriptor) {
    m_service_descriptor = service_descriptor;
    m_service_descriptor_isSet = true;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_service_descriptor_Set() const{
    return m_service_descriptor_isSet;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_service_descriptor_Valid() const{
    return m_service_descriptor_isValid;
}

OAICreateMultiplexProgram_request_multiplexProgramSettings_VideoSettings OAICreateMultiplexProgram_request_multiplexProgramSettings::getVideoSettings() const {
    return m_video_settings;
}
void OAICreateMultiplexProgram_request_multiplexProgramSettings::setVideoSettings(const OAICreateMultiplexProgram_request_multiplexProgramSettings_VideoSettings &video_settings) {
    m_video_settings = video_settings;
    m_video_settings_isSet = true;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_video_settings_Set() const{
    return m_video_settings_isSet;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::is_video_settings_Valid() const{
    return m_video_settings_isValid;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preferred_channel_pipeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMultiplexProgram_request_multiplexProgramSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
