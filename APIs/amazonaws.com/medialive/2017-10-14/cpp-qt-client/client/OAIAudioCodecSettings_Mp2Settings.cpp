/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioCodecSettings_Mp2Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioCodecSettings_Mp2Settings::OAIAudioCodecSettings_Mp2Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioCodecSettings_Mp2Settings::OAIAudioCodecSettings_Mp2Settings() {
    this->initializeModel();
}

OAIAudioCodecSettings_Mp2Settings::~OAIAudioCodecSettings_Mp2Settings() {}

void OAIAudioCodecSettings_Mp2Settings::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_coding_mode_isSet = false;
    m_coding_mode_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;
}

void OAIAudioCodecSettings_Mp2Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioCodecSettings_Mp2Settings::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_coding_mode_isValid = ::OpenAPI::fromJsonValue(m_coding_mode, json[QString("CodingMode")]);
    m_coding_mode_isSet = !json[QString("CodingMode")].isNull() && m_coding_mode_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("SampleRate")]);
    m_sample_rate_isSet = !json[QString("SampleRate")].isNull() && m_sample_rate_isValid;
}

QString OAIAudioCodecSettings_Mp2Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioCodecSettings_Mp2Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_coding_mode.isSet()) {
        obj.insert(QString("CodingMode"), ::OpenAPI::toJsonValue(m_coding_mode));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("SampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    return obj;
}

double OAIAudioCodecSettings_Mp2Settings::getBitrate() const {
    return m_bitrate;
}
void OAIAudioCodecSettings_Mp2Settings::setBitrate(const double &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIAudioCodecSettings_Mp2Settings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIAudioCodecSettings_Mp2Settings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIMp2CodingMode OAIAudioCodecSettings_Mp2Settings::getCodingMode() const {
    return m_coding_mode;
}
void OAIAudioCodecSettings_Mp2Settings::setCodingMode(const OAIMp2CodingMode &coding_mode) {
    m_coding_mode = coding_mode;
    m_coding_mode_isSet = true;
}

bool OAIAudioCodecSettings_Mp2Settings::is_coding_mode_Set() const{
    return m_coding_mode_isSet;
}

bool OAIAudioCodecSettings_Mp2Settings::is_coding_mode_Valid() const{
    return m_coding_mode_isValid;
}

double OAIAudioCodecSettings_Mp2Settings::getSampleRate() const {
    return m_sample_rate;
}
void OAIAudioCodecSettings_Mp2Settings::setSampleRate(const double &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAIAudioCodecSettings_Mp2Settings::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAIAudioCodecSettings_Mp2Settings::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

bool OAIAudioCodecSettings_Mp2Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coding_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioCodecSettings_Mp2Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
