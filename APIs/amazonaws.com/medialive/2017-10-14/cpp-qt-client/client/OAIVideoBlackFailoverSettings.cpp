/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoBlackFailoverSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoBlackFailoverSettings::OAIVideoBlackFailoverSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoBlackFailoverSettings::OAIVideoBlackFailoverSettings() {
    this->initializeModel();
}

OAIVideoBlackFailoverSettings::~OAIVideoBlackFailoverSettings() {}

void OAIVideoBlackFailoverSettings::initializeModel() {

    m_black_detect_threshold_isSet = false;
    m_black_detect_threshold_isValid = false;

    m_video_black_threshold_msec_isSet = false;
    m_video_black_threshold_msec_isValid = false;
}

void OAIVideoBlackFailoverSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoBlackFailoverSettings::fromJsonObject(QJsonObject json) {

    m_black_detect_threshold_isValid = ::OpenAPI::fromJsonValue(m_black_detect_threshold, json[QString("BlackDetectThreshold")]);
    m_black_detect_threshold_isSet = !json[QString("BlackDetectThreshold")].isNull() && m_black_detect_threshold_isValid;

    m_video_black_threshold_msec_isValid = ::OpenAPI::fromJsonValue(m_video_black_threshold_msec, json[QString("VideoBlackThresholdMsec")]);
    m_video_black_threshold_msec_isSet = !json[QString("VideoBlackThresholdMsec")].isNull() && m_video_black_threshold_msec_isValid;
}

QString OAIVideoBlackFailoverSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoBlackFailoverSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_black_detect_threshold_isSet) {
        obj.insert(QString("BlackDetectThreshold"), ::OpenAPI::toJsonValue(m_black_detect_threshold));
    }
    if (m_video_black_threshold_msec_isSet) {
        obj.insert(QString("VideoBlackThresholdMsec"), ::OpenAPI::toJsonValue(m_video_black_threshold_msec));
    }
    return obj;
}

double OAIVideoBlackFailoverSettings::getBlackDetectThreshold() const {
    return m_black_detect_threshold;
}
void OAIVideoBlackFailoverSettings::setBlackDetectThreshold(const double &black_detect_threshold) {
    m_black_detect_threshold = black_detect_threshold;
    m_black_detect_threshold_isSet = true;
}

bool OAIVideoBlackFailoverSettings::is_black_detect_threshold_Set() const{
    return m_black_detect_threshold_isSet;
}

bool OAIVideoBlackFailoverSettings::is_black_detect_threshold_Valid() const{
    return m_black_detect_threshold_isValid;
}

qint32 OAIVideoBlackFailoverSettings::getVideoBlackThresholdMsec() const {
    return m_video_black_threshold_msec;
}
void OAIVideoBlackFailoverSettings::setVideoBlackThresholdMsec(const qint32 &video_black_threshold_msec) {
    m_video_black_threshold_msec = video_black_threshold_msec;
    m_video_black_threshold_msec_isSet = true;
}

bool OAIVideoBlackFailoverSettings::is_video_black_threshold_msec_Set() const{
    return m_video_black_threshold_msec_isSet;
}

bool OAIVideoBlackFailoverSettings::is_video_black_threshold_msec_Valid() const{
    return m_video_black_threshold_msec_isValid;
}

bool OAIVideoBlackFailoverSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_black_detect_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_black_threshold_msec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoBlackFailoverSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
