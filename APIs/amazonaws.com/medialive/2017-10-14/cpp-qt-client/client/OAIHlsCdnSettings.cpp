/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsCdnSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsCdnSettings::OAIHlsCdnSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsCdnSettings::OAIHlsCdnSettings() {
    this->initializeModel();
}

OAIHlsCdnSettings::~OAIHlsCdnSettings() {}

void OAIHlsCdnSettings::initializeModel() {

    m_hls_akamai_settings_isSet = false;
    m_hls_akamai_settings_isValid = false;

    m_hls_basic_put_settings_isSet = false;
    m_hls_basic_put_settings_isValid = false;

    m_hls_media_store_settings_isSet = false;
    m_hls_media_store_settings_isValid = false;

    m_hls_s3_settings_isSet = false;
    m_hls_s3_settings_isValid = false;

    m_hls_webdav_settings_isSet = false;
    m_hls_webdav_settings_isValid = false;
}

void OAIHlsCdnSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsCdnSettings::fromJsonObject(QJsonObject json) {

    m_hls_akamai_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_akamai_settings, json[QString("HlsAkamaiSettings")]);
    m_hls_akamai_settings_isSet = !json[QString("HlsAkamaiSettings")].isNull() && m_hls_akamai_settings_isValid;

    m_hls_basic_put_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_basic_put_settings, json[QString("HlsBasicPutSettings")]);
    m_hls_basic_put_settings_isSet = !json[QString("HlsBasicPutSettings")].isNull() && m_hls_basic_put_settings_isValid;

    m_hls_media_store_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_media_store_settings, json[QString("HlsMediaStoreSettings")]);
    m_hls_media_store_settings_isSet = !json[QString("HlsMediaStoreSettings")].isNull() && m_hls_media_store_settings_isValid;

    m_hls_s3_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_s3_settings, json[QString("HlsS3Settings")]);
    m_hls_s3_settings_isSet = !json[QString("HlsS3Settings")].isNull() && m_hls_s3_settings_isValid;

    m_hls_webdav_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_webdav_settings, json[QString("HlsWebdavSettings")]);
    m_hls_webdav_settings_isSet = !json[QString("HlsWebdavSettings")].isNull() && m_hls_webdav_settings_isValid;
}

QString OAIHlsCdnSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsCdnSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_hls_akamai_settings.isSet()) {
        obj.insert(QString("HlsAkamaiSettings"), ::OpenAPI::toJsonValue(m_hls_akamai_settings));
    }
    if (m_hls_basic_put_settings.isSet()) {
        obj.insert(QString("HlsBasicPutSettings"), ::OpenAPI::toJsonValue(m_hls_basic_put_settings));
    }
    if (m_hls_media_store_settings.isSet()) {
        obj.insert(QString("HlsMediaStoreSettings"), ::OpenAPI::toJsonValue(m_hls_media_store_settings));
    }
    if (m_hls_s3_settings.isSet()) {
        obj.insert(QString("HlsS3Settings"), ::OpenAPI::toJsonValue(m_hls_s3_settings));
    }
    if (m_hls_webdav_settings.isSet()) {
        obj.insert(QString("HlsWebdavSettings"), ::OpenAPI::toJsonValue(m_hls_webdav_settings));
    }
    return obj;
}

OAIHlsCdnSettings_HlsAkamaiSettings OAIHlsCdnSettings::getHlsAkamaiSettings() const {
    return m_hls_akamai_settings;
}
void OAIHlsCdnSettings::setHlsAkamaiSettings(const OAIHlsCdnSettings_HlsAkamaiSettings &hls_akamai_settings) {
    m_hls_akamai_settings = hls_akamai_settings;
    m_hls_akamai_settings_isSet = true;
}

bool OAIHlsCdnSettings::is_hls_akamai_settings_Set() const{
    return m_hls_akamai_settings_isSet;
}

bool OAIHlsCdnSettings::is_hls_akamai_settings_Valid() const{
    return m_hls_akamai_settings_isValid;
}

OAIHlsCdnSettings_HlsBasicPutSettings OAIHlsCdnSettings::getHlsBasicPutSettings() const {
    return m_hls_basic_put_settings;
}
void OAIHlsCdnSettings::setHlsBasicPutSettings(const OAIHlsCdnSettings_HlsBasicPutSettings &hls_basic_put_settings) {
    m_hls_basic_put_settings = hls_basic_put_settings;
    m_hls_basic_put_settings_isSet = true;
}

bool OAIHlsCdnSettings::is_hls_basic_put_settings_Set() const{
    return m_hls_basic_put_settings_isSet;
}

bool OAIHlsCdnSettings::is_hls_basic_put_settings_Valid() const{
    return m_hls_basic_put_settings_isValid;
}

OAIHlsCdnSettings_HlsMediaStoreSettings OAIHlsCdnSettings::getHlsMediaStoreSettings() const {
    return m_hls_media_store_settings;
}
void OAIHlsCdnSettings::setHlsMediaStoreSettings(const OAIHlsCdnSettings_HlsMediaStoreSettings &hls_media_store_settings) {
    m_hls_media_store_settings = hls_media_store_settings;
    m_hls_media_store_settings_isSet = true;
}

bool OAIHlsCdnSettings::is_hls_media_store_settings_Set() const{
    return m_hls_media_store_settings_isSet;
}

bool OAIHlsCdnSettings::is_hls_media_store_settings_Valid() const{
    return m_hls_media_store_settings_isValid;
}

OAIHlsCdnSettings_HlsS3Settings OAIHlsCdnSettings::getHlsS3Settings() const {
    return m_hls_s3_settings;
}
void OAIHlsCdnSettings::setHlsS3Settings(const OAIHlsCdnSettings_HlsS3Settings &hls_s3_settings) {
    m_hls_s3_settings = hls_s3_settings;
    m_hls_s3_settings_isSet = true;
}

bool OAIHlsCdnSettings::is_hls_s3_settings_Set() const{
    return m_hls_s3_settings_isSet;
}

bool OAIHlsCdnSettings::is_hls_s3_settings_Valid() const{
    return m_hls_s3_settings_isValid;
}

OAIHlsCdnSettings_HlsWebdavSettings OAIHlsCdnSettings::getHlsWebdavSettings() const {
    return m_hls_webdav_settings;
}
void OAIHlsCdnSettings::setHlsWebdavSettings(const OAIHlsCdnSettings_HlsWebdavSettings &hls_webdav_settings) {
    m_hls_webdav_settings = hls_webdav_settings;
    m_hls_webdav_settings_isSet = true;
}

bool OAIHlsCdnSettings::is_hls_webdav_settings_Set() const{
    return m_hls_webdav_settings_isSet;
}

bool OAIHlsCdnSettings::is_hls_webdav_settings_Valid() const{
    return m_hls_webdav_settings_isValid;
}

bool OAIHlsCdnSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hls_akamai_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_basic_put_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_media_store_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_s3_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_webdav_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsCdnSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
