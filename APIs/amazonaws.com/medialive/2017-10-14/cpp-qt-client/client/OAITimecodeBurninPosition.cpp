/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimecodeBurninPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimecodeBurninPosition::OAITimecodeBurninPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimecodeBurninPosition::OAITimecodeBurninPosition() {
    this->initializeModel();
}

OAITimecodeBurninPosition::~OAITimecodeBurninPosition() {}

void OAITimecodeBurninPosition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITimecodeBurninPosition::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITimecodeBurninPosition::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BOTTOM_CENTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::BOTTOM_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOTTOM_LEFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::BOTTOM_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOTTOM_RIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::BOTTOM_RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIDDLE_CENTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::MIDDLE_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIDDLE_LEFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::MIDDLE_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIDDLE_RIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::MIDDLE_RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOP_CENTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::TOP_CENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOP_LEFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::TOP_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOP_RIGHT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimecodeBurninPosition::TOP_RIGHT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITimecodeBurninPosition::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITimecodeBurninPosition::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITimecodeBurninPosition::BOTTOM_CENTER:
            val = "BOTTOM_CENTER";
            break;
        case eOAITimecodeBurninPosition::BOTTOM_LEFT:
            val = "BOTTOM_LEFT";
            break;
        case eOAITimecodeBurninPosition::BOTTOM_RIGHT:
            val = "BOTTOM_RIGHT";
            break;
        case eOAITimecodeBurninPosition::MIDDLE_CENTER:
            val = "MIDDLE_CENTER";
            break;
        case eOAITimecodeBurninPosition::MIDDLE_LEFT:
            val = "MIDDLE_LEFT";
            break;
        case eOAITimecodeBurninPosition::MIDDLE_RIGHT:
            val = "MIDDLE_RIGHT";
            break;
        case eOAITimecodeBurninPosition::TOP_CENTER:
            val = "TOP_CENTER";
            break;
        case eOAITimecodeBurninPosition::TOP_LEFT:
            val = "TOP_LEFT";
            break;
        case eOAITimecodeBurninPosition::TOP_RIGHT:
            val = "TOP_RIGHT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITimecodeBurninPosition::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITimecodeBurninPosition::eOAITimecodeBurninPosition OAITimecodeBurninPosition::getValue() const {
    return m_value;
}

void OAITimecodeBurninPosition::setValue(const OAITimecodeBurninPosition::eOAITimecodeBurninPosition& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITimecodeBurninPosition::isSet() const {
    
    return m_value_isSet;
}

bool OAITimecodeBurninPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
