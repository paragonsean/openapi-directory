/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDeviceUhdSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDeviceUhdSettings::OAIInputDeviceUhdSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDeviceUhdSettings::OAIInputDeviceUhdSettings() {
    this->initializeModel();
}

OAIInputDeviceUhdSettings::~OAIInputDeviceUhdSettings() {}

void OAIInputDeviceUhdSettings::initializeModel() {

    m_active_input_isSet = false;
    m_active_input_isValid = false;

    m_configured_input_isSet = false;
    m_configured_input_isValid = false;

    m_device_state_isSet = false;
    m_device_state_isValid = false;

    m_framerate_isSet = false;
    m_framerate_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_scan_type_isSet = false;
    m_scan_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_latency_ms_isSet = false;
    m_latency_ms_isValid = false;
}

void OAIInputDeviceUhdSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDeviceUhdSettings::fromJsonObject(QJsonObject json) {

    m_active_input_isValid = ::OpenAPI::fromJsonValue(m_active_input, json[QString("ActiveInput")]);
    m_active_input_isSet = !json[QString("ActiveInput")].isNull() && m_active_input_isValid;

    m_configured_input_isValid = ::OpenAPI::fromJsonValue(m_configured_input, json[QString("ConfiguredInput")]);
    m_configured_input_isSet = !json[QString("ConfiguredInput")].isNull() && m_configured_input_isValid;

    m_device_state_isValid = ::OpenAPI::fromJsonValue(m_device_state, json[QString("DeviceState")]);
    m_device_state_isSet = !json[QString("DeviceState")].isNull() && m_device_state_isValid;

    m_framerate_isValid = ::OpenAPI::fromJsonValue(m_framerate, json[QString("Framerate")]);
    m_framerate_isSet = !json[QString("Framerate")].isNull() && m_framerate_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;

    m_scan_type_isValid = ::OpenAPI::fromJsonValue(m_scan_type, json[QString("ScanType")]);
    m_scan_type_isSet = !json[QString("ScanType")].isNull() && m_scan_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;

    m_latency_ms_isValid = ::OpenAPI::fromJsonValue(m_latency_ms, json[QString("LatencyMs")]);
    m_latency_ms_isSet = !json[QString("LatencyMs")].isNull() && m_latency_ms_isValid;
}

QString OAIInputDeviceUhdSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDeviceUhdSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_active_input.isSet()) {
        obj.insert(QString("ActiveInput"), ::OpenAPI::toJsonValue(m_active_input));
    }
    if (m_configured_input.isSet()) {
        obj.insert(QString("ConfiguredInput"), ::OpenAPI::toJsonValue(m_configured_input));
    }
    if (m_device_state.isSet()) {
        obj.insert(QString("DeviceState"), ::OpenAPI::toJsonValue(m_device_state));
    }
    if (m_framerate_isSet) {
        obj.insert(QString("Framerate"), ::OpenAPI::toJsonValue(m_framerate));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_scan_type.isSet()) {
        obj.insert(QString("ScanType"), ::OpenAPI::toJsonValue(m_scan_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_latency_ms_isSet) {
        obj.insert(QString("LatencyMs"), ::OpenAPI::toJsonValue(m_latency_ms));
    }
    return obj;
}

OAIInputDeviceActiveInput OAIInputDeviceUhdSettings::getActiveInput() const {
    return m_active_input;
}
void OAIInputDeviceUhdSettings::setActiveInput(const OAIInputDeviceActiveInput &active_input) {
    m_active_input = active_input;
    m_active_input_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_active_input_Set() const{
    return m_active_input_isSet;
}

bool OAIInputDeviceUhdSettings::is_active_input_Valid() const{
    return m_active_input_isValid;
}

OAIInputDeviceConfiguredInput OAIInputDeviceUhdSettings::getConfiguredInput() const {
    return m_configured_input;
}
void OAIInputDeviceUhdSettings::setConfiguredInput(const OAIInputDeviceConfiguredInput &configured_input) {
    m_configured_input = configured_input;
    m_configured_input_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_configured_input_Set() const{
    return m_configured_input_isSet;
}

bool OAIInputDeviceUhdSettings::is_configured_input_Valid() const{
    return m_configured_input_isValid;
}

OAIInputDeviceState OAIInputDeviceUhdSettings::getDeviceState() const {
    return m_device_state;
}
void OAIInputDeviceUhdSettings::setDeviceState(const OAIInputDeviceState &device_state) {
    m_device_state = device_state;
    m_device_state_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_device_state_Set() const{
    return m_device_state_isSet;
}

bool OAIInputDeviceUhdSettings::is_device_state_Valid() const{
    return m_device_state_isValid;
}

double OAIInputDeviceUhdSettings::getFramerate() const {
    return m_framerate;
}
void OAIInputDeviceUhdSettings::setFramerate(const double &framerate) {
    m_framerate = framerate;
    m_framerate_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_framerate_Set() const{
    return m_framerate_isSet;
}

bool OAIInputDeviceUhdSettings::is_framerate_Valid() const{
    return m_framerate_isValid;
}

qint32 OAIInputDeviceUhdSettings::getHeight() const {
    return m_height;
}
void OAIInputDeviceUhdSettings::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_height_Set() const{
    return m_height_isSet;
}

bool OAIInputDeviceUhdSettings::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIInputDeviceUhdSettings::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIInputDeviceUhdSettings::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIInputDeviceUhdSettings::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

OAIInputDeviceScanType OAIInputDeviceUhdSettings::getScanType() const {
    return m_scan_type;
}
void OAIInputDeviceUhdSettings::setScanType(const OAIInputDeviceScanType &scan_type) {
    m_scan_type = scan_type;
    m_scan_type_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_scan_type_Set() const{
    return m_scan_type_isSet;
}

bool OAIInputDeviceUhdSettings::is_scan_type_Valid() const{
    return m_scan_type_isValid;
}

qint32 OAIInputDeviceUhdSettings::getWidth() const {
    return m_width;
}
void OAIInputDeviceUhdSettings::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_width_Set() const{
    return m_width_isSet;
}

bool OAIInputDeviceUhdSettings::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAIInputDeviceUhdSettings::getLatencyMs() const {
    return m_latency_ms;
}
void OAIInputDeviceUhdSettings::setLatencyMs(const qint32 &latency_ms) {
    m_latency_ms = latency_ms;
    m_latency_ms_isSet = true;
}

bool OAIInputDeviceUhdSettings::is_latency_ms_Set() const{
    return m_latency_ms_isSet;
}

bool OAIInputDeviceUhdSettings::is_latency_ms_Valid() const{
    return m_latency_ms_isValid;
}

bool OAIInputDeviceUhdSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configured_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDeviceUhdSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
