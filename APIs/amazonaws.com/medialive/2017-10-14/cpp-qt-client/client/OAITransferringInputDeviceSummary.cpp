/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferringInputDeviceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferringInputDeviceSummary::OAITransferringInputDeviceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferringInputDeviceSummary::OAITransferringInputDeviceSummary() {
    this->initializeModel();
}

OAITransferringInputDeviceSummary::~OAITransferringInputDeviceSummary() {}

void OAITransferringInputDeviceSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_customer_id_isSet = false;
    m_target_customer_id_isValid = false;

    m_transfer_type_isSet = false;
    m_transfer_type_isValid = false;
}

void OAITransferringInputDeviceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferringInputDeviceSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_target_customer_id_isValid = ::OpenAPI::fromJsonValue(m_target_customer_id, json[QString("TargetCustomerId")]);
    m_target_customer_id_isSet = !json[QString("TargetCustomerId")].isNull() && m_target_customer_id_isValid;

    m_transfer_type_isValid = ::OpenAPI::fromJsonValue(m_transfer_type, json[QString("TransferType")]);
    m_transfer_type_isSet = !json[QString("TransferType")].isNull() && m_transfer_type_isValid;
}

QString OAITransferringInputDeviceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferringInputDeviceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_customer_id_isSet) {
        obj.insert(QString("TargetCustomerId"), ::OpenAPI::toJsonValue(m_target_customer_id));
    }
    if (m_transfer_type.isSet()) {
        obj.insert(QString("TransferType"), ::OpenAPI::toJsonValue(m_transfer_type));
    }
    return obj;
}

QString OAITransferringInputDeviceSummary::getId() const {
    return m_id;
}
void OAITransferringInputDeviceSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransferringInputDeviceSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransferringInputDeviceSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransferringInputDeviceSummary::getMessage() const {
    return m_message;
}
void OAITransferringInputDeviceSummary::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITransferringInputDeviceSummary::is_message_Set() const{
    return m_message_isSet;
}

bool OAITransferringInputDeviceSummary::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITransferringInputDeviceSummary::getTargetCustomerId() const {
    return m_target_customer_id;
}
void OAITransferringInputDeviceSummary::setTargetCustomerId(const QString &target_customer_id) {
    m_target_customer_id = target_customer_id;
    m_target_customer_id_isSet = true;
}

bool OAITransferringInputDeviceSummary::is_target_customer_id_Set() const{
    return m_target_customer_id_isSet;
}

bool OAITransferringInputDeviceSummary::is_target_customer_id_Valid() const{
    return m_target_customer_id_isValid;
}

OAIInputDeviceTransferType OAITransferringInputDeviceSummary::getTransferType() const {
    return m_transfer_type;
}
void OAITransferringInputDeviceSummary::setTransferType(const OAIInputDeviceTransferType &transfer_type) {
    m_transfer_type = transfer_type;
    m_transfer_type_isSet = true;
}

bool OAITransferringInputDeviceSummary::is_transfer_type_Set() const{
    return m_transfer_type_isSet;
}

bool OAITransferringInputDeviceSummary::is_transfer_type_Valid() const{
    return m_transfer_type_isValid;
}

bool OAITransferringInputDeviceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferringInputDeviceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
