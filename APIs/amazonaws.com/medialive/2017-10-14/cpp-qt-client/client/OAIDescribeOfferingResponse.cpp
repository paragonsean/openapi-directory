/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeOfferingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeOfferingResponse::OAIDescribeOfferingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeOfferingResponse::OAIDescribeOfferingResponse() {
    this->initializeModel();
}

OAIDescribeOfferingResponse::~OAIDescribeOfferingResponse() {}

void OAIDescribeOfferingResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duration_units_isSet = false;
    m_duration_units_isValid = false;

    m_fixed_price_isSet = false;
    m_fixed_price_isValid = false;

    m_offering_description_isSet = false;
    m_offering_description_isValid = false;

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_offering_type_isSet = false;
    m_offering_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_resource_specification_isSet = false;
    m_resource_specification_isValid = false;

    m_usage_price_isSet = false;
    m_usage_price_isValid = false;
}

void OAIDescribeOfferingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeOfferingResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_duration_units_isValid = ::OpenAPI::fromJsonValue(m_duration_units, json[QString("DurationUnits")]);
    m_duration_units_isSet = !json[QString("DurationUnits")].isNull() && m_duration_units_isValid;

    m_fixed_price_isValid = ::OpenAPI::fromJsonValue(m_fixed_price, json[QString("FixedPrice")]);
    m_fixed_price_isSet = !json[QString("FixedPrice")].isNull() && m_fixed_price_isValid;

    m_offering_description_isValid = ::OpenAPI::fromJsonValue(m_offering_description, json[QString("OfferingDescription")]);
    m_offering_description_isSet = !json[QString("OfferingDescription")].isNull() && m_offering_description_isValid;

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("OfferingId")]);
    m_offering_id_isSet = !json[QString("OfferingId")].isNull() && m_offering_id_isValid;

    m_offering_type_isValid = ::OpenAPI::fromJsonValue(m_offering_type, json[QString("OfferingType")]);
    m_offering_type_isSet = !json[QString("OfferingType")].isNull() && m_offering_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_resource_specification_isValid = ::OpenAPI::fromJsonValue(m_resource_specification, json[QString("ResourceSpecification")]);
    m_resource_specification_isSet = !json[QString("ResourceSpecification")].isNull() && m_resource_specification_isValid;

    m_usage_price_isValid = ::OpenAPI::fromJsonValue(m_usage_price, json[QString("UsagePrice")]);
    m_usage_price_isSet = !json[QString("UsagePrice")].isNull() && m_usage_price_isValid;
}

QString OAIDescribeOfferingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeOfferingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duration_units.isSet()) {
        obj.insert(QString("DurationUnits"), ::OpenAPI::toJsonValue(m_duration_units));
    }
    if (m_fixed_price_isSet) {
        obj.insert(QString("FixedPrice"), ::OpenAPI::toJsonValue(m_fixed_price));
    }
    if (m_offering_description_isSet) {
        obj.insert(QString("OfferingDescription"), ::OpenAPI::toJsonValue(m_offering_description));
    }
    if (m_offering_id_isSet) {
        obj.insert(QString("OfferingId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_offering_type.isSet()) {
        obj.insert(QString("OfferingType"), ::OpenAPI::toJsonValue(m_offering_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_resource_specification.isSet()) {
        obj.insert(QString("ResourceSpecification"), ::OpenAPI::toJsonValue(m_resource_specification));
    }
    if (m_usage_price_isSet) {
        obj.insert(QString("UsagePrice"), ::OpenAPI::toJsonValue(m_usage_price));
    }
    return obj;
}

QString OAIDescribeOfferingResponse::getArn() const {
    return m_arn;
}
void OAIDescribeOfferingResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeOfferingResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeOfferingResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeOfferingResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIDescribeOfferingResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIDescribeOfferingResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIDescribeOfferingResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIDescribeOfferingResponse::getDuration() const {
    return m_duration;
}
void OAIDescribeOfferingResponse::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDescribeOfferingResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDescribeOfferingResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIOfferingDurationUnits OAIDescribeOfferingResponse::getDurationUnits() const {
    return m_duration_units;
}
void OAIDescribeOfferingResponse::setDurationUnits(const OAIOfferingDurationUnits &duration_units) {
    m_duration_units = duration_units;
    m_duration_units_isSet = true;
}

bool OAIDescribeOfferingResponse::is_duration_units_Set() const{
    return m_duration_units_isSet;
}

bool OAIDescribeOfferingResponse::is_duration_units_Valid() const{
    return m_duration_units_isValid;
}

double OAIDescribeOfferingResponse::getFixedPrice() const {
    return m_fixed_price;
}
void OAIDescribeOfferingResponse::setFixedPrice(const double &fixed_price) {
    m_fixed_price = fixed_price;
    m_fixed_price_isSet = true;
}

bool OAIDescribeOfferingResponse::is_fixed_price_Set() const{
    return m_fixed_price_isSet;
}

bool OAIDescribeOfferingResponse::is_fixed_price_Valid() const{
    return m_fixed_price_isValid;
}

QString OAIDescribeOfferingResponse::getOfferingDescription() const {
    return m_offering_description;
}
void OAIDescribeOfferingResponse::setOfferingDescription(const QString &offering_description) {
    m_offering_description = offering_description;
    m_offering_description_isSet = true;
}

bool OAIDescribeOfferingResponse::is_offering_description_Set() const{
    return m_offering_description_isSet;
}

bool OAIDescribeOfferingResponse::is_offering_description_Valid() const{
    return m_offering_description_isValid;
}

QString OAIDescribeOfferingResponse::getOfferingId() const {
    return m_offering_id;
}
void OAIDescribeOfferingResponse::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAIDescribeOfferingResponse::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAIDescribeOfferingResponse::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

OAIOfferingType OAIDescribeOfferingResponse::getOfferingType() const {
    return m_offering_type;
}
void OAIDescribeOfferingResponse::setOfferingType(const OAIOfferingType &offering_type) {
    m_offering_type = offering_type;
    m_offering_type_isSet = true;
}

bool OAIDescribeOfferingResponse::is_offering_type_Set() const{
    return m_offering_type_isSet;
}

bool OAIDescribeOfferingResponse::is_offering_type_Valid() const{
    return m_offering_type_isValid;
}

QString OAIDescribeOfferingResponse::getRegion() const {
    return m_region;
}
void OAIDescribeOfferingResponse::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIDescribeOfferingResponse::is_region_Set() const{
    return m_region_isSet;
}

bool OAIDescribeOfferingResponse::is_region_Valid() const{
    return m_region_isValid;
}

OAIDeleteReservationResponse_ResourceSpecification OAIDescribeOfferingResponse::getResourceSpecification() const {
    return m_resource_specification;
}
void OAIDescribeOfferingResponse::setResourceSpecification(const OAIDeleteReservationResponse_ResourceSpecification &resource_specification) {
    m_resource_specification = resource_specification;
    m_resource_specification_isSet = true;
}

bool OAIDescribeOfferingResponse::is_resource_specification_Set() const{
    return m_resource_specification_isSet;
}

bool OAIDescribeOfferingResponse::is_resource_specification_Valid() const{
    return m_resource_specification_isValid;
}

double OAIDescribeOfferingResponse::getUsagePrice() const {
    return m_usage_price;
}
void OAIDescribeOfferingResponse::setUsagePrice(const double &usage_price) {
    m_usage_price = usage_price;
    m_usage_price_isSet = true;
}

bool OAIDescribeOfferingResponse::is_usage_price_Set() const{
    return m_usage_price_isSet;
}

bool OAIDescribeOfferingResponse::is_usage_price_Valid() const{
    return m_usage_price_isValid;
}

bool OAIDescribeOfferingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeOfferingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
