/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMsSmoothGroupSettings.h
 *
 * Ms Smooth Group Settings
 */

#ifndef OAIMsSmoothGroupSettings_H
#define OAIMsSmoothGroupSettings_H

#include <QJsonObject>

#include "OAIInputLossActionForMsSmoothOut.h"
#include "OAIMsSmoothGroupSettings_Destination.h"
#include "OAISmoothGroupAudioOnlyTimecodeControl.h"
#include "OAISmoothGroupCertificateMode.h"
#include "OAISmoothGroupEventIdMode.h"
#include "OAISmoothGroupEventStopBehavior.h"
#include "OAISmoothGroupSegmentationMode.h"
#include "OAISmoothGroupSparseTrackType.h"
#include "OAISmoothGroupStreamManifestBehavior.h"
#include "OAISmoothGroupTimestampOffsetMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMsSmoothGroupSettings_Destination;

class OAIMsSmoothGroupSettings : public OAIObject {
public:
    OAIMsSmoothGroupSettings();
    OAIMsSmoothGroupSettings(QString json);
    ~OAIMsSmoothGroupSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcquisitionPointId() const;
    void setAcquisitionPointId(const QString &acquisition_point_id);
    bool is_acquisition_point_id_Set() const;
    bool is_acquisition_point_id_Valid() const;

    OAISmoothGroupAudioOnlyTimecodeControl getAudioOnlyTimecodeControl() const;
    void setAudioOnlyTimecodeControl(const OAISmoothGroupAudioOnlyTimecodeControl &audio_only_timecode_control);
    bool is_audio_only_timecode_control_Set() const;
    bool is_audio_only_timecode_control_Valid() const;

    OAISmoothGroupCertificateMode getCertificateMode() const;
    void setCertificateMode(const OAISmoothGroupCertificateMode &certificate_mode);
    bool is_certificate_mode_Set() const;
    bool is_certificate_mode_Valid() const;

    qint32 getConnectionRetryInterval() const;
    void setConnectionRetryInterval(const qint32 &connection_retry_interval);
    bool is_connection_retry_interval_Set() const;
    bool is_connection_retry_interval_Valid() const;

    OAIMsSmoothGroupSettings_Destination getDestination() const;
    void setDestination(const OAIMsSmoothGroupSettings_Destination &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    OAISmoothGroupEventIdMode getEventIdMode() const;
    void setEventIdMode(const OAISmoothGroupEventIdMode &event_id_mode);
    bool is_event_id_mode_Set() const;
    bool is_event_id_mode_Valid() const;

    OAISmoothGroupEventStopBehavior getEventStopBehavior() const;
    void setEventStopBehavior(const OAISmoothGroupEventStopBehavior &event_stop_behavior);
    bool is_event_stop_behavior_Set() const;
    bool is_event_stop_behavior_Valid() const;

    qint32 getFilecacheDuration() const;
    void setFilecacheDuration(const qint32 &filecache_duration);
    bool is_filecache_duration_Set() const;
    bool is_filecache_duration_Valid() const;

    qint32 getFragmentLength() const;
    void setFragmentLength(const qint32 &fragment_length);
    bool is_fragment_length_Set() const;
    bool is_fragment_length_Valid() const;

    OAIInputLossActionForMsSmoothOut getInputLossAction() const;
    void setInputLossAction(const OAIInputLossActionForMsSmoothOut &input_loss_action);
    bool is_input_loss_action_Set() const;
    bool is_input_loss_action_Valid() const;

    qint32 getNumRetries() const;
    void setNumRetries(const qint32 &num_retries);
    bool is_num_retries_Set() const;
    bool is_num_retries_Valid() const;

    qint32 getRestartDelay() const;
    void setRestartDelay(const qint32 &restart_delay);
    bool is_restart_delay_Set() const;
    bool is_restart_delay_Valid() const;

    OAISmoothGroupSegmentationMode getSegmentationMode() const;
    void setSegmentationMode(const OAISmoothGroupSegmentationMode &segmentation_mode);
    bool is_segmentation_mode_Set() const;
    bool is_segmentation_mode_Valid() const;

    qint32 getSendDelayMs() const;
    void setSendDelayMs(const qint32 &send_delay_ms);
    bool is_send_delay_ms_Set() const;
    bool is_send_delay_ms_Valid() const;

    OAISmoothGroupSparseTrackType getSparseTrackType() const;
    void setSparseTrackType(const OAISmoothGroupSparseTrackType &sparse_track_type);
    bool is_sparse_track_type_Set() const;
    bool is_sparse_track_type_Valid() const;

    OAISmoothGroupStreamManifestBehavior getStreamManifestBehavior() const;
    void setStreamManifestBehavior(const OAISmoothGroupStreamManifestBehavior &stream_manifest_behavior);
    bool is_stream_manifest_behavior_Set() const;
    bool is_stream_manifest_behavior_Valid() const;

    QString getTimestampOffset() const;
    void setTimestampOffset(const QString &timestamp_offset);
    bool is_timestamp_offset_Set() const;
    bool is_timestamp_offset_Valid() const;

    OAISmoothGroupTimestampOffsetMode getTimestampOffsetMode() const;
    void setTimestampOffsetMode(const OAISmoothGroupTimestampOffsetMode &timestamp_offset_mode);
    bool is_timestamp_offset_mode_Set() const;
    bool is_timestamp_offset_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acquisition_point_id;
    bool m_acquisition_point_id_isSet;
    bool m_acquisition_point_id_isValid;

    OAISmoothGroupAudioOnlyTimecodeControl m_audio_only_timecode_control;
    bool m_audio_only_timecode_control_isSet;
    bool m_audio_only_timecode_control_isValid;

    OAISmoothGroupCertificateMode m_certificate_mode;
    bool m_certificate_mode_isSet;
    bool m_certificate_mode_isValid;

    qint32 m_connection_retry_interval;
    bool m_connection_retry_interval_isSet;
    bool m_connection_retry_interval_isValid;

    OAIMsSmoothGroupSettings_Destination m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    OAISmoothGroupEventIdMode m_event_id_mode;
    bool m_event_id_mode_isSet;
    bool m_event_id_mode_isValid;

    OAISmoothGroupEventStopBehavior m_event_stop_behavior;
    bool m_event_stop_behavior_isSet;
    bool m_event_stop_behavior_isValid;

    qint32 m_filecache_duration;
    bool m_filecache_duration_isSet;
    bool m_filecache_duration_isValid;

    qint32 m_fragment_length;
    bool m_fragment_length_isSet;
    bool m_fragment_length_isValid;

    OAIInputLossActionForMsSmoothOut m_input_loss_action;
    bool m_input_loss_action_isSet;
    bool m_input_loss_action_isValid;

    qint32 m_num_retries;
    bool m_num_retries_isSet;
    bool m_num_retries_isValid;

    qint32 m_restart_delay;
    bool m_restart_delay_isSet;
    bool m_restart_delay_isValid;

    OAISmoothGroupSegmentationMode m_segmentation_mode;
    bool m_segmentation_mode_isSet;
    bool m_segmentation_mode_isValid;

    qint32 m_send_delay_ms;
    bool m_send_delay_ms_isSet;
    bool m_send_delay_ms_isValid;

    OAISmoothGroupSparseTrackType m_sparse_track_type;
    bool m_sparse_track_type_isSet;
    bool m_sparse_track_type_isValid;

    OAISmoothGroupStreamManifestBehavior m_stream_manifest_behavior;
    bool m_stream_manifest_behavior_isSet;
    bool m_stream_manifest_behavior_isValid;

    QString m_timestamp_offset;
    bool m_timestamp_offset_isSet;
    bool m_timestamp_offset_isValid;

    OAISmoothGroupTimestampOffsetMode m_timestamp_offset_mode;
    bool m_timestamp_offset_mode_isSet;
    bool m_timestamp_offset_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMsSmoothGroupSettings)

#endif // OAIMsSmoothGroupSettings_H
