/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputGroupSettings_MsSmoothGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputGroupSettings_MsSmoothGroupSettings::OAIOutputGroupSettings_MsSmoothGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputGroupSettings_MsSmoothGroupSettings::OAIOutputGroupSettings_MsSmoothGroupSettings() {
    this->initializeModel();
}

OAIOutputGroupSettings_MsSmoothGroupSettings::~OAIOutputGroupSettings_MsSmoothGroupSettings() {}

void OAIOutputGroupSettings_MsSmoothGroupSettings::initializeModel() {

    m_acquisition_point_id_isSet = false;
    m_acquisition_point_id_isValid = false;

    m_audio_only_timecode_control_isSet = false;
    m_audio_only_timecode_control_isValid = false;

    m_certificate_mode_isSet = false;
    m_certificate_mode_isValid = false;

    m_connection_retry_interval_isSet = false;
    m_connection_retry_interval_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_id_mode_isSet = false;
    m_event_id_mode_isValid = false;

    m_event_stop_behavior_isSet = false;
    m_event_stop_behavior_isValid = false;

    m_filecache_duration_isSet = false;
    m_filecache_duration_isValid = false;

    m_fragment_length_isSet = false;
    m_fragment_length_isValid = false;

    m_input_loss_action_isSet = false;
    m_input_loss_action_isValid = false;

    m_num_retries_isSet = false;
    m_num_retries_isValid = false;

    m_restart_delay_isSet = false;
    m_restart_delay_isValid = false;

    m_segmentation_mode_isSet = false;
    m_segmentation_mode_isValid = false;

    m_send_delay_ms_isSet = false;
    m_send_delay_ms_isValid = false;

    m_sparse_track_type_isSet = false;
    m_sparse_track_type_isValid = false;

    m_stream_manifest_behavior_isSet = false;
    m_stream_manifest_behavior_isValid = false;

    m_timestamp_offset_isSet = false;
    m_timestamp_offset_isValid = false;

    m_timestamp_offset_mode_isSet = false;
    m_timestamp_offset_mode_isValid = false;
}

void OAIOutputGroupSettings_MsSmoothGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputGroupSettings_MsSmoothGroupSettings::fromJsonObject(QJsonObject json) {

    m_acquisition_point_id_isValid = ::OpenAPI::fromJsonValue(m_acquisition_point_id, json[QString("AcquisitionPointId")]);
    m_acquisition_point_id_isSet = !json[QString("AcquisitionPointId")].isNull() && m_acquisition_point_id_isValid;

    m_audio_only_timecode_control_isValid = ::OpenAPI::fromJsonValue(m_audio_only_timecode_control, json[QString("AudioOnlyTimecodeControl")]);
    m_audio_only_timecode_control_isSet = !json[QString("AudioOnlyTimecodeControl")].isNull() && m_audio_only_timecode_control_isValid;

    m_certificate_mode_isValid = ::OpenAPI::fromJsonValue(m_certificate_mode, json[QString("CertificateMode")]);
    m_certificate_mode_isSet = !json[QString("CertificateMode")].isNull() && m_certificate_mode_isValid;

    m_connection_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_connection_retry_interval, json[QString("ConnectionRetryInterval")]);
    m_connection_retry_interval_isSet = !json[QString("ConnectionRetryInterval")].isNull() && m_connection_retry_interval_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("EventId")]);
    m_event_id_isSet = !json[QString("EventId")].isNull() && m_event_id_isValid;

    m_event_id_mode_isValid = ::OpenAPI::fromJsonValue(m_event_id_mode, json[QString("EventIdMode")]);
    m_event_id_mode_isSet = !json[QString("EventIdMode")].isNull() && m_event_id_mode_isValid;

    m_event_stop_behavior_isValid = ::OpenAPI::fromJsonValue(m_event_stop_behavior, json[QString("EventStopBehavior")]);
    m_event_stop_behavior_isSet = !json[QString("EventStopBehavior")].isNull() && m_event_stop_behavior_isValid;

    m_filecache_duration_isValid = ::OpenAPI::fromJsonValue(m_filecache_duration, json[QString("FilecacheDuration")]);
    m_filecache_duration_isSet = !json[QString("FilecacheDuration")].isNull() && m_filecache_duration_isValid;

    m_fragment_length_isValid = ::OpenAPI::fromJsonValue(m_fragment_length, json[QString("FragmentLength")]);
    m_fragment_length_isSet = !json[QString("FragmentLength")].isNull() && m_fragment_length_isValid;

    m_input_loss_action_isValid = ::OpenAPI::fromJsonValue(m_input_loss_action, json[QString("InputLossAction")]);
    m_input_loss_action_isSet = !json[QString("InputLossAction")].isNull() && m_input_loss_action_isValid;

    m_num_retries_isValid = ::OpenAPI::fromJsonValue(m_num_retries, json[QString("NumRetries")]);
    m_num_retries_isSet = !json[QString("NumRetries")].isNull() && m_num_retries_isValid;

    m_restart_delay_isValid = ::OpenAPI::fromJsonValue(m_restart_delay, json[QString("RestartDelay")]);
    m_restart_delay_isSet = !json[QString("RestartDelay")].isNull() && m_restart_delay_isValid;

    m_segmentation_mode_isValid = ::OpenAPI::fromJsonValue(m_segmentation_mode, json[QString("SegmentationMode")]);
    m_segmentation_mode_isSet = !json[QString("SegmentationMode")].isNull() && m_segmentation_mode_isValid;

    m_send_delay_ms_isValid = ::OpenAPI::fromJsonValue(m_send_delay_ms, json[QString("SendDelayMs")]);
    m_send_delay_ms_isSet = !json[QString("SendDelayMs")].isNull() && m_send_delay_ms_isValid;

    m_sparse_track_type_isValid = ::OpenAPI::fromJsonValue(m_sparse_track_type, json[QString("SparseTrackType")]);
    m_sparse_track_type_isSet = !json[QString("SparseTrackType")].isNull() && m_sparse_track_type_isValid;

    m_stream_manifest_behavior_isValid = ::OpenAPI::fromJsonValue(m_stream_manifest_behavior, json[QString("StreamManifestBehavior")]);
    m_stream_manifest_behavior_isSet = !json[QString("StreamManifestBehavior")].isNull() && m_stream_manifest_behavior_isValid;

    m_timestamp_offset_isValid = ::OpenAPI::fromJsonValue(m_timestamp_offset, json[QString("TimestampOffset")]);
    m_timestamp_offset_isSet = !json[QString("TimestampOffset")].isNull() && m_timestamp_offset_isValid;

    m_timestamp_offset_mode_isValid = ::OpenAPI::fromJsonValue(m_timestamp_offset_mode, json[QString("TimestampOffsetMode")]);
    m_timestamp_offset_mode_isSet = !json[QString("TimestampOffsetMode")].isNull() && m_timestamp_offset_mode_isValid;
}

QString OAIOutputGroupSettings_MsSmoothGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputGroupSettings_MsSmoothGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition_point_id_isSet) {
        obj.insert(QString("AcquisitionPointId"), ::OpenAPI::toJsonValue(m_acquisition_point_id));
    }
    if (m_audio_only_timecode_control.isSet()) {
        obj.insert(QString("AudioOnlyTimecodeControl"), ::OpenAPI::toJsonValue(m_audio_only_timecode_control));
    }
    if (m_certificate_mode.isSet()) {
        obj.insert(QString("CertificateMode"), ::OpenAPI::toJsonValue(m_certificate_mode));
    }
    if (m_connection_retry_interval_isSet) {
        obj.insert(QString("ConnectionRetryInterval"), ::OpenAPI::toJsonValue(m_connection_retry_interval));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("EventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_id_mode.isSet()) {
        obj.insert(QString("EventIdMode"), ::OpenAPI::toJsonValue(m_event_id_mode));
    }
    if (m_event_stop_behavior.isSet()) {
        obj.insert(QString("EventStopBehavior"), ::OpenAPI::toJsonValue(m_event_stop_behavior));
    }
    if (m_filecache_duration_isSet) {
        obj.insert(QString("FilecacheDuration"), ::OpenAPI::toJsonValue(m_filecache_duration));
    }
    if (m_fragment_length_isSet) {
        obj.insert(QString("FragmentLength"), ::OpenAPI::toJsonValue(m_fragment_length));
    }
    if (m_input_loss_action.isSet()) {
        obj.insert(QString("InputLossAction"), ::OpenAPI::toJsonValue(m_input_loss_action));
    }
    if (m_num_retries_isSet) {
        obj.insert(QString("NumRetries"), ::OpenAPI::toJsonValue(m_num_retries));
    }
    if (m_restart_delay_isSet) {
        obj.insert(QString("RestartDelay"), ::OpenAPI::toJsonValue(m_restart_delay));
    }
    if (m_segmentation_mode.isSet()) {
        obj.insert(QString("SegmentationMode"), ::OpenAPI::toJsonValue(m_segmentation_mode));
    }
    if (m_send_delay_ms_isSet) {
        obj.insert(QString("SendDelayMs"), ::OpenAPI::toJsonValue(m_send_delay_ms));
    }
    if (m_sparse_track_type.isSet()) {
        obj.insert(QString("SparseTrackType"), ::OpenAPI::toJsonValue(m_sparse_track_type));
    }
    if (m_stream_manifest_behavior.isSet()) {
        obj.insert(QString("StreamManifestBehavior"), ::OpenAPI::toJsonValue(m_stream_manifest_behavior));
    }
    if (m_timestamp_offset_isSet) {
        obj.insert(QString("TimestampOffset"), ::OpenAPI::toJsonValue(m_timestamp_offset));
    }
    if (m_timestamp_offset_mode.isSet()) {
        obj.insert(QString("TimestampOffsetMode"), ::OpenAPI::toJsonValue(m_timestamp_offset_mode));
    }
    return obj;
}

QString OAIOutputGroupSettings_MsSmoothGroupSettings::getAcquisitionPointId() const {
    return m_acquisition_point_id;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setAcquisitionPointId(const QString &acquisition_point_id) {
    m_acquisition_point_id = acquisition_point_id;
    m_acquisition_point_id_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_acquisition_point_id_Set() const{
    return m_acquisition_point_id_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_acquisition_point_id_Valid() const{
    return m_acquisition_point_id_isValid;
}

OAISmoothGroupAudioOnlyTimecodeControl OAIOutputGroupSettings_MsSmoothGroupSettings::getAudioOnlyTimecodeControl() const {
    return m_audio_only_timecode_control;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setAudioOnlyTimecodeControl(const OAISmoothGroupAudioOnlyTimecodeControl &audio_only_timecode_control) {
    m_audio_only_timecode_control = audio_only_timecode_control;
    m_audio_only_timecode_control_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_audio_only_timecode_control_Set() const{
    return m_audio_only_timecode_control_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_audio_only_timecode_control_Valid() const{
    return m_audio_only_timecode_control_isValid;
}

OAISmoothGroupCertificateMode OAIOutputGroupSettings_MsSmoothGroupSettings::getCertificateMode() const {
    return m_certificate_mode;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setCertificateMode(const OAISmoothGroupCertificateMode &certificate_mode) {
    m_certificate_mode = certificate_mode;
    m_certificate_mode_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_certificate_mode_Set() const{
    return m_certificate_mode_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_certificate_mode_Valid() const{
    return m_certificate_mode_isValid;
}

qint32 OAIOutputGroupSettings_MsSmoothGroupSettings::getConnectionRetryInterval() const {
    return m_connection_retry_interval;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setConnectionRetryInterval(const qint32 &connection_retry_interval) {
    m_connection_retry_interval = connection_retry_interval;
    m_connection_retry_interval_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_connection_retry_interval_Set() const{
    return m_connection_retry_interval_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_connection_retry_interval_Valid() const{
    return m_connection_retry_interval_isValid;
}

OAIMsSmoothGroupSettings_Destination OAIOutputGroupSettings_MsSmoothGroupSettings::getDestination() const {
    return m_destination;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setDestination(const OAIMsSmoothGroupSettings_Destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIOutputGroupSettings_MsSmoothGroupSettings::getEventId() const {
    return m_event_id;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAISmoothGroupEventIdMode OAIOutputGroupSettings_MsSmoothGroupSettings::getEventIdMode() const {
    return m_event_id_mode;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setEventIdMode(const OAISmoothGroupEventIdMode &event_id_mode) {
    m_event_id_mode = event_id_mode;
    m_event_id_mode_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_event_id_mode_Set() const{
    return m_event_id_mode_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_event_id_mode_Valid() const{
    return m_event_id_mode_isValid;
}

OAISmoothGroupEventStopBehavior OAIOutputGroupSettings_MsSmoothGroupSettings::getEventStopBehavior() const {
    return m_event_stop_behavior;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setEventStopBehavior(const OAISmoothGroupEventStopBehavior &event_stop_behavior) {
    m_event_stop_behavior = event_stop_behavior;
    m_event_stop_behavior_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_event_stop_behavior_Set() const{
    return m_event_stop_behavior_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_event_stop_behavior_Valid() const{
    return m_event_stop_behavior_isValid;
}

qint32 OAIOutputGroupSettings_MsSmoothGroupSettings::getFilecacheDuration() const {
    return m_filecache_duration;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setFilecacheDuration(const qint32 &filecache_duration) {
    m_filecache_duration = filecache_duration;
    m_filecache_duration_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_filecache_duration_Set() const{
    return m_filecache_duration_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_filecache_duration_Valid() const{
    return m_filecache_duration_isValid;
}

qint32 OAIOutputGroupSettings_MsSmoothGroupSettings::getFragmentLength() const {
    return m_fragment_length;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setFragmentLength(const qint32 &fragment_length) {
    m_fragment_length = fragment_length;
    m_fragment_length_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_fragment_length_Set() const{
    return m_fragment_length_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_fragment_length_Valid() const{
    return m_fragment_length_isValid;
}

OAIInputLossActionForMsSmoothOut OAIOutputGroupSettings_MsSmoothGroupSettings::getInputLossAction() const {
    return m_input_loss_action;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setInputLossAction(const OAIInputLossActionForMsSmoothOut &input_loss_action) {
    m_input_loss_action = input_loss_action;
    m_input_loss_action_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_input_loss_action_Set() const{
    return m_input_loss_action_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_input_loss_action_Valid() const{
    return m_input_loss_action_isValid;
}

qint32 OAIOutputGroupSettings_MsSmoothGroupSettings::getNumRetries() const {
    return m_num_retries;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setNumRetries(const qint32 &num_retries) {
    m_num_retries = num_retries;
    m_num_retries_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_num_retries_Set() const{
    return m_num_retries_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_num_retries_Valid() const{
    return m_num_retries_isValid;
}

qint32 OAIOutputGroupSettings_MsSmoothGroupSettings::getRestartDelay() const {
    return m_restart_delay;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setRestartDelay(const qint32 &restart_delay) {
    m_restart_delay = restart_delay;
    m_restart_delay_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_restart_delay_Set() const{
    return m_restart_delay_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_restart_delay_Valid() const{
    return m_restart_delay_isValid;
}

OAISmoothGroupSegmentationMode OAIOutputGroupSettings_MsSmoothGroupSettings::getSegmentationMode() const {
    return m_segmentation_mode;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setSegmentationMode(const OAISmoothGroupSegmentationMode &segmentation_mode) {
    m_segmentation_mode = segmentation_mode;
    m_segmentation_mode_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_segmentation_mode_Set() const{
    return m_segmentation_mode_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_segmentation_mode_Valid() const{
    return m_segmentation_mode_isValid;
}

qint32 OAIOutputGroupSettings_MsSmoothGroupSettings::getSendDelayMs() const {
    return m_send_delay_ms;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setSendDelayMs(const qint32 &send_delay_ms) {
    m_send_delay_ms = send_delay_ms;
    m_send_delay_ms_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_send_delay_ms_Set() const{
    return m_send_delay_ms_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_send_delay_ms_Valid() const{
    return m_send_delay_ms_isValid;
}

OAISmoothGroupSparseTrackType OAIOutputGroupSettings_MsSmoothGroupSettings::getSparseTrackType() const {
    return m_sparse_track_type;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setSparseTrackType(const OAISmoothGroupSparseTrackType &sparse_track_type) {
    m_sparse_track_type = sparse_track_type;
    m_sparse_track_type_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_sparse_track_type_Set() const{
    return m_sparse_track_type_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_sparse_track_type_Valid() const{
    return m_sparse_track_type_isValid;
}

OAISmoothGroupStreamManifestBehavior OAIOutputGroupSettings_MsSmoothGroupSettings::getStreamManifestBehavior() const {
    return m_stream_manifest_behavior;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setStreamManifestBehavior(const OAISmoothGroupStreamManifestBehavior &stream_manifest_behavior) {
    m_stream_manifest_behavior = stream_manifest_behavior;
    m_stream_manifest_behavior_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_stream_manifest_behavior_Set() const{
    return m_stream_manifest_behavior_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_stream_manifest_behavior_Valid() const{
    return m_stream_manifest_behavior_isValid;
}

QString OAIOutputGroupSettings_MsSmoothGroupSettings::getTimestampOffset() const {
    return m_timestamp_offset;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setTimestampOffset(const QString &timestamp_offset) {
    m_timestamp_offset = timestamp_offset;
    m_timestamp_offset_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_timestamp_offset_Set() const{
    return m_timestamp_offset_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_timestamp_offset_Valid() const{
    return m_timestamp_offset_isValid;
}

OAISmoothGroupTimestampOffsetMode OAIOutputGroupSettings_MsSmoothGroupSettings::getTimestampOffsetMode() const {
    return m_timestamp_offset_mode;
}
void OAIOutputGroupSettings_MsSmoothGroupSettings::setTimestampOffsetMode(const OAISmoothGroupTimestampOffsetMode &timestamp_offset_mode) {
    m_timestamp_offset_mode = timestamp_offset_mode;
    m_timestamp_offset_mode_isSet = true;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_timestamp_offset_mode_Set() const{
    return m_timestamp_offset_mode_isSet;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::is_timestamp_offset_mode_Valid() const{
    return m_timestamp_offset_mode_isValid;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_only_timecode_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_stop_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filecache_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_delay_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sparse_track_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_manifest_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_offset_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputGroupSettings_MsSmoothGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && true;
}

} // namespace OpenAPI
