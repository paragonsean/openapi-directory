/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoDescription::OAIVideoDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoDescription::OAIVideoDescription() {
    this->initializeModel();
}

OAIVideoDescription::~OAIVideoDescription() {}

void OAIVideoDescription::initializeModel() {

    m_codec_settings_isSet = false;
    m_codec_settings_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_respond_to_afd_isSet = false;
    m_respond_to_afd_isValid = false;

    m_scaling_behavior_isSet = false;
    m_scaling_behavior_isValid = false;

    m_sharpness_isSet = false;
    m_sharpness_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIVideoDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoDescription::fromJsonObject(QJsonObject json) {

    m_codec_settings_isValid = ::OpenAPI::fromJsonValue(m_codec_settings, json[QString("CodecSettings")]);
    m_codec_settings_isSet = !json[QString("CodecSettings")].isNull() && m_codec_settings_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_respond_to_afd_isValid = ::OpenAPI::fromJsonValue(m_respond_to_afd, json[QString("RespondToAfd")]);
    m_respond_to_afd_isSet = !json[QString("RespondToAfd")].isNull() && m_respond_to_afd_isValid;

    m_scaling_behavior_isValid = ::OpenAPI::fromJsonValue(m_scaling_behavior, json[QString("ScalingBehavior")]);
    m_scaling_behavior_isSet = !json[QString("ScalingBehavior")].isNull() && m_scaling_behavior_isValid;

    m_sharpness_isValid = ::OpenAPI::fromJsonValue(m_sharpness, json[QString("Sharpness")]);
    m_sharpness_isSet = !json[QString("Sharpness")].isNull() && m_sharpness_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAIVideoDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_codec_settings.isSet()) {
        obj.insert(QString("CodecSettings"), ::OpenAPI::toJsonValue(m_codec_settings));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_respond_to_afd.isSet()) {
        obj.insert(QString("RespondToAfd"), ::OpenAPI::toJsonValue(m_respond_to_afd));
    }
    if (m_scaling_behavior.isSet()) {
        obj.insert(QString("ScalingBehavior"), ::OpenAPI::toJsonValue(m_scaling_behavior));
    }
    if (m_sharpness_isSet) {
        obj.insert(QString("Sharpness"), ::OpenAPI::toJsonValue(m_sharpness));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

OAIVideoDescription_CodecSettings OAIVideoDescription::getCodecSettings() const {
    return m_codec_settings;
}
void OAIVideoDescription::setCodecSettings(const OAIVideoDescription_CodecSettings &codec_settings) {
    m_codec_settings = codec_settings;
    m_codec_settings_isSet = true;
}

bool OAIVideoDescription::is_codec_settings_Set() const{
    return m_codec_settings_isSet;
}

bool OAIVideoDescription::is_codec_settings_Valid() const{
    return m_codec_settings_isValid;
}

qint32 OAIVideoDescription::getHeight() const {
    return m_height;
}
void OAIVideoDescription::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideoDescription::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideoDescription::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIVideoDescription::getName() const {
    return m_name;
}
void OAIVideoDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVideoDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVideoDescription::is_name_Valid() const{
    return m_name_isValid;
}

OAIVideoDescriptionRespondToAfd OAIVideoDescription::getRespondToAfd() const {
    return m_respond_to_afd;
}
void OAIVideoDescription::setRespondToAfd(const OAIVideoDescriptionRespondToAfd &respond_to_afd) {
    m_respond_to_afd = respond_to_afd;
    m_respond_to_afd_isSet = true;
}

bool OAIVideoDescription::is_respond_to_afd_Set() const{
    return m_respond_to_afd_isSet;
}

bool OAIVideoDescription::is_respond_to_afd_Valid() const{
    return m_respond_to_afd_isValid;
}

OAIVideoDescriptionScalingBehavior OAIVideoDescription::getScalingBehavior() const {
    return m_scaling_behavior;
}
void OAIVideoDescription::setScalingBehavior(const OAIVideoDescriptionScalingBehavior &scaling_behavior) {
    m_scaling_behavior = scaling_behavior;
    m_scaling_behavior_isSet = true;
}

bool OAIVideoDescription::is_scaling_behavior_Set() const{
    return m_scaling_behavior_isSet;
}

bool OAIVideoDescription::is_scaling_behavior_Valid() const{
    return m_scaling_behavior_isValid;
}

qint32 OAIVideoDescription::getSharpness() const {
    return m_sharpness;
}
void OAIVideoDescription::setSharpness(const qint32 &sharpness) {
    m_sharpness = sharpness;
    m_sharpness_isSet = true;
}

bool OAIVideoDescription::is_sharpness_Set() const{
    return m_sharpness_isSet;
}

bool OAIVideoDescription::is_sharpness_Valid() const{
    return m_sharpness_isValid;
}

qint32 OAIVideoDescription::getWidth() const {
    return m_width;
}
void OAIVideoDescription::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideoDescription::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideoDescription::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIVideoDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_codec_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respond_to_afd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharpness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
