/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioOnlyHlsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioOnlyHlsSettings::OAIAudioOnlyHlsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioOnlyHlsSettings::OAIAudioOnlyHlsSettings() {
    this->initializeModel();
}

OAIAudioOnlyHlsSettings::~OAIAudioOnlyHlsSettings() {}

void OAIAudioOnlyHlsSettings::initializeModel() {

    m_audio_group_id_isSet = false;
    m_audio_group_id_isValid = false;

    m_audio_only_image_isSet = false;
    m_audio_only_image_isValid = false;

    m_audio_track_type_isSet = false;
    m_audio_track_type_isValid = false;

    m_segment_type_isSet = false;
    m_segment_type_isValid = false;
}

void OAIAudioOnlyHlsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioOnlyHlsSettings::fromJsonObject(QJsonObject json) {

    m_audio_group_id_isValid = ::OpenAPI::fromJsonValue(m_audio_group_id, json[QString("AudioGroupId")]);
    m_audio_group_id_isSet = !json[QString("AudioGroupId")].isNull() && m_audio_group_id_isValid;

    m_audio_only_image_isValid = ::OpenAPI::fromJsonValue(m_audio_only_image, json[QString("AudioOnlyImage")]);
    m_audio_only_image_isSet = !json[QString("AudioOnlyImage")].isNull() && m_audio_only_image_isValid;

    m_audio_track_type_isValid = ::OpenAPI::fromJsonValue(m_audio_track_type, json[QString("AudioTrackType")]);
    m_audio_track_type_isSet = !json[QString("AudioTrackType")].isNull() && m_audio_track_type_isValid;

    m_segment_type_isValid = ::OpenAPI::fromJsonValue(m_segment_type, json[QString("SegmentType")]);
    m_segment_type_isSet = !json[QString("SegmentType")].isNull() && m_segment_type_isValid;
}

QString OAIAudioOnlyHlsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioOnlyHlsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_group_id_isSet) {
        obj.insert(QString("AudioGroupId"), ::OpenAPI::toJsonValue(m_audio_group_id));
    }
    if (m_audio_only_image.isSet()) {
        obj.insert(QString("AudioOnlyImage"), ::OpenAPI::toJsonValue(m_audio_only_image));
    }
    if (m_audio_track_type.isSet()) {
        obj.insert(QString("AudioTrackType"), ::OpenAPI::toJsonValue(m_audio_track_type));
    }
    if (m_segment_type.isSet()) {
        obj.insert(QString("SegmentType"), ::OpenAPI::toJsonValue(m_segment_type));
    }
    return obj;
}

QString OAIAudioOnlyHlsSettings::getAudioGroupId() const {
    return m_audio_group_id;
}
void OAIAudioOnlyHlsSettings::setAudioGroupId(const QString &audio_group_id) {
    m_audio_group_id = audio_group_id;
    m_audio_group_id_isSet = true;
}

bool OAIAudioOnlyHlsSettings::is_audio_group_id_Set() const{
    return m_audio_group_id_isSet;
}

bool OAIAudioOnlyHlsSettings::is_audio_group_id_Valid() const{
    return m_audio_group_id_isValid;
}

OAIAudioOnlyHlsSettings_AudioOnlyImage OAIAudioOnlyHlsSettings::getAudioOnlyImage() const {
    return m_audio_only_image;
}
void OAIAudioOnlyHlsSettings::setAudioOnlyImage(const OAIAudioOnlyHlsSettings_AudioOnlyImage &audio_only_image) {
    m_audio_only_image = audio_only_image;
    m_audio_only_image_isSet = true;
}

bool OAIAudioOnlyHlsSettings::is_audio_only_image_Set() const{
    return m_audio_only_image_isSet;
}

bool OAIAudioOnlyHlsSettings::is_audio_only_image_Valid() const{
    return m_audio_only_image_isValid;
}

OAIAudioOnlyHlsTrackType OAIAudioOnlyHlsSettings::getAudioTrackType() const {
    return m_audio_track_type;
}
void OAIAudioOnlyHlsSettings::setAudioTrackType(const OAIAudioOnlyHlsTrackType &audio_track_type) {
    m_audio_track_type = audio_track_type;
    m_audio_track_type_isSet = true;
}

bool OAIAudioOnlyHlsSettings::is_audio_track_type_Set() const{
    return m_audio_track_type_isSet;
}

bool OAIAudioOnlyHlsSettings::is_audio_track_type_Valid() const{
    return m_audio_track_type_isValid;
}

OAIAudioOnlyHlsSegmentType OAIAudioOnlyHlsSettings::getSegmentType() const {
    return m_segment_type;
}
void OAIAudioOnlyHlsSettings::setSegmentType(const OAIAudioOnlyHlsSegmentType &segment_type) {
    m_segment_type = segment_type;
    m_segment_type_isSet = true;
}

bool OAIAudioOnlyHlsSettings::is_segment_type_Set() const{
    return m_segment_type_isSet;
}

bool OAIAudioOnlyHlsSettings::is_segment_type_Valid() const{
    return m_segment_type_isValid;
}

bool OAIAudioOnlyHlsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_only_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_track_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioOnlyHlsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
