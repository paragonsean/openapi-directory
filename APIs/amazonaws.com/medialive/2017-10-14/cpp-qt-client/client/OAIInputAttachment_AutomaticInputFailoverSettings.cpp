/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputAttachment_AutomaticInputFailoverSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputAttachment_AutomaticInputFailoverSettings::OAIInputAttachment_AutomaticInputFailoverSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputAttachment_AutomaticInputFailoverSettings::OAIInputAttachment_AutomaticInputFailoverSettings() {
    this->initializeModel();
}

OAIInputAttachment_AutomaticInputFailoverSettings::~OAIInputAttachment_AutomaticInputFailoverSettings() {}

void OAIInputAttachment_AutomaticInputFailoverSettings::initializeModel() {

    m_error_clear_time_msec_isSet = false;
    m_error_clear_time_msec_isValid = false;

    m_failover_conditions_isSet = false;
    m_failover_conditions_isValid = false;

    m_input_preference_isSet = false;
    m_input_preference_isValid = false;

    m_secondary_input_id_isSet = false;
    m_secondary_input_id_isValid = false;
}

void OAIInputAttachment_AutomaticInputFailoverSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputAttachment_AutomaticInputFailoverSettings::fromJsonObject(QJsonObject json) {

    m_error_clear_time_msec_isValid = ::OpenAPI::fromJsonValue(m_error_clear_time_msec, json[QString("ErrorClearTimeMsec")]);
    m_error_clear_time_msec_isSet = !json[QString("ErrorClearTimeMsec")].isNull() && m_error_clear_time_msec_isValid;

    m_failover_conditions_isValid = ::OpenAPI::fromJsonValue(m_failover_conditions, json[QString("FailoverConditions")]);
    m_failover_conditions_isSet = !json[QString("FailoverConditions")].isNull() && m_failover_conditions_isValid;

    m_input_preference_isValid = ::OpenAPI::fromJsonValue(m_input_preference, json[QString("InputPreference")]);
    m_input_preference_isSet = !json[QString("InputPreference")].isNull() && m_input_preference_isValid;

    m_secondary_input_id_isValid = ::OpenAPI::fromJsonValue(m_secondary_input_id, json[QString("SecondaryInputId")]);
    m_secondary_input_id_isSet = !json[QString("SecondaryInputId")].isNull() && m_secondary_input_id_isValid;
}

QString OAIInputAttachment_AutomaticInputFailoverSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputAttachment_AutomaticInputFailoverSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_error_clear_time_msec_isSet) {
        obj.insert(QString("ErrorClearTimeMsec"), ::OpenAPI::toJsonValue(m_error_clear_time_msec));
    }
    if (m_failover_conditions.isSet()) {
        obj.insert(QString("FailoverConditions"), ::OpenAPI::toJsonValue(m_failover_conditions));
    }
    if (m_input_preference.isSet()) {
        obj.insert(QString("InputPreference"), ::OpenAPI::toJsonValue(m_input_preference));
    }
    if (m_secondary_input_id_isSet) {
        obj.insert(QString("SecondaryInputId"), ::OpenAPI::toJsonValue(m_secondary_input_id));
    }
    return obj;
}

qint32 OAIInputAttachment_AutomaticInputFailoverSettings::getErrorClearTimeMsec() const {
    return m_error_clear_time_msec;
}
void OAIInputAttachment_AutomaticInputFailoverSettings::setErrorClearTimeMsec(const qint32 &error_clear_time_msec) {
    m_error_clear_time_msec = error_clear_time_msec;
    m_error_clear_time_msec_isSet = true;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_error_clear_time_msec_Set() const{
    return m_error_clear_time_msec_isSet;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_error_clear_time_msec_Valid() const{
    return m_error_clear_time_msec_isValid;
}

QList OAIInputAttachment_AutomaticInputFailoverSettings::getFailoverConditions() const {
    return m_failover_conditions;
}
void OAIInputAttachment_AutomaticInputFailoverSettings::setFailoverConditions(const QList &failover_conditions) {
    m_failover_conditions = failover_conditions;
    m_failover_conditions_isSet = true;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_failover_conditions_Set() const{
    return m_failover_conditions_isSet;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_failover_conditions_Valid() const{
    return m_failover_conditions_isValid;
}

OAIInputPreference OAIInputAttachment_AutomaticInputFailoverSettings::getInputPreference() const {
    return m_input_preference;
}
void OAIInputAttachment_AutomaticInputFailoverSettings::setInputPreference(const OAIInputPreference &input_preference) {
    m_input_preference = input_preference;
    m_input_preference_isSet = true;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_input_preference_Set() const{
    return m_input_preference_isSet;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_input_preference_Valid() const{
    return m_input_preference_isValid;
}

QString OAIInputAttachment_AutomaticInputFailoverSettings::getSecondaryInputId() const {
    return m_secondary_input_id;
}
void OAIInputAttachment_AutomaticInputFailoverSettings::setSecondaryInputId(const QString &secondary_input_id) {
    m_secondary_input_id = secondary_input_id;
    m_secondary_input_id_isSet = true;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_secondary_input_id_Set() const{
    return m_secondary_input_id_isSet;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::is_secondary_input_id_Valid() const{
    return m_secondary_input_id_isValid;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_clear_time_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_input_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputAttachment_AutomaticInputFailoverSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secondary_input_id_isValid && true;
}

} // namespace OpenAPI
