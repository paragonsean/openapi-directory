/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedScte20Detection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedScte20Detection::OAIEmbeddedScte20Detection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedScte20Detection::OAIEmbeddedScte20Detection() {
    this->initializeModel();
}

OAIEmbeddedScte20Detection::~OAIEmbeddedScte20Detection() {}

void OAIEmbeddedScte20Detection::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEmbeddedScte20Detection::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEmbeddedScte20Detection::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEmbeddedScte20Detection::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEmbeddedScte20Detection::OFF;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEmbeddedScte20Detection::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEmbeddedScte20Detection::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEmbeddedScte20Detection::AUTO:
            val = "AUTO";
            break;
        case eOAIEmbeddedScte20Detection::OFF:
            val = "OFF";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEmbeddedScte20Detection::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEmbeddedScte20Detection::eOAIEmbeddedScte20Detection OAIEmbeddedScte20Detection::getValue() const {
    return m_value;
}

void OAIEmbeddedScte20Detection::setValue(const OAIEmbeddedScte20Detection::eOAIEmbeddedScte20Detection& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEmbeddedScte20Detection::isSet() const {
    
    return m_value_isSet;
}

bool OAIEmbeddedScte20Detection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
