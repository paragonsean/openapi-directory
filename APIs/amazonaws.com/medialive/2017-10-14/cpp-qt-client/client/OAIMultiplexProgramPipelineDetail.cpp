/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiplexProgramPipelineDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiplexProgramPipelineDetail::OAIMultiplexProgramPipelineDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiplexProgramPipelineDetail::OAIMultiplexProgramPipelineDetail() {
    this->initializeModel();
}

OAIMultiplexProgramPipelineDetail::~OAIMultiplexProgramPipelineDetail() {}

void OAIMultiplexProgramPipelineDetail::initializeModel() {

    m_active_channel_pipeline_isSet = false;
    m_active_channel_pipeline_isValid = false;

    m_pipeline_id_isSet = false;
    m_pipeline_id_isValid = false;
}

void OAIMultiplexProgramPipelineDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiplexProgramPipelineDetail::fromJsonObject(QJsonObject json) {

    m_active_channel_pipeline_isValid = ::OpenAPI::fromJsonValue(m_active_channel_pipeline, json[QString("ActiveChannelPipeline")]);
    m_active_channel_pipeline_isSet = !json[QString("ActiveChannelPipeline")].isNull() && m_active_channel_pipeline_isValid;

    m_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_pipeline_id, json[QString("PipelineId")]);
    m_pipeline_id_isSet = !json[QString("PipelineId")].isNull() && m_pipeline_id_isValid;
}

QString OAIMultiplexProgramPipelineDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiplexProgramPipelineDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_active_channel_pipeline_isSet) {
        obj.insert(QString("ActiveChannelPipeline"), ::OpenAPI::toJsonValue(m_active_channel_pipeline));
    }
    if (m_pipeline_id_isSet) {
        obj.insert(QString("PipelineId"), ::OpenAPI::toJsonValue(m_pipeline_id));
    }
    return obj;
}

QString OAIMultiplexProgramPipelineDetail::getActiveChannelPipeline() const {
    return m_active_channel_pipeline;
}
void OAIMultiplexProgramPipelineDetail::setActiveChannelPipeline(const QString &active_channel_pipeline) {
    m_active_channel_pipeline = active_channel_pipeline;
    m_active_channel_pipeline_isSet = true;
}

bool OAIMultiplexProgramPipelineDetail::is_active_channel_pipeline_Set() const{
    return m_active_channel_pipeline_isSet;
}

bool OAIMultiplexProgramPipelineDetail::is_active_channel_pipeline_Valid() const{
    return m_active_channel_pipeline_isValid;
}

QString OAIMultiplexProgramPipelineDetail::getPipelineId() const {
    return m_pipeline_id;
}
void OAIMultiplexProgramPipelineDetail::setPipelineId(const QString &pipeline_id) {
    m_pipeline_id = pipeline_id;
    m_pipeline_id_isSet = true;
}

bool OAIMultiplexProgramPipelineDetail::is_pipeline_id_Set() const{
    return m_pipeline_id_isSet;
}

bool OAIMultiplexProgramPipelineDetail::is_pipeline_id_Valid() const{
    return m_pipeline_id_isValid;
}

bool OAIMultiplexProgramPipelineDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_channel_pipeline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiplexProgramPipelineDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
