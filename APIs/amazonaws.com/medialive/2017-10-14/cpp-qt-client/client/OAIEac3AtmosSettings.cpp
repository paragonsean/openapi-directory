/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEac3AtmosSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEac3AtmosSettings::OAIEac3AtmosSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEac3AtmosSettings::OAIEac3AtmosSettings() {
    this->initializeModel();
}

OAIEac3AtmosSettings::~OAIEac3AtmosSettings() {}

void OAIEac3AtmosSettings::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_coding_mode_isSet = false;
    m_coding_mode_isValid = false;

    m_dialnorm_isSet = false;
    m_dialnorm_isValid = false;

    m_drc_line_isSet = false;
    m_drc_line_isValid = false;

    m_drc_rf_isSet = false;
    m_drc_rf_isValid = false;

    m_height_trim_isSet = false;
    m_height_trim_isValid = false;

    m_surround_trim_isSet = false;
    m_surround_trim_isValid = false;
}

void OAIEac3AtmosSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEac3AtmosSettings::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_coding_mode_isValid = ::OpenAPI::fromJsonValue(m_coding_mode, json[QString("CodingMode")]);
    m_coding_mode_isSet = !json[QString("CodingMode")].isNull() && m_coding_mode_isValid;

    m_dialnorm_isValid = ::OpenAPI::fromJsonValue(m_dialnorm, json[QString("Dialnorm")]);
    m_dialnorm_isSet = !json[QString("Dialnorm")].isNull() && m_dialnorm_isValid;

    m_drc_line_isValid = ::OpenAPI::fromJsonValue(m_drc_line, json[QString("DrcLine")]);
    m_drc_line_isSet = !json[QString("DrcLine")].isNull() && m_drc_line_isValid;

    m_drc_rf_isValid = ::OpenAPI::fromJsonValue(m_drc_rf, json[QString("DrcRf")]);
    m_drc_rf_isSet = !json[QString("DrcRf")].isNull() && m_drc_rf_isValid;

    m_height_trim_isValid = ::OpenAPI::fromJsonValue(m_height_trim, json[QString("HeightTrim")]);
    m_height_trim_isSet = !json[QString("HeightTrim")].isNull() && m_height_trim_isValid;

    m_surround_trim_isValid = ::OpenAPI::fromJsonValue(m_surround_trim, json[QString("SurroundTrim")]);
    m_surround_trim_isSet = !json[QString("SurroundTrim")].isNull() && m_surround_trim_isValid;
}

QString OAIEac3AtmosSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEac3AtmosSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_coding_mode.isSet()) {
        obj.insert(QString("CodingMode"), ::OpenAPI::toJsonValue(m_coding_mode));
    }
    if (m_dialnorm_isSet) {
        obj.insert(QString("Dialnorm"), ::OpenAPI::toJsonValue(m_dialnorm));
    }
    if (m_drc_line.isSet()) {
        obj.insert(QString("DrcLine"), ::OpenAPI::toJsonValue(m_drc_line));
    }
    if (m_drc_rf.isSet()) {
        obj.insert(QString("DrcRf"), ::OpenAPI::toJsonValue(m_drc_rf));
    }
    if (m_height_trim_isSet) {
        obj.insert(QString("HeightTrim"), ::OpenAPI::toJsonValue(m_height_trim));
    }
    if (m_surround_trim_isSet) {
        obj.insert(QString("SurroundTrim"), ::OpenAPI::toJsonValue(m_surround_trim));
    }
    return obj;
}

double OAIEac3AtmosSettings::getBitrate() const {
    return m_bitrate;
}
void OAIEac3AtmosSettings::setBitrate(const double &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIEac3AtmosSettings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIEac3AtmosSettings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIEac3AtmosCodingMode OAIEac3AtmosSettings::getCodingMode() const {
    return m_coding_mode;
}
void OAIEac3AtmosSettings::setCodingMode(const OAIEac3AtmosCodingMode &coding_mode) {
    m_coding_mode = coding_mode;
    m_coding_mode_isSet = true;
}

bool OAIEac3AtmosSettings::is_coding_mode_Set() const{
    return m_coding_mode_isSet;
}

bool OAIEac3AtmosSettings::is_coding_mode_Valid() const{
    return m_coding_mode_isValid;
}

qint32 OAIEac3AtmosSettings::getDialnorm() const {
    return m_dialnorm;
}
void OAIEac3AtmosSettings::setDialnorm(const qint32 &dialnorm) {
    m_dialnorm = dialnorm;
    m_dialnorm_isSet = true;
}

bool OAIEac3AtmosSettings::is_dialnorm_Set() const{
    return m_dialnorm_isSet;
}

bool OAIEac3AtmosSettings::is_dialnorm_Valid() const{
    return m_dialnorm_isValid;
}

OAIEac3AtmosDrcLine OAIEac3AtmosSettings::getDrcLine() const {
    return m_drc_line;
}
void OAIEac3AtmosSettings::setDrcLine(const OAIEac3AtmosDrcLine &drc_line) {
    m_drc_line = drc_line;
    m_drc_line_isSet = true;
}

bool OAIEac3AtmosSettings::is_drc_line_Set() const{
    return m_drc_line_isSet;
}

bool OAIEac3AtmosSettings::is_drc_line_Valid() const{
    return m_drc_line_isValid;
}

OAIEac3AtmosDrcRf OAIEac3AtmosSettings::getDrcRf() const {
    return m_drc_rf;
}
void OAIEac3AtmosSettings::setDrcRf(const OAIEac3AtmosDrcRf &drc_rf) {
    m_drc_rf = drc_rf;
    m_drc_rf_isSet = true;
}

bool OAIEac3AtmosSettings::is_drc_rf_Set() const{
    return m_drc_rf_isSet;
}

bool OAIEac3AtmosSettings::is_drc_rf_Valid() const{
    return m_drc_rf_isValid;
}

double OAIEac3AtmosSettings::getHeightTrim() const {
    return m_height_trim;
}
void OAIEac3AtmosSettings::setHeightTrim(const double &height_trim) {
    m_height_trim = height_trim;
    m_height_trim_isSet = true;
}

bool OAIEac3AtmosSettings::is_height_trim_Set() const{
    return m_height_trim_isSet;
}

bool OAIEac3AtmosSettings::is_height_trim_Valid() const{
    return m_height_trim_isValid;
}

double OAIEac3AtmosSettings::getSurroundTrim() const {
    return m_surround_trim;
}
void OAIEac3AtmosSettings::setSurroundTrim(const double &surround_trim) {
    m_surround_trim = surround_trim;
    m_surround_trim_isSet = true;
}

bool OAIEac3AtmosSettings::is_surround_trim_Set() const{
    return m_surround_trim_isSet;
}

bool OAIEac3AtmosSettings::is_surround_trim_Valid() const{
    return m_surround_trim_isValid;
}

bool OAIEac3AtmosSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coding_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialnorm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drc_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drc_rf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surround_trim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEac3AtmosSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
