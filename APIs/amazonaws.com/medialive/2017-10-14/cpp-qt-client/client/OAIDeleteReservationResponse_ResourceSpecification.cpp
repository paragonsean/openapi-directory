/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteReservationResponse_ResourceSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteReservationResponse_ResourceSpecification::OAIDeleteReservationResponse_ResourceSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteReservationResponse_ResourceSpecification::OAIDeleteReservationResponse_ResourceSpecification() {
    this->initializeModel();
}

OAIDeleteReservationResponse_ResourceSpecification::~OAIDeleteReservationResponse_ResourceSpecification() {}

void OAIDeleteReservationResponse_ResourceSpecification::initializeModel() {

    m_channel_class_isSet = false;
    m_channel_class_isValid = false;

    m_codec_isSet = false;
    m_codec_isValid = false;

    m_maximum_bitrate_isSet = false;
    m_maximum_bitrate_isValid = false;

    m_maximum_framerate_isSet = false;
    m_maximum_framerate_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_special_feature_isSet = false;
    m_special_feature_isValid = false;

    m_video_quality_isSet = false;
    m_video_quality_isValid = false;
}

void OAIDeleteReservationResponse_ResourceSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteReservationResponse_ResourceSpecification::fromJsonObject(QJsonObject json) {

    m_channel_class_isValid = ::OpenAPI::fromJsonValue(m_channel_class, json[QString("ChannelClass")]);
    m_channel_class_isSet = !json[QString("ChannelClass")].isNull() && m_channel_class_isValid;

    m_codec_isValid = ::OpenAPI::fromJsonValue(m_codec, json[QString("Codec")]);
    m_codec_isSet = !json[QString("Codec")].isNull() && m_codec_isValid;

    m_maximum_bitrate_isValid = ::OpenAPI::fromJsonValue(m_maximum_bitrate, json[QString("MaximumBitrate")]);
    m_maximum_bitrate_isSet = !json[QString("MaximumBitrate")].isNull() && m_maximum_bitrate_isValid;

    m_maximum_framerate_isValid = ::OpenAPI::fromJsonValue(m_maximum_framerate, json[QString("MaximumFramerate")]);
    m_maximum_framerate_isSet = !json[QString("MaximumFramerate")].isNull() && m_maximum_framerate_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("Resolution")]);
    m_resolution_isSet = !json[QString("Resolution")].isNull() && m_resolution_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_special_feature_isValid = ::OpenAPI::fromJsonValue(m_special_feature, json[QString("SpecialFeature")]);
    m_special_feature_isSet = !json[QString("SpecialFeature")].isNull() && m_special_feature_isValid;

    m_video_quality_isValid = ::OpenAPI::fromJsonValue(m_video_quality, json[QString("VideoQuality")]);
    m_video_quality_isSet = !json[QString("VideoQuality")].isNull() && m_video_quality_isValid;
}

QString OAIDeleteReservationResponse_ResourceSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteReservationResponse_ResourceSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_class.isSet()) {
        obj.insert(QString("ChannelClass"), ::OpenAPI::toJsonValue(m_channel_class));
    }
    if (m_codec.isSet()) {
        obj.insert(QString("Codec"), ::OpenAPI::toJsonValue(m_codec));
    }
    if (m_maximum_bitrate.isSet()) {
        obj.insert(QString("MaximumBitrate"), ::OpenAPI::toJsonValue(m_maximum_bitrate));
    }
    if (m_maximum_framerate.isSet()) {
        obj.insert(QString("MaximumFramerate"), ::OpenAPI::toJsonValue(m_maximum_framerate));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("Resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_special_feature.isSet()) {
        obj.insert(QString("SpecialFeature"), ::OpenAPI::toJsonValue(m_special_feature));
    }
    if (m_video_quality.isSet()) {
        obj.insert(QString("VideoQuality"), ::OpenAPI::toJsonValue(m_video_quality));
    }
    return obj;
}

OAIChannelClass OAIDeleteReservationResponse_ResourceSpecification::getChannelClass() const {
    return m_channel_class;
}
void OAIDeleteReservationResponse_ResourceSpecification::setChannelClass(const OAIChannelClass &channel_class) {
    m_channel_class = channel_class;
    m_channel_class_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_channel_class_Set() const{
    return m_channel_class_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_channel_class_Valid() const{
    return m_channel_class_isValid;
}

OAIReservationCodec OAIDeleteReservationResponse_ResourceSpecification::getCodec() const {
    return m_codec;
}
void OAIDeleteReservationResponse_ResourceSpecification::setCodec(const OAIReservationCodec &codec) {
    m_codec = codec;
    m_codec_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_codec_Set() const{
    return m_codec_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_codec_Valid() const{
    return m_codec_isValid;
}

OAIReservationMaximumBitrate OAIDeleteReservationResponse_ResourceSpecification::getMaximumBitrate() const {
    return m_maximum_bitrate;
}
void OAIDeleteReservationResponse_ResourceSpecification::setMaximumBitrate(const OAIReservationMaximumBitrate &maximum_bitrate) {
    m_maximum_bitrate = maximum_bitrate;
    m_maximum_bitrate_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_maximum_bitrate_Set() const{
    return m_maximum_bitrate_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_maximum_bitrate_Valid() const{
    return m_maximum_bitrate_isValid;
}

OAIReservationMaximumFramerate OAIDeleteReservationResponse_ResourceSpecification::getMaximumFramerate() const {
    return m_maximum_framerate;
}
void OAIDeleteReservationResponse_ResourceSpecification::setMaximumFramerate(const OAIReservationMaximumFramerate &maximum_framerate) {
    m_maximum_framerate = maximum_framerate;
    m_maximum_framerate_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_maximum_framerate_Set() const{
    return m_maximum_framerate_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_maximum_framerate_Valid() const{
    return m_maximum_framerate_isValid;
}

OAIReservationResolution OAIDeleteReservationResponse_ResourceSpecification::getResolution() const {
    return m_resolution;
}
void OAIDeleteReservationResponse_ResourceSpecification::setResolution(const OAIReservationResolution &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_resolution_Valid() const{
    return m_resolution_isValid;
}

OAIReservationResourceType OAIDeleteReservationResponse_ResourceSpecification::getResourceType() const {
    return m_resource_type;
}
void OAIDeleteReservationResponse_ResourceSpecification::setResourceType(const OAIReservationResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIReservationSpecialFeature OAIDeleteReservationResponse_ResourceSpecification::getSpecialFeature() const {
    return m_special_feature;
}
void OAIDeleteReservationResponse_ResourceSpecification::setSpecialFeature(const OAIReservationSpecialFeature &special_feature) {
    m_special_feature = special_feature;
    m_special_feature_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_special_feature_Set() const{
    return m_special_feature_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_special_feature_Valid() const{
    return m_special_feature_isValid;
}

OAIReservationVideoQuality OAIDeleteReservationResponse_ResourceSpecification::getVideoQuality() const {
    return m_video_quality;
}
void OAIDeleteReservationResponse_ResourceSpecification::setVideoQuality(const OAIReservationVideoQuality &video_quality) {
    m_video_quality = video_quality;
    m_video_quality_isSet = true;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_video_quality_Set() const{
    return m_video_quality_isSet;
}

bool OAIDeleteReservationResponse_ResourceSpecification::is_video_quality_Valid() const{
    return m_video_quality_isValid;
}

bool OAIDeleteReservationResponse_ResourceSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_bitrate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_framerate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_feature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteReservationResponse_ResourceSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
