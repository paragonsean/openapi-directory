/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchiveOutputSettings_ContainerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchiveOutputSettings_ContainerSettings::OAIArchiveOutputSettings_ContainerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchiveOutputSettings_ContainerSettings::OAIArchiveOutputSettings_ContainerSettings() {
    this->initializeModel();
}

OAIArchiveOutputSettings_ContainerSettings::~OAIArchiveOutputSettings_ContainerSettings() {}

void OAIArchiveOutputSettings_ContainerSettings::initializeModel() {

    m_m2ts_settings_isSet = false;
    m_m2ts_settings_isValid = false;

    m_raw_settings_isSet = false;
    m_raw_settings_isValid = false;
}

void OAIArchiveOutputSettings_ContainerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArchiveOutputSettings_ContainerSettings::fromJsonObject(QJsonObject json) {

    m_m2ts_settings_isValid = ::OpenAPI::fromJsonValue(m_m2ts_settings, json[QString("M2tsSettings")]);
    m_m2ts_settings_isSet = !json[QString("M2tsSettings")].isNull() && m_m2ts_settings_isValid;

    m_raw_settings_isValid = ::OpenAPI::fromJsonValue(m_raw_settings, json[QString("RawSettings")]);
    m_raw_settings_isSet = !json[QString("RawSettings")].isNull() && m_raw_settings_isValid;
}

QString OAIArchiveOutputSettings_ContainerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArchiveOutputSettings_ContainerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_m2ts_settings.isSet()) {
        obj.insert(QString("M2tsSettings"), ::OpenAPI::toJsonValue(m_m2ts_settings));
    }
    if (m_raw_settings.isSet()) {
        obj.insert(QString("RawSettings"), ::OpenAPI::toJsonValue(m_raw_settings));
    }
    return obj;
}

OAIArchiveContainerSettings_M2tsSettings OAIArchiveOutputSettings_ContainerSettings::getM2tsSettings() const {
    return m_m2ts_settings;
}
void OAIArchiveOutputSettings_ContainerSettings::setM2tsSettings(const OAIArchiveContainerSettings_M2tsSettings &m2ts_settings) {
    m_m2ts_settings = m2ts_settings;
    m_m2ts_settings_isSet = true;
}

bool OAIArchiveOutputSettings_ContainerSettings::is_m2ts_settings_Set() const{
    return m_m2ts_settings_isSet;
}

bool OAIArchiveOutputSettings_ContainerSettings::is_m2ts_settings_Valid() const{
    return m_m2ts_settings_isValid;
}

OAIObject OAIArchiveOutputSettings_ContainerSettings::getRawSettings() const {
    return m_raw_settings;
}
void OAIArchiveOutputSettings_ContainerSettings::setRawSettings(const OAIObject &raw_settings) {
    m_raw_settings = raw_settings;
    m_raw_settings_isSet = true;
}

bool OAIArchiveOutputSettings_ContainerSettings::is_raw_settings_Set() const{
    return m_raw_settings_isSet;
}

bool OAIArchiveOutputSettings_ContainerSettings::is_raw_settings_Valid() const{
    return m_raw_settings_isValid;
}

bool OAIArchiveOutputSettings_ContainerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_m2ts_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArchiveOutputSettings_ContainerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
