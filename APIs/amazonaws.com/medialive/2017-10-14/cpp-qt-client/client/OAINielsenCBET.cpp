/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINielsenCBET.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINielsenCBET::OAINielsenCBET(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINielsenCBET::OAINielsenCBET() {
    this->initializeModel();
}

OAINielsenCBET::~OAINielsenCBET() {}

void OAINielsenCBET::initializeModel() {

    m_cbet_check_digit_string_isSet = false;
    m_cbet_check_digit_string_isValid = false;

    m_cbet_stepaside_isSet = false;
    m_cbet_stepaside_isValid = false;

    m_csid_isSet = false;
    m_csid_isValid = false;
}

void OAINielsenCBET::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINielsenCBET::fromJsonObject(QJsonObject json) {

    m_cbet_check_digit_string_isValid = ::OpenAPI::fromJsonValue(m_cbet_check_digit_string, json[QString("CbetCheckDigitString")]);
    m_cbet_check_digit_string_isSet = !json[QString("CbetCheckDigitString")].isNull() && m_cbet_check_digit_string_isValid;

    m_cbet_stepaside_isValid = ::OpenAPI::fromJsonValue(m_cbet_stepaside, json[QString("CbetStepaside")]);
    m_cbet_stepaside_isSet = !json[QString("CbetStepaside")].isNull() && m_cbet_stepaside_isValid;

    m_csid_isValid = ::OpenAPI::fromJsonValue(m_csid, json[QString("Csid")]);
    m_csid_isSet = !json[QString("Csid")].isNull() && m_csid_isValid;
}

QString OAINielsenCBET::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINielsenCBET::asJsonObject() const {
    QJsonObject obj;
    if (m_cbet_check_digit_string_isSet) {
        obj.insert(QString("CbetCheckDigitString"), ::OpenAPI::toJsonValue(m_cbet_check_digit_string));
    }
    if (m_cbet_stepaside.isSet()) {
        obj.insert(QString("CbetStepaside"), ::OpenAPI::toJsonValue(m_cbet_stepaside));
    }
    if (m_csid_isSet) {
        obj.insert(QString("Csid"), ::OpenAPI::toJsonValue(m_csid));
    }
    return obj;
}

QString OAINielsenCBET::getCbetCheckDigitString() const {
    return m_cbet_check_digit_string;
}
void OAINielsenCBET::setCbetCheckDigitString(const QString &cbet_check_digit_string) {
    m_cbet_check_digit_string = cbet_check_digit_string;
    m_cbet_check_digit_string_isSet = true;
}

bool OAINielsenCBET::is_cbet_check_digit_string_Set() const{
    return m_cbet_check_digit_string_isSet;
}

bool OAINielsenCBET::is_cbet_check_digit_string_Valid() const{
    return m_cbet_check_digit_string_isValid;
}

OAINielsenWatermarksCbetStepaside OAINielsenCBET::getCbetStepaside() const {
    return m_cbet_stepaside;
}
void OAINielsenCBET::setCbetStepaside(const OAINielsenWatermarksCbetStepaside &cbet_stepaside) {
    m_cbet_stepaside = cbet_stepaside;
    m_cbet_stepaside_isSet = true;
}

bool OAINielsenCBET::is_cbet_stepaside_Set() const{
    return m_cbet_stepaside_isSet;
}

bool OAINielsenCBET::is_cbet_stepaside_Valid() const{
    return m_cbet_stepaside_isValid;
}

QString OAINielsenCBET::getCsid() const {
    return m_csid;
}
void OAINielsenCBET::setCsid(const QString &csid) {
    m_csid = csid;
    m_csid_isSet = true;
}

bool OAINielsenCBET::is_csid_Set() const{
    return m_csid_isSet;
}

bool OAINielsenCBET::is_csid_Valid() const{
    return m_csid_isValid;
}

bool OAINielsenCBET::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cbet_check_digit_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cbet_stepaside.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINielsenCBET::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cbet_check_digit_string_isValid && m_cbet_stepaside_isValid && m_csid_isValid && true;
}

} // namespace OpenAPI
