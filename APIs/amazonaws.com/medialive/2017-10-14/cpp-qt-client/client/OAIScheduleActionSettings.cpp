/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleActionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleActionSettings::OAIScheduleActionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleActionSettings::OAIScheduleActionSettings() {
    this->initializeModel();
}

OAIScheduleActionSettings::~OAIScheduleActionSettings() {}

void OAIScheduleActionSettings::initializeModel() {

    m_hls_id3_segment_tagging_settings_isSet = false;
    m_hls_id3_segment_tagging_settings_isValid = false;

    m_hls_timed_metadata_settings_isSet = false;
    m_hls_timed_metadata_settings_isValid = false;

    m_input_prepare_settings_isSet = false;
    m_input_prepare_settings_isValid = false;

    m_input_switch_settings_isSet = false;
    m_input_switch_settings_isValid = false;

    m_motion_graphics_image_activate_settings_isSet = false;
    m_motion_graphics_image_activate_settings_isValid = false;

    m_motion_graphics_image_deactivate_settings_isSet = false;
    m_motion_graphics_image_deactivate_settings_isValid = false;

    m_pause_state_settings_isSet = false;
    m_pause_state_settings_isValid = false;

    m_scte35_input_settings_isSet = false;
    m_scte35_input_settings_isValid = false;

    m_scte35_return_to_network_settings_isSet = false;
    m_scte35_return_to_network_settings_isValid = false;

    m_scte35_splice_insert_settings_isSet = false;
    m_scte35_splice_insert_settings_isValid = false;

    m_scte35_time_signal_settings_isSet = false;
    m_scte35_time_signal_settings_isValid = false;

    m_static_image_activate_settings_isSet = false;
    m_static_image_activate_settings_isValid = false;

    m_static_image_deactivate_settings_isSet = false;
    m_static_image_deactivate_settings_isValid = false;
}

void OAIScheduleActionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleActionSettings::fromJsonObject(QJsonObject json) {

    m_hls_id3_segment_tagging_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_id3_segment_tagging_settings, json[QString("HlsId3SegmentTaggingSettings")]);
    m_hls_id3_segment_tagging_settings_isSet = !json[QString("HlsId3SegmentTaggingSettings")].isNull() && m_hls_id3_segment_tagging_settings_isValid;

    m_hls_timed_metadata_settings_isValid = ::OpenAPI::fromJsonValue(m_hls_timed_metadata_settings, json[QString("HlsTimedMetadataSettings")]);
    m_hls_timed_metadata_settings_isSet = !json[QString("HlsTimedMetadataSettings")].isNull() && m_hls_timed_metadata_settings_isValid;

    m_input_prepare_settings_isValid = ::OpenAPI::fromJsonValue(m_input_prepare_settings, json[QString("InputPrepareSettings")]);
    m_input_prepare_settings_isSet = !json[QString("InputPrepareSettings")].isNull() && m_input_prepare_settings_isValid;

    m_input_switch_settings_isValid = ::OpenAPI::fromJsonValue(m_input_switch_settings, json[QString("InputSwitchSettings")]);
    m_input_switch_settings_isSet = !json[QString("InputSwitchSettings")].isNull() && m_input_switch_settings_isValid;

    m_motion_graphics_image_activate_settings_isValid = ::OpenAPI::fromJsonValue(m_motion_graphics_image_activate_settings, json[QString("MotionGraphicsImageActivateSettings")]);
    m_motion_graphics_image_activate_settings_isSet = !json[QString("MotionGraphicsImageActivateSettings")].isNull() && m_motion_graphics_image_activate_settings_isValid;

    m_motion_graphics_image_deactivate_settings_isValid = ::OpenAPI::fromJsonValue(m_motion_graphics_image_deactivate_settings, json[QString("MotionGraphicsImageDeactivateSettings")]);
    m_motion_graphics_image_deactivate_settings_isSet = !json[QString("MotionGraphicsImageDeactivateSettings")].isNull() && m_motion_graphics_image_deactivate_settings_isValid;

    m_pause_state_settings_isValid = ::OpenAPI::fromJsonValue(m_pause_state_settings, json[QString("PauseStateSettings")]);
    m_pause_state_settings_isSet = !json[QString("PauseStateSettings")].isNull() && m_pause_state_settings_isValid;

    m_scte35_input_settings_isValid = ::OpenAPI::fromJsonValue(m_scte35_input_settings, json[QString("Scte35InputSettings")]);
    m_scte35_input_settings_isSet = !json[QString("Scte35InputSettings")].isNull() && m_scte35_input_settings_isValid;

    m_scte35_return_to_network_settings_isValid = ::OpenAPI::fromJsonValue(m_scte35_return_to_network_settings, json[QString("Scte35ReturnToNetworkSettings")]);
    m_scte35_return_to_network_settings_isSet = !json[QString("Scte35ReturnToNetworkSettings")].isNull() && m_scte35_return_to_network_settings_isValid;

    m_scte35_splice_insert_settings_isValid = ::OpenAPI::fromJsonValue(m_scte35_splice_insert_settings, json[QString("Scte35SpliceInsertSettings")]);
    m_scte35_splice_insert_settings_isSet = !json[QString("Scte35SpliceInsertSettings")].isNull() && m_scte35_splice_insert_settings_isValid;

    m_scte35_time_signal_settings_isValid = ::OpenAPI::fromJsonValue(m_scte35_time_signal_settings, json[QString("Scte35TimeSignalSettings")]);
    m_scte35_time_signal_settings_isSet = !json[QString("Scte35TimeSignalSettings")].isNull() && m_scte35_time_signal_settings_isValid;

    m_static_image_activate_settings_isValid = ::OpenAPI::fromJsonValue(m_static_image_activate_settings, json[QString("StaticImageActivateSettings")]);
    m_static_image_activate_settings_isSet = !json[QString("StaticImageActivateSettings")].isNull() && m_static_image_activate_settings_isValid;

    m_static_image_deactivate_settings_isValid = ::OpenAPI::fromJsonValue(m_static_image_deactivate_settings, json[QString("StaticImageDeactivateSettings")]);
    m_static_image_deactivate_settings_isSet = !json[QString("StaticImageDeactivateSettings")].isNull() && m_static_image_deactivate_settings_isValid;
}

QString OAIScheduleActionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleActionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_hls_id3_segment_tagging_settings.isSet()) {
        obj.insert(QString("HlsId3SegmentTaggingSettings"), ::OpenAPI::toJsonValue(m_hls_id3_segment_tagging_settings));
    }
    if (m_hls_timed_metadata_settings.isSet()) {
        obj.insert(QString("HlsTimedMetadataSettings"), ::OpenAPI::toJsonValue(m_hls_timed_metadata_settings));
    }
    if (m_input_prepare_settings.isSet()) {
        obj.insert(QString("InputPrepareSettings"), ::OpenAPI::toJsonValue(m_input_prepare_settings));
    }
    if (m_input_switch_settings.isSet()) {
        obj.insert(QString("InputSwitchSettings"), ::OpenAPI::toJsonValue(m_input_switch_settings));
    }
    if (m_motion_graphics_image_activate_settings.isSet()) {
        obj.insert(QString("MotionGraphicsImageActivateSettings"), ::OpenAPI::toJsonValue(m_motion_graphics_image_activate_settings));
    }
    if (m_motion_graphics_image_deactivate_settings.isSet()) {
        obj.insert(QString("MotionGraphicsImageDeactivateSettings"), ::OpenAPI::toJsonValue(m_motion_graphics_image_deactivate_settings));
    }
    if (m_pause_state_settings.isSet()) {
        obj.insert(QString("PauseStateSettings"), ::OpenAPI::toJsonValue(m_pause_state_settings));
    }
    if (m_scte35_input_settings.isSet()) {
        obj.insert(QString("Scte35InputSettings"), ::OpenAPI::toJsonValue(m_scte35_input_settings));
    }
    if (m_scte35_return_to_network_settings.isSet()) {
        obj.insert(QString("Scte35ReturnToNetworkSettings"), ::OpenAPI::toJsonValue(m_scte35_return_to_network_settings));
    }
    if (m_scte35_splice_insert_settings.isSet()) {
        obj.insert(QString("Scte35SpliceInsertSettings"), ::OpenAPI::toJsonValue(m_scte35_splice_insert_settings));
    }
    if (m_scte35_time_signal_settings.isSet()) {
        obj.insert(QString("Scte35TimeSignalSettings"), ::OpenAPI::toJsonValue(m_scte35_time_signal_settings));
    }
    if (m_static_image_activate_settings.isSet()) {
        obj.insert(QString("StaticImageActivateSettings"), ::OpenAPI::toJsonValue(m_static_image_activate_settings));
    }
    if (m_static_image_deactivate_settings.isSet()) {
        obj.insert(QString("StaticImageDeactivateSettings"), ::OpenAPI::toJsonValue(m_static_image_deactivate_settings));
    }
    return obj;
}

OAIScheduleActionSettings_HlsId3SegmentTaggingSettings OAIScheduleActionSettings::getHlsId3SegmentTaggingSettings() const {
    return m_hls_id3_segment_tagging_settings;
}
void OAIScheduleActionSettings::setHlsId3SegmentTaggingSettings(const OAIScheduleActionSettings_HlsId3SegmentTaggingSettings &hls_id3_segment_tagging_settings) {
    m_hls_id3_segment_tagging_settings = hls_id3_segment_tagging_settings;
    m_hls_id3_segment_tagging_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_hls_id3_segment_tagging_settings_Set() const{
    return m_hls_id3_segment_tagging_settings_isSet;
}

bool OAIScheduleActionSettings::is_hls_id3_segment_tagging_settings_Valid() const{
    return m_hls_id3_segment_tagging_settings_isValid;
}

OAIScheduleActionSettings_HlsTimedMetadataSettings OAIScheduleActionSettings::getHlsTimedMetadataSettings() const {
    return m_hls_timed_metadata_settings;
}
void OAIScheduleActionSettings::setHlsTimedMetadataSettings(const OAIScheduleActionSettings_HlsTimedMetadataSettings &hls_timed_metadata_settings) {
    m_hls_timed_metadata_settings = hls_timed_metadata_settings;
    m_hls_timed_metadata_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_hls_timed_metadata_settings_Set() const{
    return m_hls_timed_metadata_settings_isSet;
}

bool OAIScheduleActionSettings::is_hls_timed_metadata_settings_Valid() const{
    return m_hls_timed_metadata_settings_isValid;
}

OAIScheduleActionSettings_InputPrepareSettings OAIScheduleActionSettings::getInputPrepareSettings() const {
    return m_input_prepare_settings;
}
void OAIScheduleActionSettings::setInputPrepareSettings(const OAIScheduleActionSettings_InputPrepareSettings &input_prepare_settings) {
    m_input_prepare_settings = input_prepare_settings;
    m_input_prepare_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_input_prepare_settings_Set() const{
    return m_input_prepare_settings_isSet;
}

bool OAIScheduleActionSettings::is_input_prepare_settings_Valid() const{
    return m_input_prepare_settings_isValid;
}

OAIScheduleActionSettings_InputSwitchSettings OAIScheduleActionSettings::getInputSwitchSettings() const {
    return m_input_switch_settings;
}
void OAIScheduleActionSettings::setInputSwitchSettings(const OAIScheduleActionSettings_InputSwitchSettings &input_switch_settings) {
    m_input_switch_settings = input_switch_settings;
    m_input_switch_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_input_switch_settings_Set() const{
    return m_input_switch_settings_isSet;
}

bool OAIScheduleActionSettings::is_input_switch_settings_Valid() const{
    return m_input_switch_settings_isValid;
}

OAIScheduleActionSettings_MotionGraphicsImageActivateSettings OAIScheduleActionSettings::getMotionGraphicsImageActivateSettings() const {
    return m_motion_graphics_image_activate_settings;
}
void OAIScheduleActionSettings::setMotionGraphicsImageActivateSettings(const OAIScheduleActionSettings_MotionGraphicsImageActivateSettings &motion_graphics_image_activate_settings) {
    m_motion_graphics_image_activate_settings = motion_graphics_image_activate_settings;
    m_motion_graphics_image_activate_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_motion_graphics_image_activate_settings_Set() const{
    return m_motion_graphics_image_activate_settings_isSet;
}

bool OAIScheduleActionSettings::is_motion_graphics_image_activate_settings_Valid() const{
    return m_motion_graphics_image_activate_settings_isValid;
}

OAIObject OAIScheduleActionSettings::getMotionGraphicsImageDeactivateSettings() const {
    return m_motion_graphics_image_deactivate_settings;
}
void OAIScheduleActionSettings::setMotionGraphicsImageDeactivateSettings(const OAIObject &motion_graphics_image_deactivate_settings) {
    m_motion_graphics_image_deactivate_settings = motion_graphics_image_deactivate_settings;
    m_motion_graphics_image_deactivate_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_motion_graphics_image_deactivate_settings_Set() const{
    return m_motion_graphics_image_deactivate_settings_isSet;
}

bool OAIScheduleActionSettings::is_motion_graphics_image_deactivate_settings_Valid() const{
    return m_motion_graphics_image_deactivate_settings_isValid;
}

OAIScheduleActionSettings_PauseStateSettings OAIScheduleActionSettings::getPauseStateSettings() const {
    return m_pause_state_settings;
}
void OAIScheduleActionSettings::setPauseStateSettings(const OAIScheduleActionSettings_PauseStateSettings &pause_state_settings) {
    m_pause_state_settings = pause_state_settings;
    m_pause_state_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_pause_state_settings_Set() const{
    return m_pause_state_settings_isSet;
}

bool OAIScheduleActionSettings::is_pause_state_settings_Valid() const{
    return m_pause_state_settings_isValid;
}

OAIScheduleActionSettings_Scte35InputSettings OAIScheduleActionSettings::getScte35InputSettings() const {
    return m_scte35_input_settings;
}
void OAIScheduleActionSettings::setScte35InputSettings(const OAIScheduleActionSettings_Scte35InputSettings &scte35_input_settings) {
    m_scte35_input_settings = scte35_input_settings;
    m_scte35_input_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_scte35_input_settings_Set() const{
    return m_scte35_input_settings_isSet;
}

bool OAIScheduleActionSettings::is_scte35_input_settings_Valid() const{
    return m_scte35_input_settings_isValid;
}

OAIScheduleActionSettings_Scte35ReturnToNetworkSettings OAIScheduleActionSettings::getScte35ReturnToNetworkSettings() const {
    return m_scte35_return_to_network_settings;
}
void OAIScheduleActionSettings::setScte35ReturnToNetworkSettings(const OAIScheduleActionSettings_Scte35ReturnToNetworkSettings &scte35_return_to_network_settings) {
    m_scte35_return_to_network_settings = scte35_return_to_network_settings;
    m_scte35_return_to_network_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_scte35_return_to_network_settings_Set() const{
    return m_scte35_return_to_network_settings_isSet;
}

bool OAIScheduleActionSettings::is_scte35_return_to_network_settings_Valid() const{
    return m_scte35_return_to_network_settings_isValid;
}

OAIScheduleActionSettings_Scte35SpliceInsertSettings OAIScheduleActionSettings::getScte35SpliceInsertSettings() const {
    return m_scte35_splice_insert_settings;
}
void OAIScheduleActionSettings::setScte35SpliceInsertSettings(const OAIScheduleActionSettings_Scte35SpliceInsertSettings &scte35_splice_insert_settings) {
    m_scte35_splice_insert_settings = scte35_splice_insert_settings;
    m_scte35_splice_insert_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_scte35_splice_insert_settings_Set() const{
    return m_scte35_splice_insert_settings_isSet;
}

bool OAIScheduleActionSettings::is_scte35_splice_insert_settings_Valid() const{
    return m_scte35_splice_insert_settings_isValid;
}

OAIScheduleActionSettings_Scte35TimeSignalSettings OAIScheduleActionSettings::getScte35TimeSignalSettings() const {
    return m_scte35_time_signal_settings;
}
void OAIScheduleActionSettings::setScte35TimeSignalSettings(const OAIScheduleActionSettings_Scte35TimeSignalSettings &scte35_time_signal_settings) {
    m_scte35_time_signal_settings = scte35_time_signal_settings;
    m_scte35_time_signal_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_scte35_time_signal_settings_Set() const{
    return m_scte35_time_signal_settings_isSet;
}

bool OAIScheduleActionSettings::is_scte35_time_signal_settings_Valid() const{
    return m_scte35_time_signal_settings_isValid;
}

OAIScheduleActionSettings_StaticImageActivateSettings OAIScheduleActionSettings::getStaticImageActivateSettings() const {
    return m_static_image_activate_settings;
}
void OAIScheduleActionSettings::setStaticImageActivateSettings(const OAIScheduleActionSettings_StaticImageActivateSettings &static_image_activate_settings) {
    m_static_image_activate_settings = static_image_activate_settings;
    m_static_image_activate_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_static_image_activate_settings_Set() const{
    return m_static_image_activate_settings_isSet;
}

bool OAIScheduleActionSettings::is_static_image_activate_settings_Valid() const{
    return m_static_image_activate_settings_isValid;
}

OAIScheduleActionSettings_StaticImageDeactivateSettings OAIScheduleActionSettings::getStaticImageDeactivateSettings() const {
    return m_static_image_deactivate_settings;
}
void OAIScheduleActionSettings::setStaticImageDeactivateSettings(const OAIScheduleActionSettings_StaticImageDeactivateSettings &static_image_deactivate_settings) {
    m_static_image_deactivate_settings = static_image_deactivate_settings;
    m_static_image_deactivate_settings_isSet = true;
}

bool OAIScheduleActionSettings::is_static_image_deactivate_settings_Set() const{
    return m_static_image_deactivate_settings_isSet;
}

bool OAIScheduleActionSettings::is_static_image_deactivate_settings_Valid() const{
    return m_static_image_deactivate_settings_isValid;
}

bool OAIScheduleActionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hls_id3_segment_tagging_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_timed_metadata_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_prepare_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_switch_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_graphics_image_activate_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_motion_graphics_image_deactivate_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_state_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_input_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_return_to_network_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_splice_insert_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_time_signal_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_image_activate_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_image_deactivate_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleActionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
