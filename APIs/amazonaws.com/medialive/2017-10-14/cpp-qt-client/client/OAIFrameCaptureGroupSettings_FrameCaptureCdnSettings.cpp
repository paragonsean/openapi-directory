/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings() {
    this->initializeModel();
}

OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::~OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings() {}

void OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::initializeModel() {

    m_frame_capture_s3_settings_isSet = false;
    m_frame_capture_s3_settings_isValid = false;
}

void OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::fromJsonObject(QJsonObject json) {

    m_frame_capture_s3_settings_isValid = ::OpenAPI::fromJsonValue(m_frame_capture_s3_settings, json[QString("FrameCaptureS3Settings")]);
    m_frame_capture_s3_settings_isSet = !json[QString("FrameCaptureS3Settings")].isNull() && m_frame_capture_s3_settings_isValid;
}

QString OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_frame_capture_s3_settings.isSet()) {
        obj.insert(QString("FrameCaptureS3Settings"), ::OpenAPI::toJsonValue(m_frame_capture_s3_settings));
    }
    return obj;
}

OAIFrameCaptureCdnSettings_FrameCaptureS3Settings OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::getFrameCaptureS3Settings() const {
    return m_frame_capture_s3_settings;
}
void OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::setFrameCaptureS3Settings(const OAIFrameCaptureCdnSettings_FrameCaptureS3Settings &frame_capture_s3_settings) {
    m_frame_capture_s3_settings = frame_capture_s3_settings;
    m_frame_capture_s3_settings_isSet = true;
}

bool OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::is_frame_capture_s3_settings_Set() const{
    return m_frame_capture_s3_settings_isSet;
}

bool OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::is_frame_capture_s3_settings_Valid() const{
    return m_frame_capture_s3_settings_isValid;
}

bool OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frame_capture_s3_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrameCaptureGroupSettings_FrameCaptureCdnSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
