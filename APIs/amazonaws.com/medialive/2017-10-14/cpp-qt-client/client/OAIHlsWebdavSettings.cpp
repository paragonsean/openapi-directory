/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsWebdavSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsWebdavSettings::OAIHlsWebdavSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsWebdavSettings::OAIHlsWebdavSettings() {
    this->initializeModel();
}

OAIHlsWebdavSettings::~OAIHlsWebdavSettings() {}

void OAIHlsWebdavSettings::initializeModel() {

    m_connection_retry_interval_isSet = false;
    m_connection_retry_interval_isValid = false;

    m_filecache_duration_isSet = false;
    m_filecache_duration_isValid = false;

    m_http_transfer_mode_isSet = false;
    m_http_transfer_mode_isValid = false;

    m_num_retries_isSet = false;
    m_num_retries_isValid = false;

    m_restart_delay_isSet = false;
    m_restart_delay_isValid = false;
}

void OAIHlsWebdavSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsWebdavSettings::fromJsonObject(QJsonObject json) {

    m_connection_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_connection_retry_interval, json[QString("ConnectionRetryInterval")]);
    m_connection_retry_interval_isSet = !json[QString("ConnectionRetryInterval")].isNull() && m_connection_retry_interval_isValid;

    m_filecache_duration_isValid = ::OpenAPI::fromJsonValue(m_filecache_duration, json[QString("FilecacheDuration")]);
    m_filecache_duration_isSet = !json[QString("FilecacheDuration")].isNull() && m_filecache_duration_isValid;

    m_http_transfer_mode_isValid = ::OpenAPI::fromJsonValue(m_http_transfer_mode, json[QString("HttpTransferMode")]);
    m_http_transfer_mode_isSet = !json[QString("HttpTransferMode")].isNull() && m_http_transfer_mode_isValid;

    m_num_retries_isValid = ::OpenAPI::fromJsonValue(m_num_retries, json[QString("NumRetries")]);
    m_num_retries_isSet = !json[QString("NumRetries")].isNull() && m_num_retries_isValid;

    m_restart_delay_isValid = ::OpenAPI::fromJsonValue(m_restart_delay, json[QString("RestartDelay")]);
    m_restart_delay_isSet = !json[QString("RestartDelay")].isNull() && m_restart_delay_isValid;
}

QString OAIHlsWebdavSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsWebdavSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_retry_interval_isSet) {
        obj.insert(QString("ConnectionRetryInterval"), ::OpenAPI::toJsonValue(m_connection_retry_interval));
    }
    if (m_filecache_duration_isSet) {
        obj.insert(QString("FilecacheDuration"), ::OpenAPI::toJsonValue(m_filecache_duration));
    }
    if (m_http_transfer_mode.isSet()) {
        obj.insert(QString("HttpTransferMode"), ::OpenAPI::toJsonValue(m_http_transfer_mode));
    }
    if (m_num_retries_isSet) {
        obj.insert(QString("NumRetries"), ::OpenAPI::toJsonValue(m_num_retries));
    }
    if (m_restart_delay_isSet) {
        obj.insert(QString("RestartDelay"), ::OpenAPI::toJsonValue(m_restart_delay));
    }
    return obj;
}

qint32 OAIHlsWebdavSettings::getConnectionRetryInterval() const {
    return m_connection_retry_interval;
}
void OAIHlsWebdavSettings::setConnectionRetryInterval(const qint32 &connection_retry_interval) {
    m_connection_retry_interval = connection_retry_interval;
    m_connection_retry_interval_isSet = true;
}

bool OAIHlsWebdavSettings::is_connection_retry_interval_Set() const{
    return m_connection_retry_interval_isSet;
}

bool OAIHlsWebdavSettings::is_connection_retry_interval_Valid() const{
    return m_connection_retry_interval_isValid;
}

qint32 OAIHlsWebdavSettings::getFilecacheDuration() const {
    return m_filecache_duration;
}
void OAIHlsWebdavSettings::setFilecacheDuration(const qint32 &filecache_duration) {
    m_filecache_duration = filecache_duration;
    m_filecache_duration_isSet = true;
}

bool OAIHlsWebdavSettings::is_filecache_duration_Set() const{
    return m_filecache_duration_isSet;
}

bool OAIHlsWebdavSettings::is_filecache_duration_Valid() const{
    return m_filecache_duration_isValid;
}

OAIHlsWebdavHttpTransferMode OAIHlsWebdavSettings::getHttpTransferMode() const {
    return m_http_transfer_mode;
}
void OAIHlsWebdavSettings::setHttpTransferMode(const OAIHlsWebdavHttpTransferMode &http_transfer_mode) {
    m_http_transfer_mode = http_transfer_mode;
    m_http_transfer_mode_isSet = true;
}

bool OAIHlsWebdavSettings::is_http_transfer_mode_Set() const{
    return m_http_transfer_mode_isSet;
}

bool OAIHlsWebdavSettings::is_http_transfer_mode_Valid() const{
    return m_http_transfer_mode_isValid;
}

qint32 OAIHlsWebdavSettings::getNumRetries() const {
    return m_num_retries;
}
void OAIHlsWebdavSettings::setNumRetries(const qint32 &num_retries) {
    m_num_retries = num_retries;
    m_num_retries_isSet = true;
}

bool OAIHlsWebdavSettings::is_num_retries_Set() const{
    return m_num_retries_isSet;
}

bool OAIHlsWebdavSettings::is_num_retries_Valid() const{
    return m_num_retries_isValid;
}

qint32 OAIHlsWebdavSettings::getRestartDelay() const {
    return m_restart_delay;
}
void OAIHlsWebdavSettings::setRestartDelay(const qint32 &restart_delay) {
    m_restart_delay = restart_delay;
    m_restart_delay_isSet = true;
}

bool OAIHlsWebdavSettings::is_restart_delay_Set() const{
    return m_restart_delay_isSet;
}

bool OAIHlsWebdavSettings::is_restart_delay_Valid() const{
    return m_restart_delay_isValid;
}

bool OAIHlsWebdavSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filecache_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_transfer_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_delay_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsWebdavSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
