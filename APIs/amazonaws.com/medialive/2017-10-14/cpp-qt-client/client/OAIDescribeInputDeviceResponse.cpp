/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInputDeviceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInputDeviceResponse::OAIDescribeInputDeviceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInputDeviceResponse::OAIDescribeInputDeviceResponse() {
    this->initializeModel();
}

OAIDescribeInputDeviceResponse::~OAIDescribeInputDeviceResponse() {}

void OAIDescribeInputDeviceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_device_settings_sync_state_isSet = false;
    m_device_settings_sync_state_isValid = false;

    m_device_update_status_isSet = false;
    m_device_update_status_isValid = false;

    m_hd_device_settings_isSet = false;
    m_hd_device_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_settings_isSet = false;
    m_network_settings_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uhd_device_settings_isSet = false;
    m_uhd_device_settings_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;
}

void OAIDescribeInputDeviceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInputDeviceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("ConnectionState")]);
    m_connection_state_isSet = !json[QString("ConnectionState")].isNull() && m_connection_state_isValid;

    m_device_settings_sync_state_isValid = ::OpenAPI::fromJsonValue(m_device_settings_sync_state, json[QString("DeviceSettingsSyncState")]);
    m_device_settings_sync_state_isSet = !json[QString("DeviceSettingsSyncState")].isNull() && m_device_settings_sync_state_isValid;

    m_device_update_status_isValid = ::OpenAPI::fromJsonValue(m_device_update_status, json[QString("DeviceUpdateStatus")]);
    m_device_update_status_isSet = !json[QString("DeviceUpdateStatus")].isNull() && m_device_update_status_isValid;

    m_hd_device_settings_isValid = ::OpenAPI::fromJsonValue(m_hd_device_settings, json[QString("HdDeviceSettings")]);
    m_hd_device_settings_isSet = !json[QString("HdDeviceSettings")].isNull() && m_hd_device_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("MacAddress")]);
    m_mac_address_isSet = !json[QString("MacAddress")].isNull() && m_mac_address_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_network_settings_isValid = ::OpenAPI::fromJsonValue(m_network_settings, json[QString("NetworkSettings")]);
    m_network_settings_isSet = !json[QString("NetworkSettings")].isNull() && m_network_settings_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_uhd_device_settings_isValid = ::OpenAPI::fromJsonValue(m_uhd_device_settings, json[QString("UhdDeviceSettings")]);
    m_uhd_device_settings_isSet = !json[QString("UhdDeviceSettings")].isNull() && m_uhd_device_settings_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;
}

QString OAIDescribeInputDeviceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInputDeviceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_connection_state.isSet()) {
        obj.insert(QString("ConnectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_device_settings_sync_state.isSet()) {
        obj.insert(QString("DeviceSettingsSyncState"), ::OpenAPI::toJsonValue(m_device_settings_sync_state));
    }
    if (m_device_update_status.isSet()) {
        obj.insert(QString("DeviceUpdateStatus"), ::OpenAPI::toJsonValue(m_device_update_status));
    }
    if (m_hd_device_settings.isSet()) {
        obj.insert(QString("HdDeviceSettings"), ::OpenAPI::toJsonValue(m_hd_device_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("MacAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_settings.isSet()) {
        obj.insert(QString("NetworkSettings"), ::OpenAPI::toJsonValue(m_network_settings));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uhd_device_settings.isSet()) {
        obj.insert(QString("UhdDeviceSettings"), ::OpenAPI::toJsonValue(m_uhd_device_settings));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    return obj;
}

QString OAIDescribeInputDeviceResponse::getArn() const {
    return m_arn;
}
void OAIDescribeInputDeviceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeInputDeviceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIInputDeviceConnectionState OAIDescribeInputDeviceResponse::getConnectionState() const {
    return m_connection_state;
}
void OAIDescribeInputDeviceResponse::setConnectionState(const OAIInputDeviceConnectionState &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIDescribeInputDeviceResponse::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

OAIDeviceSettingsSyncState OAIDescribeInputDeviceResponse::getDeviceSettingsSyncState() const {
    return m_device_settings_sync_state;
}
void OAIDescribeInputDeviceResponse::setDeviceSettingsSyncState(const OAIDeviceSettingsSyncState &device_settings_sync_state) {
    m_device_settings_sync_state = device_settings_sync_state;
    m_device_settings_sync_state_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_device_settings_sync_state_Set() const{
    return m_device_settings_sync_state_isSet;
}

bool OAIDescribeInputDeviceResponse::is_device_settings_sync_state_Valid() const{
    return m_device_settings_sync_state_isValid;
}

OAIDeviceUpdateStatus OAIDescribeInputDeviceResponse::getDeviceUpdateStatus() const {
    return m_device_update_status;
}
void OAIDescribeInputDeviceResponse::setDeviceUpdateStatus(const OAIDeviceUpdateStatus &device_update_status) {
    m_device_update_status = device_update_status;
    m_device_update_status_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_device_update_status_Set() const{
    return m_device_update_status_isSet;
}

bool OAIDescribeInputDeviceResponse::is_device_update_status_Valid() const{
    return m_device_update_status_isValid;
}

OAIDescribeInputDeviceResponse_HdDeviceSettings OAIDescribeInputDeviceResponse::getHdDeviceSettings() const {
    return m_hd_device_settings;
}
void OAIDescribeInputDeviceResponse::setHdDeviceSettings(const OAIDescribeInputDeviceResponse_HdDeviceSettings &hd_device_settings) {
    m_hd_device_settings = hd_device_settings;
    m_hd_device_settings_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_hd_device_settings_Set() const{
    return m_hd_device_settings_isSet;
}

bool OAIDescribeInputDeviceResponse::is_hd_device_settings_Valid() const{
    return m_hd_device_settings_isValid;
}

QString OAIDescribeInputDeviceResponse::getId() const {
    return m_id;
}
void OAIDescribeInputDeviceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeInputDeviceResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeInputDeviceResponse::getMacAddress() const {
    return m_mac_address;
}
void OAIDescribeInputDeviceResponse::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIDescribeInputDeviceResponse::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QString OAIDescribeInputDeviceResponse::getName() const {
    return m_name;
}
void OAIDescribeInputDeviceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeInputDeviceResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIDescribeInputDeviceResponse_NetworkSettings OAIDescribeInputDeviceResponse::getNetworkSettings() const {
    return m_network_settings;
}
void OAIDescribeInputDeviceResponse::setNetworkSettings(const OAIDescribeInputDeviceResponse_NetworkSettings &network_settings) {
    m_network_settings = network_settings;
    m_network_settings_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_network_settings_Set() const{
    return m_network_settings_isSet;
}

bool OAIDescribeInputDeviceResponse::is_network_settings_Valid() const{
    return m_network_settings_isValid;
}

QString OAIDescribeInputDeviceResponse::getSerialNumber() const {
    return m_serial_number;
}
void OAIDescribeInputDeviceResponse::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDescribeInputDeviceResponse::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

OAIInputDeviceType OAIDescribeInputDeviceResponse::getType() const {
    return m_type;
}
void OAIDescribeInputDeviceResponse::setType(const OAIInputDeviceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeInputDeviceResponse::is_type_Valid() const{
    return m_type_isValid;
}

OAIDescribeInputDeviceResponse_UhdDeviceSettings OAIDescribeInputDeviceResponse::getUhdDeviceSettings() const {
    return m_uhd_device_settings;
}
void OAIDescribeInputDeviceResponse::setUhdDeviceSettings(const OAIDescribeInputDeviceResponse_UhdDeviceSettings &uhd_device_settings) {
    m_uhd_device_settings = uhd_device_settings;
    m_uhd_device_settings_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_uhd_device_settings_Set() const{
    return m_uhd_device_settings_isSet;
}

bool OAIDescribeInputDeviceResponse::is_uhd_device_settings_Valid() const{
    return m_uhd_device_settings_isValid;
}

QMap OAIDescribeInputDeviceResponse::getTags() const {
    return m_tags;
}
void OAIDescribeInputDeviceResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeInputDeviceResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeInputDeviceResponse::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIDescribeInputDeviceResponse::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIDescribeInputDeviceResponse::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIDescribeInputDeviceResponse::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

bool OAIDescribeInputDeviceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_settings_sync_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_update_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd_device_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uhd_device_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInputDeviceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
