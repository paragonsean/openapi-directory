/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChannel_request_encoderSettings_BlackoutSlate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChannel_request_encoderSettings_BlackoutSlate::OAICreateChannel_request_encoderSettings_BlackoutSlate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChannel_request_encoderSettings_BlackoutSlate::OAICreateChannel_request_encoderSettings_BlackoutSlate() {
    this->initializeModel();
}

OAICreateChannel_request_encoderSettings_BlackoutSlate::~OAICreateChannel_request_encoderSettings_BlackoutSlate() {}

void OAICreateChannel_request_encoderSettings_BlackoutSlate::initializeModel() {

    m_blackout_slate_image_isSet = false;
    m_blackout_slate_image_isValid = false;

    m_network_end_blackout_isSet = false;
    m_network_end_blackout_isValid = false;

    m_network_end_blackout_image_isSet = false;
    m_network_end_blackout_image_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICreateChannel_request_encoderSettings_BlackoutSlate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChannel_request_encoderSettings_BlackoutSlate::fromJsonObject(QJsonObject json) {

    m_blackout_slate_image_isValid = ::OpenAPI::fromJsonValue(m_blackout_slate_image, json[QString("BlackoutSlateImage")]);
    m_blackout_slate_image_isSet = !json[QString("BlackoutSlateImage")].isNull() && m_blackout_slate_image_isValid;

    m_network_end_blackout_isValid = ::OpenAPI::fromJsonValue(m_network_end_blackout, json[QString("NetworkEndBlackout")]);
    m_network_end_blackout_isSet = !json[QString("NetworkEndBlackout")].isNull() && m_network_end_blackout_isValid;

    m_network_end_blackout_image_isValid = ::OpenAPI::fromJsonValue(m_network_end_blackout_image, json[QString("NetworkEndBlackoutImage")]);
    m_network_end_blackout_image_isSet = !json[QString("NetworkEndBlackoutImage")].isNull() && m_network_end_blackout_image_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("NetworkId")]);
    m_network_id_isSet = !json[QString("NetworkId")].isNull() && m_network_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAICreateChannel_request_encoderSettings_BlackoutSlate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChannel_request_encoderSettings_BlackoutSlate::asJsonObject() const {
    QJsonObject obj;
    if (m_blackout_slate_image.isSet()) {
        obj.insert(QString("BlackoutSlateImage"), ::OpenAPI::toJsonValue(m_blackout_slate_image));
    }
    if (m_network_end_blackout.isSet()) {
        obj.insert(QString("NetworkEndBlackout"), ::OpenAPI::toJsonValue(m_network_end_blackout));
    }
    if (m_network_end_blackout_image.isSet()) {
        obj.insert(QString("NetworkEndBlackoutImage"), ::OpenAPI::toJsonValue(m_network_end_blackout_image));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("NetworkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIBlackoutSlate_BlackoutSlateImage OAICreateChannel_request_encoderSettings_BlackoutSlate::getBlackoutSlateImage() const {
    return m_blackout_slate_image;
}
void OAICreateChannel_request_encoderSettings_BlackoutSlate::setBlackoutSlateImage(const OAIBlackoutSlate_BlackoutSlateImage &blackout_slate_image) {
    m_blackout_slate_image = blackout_slate_image;
    m_blackout_slate_image_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_blackout_slate_image_Set() const{
    return m_blackout_slate_image_isSet;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_blackout_slate_image_Valid() const{
    return m_blackout_slate_image_isValid;
}

OAIBlackoutSlateNetworkEndBlackout OAICreateChannel_request_encoderSettings_BlackoutSlate::getNetworkEndBlackout() const {
    return m_network_end_blackout;
}
void OAICreateChannel_request_encoderSettings_BlackoutSlate::setNetworkEndBlackout(const OAIBlackoutSlateNetworkEndBlackout &network_end_blackout) {
    m_network_end_blackout = network_end_blackout;
    m_network_end_blackout_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_network_end_blackout_Set() const{
    return m_network_end_blackout_isSet;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_network_end_blackout_Valid() const{
    return m_network_end_blackout_isValid;
}

OAIBlackoutSlate_NetworkEndBlackoutImage OAICreateChannel_request_encoderSettings_BlackoutSlate::getNetworkEndBlackoutImage() const {
    return m_network_end_blackout_image;
}
void OAICreateChannel_request_encoderSettings_BlackoutSlate::setNetworkEndBlackoutImage(const OAIBlackoutSlate_NetworkEndBlackoutImage &network_end_blackout_image) {
    m_network_end_blackout_image = network_end_blackout_image;
    m_network_end_blackout_image_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_network_end_blackout_image_Set() const{
    return m_network_end_blackout_image_isSet;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_network_end_blackout_image_Valid() const{
    return m_network_end_blackout_image_isValid;
}

QString OAICreateChannel_request_encoderSettings_BlackoutSlate::getNetworkId() const {
    return m_network_id;
}
void OAICreateChannel_request_encoderSettings_BlackoutSlate::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_network_id_Valid() const{
    return m_network_id_isValid;
}

OAIBlackoutSlateState OAICreateChannel_request_encoderSettings_BlackoutSlate::getState() const {
    return m_state;
}
void OAICreateChannel_request_encoderSettings_BlackoutSlate::setState(const OAIBlackoutSlateState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blackout_slate_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_end_blackout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_end_blackout_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChannel_request_encoderSettings_BlackoutSlate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
