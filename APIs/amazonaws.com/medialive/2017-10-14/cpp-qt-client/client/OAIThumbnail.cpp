/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThumbnail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThumbnail::OAIThumbnail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThumbnail::OAIThumbnail() {
    this->initializeModel();
}

OAIThumbnail::~OAIThumbnail() {}

void OAIThumbnail::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_thumbnail_type_isSet = false;
    m_thumbnail_type_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIThumbnail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThumbnail::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_thumbnail_type_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_type, json[QString("ThumbnailType")]);
    m_thumbnail_type_isSet = !json[QString("ThumbnailType")].isNull() && m_thumbnail_type_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIThumbnail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThumbnail::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_thumbnail_type.isSet()) {
        obj.insert(QString("ThumbnailType"), ::OpenAPI::toJsonValue(m_thumbnail_type));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

QString OAIThumbnail::getBody() const {
    return m_body;
}
void OAIThumbnail::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIThumbnail::is_body_Set() const{
    return m_body_isSet;
}

bool OAIThumbnail::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIThumbnail::getContentType() const {
    return m_content_type;
}
void OAIThumbnail::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIThumbnail::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIThumbnail::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIThumbnailType OAIThumbnail::getThumbnailType() const {
    return m_thumbnail_type;
}
void OAIThumbnail::setThumbnailType(const OAIThumbnailType &thumbnail_type) {
    m_thumbnail_type = thumbnail_type;
    m_thumbnail_type_isSet = true;
}

bool OAIThumbnail::is_thumbnail_type_Set() const{
    return m_thumbnail_type_isSet;
}

bool OAIThumbnail::is_thumbnail_type_Valid() const{
    return m_thumbnail_type_isValid;
}

QDateTime OAIThumbnail::getTimeStamp() const {
    return m_time_stamp;
}
void OAIThumbnail::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIThumbnail::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIThumbnail::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIThumbnail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThumbnail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
