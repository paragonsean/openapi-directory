/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchiveGroupSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchiveGroupSettings::OAIArchiveGroupSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchiveGroupSettings::OAIArchiveGroupSettings() {
    this->initializeModel();
}

OAIArchiveGroupSettings::~OAIArchiveGroupSettings() {}

void OAIArchiveGroupSettings::initializeModel() {

    m_archive_cdn_settings_isSet = false;
    m_archive_cdn_settings_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_rollover_interval_isSet = false;
    m_rollover_interval_isValid = false;
}

void OAIArchiveGroupSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArchiveGroupSettings::fromJsonObject(QJsonObject json) {

    m_archive_cdn_settings_isValid = ::OpenAPI::fromJsonValue(m_archive_cdn_settings, json[QString("ArchiveCdnSettings")]);
    m_archive_cdn_settings_isSet = !json[QString("ArchiveCdnSettings")].isNull() && m_archive_cdn_settings_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_rollover_interval_isValid = ::OpenAPI::fromJsonValue(m_rollover_interval, json[QString("RolloverInterval")]);
    m_rollover_interval_isSet = !json[QString("RolloverInterval")].isNull() && m_rollover_interval_isValid;
}

QString OAIArchiveGroupSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArchiveGroupSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_cdn_settings.isSet()) {
        obj.insert(QString("ArchiveCdnSettings"), ::OpenAPI::toJsonValue(m_archive_cdn_settings));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_rollover_interval_isSet) {
        obj.insert(QString("RolloverInterval"), ::OpenAPI::toJsonValue(m_rollover_interval));
    }
    return obj;
}

OAIArchiveGroupSettings_ArchiveCdnSettings OAIArchiveGroupSettings::getArchiveCdnSettings() const {
    return m_archive_cdn_settings;
}
void OAIArchiveGroupSettings::setArchiveCdnSettings(const OAIArchiveGroupSettings_ArchiveCdnSettings &archive_cdn_settings) {
    m_archive_cdn_settings = archive_cdn_settings;
    m_archive_cdn_settings_isSet = true;
}

bool OAIArchiveGroupSettings::is_archive_cdn_settings_Set() const{
    return m_archive_cdn_settings_isSet;
}

bool OAIArchiveGroupSettings::is_archive_cdn_settings_Valid() const{
    return m_archive_cdn_settings_isValid;
}

OAIArchiveGroupSettings_Destination OAIArchiveGroupSettings::getDestination() const {
    return m_destination;
}
void OAIArchiveGroupSettings::setDestination(const OAIArchiveGroupSettings_Destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIArchiveGroupSettings::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIArchiveGroupSettings::is_destination_Valid() const{
    return m_destination_isValid;
}

qint32 OAIArchiveGroupSettings::getRolloverInterval() const {
    return m_rollover_interval;
}
void OAIArchiveGroupSettings::setRolloverInterval(const qint32 &rollover_interval) {
    m_rollover_interval = rollover_interval;
    m_rollover_interval_isSet = true;
}

bool OAIArchiveGroupSettings::is_rollover_interval_Set() const{
    return m_rollover_interval_isSet;
}

bool OAIArchiveGroupSettings::is_rollover_interval_Valid() const{
    return m_rollover_interval_isValid;
}

bool OAIArchiveGroupSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_cdn_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArchiveGroupSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && true;
}

} // namespace OpenAPI
