/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputSwitchScheduleActionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputSwitchScheduleActionSettings::OAIInputSwitchScheduleActionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputSwitchScheduleActionSettings::OAIInputSwitchScheduleActionSettings() {
    this->initializeModel();
}

OAIInputSwitchScheduleActionSettings::~OAIInputSwitchScheduleActionSettings() {}

void OAIInputSwitchScheduleActionSettings::initializeModel() {

    m_input_attachment_name_reference_isSet = false;
    m_input_attachment_name_reference_isValid = false;

    m_input_clipping_settings_isSet = false;
    m_input_clipping_settings_isValid = false;

    m_url_path_isSet = false;
    m_url_path_isValid = false;
}

void OAIInputSwitchScheduleActionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputSwitchScheduleActionSettings::fromJsonObject(QJsonObject json) {

    m_input_attachment_name_reference_isValid = ::OpenAPI::fromJsonValue(m_input_attachment_name_reference, json[QString("InputAttachmentNameReference")]);
    m_input_attachment_name_reference_isSet = !json[QString("InputAttachmentNameReference")].isNull() && m_input_attachment_name_reference_isValid;

    m_input_clipping_settings_isValid = ::OpenAPI::fromJsonValue(m_input_clipping_settings, json[QString("InputClippingSettings")]);
    m_input_clipping_settings_isSet = !json[QString("InputClippingSettings")].isNull() && m_input_clipping_settings_isValid;

    m_url_path_isValid = ::OpenAPI::fromJsonValue(m_url_path, json[QString("UrlPath")]);
    m_url_path_isSet = !json[QString("UrlPath")].isNull() && m_url_path_isValid;
}

QString OAIInputSwitchScheduleActionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputSwitchScheduleActionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_input_attachment_name_reference_isSet) {
        obj.insert(QString("InputAttachmentNameReference"), ::OpenAPI::toJsonValue(m_input_attachment_name_reference));
    }
    if (m_input_clipping_settings.isSet()) {
        obj.insert(QString("InputClippingSettings"), ::OpenAPI::toJsonValue(m_input_clipping_settings));
    }
    if (m_url_path.isSet()) {
        obj.insert(QString("UrlPath"), ::OpenAPI::toJsonValue(m_url_path));
    }
    return obj;
}

QString OAIInputSwitchScheduleActionSettings::getInputAttachmentNameReference() const {
    return m_input_attachment_name_reference;
}
void OAIInputSwitchScheduleActionSettings::setInputAttachmentNameReference(const QString &input_attachment_name_reference) {
    m_input_attachment_name_reference = input_attachment_name_reference;
    m_input_attachment_name_reference_isSet = true;
}

bool OAIInputSwitchScheduleActionSettings::is_input_attachment_name_reference_Set() const{
    return m_input_attachment_name_reference_isSet;
}

bool OAIInputSwitchScheduleActionSettings::is_input_attachment_name_reference_Valid() const{
    return m_input_attachment_name_reference_isValid;
}

OAIInputPrepareScheduleActionSettings_InputClippingSettings OAIInputSwitchScheduleActionSettings::getInputClippingSettings() const {
    return m_input_clipping_settings;
}
void OAIInputSwitchScheduleActionSettings::setInputClippingSettings(const OAIInputPrepareScheduleActionSettings_InputClippingSettings &input_clipping_settings) {
    m_input_clipping_settings = input_clipping_settings;
    m_input_clipping_settings_isSet = true;
}

bool OAIInputSwitchScheduleActionSettings::is_input_clipping_settings_Set() const{
    return m_input_clipping_settings_isSet;
}

bool OAIInputSwitchScheduleActionSettings::is_input_clipping_settings_Valid() const{
    return m_input_clipping_settings_isValid;
}

QList OAIInputSwitchScheduleActionSettings::getUrlPath() const {
    return m_url_path;
}
void OAIInputSwitchScheduleActionSettings::setUrlPath(const QList &url_path) {
    m_url_path = url_path;
    m_url_path_isSet = true;
}

bool OAIInputSwitchScheduleActionSettings::is_url_path_Set() const{
    return m_url_path_isSet;
}

bool OAIInputSwitchScheduleActionSettings::is_url_path_Valid() const{
    return m_url_path_isValid;
}

bool OAIInputSwitchScheduleActionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_attachment_name_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_clipping_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputSwitchScheduleActionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_attachment_name_reference_isValid && true;
}

} // namespace OpenAPI
