/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIH265ColorSpaceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIH265ColorSpaceSettings::OAIH265ColorSpaceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIH265ColorSpaceSettings::OAIH265ColorSpaceSettings() {
    this->initializeModel();
}

OAIH265ColorSpaceSettings::~OAIH265ColorSpaceSettings() {}

void OAIH265ColorSpaceSettings::initializeModel() {

    m_color_space_passthrough_settings_isSet = false;
    m_color_space_passthrough_settings_isValid = false;

    m_dolby_vision81_settings_isSet = false;
    m_dolby_vision81_settings_isValid = false;

    m_hdr10_settings_isSet = false;
    m_hdr10_settings_isValid = false;

    m_rec601_settings_isSet = false;
    m_rec601_settings_isValid = false;

    m_rec709_settings_isSet = false;
    m_rec709_settings_isValid = false;
}

void OAIH265ColorSpaceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIH265ColorSpaceSettings::fromJsonObject(QJsonObject json) {

    m_color_space_passthrough_settings_isValid = ::OpenAPI::fromJsonValue(m_color_space_passthrough_settings, json[QString("ColorSpacePassthroughSettings")]);
    m_color_space_passthrough_settings_isSet = !json[QString("ColorSpacePassthroughSettings")].isNull() && m_color_space_passthrough_settings_isValid;

    m_dolby_vision81_settings_isValid = ::OpenAPI::fromJsonValue(m_dolby_vision81_settings, json[QString("DolbyVision81Settings")]);
    m_dolby_vision81_settings_isSet = !json[QString("DolbyVision81Settings")].isNull() && m_dolby_vision81_settings_isValid;

    m_hdr10_settings_isValid = ::OpenAPI::fromJsonValue(m_hdr10_settings, json[QString("Hdr10Settings")]);
    m_hdr10_settings_isSet = !json[QString("Hdr10Settings")].isNull() && m_hdr10_settings_isValid;

    m_rec601_settings_isValid = ::OpenAPI::fromJsonValue(m_rec601_settings, json[QString("Rec601Settings")]);
    m_rec601_settings_isSet = !json[QString("Rec601Settings")].isNull() && m_rec601_settings_isValid;

    m_rec709_settings_isValid = ::OpenAPI::fromJsonValue(m_rec709_settings, json[QString("Rec709Settings")]);
    m_rec709_settings_isSet = !json[QString("Rec709Settings")].isNull() && m_rec709_settings_isValid;
}

QString OAIH265ColorSpaceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIH265ColorSpaceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_color_space_passthrough_settings.isSet()) {
        obj.insert(QString("ColorSpacePassthroughSettings"), ::OpenAPI::toJsonValue(m_color_space_passthrough_settings));
    }
    if (m_dolby_vision81_settings.isSet()) {
        obj.insert(QString("DolbyVision81Settings"), ::OpenAPI::toJsonValue(m_dolby_vision81_settings));
    }
    if (m_hdr10_settings.isSet()) {
        obj.insert(QString("Hdr10Settings"), ::OpenAPI::toJsonValue(m_hdr10_settings));
    }
    if (m_rec601_settings.isSet()) {
        obj.insert(QString("Rec601Settings"), ::OpenAPI::toJsonValue(m_rec601_settings));
    }
    if (m_rec709_settings.isSet()) {
        obj.insert(QString("Rec709Settings"), ::OpenAPI::toJsonValue(m_rec709_settings));
    }
    return obj;
}

OAIObject OAIH265ColorSpaceSettings::getColorSpacePassthroughSettings() const {
    return m_color_space_passthrough_settings;
}
void OAIH265ColorSpaceSettings::setColorSpacePassthroughSettings(const OAIObject &color_space_passthrough_settings) {
    m_color_space_passthrough_settings = color_space_passthrough_settings;
    m_color_space_passthrough_settings_isSet = true;
}

bool OAIH265ColorSpaceSettings::is_color_space_passthrough_settings_Set() const{
    return m_color_space_passthrough_settings_isSet;
}

bool OAIH265ColorSpaceSettings::is_color_space_passthrough_settings_Valid() const{
    return m_color_space_passthrough_settings_isValid;
}

OAIObject OAIH265ColorSpaceSettings::getDolbyVision81Settings() const {
    return m_dolby_vision81_settings;
}
void OAIH265ColorSpaceSettings::setDolbyVision81Settings(const OAIObject &dolby_vision81_settings) {
    m_dolby_vision81_settings = dolby_vision81_settings;
    m_dolby_vision81_settings_isSet = true;
}

bool OAIH265ColorSpaceSettings::is_dolby_vision81_settings_Set() const{
    return m_dolby_vision81_settings_isSet;
}

bool OAIH265ColorSpaceSettings::is_dolby_vision81_settings_Valid() const{
    return m_dolby_vision81_settings_isValid;
}

OAIH265ColorSpaceSettings_Hdr10Settings OAIH265ColorSpaceSettings::getHdr10Settings() const {
    return m_hdr10_settings;
}
void OAIH265ColorSpaceSettings::setHdr10Settings(const OAIH265ColorSpaceSettings_Hdr10Settings &hdr10_settings) {
    m_hdr10_settings = hdr10_settings;
    m_hdr10_settings_isSet = true;
}

bool OAIH265ColorSpaceSettings::is_hdr10_settings_Set() const{
    return m_hdr10_settings_isSet;
}

bool OAIH265ColorSpaceSettings::is_hdr10_settings_Valid() const{
    return m_hdr10_settings_isValid;
}

OAIObject OAIH265ColorSpaceSettings::getRec601Settings() const {
    return m_rec601_settings;
}
void OAIH265ColorSpaceSettings::setRec601Settings(const OAIObject &rec601_settings) {
    m_rec601_settings = rec601_settings;
    m_rec601_settings_isSet = true;
}

bool OAIH265ColorSpaceSettings::is_rec601_settings_Set() const{
    return m_rec601_settings_isSet;
}

bool OAIH265ColorSpaceSettings::is_rec601_settings_Valid() const{
    return m_rec601_settings_isValid;
}

OAIObject OAIH265ColorSpaceSettings::getRec709Settings() const {
    return m_rec709_settings;
}
void OAIH265ColorSpaceSettings::setRec709Settings(const OAIObject &rec709_settings) {
    m_rec709_settings = rec709_settings;
    m_rec709_settings_isSet = true;
}

bool OAIH265ColorSpaceSettings::is_rec709_settings_Set() const{
    return m_rec709_settings_isSet;
}

bool OAIH265ColorSpaceSettings::is_rec709_settings_Valid() const{
    return m_rec709_settings_isValid;
}

bool OAIH265ColorSpaceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_space_passthrough_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dolby_vision81_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdr10_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rec601_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rec709_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIH265ColorSpaceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
