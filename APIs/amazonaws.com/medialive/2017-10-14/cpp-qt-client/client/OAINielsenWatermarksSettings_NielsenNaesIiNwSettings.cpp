/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINielsenWatermarksSettings_NielsenNaesIiNwSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::OAINielsenWatermarksSettings_NielsenNaesIiNwSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::OAINielsenWatermarksSettings_NielsenNaesIiNwSettings() {
    this->initializeModel();
}

OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::~OAINielsenWatermarksSettings_NielsenNaesIiNwSettings() {}

void OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::initializeModel() {

    m_check_digit_string_isSet = false;
    m_check_digit_string_isValid = false;

    m_sid_isSet = false;
    m_sid_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::fromJsonObject(QJsonObject json) {

    m_check_digit_string_isValid = ::OpenAPI::fromJsonValue(m_check_digit_string, json[QString("CheckDigitString")]);
    m_check_digit_string_isSet = !json[QString("CheckDigitString")].isNull() && m_check_digit_string_isValid;

    m_sid_isValid = ::OpenAPI::fromJsonValue(m_sid, json[QString("Sid")]);
    m_sid_isSet = !json[QString("Sid")].isNull() && m_sid_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;
}

QString OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_check_digit_string_isSet) {
        obj.insert(QString("CheckDigitString"), ::OpenAPI::toJsonValue(m_check_digit_string));
    }
    if (m_sid_isSet) {
        obj.insert(QString("Sid"), ::OpenAPI::toJsonValue(m_sid));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::getCheckDigitString() const {
    return m_check_digit_string;
}
void OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::setCheckDigitString(const QString &check_digit_string) {
    m_check_digit_string = check_digit_string;
    m_check_digit_string_isSet = true;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::is_check_digit_string_Set() const{
    return m_check_digit_string_isSet;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::is_check_digit_string_Valid() const{
    return m_check_digit_string_isValid;
}

double OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::getSid() const {
    return m_sid;
}
void OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::setSid(const double &sid) {
    m_sid = sid;
    m_sid_isSet = true;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::is_sid_Set() const{
    return m_sid_isSet;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::is_sid_Valid() const{
    return m_sid_isValid;
}

OAINielsenWatermarkTimezones OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::getTimezone() const {
    return m_timezone;
}
void OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::setTimezone(const OAINielsenWatermarkTimezones &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_digit_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINielsenWatermarksSettings_NielsenNaesIiNwSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_check_digit_string_isValid && m_sid_isValid && true;
}

} // namespace OpenAPI
