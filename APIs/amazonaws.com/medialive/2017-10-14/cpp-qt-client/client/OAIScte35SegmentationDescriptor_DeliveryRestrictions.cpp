/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScte35SegmentationDescriptor_DeliveryRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScte35SegmentationDescriptor_DeliveryRestrictions::OAIScte35SegmentationDescriptor_DeliveryRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScte35SegmentationDescriptor_DeliveryRestrictions::OAIScte35SegmentationDescriptor_DeliveryRestrictions() {
    this->initializeModel();
}

OAIScte35SegmentationDescriptor_DeliveryRestrictions::~OAIScte35SegmentationDescriptor_DeliveryRestrictions() {}

void OAIScte35SegmentationDescriptor_DeliveryRestrictions::initializeModel() {

    m_archive_allowed_flag_isSet = false;
    m_archive_allowed_flag_isValid = false;

    m_device_restrictions_isSet = false;
    m_device_restrictions_isValid = false;

    m_no_regional_blackout_flag_isSet = false;
    m_no_regional_blackout_flag_isValid = false;

    m_web_delivery_allowed_flag_isSet = false;
    m_web_delivery_allowed_flag_isValid = false;
}

void OAIScte35SegmentationDescriptor_DeliveryRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScte35SegmentationDescriptor_DeliveryRestrictions::fromJsonObject(QJsonObject json) {

    m_archive_allowed_flag_isValid = ::OpenAPI::fromJsonValue(m_archive_allowed_flag, json[QString("ArchiveAllowedFlag")]);
    m_archive_allowed_flag_isSet = !json[QString("ArchiveAllowedFlag")].isNull() && m_archive_allowed_flag_isValid;

    m_device_restrictions_isValid = ::OpenAPI::fromJsonValue(m_device_restrictions, json[QString("DeviceRestrictions")]);
    m_device_restrictions_isSet = !json[QString("DeviceRestrictions")].isNull() && m_device_restrictions_isValid;

    m_no_regional_blackout_flag_isValid = ::OpenAPI::fromJsonValue(m_no_regional_blackout_flag, json[QString("NoRegionalBlackoutFlag")]);
    m_no_regional_blackout_flag_isSet = !json[QString("NoRegionalBlackoutFlag")].isNull() && m_no_regional_blackout_flag_isValid;

    m_web_delivery_allowed_flag_isValid = ::OpenAPI::fromJsonValue(m_web_delivery_allowed_flag, json[QString("WebDeliveryAllowedFlag")]);
    m_web_delivery_allowed_flag_isSet = !json[QString("WebDeliveryAllowedFlag")].isNull() && m_web_delivery_allowed_flag_isValid;
}

QString OAIScte35SegmentationDescriptor_DeliveryRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScte35SegmentationDescriptor_DeliveryRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_allowed_flag.isSet()) {
        obj.insert(QString("ArchiveAllowedFlag"), ::OpenAPI::toJsonValue(m_archive_allowed_flag));
    }
    if (m_device_restrictions.isSet()) {
        obj.insert(QString("DeviceRestrictions"), ::OpenAPI::toJsonValue(m_device_restrictions));
    }
    if (m_no_regional_blackout_flag.isSet()) {
        obj.insert(QString("NoRegionalBlackoutFlag"), ::OpenAPI::toJsonValue(m_no_regional_blackout_flag));
    }
    if (m_web_delivery_allowed_flag.isSet()) {
        obj.insert(QString("WebDeliveryAllowedFlag"), ::OpenAPI::toJsonValue(m_web_delivery_allowed_flag));
    }
    return obj;
}

OAIScte35ArchiveAllowedFlag OAIScte35SegmentationDescriptor_DeliveryRestrictions::getArchiveAllowedFlag() const {
    return m_archive_allowed_flag;
}
void OAIScte35SegmentationDescriptor_DeliveryRestrictions::setArchiveAllowedFlag(const OAIScte35ArchiveAllowedFlag &archive_allowed_flag) {
    m_archive_allowed_flag = archive_allowed_flag;
    m_archive_allowed_flag_isSet = true;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_archive_allowed_flag_Set() const{
    return m_archive_allowed_flag_isSet;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_archive_allowed_flag_Valid() const{
    return m_archive_allowed_flag_isValid;
}

OAIScte35DeviceRestrictions OAIScte35SegmentationDescriptor_DeliveryRestrictions::getDeviceRestrictions() const {
    return m_device_restrictions;
}
void OAIScte35SegmentationDescriptor_DeliveryRestrictions::setDeviceRestrictions(const OAIScte35DeviceRestrictions &device_restrictions) {
    m_device_restrictions = device_restrictions;
    m_device_restrictions_isSet = true;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_device_restrictions_Set() const{
    return m_device_restrictions_isSet;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_device_restrictions_Valid() const{
    return m_device_restrictions_isValid;
}

OAIScte35NoRegionalBlackoutFlag OAIScte35SegmentationDescriptor_DeliveryRestrictions::getNoRegionalBlackoutFlag() const {
    return m_no_regional_blackout_flag;
}
void OAIScte35SegmentationDescriptor_DeliveryRestrictions::setNoRegionalBlackoutFlag(const OAIScte35NoRegionalBlackoutFlag &no_regional_blackout_flag) {
    m_no_regional_blackout_flag = no_regional_blackout_flag;
    m_no_regional_blackout_flag_isSet = true;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_no_regional_blackout_flag_Set() const{
    return m_no_regional_blackout_flag_isSet;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_no_regional_blackout_flag_Valid() const{
    return m_no_regional_blackout_flag_isValid;
}

OAIScte35WebDeliveryAllowedFlag OAIScte35SegmentationDescriptor_DeliveryRestrictions::getWebDeliveryAllowedFlag() const {
    return m_web_delivery_allowed_flag;
}
void OAIScte35SegmentationDescriptor_DeliveryRestrictions::setWebDeliveryAllowedFlag(const OAIScte35WebDeliveryAllowedFlag &web_delivery_allowed_flag) {
    m_web_delivery_allowed_flag = web_delivery_allowed_flag;
    m_web_delivery_allowed_flag_isSet = true;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_web_delivery_allowed_flag_Set() const{
    return m_web_delivery_allowed_flag_isSet;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::is_web_delivery_allowed_flag_Valid() const{
    return m_web_delivery_allowed_flag_isValid;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_allowed_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_regional_blackout_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_delivery_allowed_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScte35SegmentationDescriptor_DeliveryRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archive_allowed_flag_isValid && m_device_restrictions_isValid && m_no_regional_blackout_flag_isValid && m_web_delivery_allowed_flag_isValid && true;
}

} // namespace OpenAPI
