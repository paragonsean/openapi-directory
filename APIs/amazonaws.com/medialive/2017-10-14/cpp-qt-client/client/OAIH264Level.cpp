/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIH264Level.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIH264Level::OAIH264Level(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIH264Level::OAIH264Level() {
    this->initializeModel();
}

OAIH264Level::~OAIH264Level() {}

void OAIH264Level::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIH264Level::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIH264Level::fromJson(QString jsonString) {
    
    if ( jsonString.compare("H264_LEVEL_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_1_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_1_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_1_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_1_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_1_3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_1_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_2_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_2_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_2_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_2_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_3_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_3_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_3_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_3_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_4_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_4_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_4_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_4_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_5", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_5_1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_5_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_5_2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::_5_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("H264_LEVEL_AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIH264Level::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIH264Level::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIH264Level::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIH264Level::_1:
            val = "H264_LEVEL_1";
            break;
        case eOAIH264Level::_1_1:
            val = "H264_LEVEL_1_1";
            break;
        case eOAIH264Level::_1_2:
            val = "H264_LEVEL_1_2";
            break;
        case eOAIH264Level::_1_3:
            val = "H264_LEVEL_1_3";
            break;
        case eOAIH264Level::_2:
            val = "H264_LEVEL_2";
            break;
        case eOAIH264Level::_2_1:
            val = "H264_LEVEL_2_1";
            break;
        case eOAIH264Level::_2_2:
            val = "H264_LEVEL_2_2";
            break;
        case eOAIH264Level::_3:
            val = "H264_LEVEL_3";
            break;
        case eOAIH264Level::_3_1:
            val = "H264_LEVEL_3_1";
            break;
        case eOAIH264Level::_3_2:
            val = "H264_LEVEL_3_2";
            break;
        case eOAIH264Level::_4:
            val = "H264_LEVEL_4";
            break;
        case eOAIH264Level::_4_1:
            val = "H264_LEVEL_4_1";
            break;
        case eOAIH264Level::_4_2:
            val = "H264_LEVEL_4_2";
            break;
        case eOAIH264Level::_5:
            val = "H264_LEVEL_5";
            break;
        case eOAIH264Level::_5_1:
            val = "H264_LEVEL_5_1";
            break;
        case eOAIH264Level::_5_2:
            val = "H264_LEVEL_5_2";
            break;
        case eOAIH264Level::AUTO:
            val = "H264_LEVEL_AUTO";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIH264Level::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIH264Level::eOAIH264Level OAIH264Level::getValue() const {
    return m_value;
}

void OAIH264Level::setValue(const OAIH264Level::eOAIH264Level& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIH264Level::isSet() const {
    
    return m_value_isSet;
}

bool OAIH264Level::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
