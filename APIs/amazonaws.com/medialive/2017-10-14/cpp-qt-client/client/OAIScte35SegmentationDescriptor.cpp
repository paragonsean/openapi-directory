/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScte35SegmentationDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScte35SegmentationDescriptor::OAIScte35SegmentationDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScte35SegmentationDescriptor::OAIScte35SegmentationDescriptor() {
    this->initializeModel();
}

OAIScte35SegmentationDescriptor::~OAIScte35SegmentationDescriptor() {}

void OAIScte35SegmentationDescriptor::initializeModel() {

    m_delivery_restrictions_isSet = false;
    m_delivery_restrictions_isValid = false;

    m_segment_num_isSet = false;
    m_segment_num_isValid = false;

    m_segmentation_cancel_indicator_isSet = false;
    m_segmentation_cancel_indicator_isValid = false;

    m_segmentation_duration_isSet = false;
    m_segmentation_duration_isValid = false;

    m_segmentation_event_id_isSet = false;
    m_segmentation_event_id_isValid = false;

    m_segmentation_type_id_isSet = false;
    m_segmentation_type_id_isValid = false;

    m_segmentation_upid_isSet = false;
    m_segmentation_upid_isValid = false;

    m_segmentation_upid_type_isSet = false;
    m_segmentation_upid_type_isValid = false;

    m_segments_expected_isSet = false;
    m_segments_expected_isValid = false;

    m_sub_segment_num_isSet = false;
    m_sub_segment_num_isValid = false;

    m_sub_segments_expected_isSet = false;
    m_sub_segments_expected_isValid = false;
}

void OAIScte35SegmentationDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScte35SegmentationDescriptor::fromJsonObject(QJsonObject json) {

    m_delivery_restrictions_isValid = ::OpenAPI::fromJsonValue(m_delivery_restrictions, json[QString("DeliveryRestrictions")]);
    m_delivery_restrictions_isSet = !json[QString("DeliveryRestrictions")].isNull() && m_delivery_restrictions_isValid;

    m_segment_num_isValid = ::OpenAPI::fromJsonValue(m_segment_num, json[QString("SegmentNum")]);
    m_segment_num_isSet = !json[QString("SegmentNum")].isNull() && m_segment_num_isValid;

    m_segmentation_cancel_indicator_isValid = ::OpenAPI::fromJsonValue(m_segmentation_cancel_indicator, json[QString("SegmentationCancelIndicator")]);
    m_segmentation_cancel_indicator_isSet = !json[QString("SegmentationCancelIndicator")].isNull() && m_segmentation_cancel_indicator_isValid;

    m_segmentation_duration_isValid = ::OpenAPI::fromJsonValue(m_segmentation_duration, json[QString("SegmentationDuration")]);
    m_segmentation_duration_isSet = !json[QString("SegmentationDuration")].isNull() && m_segmentation_duration_isValid;

    m_segmentation_event_id_isValid = ::OpenAPI::fromJsonValue(m_segmentation_event_id, json[QString("SegmentationEventId")]);
    m_segmentation_event_id_isSet = !json[QString("SegmentationEventId")].isNull() && m_segmentation_event_id_isValid;

    m_segmentation_type_id_isValid = ::OpenAPI::fromJsonValue(m_segmentation_type_id, json[QString("SegmentationTypeId")]);
    m_segmentation_type_id_isSet = !json[QString("SegmentationTypeId")].isNull() && m_segmentation_type_id_isValid;

    m_segmentation_upid_isValid = ::OpenAPI::fromJsonValue(m_segmentation_upid, json[QString("SegmentationUpid")]);
    m_segmentation_upid_isSet = !json[QString("SegmentationUpid")].isNull() && m_segmentation_upid_isValid;

    m_segmentation_upid_type_isValid = ::OpenAPI::fromJsonValue(m_segmentation_upid_type, json[QString("SegmentationUpidType")]);
    m_segmentation_upid_type_isSet = !json[QString("SegmentationUpidType")].isNull() && m_segmentation_upid_type_isValid;

    m_segments_expected_isValid = ::OpenAPI::fromJsonValue(m_segments_expected, json[QString("SegmentsExpected")]);
    m_segments_expected_isSet = !json[QString("SegmentsExpected")].isNull() && m_segments_expected_isValid;

    m_sub_segment_num_isValid = ::OpenAPI::fromJsonValue(m_sub_segment_num, json[QString("SubSegmentNum")]);
    m_sub_segment_num_isSet = !json[QString("SubSegmentNum")].isNull() && m_sub_segment_num_isValid;

    m_sub_segments_expected_isValid = ::OpenAPI::fromJsonValue(m_sub_segments_expected, json[QString("SubSegmentsExpected")]);
    m_sub_segments_expected_isSet = !json[QString("SubSegmentsExpected")].isNull() && m_sub_segments_expected_isValid;
}

QString OAIScte35SegmentationDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScte35SegmentationDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_restrictions.isSet()) {
        obj.insert(QString("DeliveryRestrictions"), ::OpenAPI::toJsonValue(m_delivery_restrictions));
    }
    if (m_segment_num_isSet) {
        obj.insert(QString("SegmentNum"), ::OpenAPI::toJsonValue(m_segment_num));
    }
    if (m_segmentation_cancel_indicator.isSet()) {
        obj.insert(QString("SegmentationCancelIndicator"), ::OpenAPI::toJsonValue(m_segmentation_cancel_indicator));
    }
    if (m_segmentation_duration_isSet) {
        obj.insert(QString("SegmentationDuration"), ::OpenAPI::toJsonValue(m_segmentation_duration));
    }
    if (m_segmentation_event_id_isSet) {
        obj.insert(QString("SegmentationEventId"), ::OpenAPI::toJsonValue(m_segmentation_event_id));
    }
    if (m_segmentation_type_id_isSet) {
        obj.insert(QString("SegmentationTypeId"), ::OpenAPI::toJsonValue(m_segmentation_type_id));
    }
    if (m_segmentation_upid_isSet) {
        obj.insert(QString("SegmentationUpid"), ::OpenAPI::toJsonValue(m_segmentation_upid));
    }
    if (m_segmentation_upid_type_isSet) {
        obj.insert(QString("SegmentationUpidType"), ::OpenAPI::toJsonValue(m_segmentation_upid_type));
    }
    if (m_segments_expected_isSet) {
        obj.insert(QString("SegmentsExpected"), ::OpenAPI::toJsonValue(m_segments_expected));
    }
    if (m_sub_segment_num_isSet) {
        obj.insert(QString("SubSegmentNum"), ::OpenAPI::toJsonValue(m_sub_segment_num));
    }
    if (m_sub_segments_expected_isSet) {
        obj.insert(QString("SubSegmentsExpected"), ::OpenAPI::toJsonValue(m_sub_segments_expected));
    }
    return obj;
}

OAIScte35SegmentationDescriptor_DeliveryRestrictions OAIScte35SegmentationDescriptor::getDeliveryRestrictions() const {
    return m_delivery_restrictions;
}
void OAIScte35SegmentationDescriptor::setDeliveryRestrictions(const OAIScte35SegmentationDescriptor_DeliveryRestrictions &delivery_restrictions) {
    m_delivery_restrictions = delivery_restrictions;
    m_delivery_restrictions_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_delivery_restrictions_Set() const{
    return m_delivery_restrictions_isSet;
}

bool OAIScte35SegmentationDescriptor::is_delivery_restrictions_Valid() const{
    return m_delivery_restrictions_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSegmentNum() const {
    return m_segment_num;
}
void OAIScte35SegmentationDescriptor::setSegmentNum(const qint32 &segment_num) {
    m_segment_num = segment_num;
    m_segment_num_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segment_num_Set() const{
    return m_segment_num_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segment_num_Valid() const{
    return m_segment_num_isValid;
}

OAIScte35SegmentationCancelIndicator OAIScte35SegmentationDescriptor::getSegmentationCancelIndicator() const {
    return m_segmentation_cancel_indicator;
}
void OAIScte35SegmentationDescriptor::setSegmentationCancelIndicator(const OAIScte35SegmentationCancelIndicator &segmentation_cancel_indicator) {
    m_segmentation_cancel_indicator = segmentation_cancel_indicator;
    m_segmentation_cancel_indicator_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_cancel_indicator_Set() const{
    return m_segmentation_cancel_indicator_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_cancel_indicator_Valid() const{
    return m_segmentation_cancel_indicator_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSegmentationDuration() const {
    return m_segmentation_duration;
}
void OAIScte35SegmentationDescriptor::setSegmentationDuration(const qint32 &segmentation_duration) {
    m_segmentation_duration = segmentation_duration;
    m_segmentation_duration_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_duration_Set() const{
    return m_segmentation_duration_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_duration_Valid() const{
    return m_segmentation_duration_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSegmentationEventId() const {
    return m_segmentation_event_id;
}
void OAIScte35SegmentationDescriptor::setSegmentationEventId(const qint32 &segmentation_event_id) {
    m_segmentation_event_id = segmentation_event_id;
    m_segmentation_event_id_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_event_id_Set() const{
    return m_segmentation_event_id_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_event_id_Valid() const{
    return m_segmentation_event_id_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSegmentationTypeId() const {
    return m_segmentation_type_id;
}
void OAIScte35SegmentationDescriptor::setSegmentationTypeId(const qint32 &segmentation_type_id) {
    m_segmentation_type_id = segmentation_type_id;
    m_segmentation_type_id_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_type_id_Set() const{
    return m_segmentation_type_id_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_type_id_Valid() const{
    return m_segmentation_type_id_isValid;
}

QString OAIScte35SegmentationDescriptor::getSegmentationUpid() const {
    return m_segmentation_upid;
}
void OAIScte35SegmentationDescriptor::setSegmentationUpid(const QString &segmentation_upid) {
    m_segmentation_upid = segmentation_upid;
    m_segmentation_upid_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_upid_Set() const{
    return m_segmentation_upid_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_upid_Valid() const{
    return m_segmentation_upid_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSegmentationUpidType() const {
    return m_segmentation_upid_type;
}
void OAIScte35SegmentationDescriptor::setSegmentationUpidType(const qint32 &segmentation_upid_type) {
    m_segmentation_upid_type = segmentation_upid_type;
    m_segmentation_upid_type_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_upid_type_Set() const{
    return m_segmentation_upid_type_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segmentation_upid_type_Valid() const{
    return m_segmentation_upid_type_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSegmentsExpected() const {
    return m_segments_expected;
}
void OAIScte35SegmentationDescriptor::setSegmentsExpected(const qint32 &segments_expected) {
    m_segments_expected = segments_expected;
    m_segments_expected_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_segments_expected_Set() const{
    return m_segments_expected_isSet;
}

bool OAIScte35SegmentationDescriptor::is_segments_expected_Valid() const{
    return m_segments_expected_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSubSegmentNum() const {
    return m_sub_segment_num;
}
void OAIScte35SegmentationDescriptor::setSubSegmentNum(const qint32 &sub_segment_num) {
    m_sub_segment_num = sub_segment_num;
    m_sub_segment_num_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_sub_segment_num_Set() const{
    return m_sub_segment_num_isSet;
}

bool OAIScte35SegmentationDescriptor::is_sub_segment_num_Valid() const{
    return m_sub_segment_num_isValid;
}

qint32 OAIScte35SegmentationDescriptor::getSubSegmentsExpected() const {
    return m_sub_segments_expected;
}
void OAIScte35SegmentationDescriptor::setSubSegmentsExpected(const qint32 &sub_segments_expected) {
    m_sub_segments_expected = sub_segments_expected;
    m_sub_segments_expected_isSet = true;
}

bool OAIScte35SegmentationDescriptor::is_sub_segments_expected_Set() const{
    return m_sub_segments_expected_isSet;
}

bool OAIScte35SegmentationDescriptor::is_sub_segments_expected_Valid() const{
    return m_sub_segments_expected_isValid;
}

bool OAIScte35SegmentationDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_cancel_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_upid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_upid_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_segment_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_segments_expected_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScte35SegmentationDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_segmentation_cancel_indicator_isValid && m_segmentation_event_id_isValid && true;
}

} // namespace OpenAPI
