/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalConfiguration_InputLossBehavior.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalConfiguration_InputLossBehavior::OAIGlobalConfiguration_InputLossBehavior(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalConfiguration_InputLossBehavior::OAIGlobalConfiguration_InputLossBehavior() {
    this->initializeModel();
}

OAIGlobalConfiguration_InputLossBehavior::~OAIGlobalConfiguration_InputLossBehavior() {}

void OAIGlobalConfiguration_InputLossBehavior::initializeModel() {

    m_black_frame_msec_isSet = false;
    m_black_frame_msec_isValid = false;

    m_input_loss_image_color_isSet = false;
    m_input_loss_image_color_isValid = false;

    m_input_loss_image_slate_isSet = false;
    m_input_loss_image_slate_isValid = false;

    m_input_loss_image_type_isSet = false;
    m_input_loss_image_type_isValid = false;

    m_repeat_frame_msec_isSet = false;
    m_repeat_frame_msec_isValid = false;
}

void OAIGlobalConfiguration_InputLossBehavior::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalConfiguration_InputLossBehavior::fromJsonObject(QJsonObject json) {

    m_black_frame_msec_isValid = ::OpenAPI::fromJsonValue(m_black_frame_msec, json[QString("BlackFrameMsec")]);
    m_black_frame_msec_isSet = !json[QString("BlackFrameMsec")].isNull() && m_black_frame_msec_isValid;

    m_input_loss_image_color_isValid = ::OpenAPI::fromJsonValue(m_input_loss_image_color, json[QString("InputLossImageColor")]);
    m_input_loss_image_color_isSet = !json[QString("InputLossImageColor")].isNull() && m_input_loss_image_color_isValid;

    m_input_loss_image_slate_isValid = ::OpenAPI::fromJsonValue(m_input_loss_image_slate, json[QString("InputLossImageSlate")]);
    m_input_loss_image_slate_isSet = !json[QString("InputLossImageSlate")].isNull() && m_input_loss_image_slate_isValid;

    m_input_loss_image_type_isValid = ::OpenAPI::fromJsonValue(m_input_loss_image_type, json[QString("InputLossImageType")]);
    m_input_loss_image_type_isSet = !json[QString("InputLossImageType")].isNull() && m_input_loss_image_type_isValid;

    m_repeat_frame_msec_isValid = ::OpenAPI::fromJsonValue(m_repeat_frame_msec, json[QString("RepeatFrameMsec")]);
    m_repeat_frame_msec_isSet = !json[QString("RepeatFrameMsec")].isNull() && m_repeat_frame_msec_isValid;
}

QString OAIGlobalConfiguration_InputLossBehavior::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalConfiguration_InputLossBehavior::asJsonObject() const {
    QJsonObject obj;
    if (m_black_frame_msec_isSet) {
        obj.insert(QString("BlackFrameMsec"), ::OpenAPI::toJsonValue(m_black_frame_msec));
    }
    if (m_input_loss_image_color_isSet) {
        obj.insert(QString("InputLossImageColor"), ::OpenAPI::toJsonValue(m_input_loss_image_color));
    }
    if (m_input_loss_image_slate.isSet()) {
        obj.insert(QString("InputLossImageSlate"), ::OpenAPI::toJsonValue(m_input_loss_image_slate));
    }
    if (m_input_loss_image_type.isSet()) {
        obj.insert(QString("InputLossImageType"), ::OpenAPI::toJsonValue(m_input_loss_image_type));
    }
    if (m_repeat_frame_msec_isSet) {
        obj.insert(QString("RepeatFrameMsec"), ::OpenAPI::toJsonValue(m_repeat_frame_msec));
    }
    return obj;
}

qint32 OAIGlobalConfiguration_InputLossBehavior::getBlackFrameMsec() const {
    return m_black_frame_msec;
}
void OAIGlobalConfiguration_InputLossBehavior::setBlackFrameMsec(const qint32 &black_frame_msec) {
    m_black_frame_msec = black_frame_msec;
    m_black_frame_msec_isSet = true;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_black_frame_msec_Set() const{
    return m_black_frame_msec_isSet;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_black_frame_msec_Valid() const{
    return m_black_frame_msec_isValid;
}

QString OAIGlobalConfiguration_InputLossBehavior::getInputLossImageColor() const {
    return m_input_loss_image_color;
}
void OAIGlobalConfiguration_InputLossBehavior::setInputLossImageColor(const QString &input_loss_image_color) {
    m_input_loss_image_color = input_loss_image_color;
    m_input_loss_image_color_isSet = true;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_input_loss_image_color_Set() const{
    return m_input_loss_image_color_isSet;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_input_loss_image_color_Valid() const{
    return m_input_loss_image_color_isValid;
}

OAIInputLossBehavior_InputLossImageSlate OAIGlobalConfiguration_InputLossBehavior::getInputLossImageSlate() const {
    return m_input_loss_image_slate;
}
void OAIGlobalConfiguration_InputLossBehavior::setInputLossImageSlate(const OAIInputLossBehavior_InputLossImageSlate &input_loss_image_slate) {
    m_input_loss_image_slate = input_loss_image_slate;
    m_input_loss_image_slate_isSet = true;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_input_loss_image_slate_Set() const{
    return m_input_loss_image_slate_isSet;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_input_loss_image_slate_Valid() const{
    return m_input_loss_image_slate_isValid;
}

OAIInputLossImageType OAIGlobalConfiguration_InputLossBehavior::getInputLossImageType() const {
    return m_input_loss_image_type;
}
void OAIGlobalConfiguration_InputLossBehavior::setInputLossImageType(const OAIInputLossImageType &input_loss_image_type) {
    m_input_loss_image_type = input_loss_image_type;
    m_input_loss_image_type_isSet = true;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_input_loss_image_type_Set() const{
    return m_input_loss_image_type_isSet;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_input_loss_image_type_Valid() const{
    return m_input_loss_image_type_isValid;
}

qint32 OAIGlobalConfiguration_InputLossBehavior::getRepeatFrameMsec() const {
    return m_repeat_frame_msec;
}
void OAIGlobalConfiguration_InputLossBehavior::setRepeatFrameMsec(const qint32 &repeat_frame_msec) {
    m_repeat_frame_msec = repeat_frame_msec;
    m_repeat_frame_msec_isSet = true;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_repeat_frame_msec_Set() const{
    return m_repeat_frame_msec_isSet;
}

bool OAIGlobalConfiguration_InputLossBehavior::is_repeat_frame_msec_Valid() const{
    return m_repeat_frame_msec_isValid;
}

bool OAIGlobalConfiguration_InputLossBehavior::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_black_frame_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_image_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_image_slate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_loss_image_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_frame_msec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalConfiguration_InputLossBehavior::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
