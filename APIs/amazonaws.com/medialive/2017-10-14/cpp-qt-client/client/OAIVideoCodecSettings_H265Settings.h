/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoCodecSettings_H265Settings.h
 *
 * 
 */

#ifndef OAIVideoCodecSettings_H265Settings_H
#define OAIVideoCodecSettings_H265Settings_H

#include <QJsonObject>

#include "OAIAfdSignaling.h"
#include "OAIFixedAfd.h"
#include "OAIFrameCaptureSettings_TimecodeBurninSettings.h"
#include "OAIH265AdaptiveQuantization.h"
#include "OAIH265AlternativeTransferFunction.h"
#include "OAIH265ColorMetadata.h"
#include "OAIH265FlickerAq.h"
#include "OAIH265GopSizeUnits.h"
#include "OAIH265Level.h"
#include "OAIH265LookAheadRateControl.h"
#include "OAIH265Profile.h"
#include "OAIH265RateControlMode.h"
#include "OAIH265ScanType.h"
#include "OAIH265SceneChangeDetect.h"
#include "OAIH265Settings_ColorSpaceSettings.h"
#include "OAIH265Settings_FilterSettings.h"
#include "OAIH265Tier.h"
#include "OAIH265TimecodeInsertionBehavior.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIH265Settings_ColorSpaceSettings;
class OAIH265Settings_FilterSettings;
class OAIFrameCaptureSettings_TimecodeBurninSettings;

class OAIVideoCodecSettings_H265Settings : public OAIObject {
public:
    OAIVideoCodecSettings_H265Settings();
    OAIVideoCodecSettings_H265Settings(QString json);
    ~OAIVideoCodecSettings_H265Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIH265AdaptiveQuantization getAdaptiveQuantization() const;
    void setAdaptiveQuantization(const OAIH265AdaptiveQuantization &adaptive_quantization);
    bool is_adaptive_quantization_Set() const;
    bool is_adaptive_quantization_Valid() const;

    OAIAfdSignaling getAfdSignaling() const;
    void setAfdSignaling(const OAIAfdSignaling &afd_signaling);
    bool is_afd_signaling_Set() const;
    bool is_afd_signaling_Valid() const;

    OAIH265AlternativeTransferFunction getAlternativeTransferFunction() const;
    void setAlternativeTransferFunction(const OAIH265AlternativeTransferFunction &alternative_transfer_function);
    bool is_alternative_transfer_function_Set() const;
    bool is_alternative_transfer_function_Valid() const;

    qint32 getBitrate() const;
    void setBitrate(const qint32 &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    qint32 getBufSize() const;
    void setBufSize(const qint32 &buf_size);
    bool is_buf_size_Set() const;
    bool is_buf_size_Valid() const;

    OAIH265ColorMetadata getColorMetadata() const;
    void setColorMetadata(const OAIH265ColorMetadata &color_metadata);
    bool is_color_metadata_Set() const;
    bool is_color_metadata_Valid() const;

    OAIH265Settings_ColorSpaceSettings getColorSpaceSettings() const;
    void setColorSpaceSettings(const OAIH265Settings_ColorSpaceSettings &color_space_settings);
    bool is_color_space_settings_Set() const;
    bool is_color_space_settings_Valid() const;

    OAIH265Settings_FilterSettings getFilterSettings() const;
    void setFilterSettings(const OAIH265Settings_FilterSettings &filter_settings);
    bool is_filter_settings_Set() const;
    bool is_filter_settings_Valid() const;

    OAIFixedAfd getFixedAfd() const;
    void setFixedAfd(const OAIFixedAfd &fixed_afd);
    bool is_fixed_afd_Set() const;
    bool is_fixed_afd_Valid() const;

    OAIH265FlickerAq getFlickerAq() const;
    void setFlickerAq(const OAIH265FlickerAq &flicker_aq);
    bool is_flicker_aq_Set() const;
    bool is_flicker_aq_Valid() const;

    qint32 getFramerateDenominator() const;
    void setFramerateDenominator(const qint32 &framerate_denominator);
    bool is_framerate_denominator_Set() const;
    bool is_framerate_denominator_Valid() const;

    qint32 getFramerateNumerator() const;
    void setFramerateNumerator(const qint32 &framerate_numerator);
    bool is_framerate_numerator_Set() const;
    bool is_framerate_numerator_Valid() const;

    qint32 getGopClosedCadence() const;
    void setGopClosedCadence(const qint32 &gop_closed_cadence);
    bool is_gop_closed_cadence_Set() const;
    bool is_gop_closed_cadence_Valid() const;

    double getGopSize() const;
    void setGopSize(const double &gop_size);
    bool is_gop_size_Set() const;
    bool is_gop_size_Valid() const;

    OAIH265GopSizeUnits getGopSizeUnits() const;
    void setGopSizeUnits(const OAIH265GopSizeUnits &gop_size_units);
    bool is_gop_size_units_Set() const;
    bool is_gop_size_units_Valid() const;

    OAIH265Level getLevel() const;
    void setLevel(const OAIH265Level &level);
    bool is_level_Set() const;
    bool is_level_Valid() const;

    OAIH265LookAheadRateControl getLookAheadRateControl() const;
    void setLookAheadRateControl(const OAIH265LookAheadRateControl &look_ahead_rate_control);
    bool is_look_ahead_rate_control_Set() const;
    bool is_look_ahead_rate_control_Valid() const;

    qint32 getMaxBitrate() const;
    void setMaxBitrate(const qint32 &max_bitrate);
    bool is_max_bitrate_Set() const;
    bool is_max_bitrate_Valid() const;

    qint32 getMinIInterval() const;
    void setMinIInterval(const qint32 &min_i_interval);
    bool is_min_i_interval_Set() const;
    bool is_min_i_interval_Valid() const;

    qint32 getParDenominator() const;
    void setParDenominator(const qint32 &par_denominator);
    bool is_par_denominator_Set() const;
    bool is_par_denominator_Valid() const;

    qint32 getParNumerator() const;
    void setParNumerator(const qint32 &par_numerator);
    bool is_par_numerator_Set() const;
    bool is_par_numerator_Valid() const;

    OAIH265Profile getProfile() const;
    void setProfile(const OAIH265Profile &profile);
    bool is_profile_Set() const;
    bool is_profile_Valid() const;

    qint32 getQvbrQualityLevel() const;
    void setQvbrQualityLevel(const qint32 &qvbr_quality_level);
    bool is_qvbr_quality_level_Set() const;
    bool is_qvbr_quality_level_Valid() const;

    OAIH265RateControlMode getRateControlMode() const;
    void setRateControlMode(const OAIH265RateControlMode &rate_control_mode);
    bool is_rate_control_mode_Set() const;
    bool is_rate_control_mode_Valid() const;

    OAIH265ScanType getScanType() const;
    void setScanType(const OAIH265ScanType &scan_type);
    bool is_scan_type_Set() const;
    bool is_scan_type_Valid() const;

    OAIH265SceneChangeDetect getSceneChangeDetect() const;
    void setSceneChangeDetect(const OAIH265SceneChangeDetect &scene_change_detect);
    bool is_scene_change_detect_Set() const;
    bool is_scene_change_detect_Valid() const;

    qint32 getSlices() const;
    void setSlices(const qint32 &slices);
    bool is_slices_Set() const;
    bool is_slices_Valid() const;

    OAIH265Tier getTier() const;
    void setTier(const OAIH265Tier &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    OAIH265TimecodeInsertionBehavior getTimecodeInsertion() const;
    void setTimecodeInsertion(const OAIH265TimecodeInsertionBehavior &timecode_insertion);
    bool is_timecode_insertion_Set() const;
    bool is_timecode_insertion_Valid() const;

    OAIFrameCaptureSettings_TimecodeBurninSettings getTimecodeBurninSettings() const;
    void setTimecodeBurninSettings(const OAIFrameCaptureSettings_TimecodeBurninSettings &timecode_burnin_settings);
    bool is_timecode_burnin_settings_Set() const;
    bool is_timecode_burnin_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIH265AdaptiveQuantization m_adaptive_quantization;
    bool m_adaptive_quantization_isSet;
    bool m_adaptive_quantization_isValid;

    OAIAfdSignaling m_afd_signaling;
    bool m_afd_signaling_isSet;
    bool m_afd_signaling_isValid;

    OAIH265AlternativeTransferFunction m_alternative_transfer_function;
    bool m_alternative_transfer_function_isSet;
    bool m_alternative_transfer_function_isValid;

    qint32 m_bitrate;
    bool m_bitrate_isSet;
    bool m_bitrate_isValid;

    qint32 m_buf_size;
    bool m_buf_size_isSet;
    bool m_buf_size_isValid;

    OAIH265ColorMetadata m_color_metadata;
    bool m_color_metadata_isSet;
    bool m_color_metadata_isValid;

    OAIH265Settings_ColorSpaceSettings m_color_space_settings;
    bool m_color_space_settings_isSet;
    bool m_color_space_settings_isValid;

    OAIH265Settings_FilterSettings m_filter_settings;
    bool m_filter_settings_isSet;
    bool m_filter_settings_isValid;

    OAIFixedAfd m_fixed_afd;
    bool m_fixed_afd_isSet;
    bool m_fixed_afd_isValid;

    OAIH265FlickerAq m_flicker_aq;
    bool m_flicker_aq_isSet;
    bool m_flicker_aq_isValid;

    qint32 m_framerate_denominator;
    bool m_framerate_denominator_isSet;
    bool m_framerate_denominator_isValid;

    qint32 m_framerate_numerator;
    bool m_framerate_numerator_isSet;
    bool m_framerate_numerator_isValid;

    qint32 m_gop_closed_cadence;
    bool m_gop_closed_cadence_isSet;
    bool m_gop_closed_cadence_isValid;

    double m_gop_size;
    bool m_gop_size_isSet;
    bool m_gop_size_isValid;

    OAIH265GopSizeUnits m_gop_size_units;
    bool m_gop_size_units_isSet;
    bool m_gop_size_units_isValid;

    OAIH265Level m_level;
    bool m_level_isSet;
    bool m_level_isValid;

    OAIH265LookAheadRateControl m_look_ahead_rate_control;
    bool m_look_ahead_rate_control_isSet;
    bool m_look_ahead_rate_control_isValid;

    qint32 m_max_bitrate;
    bool m_max_bitrate_isSet;
    bool m_max_bitrate_isValid;

    qint32 m_min_i_interval;
    bool m_min_i_interval_isSet;
    bool m_min_i_interval_isValid;

    qint32 m_par_denominator;
    bool m_par_denominator_isSet;
    bool m_par_denominator_isValid;

    qint32 m_par_numerator;
    bool m_par_numerator_isSet;
    bool m_par_numerator_isValid;

    OAIH265Profile m_profile;
    bool m_profile_isSet;
    bool m_profile_isValid;

    qint32 m_qvbr_quality_level;
    bool m_qvbr_quality_level_isSet;
    bool m_qvbr_quality_level_isValid;

    OAIH265RateControlMode m_rate_control_mode;
    bool m_rate_control_mode_isSet;
    bool m_rate_control_mode_isValid;

    OAIH265ScanType m_scan_type;
    bool m_scan_type_isSet;
    bool m_scan_type_isValid;

    OAIH265SceneChangeDetect m_scene_change_detect;
    bool m_scene_change_detect_isSet;
    bool m_scene_change_detect_isValid;

    qint32 m_slices;
    bool m_slices_isSet;
    bool m_slices_isValid;

    OAIH265Tier m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    OAIH265TimecodeInsertionBehavior m_timecode_insertion;
    bool m_timecode_insertion_isSet;
    bool m_timecode_insertion_isValid;

    OAIFrameCaptureSettings_TimecodeBurninSettings m_timecode_burnin_settings;
    bool m_timecode_burnin_settings_isSet;
    bool m_timecode_burnin_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoCodecSettings_H265Settings)

#endif // OAIVideoCodecSettings_H265Settings_H
