/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsSettings_Fmp4HlsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsSettings_Fmp4HlsSettings::OAIHlsSettings_Fmp4HlsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsSettings_Fmp4HlsSettings::OAIHlsSettings_Fmp4HlsSettings() {
    this->initializeModel();
}

OAIHlsSettings_Fmp4HlsSettings::~OAIHlsSettings_Fmp4HlsSettings() {}

void OAIHlsSettings_Fmp4HlsSettings::initializeModel() {

    m_audio_rendition_sets_isSet = false;
    m_audio_rendition_sets_isValid = false;

    m_nielsen_id3_behavior_isSet = false;
    m_nielsen_id3_behavior_isValid = false;

    m_timed_metadata_behavior_isSet = false;
    m_timed_metadata_behavior_isValid = false;
}

void OAIHlsSettings_Fmp4HlsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsSettings_Fmp4HlsSettings::fromJsonObject(QJsonObject json) {

    m_audio_rendition_sets_isValid = ::OpenAPI::fromJsonValue(m_audio_rendition_sets, json[QString("AudioRenditionSets")]);
    m_audio_rendition_sets_isSet = !json[QString("AudioRenditionSets")].isNull() && m_audio_rendition_sets_isValid;

    m_nielsen_id3_behavior_isValid = ::OpenAPI::fromJsonValue(m_nielsen_id3_behavior, json[QString("NielsenId3Behavior")]);
    m_nielsen_id3_behavior_isSet = !json[QString("NielsenId3Behavior")].isNull() && m_nielsen_id3_behavior_isValid;

    m_timed_metadata_behavior_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_behavior, json[QString("TimedMetadataBehavior")]);
    m_timed_metadata_behavior_isSet = !json[QString("TimedMetadataBehavior")].isNull() && m_timed_metadata_behavior_isValid;
}

QString OAIHlsSettings_Fmp4HlsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsSettings_Fmp4HlsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_rendition_sets_isSet) {
        obj.insert(QString("AudioRenditionSets"), ::OpenAPI::toJsonValue(m_audio_rendition_sets));
    }
    if (m_nielsen_id3_behavior.isSet()) {
        obj.insert(QString("NielsenId3Behavior"), ::OpenAPI::toJsonValue(m_nielsen_id3_behavior));
    }
    if (m_timed_metadata_behavior.isSet()) {
        obj.insert(QString("TimedMetadataBehavior"), ::OpenAPI::toJsonValue(m_timed_metadata_behavior));
    }
    return obj;
}

QString OAIHlsSettings_Fmp4HlsSettings::getAudioRenditionSets() const {
    return m_audio_rendition_sets;
}
void OAIHlsSettings_Fmp4HlsSettings::setAudioRenditionSets(const QString &audio_rendition_sets) {
    m_audio_rendition_sets = audio_rendition_sets;
    m_audio_rendition_sets_isSet = true;
}

bool OAIHlsSettings_Fmp4HlsSettings::is_audio_rendition_sets_Set() const{
    return m_audio_rendition_sets_isSet;
}

bool OAIHlsSettings_Fmp4HlsSettings::is_audio_rendition_sets_Valid() const{
    return m_audio_rendition_sets_isValid;
}

OAIFmp4NielsenId3Behavior OAIHlsSettings_Fmp4HlsSettings::getNielsenId3Behavior() const {
    return m_nielsen_id3_behavior;
}
void OAIHlsSettings_Fmp4HlsSettings::setNielsenId3Behavior(const OAIFmp4NielsenId3Behavior &nielsen_id3_behavior) {
    m_nielsen_id3_behavior = nielsen_id3_behavior;
    m_nielsen_id3_behavior_isSet = true;
}

bool OAIHlsSettings_Fmp4HlsSettings::is_nielsen_id3_behavior_Set() const{
    return m_nielsen_id3_behavior_isSet;
}

bool OAIHlsSettings_Fmp4HlsSettings::is_nielsen_id3_behavior_Valid() const{
    return m_nielsen_id3_behavior_isValid;
}

OAIFmp4TimedMetadataBehavior OAIHlsSettings_Fmp4HlsSettings::getTimedMetadataBehavior() const {
    return m_timed_metadata_behavior;
}
void OAIHlsSettings_Fmp4HlsSettings::setTimedMetadataBehavior(const OAIFmp4TimedMetadataBehavior &timed_metadata_behavior) {
    m_timed_metadata_behavior = timed_metadata_behavior;
    m_timed_metadata_behavior_isSet = true;
}

bool OAIHlsSettings_Fmp4HlsSettings::is_timed_metadata_behavior_Set() const{
    return m_timed_metadata_behavior_isSet;
}

bool OAIHlsSettings_Fmp4HlsSettings::is_timed_metadata_behavior_Valid() const{
    return m_timed_metadata_behavior_isValid;
}

bool OAIHlsSettings_Fmp4HlsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_rendition_sets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_id3_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsSettings_Fmp4HlsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
