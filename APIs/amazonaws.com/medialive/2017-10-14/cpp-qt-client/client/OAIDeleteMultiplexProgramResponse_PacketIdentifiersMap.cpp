/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap() {
    this->initializeModel();
}

OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::~OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap() {}

void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::initializeModel() {

    m_audio_pids_isSet = false;
    m_audio_pids_isValid = false;

    m_dvb_sub_pids_isSet = false;
    m_dvb_sub_pids_isValid = false;

    m_dvb_teletext_pid_isSet = false;
    m_dvb_teletext_pid_isValid = false;

    m_etv_platform_pid_isSet = false;
    m_etv_platform_pid_isValid = false;

    m_etv_signal_pid_isSet = false;
    m_etv_signal_pid_isValid = false;

    m_klv_data_pids_isSet = false;
    m_klv_data_pids_isValid = false;

    m_pcr_pid_isSet = false;
    m_pcr_pid_isValid = false;

    m_pmt_pid_isSet = false;
    m_pmt_pid_isValid = false;

    m_private_metadata_pid_isSet = false;
    m_private_metadata_pid_isValid = false;

    m_scte27_pids_isSet = false;
    m_scte27_pids_isValid = false;

    m_scte35_pid_isSet = false;
    m_scte35_pid_isValid = false;

    m_timed_metadata_pid_isSet = false;
    m_timed_metadata_pid_isValid = false;

    m_video_pid_isSet = false;
    m_video_pid_isValid = false;
}

void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::fromJsonObject(QJsonObject json) {

    m_audio_pids_isValid = ::OpenAPI::fromJsonValue(m_audio_pids, json[QString("AudioPids")]);
    m_audio_pids_isSet = !json[QString("AudioPids")].isNull() && m_audio_pids_isValid;

    m_dvb_sub_pids_isValid = ::OpenAPI::fromJsonValue(m_dvb_sub_pids, json[QString("DvbSubPids")]);
    m_dvb_sub_pids_isSet = !json[QString("DvbSubPids")].isNull() && m_dvb_sub_pids_isValid;

    m_dvb_teletext_pid_isValid = ::OpenAPI::fromJsonValue(m_dvb_teletext_pid, json[QString("DvbTeletextPid")]);
    m_dvb_teletext_pid_isSet = !json[QString("DvbTeletextPid")].isNull() && m_dvb_teletext_pid_isValid;

    m_etv_platform_pid_isValid = ::OpenAPI::fromJsonValue(m_etv_platform_pid, json[QString("EtvPlatformPid")]);
    m_etv_platform_pid_isSet = !json[QString("EtvPlatformPid")].isNull() && m_etv_platform_pid_isValid;

    m_etv_signal_pid_isValid = ::OpenAPI::fromJsonValue(m_etv_signal_pid, json[QString("EtvSignalPid")]);
    m_etv_signal_pid_isSet = !json[QString("EtvSignalPid")].isNull() && m_etv_signal_pid_isValid;

    m_klv_data_pids_isValid = ::OpenAPI::fromJsonValue(m_klv_data_pids, json[QString("KlvDataPids")]);
    m_klv_data_pids_isSet = !json[QString("KlvDataPids")].isNull() && m_klv_data_pids_isValid;

    m_pcr_pid_isValid = ::OpenAPI::fromJsonValue(m_pcr_pid, json[QString("PcrPid")]);
    m_pcr_pid_isSet = !json[QString("PcrPid")].isNull() && m_pcr_pid_isValid;

    m_pmt_pid_isValid = ::OpenAPI::fromJsonValue(m_pmt_pid, json[QString("PmtPid")]);
    m_pmt_pid_isSet = !json[QString("PmtPid")].isNull() && m_pmt_pid_isValid;

    m_private_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_private_metadata_pid, json[QString("PrivateMetadataPid")]);
    m_private_metadata_pid_isSet = !json[QString("PrivateMetadataPid")].isNull() && m_private_metadata_pid_isValid;

    m_scte27_pids_isValid = ::OpenAPI::fromJsonValue(m_scte27_pids, json[QString("Scte27Pids")]);
    m_scte27_pids_isSet = !json[QString("Scte27Pids")].isNull() && m_scte27_pids_isValid;

    m_scte35_pid_isValid = ::OpenAPI::fromJsonValue(m_scte35_pid, json[QString("Scte35Pid")]);
    m_scte35_pid_isSet = !json[QString("Scte35Pid")].isNull() && m_scte35_pid_isValid;

    m_timed_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_pid, json[QString("TimedMetadataPid")]);
    m_timed_metadata_pid_isSet = !json[QString("TimedMetadataPid")].isNull() && m_timed_metadata_pid_isValid;

    m_video_pid_isValid = ::OpenAPI::fromJsonValue(m_video_pid, json[QString("VideoPid")]);
    m_video_pid_isSet = !json[QString("VideoPid")].isNull() && m_video_pid_isValid;
}

QString OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_pids.isSet()) {
        obj.insert(QString("AudioPids"), ::OpenAPI::toJsonValue(m_audio_pids));
    }
    if (m_dvb_sub_pids.isSet()) {
        obj.insert(QString("DvbSubPids"), ::OpenAPI::toJsonValue(m_dvb_sub_pids));
    }
    if (m_dvb_teletext_pid_isSet) {
        obj.insert(QString("DvbTeletextPid"), ::OpenAPI::toJsonValue(m_dvb_teletext_pid));
    }
    if (m_etv_platform_pid_isSet) {
        obj.insert(QString("EtvPlatformPid"), ::OpenAPI::toJsonValue(m_etv_platform_pid));
    }
    if (m_etv_signal_pid_isSet) {
        obj.insert(QString("EtvSignalPid"), ::OpenAPI::toJsonValue(m_etv_signal_pid));
    }
    if (m_klv_data_pids.isSet()) {
        obj.insert(QString("KlvDataPids"), ::OpenAPI::toJsonValue(m_klv_data_pids));
    }
    if (m_pcr_pid_isSet) {
        obj.insert(QString("PcrPid"), ::OpenAPI::toJsonValue(m_pcr_pid));
    }
    if (m_pmt_pid_isSet) {
        obj.insert(QString("PmtPid"), ::OpenAPI::toJsonValue(m_pmt_pid));
    }
    if (m_private_metadata_pid_isSet) {
        obj.insert(QString("PrivateMetadataPid"), ::OpenAPI::toJsonValue(m_private_metadata_pid));
    }
    if (m_scte27_pids.isSet()) {
        obj.insert(QString("Scte27Pids"), ::OpenAPI::toJsonValue(m_scte27_pids));
    }
    if (m_scte35_pid_isSet) {
        obj.insert(QString("Scte35Pid"), ::OpenAPI::toJsonValue(m_scte35_pid));
    }
    if (m_timed_metadata_pid_isSet) {
        obj.insert(QString("TimedMetadataPid"), ::OpenAPI::toJsonValue(m_timed_metadata_pid));
    }
    if (m_video_pid_isSet) {
        obj.insert(QString("VideoPid"), ::OpenAPI::toJsonValue(m_video_pid));
    }
    return obj;
}

QList OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getAudioPids() const {
    return m_audio_pids;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setAudioPids(const QList &audio_pids) {
    m_audio_pids = audio_pids;
    m_audio_pids_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_audio_pids_Set() const{
    return m_audio_pids_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_audio_pids_Valid() const{
    return m_audio_pids_isValid;
}

QList OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getDvbSubPids() const {
    return m_dvb_sub_pids;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setDvbSubPids(const QList &dvb_sub_pids) {
    m_dvb_sub_pids = dvb_sub_pids;
    m_dvb_sub_pids_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_dvb_sub_pids_Set() const{
    return m_dvb_sub_pids_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_dvb_sub_pids_Valid() const{
    return m_dvb_sub_pids_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getDvbTeletextPid() const {
    return m_dvb_teletext_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setDvbTeletextPid(const qint32 &dvb_teletext_pid) {
    m_dvb_teletext_pid = dvb_teletext_pid;
    m_dvb_teletext_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_dvb_teletext_pid_Set() const{
    return m_dvb_teletext_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_dvb_teletext_pid_Valid() const{
    return m_dvb_teletext_pid_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getEtvPlatformPid() const {
    return m_etv_platform_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setEtvPlatformPid(const qint32 &etv_platform_pid) {
    m_etv_platform_pid = etv_platform_pid;
    m_etv_platform_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_etv_platform_pid_Set() const{
    return m_etv_platform_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_etv_platform_pid_Valid() const{
    return m_etv_platform_pid_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getEtvSignalPid() const {
    return m_etv_signal_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setEtvSignalPid(const qint32 &etv_signal_pid) {
    m_etv_signal_pid = etv_signal_pid;
    m_etv_signal_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_etv_signal_pid_Set() const{
    return m_etv_signal_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_etv_signal_pid_Valid() const{
    return m_etv_signal_pid_isValid;
}

QList OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getKlvDataPids() const {
    return m_klv_data_pids;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setKlvDataPids(const QList &klv_data_pids) {
    m_klv_data_pids = klv_data_pids;
    m_klv_data_pids_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_klv_data_pids_Set() const{
    return m_klv_data_pids_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_klv_data_pids_Valid() const{
    return m_klv_data_pids_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getPcrPid() const {
    return m_pcr_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setPcrPid(const qint32 &pcr_pid) {
    m_pcr_pid = pcr_pid;
    m_pcr_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_pcr_pid_Set() const{
    return m_pcr_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_pcr_pid_Valid() const{
    return m_pcr_pid_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getPmtPid() const {
    return m_pmt_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setPmtPid(const qint32 &pmt_pid) {
    m_pmt_pid = pmt_pid;
    m_pmt_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_pmt_pid_Set() const{
    return m_pmt_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_pmt_pid_Valid() const{
    return m_pmt_pid_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getPrivateMetadataPid() const {
    return m_private_metadata_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setPrivateMetadataPid(const qint32 &private_metadata_pid) {
    m_private_metadata_pid = private_metadata_pid;
    m_private_metadata_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_private_metadata_pid_Set() const{
    return m_private_metadata_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_private_metadata_pid_Valid() const{
    return m_private_metadata_pid_isValid;
}

QList OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getScte27Pids() const {
    return m_scte27_pids;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setScte27Pids(const QList &scte27_pids) {
    m_scte27_pids = scte27_pids;
    m_scte27_pids_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_scte27_pids_Set() const{
    return m_scte27_pids_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_scte27_pids_Valid() const{
    return m_scte27_pids_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getScte35Pid() const {
    return m_scte35_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setScte35Pid(const qint32 &scte35_pid) {
    m_scte35_pid = scte35_pid;
    m_scte35_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_scte35_pid_Set() const{
    return m_scte35_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_scte35_pid_Valid() const{
    return m_scte35_pid_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getTimedMetadataPid() const {
    return m_timed_metadata_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setTimedMetadataPid(const qint32 &timed_metadata_pid) {
    m_timed_metadata_pid = timed_metadata_pid;
    m_timed_metadata_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_timed_metadata_pid_Set() const{
    return m_timed_metadata_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_timed_metadata_pid_Valid() const{
    return m_timed_metadata_pid_isValid;
}

qint32 OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::getVideoPid() const {
    return m_video_pid;
}
void OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::setVideoPid(const qint32 &video_pid) {
    m_video_pid = video_pid;
    m_video_pid_isSet = true;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_video_pid_Set() const{
    return m_video_pid_isSet;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::is_video_pid_Valid() const{
    return m_video_pid_isValid;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sub_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_teletext_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etv_platform_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etv_signal_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_klv_data_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte27_pids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_pid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteMultiplexProgramResponse_PacketIdentifiersMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
