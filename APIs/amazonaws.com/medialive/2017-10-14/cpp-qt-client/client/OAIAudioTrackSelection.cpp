/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioTrackSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioTrackSelection::OAIAudioTrackSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioTrackSelection::OAIAudioTrackSelection() {
    this->initializeModel();
}

OAIAudioTrackSelection::~OAIAudioTrackSelection() {}

void OAIAudioTrackSelection::initializeModel() {

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_dolby_e_decode_isSet = false;
    m_dolby_e_decode_isValid = false;
}

void OAIAudioTrackSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioTrackSelection::fromJsonObject(QJsonObject json) {

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("Tracks")]);
    m_tracks_isSet = !json[QString("Tracks")].isNull() && m_tracks_isValid;

    m_dolby_e_decode_isValid = ::OpenAPI::fromJsonValue(m_dolby_e_decode, json[QString("DolbyEDecode")]);
    m_dolby_e_decode_isSet = !json[QString("DolbyEDecode")].isNull() && m_dolby_e_decode_isValid;
}

QString OAIAudioTrackSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioTrackSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_tracks.isSet()) {
        obj.insert(QString("Tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_dolby_e_decode.isSet()) {
        obj.insert(QString("DolbyEDecode"), ::OpenAPI::toJsonValue(m_dolby_e_decode));
    }
    return obj;
}

QList OAIAudioTrackSelection::getTracks() const {
    return m_tracks;
}
void OAIAudioTrackSelection::setTracks(const QList &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIAudioTrackSelection::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIAudioTrackSelection::is_tracks_Valid() const{
    return m_tracks_isValid;
}

OAIAudioTrackSelection_DolbyEDecode OAIAudioTrackSelection::getDolbyEDecode() const {
    return m_dolby_e_decode;
}
void OAIAudioTrackSelection::setDolbyEDecode(const OAIAudioTrackSelection_DolbyEDecode &dolby_e_decode) {
    m_dolby_e_decode = dolby_e_decode;
    m_dolby_e_decode_isSet = true;
}

bool OAIAudioTrackSelection::is_dolby_e_decode_Set() const{
    return m_dolby_e_decode_isSet;
}

bool OAIAudioTrackSelection::is_dolby_e_decode_Valid() const{
    return m_dolby_e_decode_isValid;
}

bool OAIAudioTrackSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tracks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dolby_e_decode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioTrackSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tracks_isValid && true;
}

} // namespace OpenAPI
