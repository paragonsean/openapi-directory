/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEac3Settings.h
 *
 * Eac3 Settings
 */

#ifndef OAIEac3Settings_H
#define OAIEac3Settings_H

#include <QJsonObject>

#include "OAIEac3AttenuationControl.h"
#include "OAIEac3BitstreamMode.h"
#include "OAIEac3CodingMode.h"
#include "OAIEac3DcFilter.h"
#include "OAIEac3DrcLine.h"
#include "OAIEac3DrcRf.h"
#include "OAIEac3LfeControl.h"
#include "OAIEac3LfeFilter.h"
#include "OAIEac3MetadataControl.h"
#include "OAIEac3PassthroughControl.h"
#include "OAIEac3PhaseControl.h"
#include "OAIEac3StereoDownmix.h"
#include "OAIEac3SurroundExMode.h"
#include "OAIEac3SurroundMode.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEac3Settings : public OAIObject {
public:
    OAIEac3Settings();
    OAIEac3Settings(QString json);
    ~OAIEac3Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEac3AttenuationControl getAttenuationControl() const;
    void setAttenuationControl(const OAIEac3AttenuationControl &attenuation_control);
    bool is_attenuation_control_Set() const;
    bool is_attenuation_control_Valid() const;

    double getBitrate() const;
    void setBitrate(const double &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    OAIEac3BitstreamMode getBitstreamMode() const;
    void setBitstreamMode(const OAIEac3BitstreamMode &bitstream_mode);
    bool is_bitstream_mode_Set() const;
    bool is_bitstream_mode_Valid() const;

    OAIEac3CodingMode getCodingMode() const;
    void setCodingMode(const OAIEac3CodingMode &coding_mode);
    bool is_coding_mode_Set() const;
    bool is_coding_mode_Valid() const;

    OAIEac3DcFilter getDcFilter() const;
    void setDcFilter(const OAIEac3DcFilter &dc_filter);
    bool is_dc_filter_Set() const;
    bool is_dc_filter_Valid() const;

    qint32 getDialnorm() const;
    void setDialnorm(const qint32 &dialnorm);
    bool is_dialnorm_Set() const;
    bool is_dialnorm_Valid() const;

    OAIEac3DrcLine getDrcLine() const;
    void setDrcLine(const OAIEac3DrcLine &drc_line);
    bool is_drc_line_Set() const;
    bool is_drc_line_Valid() const;

    OAIEac3DrcRf getDrcRf() const;
    void setDrcRf(const OAIEac3DrcRf &drc_rf);
    bool is_drc_rf_Set() const;
    bool is_drc_rf_Valid() const;

    OAIEac3LfeControl getLfeControl() const;
    void setLfeControl(const OAIEac3LfeControl &lfe_control);
    bool is_lfe_control_Set() const;
    bool is_lfe_control_Valid() const;

    OAIEac3LfeFilter getLfeFilter() const;
    void setLfeFilter(const OAIEac3LfeFilter &lfe_filter);
    bool is_lfe_filter_Set() const;
    bool is_lfe_filter_Valid() const;

    double getLoRoCenterMixLevel() const;
    void setLoRoCenterMixLevel(const double &lo_ro_center_mix_level);
    bool is_lo_ro_center_mix_level_Set() const;
    bool is_lo_ro_center_mix_level_Valid() const;

    double getLoRoSurroundMixLevel() const;
    void setLoRoSurroundMixLevel(const double &lo_ro_surround_mix_level);
    bool is_lo_ro_surround_mix_level_Set() const;
    bool is_lo_ro_surround_mix_level_Valid() const;

    double getLtRtCenterMixLevel() const;
    void setLtRtCenterMixLevel(const double &lt_rt_center_mix_level);
    bool is_lt_rt_center_mix_level_Set() const;
    bool is_lt_rt_center_mix_level_Valid() const;

    double getLtRtSurroundMixLevel() const;
    void setLtRtSurroundMixLevel(const double &lt_rt_surround_mix_level);
    bool is_lt_rt_surround_mix_level_Set() const;
    bool is_lt_rt_surround_mix_level_Valid() const;

    OAIEac3MetadataControl getMetadataControl() const;
    void setMetadataControl(const OAIEac3MetadataControl &metadata_control);
    bool is_metadata_control_Set() const;
    bool is_metadata_control_Valid() const;

    OAIEac3PassthroughControl getPassthroughControl() const;
    void setPassthroughControl(const OAIEac3PassthroughControl &passthrough_control);
    bool is_passthrough_control_Set() const;
    bool is_passthrough_control_Valid() const;

    OAIEac3PhaseControl getPhaseControl() const;
    void setPhaseControl(const OAIEac3PhaseControl &phase_control);
    bool is_phase_control_Set() const;
    bool is_phase_control_Valid() const;

    OAIEac3StereoDownmix getStereoDownmix() const;
    void setStereoDownmix(const OAIEac3StereoDownmix &stereo_downmix);
    bool is_stereo_downmix_Set() const;
    bool is_stereo_downmix_Valid() const;

    OAIEac3SurroundExMode getSurroundExMode() const;
    void setSurroundExMode(const OAIEac3SurroundExMode &surround_ex_mode);
    bool is_surround_ex_mode_Set() const;
    bool is_surround_ex_mode_Valid() const;

    OAIEac3SurroundMode getSurroundMode() const;
    void setSurroundMode(const OAIEac3SurroundMode &surround_mode);
    bool is_surround_mode_Set() const;
    bool is_surround_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEac3AttenuationControl m_attenuation_control;
    bool m_attenuation_control_isSet;
    bool m_attenuation_control_isValid;

    double m_bitrate;
    bool m_bitrate_isSet;
    bool m_bitrate_isValid;

    OAIEac3BitstreamMode m_bitstream_mode;
    bool m_bitstream_mode_isSet;
    bool m_bitstream_mode_isValid;

    OAIEac3CodingMode m_coding_mode;
    bool m_coding_mode_isSet;
    bool m_coding_mode_isValid;

    OAIEac3DcFilter m_dc_filter;
    bool m_dc_filter_isSet;
    bool m_dc_filter_isValid;

    qint32 m_dialnorm;
    bool m_dialnorm_isSet;
    bool m_dialnorm_isValid;

    OAIEac3DrcLine m_drc_line;
    bool m_drc_line_isSet;
    bool m_drc_line_isValid;

    OAIEac3DrcRf m_drc_rf;
    bool m_drc_rf_isSet;
    bool m_drc_rf_isValid;

    OAIEac3LfeControl m_lfe_control;
    bool m_lfe_control_isSet;
    bool m_lfe_control_isValid;

    OAIEac3LfeFilter m_lfe_filter;
    bool m_lfe_filter_isSet;
    bool m_lfe_filter_isValid;

    double m_lo_ro_center_mix_level;
    bool m_lo_ro_center_mix_level_isSet;
    bool m_lo_ro_center_mix_level_isValid;

    double m_lo_ro_surround_mix_level;
    bool m_lo_ro_surround_mix_level_isSet;
    bool m_lo_ro_surround_mix_level_isValid;

    double m_lt_rt_center_mix_level;
    bool m_lt_rt_center_mix_level_isSet;
    bool m_lt_rt_center_mix_level_isValid;

    double m_lt_rt_surround_mix_level;
    bool m_lt_rt_surround_mix_level_isSet;
    bool m_lt_rt_surround_mix_level_isValid;

    OAIEac3MetadataControl m_metadata_control;
    bool m_metadata_control_isSet;
    bool m_metadata_control_isValid;

    OAIEac3PassthroughControl m_passthrough_control;
    bool m_passthrough_control_isSet;
    bool m_passthrough_control_isValid;

    OAIEac3PhaseControl m_phase_control;
    bool m_phase_control_isSet;
    bool m_phase_control_isValid;

    OAIEac3StereoDownmix m_stereo_downmix;
    bool m_stereo_downmix_isSet;
    bool m_stereo_downmix_isValid;

    OAIEac3SurroundExMode m_surround_ex_mode;
    bool m_surround_ex_mode_isSet;
    bool m_surround_ex_mode_isValid;

    OAIEac3SurroundMode m_surround_mode;
    bool m_surround_mode_isSet;
    bool m_surround_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEac3Settings)

#endif // OAIEac3Settings_H
