/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOffering_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOffering_request::OAIPurchaseOffering_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOffering_request::OAIPurchaseOffering_request() {
    this->initializeModel();
}

OAIPurchaseOffering_request::~OAIPurchaseOffering_request() {}

void OAIPurchaseOffering_request::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_renewal_settings_isSet = false;
    m_renewal_settings_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPurchaseOffering_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOffering_request::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_renewal_settings_isValid = ::OpenAPI::fromJsonValue(m_renewal_settings, json[QString("renewalSettings")]);
    m_renewal_settings_isSet = !json[QString("renewalSettings")].isNull() && m_renewal_settings_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIPurchaseOffering_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOffering_request::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_renewal_settings.isSet()) {
        obj.insert(QString("renewalSettings"), ::OpenAPI::toJsonValue(m_renewal_settings));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAIPurchaseOffering_request::getCount() const {
    return m_count;
}
void OAIPurchaseOffering_request::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIPurchaseOffering_request::is_count_Set() const{
    return m_count_isSet;
}

bool OAIPurchaseOffering_request::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIPurchaseOffering_request::getName() const {
    return m_name;
}
void OAIPurchaseOffering_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPurchaseOffering_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPurchaseOffering_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIUpdateReservation_request_renewalSettings OAIPurchaseOffering_request::getRenewalSettings() const {
    return m_renewal_settings;
}
void OAIPurchaseOffering_request::setRenewalSettings(const OAIUpdateReservation_request_renewalSettings &renewal_settings) {
    m_renewal_settings = renewal_settings;
    m_renewal_settings_isSet = true;
}

bool OAIPurchaseOffering_request::is_renewal_settings_Set() const{
    return m_renewal_settings_isSet;
}

bool OAIPurchaseOffering_request::is_renewal_settings_Valid() const{
    return m_renewal_settings_isValid;
}

QString OAIPurchaseOffering_request::getRequestId() const {
    return m_request_id;
}
void OAIPurchaseOffering_request::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPurchaseOffering_request::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPurchaseOffering_request::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIPurchaseOffering_request::getStart() const {
    return m_start;
}
void OAIPurchaseOffering_request::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIPurchaseOffering_request::is_start_Set() const{
    return m_start_isSet;
}

bool OAIPurchaseOffering_request::is_start_Valid() const{
    return m_start_isValid;
}

QMap<QString, QString> OAIPurchaseOffering_request::getTags() const {
    return m_tags;
}
void OAIPurchaseOffering_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPurchaseOffering_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPurchaseOffering_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPurchaseOffering_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOffering_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && true;
}

} // namespace OpenAPI
