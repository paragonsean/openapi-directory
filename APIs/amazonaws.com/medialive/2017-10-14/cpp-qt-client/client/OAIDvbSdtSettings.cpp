/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDvbSdtSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDvbSdtSettings::OAIDvbSdtSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDvbSdtSettings::OAIDvbSdtSettings() {
    this->initializeModel();
}

OAIDvbSdtSettings::~OAIDvbSdtSettings() {}

void OAIDvbSdtSettings::initializeModel() {

    m_output_sdt_isSet = false;
    m_output_sdt_isValid = false;

    m_rep_interval_isSet = false;
    m_rep_interval_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_provider_name_isSet = false;
    m_service_provider_name_isValid = false;
}

void OAIDvbSdtSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDvbSdtSettings::fromJsonObject(QJsonObject json) {

    m_output_sdt_isValid = ::OpenAPI::fromJsonValue(m_output_sdt, json[QString("OutputSdt")]);
    m_output_sdt_isSet = !json[QString("OutputSdt")].isNull() && m_output_sdt_isValid;

    m_rep_interval_isValid = ::OpenAPI::fromJsonValue(m_rep_interval, json[QString("RepInterval")]);
    m_rep_interval_isSet = !json[QString("RepInterval")].isNull() && m_rep_interval_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_provider_name_isValid = ::OpenAPI::fromJsonValue(m_service_provider_name, json[QString("ServiceProviderName")]);
    m_service_provider_name_isSet = !json[QString("ServiceProviderName")].isNull() && m_service_provider_name_isValid;
}

QString OAIDvbSdtSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDvbSdtSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_output_sdt.isSet()) {
        obj.insert(QString("OutputSdt"), ::OpenAPI::toJsonValue(m_output_sdt));
    }
    if (m_rep_interval_isSet) {
        obj.insert(QString("RepInterval"), ::OpenAPI::toJsonValue(m_rep_interval));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_provider_name_isSet) {
        obj.insert(QString("ServiceProviderName"), ::OpenAPI::toJsonValue(m_service_provider_name));
    }
    return obj;
}

OAIDvbSdtOutputSdt OAIDvbSdtSettings::getOutputSdt() const {
    return m_output_sdt;
}
void OAIDvbSdtSettings::setOutputSdt(const OAIDvbSdtOutputSdt &output_sdt) {
    m_output_sdt = output_sdt;
    m_output_sdt_isSet = true;
}

bool OAIDvbSdtSettings::is_output_sdt_Set() const{
    return m_output_sdt_isSet;
}

bool OAIDvbSdtSettings::is_output_sdt_Valid() const{
    return m_output_sdt_isValid;
}

qint32 OAIDvbSdtSettings::getRepInterval() const {
    return m_rep_interval;
}
void OAIDvbSdtSettings::setRepInterval(const qint32 &rep_interval) {
    m_rep_interval = rep_interval;
    m_rep_interval_isSet = true;
}

bool OAIDvbSdtSettings::is_rep_interval_Set() const{
    return m_rep_interval_isSet;
}

bool OAIDvbSdtSettings::is_rep_interval_Valid() const{
    return m_rep_interval_isValid;
}

QString OAIDvbSdtSettings::getServiceName() const {
    return m_service_name;
}
void OAIDvbSdtSettings::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDvbSdtSettings::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDvbSdtSettings::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIDvbSdtSettings::getServiceProviderName() const {
    return m_service_provider_name;
}
void OAIDvbSdtSettings::setServiceProviderName(const QString &service_provider_name) {
    m_service_provider_name = service_provider_name;
    m_service_provider_name_isSet = true;
}

bool OAIDvbSdtSettings::is_service_provider_name_Set() const{
    return m_service_provider_name_isSet;
}

bool OAIDvbSdtSettings::is_service_provider_name_Valid() const{
    return m_service_provider_name_isValid;
}

bool OAIDvbSdtSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_sdt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rep_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDvbSdtSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
