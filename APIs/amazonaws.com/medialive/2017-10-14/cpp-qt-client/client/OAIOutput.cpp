/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutput::OAIOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutput::OAIOutput() {
    this->initializeModel();
}

OAIOutput::~OAIOutput() {}

void OAIOutput::initializeModel() {

    m_audio_description_names_isSet = false;
    m_audio_description_names_isValid = false;

    m_caption_description_names_isSet = false;
    m_caption_description_names_isValid = false;

    m_output_name_isSet = false;
    m_output_name_isValid = false;

    m_output_settings_isSet = false;
    m_output_settings_isValid = false;

    m_video_description_name_isSet = false;
    m_video_description_name_isValid = false;
}

void OAIOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutput::fromJsonObject(QJsonObject json) {

    m_audio_description_names_isValid = ::OpenAPI::fromJsonValue(m_audio_description_names, json[QString("AudioDescriptionNames")]);
    m_audio_description_names_isSet = !json[QString("AudioDescriptionNames")].isNull() && m_audio_description_names_isValid;

    m_caption_description_names_isValid = ::OpenAPI::fromJsonValue(m_caption_description_names, json[QString("CaptionDescriptionNames")]);
    m_caption_description_names_isSet = !json[QString("CaptionDescriptionNames")].isNull() && m_caption_description_names_isValid;

    m_output_name_isValid = ::OpenAPI::fromJsonValue(m_output_name, json[QString("OutputName")]);
    m_output_name_isSet = !json[QString("OutputName")].isNull() && m_output_name_isValid;

    m_output_settings_isValid = ::OpenAPI::fromJsonValue(m_output_settings, json[QString("OutputSettings")]);
    m_output_settings_isSet = !json[QString("OutputSettings")].isNull() && m_output_settings_isValid;

    m_video_description_name_isValid = ::OpenAPI::fromJsonValue(m_video_description_name, json[QString("VideoDescriptionName")]);
    m_video_description_name_isSet = !json[QString("VideoDescriptionName")].isNull() && m_video_description_name_isValid;
}

QString OAIOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_description_names.isSet()) {
        obj.insert(QString("AudioDescriptionNames"), ::OpenAPI::toJsonValue(m_audio_description_names));
    }
    if (m_caption_description_names.isSet()) {
        obj.insert(QString("CaptionDescriptionNames"), ::OpenAPI::toJsonValue(m_caption_description_names));
    }
    if (m_output_name_isSet) {
        obj.insert(QString("OutputName"), ::OpenAPI::toJsonValue(m_output_name));
    }
    if (m_output_settings.isSet()) {
        obj.insert(QString("OutputSettings"), ::OpenAPI::toJsonValue(m_output_settings));
    }
    if (m_video_description_name_isSet) {
        obj.insert(QString("VideoDescriptionName"), ::OpenAPI::toJsonValue(m_video_description_name));
    }
    return obj;
}

QList OAIOutput::getAudioDescriptionNames() const {
    return m_audio_description_names;
}
void OAIOutput::setAudioDescriptionNames(const QList &audio_description_names) {
    m_audio_description_names = audio_description_names;
    m_audio_description_names_isSet = true;
}

bool OAIOutput::is_audio_description_names_Set() const{
    return m_audio_description_names_isSet;
}

bool OAIOutput::is_audio_description_names_Valid() const{
    return m_audio_description_names_isValid;
}

QList OAIOutput::getCaptionDescriptionNames() const {
    return m_caption_description_names;
}
void OAIOutput::setCaptionDescriptionNames(const QList &caption_description_names) {
    m_caption_description_names = caption_description_names;
    m_caption_description_names_isSet = true;
}

bool OAIOutput::is_caption_description_names_Set() const{
    return m_caption_description_names_isSet;
}

bool OAIOutput::is_caption_description_names_Valid() const{
    return m_caption_description_names_isValid;
}

QString OAIOutput::getOutputName() const {
    return m_output_name;
}
void OAIOutput::setOutputName(const QString &output_name) {
    m_output_name = output_name;
    m_output_name_isSet = true;
}

bool OAIOutput::is_output_name_Set() const{
    return m_output_name_isSet;
}

bool OAIOutput::is_output_name_Valid() const{
    return m_output_name_isValid;
}

OAIOutput_OutputSettings OAIOutput::getOutputSettings() const {
    return m_output_settings;
}
void OAIOutput::setOutputSettings(const OAIOutput_OutputSettings &output_settings) {
    m_output_settings = output_settings;
    m_output_settings_isSet = true;
}

bool OAIOutput::is_output_settings_Set() const{
    return m_output_settings_isSet;
}

bool OAIOutput::is_output_settings_Valid() const{
    return m_output_settings_isValid;
}

QString OAIOutput::getVideoDescriptionName() const {
    return m_video_description_name;
}
void OAIOutput::setVideoDescriptionName(const QString &video_description_name) {
    m_video_description_name = video_description_name;
    m_video_description_name_isSet = true;
}

bool OAIOutput::is_video_description_name_Set() const{
    return m_video_description_name_isSet;
}

bool OAIOutput::is_video_description_name_Valid() const{
    return m_video_description_name_isValid;
}

bool OAIOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_description_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_description_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_description_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_settings_isValid && true;
}

} // namespace OpenAPI
