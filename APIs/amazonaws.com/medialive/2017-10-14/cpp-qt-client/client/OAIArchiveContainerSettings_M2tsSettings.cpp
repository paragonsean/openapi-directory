/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchiveContainerSettings_M2tsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchiveContainerSettings_M2tsSettings::OAIArchiveContainerSettings_M2tsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchiveContainerSettings_M2tsSettings::OAIArchiveContainerSettings_M2tsSettings() {
    this->initializeModel();
}

OAIArchiveContainerSettings_M2tsSettings::~OAIArchiveContainerSettings_M2tsSettings() {}

void OAIArchiveContainerSettings_M2tsSettings::initializeModel() {

    m_absent_input_audio_behavior_isSet = false;
    m_absent_input_audio_behavior_isValid = false;

    m_arib_isSet = false;
    m_arib_isValid = false;

    m_arib_captions_pid_isSet = false;
    m_arib_captions_pid_isValid = false;

    m_arib_captions_pid_control_isSet = false;
    m_arib_captions_pid_control_isValid = false;

    m_audio_buffer_model_isSet = false;
    m_audio_buffer_model_isValid = false;

    m_audio_frames_per_pes_isSet = false;
    m_audio_frames_per_pes_isValid = false;

    m_audio_pids_isSet = false;
    m_audio_pids_isValid = false;

    m_audio_stream_type_isSet = false;
    m_audio_stream_type_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_buffer_model_isSet = false;
    m_buffer_model_isValid = false;

    m_cc_descriptor_isSet = false;
    m_cc_descriptor_isValid = false;

    m_dvb_nit_settings_isSet = false;
    m_dvb_nit_settings_isValid = false;

    m_dvb_sdt_settings_isSet = false;
    m_dvb_sdt_settings_isValid = false;

    m_dvb_sub_pids_isSet = false;
    m_dvb_sub_pids_isValid = false;

    m_dvb_tdt_settings_isSet = false;
    m_dvb_tdt_settings_isValid = false;

    m_dvb_teletext_pid_isSet = false;
    m_dvb_teletext_pid_isValid = false;

    m_ebif_isSet = false;
    m_ebif_isValid = false;

    m_ebp_audio_interval_isSet = false;
    m_ebp_audio_interval_isValid = false;

    m_ebp_lookahead_ms_isSet = false;
    m_ebp_lookahead_ms_isValid = false;

    m_ebp_placement_isSet = false;
    m_ebp_placement_isValid = false;

    m_ecm_pid_isSet = false;
    m_ecm_pid_isValid = false;

    m_es_rate_in_pes_isSet = false;
    m_es_rate_in_pes_isValid = false;

    m_etv_platform_pid_isSet = false;
    m_etv_platform_pid_isValid = false;

    m_etv_signal_pid_isSet = false;
    m_etv_signal_pid_isValid = false;

    m_fragment_time_isSet = false;
    m_fragment_time_isValid = false;

    m_klv_isSet = false;
    m_klv_isValid = false;

    m_klv_data_pids_isSet = false;
    m_klv_data_pids_isValid = false;

    m_nielsen_id3_behavior_isSet = false;
    m_nielsen_id3_behavior_isValid = false;

    m_null_packet_bitrate_isSet = false;
    m_null_packet_bitrate_isValid = false;

    m_pat_interval_isSet = false;
    m_pat_interval_isValid = false;

    m_pcr_control_isSet = false;
    m_pcr_control_isValid = false;

    m_pcr_period_isSet = false;
    m_pcr_period_isValid = false;

    m_pcr_pid_isSet = false;
    m_pcr_pid_isValid = false;

    m_pmt_interval_isSet = false;
    m_pmt_interval_isValid = false;

    m_pmt_pid_isSet = false;
    m_pmt_pid_isValid = false;

    m_program_num_isSet = false;
    m_program_num_isValid = false;

    m_rate_mode_isSet = false;
    m_rate_mode_isValid = false;

    m_scte27_pids_isSet = false;
    m_scte27_pids_isValid = false;

    m_scte35_control_isSet = false;
    m_scte35_control_isValid = false;

    m_scte35_pid_isSet = false;
    m_scte35_pid_isValid = false;

    m_segmentation_markers_isSet = false;
    m_segmentation_markers_isValid = false;

    m_segmentation_style_isSet = false;
    m_segmentation_style_isValid = false;

    m_segmentation_time_isSet = false;
    m_segmentation_time_isValid = false;

    m_timed_metadata_behavior_isSet = false;
    m_timed_metadata_behavior_isValid = false;

    m_timed_metadata_pid_isSet = false;
    m_timed_metadata_pid_isValid = false;

    m_transport_stream_id_isSet = false;
    m_transport_stream_id_isValid = false;

    m_video_pid_isSet = false;
    m_video_pid_isValid = false;

    m_scte35_preroll_pullup_milliseconds_isSet = false;
    m_scte35_preroll_pullup_milliseconds_isValid = false;
}

void OAIArchiveContainerSettings_M2tsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArchiveContainerSettings_M2tsSettings::fromJsonObject(QJsonObject json) {

    m_absent_input_audio_behavior_isValid = ::OpenAPI::fromJsonValue(m_absent_input_audio_behavior, json[QString("AbsentInputAudioBehavior")]);
    m_absent_input_audio_behavior_isSet = !json[QString("AbsentInputAudioBehavior")].isNull() && m_absent_input_audio_behavior_isValid;

    m_arib_isValid = ::OpenAPI::fromJsonValue(m_arib, json[QString("Arib")]);
    m_arib_isSet = !json[QString("Arib")].isNull() && m_arib_isValid;

    m_arib_captions_pid_isValid = ::OpenAPI::fromJsonValue(m_arib_captions_pid, json[QString("AribCaptionsPid")]);
    m_arib_captions_pid_isSet = !json[QString("AribCaptionsPid")].isNull() && m_arib_captions_pid_isValid;

    m_arib_captions_pid_control_isValid = ::OpenAPI::fromJsonValue(m_arib_captions_pid_control, json[QString("AribCaptionsPidControl")]);
    m_arib_captions_pid_control_isSet = !json[QString("AribCaptionsPidControl")].isNull() && m_arib_captions_pid_control_isValid;

    m_audio_buffer_model_isValid = ::OpenAPI::fromJsonValue(m_audio_buffer_model, json[QString("AudioBufferModel")]);
    m_audio_buffer_model_isSet = !json[QString("AudioBufferModel")].isNull() && m_audio_buffer_model_isValid;

    m_audio_frames_per_pes_isValid = ::OpenAPI::fromJsonValue(m_audio_frames_per_pes, json[QString("AudioFramesPerPes")]);
    m_audio_frames_per_pes_isSet = !json[QString("AudioFramesPerPes")].isNull() && m_audio_frames_per_pes_isValid;

    m_audio_pids_isValid = ::OpenAPI::fromJsonValue(m_audio_pids, json[QString("AudioPids")]);
    m_audio_pids_isSet = !json[QString("AudioPids")].isNull() && m_audio_pids_isValid;

    m_audio_stream_type_isValid = ::OpenAPI::fromJsonValue(m_audio_stream_type, json[QString("AudioStreamType")]);
    m_audio_stream_type_isSet = !json[QString("AudioStreamType")].isNull() && m_audio_stream_type_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("Bitrate")]);
    m_bitrate_isSet = !json[QString("Bitrate")].isNull() && m_bitrate_isValid;

    m_buffer_model_isValid = ::OpenAPI::fromJsonValue(m_buffer_model, json[QString("BufferModel")]);
    m_buffer_model_isSet = !json[QString("BufferModel")].isNull() && m_buffer_model_isValid;

    m_cc_descriptor_isValid = ::OpenAPI::fromJsonValue(m_cc_descriptor, json[QString("CcDescriptor")]);
    m_cc_descriptor_isSet = !json[QString("CcDescriptor")].isNull() && m_cc_descriptor_isValid;

    m_dvb_nit_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_nit_settings, json[QString("DvbNitSettings")]);
    m_dvb_nit_settings_isSet = !json[QString("DvbNitSettings")].isNull() && m_dvb_nit_settings_isValid;

    m_dvb_sdt_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_sdt_settings, json[QString("DvbSdtSettings")]);
    m_dvb_sdt_settings_isSet = !json[QString("DvbSdtSettings")].isNull() && m_dvb_sdt_settings_isValid;

    m_dvb_sub_pids_isValid = ::OpenAPI::fromJsonValue(m_dvb_sub_pids, json[QString("DvbSubPids")]);
    m_dvb_sub_pids_isSet = !json[QString("DvbSubPids")].isNull() && m_dvb_sub_pids_isValid;

    m_dvb_tdt_settings_isValid = ::OpenAPI::fromJsonValue(m_dvb_tdt_settings, json[QString("DvbTdtSettings")]);
    m_dvb_tdt_settings_isSet = !json[QString("DvbTdtSettings")].isNull() && m_dvb_tdt_settings_isValid;

    m_dvb_teletext_pid_isValid = ::OpenAPI::fromJsonValue(m_dvb_teletext_pid, json[QString("DvbTeletextPid")]);
    m_dvb_teletext_pid_isSet = !json[QString("DvbTeletextPid")].isNull() && m_dvb_teletext_pid_isValid;

    m_ebif_isValid = ::OpenAPI::fromJsonValue(m_ebif, json[QString("Ebif")]);
    m_ebif_isSet = !json[QString("Ebif")].isNull() && m_ebif_isValid;

    m_ebp_audio_interval_isValid = ::OpenAPI::fromJsonValue(m_ebp_audio_interval, json[QString("EbpAudioInterval")]);
    m_ebp_audio_interval_isSet = !json[QString("EbpAudioInterval")].isNull() && m_ebp_audio_interval_isValid;

    m_ebp_lookahead_ms_isValid = ::OpenAPI::fromJsonValue(m_ebp_lookahead_ms, json[QString("EbpLookaheadMs")]);
    m_ebp_lookahead_ms_isSet = !json[QString("EbpLookaheadMs")].isNull() && m_ebp_lookahead_ms_isValid;

    m_ebp_placement_isValid = ::OpenAPI::fromJsonValue(m_ebp_placement, json[QString("EbpPlacement")]);
    m_ebp_placement_isSet = !json[QString("EbpPlacement")].isNull() && m_ebp_placement_isValid;

    m_ecm_pid_isValid = ::OpenAPI::fromJsonValue(m_ecm_pid, json[QString("EcmPid")]);
    m_ecm_pid_isSet = !json[QString("EcmPid")].isNull() && m_ecm_pid_isValid;

    m_es_rate_in_pes_isValid = ::OpenAPI::fromJsonValue(m_es_rate_in_pes, json[QString("EsRateInPes")]);
    m_es_rate_in_pes_isSet = !json[QString("EsRateInPes")].isNull() && m_es_rate_in_pes_isValid;

    m_etv_platform_pid_isValid = ::OpenAPI::fromJsonValue(m_etv_platform_pid, json[QString("EtvPlatformPid")]);
    m_etv_platform_pid_isSet = !json[QString("EtvPlatformPid")].isNull() && m_etv_platform_pid_isValid;

    m_etv_signal_pid_isValid = ::OpenAPI::fromJsonValue(m_etv_signal_pid, json[QString("EtvSignalPid")]);
    m_etv_signal_pid_isSet = !json[QString("EtvSignalPid")].isNull() && m_etv_signal_pid_isValid;

    m_fragment_time_isValid = ::OpenAPI::fromJsonValue(m_fragment_time, json[QString("FragmentTime")]);
    m_fragment_time_isSet = !json[QString("FragmentTime")].isNull() && m_fragment_time_isValid;

    m_klv_isValid = ::OpenAPI::fromJsonValue(m_klv, json[QString("Klv")]);
    m_klv_isSet = !json[QString("Klv")].isNull() && m_klv_isValid;

    m_klv_data_pids_isValid = ::OpenAPI::fromJsonValue(m_klv_data_pids, json[QString("KlvDataPids")]);
    m_klv_data_pids_isSet = !json[QString("KlvDataPids")].isNull() && m_klv_data_pids_isValid;

    m_nielsen_id3_behavior_isValid = ::OpenAPI::fromJsonValue(m_nielsen_id3_behavior, json[QString("NielsenId3Behavior")]);
    m_nielsen_id3_behavior_isSet = !json[QString("NielsenId3Behavior")].isNull() && m_nielsen_id3_behavior_isValid;

    m_null_packet_bitrate_isValid = ::OpenAPI::fromJsonValue(m_null_packet_bitrate, json[QString("NullPacketBitrate")]);
    m_null_packet_bitrate_isSet = !json[QString("NullPacketBitrate")].isNull() && m_null_packet_bitrate_isValid;

    m_pat_interval_isValid = ::OpenAPI::fromJsonValue(m_pat_interval, json[QString("PatInterval")]);
    m_pat_interval_isSet = !json[QString("PatInterval")].isNull() && m_pat_interval_isValid;

    m_pcr_control_isValid = ::OpenAPI::fromJsonValue(m_pcr_control, json[QString("PcrControl")]);
    m_pcr_control_isSet = !json[QString("PcrControl")].isNull() && m_pcr_control_isValid;

    m_pcr_period_isValid = ::OpenAPI::fromJsonValue(m_pcr_period, json[QString("PcrPeriod")]);
    m_pcr_period_isSet = !json[QString("PcrPeriod")].isNull() && m_pcr_period_isValid;

    m_pcr_pid_isValid = ::OpenAPI::fromJsonValue(m_pcr_pid, json[QString("PcrPid")]);
    m_pcr_pid_isSet = !json[QString("PcrPid")].isNull() && m_pcr_pid_isValid;

    m_pmt_interval_isValid = ::OpenAPI::fromJsonValue(m_pmt_interval, json[QString("PmtInterval")]);
    m_pmt_interval_isSet = !json[QString("PmtInterval")].isNull() && m_pmt_interval_isValid;

    m_pmt_pid_isValid = ::OpenAPI::fromJsonValue(m_pmt_pid, json[QString("PmtPid")]);
    m_pmt_pid_isSet = !json[QString("PmtPid")].isNull() && m_pmt_pid_isValid;

    m_program_num_isValid = ::OpenAPI::fromJsonValue(m_program_num, json[QString("ProgramNum")]);
    m_program_num_isSet = !json[QString("ProgramNum")].isNull() && m_program_num_isValid;

    m_rate_mode_isValid = ::OpenAPI::fromJsonValue(m_rate_mode, json[QString("RateMode")]);
    m_rate_mode_isSet = !json[QString("RateMode")].isNull() && m_rate_mode_isValid;

    m_scte27_pids_isValid = ::OpenAPI::fromJsonValue(m_scte27_pids, json[QString("Scte27Pids")]);
    m_scte27_pids_isSet = !json[QString("Scte27Pids")].isNull() && m_scte27_pids_isValid;

    m_scte35_control_isValid = ::OpenAPI::fromJsonValue(m_scte35_control, json[QString("Scte35Control")]);
    m_scte35_control_isSet = !json[QString("Scte35Control")].isNull() && m_scte35_control_isValid;

    m_scte35_pid_isValid = ::OpenAPI::fromJsonValue(m_scte35_pid, json[QString("Scte35Pid")]);
    m_scte35_pid_isSet = !json[QString("Scte35Pid")].isNull() && m_scte35_pid_isValid;

    m_segmentation_markers_isValid = ::OpenAPI::fromJsonValue(m_segmentation_markers, json[QString("SegmentationMarkers")]);
    m_segmentation_markers_isSet = !json[QString("SegmentationMarkers")].isNull() && m_segmentation_markers_isValid;

    m_segmentation_style_isValid = ::OpenAPI::fromJsonValue(m_segmentation_style, json[QString("SegmentationStyle")]);
    m_segmentation_style_isSet = !json[QString("SegmentationStyle")].isNull() && m_segmentation_style_isValid;

    m_segmentation_time_isValid = ::OpenAPI::fromJsonValue(m_segmentation_time, json[QString("SegmentationTime")]);
    m_segmentation_time_isSet = !json[QString("SegmentationTime")].isNull() && m_segmentation_time_isValid;

    m_timed_metadata_behavior_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_behavior, json[QString("TimedMetadataBehavior")]);
    m_timed_metadata_behavior_isSet = !json[QString("TimedMetadataBehavior")].isNull() && m_timed_metadata_behavior_isValid;

    m_timed_metadata_pid_isValid = ::OpenAPI::fromJsonValue(m_timed_metadata_pid, json[QString("TimedMetadataPid")]);
    m_timed_metadata_pid_isSet = !json[QString("TimedMetadataPid")].isNull() && m_timed_metadata_pid_isValid;

    m_transport_stream_id_isValid = ::OpenAPI::fromJsonValue(m_transport_stream_id, json[QString("TransportStreamId")]);
    m_transport_stream_id_isSet = !json[QString("TransportStreamId")].isNull() && m_transport_stream_id_isValid;

    m_video_pid_isValid = ::OpenAPI::fromJsonValue(m_video_pid, json[QString("VideoPid")]);
    m_video_pid_isSet = !json[QString("VideoPid")].isNull() && m_video_pid_isValid;

    m_scte35_preroll_pullup_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_scte35_preroll_pullup_milliseconds, json[QString("Scte35PrerollPullupMilliseconds")]);
    m_scte35_preroll_pullup_milliseconds_isSet = !json[QString("Scte35PrerollPullupMilliseconds")].isNull() && m_scte35_preroll_pullup_milliseconds_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArchiveContainerSettings_M2tsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_absent_input_audio_behavior.isSet()) {
        obj.insert(QString("AbsentInputAudioBehavior"), ::OpenAPI::toJsonValue(m_absent_input_audio_behavior));
    }
    if (m_arib.isSet()) {
        obj.insert(QString("Arib"), ::OpenAPI::toJsonValue(m_arib));
    }
    if (m_arib_captions_pid_isSet) {
        obj.insert(QString("AribCaptionsPid"), ::OpenAPI::toJsonValue(m_arib_captions_pid));
    }
    if (m_arib_captions_pid_control.isSet()) {
        obj.insert(QString("AribCaptionsPidControl"), ::OpenAPI::toJsonValue(m_arib_captions_pid_control));
    }
    if (m_audio_buffer_model.isSet()) {
        obj.insert(QString("AudioBufferModel"), ::OpenAPI::toJsonValue(m_audio_buffer_model));
    }
    if (m_audio_frames_per_pes_isSet) {
        obj.insert(QString("AudioFramesPerPes"), ::OpenAPI::toJsonValue(m_audio_frames_per_pes));
    }
    if (m_audio_pids_isSet) {
        obj.insert(QString("AudioPids"), ::OpenAPI::toJsonValue(m_audio_pids));
    }
    if (m_audio_stream_type.isSet()) {
        obj.insert(QString("AudioStreamType"), ::OpenAPI::toJsonValue(m_audio_stream_type));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("Bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_buffer_model.isSet()) {
        obj.insert(QString("BufferModel"), ::OpenAPI::toJsonValue(m_buffer_model));
    }
    if (m_cc_descriptor.isSet()) {
        obj.insert(QString("CcDescriptor"), ::OpenAPI::toJsonValue(m_cc_descriptor));
    }
    if (m_dvb_nit_settings.isSet()) {
        obj.insert(QString("DvbNitSettings"), ::OpenAPI::toJsonValue(m_dvb_nit_settings));
    }
    if (m_dvb_sdt_settings.isSet()) {
        obj.insert(QString("DvbSdtSettings"), ::OpenAPI::toJsonValue(m_dvb_sdt_settings));
    }
    if (m_dvb_sub_pids_isSet) {
        obj.insert(QString("DvbSubPids"), ::OpenAPI::toJsonValue(m_dvb_sub_pids));
    }
    if (m_dvb_tdt_settings.isSet()) {
        obj.insert(QString("DvbTdtSettings"), ::OpenAPI::toJsonValue(m_dvb_tdt_settings));
    }
    if (m_dvb_teletext_pid_isSet) {
        obj.insert(QString("DvbTeletextPid"), ::OpenAPI::toJsonValue(m_dvb_teletext_pid));
    }
    if (m_ebif.isSet()) {
        obj.insert(QString("Ebif"), ::OpenAPI::toJsonValue(m_ebif));
    }
    if (m_ebp_audio_interval.isSet()) {
        obj.insert(QString("EbpAudioInterval"), ::OpenAPI::toJsonValue(m_ebp_audio_interval));
    }
    if (m_ebp_lookahead_ms_isSet) {
        obj.insert(QString("EbpLookaheadMs"), ::OpenAPI::toJsonValue(m_ebp_lookahead_ms));
    }
    if (m_ebp_placement.isSet()) {
        obj.insert(QString("EbpPlacement"), ::OpenAPI::toJsonValue(m_ebp_placement));
    }
    if (m_ecm_pid_isSet) {
        obj.insert(QString("EcmPid"), ::OpenAPI::toJsonValue(m_ecm_pid));
    }
    if (m_es_rate_in_pes.isSet()) {
        obj.insert(QString("EsRateInPes"), ::OpenAPI::toJsonValue(m_es_rate_in_pes));
    }
    if (m_etv_platform_pid_isSet) {
        obj.insert(QString("EtvPlatformPid"), ::OpenAPI::toJsonValue(m_etv_platform_pid));
    }
    if (m_etv_signal_pid_isSet) {
        obj.insert(QString("EtvSignalPid"), ::OpenAPI::toJsonValue(m_etv_signal_pid));
    }
    if (m_fragment_time_isSet) {
        obj.insert(QString("FragmentTime"), ::OpenAPI::toJsonValue(m_fragment_time));
    }
    if (m_klv.isSet()) {
        obj.insert(QString("Klv"), ::OpenAPI::toJsonValue(m_klv));
    }
    if (m_klv_data_pids_isSet) {
        obj.insert(QString("KlvDataPids"), ::OpenAPI::toJsonValue(m_klv_data_pids));
    }
    if (m_nielsen_id3_behavior.isSet()) {
        obj.insert(QString("NielsenId3Behavior"), ::OpenAPI::toJsonValue(m_nielsen_id3_behavior));
    }
    if (m_null_packet_bitrate_isSet) {
        obj.insert(QString("NullPacketBitrate"), ::OpenAPI::toJsonValue(m_null_packet_bitrate));
    }
    if (m_pat_interval_isSet) {
        obj.insert(QString("PatInterval"), ::OpenAPI::toJsonValue(m_pat_interval));
    }
    if (m_pcr_control.isSet()) {
        obj.insert(QString("PcrControl"), ::OpenAPI::toJsonValue(m_pcr_control));
    }
    if (m_pcr_period_isSet) {
        obj.insert(QString("PcrPeriod"), ::OpenAPI::toJsonValue(m_pcr_period));
    }
    if (m_pcr_pid_isSet) {
        obj.insert(QString("PcrPid"), ::OpenAPI::toJsonValue(m_pcr_pid));
    }
    if (m_pmt_interval_isSet) {
        obj.insert(QString("PmtInterval"), ::OpenAPI::toJsonValue(m_pmt_interval));
    }
    if (m_pmt_pid_isSet) {
        obj.insert(QString("PmtPid"), ::OpenAPI::toJsonValue(m_pmt_pid));
    }
    if (m_program_num_isSet) {
        obj.insert(QString("ProgramNum"), ::OpenAPI::toJsonValue(m_program_num));
    }
    if (m_rate_mode.isSet()) {
        obj.insert(QString("RateMode"), ::OpenAPI::toJsonValue(m_rate_mode));
    }
    if (m_scte27_pids_isSet) {
        obj.insert(QString("Scte27Pids"), ::OpenAPI::toJsonValue(m_scte27_pids));
    }
    if (m_scte35_control.isSet()) {
        obj.insert(QString("Scte35Control"), ::OpenAPI::toJsonValue(m_scte35_control));
    }
    if (m_scte35_pid_isSet) {
        obj.insert(QString("Scte35Pid"), ::OpenAPI::toJsonValue(m_scte35_pid));
    }
    if (m_segmentation_markers.isSet()) {
        obj.insert(QString("SegmentationMarkers"), ::OpenAPI::toJsonValue(m_segmentation_markers));
    }
    if (m_segmentation_style.isSet()) {
        obj.insert(QString("SegmentationStyle"), ::OpenAPI::toJsonValue(m_segmentation_style));
    }
    if (m_segmentation_time_isSet) {
        obj.insert(QString("SegmentationTime"), ::OpenAPI::toJsonValue(m_segmentation_time));
    }
    if (m_timed_metadata_behavior.isSet()) {
        obj.insert(QString("TimedMetadataBehavior"), ::OpenAPI::toJsonValue(m_timed_metadata_behavior));
    }
    if (m_timed_metadata_pid_isSet) {
        obj.insert(QString("TimedMetadataPid"), ::OpenAPI::toJsonValue(m_timed_metadata_pid));
    }
    if (m_transport_stream_id_isSet) {
        obj.insert(QString("TransportStreamId"), ::OpenAPI::toJsonValue(m_transport_stream_id));
    }
    if (m_video_pid_isSet) {
        obj.insert(QString("VideoPid"), ::OpenAPI::toJsonValue(m_video_pid));
    }
    if (m_scte35_preroll_pullup_milliseconds_isSet) {
        obj.insert(QString("Scte35PrerollPullupMilliseconds"), ::OpenAPI::toJsonValue(m_scte35_preroll_pullup_milliseconds));
    }
    return obj;
}

OAIM2tsAbsentInputAudioBehavior OAIArchiveContainerSettings_M2tsSettings::getAbsentInputAudioBehavior() const {
    return m_absent_input_audio_behavior;
}
void OAIArchiveContainerSettings_M2tsSettings::setAbsentInputAudioBehavior(const OAIM2tsAbsentInputAudioBehavior &absent_input_audio_behavior) {
    m_absent_input_audio_behavior = absent_input_audio_behavior;
    m_absent_input_audio_behavior_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_absent_input_audio_behavior_Set() const{
    return m_absent_input_audio_behavior_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_absent_input_audio_behavior_Valid() const{
    return m_absent_input_audio_behavior_isValid;
}

OAIM2tsArib OAIArchiveContainerSettings_M2tsSettings::getArib() const {
    return m_arib;
}
void OAIArchiveContainerSettings_M2tsSettings::setArib(const OAIM2tsArib &arib) {
    m_arib = arib;
    m_arib_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_arib_Set() const{
    return m_arib_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_arib_Valid() const{
    return m_arib_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getAribCaptionsPid() const {
    return m_arib_captions_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setAribCaptionsPid(const QString &arib_captions_pid) {
    m_arib_captions_pid = arib_captions_pid;
    m_arib_captions_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_arib_captions_pid_Set() const{
    return m_arib_captions_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_arib_captions_pid_Valid() const{
    return m_arib_captions_pid_isValid;
}

OAIM2tsAribCaptionsPidControl OAIArchiveContainerSettings_M2tsSettings::getAribCaptionsPidControl() const {
    return m_arib_captions_pid_control;
}
void OAIArchiveContainerSettings_M2tsSettings::setAribCaptionsPidControl(const OAIM2tsAribCaptionsPidControl &arib_captions_pid_control) {
    m_arib_captions_pid_control = arib_captions_pid_control;
    m_arib_captions_pid_control_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_arib_captions_pid_control_Set() const{
    return m_arib_captions_pid_control_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_arib_captions_pid_control_Valid() const{
    return m_arib_captions_pid_control_isValid;
}

OAIM2tsAudioBufferModel OAIArchiveContainerSettings_M2tsSettings::getAudioBufferModel() const {
    return m_audio_buffer_model;
}
void OAIArchiveContainerSettings_M2tsSettings::setAudioBufferModel(const OAIM2tsAudioBufferModel &audio_buffer_model) {
    m_audio_buffer_model = audio_buffer_model;
    m_audio_buffer_model_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_buffer_model_Set() const{
    return m_audio_buffer_model_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_buffer_model_Valid() const{
    return m_audio_buffer_model_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getAudioFramesPerPes() const {
    return m_audio_frames_per_pes;
}
void OAIArchiveContainerSettings_M2tsSettings::setAudioFramesPerPes(const qint32 &audio_frames_per_pes) {
    m_audio_frames_per_pes = audio_frames_per_pes;
    m_audio_frames_per_pes_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_frames_per_pes_Set() const{
    return m_audio_frames_per_pes_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_frames_per_pes_Valid() const{
    return m_audio_frames_per_pes_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getAudioPids() const {
    return m_audio_pids;
}
void OAIArchiveContainerSettings_M2tsSettings::setAudioPids(const QString &audio_pids) {
    m_audio_pids = audio_pids;
    m_audio_pids_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_pids_Set() const{
    return m_audio_pids_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_pids_Valid() const{
    return m_audio_pids_isValid;
}

OAIM2tsAudioStreamType OAIArchiveContainerSettings_M2tsSettings::getAudioStreamType() const {
    return m_audio_stream_type;
}
void OAIArchiveContainerSettings_M2tsSettings::setAudioStreamType(const OAIM2tsAudioStreamType &audio_stream_type) {
    m_audio_stream_type = audio_stream_type;
    m_audio_stream_type_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_stream_type_Set() const{
    return m_audio_stream_type_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_audio_stream_type_Valid() const{
    return m_audio_stream_type_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getBitrate() const {
    return m_bitrate;
}
void OAIArchiveContainerSettings_M2tsSettings::setBitrate(const qint32 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

OAIM2tsBufferModel OAIArchiveContainerSettings_M2tsSettings::getBufferModel() const {
    return m_buffer_model;
}
void OAIArchiveContainerSettings_M2tsSettings::setBufferModel(const OAIM2tsBufferModel &buffer_model) {
    m_buffer_model = buffer_model;
    m_buffer_model_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_buffer_model_Set() const{
    return m_buffer_model_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_buffer_model_Valid() const{
    return m_buffer_model_isValid;
}

OAIM2tsCcDescriptor OAIArchiveContainerSettings_M2tsSettings::getCcDescriptor() const {
    return m_cc_descriptor;
}
void OAIArchiveContainerSettings_M2tsSettings::setCcDescriptor(const OAIM2tsCcDescriptor &cc_descriptor) {
    m_cc_descriptor = cc_descriptor;
    m_cc_descriptor_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_cc_descriptor_Set() const{
    return m_cc_descriptor_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_cc_descriptor_Valid() const{
    return m_cc_descriptor_isValid;
}

OAIM2tsSettings_DvbNitSettings OAIArchiveContainerSettings_M2tsSettings::getDvbNitSettings() const {
    return m_dvb_nit_settings;
}
void OAIArchiveContainerSettings_M2tsSettings::setDvbNitSettings(const OAIM2tsSettings_DvbNitSettings &dvb_nit_settings) {
    m_dvb_nit_settings = dvb_nit_settings;
    m_dvb_nit_settings_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_nit_settings_Set() const{
    return m_dvb_nit_settings_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_nit_settings_Valid() const{
    return m_dvb_nit_settings_isValid;
}

OAIM2tsSettings_DvbSdtSettings OAIArchiveContainerSettings_M2tsSettings::getDvbSdtSettings() const {
    return m_dvb_sdt_settings;
}
void OAIArchiveContainerSettings_M2tsSettings::setDvbSdtSettings(const OAIM2tsSettings_DvbSdtSettings &dvb_sdt_settings) {
    m_dvb_sdt_settings = dvb_sdt_settings;
    m_dvb_sdt_settings_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_sdt_settings_Set() const{
    return m_dvb_sdt_settings_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_sdt_settings_Valid() const{
    return m_dvb_sdt_settings_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getDvbSubPids() const {
    return m_dvb_sub_pids;
}
void OAIArchiveContainerSettings_M2tsSettings::setDvbSubPids(const QString &dvb_sub_pids) {
    m_dvb_sub_pids = dvb_sub_pids;
    m_dvb_sub_pids_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_sub_pids_Set() const{
    return m_dvb_sub_pids_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_sub_pids_Valid() const{
    return m_dvb_sub_pids_isValid;
}

OAIM2tsSettings_DvbTdtSettings OAIArchiveContainerSettings_M2tsSettings::getDvbTdtSettings() const {
    return m_dvb_tdt_settings;
}
void OAIArchiveContainerSettings_M2tsSettings::setDvbTdtSettings(const OAIM2tsSettings_DvbTdtSettings &dvb_tdt_settings) {
    m_dvb_tdt_settings = dvb_tdt_settings;
    m_dvb_tdt_settings_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_tdt_settings_Set() const{
    return m_dvb_tdt_settings_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_tdt_settings_Valid() const{
    return m_dvb_tdt_settings_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getDvbTeletextPid() const {
    return m_dvb_teletext_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setDvbTeletextPid(const QString &dvb_teletext_pid) {
    m_dvb_teletext_pid = dvb_teletext_pid;
    m_dvb_teletext_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_teletext_pid_Set() const{
    return m_dvb_teletext_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_dvb_teletext_pid_Valid() const{
    return m_dvb_teletext_pid_isValid;
}

OAIM2tsEbifControl OAIArchiveContainerSettings_M2tsSettings::getEbif() const {
    return m_ebif;
}
void OAIArchiveContainerSettings_M2tsSettings::setEbif(const OAIM2tsEbifControl &ebif) {
    m_ebif = ebif;
    m_ebif_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebif_Set() const{
    return m_ebif_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebif_Valid() const{
    return m_ebif_isValid;
}

OAIM2tsAudioInterval OAIArchiveContainerSettings_M2tsSettings::getEbpAudioInterval() const {
    return m_ebp_audio_interval;
}
void OAIArchiveContainerSettings_M2tsSettings::setEbpAudioInterval(const OAIM2tsAudioInterval &ebp_audio_interval) {
    m_ebp_audio_interval = ebp_audio_interval;
    m_ebp_audio_interval_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebp_audio_interval_Set() const{
    return m_ebp_audio_interval_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebp_audio_interval_Valid() const{
    return m_ebp_audio_interval_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getEbpLookaheadMs() const {
    return m_ebp_lookahead_ms;
}
void OAIArchiveContainerSettings_M2tsSettings::setEbpLookaheadMs(const qint32 &ebp_lookahead_ms) {
    m_ebp_lookahead_ms = ebp_lookahead_ms;
    m_ebp_lookahead_ms_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebp_lookahead_ms_Set() const{
    return m_ebp_lookahead_ms_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebp_lookahead_ms_Valid() const{
    return m_ebp_lookahead_ms_isValid;
}

OAIM2tsEbpPlacement OAIArchiveContainerSettings_M2tsSettings::getEbpPlacement() const {
    return m_ebp_placement;
}
void OAIArchiveContainerSettings_M2tsSettings::setEbpPlacement(const OAIM2tsEbpPlacement &ebp_placement) {
    m_ebp_placement = ebp_placement;
    m_ebp_placement_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebp_placement_Set() const{
    return m_ebp_placement_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ebp_placement_Valid() const{
    return m_ebp_placement_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getEcmPid() const {
    return m_ecm_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setEcmPid(const QString &ecm_pid) {
    m_ecm_pid = ecm_pid;
    m_ecm_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ecm_pid_Set() const{
    return m_ecm_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_ecm_pid_Valid() const{
    return m_ecm_pid_isValid;
}

OAIM2tsEsRateInPes OAIArchiveContainerSettings_M2tsSettings::getEsRateInPes() const {
    return m_es_rate_in_pes;
}
void OAIArchiveContainerSettings_M2tsSettings::setEsRateInPes(const OAIM2tsEsRateInPes &es_rate_in_pes) {
    m_es_rate_in_pes = es_rate_in_pes;
    m_es_rate_in_pes_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_es_rate_in_pes_Set() const{
    return m_es_rate_in_pes_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_es_rate_in_pes_Valid() const{
    return m_es_rate_in_pes_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getEtvPlatformPid() const {
    return m_etv_platform_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setEtvPlatformPid(const QString &etv_platform_pid) {
    m_etv_platform_pid = etv_platform_pid;
    m_etv_platform_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_etv_platform_pid_Set() const{
    return m_etv_platform_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_etv_platform_pid_Valid() const{
    return m_etv_platform_pid_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getEtvSignalPid() const {
    return m_etv_signal_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setEtvSignalPid(const QString &etv_signal_pid) {
    m_etv_signal_pid = etv_signal_pid;
    m_etv_signal_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_etv_signal_pid_Set() const{
    return m_etv_signal_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_etv_signal_pid_Valid() const{
    return m_etv_signal_pid_isValid;
}

double OAIArchiveContainerSettings_M2tsSettings::getFragmentTime() const {
    return m_fragment_time;
}
void OAIArchiveContainerSettings_M2tsSettings::setFragmentTime(const double &fragment_time) {
    m_fragment_time = fragment_time;
    m_fragment_time_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_fragment_time_Set() const{
    return m_fragment_time_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_fragment_time_Valid() const{
    return m_fragment_time_isValid;
}

OAIM2tsKlv OAIArchiveContainerSettings_M2tsSettings::getKlv() const {
    return m_klv;
}
void OAIArchiveContainerSettings_M2tsSettings::setKlv(const OAIM2tsKlv &klv) {
    m_klv = klv;
    m_klv_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_klv_Set() const{
    return m_klv_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_klv_Valid() const{
    return m_klv_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getKlvDataPids() const {
    return m_klv_data_pids;
}
void OAIArchiveContainerSettings_M2tsSettings::setKlvDataPids(const QString &klv_data_pids) {
    m_klv_data_pids = klv_data_pids;
    m_klv_data_pids_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_klv_data_pids_Set() const{
    return m_klv_data_pids_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_klv_data_pids_Valid() const{
    return m_klv_data_pids_isValid;
}

OAIM2tsNielsenId3Behavior OAIArchiveContainerSettings_M2tsSettings::getNielsenId3Behavior() const {
    return m_nielsen_id3_behavior;
}
void OAIArchiveContainerSettings_M2tsSettings::setNielsenId3Behavior(const OAIM2tsNielsenId3Behavior &nielsen_id3_behavior) {
    m_nielsen_id3_behavior = nielsen_id3_behavior;
    m_nielsen_id3_behavior_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_nielsen_id3_behavior_Set() const{
    return m_nielsen_id3_behavior_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_nielsen_id3_behavior_Valid() const{
    return m_nielsen_id3_behavior_isValid;
}

double OAIArchiveContainerSettings_M2tsSettings::getNullPacketBitrate() const {
    return m_null_packet_bitrate;
}
void OAIArchiveContainerSettings_M2tsSettings::setNullPacketBitrate(const double &null_packet_bitrate) {
    m_null_packet_bitrate = null_packet_bitrate;
    m_null_packet_bitrate_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_null_packet_bitrate_Set() const{
    return m_null_packet_bitrate_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_null_packet_bitrate_Valid() const{
    return m_null_packet_bitrate_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getPatInterval() const {
    return m_pat_interval;
}
void OAIArchiveContainerSettings_M2tsSettings::setPatInterval(const qint32 &pat_interval) {
    m_pat_interval = pat_interval;
    m_pat_interval_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pat_interval_Set() const{
    return m_pat_interval_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pat_interval_Valid() const{
    return m_pat_interval_isValid;
}

OAIM2tsPcrControl OAIArchiveContainerSettings_M2tsSettings::getPcrControl() const {
    return m_pcr_control;
}
void OAIArchiveContainerSettings_M2tsSettings::setPcrControl(const OAIM2tsPcrControl &pcr_control) {
    m_pcr_control = pcr_control;
    m_pcr_control_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pcr_control_Set() const{
    return m_pcr_control_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pcr_control_Valid() const{
    return m_pcr_control_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getPcrPeriod() const {
    return m_pcr_period;
}
void OAIArchiveContainerSettings_M2tsSettings::setPcrPeriod(const qint32 &pcr_period) {
    m_pcr_period = pcr_period;
    m_pcr_period_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pcr_period_Set() const{
    return m_pcr_period_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pcr_period_Valid() const{
    return m_pcr_period_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getPcrPid() const {
    return m_pcr_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setPcrPid(const QString &pcr_pid) {
    m_pcr_pid = pcr_pid;
    m_pcr_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pcr_pid_Set() const{
    return m_pcr_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pcr_pid_Valid() const{
    return m_pcr_pid_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getPmtInterval() const {
    return m_pmt_interval;
}
void OAIArchiveContainerSettings_M2tsSettings::setPmtInterval(const qint32 &pmt_interval) {
    m_pmt_interval = pmt_interval;
    m_pmt_interval_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pmt_interval_Set() const{
    return m_pmt_interval_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pmt_interval_Valid() const{
    return m_pmt_interval_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getPmtPid() const {
    return m_pmt_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setPmtPid(const QString &pmt_pid) {
    m_pmt_pid = pmt_pid;
    m_pmt_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pmt_pid_Set() const{
    return m_pmt_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_pmt_pid_Valid() const{
    return m_pmt_pid_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getProgramNum() const {
    return m_program_num;
}
void OAIArchiveContainerSettings_M2tsSettings::setProgramNum(const qint32 &program_num) {
    m_program_num = program_num;
    m_program_num_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_program_num_Set() const{
    return m_program_num_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_program_num_Valid() const{
    return m_program_num_isValid;
}

OAIM2tsRateMode OAIArchiveContainerSettings_M2tsSettings::getRateMode() const {
    return m_rate_mode;
}
void OAIArchiveContainerSettings_M2tsSettings::setRateMode(const OAIM2tsRateMode &rate_mode) {
    m_rate_mode = rate_mode;
    m_rate_mode_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_rate_mode_Set() const{
    return m_rate_mode_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_rate_mode_Valid() const{
    return m_rate_mode_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getScte27Pids() const {
    return m_scte27_pids;
}
void OAIArchiveContainerSettings_M2tsSettings::setScte27Pids(const QString &scte27_pids) {
    m_scte27_pids = scte27_pids;
    m_scte27_pids_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte27_pids_Set() const{
    return m_scte27_pids_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte27_pids_Valid() const{
    return m_scte27_pids_isValid;
}

OAIM2tsScte35Control OAIArchiveContainerSettings_M2tsSettings::getScte35Control() const {
    return m_scte35_control;
}
void OAIArchiveContainerSettings_M2tsSettings::setScte35Control(const OAIM2tsScte35Control &scte35_control) {
    m_scte35_control = scte35_control;
    m_scte35_control_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte35_control_Set() const{
    return m_scte35_control_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte35_control_Valid() const{
    return m_scte35_control_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getScte35Pid() const {
    return m_scte35_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setScte35Pid(const QString &scte35_pid) {
    m_scte35_pid = scte35_pid;
    m_scte35_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte35_pid_Set() const{
    return m_scte35_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte35_pid_Valid() const{
    return m_scte35_pid_isValid;
}

OAIM2tsSegmentationMarkers OAIArchiveContainerSettings_M2tsSettings::getSegmentationMarkers() const {
    return m_segmentation_markers;
}
void OAIArchiveContainerSettings_M2tsSettings::setSegmentationMarkers(const OAIM2tsSegmentationMarkers &segmentation_markers) {
    m_segmentation_markers = segmentation_markers;
    m_segmentation_markers_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_segmentation_markers_Set() const{
    return m_segmentation_markers_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_segmentation_markers_Valid() const{
    return m_segmentation_markers_isValid;
}

OAIM2tsSegmentationStyle OAIArchiveContainerSettings_M2tsSettings::getSegmentationStyle() const {
    return m_segmentation_style;
}
void OAIArchiveContainerSettings_M2tsSettings::setSegmentationStyle(const OAIM2tsSegmentationStyle &segmentation_style) {
    m_segmentation_style = segmentation_style;
    m_segmentation_style_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_segmentation_style_Set() const{
    return m_segmentation_style_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_segmentation_style_Valid() const{
    return m_segmentation_style_isValid;
}

double OAIArchiveContainerSettings_M2tsSettings::getSegmentationTime() const {
    return m_segmentation_time;
}
void OAIArchiveContainerSettings_M2tsSettings::setSegmentationTime(const double &segmentation_time) {
    m_segmentation_time = segmentation_time;
    m_segmentation_time_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_segmentation_time_Set() const{
    return m_segmentation_time_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_segmentation_time_Valid() const{
    return m_segmentation_time_isValid;
}

OAIM2tsTimedMetadataBehavior OAIArchiveContainerSettings_M2tsSettings::getTimedMetadataBehavior() const {
    return m_timed_metadata_behavior;
}
void OAIArchiveContainerSettings_M2tsSettings::setTimedMetadataBehavior(const OAIM2tsTimedMetadataBehavior &timed_metadata_behavior) {
    m_timed_metadata_behavior = timed_metadata_behavior;
    m_timed_metadata_behavior_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_timed_metadata_behavior_Set() const{
    return m_timed_metadata_behavior_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_timed_metadata_behavior_Valid() const{
    return m_timed_metadata_behavior_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getTimedMetadataPid() const {
    return m_timed_metadata_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setTimedMetadataPid(const QString &timed_metadata_pid) {
    m_timed_metadata_pid = timed_metadata_pid;
    m_timed_metadata_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_timed_metadata_pid_Set() const{
    return m_timed_metadata_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_timed_metadata_pid_Valid() const{
    return m_timed_metadata_pid_isValid;
}

qint32 OAIArchiveContainerSettings_M2tsSettings::getTransportStreamId() const {
    return m_transport_stream_id;
}
void OAIArchiveContainerSettings_M2tsSettings::setTransportStreamId(const qint32 &transport_stream_id) {
    m_transport_stream_id = transport_stream_id;
    m_transport_stream_id_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_transport_stream_id_Set() const{
    return m_transport_stream_id_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_transport_stream_id_Valid() const{
    return m_transport_stream_id_isValid;
}

QString OAIArchiveContainerSettings_M2tsSettings::getVideoPid() const {
    return m_video_pid;
}
void OAIArchiveContainerSettings_M2tsSettings::setVideoPid(const QString &video_pid) {
    m_video_pid = video_pid;
    m_video_pid_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_video_pid_Set() const{
    return m_video_pid_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_video_pid_Valid() const{
    return m_video_pid_isValid;
}

double OAIArchiveContainerSettings_M2tsSettings::getScte35PrerollPullupMilliseconds() const {
    return m_scte35_preroll_pullup_milliseconds;
}
void OAIArchiveContainerSettings_M2tsSettings::setScte35PrerollPullupMilliseconds(const double &scte35_preroll_pullup_milliseconds) {
    m_scte35_preroll_pullup_milliseconds = scte35_preroll_pullup_milliseconds;
    m_scte35_preroll_pullup_milliseconds_isSet = true;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte35_preroll_pullup_milliseconds_Set() const{
    return m_scte35_preroll_pullup_milliseconds_isSet;
}

bool OAIArchiveContainerSettings_M2tsSettings::is_scte35_preroll_pullup_milliseconds_Valid() const{
    return m_scte35_preroll_pullup_milliseconds_isValid;
}

bool OAIArchiveContainerSettings_M2tsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absent_input_audio_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arib.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arib_captions_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arib_captions_pid_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_buffer_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_frames_per_pes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_pids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_stream_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffer_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_nit_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sdt_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_sub_pids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_tdt_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dvb_teletext_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebif.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebp_audio_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebp_lookahead_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebp_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecm_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_es_rate_in_pes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etv_platform_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etv_signal_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_klv.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_klv_data_pids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nielsen_id3_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_packet_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pcr_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pmt_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte27_pids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_metadata_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte35_preroll_pullup_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArchiveContainerSettings_M2tsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
