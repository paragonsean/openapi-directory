/**
 * AWS Elemental MediaLive
 * API for AWS Elemental MediaLive
 *
 * The version of the OpenAPI document: 2017-10-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsSettings::OAIHlsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsSettings::OAIHlsSettings() {
    this->initializeModel();
}

OAIHlsSettings::~OAIHlsSettings() {}

void OAIHlsSettings::initializeModel() {

    m_audio_only_hls_settings_isSet = false;
    m_audio_only_hls_settings_isValid = false;

    m_fmp4_hls_settings_isSet = false;
    m_fmp4_hls_settings_isValid = false;

    m_frame_capture_hls_settings_isSet = false;
    m_frame_capture_hls_settings_isValid = false;

    m_standard_hls_settings_isSet = false;
    m_standard_hls_settings_isValid = false;
}

void OAIHlsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsSettings::fromJsonObject(QJsonObject json) {

    m_audio_only_hls_settings_isValid = ::OpenAPI::fromJsonValue(m_audio_only_hls_settings, json[QString("AudioOnlyHlsSettings")]);
    m_audio_only_hls_settings_isSet = !json[QString("AudioOnlyHlsSettings")].isNull() && m_audio_only_hls_settings_isValid;

    m_fmp4_hls_settings_isValid = ::OpenAPI::fromJsonValue(m_fmp4_hls_settings, json[QString("Fmp4HlsSettings")]);
    m_fmp4_hls_settings_isSet = !json[QString("Fmp4HlsSettings")].isNull() && m_fmp4_hls_settings_isValid;

    m_frame_capture_hls_settings_isValid = ::OpenAPI::fromJsonValue(m_frame_capture_hls_settings, json[QString("FrameCaptureHlsSettings")]);
    m_frame_capture_hls_settings_isSet = !json[QString("FrameCaptureHlsSettings")].isNull() && m_frame_capture_hls_settings_isValid;

    m_standard_hls_settings_isValid = ::OpenAPI::fromJsonValue(m_standard_hls_settings, json[QString("StandardHlsSettings")]);
    m_standard_hls_settings_isSet = !json[QString("StandardHlsSettings")].isNull() && m_standard_hls_settings_isValid;
}

QString OAIHlsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_only_hls_settings.isSet()) {
        obj.insert(QString("AudioOnlyHlsSettings"), ::OpenAPI::toJsonValue(m_audio_only_hls_settings));
    }
    if (m_fmp4_hls_settings.isSet()) {
        obj.insert(QString("Fmp4HlsSettings"), ::OpenAPI::toJsonValue(m_fmp4_hls_settings));
    }
    if (m_frame_capture_hls_settings.isSet()) {
        obj.insert(QString("FrameCaptureHlsSettings"), ::OpenAPI::toJsonValue(m_frame_capture_hls_settings));
    }
    if (m_standard_hls_settings.isSet()) {
        obj.insert(QString("StandardHlsSettings"), ::OpenAPI::toJsonValue(m_standard_hls_settings));
    }
    return obj;
}

OAIHlsSettings_AudioOnlyHlsSettings OAIHlsSettings::getAudioOnlyHlsSettings() const {
    return m_audio_only_hls_settings;
}
void OAIHlsSettings::setAudioOnlyHlsSettings(const OAIHlsSettings_AudioOnlyHlsSettings &audio_only_hls_settings) {
    m_audio_only_hls_settings = audio_only_hls_settings;
    m_audio_only_hls_settings_isSet = true;
}

bool OAIHlsSettings::is_audio_only_hls_settings_Set() const{
    return m_audio_only_hls_settings_isSet;
}

bool OAIHlsSettings::is_audio_only_hls_settings_Valid() const{
    return m_audio_only_hls_settings_isValid;
}

OAIHlsSettings_Fmp4HlsSettings OAIHlsSettings::getFmp4HlsSettings() const {
    return m_fmp4_hls_settings;
}
void OAIHlsSettings::setFmp4HlsSettings(const OAIHlsSettings_Fmp4HlsSettings &fmp4_hls_settings) {
    m_fmp4_hls_settings = fmp4_hls_settings;
    m_fmp4_hls_settings_isSet = true;
}

bool OAIHlsSettings::is_fmp4_hls_settings_Set() const{
    return m_fmp4_hls_settings_isSet;
}

bool OAIHlsSettings::is_fmp4_hls_settings_Valid() const{
    return m_fmp4_hls_settings_isValid;
}

OAIObject OAIHlsSettings::getFrameCaptureHlsSettings() const {
    return m_frame_capture_hls_settings;
}
void OAIHlsSettings::setFrameCaptureHlsSettings(const OAIObject &frame_capture_hls_settings) {
    m_frame_capture_hls_settings = frame_capture_hls_settings;
    m_frame_capture_hls_settings_isSet = true;
}

bool OAIHlsSettings::is_frame_capture_hls_settings_Set() const{
    return m_frame_capture_hls_settings_isSet;
}

bool OAIHlsSettings::is_frame_capture_hls_settings_Valid() const{
    return m_frame_capture_hls_settings_isValid;
}

OAIHlsSettings_StandardHlsSettings OAIHlsSettings::getStandardHlsSettings() const {
    return m_standard_hls_settings;
}
void OAIHlsSettings::setStandardHlsSettings(const OAIHlsSettings_StandardHlsSettings &standard_hls_settings) {
    m_standard_hls_settings = standard_hls_settings;
    m_standard_hls_settings_isSet = true;
}

bool OAIHlsSettings::is_standard_hls_settings_Set() const{
    return m_standard_hls_settings_isSet;
}

bool OAIHlsSettings::is_standard_hls_settings_Valid() const{
    return m_standard_hls_settings_isValid;
}

bool OAIHlsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_only_hls_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fmp4_hls_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_capture_hls_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_hls_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
