/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ApiKeyRestrictions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An API key resource listed in your Amazon Web Services account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListKeysResponseEntry {
  public static final String SERIALIZED_NAME_CREATE_TIME = "CreateTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "ExpireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private OffsetDateTime expireTime;

  public static final String SERIALIZED_NAME_KEY_NAME = "KeyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "Restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private ApiKeyRestrictions restrictions;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "UpdateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public ListKeysResponseEntry() {
  }

  public ListKeysResponseEntry createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public ListKeysResponseEntry description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListKeysResponseEntry expireTime(OffsetDateTime expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Get expireTime
   * @return expireTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(OffsetDateTime expireTime) {
    this.expireTime = expireTime;
  }


  public ListKeysResponseEntry keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Get keyName
   * @return keyName
   */
  @javax.annotation.Nonnull
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public ListKeysResponseEntry restrictions(ApiKeyRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Get restrictions
   * @return restrictions
   */
  @javax.annotation.Nonnull
  public ApiKeyRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(ApiKeyRestrictions restrictions) {
    this.restrictions = restrictions;
  }


  public ListKeysResponseEntry updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListKeysResponseEntry listKeysResponseEntry = (ListKeysResponseEntry) o;
    return Objects.equals(this.createTime, listKeysResponseEntry.createTime) &&
        Objects.equals(this.description, listKeysResponseEntry.description) &&
        Objects.equals(this.expireTime, listKeysResponseEntry.expireTime) &&
        Objects.equals(this.keyName, listKeysResponseEntry.keyName) &&
        Objects.equals(this.restrictions, listKeysResponseEntry.restrictions) &&
        Objects.equals(this.updateTime, listKeysResponseEntry.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, expireTime, keyName, restrictions, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListKeysResponseEntry {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreateTime");
    openapiFields.add("Description");
    openapiFields.add("ExpireTime");
    openapiFields.add("KeyName");
    openapiFields.add("Restrictions");
    openapiFields.add("UpdateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CreateTime");
    openapiRequiredFields.add("ExpireTime");
    openapiRequiredFields.add("KeyName");
    openapiRequiredFields.add("Restrictions");
    openapiRequiredFields.add("UpdateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListKeysResponseEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListKeysResponseEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListKeysResponseEntry is not found in the empty JSON string", ListKeysResponseEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListKeysResponseEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListKeysResponseEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListKeysResponseEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CreateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreateTime"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `ExpireTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("ExpireTime"));
      // validate the required field `KeyName`
      String.validateJsonElement(jsonObj.get("KeyName"));
      // validate the required field `Restrictions`
      ApiKeyRestrictions.validateJsonElement(jsonObj.get("Restrictions"));
      // validate the required field `UpdateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("UpdateTime"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListKeysResponseEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListKeysResponseEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListKeysResponseEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListKeysResponseEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ListKeysResponseEntry>() {
           @Override
           public void write(JsonWriter out, ListKeysResponseEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListKeysResponseEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListKeysResponseEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListKeysResponseEntry
   * @throws IOException if the JSON string is invalid with respect to ListKeysResponseEntry
   */
  public static ListKeysResponseEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListKeysResponseEntry.class);
  }

  /**
   * Convert an instance of ListKeysResponseEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

