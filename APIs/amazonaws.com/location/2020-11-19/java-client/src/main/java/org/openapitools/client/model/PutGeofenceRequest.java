/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PutGeofenceRequestGeometry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutGeofenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutGeofenceRequest {
  public static final String SERIALIZED_NAME_GEOFENCE_PROPERTIES = "GeofenceProperties";
  @SerializedName(SERIALIZED_NAME_GEOFENCE_PROPERTIES)
  private Map<String, String> geofenceProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_GEOMETRY = "Geometry";
  @SerializedName(SERIALIZED_NAME_GEOMETRY)
  private PutGeofenceRequestGeometry geometry;

  public PutGeofenceRequest() {
  }

  public PutGeofenceRequest geofenceProperties(Map<String, String> geofenceProperties) {
    this.geofenceProperties = geofenceProperties;
    return this;
  }

  public PutGeofenceRequest putGeofencePropertiesItem(String key, String geofencePropertiesItem) {
    if (this.geofenceProperties == null) {
      this.geofenceProperties = new HashMap<>();
    }
    this.geofenceProperties.put(key, geofencePropertiesItem);
    return this;
  }

  /**
   * &lt;p&gt;Associates one of more properties with the geofence. A property is a key-value pair stored with the geofence and added to any geofence event triggered with that geofence.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;\&quot;key\&quot; : \&quot;value\&quot;&lt;/code&gt; &lt;/p&gt;
   * @return geofenceProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getGeofenceProperties() {
    return geofenceProperties;
  }

  public void setGeofenceProperties(Map<String, String> geofenceProperties) {
    this.geofenceProperties = geofenceProperties;
  }


  public PutGeofenceRequest geometry(PutGeofenceRequestGeometry geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Get geometry
   * @return geometry
   */
  @javax.annotation.Nonnull
  public PutGeofenceRequestGeometry getGeometry() {
    return geometry;
  }

  public void setGeometry(PutGeofenceRequestGeometry geometry) {
    this.geometry = geometry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutGeofenceRequest putGeofenceRequest = (PutGeofenceRequest) o;
    return Objects.equals(this.geofenceProperties, putGeofenceRequest.geofenceProperties) &&
        Objects.equals(this.geometry, putGeofenceRequest.geometry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geofenceProperties, geometry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutGeofenceRequest {\n");
    sb.append("    geofenceProperties: ").append(toIndentedString(geofenceProperties)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GeofenceProperties");
    openapiFields.add("Geometry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Geometry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutGeofenceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutGeofenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutGeofenceRequest is not found in the empty JSON string", PutGeofenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutGeofenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutGeofenceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutGeofenceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Geometry`
      PutGeofenceRequestGeometry.validateJsonElement(jsonObj.get("Geometry"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutGeofenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutGeofenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutGeofenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutGeofenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutGeofenceRequest>() {
           @Override
           public void write(JsonWriter out, PutGeofenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutGeofenceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutGeofenceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutGeofenceRequest
   * @throws IOException if the JSON string is invalid with respect to PutGeofenceRequest
   */
  public static PutGeofenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutGeofenceRequest.class);
  }

  /**
   * Convert an instance of PutGeofenceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

