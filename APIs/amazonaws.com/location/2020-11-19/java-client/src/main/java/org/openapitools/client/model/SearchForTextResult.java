/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SearchForPositionResultPlace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a search result from a text search query that is run on a place index resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchForTextResult {
  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_PLACE = "Place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private SearchForPositionResultPlace place;

  public static final String SERIALIZED_NAME_PLACE_ID = "PlaceId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_RELEVANCE = "Relevance";
  @SerializedName(SERIALIZED_NAME_RELEVANCE)
  private Double relevance;

  public SearchForTextResult() {
  }

  public SearchForTextResult distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public SearchForTextResult place(SearchForPositionResultPlace place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nonnull
  public SearchForPositionResultPlace getPlace() {
    return place;
  }

  public void setPlace(SearchForPositionResultPlace place) {
    this.place = place;
  }


  public SearchForTextResult placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * Get placeId
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public SearchForTextResult relevance(Double relevance) {
    this.relevance = relevance;
    return this;
  }

  /**
   * Get relevance
   * @return relevance
   */
  @javax.annotation.Nullable
  public Double getRelevance() {
    return relevance;
  }

  public void setRelevance(Double relevance) {
    this.relevance = relevance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchForTextResult searchForTextResult = (SearchForTextResult) o;
    return Objects.equals(this.distance, searchForTextResult.distance) &&
        Objects.equals(this.place, searchForTextResult.place) &&
        Objects.equals(this.placeId, searchForTextResult.placeId) &&
        Objects.equals(this.relevance, searchForTextResult.relevance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, place, placeId, relevance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchForTextResult {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    relevance: ").append(toIndentedString(relevance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Distance");
    openapiFields.add("Place");
    openapiFields.add("PlaceId");
    openapiFields.add("Relevance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Place");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchForTextResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchForTextResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchForTextResult is not found in the empty JSON string", SearchForTextResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchForTextResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchForTextResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchForTextResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Distance`
      if (jsonObj.get("Distance") != null && !jsonObj.get("Distance").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Distance"));
      }
      // validate the required field `Place`
      SearchForPositionResultPlace.validateJsonElement(jsonObj.get("Place"));
      // validate the optional field `PlaceId`
      if (jsonObj.get("PlaceId") != null && !jsonObj.get("PlaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlaceId"));
      }
      // validate the optional field `Relevance`
      if (jsonObj.get("Relevance") != null && !jsonObj.get("Relevance").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Relevance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchForTextResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchForTextResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchForTextResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchForTextResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchForTextResult>() {
           @Override
           public void write(JsonWriter out, SearchForTextResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchForTextResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchForTextResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchForTextResult
   * @throws IOException if the JSON string is invalid with respect to SearchForTextResult
   */
  public static SearchForTextResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchForTextResult.class);
  }

  /**
   * Convert an instance of SearchForTextResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

