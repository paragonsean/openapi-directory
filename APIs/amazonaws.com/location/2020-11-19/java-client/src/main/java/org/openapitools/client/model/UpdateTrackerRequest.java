/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTrackerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTrackerRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE_ENABLED = "EventBridgeEnabled";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE_ENABLED)
  private Boolean eventBridgeEnabled;

  /**
   * &lt;p&gt;Updates the position filtering for the tracker resource.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TimeBased&lt;/code&gt; - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DistanceBased&lt;/code&gt; - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this distance are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AccuracyBased&lt;/code&gt; - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This helps educe the effects of GPS noise when displaying device trajectories on a map, and can help control costs by reducing the number of geofence evaluations. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(PositionFilteringEnum.Adapter.class)
  public enum PositionFilteringEnum {
    TIME_BASED("TimeBased"),
    
    DISTANCE_BASED("DistanceBased"),
    
    ACCURACY_BASED("AccuracyBased");

    private String value;

    PositionFilteringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionFilteringEnum fromValue(String value) {
      for (PositionFilteringEnum b : PositionFilteringEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionFilteringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionFilteringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionFilteringEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionFilteringEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionFilteringEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION_FILTERING = "PositionFiltering";
  @SerializedName(SERIALIZED_NAME_POSITION_FILTERING)
  private PositionFilteringEnum positionFiltering;

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   */
  @JsonAdapter(PricingPlanEnum.Adapter.class)
  public enum PricingPlanEnum {
    REQUEST_BASED_USAGE("RequestBasedUsage"),
    
    MOBILE_ASSET_TRACKING("MobileAssetTracking"),
    
    MOBILE_ASSET_MANAGEMENT("MobileAssetManagement");

    private String value;

    PricingPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingPlanEnum fromValue(String value) {
      for (PricingPlanEnum b : PricingPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_PLAN = "PricingPlan";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN)
  private PricingPlanEnum pricingPlan;

  public static final String SERIALIZED_NAME_PRICING_PLAN_DATA_SOURCE = "PricingPlanDataSource";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN_DATA_SOURCE)
  private String pricingPlanDataSource;

  public UpdateTrackerRequest() {
  }

  public UpdateTrackerRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Updates the description for the tracker resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateTrackerRequest eventBridgeEnabled(Boolean eventBridgeEnabled) {
    this.eventBridgeEnabled = eventBridgeEnabled;
    return this;
  }

  /**
   * &lt;p&gt;Whether to enable position &lt;code&gt;UPDATE&lt;/code&gt; events from this tracker to be sent to EventBridge.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You do not need enable this feature to get &lt;code&gt;ENTER&lt;/code&gt; and &lt;code&gt;EXIT&lt;/code&gt; events for geofences with this tracker. Those events are always sent to EventBridge.&lt;/p&gt; &lt;/note&gt;
   * @return eventBridgeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEventBridgeEnabled() {
    return eventBridgeEnabled;
  }

  public void setEventBridgeEnabled(Boolean eventBridgeEnabled) {
    this.eventBridgeEnabled = eventBridgeEnabled;
  }


  public UpdateTrackerRequest positionFiltering(PositionFilteringEnum positionFiltering) {
    this.positionFiltering = positionFiltering;
    return this;
  }

  /**
   * &lt;p&gt;Updates the position filtering for the tracker resource.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TimeBased&lt;/code&gt; - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DistanceBased&lt;/code&gt; - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this distance are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AccuracyBased&lt;/code&gt; - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This helps educe the effects of GPS noise when displaying device trajectories on a map, and can help control costs by reducing the number of geofence evaluations. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return positionFiltering
   */
  @javax.annotation.Nullable
  public PositionFilteringEnum getPositionFiltering() {
    return positionFiltering;
  }

  public void setPositionFiltering(PositionFilteringEnum positionFiltering) {
    this.positionFiltering = positionFiltering;
  }


  public UpdateTrackerRequest pricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
    return this;
  }

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   * @return pricingPlan
   */
  @javax.annotation.Nullable
  public PricingPlanEnum getPricingPlan() {
    return pricingPlan;
  }

  public void setPricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
  }


  public UpdateTrackerRequest pricingPlanDataSource(String pricingPlanDataSource) {
    this.pricingPlanDataSource = pricingPlanDataSource;
    return this;
  }

  /**
   * This parameter is no longer used.
   * @return pricingPlanDataSource
   */
  @javax.annotation.Nullable
  public String getPricingPlanDataSource() {
    return pricingPlanDataSource;
  }

  public void setPricingPlanDataSource(String pricingPlanDataSource) {
    this.pricingPlanDataSource = pricingPlanDataSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTrackerRequest updateTrackerRequest = (UpdateTrackerRequest) o;
    return Objects.equals(this.description, updateTrackerRequest.description) &&
        Objects.equals(this.eventBridgeEnabled, updateTrackerRequest.eventBridgeEnabled) &&
        Objects.equals(this.positionFiltering, updateTrackerRequest.positionFiltering) &&
        Objects.equals(this.pricingPlan, updateTrackerRequest.pricingPlan) &&
        Objects.equals(this.pricingPlanDataSource, updateTrackerRequest.pricingPlanDataSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, eventBridgeEnabled, positionFiltering, pricingPlan, pricingPlanDataSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTrackerRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventBridgeEnabled: ").append(toIndentedString(eventBridgeEnabled)).append("\n");
    sb.append("    positionFiltering: ").append(toIndentedString(positionFiltering)).append("\n");
    sb.append("    pricingPlan: ").append(toIndentedString(pricingPlan)).append("\n");
    sb.append("    pricingPlanDataSource: ").append(toIndentedString(pricingPlanDataSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("EventBridgeEnabled");
    openapiFields.add("PositionFiltering");
    openapiFields.add("PricingPlan");
    openapiFields.add("PricingPlanDataSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTrackerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTrackerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTrackerRequest is not found in the empty JSON string", UpdateTrackerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTrackerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTrackerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("PositionFiltering") != null && !jsonObj.get("PositionFiltering").isJsonNull()) && !jsonObj.get("PositionFiltering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionFiltering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionFiltering").toString()));
      }
      // validate the optional field `PositionFiltering`
      if (jsonObj.get("PositionFiltering") != null && !jsonObj.get("PositionFiltering").isJsonNull()) {
        PositionFilteringEnum.validateJsonElement(jsonObj.get("PositionFiltering"));
      }
      if ((jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) && !jsonObj.get("PricingPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlan").toString()));
      }
      // validate the optional field `PricingPlan`
      if (jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) {
        PricingPlanEnum.validateJsonElement(jsonObj.get("PricingPlan"));
      }
      if ((jsonObj.get("PricingPlanDataSource") != null && !jsonObj.get("PricingPlanDataSource").isJsonNull()) && !jsonObj.get("PricingPlanDataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlanDataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlanDataSource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTrackerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTrackerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTrackerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTrackerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTrackerRequest>() {
           @Override
           public void write(JsonWriter out, UpdateTrackerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTrackerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTrackerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTrackerRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateTrackerRequest
   */
  public static UpdateTrackerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTrackerRequest.class);
  }

  /**
   * Convert an instance of UpdateTrackerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

