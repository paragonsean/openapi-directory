/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTrackerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTrackerRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE_ENABLED = "EventBridgeEnabled";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE_ENABLED)
  private Boolean eventBridgeEnabled;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  /**
   * &lt;p&gt;Specifies the position filtering for the tracker resource.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TimeBased&lt;/code&gt; - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DistanceBased&lt;/code&gt; - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AccuracyBased&lt;/code&gt; - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This can reduce the effects of GPS noise when displaying device trajectories on a map, and can help control your costs by reducing the number of geofence evaluations. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This field is optional. If not specified, the default value is &lt;code&gt;TimeBased&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(PositionFilteringEnum.Adapter.class)
  public enum PositionFilteringEnum {
    TIME_BASED("TimeBased"),
    
    DISTANCE_BASED("DistanceBased"),
    
    ACCURACY_BASED("AccuracyBased");

    private String value;

    PositionFilteringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionFilteringEnum fromValue(String value) {
      for (PositionFilteringEnum b : PositionFilteringEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionFilteringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionFilteringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionFilteringEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionFilteringEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionFilteringEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION_FILTERING = "PositionFiltering";
  @SerializedName(SERIALIZED_NAME_POSITION_FILTERING)
  private PositionFilteringEnum positionFiltering;

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   */
  @JsonAdapter(PricingPlanEnum.Adapter.class)
  public enum PricingPlanEnum {
    REQUEST_BASED_USAGE("RequestBasedUsage"),
    
    MOBILE_ASSET_TRACKING("MobileAssetTracking"),
    
    MOBILE_ASSET_MANAGEMENT("MobileAssetManagement");

    private String value;

    PricingPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingPlanEnum fromValue(String value) {
      for (PricingPlanEnum b : PricingPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_PLAN = "PricingPlan";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN)
  private PricingPlanEnum pricingPlan;

  public static final String SERIALIZED_NAME_PRICING_PLAN_DATA_SOURCE = "PricingPlanDataSource";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN_DATA_SOURCE)
  private String pricingPlanDataSource;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_TRACKER_NAME = "TrackerName";
  @SerializedName(SERIALIZED_NAME_TRACKER_NAME)
  private String trackerName;

  public CreateTrackerRequest() {
  }

  public CreateTrackerRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description for the tracker resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateTrackerRequest eventBridgeEnabled(Boolean eventBridgeEnabled) {
    this.eventBridgeEnabled = eventBridgeEnabled;
    return this;
  }

  /**
   * &lt;p&gt;Whether to enable position &lt;code&gt;UPDATE&lt;/code&gt; events from this tracker to be sent to EventBridge.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You do not need enable this feature to get &lt;code&gt;ENTER&lt;/code&gt; and &lt;code&gt;EXIT&lt;/code&gt; events for geofences with this tracker. Those events are always sent to EventBridge.&lt;/p&gt; &lt;/note&gt;
   * @return eventBridgeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEventBridgeEnabled() {
    return eventBridgeEnabled;
  }

  public void setEventBridgeEnabled(Boolean eventBridgeEnabled) {
    this.eventBridgeEnabled = eventBridgeEnabled;
  }


  public CreateTrackerRequest kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * A key identifier for an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html\&quot;&gt;Amazon Web Services KMS customer managed key&lt;/a&gt;. Enter a key ID, key ARN, alias name, or alias ARN.
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateTrackerRequest positionFiltering(PositionFilteringEnum positionFiltering) {
    this.positionFiltering = positionFiltering;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the position filtering for the tracker resource.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TimeBased&lt;/code&gt; - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DistanceBased&lt;/code&gt; - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AccuracyBased&lt;/code&gt; - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This can reduce the effects of GPS noise when displaying device trajectories on a map, and can help control your costs by reducing the number of geofence evaluations. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This field is optional. If not specified, the default value is &lt;code&gt;TimeBased&lt;/code&gt;.&lt;/p&gt;
   * @return positionFiltering
   */
  @javax.annotation.Nullable
  public PositionFilteringEnum getPositionFiltering() {
    return positionFiltering;
  }

  public void setPositionFiltering(PositionFilteringEnum positionFiltering) {
    this.positionFiltering = positionFiltering;
  }


  public CreateTrackerRequest pricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
    return this;
  }

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   * @return pricingPlan
   */
  @javax.annotation.Nullable
  public PricingPlanEnum getPricingPlan() {
    return pricingPlan;
  }

  public void setPricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
  }


  public CreateTrackerRequest pricingPlanDataSource(String pricingPlanDataSource) {
    this.pricingPlanDataSource = pricingPlanDataSource;
    return this;
  }

  /**
   * This parameter is no longer used.
   * @return pricingPlanDataSource
   */
  @javax.annotation.Nullable
  public String getPricingPlanDataSource() {
    return pricingPlanDataSource;
  }

  public void setPricingPlanDataSource(String pricingPlanDataSource) {
    this.pricingPlanDataSource = pricingPlanDataSource;
  }


  public CreateTrackerRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateTrackerRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Applies one or more tags to the tracker resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;\&quot;key\&quot; : \&quot;value\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Maximum 50 tags per resource&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Each resource tag must be unique with a maximum of one value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum key length: 128 Unicode characters in UTF-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum value length: 256 Unicode characters in UTF-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - &#x3D; . _ : / @. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot use \&quot;aws:\&quot; as a prefix for a key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateTrackerRequest trackerName(String trackerName) {
    this.trackerName = trackerName;
    return this;
  }

  /**
   * &lt;p&gt;The name for the tracker resource.&lt;/p&gt; &lt;p&gt;Requirements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be a unique tracker resource name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;No spaces allowed. For example, &lt;code&gt;ExampleTracker&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return trackerName
   */
  @javax.annotation.Nonnull
  public String getTrackerName() {
    return trackerName;
  }

  public void setTrackerName(String trackerName) {
    this.trackerName = trackerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTrackerRequest createTrackerRequest = (CreateTrackerRequest) o;
    return Objects.equals(this.description, createTrackerRequest.description) &&
        Objects.equals(this.eventBridgeEnabled, createTrackerRequest.eventBridgeEnabled) &&
        Objects.equals(this.kmsKeyId, createTrackerRequest.kmsKeyId) &&
        Objects.equals(this.positionFiltering, createTrackerRequest.positionFiltering) &&
        Objects.equals(this.pricingPlan, createTrackerRequest.pricingPlan) &&
        Objects.equals(this.pricingPlanDataSource, createTrackerRequest.pricingPlanDataSource) &&
        Objects.equals(this.tags, createTrackerRequest.tags) &&
        Objects.equals(this.trackerName, createTrackerRequest.trackerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, eventBridgeEnabled, kmsKeyId, positionFiltering, pricingPlan, pricingPlanDataSource, tags, trackerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTrackerRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventBridgeEnabled: ").append(toIndentedString(eventBridgeEnabled)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    positionFiltering: ").append(toIndentedString(positionFiltering)).append("\n");
    sb.append("    pricingPlan: ").append(toIndentedString(pricingPlan)).append("\n");
    sb.append("    pricingPlanDataSource: ").append(toIndentedString(pricingPlanDataSource)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    trackerName: ").append(toIndentedString(trackerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("EventBridgeEnabled");
    openapiFields.add("KmsKeyId");
    openapiFields.add("PositionFiltering");
    openapiFields.add("PricingPlan");
    openapiFields.add("PricingPlanDataSource");
    openapiFields.add("Tags");
    openapiFields.add("TrackerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TrackerName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTrackerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTrackerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTrackerRequest is not found in the empty JSON string", CreateTrackerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTrackerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTrackerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTrackerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) && !jsonObj.get("KmsKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KmsKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KmsKeyId").toString()));
      }
      if ((jsonObj.get("PositionFiltering") != null && !jsonObj.get("PositionFiltering").isJsonNull()) && !jsonObj.get("PositionFiltering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionFiltering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionFiltering").toString()));
      }
      // validate the optional field `PositionFiltering`
      if (jsonObj.get("PositionFiltering") != null && !jsonObj.get("PositionFiltering").isJsonNull()) {
        PositionFilteringEnum.validateJsonElement(jsonObj.get("PositionFiltering"));
      }
      if ((jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) && !jsonObj.get("PricingPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlan").toString()));
      }
      // validate the optional field `PricingPlan`
      if (jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) {
        PricingPlanEnum.validateJsonElement(jsonObj.get("PricingPlan"));
      }
      if ((jsonObj.get("PricingPlanDataSource") != null && !jsonObj.get("PricingPlanDataSource").isJsonNull()) && !jsonObj.get("PricingPlanDataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlanDataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlanDataSource").toString()));
      }
      if (!jsonObj.get("TrackerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTrackerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTrackerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTrackerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTrackerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTrackerRequest>() {
           @Override
           public void write(JsonWriter out, CreateTrackerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTrackerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTrackerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTrackerRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTrackerRequest
   */
  public static CreateTrackerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTrackerRequest.class);
  }

  /**
   * Convert an instance of CreateTrackerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

