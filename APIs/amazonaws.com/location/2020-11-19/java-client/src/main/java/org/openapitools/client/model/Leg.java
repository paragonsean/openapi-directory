/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LegGeometry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains the calculated route&#39;s details for each path between a pair of positions. The number of legs returned corresponds to one fewer than the total number of positions in the request. &lt;/p&gt; &lt;p&gt;For example, a route with a departure position and destination position returns one leg with the positions &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\&quot;&gt;snapped to a nearby road&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;StartPosition&lt;/code&gt; is the departure position.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;EndPosition&lt;/code&gt; is the destination position.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A route with a waypoint between the departure and destination position returns two legs with the positions snapped to a nearby road:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Leg 1: The &lt;code&gt;StartPosition&lt;/code&gt; is the departure position . The &lt;code&gt;EndPosition&lt;/code&gt; is the waypoint positon.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leg 2: The &lt;code&gt;StartPosition&lt;/code&gt; is the waypoint position. The &lt;code&gt;EndPosition&lt;/code&gt; is the destination position.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Leg {
  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "DurationSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Double durationSeconds;

  public static final String SERIALIZED_NAME_END_POSITION = "EndPosition";
  @SerializedName(SERIALIZED_NAME_END_POSITION)
  private List endPosition;

  public static final String SERIALIZED_NAME_GEOMETRY = "Geometry";
  @SerializedName(SERIALIZED_NAME_GEOMETRY)
  private LegGeometry geometry;

  public static final String SERIALIZED_NAME_START_POSITION = "StartPosition";
  @SerializedName(SERIALIZED_NAME_START_POSITION)
  private List startPosition;

  public static final String SERIALIZED_NAME_STEPS = "Steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List steps;

  public Leg() {
  }

  public Leg distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nonnull
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public Leg durationSeconds(Double durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * Get durationSeconds
   * @return durationSeconds
   */
  @javax.annotation.Nonnull
  public Double getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Double durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public Leg endPosition(List endPosition) {
    this.endPosition = endPosition;
    return this;
  }

  /**
   * Get endPosition
   * @return endPosition
   */
  @javax.annotation.Nonnull
  public List getEndPosition() {
    return endPosition;
  }

  public void setEndPosition(List endPosition) {
    this.endPosition = endPosition;
  }


  public Leg geometry(LegGeometry geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Get geometry
   * @return geometry
   */
  @javax.annotation.Nullable
  public LegGeometry getGeometry() {
    return geometry;
  }

  public void setGeometry(LegGeometry geometry) {
    this.geometry = geometry;
  }


  public Leg startPosition(List startPosition) {
    this.startPosition = startPosition;
    return this;
  }

  /**
   * Get startPosition
   * @return startPosition
   */
  @javax.annotation.Nonnull
  public List getStartPosition() {
    return startPosition;
  }

  public void setStartPosition(List startPosition) {
    this.startPosition = startPosition;
  }


  public Leg steps(List steps) {
    this.steps = steps;
    return this;
  }

  /**
   * Get steps
   * @return steps
   */
  @javax.annotation.Nonnull
  public List getSteps() {
    return steps;
  }

  public void setSteps(List steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Leg leg = (Leg) o;
    return Objects.equals(this.distance, leg.distance) &&
        Objects.equals(this.durationSeconds, leg.durationSeconds) &&
        Objects.equals(this.endPosition, leg.endPosition) &&
        Objects.equals(this.geometry, leg.geometry) &&
        Objects.equals(this.startPosition, leg.startPosition) &&
        Objects.equals(this.steps, leg.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, durationSeconds, endPosition, geometry, startPosition, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Leg {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    endPosition: ").append(toIndentedString(endPosition)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("    startPosition: ").append(toIndentedString(startPosition)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Distance");
    openapiFields.add("DurationSeconds");
    openapiFields.add("EndPosition");
    openapiFields.add("Geometry");
    openapiFields.add("StartPosition");
    openapiFields.add("Steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Distance");
    openapiRequiredFields.add("DurationSeconds");
    openapiRequiredFields.add("EndPosition");
    openapiRequiredFields.add("StartPosition");
    openapiRequiredFields.add("Steps");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Leg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Leg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Leg is not found in the empty JSON string", Leg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Leg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Leg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Leg.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Distance`
      Double.validateJsonElement(jsonObj.get("Distance"));
      // validate the required field `DurationSeconds`
      Double.validateJsonElement(jsonObj.get("DurationSeconds"));
      // validate the required field `EndPosition`
      List.validateJsonElement(jsonObj.get("EndPosition"));
      // validate the optional field `Geometry`
      if (jsonObj.get("Geometry") != null && !jsonObj.get("Geometry").isJsonNull()) {
        LegGeometry.validateJsonElement(jsonObj.get("Geometry"));
      }
      // validate the required field `StartPosition`
      List.validateJsonElement(jsonObj.get("StartPosition"));
      // validate the required field `Steps`
      List.validateJsonElement(jsonObj.get("Steps"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Leg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Leg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Leg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Leg.class));

       return (TypeAdapter<T>) new TypeAdapter<Leg>() {
           @Override
           public void write(JsonWriter out, Leg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Leg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Leg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Leg
   * @throws IOException if the JSON string is invalid with respect to Leg
   */
  public static Leg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Leg.class);
  }

  /**
   * Convert an instance of Leg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

