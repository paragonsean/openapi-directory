/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlaceGeometry;
import org.openapitools.client.model.PlaceTimeZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPlaceResponsePlace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPlaceResponsePlace {
  public static final String SERIALIZED_NAME_ADDRESS_NUMBER = "AddressNumber";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NUMBER)
  private String addressNumber;

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List categories;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_GEOMETRY = "Geometry";
  @SerializedName(SERIALIZED_NAME_GEOMETRY)
  private PlaceGeometry geometry;

  public static final String SERIALIZED_NAME_INTERPOLATED = "Interpolated";
  @SerializedName(SERIALIZED_NAME_INTERPOLATED)
  private Boolean interpolated;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MUNICIPALITY = "Municipality";
  @SerializedName(SERIALIZED_NAME_MUNICIPALITY)
  private String municipality;

  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "Neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "PostalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_STREET = "Street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_SUB_REGION = "SubRegion";
  @SerializedName(SERIALIZED_NAME_SUB_REGION)
  private String subRegion;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_CATEGORIES = "SupplementalCategories";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_CATEGORIES)
  private List supplementalCategories;

  public static final String SERIALIZED_NAME_TIME_ZONE = "TimeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private PlaceTimeZone timeZone;

  public static final String SERIALIZED_NAME_UNIT_NUMBER = "UnitNumber";
  @SerializedName(SERIALIZED_NAME_UNIT_NUMBER)
  private String unitNumber;

  public static final String SERIALIZED_NAME_UNIT_TYPE = "UnitType";
  @SerializedName(SERIALIZED_NAME_UNIT_TYPE)
  private String unitType;

  public GetPlaceResponsePlace() {
  }

  public GetPlaceResponsePlace addressNumber(String addressNumber) {
    this.addressNumber = addressNumber;
    return this;
  }

  /**
   * Get addressNumber
   * @return addressNumber
   */
  @javax.annotation.Nullable
  public String getAddressNumber() {
    return addressNumber;
  }

  public void setAddressNumber(String addressNumber) {
    this.addressNumber = addressNumber;
  }


  public GetPlaceResponsePlace categories(List categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List getCategories() {
    return categories;
  }

  public void setCategories(List categories) {
    this.categories = categories;
  }


  public GetPlaceResponsePlace country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public GetPlaceResponsePlace geometry(PlaceGeometry geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Get geometry
   * @return geometry
   */
  @javax.annotation.Nonnull
  public PlaceGeometry getGeometry() {
    return geometry;
  }

  public void setGeometry(PlaceGeometry geometry) {
    this.geometry = geometry;
  }


  public GetPlaceResponsePlace interpolated(Boolean interpolated) {
    this.interpolated = interpolated;
    return this;
  }

  /**
   * Get interpolated
   * @return interpolated
   */
  @javax.annotation.Nullable
  public Boolean getInterpolated() {
    return interpolated;
  }

  public void setInterpolated(Boolean interpolated) {
    this.interpolated = interpolated;
  }


  public GetPlaceResponsePlace label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public GetPlaceResponsePlace municipality(String municipality) {
    this.municipality = municipality;
    return this;
  }

  /**
   * Get municipality
   * @return municipality
   */
  @javax.annotation.Nullable
  public String getMunicipality() {
    return municipality;
  }

  public void setMunicipality(String municipality) {
    this.municipality = municipality;
  }


  public GetPlaceResponsePlace neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

  /**
   * Get neighborhood
   * @return neighborhood
   */
  @javax.annotation.Nullable
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public GetPlaceResponsePlace postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public GetPlaceResponsePlace region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public GetPlaceResponsePlace street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public GetPlaceResponsePlace subRegion(String subRegion) {
    this.subRegion = subRegion;
    return this;
  }

  /**
   * Get subRegion
   * @return subRegion
   */
  @javax.annotation.Nullable
  public String getSubRegion() {
    return subRegion;
  }

  public void setSubRegion(String subRegion) {
    this.subRegion = subRegion;
  }


  public GetPlaceResponsePlace supplementalCategories(List supplementalCategories) {
    this.supplementalCategories = supplementalCategories;
    return this;
  }

  /**
   * Get supplementalCategories
   * @return supplementalCategories
   */
  @javax.annotation.Nullable
  public List getSupplementalCategories() {
    return supplementalCategories;
  }

  public void setSupplementalCategories(List supplementalCategories) {
    this.supplementalCategories = supplementalCategories;
  }


  public GetPlaceResponsePlace timeZone(PlaceTimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public PlaceTimeZone getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(PlaceTimeZone timeZone) {
    this.timeZone = timeZone;
  }


  public GetPlaceResponsePlace unitNumber(String unitNumber) {
    this.unitNumber = unitNumber;
    return this;
  }

  /**
   * Get unitNumber
   * @return unitNumber
   */
  @javax.annotation.Nullable
  public String getUnitNumber() {
    return unitNumber;
  }

  public void setUnitNumber(String unitNumber) {
    this.unitNumber = unitNumber;
  }


  public GetPlaceResponsePlace unitType(String unitType) {
    this.unitType = unitType;
    return this;
  }

  /**
   * Get unitType
   * @return unitType
   */
  @javax.annotation.Nullable
  public String getUnitType() {
    return unitType;
  }

  public void setUnitType(String unitType) {
    this.unitType = unitType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPlaceResponsePlace getPlaceResponsePlace = (GetPlaceResponsePlace) o;
    return Objects.equals(this.addressNumber, getPlaceResponsePlace.addressNumber) &&
        Objects.equals(this.categories, getPlaceResponsePlace.categories) &&
        Objects.equals(this.country, getPlaceResponsePlace.country) &&
        Objects.equals(this.geometry, getPlaceResponsePlace.geometry) &&
        Objects.equals(this.interpolated, getPlaceResponsePlace.interpolated) &&
        Objects.equals(this.label, getPlaceResponsePlace.label) &&
        Objects.equals(this.municipality, getPlaceResponsePlace.municipality) &&
        Objects.equals(this.neighborhood, getPlaceResponsePlace.neighborhood) &&
        Objects.equals(this.postalCode, getPlaceResponsePlace.postalCode) &&
        Objects.equals(this.region, getPlaceResponsePlace.region) &&
        Objects.equals(this.street, getPlaceResponsePlace.street) &&
        Objects.equals(this.subRegion, getPlaceResponsePlace.subRegion) &&
        Objects.equals(this.supplementalCategories, getPlaceResponsePlace.supplementalCategories) &&
        Objects.equals(this.timeZone, getPlaceResponsePlace.timeZone) &&
        Objects.equals(this.unitNumber, getPlaceResponsePlace.unitNumber) &&
        Objects.equals(this.unitType, getPlaceResponsePlace.unitType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressNumber, categories, country, geometry, interpolated, label, municipality, neighborhood, postalCode, region, street, subRegion, supplementalCategories, timeZone, unitNumber, unitType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPlaceResponsePlace {\n");
    sb.append("    addressNumber: ").append(toIndentedString(addressNumber)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("    interpolated: ").append(toIndentedString(interpolated)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    municipality: ").append(toIndentedString(municipality)).append("\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    subRegion: ").append(toIndentedString(subRegion)).append("\n");
    sb.append("    supplementalCategories: ").append(toIndentedString(supplementalCategories)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    unitNumber: ").append(toIndentedString(unitNumber)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddressNumber");
    openapiFields.add("Categories");
    openapiFields.add("Country");
    openapiFields.add("Geometry");
    openapiFields.add("Interpolated");
    openapiFields.add("Label");
    openapiFields.add("Municipality");
    openapiFields.add("Neighborhood");
    openapiFields.add("PostalCode");
    openapiFields.add("Region");
    openapiFields.add("Street");
    openapiFields.add("SubRegion");
    openapiFields.add("SupplementalCategories");
    openapiFields.add("TimeZone");
    openapiFields.add("UnitNumber");
    openapiFields.add("UnitType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Geometry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPlaceResponsePlace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPlaceResponsePlace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPlaceResponsePlace is not found in the empty JSON string", GetPlaceResponsePlace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPlaceResponsePlace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPlaceResponsePlace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetPlaceResponsePlace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AddressNumber`
      if (jsonObj.get("AddressNumber") != null && !jsonObj.get("AddressNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddressNumber"));
      }
      // validate the optional field `Categories`
      if (jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Categories"));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the required field `Geometry`
      PlaceGeometry.validateJsonElement(jsonObj.get("Geometry"));
      // validate the optional field `Interpolated`
      if (jsonObj.get("Interpolated") != null && !jsonObj.get("Interpolated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Interpolated"));
      }
      // validate the optional field `Label`
      if (jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Label"));
      }
      // validate the optional field `Municipality`
      if (jsonObj.get("Municipality") != null && !jsonObj.get("Municipality").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Municipality"));
      }
      // validate the optional field `Neighborhood`
      if (jsonObj.get("Neighborhood") != null && !jsonObj.get("Neighborhood").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Neighborhood"));
      }
      // validate the optional field `PostalCode`
      if (jsonObj.get("PostalCode") != null && !jsonObj.get("PostalCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostalCode"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `Street`
      if (jsonObj.get("Street") != null && !jsonObj.get("Street").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Street"));
      }
      // validate the optional field `SubRegion`
      if (jsonObj.get("SubRegion") != null && !jsonObj.get("SubRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubRegion"));
      }
      // validate the optional field `SupplementalCategories`
      if (jsonObj.get("SupplementalCategories") != null && !jsonObj.get("SupplementalCategories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupplementalCategories"));
      }
      // validate the optional field `TimeZone`
      if (jsonObj.get("TimeZone") != null && !jsonObj.get("TimeZone").isJsonNull()) {
        PlaceTimeZone.validateJsonElement(jsonObj.get("TimeZone"));
      }
      // validate the optional field `UnitNumber`
      if (jsonObj.get("UnitNumber") != null && !jsonObj.get("UnitNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnitNumber"));
      }
      // validate the optional field `UnitType`
      if (jsonObj.get("UnitType") != null && !jsonObj.get("UnitType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnitType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPlaceResponsePlace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPlaceResponsePlace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPlaceResponsePlace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPlaceResponsePlace.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPlaceResponsePlace>() {
           @Override
           public void write(JsonWriter out, GetPlaceResponsePlace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPlaceResponsePlace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPlaceResponsePlace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPlaceResponsePlace
   * @throws IOException if the JSON string is invalid with respect to GetPlaceResponsePlace
   */
  public static GetPlaceResponsePlace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPlaceResponsePlace.class);
  }

  /**
   * Convert an instance of GetPlaceResponsePlace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

