/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Represents an element of a leg within a route. A step contains instructions for how to move to the next step in the leg. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Step {
  public static final String SERIALIZED_NAME_DISTANCE = "Distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "DurationSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Double durationSeconds;

  public static final String SERIALIZED_NAME_END_POSITION = "EndPosition";
  @SerializedName(SERIALIZED_NAME_END_POSITION)
  private List endPosition;

  public static final String SERIALIZED_NAME_GEOMETRY_OFFSET = "GeometryOffset";
  @SerializedName(SERIALIZED_NAME_GEOMETRY_OFFSET)
  private Integer geometryOffset;

  public static final String SERIALIZED_NAME_START_POSITION = "StartPosition";
  @SerializedName(SERIALIZED_NAME_START_POSITION)
  private List startPosition;

  public Step() {
  }

  public Step distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nonnull
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public Step durationSeconds(Double durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * Get durationSeconds
   * @return durationSeconds
   */
  @javax.annotation.Nonnull
  public Double getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Double durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public Step endPosition(List endPosition) {
    this.endPosition = endPosition;
    return this;
  }

  /**
   * Get endPosition
   * @return endPosition
   */
  @javax.annotation.Nonnull
  public List getEndPosition() {
    return endPosition;
  }

  public void setEndPosition(List endPosition) {
    this.endPosition = endPosition;
  }


  public Step geometryOffset(Integer geometryOffset) {
    this.geometryOffset = geometryOffset;
    return this;
  }

  /**
   * Get geometryOffset
   * @return geometryOffset
   */
  @javax.annotation.Nullable
  public Integer getGeometryOffset() {
    return geometryOffset;
  }

  public void setGeometryOffset(Integer geometryOffset) {
    this.geometryOffset = geometryOffset;
  }


  public Step startPosition(List startPosition) {
    this.startPosition = startPosition;
    return this;
  }

  /**
   * Get startPosition
   * @return startPosition
   */
  @javax.annotation.Nonnull
  public List getStartPosition() {
    return startPosition;
  }

  public void setStartPosition(List startPosition) {
    this.startPosition = startPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Step step = (Step) o;
    return Objects.equals(this.distance, step.distance) &&
        Objects.equals(this.durationSeconds, step.durationSeconds) &&
        Objects.equals(this.endPosition, step.endPosition) &&
        Objects.equals(this.geometryOffset, step.geometryOffset) &&
        Objects.equals(this.startPosition, step.startPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, durationSeconds, endPosition, geometryOffset, startPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Step {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    endPosition: ").append(toIndentedString(endPosition)).append("\n");
    sb.append("    geometryOffset: ").append(toIndentedString(geometryOffset)).append("\n");
    sb.append("    startPosition: ").append(toIndentedString(startPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Distance");
    openapiFields.add("DurationSeconds");
    openapiFields.add("EndPosition");
    openapiFields.add("GeometryOffset");
    openapiFields.add("StartPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Distance");
    openapiRequiredFields.add("DurationSeconds");
    openapiRequiredFields.add("EndPosition");
    openapiRequiredFields.add("StartPosition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Step
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Step.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Step is not found in the empty JSON string", Step.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Step.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Step` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Step.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Distance`
      Double.validateJsonElement(jsonObj.get("Distance"));
      // validate the required field `DurationSeconds`
      Double.validateJsonElement(jsonObj.get("DurationSeconds"));
      // validate the required field `EndPosition`
      List.validateJsonElement(jsonObj.get("EndPosition"));
      // validate the optional field `GeometryOffset`
      if (jsonObj.get("GeometryOffset") != null && !jsonObj.get("GeometryOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("GeometryOffset"));
      }
      // validate the required field `StartPosition`
      List.validateJsonElement(jsonObj.get("StartPosition"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Step.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Step' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Step> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Step.class));

       return (TypeAdapter<T>) new TypeAdapter<Step>() {
           @Override
           public void write(JsonWriter out, Step value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Step read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Step given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Step
   * @throws IOException if the JSON string is invalid with respect to Step
   */
  public static Step fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Step.class);
  }

  /**
   * Convert an instance of Step to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

