/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchPlaceIndexForTextResponseSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchPlaceIndexForTextResponseSummary {
  public static final String SERIALIZED_NAME_BIAS_POSITION = "BiasPosition";
  @SerializedName(SERIALIZED_NAME_BIAS_POSITION)
  private List biasPosition;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_FILTER_B_BOX = "FilterBBox";
  @SerializedName(SERIALIZED_NAME_FILTER_B_BOX)
  private List filterBBox;

  public static final String SERIALIZED_NAME_FILTER_CATEGORIES = "FilterCategories";
  @SerializedName(SERIALIZED_NAME_FILTER_CATEGORIES)
  private List filterCategories;

  public static final String SERIALIZED_NAME_FILTER_COUNTRIES = "FilterCountries";
  @SerializedName(SERIALIZED_NAME_FILTER_COUNTRIES)
  private List filterCountries;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_RESULT_B_BOX = "ResultBBox";
  @SerializedName(SERIALIZED_NAME_RESULT_B_BOX)
  private List resultBBox;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public SearchPlaceIndexForTextResponseSummary() {
  }

  public SearchPlaceIndexForTextResponseSummary biasPosition(List biasPosition) {
    this.biasPosition = biasPosition;
    return this;
  }

  /**
   * Get biasPosition
   * @return biasPosition
   */
  @javax.annotation.Nullable
  public List getBiasPosition() {
    return biasPosition;
  }

  public void setBiasPosition(List biasPosition) {
    this.biasPosition = biasPosition;
  }


  public SearchPlaceIndexForTextResponseSummary dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public SearchPlaceIndexForTextResponseSummary filterBBox(List filterBBox) {
    this.filterBBox = filterBBox;
    return this;
  }

  /**
   * Get filterBBox
   * @return filterBBox
   */
  @javax.annotation.Nullable
  public List getFilterBBox() {
    return filterBBox;
  }

  public void setFilterBBox(List filterBBox) {
    this.filterBBox = filterBBox;
  }


  public SearchPlaceIndexForTextResponseSummary filterCategories(List filterCategories) {
    this.filterCategories = filterCategories;
    return this;
  }

  /**
   * Get filterCategories
   * @return filterCategories
   */
  @javax.annotation.Nullable
  public List getFilterCategories() {
    return filterCategories;
  }

  public void setFilterCategories(List filterCategories) {
    this.filterCategories = filterCategories;
  }


  public SearchPlaceIndexForTextResponseSummary filterCountries(List filterCountries) {
    this.filterCountries = filterCountries;
    return this;
  }

  /**
   * Get filterCountries
   * @return filterCountries
   */
  @javax.annotation.Nullable
  public List getFilterCountries() {
    return filterCountries;
  }

  public void setFilterCountries(List filterCountries) {
    this.filterCountries = filterCountries;
  }


  public SearchPlaceIndexForTextResponseSummary language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public SearchPlaceIndexForTextResponseSummary maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchPlaceIndexForTextResponseSummary resultBBox(List resultBBox) {
    this.resultBBox = resultBBox;
    return this;
  }

  /**
   * Get resultBBox
   * @return resultBBox
   */
  @javax.annotation.Nullable
  public List getResultBBox() {
    return resultBBox;
  }

  public void setResultBBox(List resultBBox) {
    this.resultBBox = resultBBox;
  }


  public SearchPlaceIndexForTextResponseSummary text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchPlaceIndexForTextResponseSummary searchPlaceIndexForTextResponseSummary = (SearchPlaceIndexForTextResponseSummary) o;
    return Objects.equals(this.biasPosition, searchPlaceIndexForTextResponseSummary.biasPosition) &&
        Objects.equals(this.dataSource, searchPlaceIndexForTextResponseSummary.dataSource) &&
        Objects.equals(this.filterBBox, searchPlaceIndexForTextResponseSummary.filterBBox) &&
        Objects.equals(this.filterCategories, searchPlaceIndexForTextResponseSummary.filterCategories) &&
        Objects.equals(this.filterCountries, searchPlaceIndexForTextResponseSummary.filterCountries) &&
        Objects.equals(this.language, searchPlaceIndexForTextResponseSummary.language) &&
        Objects.equals(this.maxResults, searchPlaceIndexForTextResponseSummary.maxResults) &&
        Objects.equals(this.resultBBox, searchPlaceIndexForTextResponseSummary.resultBBox) &&
        Objects.equals(this.text, searchPlaceIndexForTextResponseSummary.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biasPosition, dataSource, filterBBox, filterCategories, filterCountries, language, maxResults, resultBBox, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchPlaceIndexForTextResponseSummary {\n");
    sb.append("    biasPosition: ").append(toIndentedString(biasPosition)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    filterBBox: ").append(toIndentedString(filterBBox)).append("\n");
    sb.append("    filterCategories: ").append(toIndentedString(filterCategories)).append("\n");
    sb.append("    filterCountries: ").append(toIndentedString(filterCountries)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    resultBBox: ").append(toIndentedString(resultBBox)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BiasPosition");
    openapiFields.add("DataSource");
    openapiFields.add("FilterBBox");
    openapiFields.add("FilterCategories");
    openapiFields.add("FilterCountries");
    openapiFields.add("Language");
    openapiFields.add("MaxResults");
    openapiFields.add("ResultBBox");
    openapiFields.add("Text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataSource");
    openapiRequiredFields.add("Text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchPlaceIndexForTextResponseSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchPlaceIndexForTextResponseSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchPlaceIndexForTextResponseSummary is not found in the empty JSON string", SearchPlaceIndexForTextResponseSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchPlaceIndexForTextResponseSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchPlaceIndexForTextResponseSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchPlaceIndexForTextResponseSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BiasPosition`
      if (jsonObj.get("BiasPosition") != null && !jsonObj.get("BiasPosition").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BiasPosition"));
      }
      // validate the required field `DataSource`
      String.validateJsonElement(jsonObj.get("DataSource"));
      // validate the optional field `FilterBBox`
      if (jsonObj.get("FilterBBox") != null && !jsonObj.get("FilterBBox").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FilterBBox"));
      }
      // validate the optional field `FilterCategories`
      if (jsonObj.get("FilterCategories") != null && !jsonObj.get("FilterCategories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FilterCategories"));
      }
      // validate the optional field `FilterCountries`
      if (jsonObj.get("FilterCountries") != null && !jsonObj.get("FilterCountries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FilterCountries"));
      }
      // validate the optional field `Language`
      if (jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Language"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `ResultBBox`
      if (jsonObj.get("ResultBBox") != null && !jsonObj.get("ResultBBox").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResultBBox"));
      }
      // validate the required field `Text`
      String.validateJsonElement(jsonObj.get("Text"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchPlaceIndexForTextResponseSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchPlaceIndexForTextResponseSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchPlaceIndexForTextResponseSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchPlaceIndexForTextResponseSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchPlaceIndexForTextResponseSummary>() {
           @Override
           public void write(JsonWriter out, SearchPlaceIndexForTextResponseSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchPlaceIndexForTextResponseSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchPlaceIndexForTextResponseSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchPlaceIndexForTextResponseSummary
   * @throws IOException if the JSON string is invalid with respect to SearchPlaceIndexForTextResponseSummary
   */
  public static SearchPlaceIndexForTextResponseSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchPlaceIndexForTextResponseSummary.class);
  }

  /**
   * Convert an instance of SearchPlaceIndexForTextResponseSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

