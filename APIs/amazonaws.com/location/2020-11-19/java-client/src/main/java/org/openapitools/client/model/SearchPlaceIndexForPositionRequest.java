/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchPlaceIndexForPositionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchPlaceIndexForPositionRequest {
  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private List<Double> position = new ArrayList<>();

  public SearchPlaceIndexForPositionRequest() {
  }

  public SearchPlaceIndexForPositionRequest language(String language) {
    this.language = language;
    return this;
  }

  /**
   * &lt;p&gt;The preferred language used to return results. The value must be a valid &lt;a href&#x3D;\&quot;https://tools.ietf.org/search/bcp47\&quot;&gt;BCP 47&lt;/a&gt; language tag, for example, &lt;code&gt;en&lt;/code&gt; for English.&lt;/p&gt; &lt;p&gt;This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.&lt;/p&gt; &lt;p&gt;For an example, we&#39;ll use the Greek language. You search for a location around Athens, Greece, with the &lt;code&gt;language&lt;/code&gt; parameter set to &lt;code&gt;en&lt;/code&gt;. The &lt;code&gt;city&lt;/code&gt; in the results will most likely be returned as &lt;code&gt;Athens&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you set the &lt;code&gt;language&lt;/code&gt; parameter to &lt;code&gt;el&lt;/code&gt;, for Greek, then the &lt;code&gt;city&lt;/code&gt; in the results will more likely be returned as &lt;code&gt;Αθήνα&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the data provider does not have a value for Greek, the result will be in a language that the provider does support.&lt;/p&gt;
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public SearchPlaceIndexForPositionRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter. The maximum number of results returned per request.&lt;/p&gt; &lt;p&gt;Default value: &lt;code&gt;50&lt;/code&gt; &lt;/p&gt;
   * minimum: 1
   * maximum: 50
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchPlaceIndexForPositionRequest position(List<Double> position) {
    this.position = position;
    return this;
  }

  public SearchPlaceIndexForPositionRequest addPositionItem(Double positionItem) {
    if (this.position == null) {
      this.position = new ArrayList<>();
    }
    this.position.add(positionItem);
    return this;
  }

  /**
   * &lt;p&gt;Specifies the longitude and latitude of the position to query.&lt;/p&gt; &lt;p&gt; This parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.&lt;/p&gt; &lt;p&gt;For example, &lt;code&gt;[-123.1174, 49.2847]&lt;/code&gt; represents a position with longitude &lt;code&gt;-123.1174&lt;/code&gt; and latitude &lt;code&gt;49.2847&lt;/code&gt;.&lt;/p&gt;
   * @return position
   */
  @javax.annotation.Nonnull
  public List<Double> getPosition() {
    return position;
  }

  public void setPosition(List<Double> position) {
    this.position = position;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchPlaceIndexForPositionRequest searchPlaceIndexForPositionRequest = (SearchPlaceIndexForPositionRequest) o;
    return Objects.equals(this.language, searchPlaceIndexForPositionRequest.language) &&
        Objects.equals(this.maxResults, searchPlaceIndexForPositionRequest.maxResults) &&
        Objects.equals(this.position, searchPlaceIndexForPositionRequest.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, maxResults, position);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchPlaceIndexForPositionRequest {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Language");
    openapiFields.add("MaxResults");
    openapiFields.add("Position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Position");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchPlaceIndexForPositionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchPlaceIndexForPositionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchPlaceIndexForPositionRequest is not found in the empty JSON string", SearchPlaceIndexForPositionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchPlaceIndexForPositionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchPlaceIndexForPositionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchPlaceIndexForPositionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Position") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Position").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be an array in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchPlaceIndexForPositionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchPlaceIndexForPositionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchPlaceIndexForPositionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchPlaceIndexForPositionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchPlaceIndexForPositionRequest>() {
           @Override
           public void write(JsonWriter out, SearchPlaceIndexForPositionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchPlaceIndexForPositionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchPlaceIndexForPositionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchPlaceIndexForPositionRequest
   * @throws IOException if the JSON string is invalid with respect to SearchPlaceIndexForPositionRequest
   */
  public static SearchPlaceIndexForPositionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchPlaceIndexForPositionRequest.class);
  }

  /**
   * Convert an instance of SearchPlaceIndexForPositionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

