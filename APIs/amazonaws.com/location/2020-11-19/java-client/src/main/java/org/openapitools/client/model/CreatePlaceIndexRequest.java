/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreatePlaceIndexRequestDataSourceConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePlaceIndexRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePlaceIndexRequest {
  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_DATA_SOURCE_CONFIGURATION = "DataSourceConfiguration";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_CONFIGURATION)
  private CreatePlaceIndexRequestDataSourceConfiguration dataSourceConfiguration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INDEX_NAME = "IndexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   */
  @JsonAdapter(PricingPlanEnum.Adapter.class)
  public enum PricingPlanEnum {
    REQUEST_BASED_USAGE("RequestBasedUsage"),
    
    MOBILE_ASSET_TRACKING("MobileAssetTracking"),
    
    MOBILE_ASSET_MANAGEMENT("MobileAssetManagement");

    private String value;

    PricingPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingPlanEnum fromValue(String value) {
      for (PricingPlanEnum b : PricingPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_PLAN = "PricingPlan";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN)
  private PricingPlanEnum pricingPlan;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreatePlaceIndexRequest() {
  }

  public CreatePlaceIndexRequest dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the geospatial data provider for the new place index.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This field is case-sensitive. Enter the valid values as shown. For example, entering &lt;code&gt;HERE&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Esri&lt;/code&gt; – For additional information about &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/esri.html\&quot;&gt;Esri&lt;/a&gt;&#39;s coverage in your region of interest, see &lt;a href&#x3D;\&quot;https://developers.arcgis.com/rest/geocode/api-reference/geocode-coverage.htm\&quot;&gt;Esri details on geocoding coverage&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Grab&lt;/code&gt; – Grab provides place index functionality for Southeast Asia. For additional information about &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/grab.html\&quot;&gt;GrabMaps&lt;/a&gt;&#39; coverage, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/grab.html#grab-coverage-area\&quot;&gt;GrabMaps countries and areas covered&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Here&lt;/code&gt; – For additional information about &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/HERE.html\&quot;&gt;HERE Technologies&lt;/a&gt;&#39; coverage in your region of interest, see &lt;a href&#x3D;\&quot;https://developer.here.com/documentation/geocoder/dev_guide/topics/coverage-geocoder.html\&quot;&gt;HERE details on goecoding coverage&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you specify HERE Technologies (&lt;code&gt;Here&lt;/code&gt;) as the data provider, you may not &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location-places/latest/APIReference/API_DataSourceConfiguration.html\&quot;&gt;store results&lt;/a&gt; for locations in Japan. For more information, see the &lt;a href&#x3D;\&quot;http://aws.amazon.com/service-terms/\&quot;&gt;Amazon Web Services Service Terms&lt;/a&gt; for Amazon Location Service.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For additional information , see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html\&quot;&gt;Data providers&lt;/a&gt; on the &lt;i&gt;Amazon Location Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public CreatePlaceIndexRequest dataSourceConfiguration(CreatePlaceIndexRequestDataSourceConfiguration dataSourceConfiguration) {
    this.dataSourceConfiguration = dataSourceConfiguration;
    return this;
  }

  /**
   * Get dataSourceConfiguration
   * @return dataSourceConfiguration
   */
  @javax.annotation.Nullable
  public CreatePlaceIndexRequestDataSourceConfiguration getDataSourceConfiguration() {
    return dataSourceConfiguration;
  }

  public void setDataSourceConfiguration(CreatePlaceIndexRequestDataSourceConfiguration dataSourceConfiguration) {
    this.dataSourceConfiguration = dataSourceConfiguration;
  }


  public CreatePlaceIndexRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The optional description for the place index resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreatePlaceIndexRequest indexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the place index resource. &lt;/p&gt; &lt;p&gt;Requirements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be a unique place index resource name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;No spaces allowed. For example, &lt;code&gt;ExamplePlaceIndex&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return indexName
   */
  @javax.annotation.Nonnull
  public String getIndexName() {
    return indexName;
  }

  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }


  public CreatePlaceIndexRequest pricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
    return this;
  }

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   * @return pricingPlan
   */
  @javax.annotation.Nullable
  public PricingPlanEnum getPricingPlan() {
    return pricingPlan;
  }

  public void setPricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
  }


  public CreatePlaceIndexRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreatePlaceIndexRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Applies one or more tags to the place index resource. A tag is a key-value pair that helps you manage, identify, search, and filter your resources.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;\&quot;key\&quot; : \&quot;value\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Maximum 50 tags per resource.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Each tag key must be unique and must have exactly one associated value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum key length: 128 Unicode characters in UTF-8.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum value length: 256 Unicode characters in UTF-8.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - &#x3D; . _ : / @&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot use \&quot;aws:\&quot; as a prefix for a key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePlaceIndexRequest createPlaceIndexRequest = (CreatePlaceIndexRequest) o;
    return Objects.equals(this.dataSource, createPlaceIndexRequest.dataSource) &&
        Objects.equals(this.dataSourceConfiguration, createPlaceIndexRequest.dataSourceConfiguration) &&
        Objects.equals(this.description, createPlaceIndexRequest.description) &&
        Objects.equals(this.indexName, createPlaceIndexRequest.indexName) &&
        Objects.equals(this.pricingPlan, createPlaceIndexRequest.pricingPlan) &&
        Objects.equals(this.tags, createPlaceIndexRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, dataSourceConfiguration, description, indexName, pricingPlan, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePlaceIndexRequest {\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dataSourceConfiguration: ").append(toIndentedString(dataSourceConfiguration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    pricingPlan: ").append(toIndentedString(pricingPlan)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataSource");
    openapiFields.add("DataSourceConfiguration");
    openapiFields.add("Description");
    openapiFields.add("IndexName");
    openapiFields.add("PricingPlan");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataSource");
    openapiRequiredFields.add("IndexName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePlaceIndexRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePlaceIndexRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePlaceIndexRequest is not found in the empty JSON string", CreatePlaceIndexRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePlaceIndexRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePlaceIndexRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePlaceIndexRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataSource").toString()));
      }
      // validate the optional field `DataSourceConfiguration`
      if (jsonObj.get("DataSourceConfiguration") != null && !jsonObj.get("DataSourceConfiguration").isJsonNull()) {
        CreatePlaceIndexRequestDataSourceConfiguration.validateJsonElement(jsonObj.get("DataSourceConfiguration"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("IndexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IndexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IndexName").toString()));
      }
      if ((jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) && !jsonObj.get("PricingPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlan").toString()));
      }
      // validate the optional field `PricingPlan`
      if (jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) {
        PricingPlanEnum.validateJsonElement(jsonObj.get("PricingPlan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePlaceIndexRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePlaceIndexRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePlaceIndexRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePlaceIndexRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePlaceIndexRequest>() {
           @Override
           public void write(JsonWriter out, CreatePlaceIndexRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePlaceIndexRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePlaceIndexRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePlaceIndexRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePlaceIndexRequest
   */
  public static CreatePlaceIndexRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePlaceIndexRequest.class);
  }

  /**
   * Convert an instance of CreatePlaceIndexRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

