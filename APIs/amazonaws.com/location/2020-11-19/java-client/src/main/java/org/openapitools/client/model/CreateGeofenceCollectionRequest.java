/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateGeofenceCollectionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateGeofenceCollectionRequest {
  public static final String SERIALIZED_NAME_COLLECTION_NAME = "CollectionName";
  @SerializedName(SERIALIZED_NAME_COLLECTION_NAME)
  private String collectionName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   */
  @JsonAdapter(PricingPlanEnum.Adapter.class)
  public enum PricingPlanEnum {
    REQUEST_BASED_USAGE("RequestBasedUsage"),
    
    MOBILE_ASSET_TRACKING("MobileAssetTracking"),
    
    MOBILE_ASSET_MANAGEMENT("MobileAssetManagement");

    private String value;

    PricingPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PricingPlanEnum fromValue(String value) {
      for (PricingPlanEnum b : PricingPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PricingPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PricingPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PricingPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PricingPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PricingPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICING_PLAN = "PricingPlan";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN)
  private PricingPlanEnum pricingPlan;

  public static final String SERIALIZED_NAME_PRICING_PLAN_DATA_SOURCE = "PricingPlanDataSource";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN_DATA_SOURCE)
  private String pricingPlanDataSource;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateGeofenceCollectionRequest() {
  }

  public CreateGeofenceCollectionRequest collectionName(String collectionName) {
    this.collectionName = collectionName;
    return this;
  }

  /**
   * &lt;p&gt;A custom name for the geofence collection.&lt;/p&gt; &lt;p&gt;Requirements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be a unique geofence collection name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;No spaces allowed. For example, &lt;code&gt;ExampleGeofenceCollection&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return collectionName
   */
  @javax.annotation.Nonnull
  public String getCollectionName() {
    return collectionName;
  }

  public void setCollectionName(String collectionName) {
    this.collectionName = collectionName;
  }


  public CreateGeofenceCollectionRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description for the geofence collection.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateGeofenceCollectionRequest kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * A key identifier for an &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html\&quot;&gt;Amazon Web Services KMS customer managed key&lt;/a&gt;. Enter a key ID, key ARN, alias name, or alias ARN. 
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateGeofenceCollectionRequest pricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
    return this;
  }

  /**
   * No longer used. If included, the only allowed value is &lt;code&gt;RequestBasedUsage&lt;/code&gt;.
   * @return pricingPlan
   */
  @javax.annotation.Nullable
  public PricingPlanEnum getPricingPlan() {
    return pricingPlan;
  }

  public void setPricingPlan(PricingPlanEnum pricingPlan) {
    this.pricingPlan = pricingPlan;
  }


  public CreateGeofenceCollectionRequest pricingPlanDataSource(String pricingPlanDataSource) {
    this.pricingPlanDataSource = pricingPlanDataSource;
    return this;
  }

  /**
   * This parameter is no longer used.
   * @return pricingPlanDataSource
   */
  @javax.annotation.Nullable
  public String getPricingPlanDataSource() {
    return pricingPlanDataSource;
  }

  public void setPricingPlanDataSource(String pricingPlanDataSource) {
    this.pricingPlanDataSource = pricingPlanDataSource;
  }


  public CreateGeofenceCollectionRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateGeofenceCollectionRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Applies one or more tags to the geofence collection. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;\&quot;key\&quot; : \&quot;value\&quot;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Maximum 50 tags per resource&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Each resource tag must be unique with a maximum of one value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum key length: 128 Unicode characters in UTF-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum value length: 256 Unicode characters in UTF-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - &#x3D; . _ : / @. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot use \&quot;aws:\&quot; as a prefix for a key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGeofenceCollectionRequest createGeofenceCollectionRequest = (CreateGeofenceCollectionRequest) o;
    return Objects.equals(this.collectionName, createGeofenceCollectionRequest.collectionName) &&
        Objects.equals(this.description, createGeofenceCollectionRequest.description) &&
        Objects.equals(this.kmsKeyId, createGeofenceCollectionRequest.kmsKeyId) &&
        Objects.equals(this.pricingPlan, createGeofenceCollectionRequest.pricingPlan) &&
        Objects.equals(this.pricingPlanDataSource, createGeofenceCollectionRequest.pricingPlanDataSource) &&
        Objects.equals(this.tags, createGeofenceCollectionRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionName, description, kmsKeyId, pricingPlan, pricingPlanDataSource, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGeofenceCollectionRequest {\n");
    sb.append("    collectionName: ").append(toIndentedString(collectionName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    pricingPlan: ").append(toIndentedString(pricingPlan)).append("\n");
    sb.append("    pricingPlanDataSource: ").append(toIndentedString(pricingPlanDataSource)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CollectionName");
    openapiFields.add("Description");
    openapiFields.add("KmsKeyId");
    openapiFields.add("PricingPlan");
    openapiFields.add("PricingPlanDataSource");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CollectionName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateGeofenceCollectionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateGeofenceCollectionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGeofenceCollectionRequest is not found in the empty JSON string", CreateGeofenceCollectionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateGeofenceCollectionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateGeofenceCollectionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateGeofenceCollectionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CollectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CollectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CollectionName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) && !jsonObj.get("KmsKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KmsKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KmsKeyId").toString()));
      }
      if ((jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) && !jsonObj.get("PricingPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlan").toString()));
      }
      // validate the optional field `PricingPlan`
      if (jsonObj.get("PricingPlan") != null && !jsonObj.get("PricingPlan").isJsonNull()) {
        PricingPlanEnum.validateJsonElement(jsonObj.get("PricingPlan"));
      }
      if ((jsonObj.get("PricingPlanDataSource") != null && !jsonObj.get("PricingPlanDataSource").isJsonNull()) && !jsonObj.get("PricingPlanDataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingPlanDataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingPlanDataSource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateGeofenceCollectionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateGeofenceCollectionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateGeofenceCollectionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateGeofenceCollectionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateGeofenceCollectionRequest>() {
           @Override
           public void write(JsonWriter out, CreateGeofenceCollectionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateGeofenceCollectionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateGeofenceCollectionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateGeofenceCollectionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateGeofenceCollectionRequest
   */
  public static CreateGeofenceCollectionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateGeofenceCollectionRequest.class);
  }

  /**
   * Convert an instance of CreateGeofenceCollectionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

