/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchPlaceIndexForSuggestionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchPlaceIndexForSuggestionsRequest {
  public static final String SERIALIZED_NAME_BIAS_POSITION = "BiasPosition";
  @SerializedName(SERIALIZED_NAME_BIAS_POSITION)
  private List<Double> biasPosition = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_B_BOX = "FilterBBox";
  @SerializedName(SERIALIZED_NAME_FILTER_B_BOX)
  private List<Double> filterBBox = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_CATEGORIES = "FilterCategories";
  @SerializedName(SERIALIZED_NAME_FILTER_CATEGORIES)
  private List<String> filterCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_COUNTRIES = "FilterCountries";
  @SerializedName(SERIALIZED_NAME_FILTER_COUNTRIES)
  private List<String> filterCountries = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public SearchPlaceIndexForSuggestionsRequest() {
  }

  public SearchPlaceIndexForSuggestionsRequest biasPosition(List<Double> biasPosition) {
    this.biasPosition = biasPosition;
    return this;
  }

  public SearchPlaceIndexForSuggestionsRequest addBiasPositionItem(Double biasPositionItem) {
    if (this.biasPosition == null) {
      this.biasPosition = new ArrayList<>();
    }
    this.biasPosition.add(biasPositionItem);
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that indicates a preference for place suggestions that are closer to a specified position.&lt;/p&gt; &lt;p&gt; If provided, this parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.&lt;/p&gt; &lt;p&gt;For example, &lt;code&gt;[-123.1174, 49.2847]&lt;/code&gt; represents the position with longitude &lt;code&gt;-123.1174&lt;/code&gt; and latitude &lt;code&gt;49.2847&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;BiasPosition&lt;/code&gt; and &lt;code&gt;FilterBBox&lt;/code&gt; are mutually exclusive. Specifying both options results in an error. &lt;/p&gt; &lt;/note&gt;
   * @return biasPosition
   */
  @javax.annotation.Nullable
  public List<Double> getBiasPosition() {
    return biasPosition;
  }

  public void setBiasPosition(List<Double> biasPosition) {
    this.biasPosition = biasPosition;
  }


  public SearchPlaceIndexForSuggestionsRequest filterBBox(List<Double> filterBBox) {
    this.filterBBox = filterBBox;
    return this;
  }

  public SearchPlaceIndexForSuggestionsRequest addFilterBBoxItem(Double filterBBoxItem) {
    if (this.filterBBox == null) {
      this.filterBBox = new ArrayList<>();
    }
    this.filterBBox.add(filterBBoxItem);
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that limits the search results by returning only suggestions within a specified bounding box.&lt;/p&gt; &lt;p&gt; If provided, this parameter must contain a total of four consecutive numbers in two pairs. The first pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the southwest corner of the bounding box; the second pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the northeast corner of the bounding box.&lt;/p&gt; &lt;p&gt;For example, &lt;code&gt;[-12.7935, -37.4835, -12.0684, -36.9542]&lt;/code&gt; represents a bounding box where the southwest corner has longitude &lt;code&gt;-12.7935&lt;/code&gt; and latitude &lt;code&gt;-37.4835&lt;/code&gt;, and the northeast corner has longitude &lt;code&gt;-12.0684&lt;/code&gt; and latitude &lt;code&gt;-36.9542&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;FilterBBox&lt;/code&gt; and &lt;code&gt;BiasPosition&lt;/code&gt; are mutually exclusive. Specifying both options results in an error. &lt;/p&gt; &lt;/note&gt;
   * @return filterBBox
   */
  @javax.annotation.Nullable
  public List<Double> getFilterBBox() {
    return filterBBox;
  }

  public void setFilterBBox(List<Double> filterBBox) {
    this.filterBBox = filterBBox;
  }


  public SearchPlaceIndexForSuggestionsRequest filterCategories(List<String> filterCategories) {
    this.filterCategories = filterCategories;
    return this;
  }

  public SearchPlaceIndexForSuggestionsRequest addFilterCategoriesItem(String filterCategoriesItem) {
    if (this.filterCategories == null) {
      this.filterCategories = new ArrayList<>();
    }
    this.filterCategories.add(filterCategoriesItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of one or more Amazon Location categories to filter the returned places. If you include more than one category, the results will include results that match &lt;i&gt;any&lt;/i&gt; of the categories listed.&lt;/p&gt; &lt;p&gt;For more information about using categories, including a list of Amazon Location categories, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/category-filtering.html\&quot;&gt;Categories and filtering&lt;/a&gt;, in the &lt;i&gt;Amazon Location Service Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return filterCategories
   */
  @javax.annotation.Nullable
  public List<String> getFilterCategories() {
    return filterCategories;
  }

  public void setFilterCategories(List<String> filterCategories) {
    this.filterCategories = filterCategories;
  }


  public SearchPlaceIndexForSuggestionsRequest filterCountries(List<String> filterCountries) {
    this.filterCountries = filterCountries;
    return this;
  }

  public SearchPlaceIndexForSuggestionsRequest addFilterCountriesItem(String filterCountriesItem) {
    if (this.filterCountries == null) {
      this.filterCountries = new ArrayList<>();
    }
    this.filterCountries.add(filterCountriesItem);
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter that limits the search results by returning only suggestions within the provided list of countries.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://www.iso.org/iso-3166-country-codes.html\&quot;&gt;ISO 3166&lt;/a&gt; 3-digit country code. For example, Australia uses three upper-case characters: &lt;code&gt;AUS&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return filterCountries
   */
  @javax.annotation.Nullable
  public List<String> getFilterCountries() {
    return filterCountries;
  }

  public void setFilterCountries(List<String> filterCountries) {
    this.filterCountries = filterCountries;
  }


  public SearchPlaceIndexForSuggestionsRequest language(String language) {
    this.language = language;
    return this;
  }

  /**
   * &lt;p&gt;The preferred language used to return results. The value must be a valid &lt;a href&#x3D;\&quot;https://tools.ietf.org/search/bcp47\&quot;&gt;BCP 47&lt;/a&gt; language tag, for example, &lt;code&gt;en&lt;/code&gt; for English.&lt;/p&gt; &lt;p&gt;This setting affects the languages used in the results. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.&lt;/p&gt; &lt;p&gt;For an example, we&#39;ll use the Greek language. You search for &lt;code&gt;Athens, Gr&lt;/code&gt; to get suggestions with the &lt;code&gt;language&lt;/code&gt; parameter set to &lt;code&gt;en&lt;/code&gt;. The results found will most likely be returned as &lt;code&gt;Athens, Greece&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you set the &lt;code&gt;language&lt;/code&gt; parameter to &lt;code&gt;el&lt;/code&gt;, for Greek, then the result found will more likely be returned as &lt;code&gt;Αθήνα, Ελλάδα&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the data provider does not have a value for Greek, the result will be in a language that the provider does support.&lt;/p&gt;
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public SearchPlaceIndexForSuggestionsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * &lt;p&gt;An optional parameter. The maximum number of results returned per request. &lt;/p&gt; &lt;p&gt;The default: &lt;code&gt;5&lt;/code&gt; &lt;/p&gt;
   * minimum: 1
   * maximum: 15
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchPlaceIndexForSuggestionsRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The free-form partial text to use to generate place suggestions. For example, &lt;code&gt;eiffel tow&lt;/code&gt;.
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchPlaceIndexForSuggestionsRequest searchPlaceIndexForSuggestionsRequest = (SearchPlaceIndexForSuggestionsRequest) o;
    return Objects.equals(this.biasPosition, searchPlaceIndexForSuggestionsRequest.biasPosition) &&
        Objects.equals(this.filterBBox, searchPlaceIndexForSuggestionsRequest.filterBBox) &&
        Objects.equals(this.filterCategories, searchPlaceIndexForSuggestionsRequest.filterCategories) &&
        Objects.equals(this.filterCountries, searchPlaceIndexForSuggestionsRequest.filterCountries) &&
        Objects.equals(this.language, searchPlaceIndexForSuggestionsRequest.language) &&
        Objects.equals(this.maxResults, searchPlaceIndexForSuggestionsRequest.maxResults) &&
        Objects.equals(this.text, searchPlaceIndexForSuggestionsRequest.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biasPosition, filterBBox, filterCategories, filterCountries, language, maxResults, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchPlaceIndexForSuggestionsRequest {\n");
    sb.append("    biasPosition: ").append(toIndentedString(biasPosition)).append("\n");
    sb.append("    filterBBox: ").append(toIndentedString(filterBBox)).append("\n");
    sb.append("    filterCategories: ").append(toIndentedString(filterCategories)).append("\n");
    sb.append("    filterCountries: ").append(toIndentedString(filterCountries)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    text: ").append("*").append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BiasPosition");
    openapiFields.add("FilterBBox");
    openapiFields.add("FilterCategories");
    openapiFields.add("FilterCountries");
    openapiFields.add("Language");
    openapiFields.add("MaxResults");
    openapiFields.add("Text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchPlaceIndexForSuggestionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchPlaceIndexForSuggestionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchPlaceIndexForSuggestionsRequest is not found in the empty JSON string", SearchPlaceIndexForSuggestionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchPlaceIndexForSuggestionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchPlaceIndexForSuggestionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchPlaceIndexForSuggestionsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("BiasPosition") != null && !jsonObj.get("BiasPosition").isJsonNull() && !jsonObj.get("BiasPosition").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BiasPosition` to be an array in the JSON string but got `%s`", jsonObj.get("BiasPosition").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FilterBBox") != null && !jsonObj.get("FilterBBox").isJsonNull() && !jsonObj.get("FilterBBox").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterBBox` to be an array in the JSON string but got `%s`", jsonObj.get("FilterBBox").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FilterCategories") != null && !jsonObj.get("FilterCategories").isJsonNull() && !jsonObj.get("FilterCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterCategories` to be an array in the JSON string but got `%s`", jsonObj.get("FilterCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FilterCountries") != null && !jsonObj.get("FilterCountries").isJsonNull() && !jsonObj.get("FilterCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterCountries` to be an array in the JSON string but got `%s`", jsonObj.get("FilterCountries").toString()));
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      if (!jsonObj.get("Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchPlaceIndexForSuggestionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchPlaceIndexForSuggestionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchPlaceIndexForSuggestionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchPlaceIndexForSuggestionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchPlaceIndexForSuggestionsRequest>() {
           @Override
           public void write(JsonWriter out, SearchPlaceIndexForSuggestionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchPlaceIndexForSuggestionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchPlaceIndexForSuggestionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchPlaceIndexForSuggestionsRequest
   * @throws IOException if the JSON string is invalid with respect to SearchPlaceIndexForSuggestionsRequest
   */
  public static SearchPlaceIndexForSuggestionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchPlaceIndexForSuggestionsRequest.class);
  }

  /**
   * Convert an instance of SearchPlaceIndexForSuggestionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

