/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a place suggestion resulting from a place suggestion query that is run on a place index resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchForSuggestionsResult {
  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List categories;

  public static final String SERIALIZED_NAME_PLACE_ID = "PlaceId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_CATEGORIES = "SupplementalCategories";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_CATEGORIES)
  private List supplementalCategories;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public SearchForSuggestionsResult() {
  }

  public SearchForSuggestionsResult categories(List categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List getCategories() {
    return categories;
  }

  public void setCategories(List categories) {
    this.categories = categories;
  }


  public SearchForSuggestionsResult placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * Get placeId
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public SearchForSuggestionsResult supplementalCategories(List supplementalCategories) {
    this.supplementalCategories = supplementalCategories;
    return this;
  }

  /**
   * Get supplementalCategories
   * @return supplementalCategories
   */
  @javax.annotation.Nullable
  public List getSupplementalCategories() {
    return supplementalCategories;
  }

  public void setSupplementalCategories(List supplementalCategories) {
    this.supplementalCategories = supplementalCategories;
  }


  public SearchForSuggestionsResult text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchForSuggestionsResult searchForSuggestionsResult = (SearchForSuggestionsResult) o;
    return Objects.equals(this.categories, searchForSuggestionsResult.categories) &&
        Objects.equals(this.placeId, searchForSuggestionsResult.placeId) &&
        Objects.equals(this.supplementalCategories, searchForSuggestionsResult.supplementalCategories) &&
        Objects.equals(this.text, searchForSuggestionsResult.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, placeId, supplementalCategories, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchForSuggestionsResult {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    supplementalCategories: ").append(toIndentedString(supplementalCategories)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Categories");
    openapiFields.add("PlaceId");
    openapiFields.add("SupplementalCategories");
    openapiFields.add("Text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchForSuggestionsResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchForSuggestionsResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchForSuggestionsResult is not found in the empty JSON string", SearchForSuggestionsResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchForSuggestionsResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchForSuggestionsResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchForSuggestionsResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Categories`
      if (jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Categories"));
      }
      // validate the optional field `PlaceId`
      if (jsonObj.get("PlaceId") != null && !jsonObj.get("PlaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PlaceId"));
      }
      // validate the optional field `SupplementalCategories`
      if (jsonObj.get("SupplementalCategories") != null && !jsonObj.get("SupplementalCategories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupplementalCategories"));
      }
      // validate the required field `Text`
      String.validateJsonElement(jsonObj.get("Text"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchForSuggestionsResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchForSuggestionsResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchForSuggestionsResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchForSuggestionsResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchForSuggestionsResult>() {
           @Override
           public void write(JsonWriter out, SearchForSuggestionsResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchForSuggestionsResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchForSuggestionsResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchForSuggestionsResult
   * @throws IOException if the JSON string is invalid with respect to SearchForSuggestionsResult
   */
  public static SearchForSuggestionsResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchForSuggestionsResult.class);
  }

  /**
   * Convert an instance of SearchForSuggestionsResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

