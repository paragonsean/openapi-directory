/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateKeyRequestRestrictions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateKeyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:39.499739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateKeyRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "ExpireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private OffsetDateTime expireTime;

  public static final String SERIALIZED_NAME_FORCE_UPDATE = "ForceUpdate";
  @SerializedName(SERIALIZED_NAME_FORCE_UPDATE)
  private Boolean forceUpdate;

  public static final String SERIALIZED_NAME_NO_EXPIRY = "NoExpiry";
  @SerializedName(SERIALIZED_NAME_NO_EXPIRY)
  private Boolean noExpiry;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "Restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private CreateKeyRequestRestrictions restrictions;

  public UpdateKeyRequest() {
  }

  public UpdateKeyRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Updates the description for the API key resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateKeyRequest expireTime(OffsetDateTime expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Updates the timestamp for when the API key resource will expire in &lt;a href&#x3D;\&quot;https://www.iso.org/iso-8601-date-and-time-format.html\&quot;&gt; ISO 8601&lt;/a&gt; format: &lt;code&gt;YYYY-MM-DDThh:mm:ss.sssZ&lt;/code&gt;. 
   * @return expireTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(OffsetDateTime expireTime) {
    this.expireTime = expireTime;
  }


  public UpdateKeyRequest forceUpdate(Boolean forceUpdate) {
    this.forceUpdate = forceUpdate;
    return this;
  }

  /**
   * &lt;p&gt;The boolean flag to be included for updating &lt;code&gt;ExpireTime&lt;/code&gt; or &lt;code&gt;Restrictions&lt;/code&gt; details.&lt;/p&gt; &lt;p&gt;Must be set to &lt;code&gt;true&lt;/code&gt; to update an API key resource that has been used in the past 7 days.&lt;/p&gt; &lt;p&gt; &lt;code&gt;False&lt;/code&gt; if force update is not preferred&lt;/p&gt; &lt;p&gt;Default value: &lt;code&gt;False&lt;/code&gt; &lt;/p&gt;
   * @return forceUpdate
   */
  @javax.annotation.Nullable
  public Boolean getForceUpdate() {
    return forceUpdate;
  }

  public void setForceUpdate(Boolean forceUpdate) {
    this.forceUpdate = forceUpdate;
  }


  public UpdateKeyRequest noExpiry(Boolean noExpiry) {
    this.noExpiry = noExpiry;
    return this;
  }

  /**
   * Whether the API key should expire. Set to &lt;code&gt;true&lt;/code&gt; to set the API key to have no expiration time.
   * @return noExpiry
   */
  @javax.annotation.Nullable
  public Boolean getNoExpiry() {
    return noExpiry;
  }

  public void setNoExpiry(Boolean noExpiry) {
    this.noExpiry = noExpiry;
  }


  public UpdateKeyRequest restrictions(CreateKeyRequestRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Get restrictions
   * @return restrictions
   */
  @javax.annotation.Nullable
  public CreateKeyRequestRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(CreateKeyRequestRestrictions restrictions) {
    this.restrictions = restrictions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateKeyRequest updateKeyRequest = (UpdateKeyRequest) o;
    return Objects.equals(this.description, updateKeyRequest.description) &&
        Objects.equals(this.expireTime, updateKeyRequest.expireTime) &&
        Objects.equals(this.forceUpdate, updateKeyRequest.forceUpdate) &&
        Objects.equals(this.noExpiry, updateKeyRequest.noExpiry) &&
        Objects.equals(this.restrictions, updateKeyRequest.restrictions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, expireTime, forceUpdate, noExpiry, restrictions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateKeyRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    forceUpdate: ").append(toIndentedString(forceUpdate)).append("\n");
    sb.append("    noExpiry: ").append(toIndentedString(noExpiry)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("ExpireTime");
    openapiFields.add("ForceUpdate");
    openapiFields.add("NoExpiry");
    openapiFields.add("Restrictions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateKeyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateKeyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateKeyRequest is not found in the empty JSON string", UpdateKeyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateKeyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateKeyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `Restrictions`
      if (jsonObj.get("Restrictions") != null && !jsonObj.get("Restrictions").isJsonNull()) {
        CreateKeyRequestRestrictions.validateJsonElement(jsonObj.get("Restrictions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateKeyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateKeyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateKeyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateKeyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateKeyRequest>() {
           @Override
           public void write(JsonWriter out, UpdateKeyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateKeyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateKeyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateKeyRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateKeyRequest
   */
  public static UpdateKeyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateKeyRequest.class);
  }

  /**
   * Convert an instance of UpdateKeyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

