/*
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateTrackerConsumerRequest;
import org.openapitools.client.model.BatchDeleteDevicePositionHistoryRequest;
import org.openapitools.client.model.BatchDeleteDevicePositionHistoryResponse;
import org.openapitools.client.model.BatchDeleteGeofenceRequest;
import org.openapitools.client.model.BatchDeleteGeofenceResponse;
import org.openapitools.client.model.BatchEvaluateGeofencesRequest;
import org.openapitools.client.model.BatchEvaluateGeofencesResponse;
import org.openapitools.client.model.BatchGetDevicePositionRequest;
import org.openapitools.client.model.BatchGetDevicePositionResponse;
import org.openapitools.client.model.BatchPutGeofenceRequest;
import org.openapitools.client.model.BatchPutGeofenceResponse;
import org.openapitools.client.model.BatchUpdateDevicePositionRequest;
import org.openapitools.client.model.BatchUpdateDevicePositionResponse;
import org.openapitools.client.model.CalculateRouteMatrixRequest;
import org.openapitools.client.model.CalculateRouteMatrixResponse;
import org.openapitools.client.model.CalculateRouteRequest;
import org.openapitools.client.model.CalculateRouteResponse;
import org.openapitools.client.model.CreateGeofenceCollectionRequest;
import org.openapitools.client.model.CreateGeofenceCollectionResponse;
import org.openapitools.client.model.CreateKeyRequest;
import org.openapitools.client.model.CreateKeyResponse;
import org.openapitools.client.model.CreateMapRequest;
import org.openapitools.client.model.CreateMapResponse;
import org.openapitools.client.model.CreatePlaceIndexRequest;
import org.openapitools.client.model.CreatePlaceIndexResponse;
import org.openapitools.client.model.CreateRouteCalculatorRequest;
import org.openapitools.client.model.CreateRouteCalculatorResponse;
import org.openapitools.client.model.CreateTrackerRequest;
import org.openapitools.client.model.CreateTrackerResponse;
import org.openapitools.client.model.DescribeGeofenceCollectionResponse;
import org.openapitools.client.model.DescribeKeyResponse;
import org.openapitools.client.model.DescribeMapResponse;
import org.openapitools.client.model.DescribePlaceIndexResponse;
import org.openapitools.client.model.DescribeRouteCalculatorResponse;
import org.openapitools.client.model.DescribeTrackerResponse;
import org.openapitools.client.model.GetDevicePositionHistoryRequest;
import org.openapitools.client.model.GetDevicePositionHistoryResponse;
import org.openapitools.client.model.GetDevicePositionResponse;
import org.openapitools.client.model.GetGeofenceResponse;
import org.openapitools.client.model.GetMapGlyphsResponse;
import org.openapitools.client.model.GetMapSpritesResponse;
import org.openapitools.client.model.GetMapStyleDescriptorResponse;
import org.openapitools.client.model.GetMapTileResponse;
import org.openapitools.client.model.GetPlaceResponse;
import org.openapitools.client.model.ListDevicePositionsRequest;
import org.openapitools.client.model.ListDevicePositionsResponse;
import org.openapitools.client.model.ListGeofenceCollectionsRequest;
import org.openapitools.client.model.ListGeofenceCollectionsResponse;
import org.openapitools.client.model.ListGeofencesRequest;
import org.openapitools.client.model.ListGeofencesResponse;
import org.openapitools.client.model.ListKeysRequest;
import org.openapitools.client.model.ListKeysResponse;
import org.openapitools.client.model.ListMapsRequest;
import org.openapitools.client.model.ListMapsResponse;
import org.openapitools.client.model.ListPlaceIndexesRequest;
import org.openapitools.client.model.ListPlaceIndexesResponse;
import org.openapitools.client.model.ListRouteCalculatorsRequest;
import org.openapitools.client.model.ListRouteCalculatorsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTrackerConsumersResponse;
import org.openapitools.client.model.ListTrackersResponse;
import org.openapitools.client.model.PutGeofenceRequest;
import org.openapitools.client.model.PutGeofenceResponse;
import org.openapitools.client.model.SearchPlaceIndexForPositionRequest;
import org.openapitools.client.model.SearchPlaceIndexForPositionResponse;
import org.openapitools.client.model.SearchPlaceIndexForSuggestionsRequest;
import org.openapitools.client.model.SearchPlaceIndexForSuggestionsResponse;
import org.openapitools.client.model.SearchPlaceIndexForTextRequest;
import org.openapitools.client.model.SearchPlaceIndexForTextResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateGeofenceCollectionRequest;
import org.openapitools.client.model.UpdateGeofenceCollectionResponse;
import org.openapitools.client.model.UpdateKeyRequest;
import org.openapitools.client.model.UpdateKeyResponse;
import org.openapitools.client.model.UpdateMapRequest;
import org.openapitools.client.model.UpdateMapResponse;
import org.openapitools.client.model.UpdatePlaceIndexRequest;
import org.openapitools.client.model.UpdatePlaceIndexResponse;
import org.openapitools.client.model.UpdateRouteCalculatorRequest;
import org.openapitools.client.model.UpdateRouteCalculatorResponse;
import org.openapitools.client.model.UpdateTrackerRequest;
import org.openapitools.client.model.UpdateTrackerResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates an association between a geofence collection and a tracker resource. This allows the tracker resource to communicate location data to the linked geofence collection. &lt;/p&gt; &lt;p&gt;You can associate up to five geofence collections to each tracker resource.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Currently not supported — Cross-account configurations, such as creating associations between a tracker resource in one account and a geofence collection in another account.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateTrackerConsumerTest() throws ApiException {
        String trackerName = null;
        AssociateTrackerConsumerRequest associateTrackerConsumerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateTrackerConsumer(trackerName, associateTrackerConsumerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the position history of one or more devices from a tracker resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteDevicePositionHistoryTest() throws ApiException {
        String trackerName = null;
        BatchDeleteDevicePositionHistoryRequest batchDeleteDevicePositionHistoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteDevicePositionHistoryResponse response = api.batchDeleteDevicePositionHistory(trackerName, batchDeleteDevicePositionHistoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a batch of geofences from a geofence collection.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the resource permanently.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteGeofenceTest() throws ApiException {
        String collectionName = null;
        BatchDeleteGeofenceRequest batchDeleteGeofenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteGeofenceResponse response = api.batchDeleteGeofence(collectionName, batchDeleteGeofenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Evaluates device positions against the geofence geometries from a given geofence collection.&lt;/p&gt; &lt;p&gt;This operation always returns an empty response because geofences are asynchronously evaluated. The evaluation determines if the device has entered or exited a geofenced area, and then publishes one of the following events to Amazon EventBridge:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ENTER&lt;/code&gt; if Amazon Location determines that the tracked device has entered a geofenced area.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EXIT&lt;/code&gt; if Amazon Location determines that the tracked device has exited a geofenced area.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The last geofence that a device was observed within is tracked for 30 days after the most recent device position update.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Geofence evaluation uses the given device position. It does not account for the optional &lt;code&gt;Accuracy&lt;/code&gt; of a &lt;code&gt;DevicePositionUpdate&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;DeviceID&lt;/code&gt; is used as a string to represent the device. You do not need to have a &lt;code&gt;Tracker&lt;/code&gt; associated with the &lt;code&gt;DeviceID&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchEvaluateGeofencesTest() throws ApiException {
        String collectionName = null;
        BatchEvaluateGeofencesRequest batchEvaluateGeofencesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchEvaluateGeofencesResponse response = api.batchEvaluateGeofences(collectionName, batchEvaluateGeofencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the latest device positions for requested devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetDevicePositionTest() throws ApiException {
        String trackerName = null;
        BatchGetDevicePositionRequest batchGetDevicePositionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetDevicePositionResponse response = api.batchGetDevicePosition(trackerName, batchGetDevicePositionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A batch request for storing geofence geometries into a given geofence collection, or updates the geometry of an existing geofence if a geofence ID is included in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchPutGeofenceTest() throws ApiException {
        String collectionName = null;
        BatchPutGeofenceRequest batchPutGeofenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchPutGeofenceResponse response = api.batchPutGeofence(collectionName, batchPutGeofenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Uploads position update data for one or more devices to a tracker resource (up to 10 devices per batch). Amazon Location uses the data when it reports the last known device position and position history. Amazon Location retains location data for 30 days.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Position updates are handled based on the &lt;code&gt;PositionFiltering&lt;/code&gt; property of the tracker. When &lt;code&gt;PositionFiltering&lt;/code&gt; is set to &lt;code&gt;TimeBased&lt;/code&gt;, updates are evaluated against linked geofence collections, and location data is stored at a maximum of one position per 30 second interval. If your update frequency is more often than every 30 seconds, only one update per 30 seconds is stored for each unique device ID.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;PositionFiltering&lt;/code&gt; is set to &lt;code&gt;DistanceBased&lt;/code&gt; filtering, location data is stored and evaluated against linked geofence collections only if the device has moved more than 30 m (98.4 ft).&lt;/p&gt; &lt;p&gt;When &lt;code&gt;PositionFiltering&lt;/code&gt; is set to &lt;code&gt;AccuracyBased&lt;/code&gt; filtering, location data is stored and evaluated against linked geofence collections only if the device has moved more than the measured accuracy. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is neither stored or evaluated if the device has moved less than 15 m. If &lt;code&gt;PositionFiltering&lt;/code&gt; is set to &lt;code&gt;AccuracyBased&lt;/code&gt; filtering, Amazon Location uses the default value &lt;code&gt;{ \&quot;Horizontal\&quot;: 0}&lt;/code&gt; when accuracy is not provided on a &lt;code&gt;DevicePositionUpdate&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateDevicePositionTest() throws ApiException {
        String trackerName = null;
        BatchUpdateDevicePositionRequest batchUpdateDevicePositionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateDevicePositionResponse response = api.batchUpdateDevicePosition(trackerName, batchUpdateDevicePositionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html\&quot;&gt;Calculates a route&lt;/a&gt; given the following required parameters: &lt;code&gt;DeparturePosition&lt;/code&gt; and &lt;code&gt;DestinationPosition&lt;/code&gt;. Requires that you first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html\&quot;&gt;create a route calculator resource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By default, a request that doesn&#39;t specify a departure time uses the best time of day to travel with the best traffic conditions when calculating the route.&lt;/p&gt; &lt;p&gt;Additional options include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html\&quot;&gt;Specifying a departure time&lt;/a&gt; using either &lt;code&gt;DepartureTime&lt;/code&gt; or &lt;code&gt;DepartNow&lt;/code&gt;. This calculates a route based on predictive traffic data at the given time. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t specify both &lt;code&gt;DepartureTime&lt;/code&gt; and &lt;code&gt;DepartNow&lt;/code&gt; in a single request. Specifying both parameters returns a validation error.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html\&quot;&gt;Specifying a travel mode&lt;/a&gt; using TravelMode sets the transportation mode used to calculate the routes. This also lets you specify additional route preferences in &lt;code&gt;CarModeOptions&lt;/code&gt; if traveling by &lt;code&gt;Car&lt;/code&gt;, or &lt;code&gt;TruckModeOptions&lt;/code&gt; if traveling by &lt;code&gt;Truck&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you specify &lt;code&gt;walking&lt;/code&gt; for the travel mode and your data provider is Esri, the start and destination must be within 40km.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateRouteTest() throws ApiException {
        String calculatorName = null;
        CalculateRouteRequest calculateRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        CalculateRouteResponse response = api.calculateRoute(calculatorName, calculateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html\&quot;&gt; Calculates a route matrix&lt;/a&gt; given the following required parameters: &lt;code&gt;DeparturePositions&lt;/code&gt; and &lt;code&gt;DestinationPositions&lt;/code&gt;. &lt;code&gt;CalculateRouteMatrix&lt;/code&gt; calculates routes and returns the travel time and travel distance from each departure position to each destination position in the request. For example, given departure positions A and B, and destination positions X and Y, &lt;code&gt;CalculateRouteMatrix&lt;/code&gt; will return time and distance for routes from A to X, A to Y, B to X, and B to Y (in that order). The number of results returned (and routes calculated) will be the number of &lt;code&gt;DeparturePositions&lt;/code&gt; times the number of &lt;code&gt;DestinationPositions&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Your account is charged for each route calculated, not the number of requests.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Requires that you first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html\&quot;&gt;create a route calculator resource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By default, a request that doesn&#39;t specify a departure time uses the best time of day to travel with the best traffic conditions when calculating routes.&lt;/p&gt; &lt;p&gt;Additional options include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html\&quot;&gt; Specifying a departure time&lt;/a&gt; using either &lt;code&gt;DepartureTime&lt;/code&gt; or &lt;code&gt;DepartNow&lt;/code&gt;. This calculates routes based on predictive traffic data at the given time. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t specify both &lt;code&gt;DepartureTime&lt;/code&gt; and &lt;code&gt;DepartNow&lt;/code&gt; in a single request. Specifying both parameters returns a validation error.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html\&quot;&gt;Specifying a travel mode&lt;/a&gt; using TravelMode sets the transportation mode used to calculate the routes. This also lets you specify additional route preferences in &lt;code&gt;CarModeOptions&lt;/code&gt; if traveling by &lt;code&gt;Car&lt;/code&gt;, or &lt;code&gt;TruckModeOptions&lt;/code&gt; if traveling by &lt;code&gt;Truck&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateRouteMatrixTest() throws ApiException {
        String calculatorName = null;
        CalculateRouteMatrixRequest calculateRouteMatrixRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        CalculateRouteMatrixResponse response = api.calculateRouteMatrix(calculatorName, calculateRouteMatrixRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * Creates a geofence collection, which manages and stores geofences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGeofenceCollectionTest() throws ApiException {
        CreateGeofenceCollectionRequest createGeofenceCollectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGeofenceCollectionResponse response = api.createGeofenceCollection(createGeofenceCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an API key resource in your Amazon Web Services account, which lets you grant actions for Amazon Location resources to the API key bearer.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\&quot;&gt;Using API keys&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createKeyTest() throws ApiException {
        CreateKeyRequest createKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateKeyResponse response = api.createKey(createKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a map resource in your Amazon Web Services account, which provides map tiles of different styles sourced from global location data providers.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your application is tracking or routing assets you use in your business, such as delivery vehicles or employees, you must not use Esri as your geolocation provider. See section 82 of the &lt;a href&#x3D;\&quot;http://aws.amazon.com/service-terms\&quot;&gt;Amazon Web Services service terms&lt;/a&gt; for more details.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMapTest() throws ApiException {
        CreateMapRequest createMapRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMapResponse response = api.createMap(createMapRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a place index resource in your Amazon Web Services account. Use a place index resource to geocode addresses and other text queries by using the &lt;code&gt;SearchPlaceIndexForText&lt;/code&gt; operation, and reverse geocode coordinates by using the &lt;code&gt;SearchPlaceIndexForPosition&lt;/code&gt; operation, and enable autosuggestions by using the &lt;code&gt;SearchPlaceIndexForSuggestions&lt;/code&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your application is tracking or routing assets you use in your business, such as delivery vehicles or employees, you must not use Esri as your geolocation provider. See section 82 of the &lt;a href&#x3D;\&quot;http://aws.amazon.com/service-terms\&quot;&gt;Amazon Web Services service terms&lt;/a&gt; for more details.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlaceIndexTest() throws ApiException {
        CreatePlaceIndexRequest createPlaceIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePlaceIndexResponse response = api.createPlaceIndex(createPlaceIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a route calculator resource in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;You can send requests to a route calculator resource to estimate travel time, distance, and get directions. A route calculator sources traffic and road network data from your chosen data provider.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If your application is tracking or routing assets you use in your business, such as delivery vehicles or employees, you must not use Esri as your geolocation provider. See section 82 of the &lt;a href&#x3D;\&quot;http://aws.amazon.com/service-terms\&quot;&gt;Amazon Web Services service terms&lt;/a&gt; for more details.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteCalculatorTest() throws ApiException {
        CreateRouteCalculatorRequest createRouteCalculatorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRouteCalculatorResponse response = api.createRouteCalculator(createRouteCalculatorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a tracker resource in your Amazon Web Services account, which lets you retrieve current and historical location of devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrackerTest() throws ApiException {
        CreateTrackerRequest createTrackerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTrackerResponse response = api.createTracker(createTrackerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a geofence collection from your Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the resource permanently. If the geofence collection is the target of a tracker resource, the devices will no longer be monitored.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGeofenceCollectionTest() throws ApiException {
        String collectionName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteGeofenceCollection(collectionName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified API key. The API key must have been deactivated more than 90 days previously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyTest() throws ApiException {
        String keyName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteKey(keyName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a map resource from your Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the resource permanently. If the map is being used in an application, the map may not render.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMapTest() throws ApiException {
        String mapName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMap(mapName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a place index resource from your Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the resource permanently.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlaceIndexTest() throws ApiException {
        String indexName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePlaceIndex(indexName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a route calculator resource from your Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the resource permanently.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteCalculatorTest() throws ApiException {
        String calculatorName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRouteCalculator(calculatorName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a tracker resource from your Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the resource permanently. If the tracker resource is in use, you may encounter an error. Make sure that the target resource isn&#39;t a dependency for your applications.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrackerTest() throws ApiException {
        String trackerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTracker(trackerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the geofence collection details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeGeofenceCollectionTest() throws ApiException {
        String collectionName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeGeofenceCollectionResponse response = api.describeGeofenceCollection(collectionName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the API key resource details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeKeyTest() throws ApiException {
        String keyName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeKeyResponse response = api.describeKey(keyName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the map resource details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMapTest() throws ApiException {
        String mapName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMapResponse response = api.describeMap(mapName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the place index resource details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePlaceIndexTest() throws ApiException {
        String indexName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePlaceIndexResponse response = api.describePlaceIndex(indexName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the route calculator resource details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRouteCalculatorTest() throws ApiException {
        String calculatorName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRouteCalculatorResponse response = api.describeRouteCalculator(calculatorName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the tracker resource details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTrackerTest() throws ApiException {
        String trackerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTrackerResponse response = api.describeTracker(trackerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the association between a tracker resource and a geofence collection.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Once you unlink a tracker resource from a geofence collection, the tracker positions will no longer be automatically evaluated against geofences.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateTrackerConsumerTest() throws ApiException {
        String consumerArn = null;
        String trackerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateTrackerConsumer(consumerArn, trackerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a device&#39;s most recent position according to its sample time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Device positions are deleted after 30 days.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevicePositionTest() throws ApiException {
        String deviceId = null;
        String trackerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDevicePositionResponse response = api.getDevicePosition(deviceId, trackerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the device position history from a tracker resource within a specified range of time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Device positions are deleted after 30 days.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevicePositionHistoryTest() throws ApiException {
        String deviceId = null;
        String trackerName = null;
        GetDevicePositionHistoryRequest getDevicePositionHistoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDevicePositionHistoryResponse response = api.getDevicePositionHistory(deviceId, trackerName, getDevicePositionHistoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the geofence details from a geofence collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeofenceTest() throws ApiException {
        String collectionName = null;
        String geofenceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGeofenceResponse response = api.getGeofence(collectionName, geofenceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves glyphs used to display labels on a map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapGlyphsTest() throws ApiException {
        String fontStack = null;
        String fontUnicodeRange = null;
        String mapName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        GetMapGlyphsResponse response = api.getMapGlyphs(fontStack, fontUnicodeRange, mapName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG image paired with a JSON document describing the offsets of individual icons that will be displayed on a rendered map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapSpritesTest() throws ApiException {
        String fileName = null;
        String mapName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        GetMapSpritesResponse response = api.getMapSprites(fileName, mapName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the map style descriptor from a map resource. &lt;/p&gt; &lt;p&gt;The style descriptor contains speciﬁcations on how features render on a map. For example, what data to display, what order to display the data in, and the style for the data. Style descriptors follow the Mapbox Style Specification.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapStyleDescriptorTest() throws ApiException {
        String mapName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        GetMapStyleDescriptorResponse response = api.getMapStyleDescriptor(mapName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a vector data tile from the map resource. Map tiles are used by clients to render a map. they&#39;re addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level. &lt;/p&gt; &lt;p&gt;The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0) will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapTileTest() throws ApiException {
        String mapName = null;
        String X = null;
        String Y = null;
        String Z = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        GetMapTileResponse response = api.getMapTile(mapName, X, Y, Z, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Finds a place by its unique ID. A &lt;code&gt;PlaceId&lt;/code&gt; is returned by other search operations.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A PlaceId is valid only if all of the following are the same in the original search request and the call to &lt;code&gt;GetPlace&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Customer Amazon Web Services account&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services Region&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Data provider specified in the place index resource&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaceTest() throws ApiException {
        String indexName = null;
        String placeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        String language = null;
        GetPlaceResponse response = api.getPlace(indexName, placeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key, language);
        // TODO: test validations
    }

    /**
     * A batch request to retrieve all device positions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicePositionsTest() throws ApiException {
        String trackerName = null;
        ListDevicePositionsRequest listDevicePositionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDevicePositionsResponse response = api.listDevicePositions(trackerName, listDevicePositionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists geofence collections in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGeofenceCollectionsTest() throws ApiException {
        ListGeofenceCollectionsRequest listGeofenceCollectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGeofenceCollectionsResponse response = api.listGeofenceCollections(listGeofenceCollectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists geofences stored in a given geofence collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGeofencesTest() throws ApiException {
        String collectionName = null;
        ListGeofencesRequest listGeofencesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGeofencesResponse response = api.listGeofences(collectionName, listGeofencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists API key resources in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listKeysTest() throws ApiException {
        ListKeysRequest listKeysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListKeysResponse response = api.listKeys(listKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists map resources in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMapsTest() throws ApiException {
        ListMapsRequest listMapsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMapsResponse response = api.listMaps(listMapsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists place index resources in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlaceIndexesTest() throws ApiException {
        ListPlaceIndexesRequest listPlaceIndexesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPlaceIndexesResponse response = api.listPlaceIndexes(listPlaceIndexesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists route calculator resources in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRouteCalculatorsTest() throws ApiException {
        ListRouteCalculatorsRequest listRouteCalculatorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRouteCalculatorsResponse response = api.listRouteCalculators(listRouteCalculatorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of tags that are applied to the specified Amazon Location resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists geofence collections currently associated to the given tracker resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrackerConsumersTest() throws ApiException {
        String trackerName = null;
        ListGeofenceCollectionsRequest listGeofenceCollectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTrackerConsumersResponse response = api.listTrackerConsumers(trackerName, listGeofenceCollectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists tracker resources in your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrackersTest() throws ApiException {
        ListGeofenceCollectionsRequest listGeofenceCollectionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTrackersResponse response = api.listTrackers(listGeofenceCollectionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Stores a geofence geometry in a given geofence collection, or updates the geometry of an existing geofence if a geofence ID is included in the request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putGeofenceTest() throws ApiException {
        String collectionName = null;
        String geofenceId = null;
        PutGeofenceRequest putGeofenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutGeofenceResponse response = api.putGeofence(collectionName, geofenceId, putGeofenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Reverse geocodes a given coordinate and returns a legible address. Allows you to search for Places or points of interest near a given position.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPlaceIndexForPositionTest() throws ApiException {
        String indexName = null;
        SearchPlaceIndexForPositionRequest searchPlaceIndexForPositionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        SearchPlaceIndexForPositionResponse response = api.searchPlaceIndexForPosition(indexName, searchPlaceIndexForPositionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Generates suggestions for addresses and points of interest based on partial or misspelled free-form text. This operation is also known as autocomplete, autosuggest, or fuzzy matching.&lt;/p&gt; &lt;p&gt;Optional parameters let you narrow your search results by bounding box or country, or bias your search toward a specific position on the globe.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can search for suggested place names near a specified position by using &lt;code&gt;BiasPosition&lt;/code&gt;, or filter results within a bounding box by using &lt;code&gt;FilterBBox&lt;/code&gt;. These parameters are mutually exclusive; using both &lt;code&gt;BiasPosition&lt;/code&gt; and &lt;code&gt;FilterBBox&lt;/code&gt; in the same command returns an error.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPlaceIndexForSuggestionsTest() throws ApiException {
        String indexName = null;
        SearchPlaceIndexForSuggestionsRequest searchPlaceIndexForSuggestionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        SearchPlaceIndexForSuggestionsResponse response = api.searchPlaceIndexForSuggestions(indexName, searchPlaceIndexForSuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Geocodes free-form text, such as an address, name, city, or region to allow you to search for Places or points of interest. &lt;/p&gt; &lt;p&gt;Optional parameters let you narrow your search results by bounding box or country, or bias your search toward a specific position on the globe.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can search for places near a given position using &lt;code&gt;BiasPosition&lt;/code&gt;, or filter results within a bounding box using &lt;code&gt;FilterBBox&lt;/code&gt;. Providing both parameters simultaneously returns an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Search results are returned in order of highest to lowest relevance.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPlaceIndexForTextTest() throws ApiException {
        String indexName = null;
        SearchPlaceIndexForTextRequest searchPlaceIndexForTextRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String key = null;
        SearchPlaceIndexForTextResponse response = api.searchPlaceIndexForText(indexName, searchPlaceIndexForTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, key);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified Amazon Location Service resource.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; operation with an Amazon Location Service resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the tags already associated with the resource. If you specify a tag key that&#39;s already associated with the resource, the new tag value that you specify replaces the previous value for that tag. &lt;/p&gt; &lt;p&gt;You can associate up to 50 tags with a resource.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified Amazon Location resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified properties of a given geofence collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGeofenceCollectionTest() throws ApiException {
        String collectionName = null;
        UpdateGeofenceCollectionRequest updateGeofenceCollectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGeofenceCollectionResponse response = api.updateGeofenceCollection(collectionName, updateGeofenceCollectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified properties of a given API key resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateKeyTest() throws ApiException {
        String keyName = null;
        UpdateKeyRequest updateKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateKeyResponse response = api.updateKey(keyName, updateKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified properties of a given map resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMapTest() throws ApiException {
        String mapName = null;
        UpdateMapRequest updateMapRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMapResponse response = api.updateMap(mapName, updateMapRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified properties of a given place index resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlaceIndexTest() throws ApiException {
        String indexName = null;
        UpdatePlaceIndexRequest updatePlaceIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePlaceIndexResponse response = api.updatePlaceIndex(indexName, updatePlaceIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified properties for a given route calculator resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRouteCalculatorTest() throws ApiException {
        String calculatorName = null;
        UpdateRouteCalculatorRequest updateRouteCalculatorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRouteCalculatorResponse response = api.updateRouteCalculator(calculatorName, updateRouteCalculatorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified properties of a given tracker resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrackerTest() throws ApiException {
        String trackerName = null;
        UpdateTrackerRequest updateTrackerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTrackerResponse response = api.updateTracker(trackerName, updateTrackerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
