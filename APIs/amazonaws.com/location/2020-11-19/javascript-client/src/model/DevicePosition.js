/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DevicePositionUpdateAccuracy from './DevicePositionUpdateAccuracy';

/**
 * The DevicePosition model module.
 * @module model/DevicePosition
 * @version 2020-11-19
 */
class DevicePosition {
    /**
     * Constructs a new <code>DevicePosition</code>.
     * Contains the device position details.
     * @alias module:model/DevicePosition
     * @param position {Array} 
     * @param receivedTime {Date} 
     * @param sampleTime {Date} 
     */
    constructor(position, receivedTime, sampleTime) { 
        
        DevicePosition.initialize(this, position, receivedTime, sampleTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, position, receivedTime, sampleTime) { 
        obj['Position'] = position;
        obj['ReceivedTime'] = receivedTime;
        obj['SampleTime'] = sampleTime;
    }

    /**
     * Constructs a <code>DevicePosition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DevicePosition} obj Optional instance to populate.
     * @return {module:model/DevicePosition} The populated <code>DevicePosition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DevicePosition();

            if (data.hasOwnProperty('Accuracy')) {
                obj['Accuracy'] = DevicePositionUpdateAccuracy.constructFromObject(data['Accuracy']);
            }
            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = ApiClient.convertToType(data['Position'], Array);
            }
            if (data.hasOwnProperty('PositionProperties')) {
                obj['PositionProperties'] = ApiClient.convertToType(data['PositionProperties'], Object);
            }
            if (data.hasOwnProperty('ReceivedTime')) {
                obj['ReceivedTime'] = ApiClient.convertToType(data['ReceivedTime'], 'Date');
            }
            if (data.hasOwnProperty('SampleTime')) {
                obj['SampleTime'] = ApiClient.convertToType(data['SampleTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DevicePosition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DevicePosition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DevicePosition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Accuracy`
        if (data['Accuracy']) { // data not null
          DevicePositionUpdateAccuracy.validateJSON(data['Accuracy']);
        }
        // validate the optional field `DeviceId`
        if (data['DeviceId']) { // data not null
          String.validateJSON(data['DeviceId']);
        }
        // validate the optional field `Position`
        if (data['Position']) { // data not null
          Array.validateJSON(data['Position']);
        }
        // validate the optional field `PositionProperties`
        if (data['PositionProperties']) { // data not null
          Object.validateJSON(data['PositionProperties']);
        }
        // validate the optional field `ReceivedTime`
        if (data['ReceivedTime']) { // data not null
          Date.validateJSON(data['ReceivedTime']);
        }
        // validate the optional field `SampleTime`
        if (data['SampleTime']) { // data not null
          Date.validateJSON(data['SampleTime']);
        }

        return true;
    }


}

DevicePosition.RequiredProperties = ["Position", "ReceivedTime", "SampleTime"];

/**
 * @member {module:model/DevicePositionUpdateAccuracy} Accuracy
 */
DevicePosition.prototype['Accuracy'] = undefined;

/**
 * @member {String} DeviceId
 */
DevicePosition.prototype['DeviceId'] = undefined;

/**
 * @member {Array} Position
 */
DevicePosition.prototype['Position'] = undefined;

/**
 * @member {Object} PositionProperties
 */
DevicePosition.prototype['PositionProperties'] = undefined;

/**
 * @member {Date} ReceivedTime
 */
DevicePosition.prototype['ReceivedTime'] = undefined;

/**
 * @member {Date} SampleTime
 */
DevicePosition.prototype['SampleTime'] = undefined;






export default DevicePosition;

