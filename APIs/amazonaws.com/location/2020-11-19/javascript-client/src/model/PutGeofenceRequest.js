/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PutGeofenceRequestGeometry from './PutGeofenceRequestGeometry';

/**
 * The PutGeofenceRequest model module.
 * @module model/PutGeofenceRequest
 * @version 2020-11-19
 */
class PutGeofenceRequest {
    /**
     * Constructs a new <code>PutGeofenceRequest</code>.
     * @alias module:model/PutGeofenceRequest
     * @param geometry {module:model/PutGeofenceRequestGeometry} 
     */
    constructor(geometry) { 
        
        PutGeofenceRequest.initialize(this, geometry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, geometry) { 
        obj['Geometry'] = geometry;
    }

    /**
     * Constructs a <code>PutGeofenceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutGeofenceRequest} obj Optional instance to populate.
     * @return {module:model/PutGeofenceRequest} The populated <code>PutGeofenceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutGeofenceRequest();

            if (data.hasOwnProperty('GeofenceProperties')) {
                obj['GeofenceProperties'] = ApiClient.convertToType(data['GeofenceProperties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Geometry')) {
                obj['Geometry'] = PutGeofenceRequestGeometry.constructFromObject(data['Geometry']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutGeofenceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutGeofenceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutGeofenceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Geometry`
        if (data['Geometry']) { // data not null
          PutGeofenceRequestGeometry.validateJSON(data['Geometry']);
        }

        return true;
    }


}

PutGeofenceRequest.RequiredProperties = ["Geometry"];

/**
 * <p>Associates one of more properties with the geofence. A property is a key-value pair stored with the geofence and added to any geofence event triggered with that geofence.</p> <p>Format: <code>\"key\" : \"value\"</code> </p>
 * @member {Object.<String, String>} GeofenceProperties
 */
PutGeofenceRequest.prototype['GeofenceProperties'] = undefined;

/**
 * @member {module:model/PutGeofenceRequestGeometry} Geometry
 */
PutGeofenceRequest.prototype['Geometry'] = undefined;






export default PutGeofenceRequest;

