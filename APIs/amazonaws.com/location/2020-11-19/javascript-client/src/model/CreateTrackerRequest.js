/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateTrackerRequest model module.
 * @module model/CreateTrackerRequest
 * @version 2020-11-19
 */
class CreateTrackerRequest {
    /**
     * Constructs a new <code>CreateTrackerRequest</code>.
     * @alias module:model/CreateTrackerRequest
     * @param trackerName {String} <p>The name for the tracker resource.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).</p> </li> <li> <p>Must be a unique tracker resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleTracker</code>.</p> </li> </ul>
     */
    constructor(trackerName) { 
        
        CreateTrackerRequest.initialize(this, trackerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, trackerName) { 
        obj['TrackerName'] = trackerName;
    }

    /**
     * Constructs a <code>CreateTrackerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTrackerRequest} obj Optional instance to populate.
     * @return {module:model/CreateTrackerRequest} The populated <code>CreateTrackerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTrackerRequest();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EventBridgeEnabled')) {
                obj['EventBridgeEnabled'] = ApiClient.convertToType(data['EventBridgeEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('KmsKeyId')) {
                obj['KmsKeyId'] = ApiClient.convertToType(data['KmsKeyId'], 'String');
            }
            if (data.hasOwnProperty('PositionFiltering')) {
                obj['PositionFiltering'] = ApiClient.convertToType(data['PositionFiltering'], 'String');
            }
            if (data.hasOwnProperty('PricingPlan')) {
                obj['PricingPlan'] = ApiClient.convertToType(data['PricingPlan'], 'String');
            }
            if (data.hasOwnProperty('PricingPlanDataSource')) {
                obj['PricingPlanDataSource'] = ApiClient.convertToType(data['PricingPlanDataSource'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('TrackerName')) {
                obj['TrackerName'] = ApiClient.convertToType(data['TrackerName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTrackerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTrackerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTrackerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['KmsKeyId'] && !(typeof data['KmsKeyId'] === 'string' || data['KmsKeyId'] instanceof String)) {
            throw new Error("Expected the field `KmsKeyId` to be a primitive type in the JSON string but got " + data['KmsKeyId']);
        }
        // ensure the json data is a string
        if (data['PositionFiltering'] && !(typeof data['PositionFiltering'] === 'string' || data['PositionFiltering'] instanceof String)) {
            throw new Error("Expected the field `PositionFiltering` to be a primitive type in the JSON string but got " + data['PositionFiltering']);
        }
        // ensure the json data is a string
        if (data['PricingPlan'] && !(typeof data['PricingPlan'] === 'string' || data['PricingPlan'] instanceof String)) {
            throw new Error("Expected the field `PricingPlan` to be a primitive type in the JSON string but got " + data['PricingPlan']);
        }
        // ensure the json data is a string
        if (data['PricingPlanDataSource'] && !(typeof data['PricingPlanDataSource'] === 'string' || data['PricingPlanDataSource'] instanceof String)) {
            throw new Error("Expected the field `PricingPlanDataSource` to be a primitive type in the JSON string but got " + data['PricingPlanDataSource']);
        }
        // ensure the json data is a string
        if (data['TrackerName'] && !(typeof data['TrackerName'] === 'string' || data['TrackerName'] instanceof String)) {
            throw new Error("Expected the field `TrackerName` to be a primitive type in the JSON string but got " + data['TrackerName']);
        }

        return true;
    }


}

CreateTrackerRequest.RequiredProperties = ["TrackerName"];

/**
 * An optional description for the tracker resource.
 * @member {String} Description
 */
CreateTrackerRequest.prototype['Description'] = undefined;

/**
 * <p>Whether to enable position <code>UPDATE</code> events from this tracker to be sent to EventBridge.</p> <note> <p>You do not need enable this feature to get <code>ENTER</code> and <code>EXIT</code> events for geofences with this tracker. Those events are always sent to EventBridge.</p> </note>
 * @member {Boolean} EventBridgeEnabled
 */
CreateTrackerRequest.prototype['EventBridgeEnabled'] = undefined;

/**
 * A key identifier for an <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html\">Amazon Web Services KMS customer managed key</a>. Enter a key ID, key ARN, alias name, or alias ARN.
 * @member {String} KmsKeyId
 */
CreateTrackerRequest.prototype['KmsKeyId'] = undefined;

/**
 * <p>Specifies the position filtering for the tracker resource.</p> <p>Valid values:</p> <ul> <li> <p> <code>TimeBased</code> - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID. </p> </li> <li> <p> <code>DistanceBased</code> - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map. </p> </li> <li> <p> <code>AccuracyBased</code> - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This can reduce the effects of GPS noise when displaying device trajectories on a map, and can help control your costs by reducing the number of geofence evaluations. </p> </li> </ul> <p>This field is optional. If not specified, the default value is <code>TimeBased</code>.</p>
 * @member {module:model/CreateTrackerRequest.PositionFilteringEnum} PositionFiltering
 */
CreateTrackerRequest.prototype['PositionFiltering'] = undefined;

/**
 * No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.
 * @member {module:model/CreateTrackerRequest.PricingPlanEnum} PricingPlan
 */
CreateTrackerRequest.prototype['PricingPlan'] = undefined;

/**
 * This parameter is no longer used.
 * @member {String} PricingPlanDataSource
 */
CreateTrackerRequest.prototype['PricingPlanDataSource'] = undefined;

/**
 * <p>Applies one or more tags to the tracker resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>
 * @member {Object.<String, String>} Tags
 */
CreateTrackerRequest.prototype['Tags'] = undefined;

/**
 * <p>The name for the tracker resource.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).</p> </li> <li> <p>Must be a unique tracker resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleTracker</code>.</p> </li> </ul>
 * @member {String} TrackerName
 */
CreateTrackerRequest.prototype['TrackerName'] = undefined;





/**
 * Allowed values for the <code>PositionFiltering</code> property.
 * @enum {String}
 * @readonly
 */
CreateTrackerRequest['PositionFilteringEnum'] = {

    /**
     * value: "TimeBased"
     * @const
     */
    "TimeBased": "TimeBased",

    /**
     * value: "DistanceBased"
     * @const
     */
    "DistanceBased": "DistanceBased",

    /**
     * value: "AccuracyBased"
     * @const
     */
    "AccuracyBased": "AccuracyBased"
};


/**
 * Allowed values for the <code>PricingPlan</code> property.
 * @enum {String}
 * @readonly
 */
CreateTrackerRequest['PricingPlanEnum'] = {

    /**
     * value: "RequestBasedUsage"
     * @const
     */
    "RequestBasedUsage": "RequestBasedUsage",

    /**
     * value: "MobileAssetTracking"
     * @const
     */
    "MobileAssetTracking": "MobileAssetTracking",

    /**
     * value: "MobileAssetManagement"
     * @const
     */
    "MobileAssetManagement": "MobileAssetManagement"
};



export default CreateTrackerRequest;

