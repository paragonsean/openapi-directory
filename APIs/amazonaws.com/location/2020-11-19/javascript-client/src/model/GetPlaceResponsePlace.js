/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Place from './Place';
import PlaceGeometry from './PlaceGeometry';
import PlaceTimeZone from './PlaceTimeZone';

/**
 * The GetPlaceResponsePlace model module.
 * @module model/GetPlaceResponsePlace
 * @version 2020-11-19
 */
class GetPlaceResponsePlace {
    /**
     * Constructs a new <code>GetPlaceResponsePlace</code>.
     * @alias module:model/GetPlaceResponsePlace
     * @implements module:model/Place
     * @param geometry {module:model/PlaceGeometry} 
     */
    constructor(geometry) { 
        Place.initialize(this, geometry);
        GetPlaceResponsePlace.initialize(this, geometry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, geometry) { 
        obj['Geometry'] = geometry;
    }

    /**
     * Constructs a <code>GetPlaceResponsePlace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPlaceResponsePlace} obj Optional instance to populate.
     * @return {module:model/GetPlaceResponsePlace} The populated <code>GetPlaceResponsePlace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPlaceResponsePlace();
            Place.constructFromObject(data, obj);

            if (data.hasOwnProperty('AddressNumber')) {
                obj['AddressNumber'] = ApiClient.convertToType(data['AddressNumber'], 'String');
            }
            if (data.hasOwnProperty('Categories')) {
                obj['Categories'] = ApiClient.convertToType(data['Categories'], Array);
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Geometry')) {
                obj['Geometry'] = PlaceGeometry.constructFromObject(data['Geometry']);
            }
            if (data.hasOwnProperty('Interpolated')) {
                obj['Interpolated'] = ApiClient.convertToType(data['Interpolated'], 'Boolean');
            }
            if (data.hasOwnProperty('Label')) {
                obj['Label'] = ApiClient.convertToType(data['Label'], 'String');
            }
            if (data.hasOwnProperty('Municipality')) {
                obj['Municipality'] = ApiClient.convertToType(data['Municipality'], 'String');
            }
            if (data.hasOwnProperty('Neighborhood')) {
                obj['Neighborhood'] = ApiClient.convertToType(data['Neighborhood'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('Street')) {
                obj['Street'] = ApiClient.convertToType(data['Street'], 'String');
            }
            if (data.hasOwnProperty('SubRegion')) {
                obj['SubRegion'] = ApiClient.convertToType(data['SubRegion'], 'String');
            }
            if (data.hasOwnProperty('SupplementalCategories')) {
                obj['SupplementalCategories'] = ApiClient.convertToType(data['SupplementalCategories'], Array);
            }
            if (data.hasOwnProperty('TimeZone')) {
                obj['TimeZone'] = PlaceTimeZone.constructFromObject(data['TimeZone']);
            }
            if (data.hasOwnProperty('UnitNumber')) {
                obj['UnitNumber'] = ApiClient.convertToType(data['UnitNumber'], 'String');
            }
            if (data.hasOwnProperty('UnitType')) {
                obj['UnitType'] = ApiClient.convertToType(data['UnitType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPlaceResponsePlace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPlaceResponsePlace</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetPlaceResponsePlace.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AddressNumber`
        if (data['AddressNumber']) { // data not null
          String.validateJSON(data['AddressNumber']);
        }
        // validate the optional field `Categories`
        if (data['Categories']) { // data not null
          Array.validateJSON(data['Categories']);
        }
        // validate the optional field `Country`
        if (data['Country']) { // data not null
          String.validateJSON(data['Country']);
        }
        // validate the optional field `Geometry`
        if (data['Geometry']) { // data not null
          PlaceGeometry.validateJSON(data['Geometry']);
        }
        // validate the optional field `Interpolated`
        if (data['Interpolated']) { // data not null
          Boolean.validateJSON(data['Interpolated']);
        }
        // validate the optional field `Label`
        if (data['Label']) { // data not null
          String.validateJSON(data['Label']);
        }
        // validate the optional field `Municipality`
        if (data['Municipality']) { // data not null
          String.validateJSON(data['Municipality']);
        }
        // validate the optional field `Neighborhood`
        if (data['Neighborhood']) { // data not null
          String.validateJSON(data['Neighborhood']);
        }
        // validate the optional field `PostalCode`
        if (data['PostalCode']) { // data not null
          String.validateJSON(data['PostalCode']);
        }
        // validate the optional field `Region`
        if (data['Region']) { // data not null
          String.validateJSON(data['Region']);
        }
        // validate the optional field `Street`
        if (data['Street']) { // data not null
          String.validateJSON(data['Street']);
        }
        // validate the optional field `SubRegion`
        if (data['SubRegion']) { // data not null
          String.validateJSON(data['SubRegion']);
        }
        // validate the optional field `SupplementalCategories`
        if (data['SupplementalCategories']) { // data not null
          Array.validateJSON(data['SupplementalCategories']);
        }
        // validate the optional field `TimeZone`
        if (data['TimeZone']) { // data not null
          PlaceTimeZone.validateJSON(data['TimeZone']);
        }
        // validate the optional field `UnitNumber`
        if (data['UnitNumber']) { // data not null
          String.validateJSON(data['UnitNumber']);
        }
        // validate the optional field `UnitType`
        if (data['UnitType']) { // data not null
          String.validateJSON(data['UnitType']);
        }

        return true;
    }


}

GetPlaceResponsePlace.RequiredProperties = ["Geometry"];

/**
 * @member {String} AddressNumber
 */
GetPlaceResponsePlace.prototype['AddressNumber'] = undefined;

/**
 * @member {Array} Categories
 */
GetPlaceResponsePlace.prototype['Categories'] = undefined;

/**
 * @member {String} Country
 */
GetPlaceResponsePlace.prototype['Country'] = undefined;

/**
 * @member {module:model/PlaceGeometry} Geometry
 */
GetPlaceResponsePlace.prototype['Geometry'] = undefined;

/**
 * @member {Boolean} Interpolated
 */
GetPlaceResponsePlace.prototype['Interpolated'] = undefined;

/**
 * @member {String} Label
 */
GetPlaceResponsePlace.prototype['Label'] = undefined;

/**
 * @member {String} Municipality
 */
GetPlaceResponsePlace.prototype['Municipality'] = undefined;

/**
 * @member {String} Neighborhood
 */
GetPlaceResponsePlace.prototype['Neighborhood'] = undefined;

/**
 * @member {String} PostalCode
 */
GetPlaceResponsePlace.prototype['PostalCode'] = undefined;

/**
 * @member {String} Region
 */
GetPlaceResponsePlace.prototype['Region'] = undefined;

/**
 * @member {String} Street
 */
GetPlaceResponsePlace.prototype['Street'] = undefined;

/**
 * @member {String} SubRegion
 */
GetPlaceResponsePlace.prototype['SubRegion'] = undefined;

/**
 * @member {Array} SupplementalCategories
 */
GetPlaceResponsePlace.prototype['SupplementalCategories'] = undefined;

/**
 * @member {module:model/PlaceTimeZone} TimeZone
 */
GetPlaceResponsePlace.prototype['TimeZone'] = undefined;

/**
 * @member {String} UnitNumber
 */
GetPlaceResponsePlace.prototype['UnitNumber'] = undefined;

/**
 * @member {String} UnitType
 */
GetPlaceResponsePlace.prototype['UnitType'] = undefined;


// Implement Place interface:
/**
 * @member {String} AddressNumber
 */
Place.prototype['AddressNumber'] = undefined;
/**
 * @member {Array} Categories
 */
Place.prototype['Categories'] = undefined;
/**
 * @member {String} Country
 */
Place.prototype['Country'] = undefined;
/**
 * @member {module:model/PlaceGeometry} Geometry
 */
Place.prototype['Geometry'] = undefined;
/**
 * @member {Boolean} Interpolated
 */
Place.prototype['Interpolated'] = undefined;
/**
 * @member {String} Label
 */
Place.prototype['Label'] = undefined;
/**
 * @member {String} Municipality
 */
Place.prototype['Municipality'] = undefined;
/**
 * @member {String} Neighborhood
 */
Place.prototype['Neighborhood'] = undefined;
/**
 * @member {String} PostalCode
 */
Place.prototype['PostalCode'] = undefined;
/**
 * @member {String} Region
 */
Place.prototype['Region'] = undefined;
/**
 * @member {String} Street
 */
Place.prototype['Street'] = undefined;
/**
 * @member {String} SubRegion
 */
Place.prototype['SubRegion'] = undefined;
/**
 * @member {Array} SupplementalCategories
 */
Place.prototype['SupplementalCategories'] = undefined;
/**
 * @member {module:model/PlaceTimeZone} TimeZone
 */
Place.prototype['TimeZone'] = undefined;
/**
 * @member {String} UnitNumber
 */
Place.prototype['UnitNumber'] = undefined;
/**
 * @member {String} UnitType
 */
Place.prototype['UnitType'] = undefined;




export default GetPlaceResponsePlace;

