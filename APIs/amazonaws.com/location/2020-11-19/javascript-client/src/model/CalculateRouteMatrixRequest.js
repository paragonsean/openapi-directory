/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CalculateRouteRequestCarModeOptions from './CalculateRouteRequestCarModeOptions';
import CalculateRouteRequestTruckModeOptions from './CalculateRouteRequestTruckModeOptions';

/**
 * The CalculateRouteMatrixRequest model module.
 * @module model/CalculateRouteMatrixRequest
 * @version 2020-11-19
 */
class CalculateRouteMatrixRequest {
    /**
     * Constructs a new <code>CalculateRouteMatrixRequest</code>.
     * @alias module:model/CalculateRouteMatrixRequest
     * @param departurePositions {Array.<Array.<Number>>} <p>The list of departure (origin) positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-123.115, 49.285]</code>.</p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDeparturePositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
     * @param destinationPositions {Array.<Array.<Number>>} <p>The list of destination positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-122.339, 47.615]</code> </p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDestinationPositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
     */
    constructor(departurePositions, destinationPositions) { 
        
        CalculateRouteMatrixRequest.initialize(this, departurePositions, destinationPositions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, departurePositions, destinationPositions) { 
        obj['DeparturePositions'] = departurePositions;
        obj['DestinationPositions'] = destinationPositions;
    }

    /**
     * Constructs a <code>CalculateRouteMatrixRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalculateRouteMatrixRequest} obj Optional instance to populate.
     * @return {module:model/CalculateRouteMatrixRequest} The populated <code>CalculateRouteMatrixRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalculateRouteMatrixRequest();

            if (data.hasOwnProperty('CarModeOptions')) {
                obj['CarModeOptions'] = CalculateRouteRequestCarModeOptions.constructFromObject(data['CarModeOptions']);
            }
            if (data.hasOwnProperty('DepartNow')) {
                obj['DepartNow'] = ApiClient.convertToType(data['DepartNow'], 'Boolean');
            }
            if (data.hasOwnProperty('DeparturePositions')) {
                obj['DeparturePositions'] = ApiClient.convertToType(data['DeparturePositions'], [Array]);
            }
            if (data.hasOwnProperty('DepartureTime')) {
                obj['DepartureTime'] = ApiClient.convertToType(data['DepartureTime'], 'Date');
            }
            if (data.hasOwnProperty('DestinationPositions')) {
                obj['DestinationPositions'] = ApiClient.convertToType(data['DestinationPositions'], [Array]);
            }
            if (data.hasOwnProperty('DistanceUnit')) {
                obj['DistanceUnit'] = ApiClient.convertToType(data['DistanceUnit'], 'String');
            }
            if (data.hasOwnProperty('TravelMode')) {
                obj['TravelMode'] = ApiClient.convertToType(data['TravelMode'], 'String');
            }
            if (data.hasOwnProperty('TruckModeOptions')) {
                obj['TruckModeOptions'] = CalculateRouteRequestTruckModeOptions.constructFromObject(data['TruckModeOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalculateRouteMatrixRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalculateRouteMatrixRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CalculateRouteMatrixRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CarModeOptions`
        if (data['CarModeOptions']) { // data not null
          CalculateRouteRequestCarModeOptions.validateJSON(data['CarModeOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DeparturePositions'])) {
            throw new Error("Expected the field `DeparturePositions` to be an array in the JSON data but got " + data['DeparturePositions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DestinationPositions'])) {
            throw new Error("Expected the field `DestinationPositions` to be an array in the JSON data but got " + data['DestinationPositions']);
        }
        // ensure the json data is a string
        if (data['DistanceUnit'] && !(typeof data['DistanceUnit'] === 'string' || data['DistanceUnit'] instanceof String)) {
            throw new Error("Expected the field `DistanceUnit` to be a primitive type in the JSON string but got " + data['DistanceUnit']);
        }
        // ensure the json data is a string
        if (data['TravelMode'] && !(typeof data['TravelMode'] === 'string' || data['TravelMode'] instanceof String)) {
            throw new Error("Expected the field `TravelMode` to be a primitive type in the JSON string but got " + data['TravelMode']);
        }
        // validate the optional field `TruckModeOptions`
        if (data['TruckModeOptions']) { // data not null
          CalculateRouteRequestTruckModeOptions.validateJSON(data['TruckModeOptions']);
        }

        return true;
    }


}

CalculateRouteMatrixRequest.RequiredProperties = ["DeparturePositions", "DestinationPositions"];

/**
 * @member {module:model/CalculateRouteRequestCarModeOptions} CarModeOptions
 */
CalculateRouteMatrixRequest.prototype['CarModeOptions'] = undefined;

/**
 * <p>Sets the time of departure as the current time. Uses the current time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>
 * @member {Boolean} DepartNow
 */
CalculateRouteMatrixRequest.prototype['DepartNow'] = undefined;

/**
 * <p>The list of departure (origin) positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-123.115, 49.285]</code>.</p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDeparturePositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
 * @member {Array.<Array.<Number>>} DeparturePositions
 */
CalculateRouteMatrixRequest.prototype['DeparturePositions'] = undefined;

/**
 * <p>Specifies the desired time of departure. Uses the given time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020–07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>
 * @member {Date} DepartureTime
 */
CalculateRouteMatrixRequest.prototype['DepartureTime'] = undefined;

/**
 * <p>The list of destination positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-122.339, 47.615]</code> </p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDestinationPositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
 * @member {Array.<Array.<Number>>} DestinationPositions
 */
CalculateRouteMatrixRequest.prototype['DestinationPositions'] = undefined;

/**
 * <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>
 * @member {module:model/CalculateRouteMatrixRequest.DistanceUnitEnum} DistanceUnit
 */
CalculateRouteMatrixRequest.prototype['DistanceUnit'] = undefined;

/**
 * <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>
 * @member {module:model/CalculateRouteMatrixRequest.TravelModeEnum} TravelMode
 */
CalculateRouteMatrixRequest.prototype['TravelMode'] = undefined;

/**
 * @member {module:model/CalculateRouteRequestTruckModeOptions} TruckModeOptions
 */
CalculateRouteMatrixRequest.prototype['TruckModeOptions'] = undefined;





/**
 * Allowed values for the <code>DistanceUnit</code> property.
 * @enum {String}
 * @readonly
 */
CalculateRouteMatrixRequest['DistanceUnitEnum'] = {

    /**
     * value: "Kilometers"
     * @const
     */
    "Kilometers": "Kilometers",

    /**
     * value: "Miles"
     * @const
     */
    "Miles": "Miles"
};


/**
 * Allowed values for the <code>TravelMode</code> property.
 * @enum {String}
 * @readonly
 */
CalculateRouteMatrixRequest['TravelModeEnum'] = {

    /**
     * value: "Car"
     * @const
     */
    "Car": "Car",

    /**
     * value: "Truck"
     * @const
     */
    "Truck": "Truck",

    /**
     * value: "Walking"
     * @const
     */
    "Walking": "Walking",

    /**
     * value: "Bicycle"
     * @const
     */
    "Bicycle": "Bicycle",

    /**
     * value: "Motorcycle"
     * @const
     */
    "Motorcycle": "Motorcycle"
};



export default CalculateRouteMatrixRequest;

