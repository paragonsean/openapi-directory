/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntendedUse from './IntendedUse';

/**
 * The DataSourceConfiguration model module.
 * @module model/DataSourceConfiguration
 * @version 2020-11-19
 */
class DataSourceConfiguration {
    /**
     * Constructs a new <code>DataSourceConfiguration</code>.
     * &lt;p&gt;Specifies the data storage option chosen for requesting Places.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When using Amazon Location Places:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If using HERE Technologies as a data provider, you can&#39;t store results for locations in Japan by setting &lt;code&gt;IntendedUse&lt;/code&gt; to &lt;code&gt;Storage&lt;/code&gt;. parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Under the &lt;code&gt;MobileAssetTracking&lt;/code&gt; or &lt;code&gt;MobilAssetManagement&lt;/code&gt; pricing plan, you can&#39;t store results from your place index resources by setting &lt;code&gt;IntendedUse&lt;/code&gt; to &lt;code&gt;Storage&lt;/code&gt;. This returns a validation exception error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see the &lt;a href&#x3D;\&quot;https://aws.amazon.com/service-terms/\&quot;&gt;AWS Service Terms&lt;/a&gt; for Amazon Location Service.&lt;/p&gt; &lt;/important&gt;
     * @alias module:model/DataSourceConfiguration
     */
    constructor() { 
        
        DataSourceConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSourceConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSourceConfiguration} obj Optional instance to populate.
     * @return {module:model/DataSourceConfiguration} The populated <code>DataSourceConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSourceConfiguration();

            if (data.hasOwnProperty('IntendedUse')) {
                obj['IntendedUse'] = ApiClient.convertToType(data['IntendedUse'], IntendedUse);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSourceConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSourceConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `IntendedUse`
        if (data['IntendedUse']) { // data not null
          IntendedUse.validateJSON(data['IntendedUse']);
        }

        return true;
    }


}



/**
 * @member {module:model/IntendedUse} IntendedUse
 */
DataSourceConfiguration.prototype['IntendedUse'] = undefined;






export default DataSourceConfiguration;

