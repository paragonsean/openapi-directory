/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CalculateRouteRequestCarModeOptions from './CalculateRouteRequestCarModeOptions';
import CalculateRouteRequestTruckModeOptions from './CalculateRouteRequestTruckModeOptions';

/**
 * The CalculateRouteRequest model module.
 * @module model/CalculateRouteRequest
 * @version 2020-11-19
 */
class CalculateRouteRequest {
    /**
     * Constructs a new <code>CalculateRouteRequest</code>.
     * @alias module:model/CalculateRouteRequest
     * @param departurePosition {Array.<Number>} <p>The start position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p>For example, <code>[-123.115, 49.285]</code> </p> </li> </ul> <note> <p>If you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
     * @param destinationPosition {Array.<Number>} <p>The finish position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p> For example, <code>[-122.339, 47.615]</code> </p> </li> </ul> <note> <p>If you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
     */
    constructor(departurePosition, destinationPosition) { 
        
        CalculateRouteRequest.initialize(this, departurePosition, destinationPosition);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, departurePosition, destinationPosition) { 
        obj['DeparturePosition'] = departurePosition;
        obj['DestinationPosition'] = destinationPosition;
    }

    /**
     * Constructs a <code>CalculateRouteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalculateRouteRequest} obj Optional instance to populate.
     * @return {module:model/CalculateRouteRequest} The populated <code>CalculateRouteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalculateRouteRequest();

            if (data.hasOwnProperty('CarModeOptions')) {
                obj['CarModeOptions'] = CalculateRouteRequestCarModeOptions.constructFromObject(data['CarModeOptions']);
            }
            if (data.hasOwnProperty('DepartNow')) {
                obj['DepartNow'] = ApiClient.convertToType(data['DepartNow'], 'Boolean');
            }
            if (data.hasOwnProperty('DeparturePosition')) {
                obj['DeparturePosition'] = ApiClient.convertToType(data['DeparturePosition'], ['Number']);
            }
            if (data.hasOwnProperty('DepartureTime')) {
                obj['DepartureTime'] = ApiClient.convertToType(data['DepartureTime'], 'Date');
            }
            if (data.hasOwnProperty('DestinationPosition')) {
                obj['DestinationPosition'] = ApiClient.convertToType(data['DestinationPosition'], ['Number']);
            }
            if (data.hasOwnProperty('DistanceUnit')) {
                obj['DistanceUnit'] = ApiClient.convertToType(data['DistanceUnit'], 'String');
            }
            if (data.hasOwnProperty('IncludeLegGeometry')) {
                obj['IncludeLegGeometry'] = ApiClient.convertToType(data['IncludeLegGeometry'], 'Boolean');
            }
            if (data.hasOwnProperty('TravelMode')) {
                obj['TravelMode'] = ApiClient.convertToType(data['TravelMode'], 'String');
            }
            if (data.hasOwnProperty('TruckModeOptions')) {
                obj['TruckModeOptions'] = CalculateRouteRequestTruckModeOptions.constructFromObject(data['TruckModeOptions']);
            }
            if (data.hasOwnProperty('WaypointPositions')) {
                obj['WaypointPositions'] = ApiClient.convertToType(data['WaypointPositions'], [Array]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalculateRouteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalculateRouteRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CalculateRouteRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CarModeOptions`
        if (data['CarModeOptions']) { // data not null
          CalculateRouteRequestCarModeOptions.validateJSON(data['CarModeOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DeparturePosition'])) {
            throw new Error("Expected the field `DeparturePosition` to be an array in the JSON data but got " + data['DeparturePosition']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DestinationPosition'])) {
            throw new Error("Expected the field `DestinationPosition` to be an array in the JSON data but got " + data['DestinationPosition']);
        }
        // ensure the json data is a string
        if (data['DistanceUnit'] && !(typeof data['DistanceUnit'] === 'string' || data['DistanceUnit'] instanceof String)) {
            throw new Error("Expected the field `DistanceUnit` to be a primitive type in the JSON string but got " + data['DistanceUnit']);
        }
        // ensure the json data is a string
        if (data['TravelMode'] && !(typeof data['TravelMode'] === 'string' || data['TravelMode'] instanceof String)) {
            throw new Error("Expected the field `TravelMode` to be a primitive type in the JSON string but got " + data['TravelMode']);
        }
        // validate the optional field `TruckModeOptions`
        if (data['TruckModeOptions']) { // data not null
          CalculateRouteRequestTruckModeOptions.validateJSON(data['TruckModeOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['WaypointPositions'])) {
            throw new Error("Expected the field `WaypointPositions` to be an array in the JSON data but got " + data['WaypointPositions']);
        }

        return true;
    }


}

CalculateRouteRequest.RequiredProperties = ["DeparturePosition", "DestinationPosition"];

/**
 * @member {module:model/CalculateRouteRequestCarModeOptions} CarModeOptions
 */
CalculateRouteRequest.prototype['CarModeOptions'] = undefined;

/**
 * <p>Sets the time of departure as the current time. Uses the current time to calculate a route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>
 * @member {Boolean} DepartNow
 */
CalculateRouteRequest.prototype['DepartNow'] = undefined;

/**
 * <p>The start position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p>For example, <code>[-123.115, 49.285]</code> </p> </li> </ul> <note> <p>If you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
 * @member {Array.<Number>} DeparturePosition
 */
CalculateRouteRequest.prototype['DeparturePosition'] = undefined;

/**
 * <p>Specifies the desired time of departure. Uses the given time to calculate the route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020â€“07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>
 * @member {Date} DepartureTime
 */
CalculateRouteRequest.prototype['DepartureTime'] = undefined;

/**
 * <p>The finish position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p> For example, <code>[-122.339, 47.615]</code> </p> </li> </ul> <note> <p>If you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
 * @member {Array.<Number>} DestinationPosition
 */
CalculateRouteRequest.prototype['DestinationPosition'] = undefined;

/**
 * <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>
 * @member {module:model/CalculateRouteRequest.DistanceUnitEnum} DistanceUnit
 */
CalculateRouteRequest.prototype['DistanceUnit'] = undefined;

/**
 * <p>Set to include the geometry details in the result for each path between a pair of positions.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>
 * @member {Boolean} IncludeLegGeometry
 */
CalculateRouteRequest.prototype['IncludeLegGeometry'] = undefined;

/**
 * <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility. You can choose <code>Car</code>, <code>Truck</code>, <code>Walking</code>, <code>Bicycle</code> or <code>Motorcycle</code> as options for the <code>TravelMode</code>.</p> <note> <p> <code>Bicycle</code> and <code>Motorcycle</code> are only valid when using Grab as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more details on the using Grab for routing, including areas of coverage, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <p>Default Value: <code>Car</code> </p>
 * @member {module:model/CalculateRouteRequest.TravelModeEnum} TravelMode
 */
CalculateRouteRequest.prototype['TravelMode'] = undefined;

/**
 * @member {module:model/CalculateRouteRequestTruckModeOptions} TruckModeOptions
 */
CalculateRouteRequest.prototype['TruckModeOptions'] = undefined;

/**
 * <p>Specifies an ordered list of up to 23 intermediate positions to include along a route between the departure position and destination position. </p> <ul> <li> <p>For example, from the <code>DeparturePosition</code> <code>[-123.115, 49.285]</code>, the route follows the order that the waypoint positions are given <code>[[-122.757, 49.0021],[-122.349, 47.620]]</code> </p> </li> </ul> <note> <p>If you specify a waypoint position that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> <p>Specifying more than 23 waypoints returns a <code>400 ValidationException</code> error.</p> <p>If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
 * @member {Array.<Array.<Number>>} WaypointPositions
 */
CalculateRouteRequest.prototype['WaypointPositions'] = undefined;





/**
 * Allowed values for the <code>DistanceUnit</code> property.
 * @enum {String}
 * @readonly
 */
CalculateRouteRequest['DistanceUnitEnum'] = {

    /**
     * value: "Kilometers"
     * @const
     */
    "Kilometers": "Kilometers",

    /**
     * value: "Miles"
     * @const
     */
    "Miles": "Miles"
};


/**
 * Allowed values for the <code>TravelMode</code> property.
 * @enum {String}
 * @readonly
 */
CalculateRouteRequest['TravelModeEnum'] = {

    /**
     * value: "Car"
     * @const
     */
    "Car": "Car",

    /**
     * value: "Truck"
     * @const
     */
    "Truck": "Truck",

    /**
     * value: "Walking"
     * @const
     */
    "Walking": "Walking",

    /**
     * value: "Bicycle"
     * @const
     */
    "Bicycle": "Bicycle",

    /**
     * value: "Motorcycle"
     * @const
     */
    "Motorcycle": "Motorcycle"
};



export default CalculateRouteRequest;

