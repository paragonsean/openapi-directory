/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateGeofenceCollectionRequest model module.
 * @module model/CreateGeofenceCollectionRequest
 * @version 2020-11-19
 */
class CreateGeofenceCollectionRequest {
    /**
     * Constructs a new <code>CreateGeofenceCollectionRequest</code>.
     * @alias module:model/CreateGeofenceCollectionRequest
     * @param collectionName {String} <p>A custom name for the geofence collection.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique geofence collection name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleGeofenceCollection</code>.</p> </li> </ul>
     */
    constructor(collectionName) { 
        
        CreateGeofenceCollectionRequest.initialize(this, collectionName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, collectionName) { 
        obj['CollectionName'] = collectionName;
    }

    /**
     * Constructs a <code>CreateGeofenceCollectionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateGeofenceCollectionRequest} obj Optional instance to populate.
     * @return {module:model/CreateGeofenceCollectionRequest} The populated <code>CreateGeofenceCollectionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateGeofenceCollectionRequest();

            if (data.hasOwnProperty('CollectionName')) {
                obj['CollectionName'] = ApiClient.convertToType(data['CollectionName'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('KmsKeyId')) {
                obj['KmsKeyId'] = ApiClient.convertToType(data['KmsKeyId'], 'String');
            }
            if (data.hasOwnProperty('PricingPlan')) {
                obj['PricingPlan'] = ApiClient.convertToType(data['PricingPlan'], 'String');
            }
            if (data.hasOwnProperty('PricingPlanDataSource')) {
                obj['PricingPlanDataSource'] = ApiClient.convertToType(data['PricingPlanDataSource'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateGeofenceCollectionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateGeofenceCollectionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateGeofenceCollectionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CollectionName'] && !(typeof data['CollectionName'] === 'string' || data['CollectionName'] instanceof String)) {
            throw new Error("Expected the field `CollectionName` to be a primitive type in the JSON string but got " + data['CollectionName']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['KmsKeyId'] && !(typeof data['KmsKeyId'] === 'string' || data['KmsKeyId'] instanceof String)) {
            throw new Error("Expected the field `KmsKeyId` to be a primitive type in the JSON string but got " + data['KmsKeyId']);
        }
        // ensure the json data is a string
        if (data['PricingPlan'] && !(typeof data['PricingPlan'] === 'string' || data['PricingPlan'] instanceof String)) {
            throw new Error("Expected the field `PricingPlan` to be a primitive type in the JSON string but got " + data['PricingPlan']);
        }
        // ensure the json data is a string
        if (data['PricingPlanDataSource'] && !(typeof data['PricingPlanDataSource'] === 'string' || data['PricingPlanDataSource'] instanceof String)) {
            throw new Error("Expected the field `PricingPlanDataSource` to be a primitive type in the JSON string but got " + data['PricingPlanDataSource']);
        }

        return true;
    }


}

CreateGeofenceCollectionRequest.RequiredProperties = ["CollectionName"];

/**
 * <p>A custom name for the geofence collection.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique geofence collection name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleGeofenceCollection</code>.</p> </li> </ul>
 * @member {String} CollectionName
 */
CreateGeofenceCollectionRequest.prototype['CollectionName'] = undefined;

/**
 * An optional description for the geofence collection.
 * @member {String} Description
 */
CreateGeofenceCollectionRequest.prototype['Description'] = undefined;

/**
 * A key identifier for an <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html\">Amazon Web Services KMS customer managed key</a>. Enter a key ID, key ARN, alias name, or alias ARN. 
 * @member {String} KmsKeyId
 */
CreateGeofenceCollectionRequest.prototype['KmsKeyId'] = undefined;

/**
 * No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.
 * @member {module:model/CreateGeofenceCollectionRequest.PricingPlanEnum} PricingPlan
 */
CreateGeofenceCollectionRequest.prototype['PricingPlan'] = undefined;

/**
 * This parameter is no longer used.
 * @member {String} PricingPlanDataSource
 */
CreateGeofenceCollectionRequest.prototype['PricingPlanDataSource'] = undefined;

/**
 * <p>Applies one or more tags to the geofence collection. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>
 * @member {Object.<String, String>} Tags
 */
CreateGeofenceCollectionRequest.prototype['Tags'] = undefined;





/**
 * Allowed values for the <code>PricingPlan</code> property.
 * @enum {String}
 * @readonly
 */
CreateGeofenceCollectionRequest['PricingPlanEnum'] = {

    /**
     * value: "RequestBasedUsage"
     * @const
     */
    "RequestBasedUsage": "RequestBasedUsage",

    /**
     * value: "MobileAssetTracking"
     * @const
     */
    "MobileAssetTracking": "MobileAssetTracking",

    /**
     * value: "MobileAssetManagement"
     * @const
     */
    "MobileAssetManagement": "MobileAssetManagement"
};



export default CreateGeofenceCollectionRequest;

