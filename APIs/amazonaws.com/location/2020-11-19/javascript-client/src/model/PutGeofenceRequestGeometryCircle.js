/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Circle from './Circle';

/**
 * The PutGeofenceRequestGeometryCircle model module.
 * @module model/PutGeofenceRequestGeometryCircle
 * @version 2020-11-19
 */
class PutGeofenceRequestGeometryCircle {
    /**
     * Constructs a new <code>PutGeofenceRequestGeometryCircle</code>.
     * @alias module:model/PutGeofenceRequestGeometryCircle
     * @implements module:model/Circle
     * @param center {Array} 
     * @param radius {Number} 
     */
    constructor(center, radius) { 
        Circle.initialize(this, center, radius);
        PutGeofenceRequestGeometryCircle.initialize(this, center, radius);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, center, radius) { 
        obj['Center'] = center;
        obj['Radius'] = radius;
    }

    /**
     * Constructs a <code>PutGeofenceRequestGeometryCircle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutGeofenceRequestGeometryCircle} obj Optional instance to populate.
     * @return {module:model/PutGeofenceRequestGeometryCircle} The populated <code>PutGeofenceRequestGeometryCircle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutGeofenceRequestGeometryCircle();
            Circle.constructFromObject(data, obj);

            if (data.hasOwnProperty('Center')) {
                obj['Center'] = ApiClient.convertToType(data['Center'], Array);
            }
            if (data.hasOwnProperty('Radius')) {
                obj['Radius'] = ApiClient.convertToType(data['Radius'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutGeofenceRequestGeometryCircle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutGeofenceRequestGeometryCircle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutGeofenceRequestGeometryCircle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Center`
        if (data['Center']) { // data not null
          Array.validateJSON(data['Center']);
        }
        // validate the optional field `Radius`
        if (data['Radius']) { // data not null
          Number.validateJSON(data['Radius']);
        }

        return true;
    }


}

PutGeofenceRequestGeometryCircle.RequiredProperties = ["Center", "Radius"];

/**
 * @member {Array} Center
 */
PutGeofenceRequestGeometryCircle.prototype['Center'] = undefined;

/**
 * @member {Number} Radius
 */
PutGeofenceRequestGeometryCircle.prototype['Radius'] = undefined;


// Implement Circle interface:
/**
 * @member {Array} Center
 */
Circle.prototype['Center'] = undefined;
/**
 * @member {Number} Radius
 */
Circle.prototype['Radius'] = undefined;




export default PutGeofenceRequestGeometryCircle;

