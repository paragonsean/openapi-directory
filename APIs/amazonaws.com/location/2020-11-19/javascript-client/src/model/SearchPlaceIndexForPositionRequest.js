/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchPlaceIndexForPositionRequest model module.
 * @module model/SearchPlaceIndexForPositionRequest
 * @version 2020-11-19
 */
class SearchPlaceIndexForPositionRequest {
    /**
     * Constructs a new <code>SearchPlaceIndexForPositionRequest</code>.
     * @alias module:model/SearchPlaceIndexForPositionRequest
     * @param position {Array.<Number>} <p>Specifies the longitude and latitude of the position to query.</p> <p> This parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p> <p>For example, <code>[-123.1174, 49.2847]</code> represents a position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
     */
    constructor(position) { 
        
        SearchPlaceIndexForPositionRequest.initialize(this, position);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, position) { 
        obj['Position'] = position;
    }

    /**
     * Constructs a <code>SearchPlaceIndexForPositionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchPlaceIndexForPositionRequest} obj Optional instance to populate.
     * @return {module:model/SearchPlaceIndexForPositionRequest} The populated <code>SearchPlaceIndexForPositionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchPlaceIndexForPositionRequest();

            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = ApiClient.convertToType(data['Position'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchPlaceIndexForPositionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchPlaceIndexForPositionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchPlaceIndexForPositionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Position'])) {
            throw new Error("Expected the field `Position` to be an array in the JSON data but got " + data['Position']);
        }

        return true;
    }


}

SearchPlaceIndexForPositionRequest.RequiredProperties = ["Position"];

/**
 * <p>The preferred language used to return results. The value must be a valid <a href=\"https://tools.ietf.org/search/bcp47\">BCP 47</a> language tag, for example, <code>en</code> for English.</p> <p>This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p> <p>For an example, we'll use the Greek language. You search for a location around Athens, Greece, with the <code>language</code> parameter set to <code>en</code>. The <code>city</code> in the results will most likely be returned as <code>Athens</code>.</p> <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the <code>city</code> in the results will more likely be returned as <code>Αθήνα</code>.</p> <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>
 * @member {String} Language
 */
SearchPlaceIndexForPositionRequest.prototype['Language'] = undefined;

/**
 * <p>An optional parameter. The maximum number of results returned per request.</p> <p>Default value: <code>50</code> </p>
 * @member {Number} MaxResults
 */
SearchPlaceIndexForPositionRequest.prototype['MaxResults'] = undefined;

/**
 * <p>Specifies the longitude and latitude of the position to query.</p> <p> This parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p> <p>For example, <code>[-123.1174, 49.2847]</code> represents a position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
 * @member {Array.<Number>} Position
 */
SearchPlaceIndexForPositionRequest.prototype['Position'] = undefined;






export default SearchPlaceIndexForPositionRequest;

