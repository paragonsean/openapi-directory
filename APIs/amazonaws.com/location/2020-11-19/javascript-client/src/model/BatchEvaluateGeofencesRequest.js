/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DevicePositionUpdate from './DevicePositionUpdate';

/**
 * The BatchEvaluateGeofencesRequest model module.
 * @module model/BatchEvaluateGeofencesRequest
 * @version 2020-11-19
 */
class BatchEvaluateGeofencesRequest {
    /**
     * Constructs a new <code>BatchEvaluateGeofencesRequest</code>.
     * @alias module:model/BatchEvaluateGeofencesRequest
     * @param devicePositionUpdates {Array.<module:model/DevicePositionUpdate>} Contains device details for each device to be evaluated against the given geofence collection.
     */
    constructor(devicePositionUpdates) { 
        
        BatchEvaluateGeofencesRequest.initialize(this, devicePositionUpdates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, devicePositionUpdates) { 
        obj['DevicePositionUpdates'] = devicePositionUpdates;
    }

    /**
     * Constructs a <code>BatchEvaluateGeofencesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchEvaluateGeofencesRequest} obj Optional instance to populate.
     * @return {module:model/BatchEvaluateGeofencesRequest} The populated <code>BatchEvaluateGeofencesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchEvaluateGeofencesRequest();

            if (data.hasOwnProperty('DevicePositionUpdates')) {
                obj['DevicePositionUpdates'] = ApiClient.convertToType(data['DevicePositionUpdates'], [DevicePositionUpdate]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchEvaluateGeofencesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchEvaluateGeofencesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BatchEvaluateGeofencesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['DevicePositionUpdates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DevicePositionUpdates'])) {
                throw new Error("Expected the field `DevicePositionUpdates` to be an array in the JSON data but got " + data['DevicePositionUpdates']);
            }
            // validate the optional field `DevicePositionUpdates` (array)
            for (const item of data['DevicePositionUpdates']) {
                DevicePositionUpdate.validateJSON(item);
            };
        }

        return true;
    }


}

BatchEvaluateGeofencesRequest.RequiredProperties = ["DevicePositionUpdates"];

/**
 * Contains device details for each device to be evaluated against the given geofence collection.
 * @member {Array.<module:model/DevicePositionUpdate>} DevicePositionUpdates
 */
BatchEvaluateGeofencesRequest.prototype['DevicePositionUpdates'] = undefined;






export default BatchEvaluateGeofencesRequest;

