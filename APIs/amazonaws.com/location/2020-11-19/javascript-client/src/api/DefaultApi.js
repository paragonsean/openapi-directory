/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateTrackerConsumerRequest from '../model/AssociateTrackerConsumerRequest';
import BatchDeleteDevicePositionHistoryRequest from '../model/BatchDeleteDevicePositionHistoryRequest';
import BatchDeleteDevicePositionHistoryResponse from '../model/BatchDeleteDevicePositionHistoryResponse';
import BatchDeleteGeofenceRequest from '../model/BatchDeleteGeofenceRequest';
import BatchDeleteGeofenceResponse from '../model/BatchDeleteGeofenceResponse';
import BatchEvaluateGeofencesRequest from '../model/BatchEvaluateGeofencesRequest';
import BatchEvaluateGeofencesResponse from '../model/BatchEvaluateGeofencesResponse';
import BatchGetDevicePositionRequest from '../model/BatchGetDevicePositionRequest';
import BatchGetDevicePositionResponse from '../model/BatchGetDevicePositionResponse';
import BatchPutGeofenceRequest from '../model/BatchPutGeofenceRequest';
import BatchPutGeofenceResponse from '../model/BatchPutGeofenceResponse';
import BatchUpdateDevicePositionRequest from '../model/BatchUpdateDevicePositionRequest';
import BatchUpdateDevicePositionResponse from '../model/BatchUpdateDevicePositionResponse';
import CalculateRouteMatrixRequest from '../model/CalculateRouteMatrixRequest';
import CalculateRouteMatrixResponse from '../model/CalculateRouteMatrixResponse';
import CalculateRouteRequest from '../model/CalculateRouteRequest';
import CalculateRouteResponse from '../model/CalculateRouteResponse';
import CreateGeofenceCollectionRequest from '../model/CreateGeofenceCollectionRequest';
import CreateGeofenceCollectionResponse from '../model/CreateGeofenceCollectionResponse';
import CreateKeyRequest from '../model/CreateKeyRequest';
import CreateKeyResponse from '../model/CreateKeyResponse';
import CreateMapRequest from '../model/CreateMapRequest';
import CreateMapResponse from '../model/CreateMapResponse';
import CreatePlaceIndexRequest from '../model/CreatePlaceIndexRequest';
import CreatePlaceIndexResponse from '../model/CreatePlaceIndexResponse';
import CreateRouteCalculatorRequest from '../model/CreateRouteCalculatorRequest';
import CreateRouteCalculatorResponse from '../model/CreateRouteCalculatorResponse';
import CreateTrackerRequest from '../model/CreateTrackerRequest';
import CreateTrackerResponse from '../model/CreateTrackerResponse';
import DescribeGeofenceCollectionResponse from '../model/DescribeGeofenceCollectionResponse';
import DescribeKeyResponse from '../model/DescribeKeyResponse';
import DescribeMapResponse from '../model/DescribeMapResponse';
import DescribePlaceIndexResponse from '../model/DescribePlaceIndexResponse';
import DescribeRouteCalculatorResponse from '../model/DescribeRouteCalculatorResponse';
import DescribeTrackerResponse from '../model/DescribeTrackerResponse';
import GetDevicePositionHistoryRequest from '../model/GetDevicePositionHistoryRequest';
import GetDevicePositionHistoryResponse from '../model/GetDevicePositionHistoryResponse';
import GetDevicePositionResponse from '../model/GetDevicePositionResponse';
import GetGeofenceResponse from '../model/GetGeofenceResponse';
import GetMapGlyphsResponse from '../model/GetMapGlyphsResponse';
import GetMapSpritesResponse from '../model/GetMapSpritesResponse';
import GetMapStyleDescriptorResponse from '../model/GetMapStyleDescriptorResponse';
import GetMapTileResponse from '../model/GetMapTileResponse';
import GetPlaceResponse from '../model/GetPlaceResponse';
import ListDevicePositionsRequest from '../model/ListDevicePositionsRequest';
import ListDevicePositionsResponse from '../model/ListDevicePositionsResponse';
import ListGeofenceCollectionsRequest from '../model/ListGeofenceCollectionsRequest';
import ListGeofenceCollectionsResponse from '../model/ListGeofenceCollectionsResponse';
import ListGeofencesRequest from '../model/ListGeofencesRequest';
import ListGeofencesResponse from '../model/ListGeofencesResponse';
import ListKeysRequest from '../model/ListKeysRequest';
import ListKeysResponse from '../model/ListKeysResponse';
import ListMapsRequest from '../model/ListMapsRequest';
import ListMapsResponse from '../model/ListMapsResponse';
import ListPlaceIndexesRequest from '../model/ListPlaceIndexesRequest';
import ListPlaceIndexesResponse from '../model/ListPlaceIndexesResponse';
import ListRouteCalculatorsRequest from '../model/ListRouteCalculatorsRequest';
import ListRouteCalculatorsResponse from '../model/ListRouteCalculatorsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTrackerConsumersResponse from '../model/ListTrackerConsumersResponse';
import ListTrackersResponse from '../model/ListTrackersResponse';
import PutGeofenceRequest from '../model/PutGeofenceRequest';
import PutGeofenceResponse from '../model/PutGeofenceResponse';
import SearchPlaceIndexForPositionRequest from '../model/SearchPlaceIndexForPositionRequest';
import SearchPlaceIndexForPositionResponse from '../model/SearchPlaceIndexForPositionResponse';
import SearchPlaceIndexForSuggestionsRequest from '../model/SearchPlaceIndexForSuggestionsRequest';
import SearchPlaceIndexForSuggestionsResponse from '../model/SearchPlaceIndexForSuggestionsResponse';
import SearchPlaceIndexForTextRequest from '../model/SearchPlaceIndexForTextRequest';
import SearchPlaceIndexForTextResponse from '../model/SearchPlaceIndexForTextResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateGeofenceCollectionRequest from '../model/UpdateGeofenceCollectionRequest';
import UpdateGeofenceCollectionResponse from '../model/UpdateGeofenceCollectionResponse';
import UpdateKeyRequest from '../model/UpdateKeyRequest';
import UpdateKeyResponse from '../model/UpdateKeyResponse';
import UpdateMapRequest from '../model/UpdateMapRequest';
import UpdateMapResponse from '../model/UpdateMapResponse';
import UpdatePlaceIndexRequest from '../model/UpdatePlaceIndexRequest';
import UpdatePlaceIndexResponse from '../model/UpdatePlaceIndexResponse';
import UpdateRouteCalculatorRequest from '../model/UpdateRouteCalculatorRequest';
import UpdateRouteCalculatorResponse from '../model/UpdateRouteCalculatorResponse';
import UpdateTrackerRequest from '../model/UpdateTrackerRequest';
import UpdateTrackerResponse from '../model/UpdateTrackerResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-11-19
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateTrackerConsumer operation.
     * @callback module:api/DefaultApi~associateTrackerConsumerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an association between a geofence collection and a tracker resource. This allows the tracker resource to communicate location data to the linked geofence collection. </p> <p>You can associate up to five geofence collections to each tracker resource.</p> <note> <p>Currently not supported — Cross-account configurations, such as creating associations between a tracker resource in one account and a geofence collection in another account.</p> </note>
     * @param {String} trackerName The name of the tracker resource to be associated with a geofence collection.
     * @param {module:model/AssociateTrackerConsumerRequest} associateTrackerConsumerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateTrackerConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateTrackerConsumer(trackerName, associateTrackerConsumerRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateTrackerConsumerRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling associateTrackerConsumer");
      }
      // verify the required parameter 'associateTrackerConsumerRequest' is set
      if (associateTrackerConsumerRequest === undefined || associateTrackerConsumerRequest === null) {
        throw new Error("Missing the required parameter 'associateTrackerConsumerRequest' when calling associateTrackerConsumer");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/consumers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteDevicePositionHistory operation.
     * @callback module:api/DefaultApi~batchDeleteDevicePositionHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteDevicePositionHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the position history of one or more devices from a tracker resource.
     * @param {String} trackerName The name of the tracker resource to delete the device position history from.
     * @param {module:model/BatchDeleteDevicePositionHistoryRequest} batchDeleteDevicePositionHistoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteDevicePositionHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteDevicePositionHistoryResponse}
     */
    batchDeleteDevicePositionHistory(trackerName, batchDeleteDevicePositionHistoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteDevicePositionHistoryRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling batchDeleteDevicePositionHistory");
      }
      // verify the required parameter 'batchDeleteDevicePositionHistoryRequest' is set
      if (batchDeleteDevicePositionHistoryRequest === undefined || batchDeleteDevicePositionHistoryRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteDevicePositionHistoryRequest' when calling batchDeleteDevicePositionHistory");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteDevicePositionHistoryResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/delete-positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteGeofence operation.
     * @callback module:api/DefaultApi~batchDeleteGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteGeofenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a batch of geofences from a geofence collection.</p> <note> <p>This operation deletes the resource permanently.</p> </note>
     * @param {String} collectionName The geofence collection storing the geofences to be deleted.
     * @param {module:model/BatchDeleteGeofenceRequest} batchDeleteGeofenceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteGeofenceResponse}
     */
    batchDeleteGeofence(collectionName, batchDeleteGeofenceRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteGeofenceRequest;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling batchDeleteGeofence");
      }
      // verify the required parameter 'batchDeleteGeofenceRequest' is set
      if (batchDeleteGeofenceRequest === undefined || batchDeleteGeofenceRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteGeofenceRequest' when calling batchDeleteGeofence");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteGeofenceResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}/delete-geofences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchEvaluateGeofences operation.
     * @callback module:api/DefaultApi~batchEvaluateGeofencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchEvaluateGeofencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Evaluates device positions against the geofence geometries from a given geofence collection.</p> <p>This operation always returns an empty response because geofences are asynchronously evaluated. The evaluation determines if the device has entered or exited a geofenced area, and then publishes one of the following events to Amazon EventBridge:</p> <ul> <li> <p> <code>ENTER</code> if Amazon Location determines that the tracked device has entered a geofenced area.</p> </li> <li> <p> <code>EXIT</code> if Amazon Location determines that the tracked device has exited a geofenced area.</p> </li> </ul> <note> <p>The last geofence that a device was observed within is tracked for 30 days after the most recent device position update.</p> </note> <note> <p>Geofence evaluation uses the given device position. It does not account for the optional <code>Accuracy</code> of a <code>DevicePositionUpdate</code>.</p> </note> <note> <p>The <code>DeviceID</code> is used as a string to represent the device. You do not need to have a <code>Tracker</code> associated with the <code>DeviceID</code>.</p> </note>
     * @param {String} collectionName The geofence collection used in evaluating the position of devices against its geofences.
     * @param {module:model/BatchEvaluateGeofencesRequest} batchEvaluateGeofencesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchEvaluateGeofencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchEvaluateGeofencesResponse}
     */
    batchEvaluateGeofences(collectionName, batchEvaluateGeofencesRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchEvaluateGeofencesRequest;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling batchEvaluateGeofences");
      }
      // verify the required parameter 'batchEvaluateGeofencesRequest' is set
      if (batchEvaluateGeofencesRequest === undefined || batchEvaluateGeofencesRequest === null) {
        throw new Error("Missing the required parameter 'batchEvaluateGeofencesRequest' when calling batchEvaluateGeofences");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchEvaluateGeofencesResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}/positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetDevicePosition operation.
     * @callback module:api/DefaultApi~batchGetDevicePositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetDevicePositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the latest device positions for requested devices.
     * @param {String} trackerName The tracker resource retrieving the device position.
     * @param {module:model/BatchGetDevicePositionRequest} batchGetDevicePositionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetDevicePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetDevicePositionResponse}
     */
    batchGetDevicePosition(trackerName, batchGetDevicePositionRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetDevicePositionRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling batchGetDevicePosition");
      }
      // verify the required parameter 'batchGetDevicePositionRequest' is set
      if (batchGetDevicePositionRequest === undefined || batchGetDevicePositionRequest === null) {
        throw new Error("Missing the required parameter 'batchGetDevicePositionRequest' when calling batchGetDevicePosition");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetDevicePositionResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/get-positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchPutGeofence operation.
     * @callback module:api/DefaultApi~batchPutGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPutGeofenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A batch request for storing geofence geometries into a given geofence collection, or updates the geometry of an existing geofence if a geofence ID is included in the request.
     * @param {String} collectionName The geofence collection storing the geofences.
     * @param {module:model/BatchPutGeofenceRequest} batchPutGeofenceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchPutGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPutGeofenceResponse}
     */
    batchPutGeofence(collectionName, batchPutGeofenceRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchPutGeofenceRequest;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling batchPutGeofence");
      }
      // verify the required parameter 'batchPutGeofenceRequest' is set
      if (batchPutGeofenceRequest === undefined || batchPutGeofenceRequest === null) {
        throw new Error("Missing the required parameter 'batchPutGeofenceRequest' when calling batchPutGeofence");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPutGeofenceResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}/put-geofences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateDevicePosition operation.
     * @callback module:api/DefaultApi~batchUpdateDevicePositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateDevicePositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Uploads position update data for one or more devices to a tracker resource (up to 10 devices per batch). Amazon Location uses the data when it reports the last known device position and position history. Amazon Location retains location data for 30 days.</p> <note> <p>Position updates are handled based on the <code>PositionFiltering</code> property of the tracker. When <code>PositionFiltering</code> is set to <code>TimeBased</code>, updates are evaluated against linked geofence collections, and location data is stored at a maximum of one position per 30 second interval. If your update frequency is more often than every 30 seconds, only one update per 30 seconds is stored for each unique device ID.</p> <p>When <code>PositionFiltering</code> is set to <code>DistanceBased</code> filtering, location data is stored and evaluated against linked geofence collections only if the device has moved more than 30 m (98.4 ft).</p> <p>When <code>PositionFiltering</code> is set to <code>AccuracyBased</code> filtering, location data is stored and evaluated against linked geofence collections only if the device has moved more than the measured accuracy. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is neither stored or evaluated if the device has moved less than 15 m. If <code>PositionFiltering</code> is set to <code>AccuracyBased</code> filtering, Amazon Location uses the default value <code>{ \"Horizontal\": 0}</code> when accuracy is not provided on a <code>DevicePositionUpdate</code>.</p> </note>
     * @param {String} trackerName The name of the tracker resource to update.
     * @param {module:model/BatchUpdateDevicePositionRequest} batchUpdateDevicePositionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateDevicePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateDevicePositionResponse}
     */
    batchUpdateDevicePosition(trackerName, batchUpdateDevicePositionRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateDevicePositionRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling batchUpdateDevicePosition");
      }
      // verify the required parameter 'batchUpdateDevicePositionRequest' is set
      if (batchUpdateDevicePositionRequest === undefined || batchUpdateDevicePositionRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateDevicePositionRequest' when calling batchUpdateDevicePosition");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateDevicePositionResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateRoute operation.
     * @callback module:api/DefaultApi~calculateRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateRouteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html\">Calculates a route</a> given the following required parameters: <code>DeparturePosition</code> and <code>DestinationPosition</code>. Requires that you first <a href=\"https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html\">create a route calculator resource</a>.</p> <p>By default, a request that doesn't specify a departure time uses the best time of day to travel with the best traffic conditions when calculating the route.</p> <p>Additional options include:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html\">Specifying a departure time</a> using either <code>DepartureTime</code> or <code>DepartNow</code>. This calculates a route based on predictive traffic data at the given time. </p> <note> <p>You can't specify both <code>DepartureTime</code> and <code>DepartNow</code> in a single request. Specifying both parameters returns a validation error.</p> </note> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html\">Specifying a travel mode</a> using TravelMode sets the transportation mode used to calculate the routes. This also lets you specify additional route preferences in <code>CarModeOptions</code> if traveling by <code>Car</code>, or <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p> <note> <p>If you specify <code>walking</code> for the travel mode and your data provider is Esri, the start and destination must be within 40km.</p> </note> </li> </ul>
     * @param {String} calculatorName The name of the route calculator resource that you want to use to calculate the route. 
     * @param {module:model/CalculateRouteRequest} calculateRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~calculateRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateRouteResponse}
     */
    calculateRoute(calculatorName, calculateRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = calculateRouteRequest;
      // verify the required parameter 'calculatorName' is set
      if (calculatorName === undefined || calculatorName === null) {
        throw new Error("Missing the required parameter 'calculatorName' when calling calculateRoute");
      }
      // verify the required parameter 'calculateRouteRequest' is set
      if (calculateRouteRequest === undefined || calculateRouteRequest === null) {
        throw new Error("Missing the required parameter 'calculateRouteRequest' when calling calculateRoute");
      }

      let pathParams = {
        'CalculatorName': calculatorName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CalculateRouteResponse;
      return this.apiClient.callApi(
        '/routes/v0/calculators/{CalculatorName}/calculate/route', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateRouteMatrix operation.
     * @callback module:api/DefaultApi~calculateRouteMatrixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateRouteMatrixResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html\"> Calculates a route matrix</a> given the following required parameters: <code>DeparturePositions</code> and <code>DestinationPositions</code>. <code>CalculateRouteMatrix</code> calculates routes and returns the travel time and travel distance from each departure position to each destination position in the request. For example, given departure positions A and B, and destination positions X and Y, <code>CalculateRouteMatrix</code> will return time and distance for routes from A to X, A to Y, B to X, and B to Y (in that order). The number of results returned (and routes calculated) will be the number of <code>DeparturePositions</code> times the number of <code>DestinationPositions</code>.</p> <note> <p>Your account is charged for each route calculated, not the number of requests.</p> </note> <p>Requires that you first <a href=\"https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html\">create a route calculator resource</a>.</p> <p>By default, a request that doesn't specify a departure time uses the best time of day to travel with the best traffic conditions when calculating routes.</p> <p>Additional options include:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html\"> Specifying a departure time</a> using either <code>DepartureTime</code> or <code>DepartNow</code>. This calculates routes based on predictive traffic data at the given time. </p> <note> <p>You can't specify both <code>DepartureTime</code> and <code>DepartNow</code> in a single request. Specifying both parameters returns a validation error.</p> </note> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html\">Specifying a travel mode</a> using TravelMode sets the transportation mode used to calculate the routes. This also lets you specify additional route preferences in <code>CarModeOptions</code> if traveling by <code>Car</code>, or <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p> </li> </ul>
     * @param {String} calculatorName The name of the route calculator resource that you want to use to calculate the route matrix. 
     * @param {module:model/CalculateRouteMatrixRequest} calculateRouteMatrixRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~calculateRouteMatrixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateRouteMatrixResponse}
     */
    calculateRouteMatrix(calculatorName, calculateRouteMatrixRequest, opts, callback) {
      opts = opts || {};
      let postBody = calculateRouteMatrixRequest;
      // verify the required parameter 'calculatorName' is set
      if (calculatorName === undefined || calculatorName === null) {
        throw new Error("Missing the required parameter 'calculatorName' when calling calculateRouteMatrix");
      }
      // verify the required parameter 'calculateRouteMatrixRequest' is set
      if (calculateRouteMatrixRequest === undefined || calculateRouteMatrixRequest === null) {
        throw new Error("Missing the required parameter 'calculateRouteMatrixRequest' when calling calculateRouteMatrix");
      }

      let pathParams = {
        'CalculatorName': calculatorName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CalculateRouteMatrixResponse;
      return this.apiClient.callApi(
        '/routes/v0/calculators/{CalculatorName}/calculate/route-matrix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGeofenceCollection operation.
     * @callback module:api/DefaultApi~createGeofenceCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGeofenceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a geofence collection, which manages and stores geofences.
     * @param {module:model/CreateGeofenceCollectionRequest} createGeofenceCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createGeofenceCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGeofenceCollectionResponse}
     */
    createGeofenceCollection(createGeofenceCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGeofenceCollectionRequest;
      // verify the required parameter 'createGeofenceCollectionRequest' is set
      if (createGeofenceCollectionRequest === undefined || createGeofenceCollectionRequest === null) {
        throw new Error("Missing the required parameter 'createGeofenceCollectionRequest' when calling createGeofenceCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGeofenceCollectionResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createKey operation.
     * @callback module:api/DefaultApi~createKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an API key resource in your Amazon Web Services account, which lets you grant actions for Amazon Location resources to the API key bearer.</p> <note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">Using API keys</a>.</p> </note>
     * @param {module:model/CreateKeyRequest} createKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateKeyResponse}
     */
    createKey(createKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createKeyRequest;
      // verify the required parameter 'createKeyRequest' is set
      if (createKeyRequest === undefined || createKeyRequest === null) {
        throw new Error("Missing the required parameter 'createKeyRequest' when calling createKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateKeyResponse;
      return this.apiClient.callApi(
        '/metadata/v0/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMap operation.
     * @callback module:api/DefaultApi~createMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a map resource in your Amazon Web Services account, which provides map tiles of different styles sourced from global location data providers.</p> <note> <p>If your application is tracking or routing assets you use in your business, such as delivery vehicles or employees, you must not use Esri as your geolocation provider. See section 82 of the <a href=\"http://aws.amazon.com/service-terms\">Amazon Web Services service terms</a> for more details.</p> </note>
     * @param {module:model/CreateMapRequest} createMapRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMapResponse}
     */
    createMap(createMapRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMapRequest;
      // verify the required parameter 'createMapRequest' is set
      if (createMapRequest === undefined || createMapRequest === null) {
        throw new Error("Missing the required parameter 'createMapRequest' when calling createMap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMapResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPlaceIndex operation.
     * @callback module:api/DefaultApi~createPlaceIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePlaceIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a place index resource in your Amazon Web Services account. Use a place index resource to geocode addresses and other text queries by using the <code>SearchPlaceIndexForText</code> operation, and reverse geocode coordinates by using the <code>SearchPlaceIndexForPosition</code> operation, and enable autosuggestions by using the <code>SearchPlaceIndexForSuggestions</code> operation.</p> <note> <p>If your application is tracking or routing assets you use in your business, such as delivery vehicles or employees, you must not use Esri as your geolocation provider. See section 82 of the <a href=\"http://aws.amazon.com/service-terms\">Amazon Web Services service terms</a> for more details.</p> </note>
     * @param {module:model/CreatePlaceIndexRequest} createPlaceIndexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPlaceIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePlaceIndexResponse}
     */
    createPlaceIndex(createPlaceIndexRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPlaceIndexRequest;
      // verify the required parameter 'createPlaceIndexRequest' is set
      if (createPlaceIndexRequest === undefined || createPlaceIndexRequest === null) {
        throw new Error("Missing the required parameter 'createPlaceIndexRequest' when calling createPlaceIndex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePlaceIndexResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRouteCalculator operation.
     * @callback module:api/DefaultApi~createRouteCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRouteCalculatorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a route calculator resource in your Amazon Web Services account.</p> <p>You can send requests to a route calculator resource to estimate travel time, distance, and get directions. A route calculator sources traffic and road network data from your chosen data provider.</p> <note> <p>If your application is tracking or routing assets you use in your business, such as delivery vehicles or employees, you must not use Esri as your geolocation provider. See section 82 of the <a href=\"http://aws.amazon.com/service-terms\">Amazon Web Services service terms</a> for more details.</p> </note>
     * @param {module:model/CreateRouteCalculatorRequest} createRouteCalculatorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRouteCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRouteCalculatorResponse}
     */
    createRouteCalculator(createRouteCalculatorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRouteCalculatorRequest;
      // verify the required parameter 'createRouteCalculatorRequest' is set
      if (createRouteCalculatorRequest === undefined || createRouteCalculatorRequest === null) {
        throw new Error("Missing the required parameter 'createRouteCalculatorRequest' when calling createRouteCalculator");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRouteCalculatorResponse;
      return this.apiClient.callApi(
        '/routes/v0/calculators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTracker operation.
     * @callback module:api/DefaultApi~createTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTrackerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a tracker resource in your Amazon Web Services account, which lets you retrieve current and historical location of devices.
     * @param {module:model/CreateTrackerRequest} createTrackerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTrackerResponse}
     */
    createTracker(createTrackerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTrackerRequest;
      // verify the required parameter 'createTrackerRequest' is set
      if (createTrackerRequest === undefined || createTrackerRequest === null) {
        throw new Error("Missing the required parameter 'createTrackerRequest' when calling createTracker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTrackerResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGeofenceCollection operation.
     * @callback module:api/DefaultApi~deleteGeofenceCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a geofence collection from your Amazon Web Services account.</p> <note> <p>This operation deletes the resource permanently. If the geofence collection is the target of a tracker resource, the devices will no longer be monitored.</p> </note>
     * @param {String} collectionName The name of the geofence collection to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGeofenceCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteGeofenceCollection(collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling deleteGeofenceCollection");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKey operation.
     * @callback module:api/DefaultApi~deleteKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified API key. The API key must have been deactivated more than 90 days previously.
     * @param {String} keyName The name of the API key to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteKey(keyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling deleteKey");
      }

      let pathParams = {
        'KeyName': keyName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/metadata/v0/keys/{KeyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMap operation.
     * @callback module:api/DefaultApi~deleteMapCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a map resource from your Amazon Web Services account.</p> <note> <p>This operation deletes the resource permanently. If the map is being used in an application, the map may not render.</p> </note>
     * @param {String} mapName The name of the map resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMap(mapName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling deleteMap");
      }

      let pathParams = {
        'MapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaceIndex operation.
     * @callback module:api/DefaultApi~deletePlaceIndexCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a place index resource from your Amazon Web Services account.</p> <note> <p>This operation deletes the resource permanently.</p> </note>
     * @param {String} indexName The name of the place index resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePlaceIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePlaceIndex(indexName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling deletePlaceIndex");
      }

      let pathParams = {
        'IndexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRouteCalculator operation.
     * @callback module:api/DefaultApi~deleteRouteCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a route calculator resource from your Amazon Web Services account.</p> <note> <p>This operation deletes the resource permanently.</p> </note>
     * @param {String} calculatorName The name of the route calculator resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRouteCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRouteCalculator(calculatorName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calculatorName' is set
      if (calculatorName === undefined || calculatorName === null) {
        throw new Error("Missing the required parameter 'calculatorName' when calling deleteRouteCalculator");
      }

      let pathParams = {
        'CalculatorName': calculatorName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/routes/v0/calculators/{CalculatorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTracker operation.
     * @callback module:api/DefaultApi~deleteTrackerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a tracker resource from your Amazon Web Services account.</p> <note> <p>This operation deletes the resource permanently. If the tracker resource is in use, you may encounter an error. Make sure that the target resource isn't a dependency for your applications.</p> </note>
     * @param {String} trackerName The name of the tracker resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTracker(trackerName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling deleteTracker");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeGeofenceCollection operation.
     * @callback module:api/DefaultApi~describeGeofenceCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeGeofenceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the geofence collection details.
     * @param {String} collectionName The name of the geofence collection.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeGeofenceCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeGeofenceCollectionResponse}
     */
    describeGeofenceCollection(collectionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling describeGeofenceCollection");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeGeofenceCollectionResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeKey operation.
     * @callback module:api/DefaultApi~describeKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the API key resource details.
     * @param {String} keyName The name of the API key resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeKeyResponse}
     */
    describeKey(keyName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling describeKey");
      }

      let pathParams = {
        'KeyName': keyName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeKeyResponse;
      return this.apiClient.callApi(
        '/metadata/v0/keys/{KeyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMap operation.
     * @callback module:api/DefaultApi~describeMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the map resource details.
     * @param {String} mapName The name of the map resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMapResponse}
     */
    describeMap(mapName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling describeMap");
      }

      let pathParams = {
        'MapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeMapResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePlaceIndex operation.
     * @callback module:api/DefaultApi~describePlaceIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePlaceIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the place index resource details.
     * @param {String} indexName The name of the place index resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePlaceIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePlaceIndexResponse}
     */
    describePlaceIndex(indexName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling describePlaceIndex");
      }

      let pathParams = {
        'IndexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribePlaceIndexResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRouteCalculator operation.
     * @callback module:api/DefaultApi~describeRouteCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRouteCalculatorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the route calculator resource details.
     * @param {String} calculatorName The name of the route calculator resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRouteCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRouteCalculatorResponse}
     */
    describeRouteCalculator(calculatorName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calculatorName' is set
      if (calculatorName === undefined || calculatorName === null) {
        throw new Error("Missing the required parameter 'calculatorName' when calling describeRouteCalculator");
      }

      let pathParams = {
        'CalculatorName': calculatorName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRouteCalculatorResponse;
      return this.apiClient.callApi(
        '/routes/v0/calculators/{CalculatorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTracker operation.
     * @callback module:api/DefaultApi~describeTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTrackerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the tracker resource details.
     * @param {String} trackerName The name of the tracker resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTrackerResponse}
     */
    describeTracker(trackerName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling describeTracker");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeTrackerResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateTrackerConsumer operation.
     * @callback module:api/DefaultApi~disassociateTrackerConsumerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the association between a tracker resource and a geofence collection.</p> <note> <p>Once you unlink a tracker resource from a geofence collection, the tracker positions will no longer be automatically evaluated against geofences.</p> </note>
     * @param {String} consumerArn <p>The Amazon Resource Name (ARN) for the geofence collection to be disassociated from the tracker resource. Used when you need to specify a resource across all Amazon Web Services. </p> <ul> <li> <p>Format example: <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer</code> </p> </li> </ul>
     * @param {String} trackerName The name of the tracker resource to be dissociated from the consumer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateTrackerConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateTrackerConsumer(consumerArn, trackerName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consumerArn' is set
      if (consumerArn === undefined || consumerArn === null) {
        throw new Error("Missing the required parameter 'consumerArn' when calling disassociateTrackerConsumer");
      }
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling disassociateTrackerConsumer");
      }

      let pathParams = {
        'ConsumerArn': consumerArn,
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevicePosition operation.
     * @callback module:api/DefaultApi~getDevicePositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDevicePositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a device's most recent position according to its sample time.</p> <note> <p>Device positions are deleted after 30 days.</p> </note>
     * @param {String} deviceId The device whose position you want to retrieve.
     * @param {String} trackerName The tracker resource receiving the position update.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDevicePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDevicePositionResponse}
     */
    getDevicePosition(deviceId, trackerName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getDevicePosition");
      }
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling getDevicePosition");
      }

      let pathParams = {
        'DeviceId': deviceId,
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDevicePositionResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevicePositionHistory operation.
     * @callback module:api/DefaultApi~getDevicePositionHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDevicePositionHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the device position history from a tracker resource within a specified range of time.</p> <note> <p>Device positions are deleted after 30 days.</p> </note>
     * @param {String} deviceId The device whose position history you want to retrieve.
     * @param {String} trackerName The tracker resource receiving the request for the device position history.
     * @param {module:model/GetDevicePositionHistoryRequest} getDevicePositionHistoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getDevicePositionHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDevicePositionHistoryResponse}
     */
    getDevicePositionHistory(deviceId, trackerName, getDevicePositionHistoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDevicePositionHistoryRequest;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getDevicePositionHistory");
      }
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling getDevicePositionHistory");
      }
      // verify the required parameter 'getDevicePositionHistoryRequest' is set
      if (getDevicePositionHistoryRequest === undefined || getDevicePositionHistoryRequest === null) {
        throw new Error("Missing the required parameter 'getDevicePositionHistoryRequest' when calling getDevicePositionHistory");
      }

      let pathParams = {
        'DeviceId': deviceId,
        'TrackerName': trackerName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDevicePositionHistoryResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGeofence operation.
     * @callback module:api/DefaultApi~getGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGeofenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the geofence details from a geofence collection.
     * @param {String} collectionName The geofence collection storing the target geofence.
     * @param {String} geofenceId The geofence you're retrieving details for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGeofenceResponse}
     */
    getGeofence(collectionName, geofenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling getGeofence");
      }
      // verify the required parameter 'geofenceId' is set
      if (geofenceId === undefined || geofenceId === null) {
        throw new Error("Missing the required parameter 'geofenceId' when calling getGeofence");
      }

      let pathParams = {
        'CollectionName': collectionName,
        'GeofenceId': geofenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGeofenceResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapGlyphs operation.
     * @callback module:api/DefaultApi~getMapGlyphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMapGlyphsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves glyphs used to display labels on a map.
     * @param {String} fontStack <p>A comma-separated list of fonts to load glyphs from in order of preference. For example, <code>Noto Sans Regular, Arial Unicode</code>.</p> <p>Valid fonts stacks for <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/esri.html\">Esri</a> styles: </p> <ul> <li> <p>VectorEsriDarkGrayCanvas – <code>Ubuntu Medium Italic</code> | <code>Ubuntu Medium</code> | <code>Ubuntu Italic</code> | <code>Ubuntu Regular</code> | <code>Ubuntu Bold</code> </p> </li> <li> <p>VectorEsriLightGrayCanvas – <code>Ubuntu Italic</code> | <code>Ubuntu Regular</code> | <code>Ubuntu Light</code> | <code>Ubuntu Bold</code> </p> </li> <li> <p>VectorEsriTopographic – <code>Noto Sans Italic</code> | <code>Noto Sans Regular</code> | <code>Noto Sans Bold</code> | <code>Noto Serif Regular</code> | <code>Roboto Condensed Light Italic</code> </p> </li> <li> <p>VectorEsriStreets – <code>Arial Regular</code> | <code>Arial Italic</code> | <code>Arial Bold</code> </p> </li> <li> <p>VectorEsriNavigation – <code>Arial Regular</code> | <code>Arial Italic</code> | <code>Arial Bold</code> </p> </li> </ul> <p>Valid font stacks for <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/HERE.html\">HERE Technologies</a> styles:</p> <ul> <li> <p>VectorHereContrast – <code>Fira GO Regular</code> | <code>Fira GO Bold</code> </p> </li> <li> <p>VectorHereExplore, VectorHereExploreTruck, HybridHereExploreSatellite – <code>Fira GO Italic</code> | <code>Fira GO Map</code> | <code>Fira GO Map Bold</code> | <code>Noto Sans CJK JP Bold</code> | <code>Noto Sans CJK JP Light</code> | <code>Noto Sans CJK JP Regular</code> </p> </li> </ul> <p>Valid font stacks for <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> styles:</p> <ul> <li> <p>VectorGrabStandardLight, VectorGrabStandardDark – <code>Noto Sans Regular</code> | <code>Noto Sans Medium</code> | <code>Noto Sans Bold</code> </p> </li> </ul> <p>Valid font stacks for <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/open-data.html\">Open Data</a> styles:</p> <ul> <li> <p>VectorOpenDataStandardLight, VectorOpenDataStandardDark, VectorOpenDataVisualizationLight, VectorOpenDataVisualizationDark – <code>Amazon Ember Regular,Noto Sans Regular</code> | <code>Amazon Ember Bold,Noto Sans Bold</code> | <code>Amazon Ember Medium,Noto Sans Medium</code> | <code>Amazon Ember Regular Italic,Noto Sans Italic</code> | <code>Amazon Ember Condensed RC Regular,Noto Sans Regular</code> | <code>Amazon Ember Condensed RC Bold,Noto Sans Bold</code> | <code>Amazon Ember Regular,Noto Sans Regular,Noto Sans Arabic Regular</code> | <code>Amazon Ember Condensed RC Bold,Noto Sans Bold,Noto Sans Arabic Condensed Bold</code> | <code>Amazon Ember Bold,Noto Sans Bold,Noto Sans Arabic Bold</code> | <code>Amazon Ember Regular Italic,Noto Sans Italic,Noto Sans Arabic Regular</code> | <code>Amazon Ember Condensed RC Regular,Noto Sans Regular,Noto Sans Arabic Condensed Regular</code> | <code>Amazon Ember Medium,Noto Sans Medium,Noto Sans Arabic Medium</code> </p> </li> </ul> <note> <p>The fonts used by the Open Data map styles are combined fonts that use <code>Amazon Ember</code> for most glyphs but <code>Noto Sans</code> for glyphs unsupported by <code>Amazon Ember</code>.</p> </note>
     * @param {String} fontUnicodeRange A Unicode range of characters to download glyphs for. Each response will contain 256 characters. For example, 0–255 includes all characters from range <code>U+0000</code> to <code>00FF</code>. Must be aligned to multiples of 256.
     * @param {String} mapName The map resource associated with the glyph ﬁle.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~getMapGlyphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMapGlyphsResponse}
     */
    getMapGlyphs(fontStack, fontUnicodeRange, mapName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fontStack' is set
      if (fontStack === undefined || fontStack === null) {
        throw new Error("Missing the required parameter 'fontStack' when calling getMapGlyphs");
      }
      // verify the required parameter 'fontUnicodeRange' is set
      if (fontUnicodeRange === undefined || fontUnicodeRange === null) {
        throw new Error("Missing the required parameter 'fontUnicodeRange' when calling getMapGlyphs");
      }
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling getMapGlyphs");
      }

      let pathParams = {
        'FontStack': fontStack,
        'FontUnicodeRange': fontUnicodeRange,
        'MapName': mapName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMapGlyphsResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapSprites operation.
     * @callback module:api/DefaultApi~getMapSpritesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMapSpritesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG image paired with a JSON document describing the offsets of individual icons that will be displayed on a rendered map.
     * @param {String} fileName <p>The name of the sprite ﬁle. Use the following ﬁle names for the sprite sheet:</p> <ul> <li> <p> <code>sprites.png</code> </p> </li> <li> <p> <code>sprites@2x.png</code> for high pixel density displays</p> </li> </ul> <p>For the JSON document containing image offsets. Use the following ﬁle names:</p> <ul> <li> <p> <code>sprites.json</code> </p> </li> <li> <p> <code>sprites@2x.json</code> for high pixel density displays</p> </li> </ul>
     * @param {String} mapName The map resource associated with the sprite ﬁle.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~getMapSpritesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMapSpritesResponse}
     */
    getMapSprites(fileName, mapName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getMapSprites");
      }
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling getMapSprites");
      }

      let pathParams = {
        'FileName': fileName,
        'MapName': mapName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMapSpritesResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}/sprites/{FileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapStyleDescriptor operation.
     * @callback module:api/DefaultApi~getMapStyleDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMapStyleDescriptorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the map style descriptor from a map resource. </p> <p>The style descriptor contains speciﬁcations on how features render on a map. For example, what data to display, what order to display the data in, and the style for the data. Style descriptors follow the Mapbox Style Specification.</p>
     * @param {String} mapName The map resource to retrieve the style descriptor from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~getMapStyleDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMapStyleDescriptorResponse}
     */
    getMapStyleDescriptor(mapName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling getMapStyleDescriptor");
      }

      let pathParams = {
        'MapName': mapName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMapStyleDescriptorResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}/style-descriptor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMapTile operation.
     * @callback module:api/DefaultApi~getMapTileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMapTileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a vector data tile from the map resource. Map tiles are used by clients to render a map. they're addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level. </p> <p>The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0) will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).</p>
     * @param {String} mapName The map resource to retrieve the map tiles from.
     * @param {String} X The X axis value for the map tile.
     * @param {String} Y The Y axis value for the map tile. 
     * @param {String} Z The zoom value for the map tile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~getMapTileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMapTileResponse}
     */
    getMapTile(mapName, X, Y, Z, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling getMapTile");
      }
      // verify the required parameter 'X' is set
      if (X === undefined || X === null) {
        throw new Error("Missing the required parameter 'X' when calling getMapTile");
      }
      // verify the required parameter 'Y' is set
      if (Y === undefined || Y === null) {
        throw new Error("Missing the required parameter 'Y' when calling getMapTile");
      }
      // verify the required parameter 'Z' is set
      if (Z === undefined || Z === null) {
        throw new Error("Missing the required parameter 'Z' when calling getMapTile");
      }

      let pathParams = {
        'MapName': mapName,
        'X': X,
        'Y': Y,
        'Z': Z
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMapTileResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlace operation.
     * @callback module:api/DefaultApi~getPlaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPlaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Finds a place by its unique ID. A <code>PlaceId</code> is returned by other search operations.</p> <note> <p>A PlaceId is valid only if all of the following are the same in the original search request and the call to <code>GetPlace</code>.</p> <ul> <li> <p>Customer Amazon Web Services account</p> </li> <li> <p>Amazon Web Services Region</p> </li> <li> <p>Data provider specified in the place index resource</p> </li> </ul> </note>
     * @param {String} indexName The name of the place index resource that you want to use for the search.
     * @param {String} placeId The identifier of the place to find.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {String} [language] <p>The preferred language used to return results. The value must be a valid <a href=\"https://tools.ietf.org/search/bcp47\">BCP 47</a> language tag, for example, <code>en</code> for English.</p> <p>This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p> <p>For an example, we'll use the Greek language. You search for a location around Athens, Greece, with the <code>language</code> parameter set to <code>en</code>. The <code>city</code> in the results will most likely be returned as <code>Athens</code>.</p> <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the <code>city</code> in the results will more likely be returned as <code>Αθήνα</code>.</p> <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>
     * @param {module:api/DefaultApi~getPlaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPlaceResponse}
     */
    getPlace(indexName, placeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling getPlace");
      }
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling getPlace");
      }

      let pathParams = {
        'IndexName': indexName,
        'PlaceId': placeId
      };
      let queryParams = {
        'key': opts['key'],
        'language': opts['language']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPlaceResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}/places/{PlaceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevicePositions operation.
     * @callback module:api/DefaultApi~listDevicePositionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicePositionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A batch request to retrieve all device positions.
     * @param {String} trackerName The tracker resource containing the requested devices.
     * @param {module:model/ListDevicePositionsRequest} listDevicePositionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDevicePositionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicePositionsResponse}
     */
    listDevicePositions(trackerName, listDevicePositionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDevicePositionsRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling listDevicePositions");
      }
      // verify the required parameter 'listDevicePositionsRequest' is set
      if (listDevicePositionsRequest === undefined || listDevicePositionsRequest === null) {
        throw new Error("Missing the required parameter 'listDevicePositionsRequest' when calling listDevicePositions");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDevicePositionsResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/list-positions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGeofenceCollections operation.
     * @callback module:api/DefaultApi~listGeofenceCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGeofenceCollectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists geofence collections in your Amazon Web Services account.
     * @param {module:model/ListGeofenceCollectionsRequest} listGeofenceCollectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listGeofenceCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGeofenceCollectionsResponse}
     */
    listGeofenceCollections(listGeofenceCollectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listGeofenceCollectionsRequest;
      // verify the required parameter 'listGeofenceCollectionsRequest' is set
      if (listGeofenceCollectionsRequest === undefined || listGeofenceCollectionsRequest === null) {
        throw new Error("Missing the required parameter 'listGeofenceCollectionsRequest' when calling listGeofenceCollections");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListGeofenceCollectionsResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/list-collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGeofences operation.
     * @callback module:api/DefaultApi~listGeofencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGeofencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists geofences stored in a given geofence collection.
     * @param {String} collectionName The name of the geofence collection storing the list of geofences.
     * @param {module:model/ListGeofencesRequest} listGeofencesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listGeofencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGeofencesResponse}
     */
    listGeofences(collectionName, listGeofencesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listGeofencesRequest;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling listGeofences");
      }
      // verify the required parameter 'listGeofencesRequest' is set
      if (listGeofencesRequest === undefined || listGeofencesRequest === null) {
        throw new Error("Missing the required parameter 'listGeofencesRequest' when calling listGeofences");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListGeofencesResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}/list-geofences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKeys operation.
     * @callback module:api/DefaultApi~listKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists API key resources in your Amazon Web Services account.
     * @param {module:model/ListKeysRequest} listKeysRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListKeysResponse}
     */
    listKeys(listKeysRequest, opts, callback) {
      opts = opts || {};
      let postBody = listKeysRequest;
      // verify the required parameter 'listKeysRequest' is set
      if (listKeysRequest === undefined || listKeysRequest === null) {
        throw new Error("Missing the required parameter 'listKeysRequest' when calling listKeys");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListKeysResponse;
      return this.apiClient.callApi(
        '/metadata/v0/list-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMaps operation.
     * @callback module:api/DefaultApi~listMapsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMapsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists map resources in your Amazon Web Services account.
     * @param {module:model/ListMapsRequest} listMapsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMapsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMapsResponse}
     */
    listMaps(listMapsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMapsRequest;
      // verify the required parameter 'listMapsRequest' is set
      if (listMapsRequest === undefined || listMapsRequest === null) {
        throw new Error("Missing the required parameter 'listMapsRequest' when calling listMaps");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMapsResponse;
      return this.apiClient.callApi(
        '/maps/v0/list-maps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPlaceIndexes operation.
     * @callback module:api/DefaultApi~listPlaceIndexesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPlaceIndexesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists place index resources in your Amazon Web Services account.
     * @param {module:model/ListPlaceIndexesRequest} listPlaceIndexesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPlaceIndexesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPlaceIndexesResponse}
     */
    listPlaceIndexes(listPlaceIndexesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPlaceIndexesRequest;
      // verify the required parameter 'listPlaceIndexesRequest' is set
      if (listPlaceIndexesRequest === undefined || listPlaceIndexesRequest === null) {
        throw new Error("Missing the required parameter 'listPlaceIndexesRequest' when calling listPlaceIndexes");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPlaceIndexesResponse;
      return this.apiClient.callApi(
        '/places/v0/list-indexes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRouteCalculators operation.
     * @callback module:api/DefaultApi~listRouteCalculatorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRouteCalculatorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists route calculator resources in your Amazon Web Services account.
     * @param {module:model/ListRouteCalculatorsRequest} listRouteCalculatorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRouteCalculatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRouteCalculatorsResponse}
     */
    listRouteCalculators(listRouteCalculatorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRouteCalculatorsRequest;
      // verify the required parameter 'listRouteCalculatorsRequest' is set
      if (listRouteCalculatorsRequest === undefined || listRouteCalculatorsRequest === null) {
        throw new Error("Missing the required parameter 'listRouteCalculatorsRequest' when calling listRouteCalculators");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRouteCalculatorsResponse;
      return this.apiClient.callApi(
        '/routes/v0/list-calculators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of tags that are applied to the specified Amazon Location resource.
     * @param {String} resourceArn <p>The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.</p> <ul> <li> <p>Format example: <code>arn:aws:geo:region:account-id:resourcetype/ExampleResource</code> </p> </li> </ul>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrackerConsumers operation.
     * @callback module:api/DefaultApi~listTrackerConsumersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrackerConsumersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists geofence collections currently associated to the given tracker resource.
     * @param {String} trackerName The tracker resource whose associated geofence collections you want to list.
     * @param {module:model/ListGeofenceCollectionsRequest} listGeofenceCollectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTrackerConsumersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrackerConsumersResponse}
     */
    listTrackerConsumers(trackerName, listGeofenceCollectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listGeofenceCollectionsRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling listTrackerConsumers");
      }
      // verify the required parameter 'listGeofenceCollectionsRequest' is set
      if (listGeofenceCollectionsRequest === undefined || listGeofenceCollectionsRequest === null) {
        throw new Error("Missing the required parameter 'listGeofenceCollectionsRequest' when calling listTrackerConsumers");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTrackerConsumersResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}/list-consumers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrackers operation.
     * @callback module:api/DefaultApi~listTrackersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTrackersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists tracker resources in your Amazon Web Services account.
     * @param {module:model/ListGeofenceCollectionsRequest} listGeofenceCollectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTrackersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTrackersResponse}
     */
    listTrackers(listGeofenceCollectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listGeofenceCollectionsRequest;
      // verify the required parameter 'listGeofenceCollectionsRequest' is set
      if (listGeofenceCollectionsRequest === undefined || listGeofenceCollectionsRequest === null) {
        throw new Error("Missing the required parameter 'listGeofenceCollectionsRequest' when calling listTrackers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTrackersResponse;
      return this.apiClient.callApi(
        '/tracking/v0/list-trackers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putGeofence operation.
     * @callback module:api/DefaultApi~putGeofenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutGeofenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores a geofence geometry in a given geofence collection, or updates the geometry of an existing geofence if a geofence ID is included in the request. 
     * @param {String} collectionName The geofence collection to store the geofence in.
     * @param {String} geofenceId An identifier for the geofence. For example, <code>ExampleGeofence-1</code>.
     * @param {module:model/PutGeofenceRequest} putGeofenceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putGeofenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutGeofenceResponse}
     */
    putGeofence(collectionName, geofenceId, putGeofenceRequest, opts, callback) {
      opts = opts || {};
      let postBody = putGeofenceRequest;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling putGeofence");
      }
      // verify the required parameter 'geofenceId' is set
      if (geofenceId === undefined || geofenceId === null) {
        throw new Error("Missing the required parameter 'geofenceId' when calling putGeofence");
      }
      // verify the required parameter 'putGeofenceRequest' is set
      if (putGeofenceRequest === undefined || putGeofenceRequest === null) {
        throw new Error("Missing the required parameter 'putGeofenceRequest' when calling putGeofence");
      }

      let pathParams = {
        'CollectionName': collectionName,
        'GeofenceId': geofenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutGeofenceResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPlaceIndexForPosition operation.
     * @callback module:api/DefaultApi~searchPlaceIndexForPositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPlaceIndexForPositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse geocodes a given coordinate and returns a legible address. Allows you to search for Places or points of interest near a given position.
     * @param {String} indexName The name of the place index resource you want to use for the search.
     * @param {module:model/SearchPlaceIndexForPositionRequest} searchPlaceIndexForPositionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~searchPlaceIndexForPositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPlaceIndexForPositionResponse}
     */
    searchPlaceIndexForPosition(indexName, searchPlaceIndexForPositionRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchPlaceIndexForPositionRequest;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling searchPlaceIndexForPosition");
      }
      // verify the required parameter 'searchPlaceIndexForPositionRequest' is set
      if (searchPlaceIndexForPositionRequest === undefined || searchPlaceIndexForPositionRequest === null) {
        throw new Error("Missing the required parameter 'searchPlaceIndexForPositionRequest' when calling searchPlaceIndexForPosition");
      }

      let pathParams = {
        'IndexName': indexName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPlaceIndexForPositionResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}/search/position', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPlaceIndexForSuggestions operation.
     * @callback module:api/DefaultApi~searchPlaceIndexForSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPlaceIndexForSuggestionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates suggestions for addresses and points of interest based on partial or misspelled free-form text. This operation is also known as autocomplete, autosuggest, or fuzzy matching.</p> <p>Optional parameters let you narrow your search results by bounding box or country, or bias your search toward a specific position on the globe.</p> <note> <p>You can search for suggested place names near a specified position by using <code>BiasPosition</code>, or filter results within a bounding box by using <code>FilterBBox</code>. These parameters are mutually exclusive; using both <code>BiasPosition</code> and <code>FilterBBox</code> in the same command returns an error.</p> </note>
     * @param {String} indexName The name of the place index resource you want to use for the search.
     * @param {module:model/SearchPlaceIndexForSuggestionsRequest} searchPlaceIndexForSuggestionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~searchPlaceIndexForSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPlaceIndexForSuggestionsResponse}
     */
    searchPlaceIndexForSuggestions(indexName, searchPlaceIndexForSuggestionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchPlaceIndexForSuggestionsRequest;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling searchPlaceIndexForSuggestions");
      }
      // verify the required parameter 'searchPlaceIndexForSuggestionsRequest' is set
      if (searchPlaceIndexForSuggestionsRequest === undefined || searchPlaceIndexForSuggestionsRequest === null) {
        throw new Error("Missing the required parameter 'searchPlaceIndexForSuggestionsRequest' when calling searchPlaceIndexForSuggestions");
      }

      let pathParams = {
        'IndexName': indexName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPlaceIndexForSuggestionsResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}/search/suggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPlaceIndexForText operation.
     * @callback module:api/DefaultApi~searchPlaceIndexForTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPlaceIndexForTextResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Geocodes free-form text, such as an address, name, city, or region to allow you to search for Places or points of interest. </p> <p>Optional parameters let you narrow your search results by bounding box or country, or bias your search toward a specific position on the globe.</p> <note> <p>You can search for places near a given position using <code>BiasPosition</code>, or filter results within a bounding box using <code>FilterBBox</code>. Providing both parameters simultaneously returns an error.</p> </note> <p>Search results are returned in order of highest to lowest relevance.</p>
     * @param {String} indexName The name of the place index resource you want to use for the search.
     * @param {module:model/SearchPlaceIndexForTextRequest} searchPlaceIndexForTextRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [key] The optional <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html\">API key</a> to authorize the request.
     * @param {module:api/DefaultApi~searchPlaceIndexForTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPlaceIndexForTextResponse}
     */
    searchPlaceIndexForText(indexName, searchPlaceIndexForTextRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchPlaceIndexForTextRequest;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling searchPlaceIndexForText");
      }
      // verify the required parameter 'searchPlaceIndexForTextRequest' is set
      if (searchPlaceIndexForTextRequest === undefined || searchPlaceIndexForTextRequest === null) {
        throw new Error("Missing the required parameter 'searchPlaceIndexForTextRequest' when calling searchPlaceIndexForText");
      }

      let pathParams = {
        'IndexName': indexName
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchPlaceIndexForTextResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}/search/text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns one or more tags (key-value pairs) to the specified Amazon Location Service resource.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.</p> <p>You can use the <code>TagResource</code> operation with an Amazon Location Service resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the tags already associated with the resource. If you specify a tag key that's already associated with the resource, the new tag value that you specify replaces the previous value for that tag. </p> <p>You can associate up to 50 tags with a resource.</p>
     * @param {String} resourceArn <p>The Amazon Resource Name (ARN) of the resource whose tags you want to update.</p> <ul> <li> <p>Format example: <code>arn:aws:geo:region:account-id:resourcetype/ExampleResource</code> </p> </li> </ul>
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified Amazon Location resource.
     * @param {String} resourceArn <p>The Amazon Resource Name (ARN) of the resource from which you want to remove tags.</p> <ul> <li> <p>Format example: <code>arn:aws:geo:region:account-id:resourcetype/ExampleResource</code> </p> </li> </ul>
     * @param {Array.<String>} tagKeys The list of tag keys to remove from the specified resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGeofenceCollection operation.
     * @callback module:api/DefaultApi~updateGeofenceCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGeofenceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified properties of a given geofence collection.
     * @param {String} collectionName The name of the geofence collection to update.
     * @param {module:model/UpdateGeofenceCollectionRequest} updateGeofenceCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGeofenceCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGeofenceCollectionResponse}
     */
    updateGeofenceCollection(collectionName, updateGeofenceCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGeofenceCollectionRequest;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling updateGeofenceCollection");
      }
      // verify the required parameter 'updateGeofenceCollectionRequest' is set
      if (updateGeofenceCollectionRequest === undefined || updateGeofenceCollectionRequest === null) {
        throw new Error("Missing the required parameter 'updateGeofenceCollectionRequest' when calling updateGeofenceCollection");
      }

      let pathParams = {
        'CollectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGeofenceCollectionResponse;
      return this.apiClient.callApi(
        '/geofencing/v0/collections/{CollectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKey operation.
     * @callback module:api/DefaultApi~updateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified properties of a given API key resource.
     * @param {String} keyName The name of the API key resource to update.
     * @param {module:model/UpdateKeyRequest} updateKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateKeyResponse}
     */
    updateKey(keyName, updateKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateKeyRequest;
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling updateKey");
      }
      // verify the required parameter 'updateKeyRequest' is set
      if (updateKeyRequest === undefined || updateKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateKeyRequest' when calling updateKey");
      }

      let pathParams = {
        'KeyName': keyName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateKeyResponse;
      return this.apiClient.callApi(
        '/metadata/v0/keys/{KeyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMap operation.
     * @callback module:api/DefaultApi~updateMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified properties of a given map resource.
     * @param {String} mapName The name of the map resource to update.
     * @param {module:model/UpdateMapRequest} updateMapRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMapResponse}
     */
    updateMap(mapName, updateMapRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMapRequest;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling updateMap");
      }
      // verify the required parameter 'updateMapRequest' is set
      if (updateMapRequest === undefined || updateMapRequest === null) {
        throw new Error("Missing the required parameter 'updateMapRequest' when calling updateMap");
      }

      let pathParams = {
        'MapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMapResponse;
      return this.apiClient.callApi(
        '/maps/v0/maps/{MapName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlaceIndex operation.
     * @callback module:api/DefaultApi~updatePlaceIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePlaceIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified properties of a given place index resource.
     * @param {String} indexName The name of the place index resource to update.
     * @param {module:model/UpdatePlaceIndexRequest} updatePlaceIndexRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePlaceIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePlaceIndexResponse}
     */
    updatePlaceIndex(indexName, updatePlaceIndexRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePlaceIndexRequest;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling updatePlaceIndex");
      }
      // verify the required parameter 'updatePlaceIndexRequest' is set
      if (updatePlaceIndexRequest === undefined || updatePlaceIndexRequest === null) {
        throw new Error("Missing the required parameter 'updatePlaceIndexRequest' when calling updatePlaceIndex");
      }

      let pathParams = {
        'IndexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePlaceIndexResponse;
      return this.apiClient.callApi(
        '/places/v0/indexes/{IndexName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRouteCalculator operation.
     * @callback module:api/DefaultApi~updateRouteCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRouteCalculatorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified properties for a given route calculator resource.
     * @param {String} calculatorName The name of the route calculator resource to update.
     * @param {module:model/UpdateRouteCalculatorRequest} updateRouteCalculatorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRouteCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRouteCalculatorResponse}
     */
    updateRouteCalculator(calculatorName, updateRouteCalculatorRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRouteCalculatorRequest;
      // verify the required parameter 'calculatorName' is set
      if (calculatorName === undefined || calculatorName === null) {
        throw new Error("Missing the required parameter 'calculatorName' when calling updateRouteCalculator");
      }
      // verify the required parameter 'updateRouteCalculatorRequest' is set
      if (updateRouteCalculatorRequest === undefined || updateRouteCalculatorRequest === null) {
        throw new Error("Missing the required parameter 'updateRouteCalculatorRequest' when calling updateRouteCalculator");
      }

      let pathParams = {
        'CalculatorName': calculatorName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRouteCalculatorResponse;
      return this.apiClient.callApi(
        '/routes/v0/calculators/{CalculatorName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTracker operation.
     * @callback module:api/DefaultApi~updateTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTrackerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified properties of a given tracker resource.
     * @param {String} trackerName The name of the tracker resource to update.
     * @param {module:model/UpdateTrackerRequest} updateTrackerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTrackerResponse}
     */
    updateTracker(trackerName, updateTrackerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTrackerRequest;
      // verify the required parameter 'trackerName' is set
      if (trackerName === undefined || trackerName === null) {
        throw new Error("Missing the required parameter 'trackerName' when calling updateTracker");
      }
      // verify the required parameter 'updateTrackerRequest' is set
      if (updateTrackerRequest === undefined || updateTrackerRequest === null) {
        throw new Error("Missing the required parameter 'updateTrackerRequest' when calling updateTracker");
      }

      let pathParams = {
        'TrackerName': trackerName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTrackerResponse;
      return this.apiClient.callApi(
        '/tracking/v0/trackers/{TrackerName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
