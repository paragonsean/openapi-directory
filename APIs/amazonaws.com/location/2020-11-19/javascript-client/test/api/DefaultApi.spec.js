/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLocationService);
  }
}(this, function(expect, AmazonLocationService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLocationService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateTrackerConsumer', function() {
      it('should call associateTrackerConsumer successfully', function(done) {
        //uncomment below and update the code to test associateTrackerConsumer
        //instance.associateTrackerConsumer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeleteDevicePositionHistory', function() {
      it('should call batchDeleteDevicePositionHistory successfully', function(done) {
        //uncomment below and update the code to test batchDeleteDevicePositionHistory
        //instance.batchDeleteDevicePositionHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeleteGeofence', function() {
      it('should call batchDeleteGeofence successfully', function(done) {
        //uncomment below and update the code to test batchDeleteGeofence
        //instance.batchDeleteGeofence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchEvaluateGeofences', function() {
      it('should call batchEvaluateGeofences successfully', function(done) {
        //uncomment below and update the code to test batchEvaluateGeofences
        //instance.batchEvaluateGeofences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetDevicePosition', function() {
      it('should call batchGetDevicePosition successfully', function(done) {
        //uncomment below and update the code to test batchGetDevicePosition
        //instance.batchGetDevicePosition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchPutGeofence', function() {
      it('should call batchPutGeofence successfully', function(done) {
        //uncomment below and update the code to test batchPutGeofence
        //instance.batchPutGeofence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateDevicePosition', function() {
      it('should call batchUpdateDevicePosition successfully', function(done) {
        //uncomment below and update the code to test batchUpdateDevicePosition
        //instance.batchUpdateDevicePosition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateRoute', function() {
      it('should call calculateRoute successfully', function(done) {
        //uncomment below and update the code to test calculateRoute
        //instance.calculateRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateRouteMatrix', function() {
      it('should call calculateRouteMatrix successfully', function(done) {
        //uncomment below and update the code to test calculateRouteMatrix
        //instance.calculateRouteMatrix(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGeofenceCollection', function() {
      it('should call createGeofenceCollection successfully', function(done) {
        //uncomment below and update the code to test createGeofenceCollection
        //instance.createGeofenceCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKey', function() {
      it('should call createKey successfully', function(done) {
        //uncomment below and update the code to test createKey
        //instance.createKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMap', function() {
      it('should call createMap successfully', function(done) {
        //uncomment below and update the code to test createMap
        //instance.createMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPlaceIndex', function() {
      it('should call createPlaceIndex successfully', function(done) {
        //uncomment below and update the code to test createPlaceIndex
        //instance.createPlaceIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRouteCalculator', function() {
      it('should call createRouteCalculator successfully', function(done) {
        //uncomment below and update the code to test createRouteCalculator
        //instance.createRouteCalculator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTracker', function() {
      it('should call createTracker successfully', function(done) {
        //uncomment below and update the code to test createTracker
        //instance.createTracker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGeofenceCollection', function() {
      it('should call deleteGeofenceCollection successfully', function(done) {
        //uncomment below and update the code to test deleteGeofenceCollection
        //instance.deleteGeofenceCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKey', function() {
      it('should call deleteKey successfully', function(done) {
        //uncomment below and update the code to test deleteKey
        //instance.deleteKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMap', function() {
      it('should call deleteMap successfully', function(done) {
        //uncomment below and update the code to test deleteMap
        //instance.deleteMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePlaceIndex', function() {
      it('should call deletePlaceIndex successfully', function(done) {
        //uncomment below and update the code to test deletePlaceIndex
        //instance.deletePlaceIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRouteCalculator', function() {
      it('should call deleteRouteCalculator successfully', function(done) {
        //uncomment below and update the code to test deleteRouteCalculator
        //instance.deleteRouteCalculator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTracker', function() {
      it('should call deleteTracker successfully', function(done) {
        //uncomment below and update the code to test deleteTracker
        //instance.deleteTracker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGeofenceCollection', function() {
      it('should call describeGeofenceCollection successfully', function(done) {
        //uncomment below and update the code to test describeGeofenceCollection
        //instance.describeGeofenceCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeKey', function() {
      it('should call describeKey successfully', function(done) {
        //uncomment below and update the code to test describeKey
        //instance.describeKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMap', function() {
      it('should call describeMap successfully', function(done) {
        //uncomment below and update the code to test describeMap
        //instance.describeMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePlaceIndex', function() {
      it('should call describePlaceIndex successfully', function(done) {
        //uncomment below and update the code to test describePlaceIndex
        //instance.describePlaceIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRouteCalculator', function() {
      it('should call describeRouteCalculator successfully', function(done) {
        //uncomment below and update the code to test describeRouteCalculator
        //instance.describeRouteCalculator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTracker', function() {
      it('should call describeTracker successfully', function(done) {
        //uncomment below and update the code to test describeTracker
        //instance.describeTracker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateTrackerConsumer', function() {
      it('should call disassociateTrackerConsumer successfully', function(done) {
        //uncomment below and update the code to test disassociateTrackerConsumer
        //instance.disassociateTrackerConsumer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDevicePosition', function() {
      it('should call getDevicePosition successfully', function(done) {
        //uncomment below and update the code to test getDevicePosition
        //instance.getDevicePosition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDevicePositionHistory', function() {
      it('should call getDevicePositionHistory successfully', function(done) {
        //uncomment below and update the code to test getDevicePositionHistory
        //instance.getDevicePositionHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGeofence', function() {
      it('should call getGeofence successfully', function(done) {
        //uncomment below and update the code to test getGeofence
        //instance.getGeofence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapGlyphs', function() {
      it('should call getMapGlyphs successfully', function(done) {
        //uncomment below and update the code to test getMapGlyphs
        //instance.getMapGlyphs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapSprites', function() {
      it('should call getMapSprites successfully', function(done) {
        //uncomment below and update the code to test getMapSprites
        //instance.getMapSprites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapStyleDescriptor', function() {
      it('should call getMapStyleDescriptor successfully', function(done) {
        //uncomment below and update the code to test getMapStyleDescriptor
        //instance.getMapStyleDescriptor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMapTile', function() {
      it('should call getMapTile successfully', function(done) {
        //uncomment below and update the code to test getMapTile
        //instance.getMapTile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlace', function() {
      it('should call getPlace successfully', function(done) {
        //uncomment below and update the code to test getPlace
        //instance.getPlace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDevicePositions', function() {
      it('should call listDevicePositions successfully', function(done) {
        //uncomment below and update the code to test listDevicePositions
        //instance.listDevicePositions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGeofenceCollections', function() {
      it('should call listGeofenceCollections successfully', function(done) {
        //uncomment below and update the code to test listGeofenceCollections
        //instance.listGeofenceCollections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGeofences', function() {
      it('should call listGeofences successfully', function(done) {
        //uncomment below and update the code to test listGeofences
        //instance.listGeofences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listKeys', function() {
      it('should call listKeys successfully', function(done) {
        //uncomment below and update the code to test listKeys
        //instance.listKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMaps', function() {
      it('should call listMaps successfully', function(done) {
        //uncomment below and update the code to test listMaps
        //instance.listMaps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPlaceIndexes', function() {
      it('should call listPlaceIndexes successfully', function(done) {
        //uncomment below and update the code to test listPlaceIndexes
        //instance.listPlaceIndexes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRouteCalculators', function() {
      it('should call listRouteCalculators successfully', function(done) {
        //uncomment below and update the code to test listRouteCalculators
        //instance.listRouteCalculators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrackerConsumers', function() {
      it('should call listTrackerConsumers successfully', function(done) {
        //uncomment below and update the code to test listTrackerConsumers
        //instance.listTrackerConsumers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrackers', function() {
      it('should call listTrackers successfully', function(done) {
        //uncomment below and update the code to test listTrackers
        //instance.listTrackers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putGeofence', function() {
      it('should call putGeofence successfully', function(done) {
        //uncomment below and update the code to test putGeofence
        //instance.putGeofence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchPlaceIndexForPosition', function() {
      it('should call searchPlaceIndexForPosition successfully', function(done) {
        //uncomment below and update the code to test searchPlaceIndexForPosition
        //instance.searchPlaceIndexForPosition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchPlaceIndexForSuggestions', function() {
      it('should call searchPlaceIndexForSuggestions successfully', function(done) {
        //uncomment below and update the code to test searchPlaceIndexForSuggestions
        //instance.searchPlaceIndexForSuggestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchPlaceIndexForText', function() {
      it('should call searchPlaceIndexForText successfully', function(done) {
        //uncomment below and update the code to test searchPlaceIndexForText
        //instance.searchPlaceIndexForText(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGeofenceCollection', function() {
      it('should call updateGeofenceCollection successfully', function(done) {
        //uncomment below and update the code to test updateGeofenceCollection
        //instance.updateGeofenceCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKey', function() {
      it('should call updateKey successfully', function(done) {
        //uncomment below and update the code to test updateKey
        //instance.updateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMap', function() {
      it('should call updateMap successfully', function(done) {
        //uncomment below and update the code to test updateMap
        //instance.updateMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePlaceIndex', function() {
      it('should call updatePlaceIndex successfully', function(done) {
        //uncomment below and update the code to test updatePlaceIndex
        //instance.updatePlaceIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRouteCalculator', function() {
      it('should call updateRouteCalculator successfully', function(done) {
        //uncomment below and update the code to test updateRouteCalculator
        //instance.updateRouteCalculator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTracker', function() {
      it('should call updateTracker successfully', function(done) {
        //uncomment below and update the code to test updateTracker
        //instance.updateTracker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
