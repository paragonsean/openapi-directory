# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distance_unit import DistanceUnit
from openapi_server import util


class CalculateRouteMatrixResponseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: str=None, distance_unit: DistanceUnit=None, error_count: int=None, route_count: int=None):
        """CalculateRouteMatrixResponseSummary - a model defined in OpenAPI

        :param data_source: The data_source of this CalculateRouteMatrixResponseSummary.
        :param distance_unit: The distance_unit of this CalculateRouteMatrixResponseSummary.
        :param error_count: The error_count of this CalculateRouteMatrixResponseSummary.
        :param route_count: The route_count of this CalculateRouteMatrixResponseSummary.
        """
        self.openapi_types = {
            'data_source': str,
            'distance_unit': DistanceUnit,
            'error_count': int,
            'route_count': int
        }

        self.attribute_map = {
            'data_source': 'DataSource',
            'distance_unit': 'DistanceUnit',
            'error_count': 'ErrorCount',
            'route_count': 'RouteCount'
        }

        self._data_source = data_source
        self._distance_unit = distance_unit
        self._error_count = error_count
        self._route_count = route_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteMatrixResponseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRouteMatrixResponse_Summary of this CalculateRouteMatrixResponseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this CalculateRouteMatrixResponseSummary.


        :return: The data_source of this CalculateRouteMatrixResponseSummary.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this CalculateRouteMatrixResponseSummary.


        :param data_source: The data_source of this CalculateRouteMatrixResponseSummary.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def distance_unit(self):
        """Gets the distance_unit of this CalculateRouteMatrixResponseSummary.


        :return: The distance_unit of this CalculateRouteMatrixResponseSummary.
        :rtype: DistanceUnit
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this CalculateRouteMatrixResponseSummary.


        :param distance_unit: The distance_unit of this CalculateRouteMatrixResponseSummary.
        :type distance_unit: DistanceUnit
        """
        if distance_unit is None:
            raise ValueError("Invalid value for `distance_unit`, must not be `None`")

        self._distance_unit = distance_unit

    @property
    def error_count(self):
        """Gets the error_count of this CalculateRouteMatrixResponseSummary.


        :return: The error_count of this CalculateRouteMatrixResponseSummary.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this CalculateRouteMatrixResponseSummary.


        :param error_count: The error_count of this CalculateRouteMatrixResponseSummary.
        :type error_count: int
        """
        if error_count is None:
            raise ValueError("Invalid value for `error_count`, must not be `None`")

        self._error_count = error_count

    @property
    def route_count(self):
        """Gets the route_count of this CalculateRouteMatrixResponseSummary.


        :return: The route_count of this CalculateRouteMatrixResponseSummary.
        :rtype: int
        """
        return self._route_count

    @route_count.setter
    def route_count(self, route_count):
        """Sets the route_count of this CalculateRouteMatrixResponseSummary.


        :param route_count: The route_count of this CalculateRouteMatrixResponseSummary.
        :type route_count: int
        """
        if route_count is None:
            raise ValueError("Invalid value for `route_count`, must not be `None`")

        self._route_count = route_count
