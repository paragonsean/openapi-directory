# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_map_response_configuration import DescribeMapResponseConfiguration
from openapi_server.models.pricing_plan import PricingPlan
from openapi_server import util


class DescribeMapResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: DescribeMapResponseConfiguration=None, create_time: datetime=None, data_source: str=None, description: str=None, map_arn: str=None, map_name: str=None, pricing_plan: PricingPlan=None, tags: Dict=None, update_time: datetime=None):
        """DescribeMapResponse - a model defined in OpenAPI

        :param configuration: The configuration of this DescribeMapResponse.
        :param create_time: The create_time of this DescribeMapResponse.
        :param data_source: The data_source of this DescribeMapResponse.
        :param description: The description of this DescribeMapResponse.
        :param map_arn: The map_arn of this DescribeMapResponse.
        :param map_name: The map_name of this DescribeMapResponse.
        :param pricing_plan: The pricing_plan of this DescribeMapResponse.
        :param tags: The tags of this DescribeMapResponse.
        :param update_time: The update_time of this DescribeMapResponse.
        """
        self.openapi_types = {
            'configuration': DescribeMapResponseConfiguration,
            'create_time': datetime,
            'data_source': str,
            'description': str,
            'map_arn': str,
            'map_name': str,
            'pricing_plan': PricingPlan,
            'tags': Dict,
            'update_time': datetime
        }

        self.attribute_map = {
            'configuration': 'Configuration',
            'create_time': 'CreateTime',
            'data_source': 'DataSource',
            'description': 'Description',
            'map_arn': 'MapArn',
            'map_name': 'MapName',
            'pricing_plan': 'PricingPlan',
            'tags': 'Tags',
            'update_time': 'UpdateTime'
        }

        self._configuration = configuration
        self._create_time = create_time
        self._data_source = data_source
        self._description = description
        self._map_arn = map_arn
        self._map_name = map_name
        self._pricing_plan = pricing_plan
        self._tags = tags
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeMapResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeMapResponse of this DescribeMapResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this DescribeMapResponse.


        :return: The configuration of this DescribeMapResponse.
        :rtype: DescribeMapResponseConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this DescribeMapResponse.


        :param configuration: The configuration of this DescribeMapResponse.
        :type configuration: DescribeMapResponseConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def create_time(self):
        """Gets the create_time of this DescribeMapResponse.


        :return: The create_time of this DescribeMapResponse.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DescribeMapResponse.


        :param create_time: The create_time of this DescribeMapResponse.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def data_source(self):
        """Gets the data_source of this DescribeMapResponse.


        :return: The data_source of this DescribeMapResponse.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this DescribeMapResponse.


        :param data_source: The data_source of this DescribeMapResponse.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def description(self):
        """Gets the description of this DescribeMapResponse.


        :return: The description of this DescribeMapResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeMapResponse.


        :param description: The description of this DescribeMapResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def map_arn(self):
        """Gets the map_arn of this DescribeMapResponse.


        :return: The map_arn of this DescribeMapResponse.
        :rtype: str
        """
        return self._map_arn

    @map_arn.setter
    def map_arn(self, map_arn):
        """Sets the map_arn of this DescribeMapResponse.


        :param map_arn: The map_arn of this DescribeMapResponse.
        :type map_arn: str
        """
        if map_arn is None:
            raise ValueError("Invalid value for `map_arn`, must not be `None`")

        self._map_arn = map_arn

    @property
    def map_name(self):
        """Gets the map_name of this DescribeMapResponse.


        :return: The map_name of this DescribeMapResponse.
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name):
        """Sets the map_name of this DescribeMapResponse.


        :param map_name: The map_name of this DescribeMapResponse.
        :type map_name: str
        """
        if map_name is None:
            raise ValueError("Invalid value for `map_name`, must not be `None`")

        self._map_name = map_name

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this DescribeMapResponse.


        :return: The pricing_plan of this DescribeMapResponse.
        :rtype: PricingPlan
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this DescribeMapResponse.


        :param pricing_plan: The pricing_plan of this DescribeMapResponse.
        :type pricing_plan: PricingPlan
        """

        self._pricing_plan = pricing_plan

    @property
    def tags(self):
        """Gets the tags of this DescribeMapResponse.


        :return: The tags of this DescribeMapResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeMapResponse.


        :param tags: The tags of this DescribeMapResponse.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def update_time(self):
        """Gets the update_time of this DescribeMapResponse.


        :return: The update_time of this DescribeMapResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DescribeMapResponse.


        :param update_time: The update_time of this DescribeMapResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
