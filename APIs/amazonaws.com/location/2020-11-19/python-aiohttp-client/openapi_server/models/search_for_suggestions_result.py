# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchForSuggestionsResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List=None, place_id: str=None, supplemental_categories: List=None, text: str=None):
        """SearchForSuggestionsResult - a model defined in OpenAPI

        :param categories: The categories of this SearchForSuggestionsResult.
        :param place_id: The place_id of this SearchForSuggestionsResult.
        :param supplemental_categories: The supplemental_categories of this SearchForSuggestionsResult.
        :param text: The text of this SearchForSuggestionsResult.
        """
        self.openapi_types = {
            'categories': List,
            'place_id': str,
            'supplemental_categories': List,
            'text': str
        }

        self.attribute_map = {
            'categories': 'Categories',
            'place_id': 'PlaceId',
            'supplemental_categories': 'SupplementalCategories',
            'text': 'Text'
        }

        self._categories = categories
        self._place_id = place_id
        self._supplemental_categories = supplemental_categories
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchForSuggestionsResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchForSuggestionsResult of this SearchForSuggestionsResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this SearchForSuggestionsResult.


        :return: The categories of this SearchForSuggestionsResult.
        :rtype: List
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this SearchForSuggestionsResult.


        :param categories: The categories of this SearchForSuggestionsResult.
        :type categories: List
        """

        self._categories = categories

    @property
    def place_id(self):
        """Gets the place_id of this SearchForSuggestionsResult.


        :return: The place_id of this SearchForSuggestionsResult.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this SearchForSuggestionsResult.


        :param place_id: The place_id of this SearchForSuggestionsResult.
        :type place_id: str
        """

        self._place_id = place_id

    @property
    def supplemental_categories(self):
        """Gets the supplemental_categories of this SearchForSuggestionsResult.


        :return: The supplemental_categories of this SearchForSuggestionsResult.
        :rtype: List
        """
        return self._supplemental_categories

    @supplemental_categories.setter
    def supplemental_categories(self, supplemental_categories):
        """Sets the supplemental_categories of this SearchForSuggestionsResult.


        :param supplemental_categories: The supplemental_categories of this SearchForSuggestionsResult.
        :type supplemental_categories: List
        """

        self._supplemental_categories = supplemental_categories

    @property
    def text(self):
        """Gets the text of this SearchForSuggestionsResult.


        :return: The text of this SearchForSuggestionsResult.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SearchForSuggestionsResult.


        :param text: The text of this SearchForSuggestionsResult.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
