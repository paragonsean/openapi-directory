# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_for_position_result_place import SearchForPositionResultPlace
from openapi_server import util


class SearchForPositionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: float=None, place: SearchForPositionResultPlace=None, place_id: str=None):
        """SearchForPositionResult - a model defined in OpenAPI

        :param distance: The distance of this SearchForPositionResult.
        :param place: The place of this SearchForPositionResult.
        :param place_id: The place_id of this SearchForPositionResult.
        """
        self.openapi_types = {
            'distance': float,
            'place': SearchForPositionResultPlace,
            'place_id': str
        }

        self.attribute_map = {
            'distance': 'Distance',
            'place': 'Place',
            'place_id': 'PlaceId'
        }

        self._distance = distance
        self._place = place
        self._place_id = place_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchForPositionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchForPositionResult of this SearchForPositionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this SearchForPositionResult.


        :return: The distance of this SearchForPositionResult.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this SearchForPositionResult.


        :param distance: The distance of this SearchForPositionResult.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def place(self):
        """Gets the place of this SearchForPositionResult.


        :return: The place of this SearchForPositionResult.
        :rtype: SearchForPositionResultPlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this SearchForPositionResult.


        :param place: The place of this SearchForPositionResult.
        :type place: SearchForPositionResultPlace
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")

        self._place = place

    @property
    def place_id(self):
        """Gets the place_id of this SearchForPositionResult.


        :return: The place_id of this SearchForPositionResult.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this SearchForPositionResult.


        :param place_id: The place_id of this SearchForPositionResult.
        :type place_id: str
        """

        self._place_id = place_id
