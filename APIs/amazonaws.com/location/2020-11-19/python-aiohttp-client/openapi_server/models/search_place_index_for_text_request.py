# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchPlaceIndexForTextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bias_position: List[float]=None, filter_b_box: List[float]=None, filter_categories: List[str]=None, filter_countries: List[str]=None, language: str=None, max_results: int=None, text: str=None):
        """SearchPlaceIndexForTextRequest - a model defined in OpenAPI

        :param bias_position: The bias_position of this SearchPlaceIndexForTextRequest.
        :param filter_b_box: The filter_b_box of this SearchPlaceIndexForTextRequest.
        :param filter_categories: The filter_categories of this SearchPlaceIndexForTextRequest.
        :param filter_countries: The filter_countries of this SearchPlaceIndexForTextRequest.
        :param language: The language of this SearchPlaceIndexForTextRequest.
        :param max_results: The max_results of this SearchPlaceIndexForTextRequest.
        :param text: The text of this SearchPlaceIndexForTextRequest.
        """
        self.openapi_types = {
            'bias_position': List[float],
            'filter_b_box': List[float],
            'filter_categories': List[str],
            'filter_countries': List[str],
            'language': str,
            'max_results': int,
            'text': str
        }

        self.attribute_map = {
            'bias_position': 'BiasPosition',
            'filter_b_box': 'FilterBBox',
            'filter_categories': 'FilterCategories',
            'filter_countries': 'FilterCountries',
            'language': 'Language',
            'max_results': 'MaxResults',
            'text': 'Text'
        }

        self._bias_position = bias_position
        self._filter_b_box = filter_b_box
        self._filter_categories = filter_categories
        self._filter_countries = filter_countries
        self._language = language
        self._max_results = max_results
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchPlaceIndexForTextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchPlaceIndexForText_request of this SearchPlaceIndexForTextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bias_position(self):
        """Gets the bias_position of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter that indicates a preference for places that are closer to a specified position.</p> <p> If provided, this parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p> <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p> <note> <p> <code>BiasPosition</code> and <code>FilterBBox</code> are mutually exclusive. Specifying both options results in an error. </p> </note>

        :return: The bias_position of this SearchPlaceIndexForTextRequest.
        :rtype: List[float]
        """
        return self._bias_position

    @bias_position.setter
    def bias_position(self, bias_position):
        """Sets the bias_position of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter that indicates a preference for places that are closer to a specified position.</p> <p> If provided, this parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p> <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p> <note> <p> <code>BiasPosition</code> and <code>FilterBBox</code> are mutually exclusive. Specifying both options results in an error. </p> </note>

        :param bias_position: The bias_position of this SearchPlaceIndexForTextRequest.
        :type bias_position: List[float]
        """
        if bias_position is not None and len(bias_position) > 2:
            raise ValueError("Invalid value for `bias_position`, number of items must be less than or equal to `2`")
        if bias_position is not None and len(bias_position) < 2:
            raise ValueError("Invalid value for `bias_position`, number of items must be greater than or equal to `2`")

        self._bias_position = bias_position

    @property
    def filter_b_box(self):
        """Gets the filter_b_box of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter that limits the search results by returning only places that are within the provided bounding box.</p> <p> If provided, this parameter must contain a total of four consecutive numbers in two pairs. The first pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the southwest corner of the bounding box; the second pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the northeast corner of the bounding box.</p> <p>For example, <code>[-12.7935, -37.4835, -12.0684, -36.9542]</code> represents a bounding box where the southwest corner has longitude <code>-12.7935</code> and latitude <code>-37.4835</code>, and the northeast corner has longitude <code>-12.0684</code> and latitude <code>-36.9542</code>.</p> <note> <p> <code>FilterBBox</code> and <code>BiasPosition</code> are mutually exclusive. Specifying both options results in an error. </p> </note>

        :return: The filter_b_box of this SearchPlaceIndexForTextRequest.
        :rtype: List[float]
        """
        return self._filter_b_box

    @filter_b_box.setter
    def filter_b_box(self, filter_b_box):
        """Sets the filter_b_box of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter that limits the search results by returning only places that are within the provided bounding box.</p> <p> If provided, this parameter must contain a total of four consecutive numbers in two pairs. The first pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the southwest corner of the bounding box; the second pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the northeast corner of the bounding box.</p> <p>For example, <code>[-12.7935, -37.4835, -12.0684, -36.9542]</code> represents a bounding box where the southwest corner has longitude <code>-12.7935</code> and latitude <code>-37.4835</code>, and the northeast corner has longitude <code>-12.0684</code> and latitude <code>-36.9542</code>.</p> <note> <p> <code>FilterBBox</code> and <code>BiasPosition</code> are mutually exclusive. Specifying both options results in an error. </p> </note>

        :param filter_b_box: The filter_b_box of this SearchPlaceIndexForTextRequest.
        :type filter_b_box: List[float]
        """
        if filter_b_box is not None and len(filter_b_box) > 4:
            raise ValueError("Invalid value for `filter_b_box`, number of items must be less than or equal to `4`")
        if filter_b_box is not None and len(filter_b_box) < 4:
            raise ValueError("Invalid value for `filter_b_box`, number of items must be greater than or equal to `4`")

        self._filter_b_box = filter_b_box

    @property
    def filter_categories(self):
        """Gets the filter_categories of this SearchPlaceIndexForTextRequest.

        <p>A list of one or more Amazon Location categories to filter the returned places. If you include more than one category, the results will include results that match <i>any</i> of the categories listed.</p> <p>For more information about using categories, including a list of Amazon Location categories, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/category-filtering.html\">Categories and filtering</a>, in the <i>Amazon Location Service Developer Guide</i>.</p>

        :return: The filter_categories of this SearchPlaceIndexForTextRequest.
        :rtype: List[str]
        """
        return self._filter_categories

    @filter_categories.setter
    def filter_categories(self, filter_categories):
        """Sets the filter_categories of this SearchPlaceIndexForTextRequest.

        <p>A list of one or more Amazon Location categories to filter the returned places. If you include more than one category, the results will include results that match <i>any</i> of the categories listed.</p> <p>For more information about using categories, including a list of Amazon Location categories, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/category-filtering.html\">Categories and filtering</a>, in the <i>Amazon Location Service Developer Guide</i>.</p>

        :param filter_categories: The filter_categories of this SearchPlaceIndexForTextRequest.
        :type filter_categories: List[str]
        """
        if filter_categories is not None and len(filter_categories) > 5:
            raise ValueError("Invalid value for `filter_categories`, number of items must be less than or equal to `5`")
        if filter_categories is not None and len(filter_categories) < 1:
            raise ValueError("Invalid value for `filter_categories`, number of items must be greater than or equal to `1`")

        self._filter_categories = filter_categories

    @property
    def filter_countries(self):
        """Gets the filter_countries of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter that limits the search results by returning only places that are in a specified list of countries.</p> <ul> <li> <p>Valid values include <a href=\"https://www.iso.org/iso-3166-country-codes.html\">ISO 3166</a> 3-digit country codes. For example, Australia uses three upper-case characters: <code>AUS</code>.</p> </li> </ul>

        :return: The filter_countries of this SearchPlaceIndexForTextRequest.
        :rtype: List[str]
        """
        return self._filter_countries

    @filter_countries.setter
    def filter_countries(self, filter_countries):
        """Sets the filter_countries of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter that limits the search results by returning only places that are in a specified list of countries.</p> <ul> <li> <p>Valid values include <a href=\"https://www.iso.org/iso-3166-country-codes.html\">ISO 3166</a> 3-digit country codes. For example, Australia uses three upper-case characters: <code>AUS</code>.</p> </li> </ul>

        :param filter_countries: The filter_countries of this SearchPlaceIndexForTextRequest.
        :type filter_countries: List[str]
        """
        if filter_countries is not None and len(filter_countries) > 100:
            raise ValueError("Invalid value for `filter_countries`, number of items must be less than or equal to `100`")
        if filter_countries is not None and len(filter_countries) < 1:
            raise ValueError("Invalid value for `filter_countries`, number of items must be greater than or equal to `1`")

        self._filter_countries = filter_countries

    @property
    def language(self):
        """Gets the language of this SearchPlaceIndexForTextRequest.

        <p>The preferred language used to return results. The value must be a valid <a href=\"https://tools.ietf.org/search/bcp47\">BCP 47</a> language tag, for example, <code>en</code> for English.</p> <p>This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p> <p>For an example, we'll use the Greek language. You search for <code>Athens, Greece</code>, with the <code>language</code> parameter set to <code>en</code>. The result found will most likely be returned as <code>Athens</code>.</p> <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the result found will more likely be returned as <code>Αθήνα</code>.</p> <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>

        :return: The language of this SearchPlaceIndexForTextRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SearchPlaceIndexForTextRequest.

        <p>The preferred language used to return results. The value must be a valid <a href=\"https://tools.ietf.org/search/bcp47\">BCP 47</a> language tag, for example, <code>en</code> for English.</p> <p>This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p> <p>For an example, we'll use the Greek language. You search for <code>Athens, Greece</code>, with the <code>language</code> parameter set to <code>en</code>. The result found will most likely be returned as <code>Athens</code>.</p> <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the result found will more likely be returned as <code>Αθήνα</code>.</p> <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>

        :param language: The language of this SearchPlaceIndexForTextRequest.
        :type language: str
        """
        if language is not None and len(language) > 35:
            raise ValueError("Invalid value for `language`, length must be less than or equal to `35`")
        if language is not None and len(language) < 2:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `2`")

        self._language = language

    @property
    def max_results(self):
        """Gets the max_results of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter. The maximum number of results returned per request. </p> <p>The default: <code>50</code> </p>

        :return: The max_results of this SearchPlaceIndexForTextRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchPlaceIndexForTextRequest.

        <p>An optional parameter. The maximum number of results returned per request. </p> <p>The default: <code>50</code> </p>

        :param max_results: The max_results of this SearchPlaceIndexForTextRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def text(self):
        """Gets the text of this SearchPlaceIndexForTextRequest.

        The address, name, city, or region to be used in the search in free-form text format. For example, <code>123 Any Street</code>.

        :return: The text of this SearchPlaceIndexForTextRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SearchPlaceIndexForTextRequest.

        The address, name, city, or region to be used in the search in free-form text format. For example, <code>123 Any Street</code>.

        :param text: The text of this SearchPlaceIndexForTextRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")
        if text is not None and len(text) > 200:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `200`")
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")

        self._text = text
