# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_place_index_for_suggestions_response_summary import SearchPlaceIndexForSuggestionsResponseSummary
from openapi_server import util


class SearchPlaceIndexForSuggestionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results: List=None, summary: SearchPlaceIndexForSuggestionsResponseSummary=None):
        """SearchPlaceIndexForSuggestionsResponse - a model defined in OpenAPI

        :param results: The results of this SearchPlaceIndexForSuggestionsResponse.
        :param summary: The summary of this SearchPlaceIndexForSuggestionsResponse.
        """
        self.openapi_types = {
            'results': List,
            'summary': SearchPlaceIndexForSuggestionsResponseSummary
        }

        self.attribute_map = {
            'results': 'Results',
            'summary': 'Summary'
        }

        self._results = results
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchPlaceIndexForSuggestionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchPlaceIndexForSuggestionsResponse of this SearchPlaceIndexForSuggestionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self):
        """Gets the results of this SearchPlaceIndexForSuggestionsResponse.


        :return: The results of this SearchPlaceIndexForSuggestionsResponse.
        :rtype: List
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this SearchPlaceIndexForSuggestionsResponse.


        :param results: The results of this SearchPlaceIndexForSuggestionsResponse.
        :type results: List
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def summary(self):
        """Gets the summary of this SearchPlaceIndexForSuggestionsResponse.


        :return: The summary of this SearchPlaceIndexForSuggestionsResponse.
        :rtype: SearchPlaceIndexForSuggestionsResponseSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SearchPlaceIndexForSuggestionsResponse.


        :param summary: The summary of this SearchPlaceIndexForSuggestionsResponse.
        :type summary: SearchPlaceIndexForSuggestionsResponseSummary
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary
