# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePlaceIndexResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, index_arn: str=None, index_name: str=None):
        """CreatePlaceIndexResponse - a model defined in OpenAPI

        :param create_time: The create_time of this CreatePlaceIndexResponse.
        :param index_arn: The index_arn of this CreatePlaceIndexResponse.
        :param index_name: The index_name of this CreatePlaceIndexResponse.
        """
        self.openapi_types = {
            'create_time': datetime,
            'index_arn': str,
            'index_name': str
        }

        self.attribute_map = {
            'create_time': 'CreateTime',
            'index_arn': 'IndexArn',
            'index_name': 'IndexName'
        }

        self._create_time = create_time
        self._index_arn = index_arn
        self._index_name = index_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePlaceIndexResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePlaceIndexResponse of this CreatePlaceIndexResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this CreatePlaceIndexResponse.


        :return: The create_time of this CreatePlaceIndexResponse.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CreatePlaceIndexResponse.


        :param create_time: The create_time of this CreatePlaceIndexResponse.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def index_arn(self):
        """Gets the index_arn of this CreatePlaceIndexResponse.


        :return: The index_arn of this CreatePlaceIndexResponse.
        :rtype: str
        """
        return self._index_arn

    @index_arn.setter
    def index_arn(self, index_arn):
        """Sets the index_arn of this CreatePlaceIndexResponse.


        :param index_arn: The index_arn of this CreatePlaceIndexResponse.
        :type index_arn: str
        """
        if index_arn is None:
            raise ValueError("Invalid value for `index_arn`, must not be `None`")

        self._index_arn = index_arn

    @property
    def index_name(self):
        """Gets the index_name of this CreatePlaceIndexResponse.


        :return: The index_name of this CreatePlaceIndexResponse.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this CreatePlaceIndexResponse.


        :param index_name: The index_name of this CreatePlaceIndexResponse.
        :type index_name: str
        """
        if index_name is None:
            raise ValueError("Invalid value for `index_name`, must not be `None`")

        self._index_name = index_name
