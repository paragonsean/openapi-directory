# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculate_route_request_car_mode_options import CalculateRouteRequestCarModeOptions
from openapi_server.models.calculate_route_request_truck_mode_options import CalculateRouteRequestTruckModeOptions
from openapi_server import util


class CalculateRouteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, car_mode_options: CalculateRouteRequestCarModeOptions=None, depart_now: bool=None, departure_position: List[float]=None, departure_time: datetime=None, destination_position: List[float]=None, distance_unit: str=None, include_leg_geometry: bool=None, travel_mode: str=None, truck_mode_options: CalculateRouteRequestTruckModeOptions=None, waypoint_positions: List[List[float]]=None):
        """CalculateRouteRequest - a model defined in OpenAPI

        :param car_mode_options: The car_mode_options of this CalculateRouteRequest.
        :param depart_now: The depart_now of this CalculateRouteRequest.
        :param departure_position: The departure_position of this CalculateRouteRequest.
        :param departure_time: The departure_time of this CalculateRouteRequest.
        :param destination_position: The destination_position of this CalculateRouteRequest.
        :param distance_unit: The distance_unit of this CalculateRouteRequest.
        :param include_leg_geometry: The include_leg_geometry of this CalculateRouteRequest.
        :param travel_mode: The travel_mode of this CalculateRouteRequest.
        :param truck_mode_options: The truck_mode_options of this CalculateRouteRequest.
        :param waypoint_positions: The waypoint_positions of this CalculateRouteRequest.
        """
        self.openapi_types = {
            'car_mode_options': CalculateRouteRequestCarModeOptions,
            'depart_now': bool,
            'departure_position': List[float],
            'departure_time': datetime,
            'destination_position': List[float],
            'distance_unit': str,
            'include_leg_geometry': bool,
            'travel_mode': str,
            'truck_mode_options': CalculateRouteRequestTruckModeOptions,
            'waypoint_positions': List[List[float]]
        }

        self.attribute_map = {
            'car_mode_options': 'CarModeOptions',
            'depart_now': 'DepartNow',
            'departure_position': 'DeparturePosition',
            'departure_time': 'DepartureTime',
            'destination_position': 'DestinationPosition',
            'distance_unit': 'DistanceUnit',
            'include_leg_geometry': 'IncludeLegGeometry',
            'travel_mode': 'TravelMode',
            'truck_mode_options': 'TruckModeOptions',
            'waypoint_positions': 'WaypointPositions'
        }

        self._car_mode_options = car_mode_options
        self._depart_now = depart_now
        self._departure_position = departure_position
        self._departure_time = departure_time
        self._destination_position = destination_position
        self._distance_unit = distance_unit
        self._include_leg_geometry = include_leg_geometry
        self._travel_mode = travel_mode
        self._truck_mode_options = truck_mode_options
        self._waypoint_positions = waypoint_positions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRoute_request of this CalculateRouteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def car_mode_options(self):
        """Gets the car_mode_options of this CalculateRouteRequest.


        :return: The car_mode_options of this CalculateRouteRequest.
        :rtype: CalculateRouteRequestCarModeOptions
        """
        return self._car_mode_options

    @car_mode_options.setter
    def car_mode_options(self, car_mode_options):
        """Sets the car_mode_options of this CalculateRouteRequest.


        :param car_mode_options: The car_mode_options of this CalculateRouteRequest.
        :type car_mode_options: CalculateRouteRequestCarModeOptions
        """

        self._car_mode_options = car_mode_options

    @property
    def depart_now(self):
        """Gets the depart_now of this CalculateRouteRequest.

        <p>Sets the time of departure as the current time. Uses the current time to calculate a route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>

        :return: The depart_now of this CalculateRouteRequest.
        :rtype: bool
        """
        return self._depart_now

    @depart_now.setter
    def depart_now(self, depart_now):
        """Sets the depart_now of this CalculateRouteRequest.

        <p>Sets the time of departure as the current time. Uses the current time to calculate a route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>

        :param depart_now: The depart_now of this CalculateRouteRequest.
        :type depart_now: bool
        """

        self._depart_now = depart_now

    @property
    def departure_position(self):
        """Gets the departure_position of this CalculateRouteRequest.

        <p>The start position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p>For example, <code>[-123.115, 49.285]</code> </p> </li> </ul> <note> <p>If you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :return: The departure_position of this CalculateRouteRequest.
        :rtype: List[float]
        """
        return self._departure_position

    @departure_position.setter
    def departure_position(self, departure_position):
        """Sets the departure_position of this CalculateRouteRequest.

        <p>The start position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p>For example, <code>[-123.115, 49.285]</code> </p> </li> </ul> <note> <p>If you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :param departure_position: The departure_position of this CalculateRouteRequest.
        :type departure_position: List[float]
        """
        if departure_position is None:
            raise ValueError("Invalid value for `departure_position`, must not be `None`")
        if departure_position is not None and len(departure_position) > 2:
            raise ValueError("Invalid value for `departure_position`, number of items must be less than or equal to `2`")
        if departure_position is not None and len(departure_position) < 2:
            raise ValueError("Invalid value for `departure_position`, number of items must be greater than or equal to `2`")

        self._departure_position = departure_position

    @property
    def departure_time(self):
        """Gets the departure_time of this CalculateRouteRequest.

        <p>Specifies the desired time of departure. Uses the given time to calculate the route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020–07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>

        :return: The departure_time of this CalculateRouteRequest.
        :rtype: datetime
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """Sets the departure_time of this CalculateRouteRequest.

        <p>Specifies the desired time of departure. Uses the given time to calculate the route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020–07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>

        :param departure_time: The departure_time of this CalculateRouteRequest.
        :type departure_time: datetime
        """

        self._departure_time = departure_time

    @property
    def destination_position(self):
        """Gets the destination_position of this CalculateRouteRequest.

        <p>The finish position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p> For example, <code>[-122.339, 47.615]</code> </p> </li> </ul> <note> <p>If you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :return: The destination_position of this CalculateRouteRequest.
        :rtype: List[float]
        """
        return self._destination_position

    @destination_position.setter
    def destination_position(self, destination_position):
        """Sets the destination_position of this CalculateRouteRequest.

        <p>The finish position for the route. Defined in <a href=\"https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84\">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p> <ul> <li> <p> For example, <code>[-122.339, 47.615]</code> </p> </li> </ul> <note> <p>If you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :param destination_position: The destination_position of this CalculateRouteRequest.
        :type destination_position: List[float]
        """
        if destination_position is None:
            raise ValueError("Invalid value for `destination_position`, must not be `None`")
        if destination_position is not None and len(destination_position) > 2:
            raise ValueError("Invalid value for `destination_position`, number of items must be less than or equal to `2`")
        if destination_position is not None and len(destination_position) < 2:
            raise ValueError("Invalid value for `destination_position`, number of items must be greater than or equal to `2`")

        self._destination_position = destination_position

    @property
    def distance_unit(self):
        """Gets the distance_unit of this CalculateRouteRequest.

        <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>

        :return: The distance_unit of this CalculateRouteRequest.
        :rtype: str
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this CalculateRouteRequest.

        <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>

        :param distance_unit: The distance_unit of this CalculateRouteRequest.
        :type distance_unit: str
        """
        allowed_values = ["Kilometers", "Miles"]  # noqa: E501
        if distance_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `distance_unit` ({0}), must be one of {1}"
                .format(distance_unit, allowed_values)
            )

        self._distance_unit = distance_unit

    @property
    def include_leg_geometry(self):
        """Gets the include_leg_geometry of this CalculateRouteRequest.

        <p>Set to include the geometry details in the result for each path between a pair of positions.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>

        :return: The include_leg_geometry of this CalculateRouteRequest.
        :rtype: bool
        """
        return self._include_leg_geometry

    @include_leg_geometry.setter
    def include_leg_geometry(self, include_leg_geometry):
        """Sets the include_leg_geometry of this CalculateRouteRequest.

        <p>Set to include the geometry details in the result for each path between a pair of positions.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>

        :param include_leg_geometry: The include_leg_geometry of this CalculateRouteRequest.
        :type include_leg_geometry: bool
        """

        self._include_leg_geometry = include_leg_geometry

    @property
    def travel_mode(self):
        """Gets the travel_mode of this CalculateRouteRequest.

        <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility. You can choose <code>Car</code>, <code>Truck</code>, <code>Walking</code>, <code>Bicycle</code> or <code>Motorcycle</code> as options for the <code>TravelMode</code>.</p> <note> <p> <code>Bicycle</code> and <code>Motorcycle</code> are only valid when using Grab as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more details on the using Grab for routing, including areas of coverage, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <p>Default Value: <code>Car</code> </p>

        :return: The travel_mode of this CalculateRouteRequest.
        :rtype: str
        """
        return self._travel_mode

    @travel_mode.setter
    def travel_mode(self, travel_mode):
        """Sets the travel_mode of this CalculateRouteRequest.

        <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility. You can choose <code>Car</code>, <code>Truck</code>, <code>Walking</code>, <code>Bicycle</code> or <code>Motorcycle</code> as options for the <code>TravelMode</code>.</p> <note> <p> <code>Bicycle</code> and <code>Motorcycle</code> are only valid when using Grab as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more details on the using Grab for routing, including areas of coverage, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <p>Default Value: <code>Car</code> </p>

        :param travel_mode: The travel_mode of this CalculateRouteRequest.
        :type travel_mode: str
        """
        allowed_values = ["Car", "Truck", "Walking", "Bicycle", "Motorcycle"]  # noqa: E501
        if travel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `travel_mode` ({0}), must be one of {1}"
                .format(travel_mode, allowed_values)
            )

        self._travel_mode = travel_mode

    @property
    def truck_mode_options(self):
        """Gets the truck_mode_options of this CalculateRouteRequest.


        :return: The truck_mode_options of this CalculateRouteRequest.
        :rtype: CalculateRouteRequestTruckModeOptions
        """
        return self._truck_mode_options

    @truck_mode_options.setter
    def truck_mode_options(self, truck_mode_options):
        """Sets the truck_mode_options of this CalculateRouteRequest.


        :param truck_mode_options: The truck_mode_options of this CalculateRouteRequest.
        :type truck_mode_options: CalculateRouteRequestTruckModeOptions
        """

        self._truck_mode_options = truck_mode_options

    @property
    def waypoint_positions(self):
        """Gets the waypoint_positions of this CalculateRouteRequest.

        <p>Specifies an ordered list of up to 23 intermediate positions to include along a route between the departure position and destination position. </p> <ul> <li> <p>For example, from the <code>DeparturePosition</code> <code>[-123.115, 49.285]</code>, the route follows the order that the waypoint positions are given <code>[[-122.757, 49.0021],[-122.349, 47.620]]</code> </p> </li> </ul> <note> <p>If you specify a waypoint position that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> <p>Specifying more than 23 waypoints returns a <code>400 ValidationException</code> error.</p> <p>If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :return: The waypoint_positions of this CalculateRouteRequest.
        :rtype: List[List[float]]
        """
        return self._waypoint_positions

    @waypoint_positions.setter
    def waypoint_positions(self, waypoint_positions):
        """Sets the waypoint_positions of this CalculateRouteRequest.

        <p>Specifies an ordered list of up to 23 intermediate positions to include along a route between the departure position and destination position. </p> <ul> <li> <p>For example, from the <code>DeparturePosition</code> <code>[-123.115, 49.285]</code>, the route follows the order that the waypoint positions are given <code>[[-122.757, 49.0021],[-122.349, 47.620]]</code> </p> </li> </ul> <note> <p>If you specify a waypoint position that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\">moves the position to the nearest road</a>. </p> <p>Specifying more than 23 waypoints returns a <code>400 ValidationException</code> error.</p> <p>If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :param waypoint_positions: The waypoint_positions of this CalculateRouteRequest.
        :type waypoint_positions: List[List[float]]
        """
        if waypoint_positions is not None and len(waypoint_positions) > 23:
            raise ValueError("Invalid value for `waypoint_positions`, number of items must be less than or equal to `23`")
        if waypoint_positions is not None and len(waypoint_positions) < 0:
            raise ValueError("Invalid value for `waypoint_positions`, number of items must be greater than or equal to `0`")

        self._waypoint_positions = waypoint_positions
