# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculate_route_response_summary import CalculateRouteResponseSummary
from openapi_server import util


class CalculateRouteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legs: List=None, summary: CalculateRouteResponseSummary=None):
        """CalculateRouteResponse - a model defined in OpenAPI

        :param legs: The legs of this CalculateRouteResponse.
        :param summary: The summary of this CalculateRouteResponse.
        """
        self.openapi_types = {
            'legs': List,
            'summary': CalculateRouteResponseSummary
        }

        self.attribute_map = {
            'legs': 'Legs',
            'summary': 'Summary'
        }

        self._legs = legs
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRouteResponse of this CalculateRouteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legs(self):
        """Gets the legs of this CalculateRouteResponse.


        :return: The legs of this CalculateRouteResponse.
        :rtype: List
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this CalculateRouteResponse.


        :param legs: The legs of this CalculateRouteResponse.
        :type legs: List
        """
        if legs is None:
            raise ValueError("Invalid value for `legs`, must not be `None`")

        self._legs = legs

    @property
    def summary(self):
        """Gets the summary of this CalculateRouteResponse.


        :return: The summary of this CalculateRouteResponse.
        :rtype: CalculateRouteResponseSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CalculateRouteResponse.


        :param summary: The summary of this CalculateRouteResponse.
        :type summary: CalculateRouteResponseSummary
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary
