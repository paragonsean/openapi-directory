# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculate_route_request_car_mode_options import CalculateRouteRequestCarModeOptions
from openapi_server.models.calculate_route_request_truck_mode_options import CalculateRouteRequestTruckModeOptions
from openapi_server import util


class CalculateRouteMatrixRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, car_mode_options: CalculateRouteRequestCarModeOptions=None, depart_now: bool=None, departure_positions: List[List[float]]=None, departure_time: datetime=None, destination_positions: List[List[float]]=None, distance_unit: str=None, travel_mode: str=None, truck_mode_options: CalculateRouteRequestTruckModeOptions=None):
        """CalculateRouteMatrixRequest - a model defined in OpenAPI

        :param car_mode_options: The car_mode_options of this CalculateRouteMatrixRequest.
        :param depart_now: The depart_now of this CalculateRouteMatrixRequest.
        :param departure_positions: The departure_positions of this CalculateRouteMatrixRequest.
        :param departure_time: The departure_time of this CalculateRouteMatrixRequest.
        :param destination_positions: The destination_positions of this CalculateRouteMatrixRequest.
        :param distance_unit: The distance_unit of this CalculateRouteMatrixRequest.
        :param travel_mode: The travel_mode of this CalculateRouteMatrixRequest.
        :param truck_mode_options: The truck_mode_options of this CalculateRouteMatrixRequest.
        """
        self.openapi_types = {
            'car_mode_options': CalculateRouteRequestCarModeOptions,
            'depart_now': bool,
            'departure_positions': List[List[float]],
            'departure_time': datetime,
            'destination_positions': List[List[float]],
            'distance_unit': str,
            'travel_mode': str,
            'truck_mode_options': CalculateRouteRequestTruckModeOptions
        }

        self.attribute_map = {
            'car_mode_options': 'CarModeOptions',
            'depart_now': 'DepartNow',
            'departure_positions': 'DeparturePositions',
            'departure_time': 'DepartureTime',
            'destination_positions': 'DestinationPositions',
            'distance_unit': 'DistanceUnit',
            'travel_mode': 'TravelMode',
            'truck_mode_options': 'TruckModeOptions'
        }

        self._car_mode_options = car_mode_options
        self._depart_now = depart_now
        self._departure_positions = departure_positions
        self._departure_time = departure_time
        self._destination_positions = destination_positions
        self._distance_unit = distance_unit
        self._travel_mode = travel_mode
        self._truck_mode_options = truck_mode_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteMatrixRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRouteMatrix_request of this CalculateRouteMatrixRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def car_mode_options(self):
        """Gets the car_mode_options of this CalculateRouteMatrixRequest.


        :return: The car_mode_options of this CalculateRouteMatrixRequest.
        :rtype: CalculateRouteRequestCarModeOptions
        """
        return self._car_mode_options

    @car_mode_options.setter
    def car_mode_options(self, car_mode_options):
        """Sets the car_mode_options of this CalculateRouteMatrixRequest.


        :param car_mode_options: The car_mode_options of this CalculateRouteMatrixRequest.
        :type car_mode_options: CalculateRouteRequestCarModeOptions
        """

        self._car_mode_options = car_mode_options

    @property
    def depart_now(self):
        """Gets the depart_now of this CalculateRouteMatrixRequest.

        <p>Sets the time of departure as the current time. Uses the current time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>

        :return: The depart_now of this CalculateRouteMatrixRequest.
        :rtype: bool
        """
        return self._depart_now

    @depart_now.setter
    def depart_now(self, depart_now):
        """Sets the depart_now of this CalculateRouteMatrixRequest.

        <p>Sets the time of departure as the current time. Uses the current time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>

        :param depart_now: The depart_now of this CalculateRouteMatrixRequest.
        :type depart_now: bool
        """

        self._depart_now = depart_now

    @property
    def departure_positions(self):
        """Gets the departure_positions of this CalculateRouteMatrixRequest.

        <p>The list of departure (origin) positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-123.115, 49.285]</code>.</p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDeparturePositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :return: The departure_positions of this CalculateRouteMatrixRequest.
        :rtype: List[List[float]]
        """
        return self._departure_positions

    @departure_positions.setter
    def departure_positions(self, departure_positions):
        """Sets the departure_positions of this CalculateRouteMatrixRequest.

        <p>The list of departure (origin) positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-123.115, 49.285]</code>.</p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a departure that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDeparturePositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :param departure_positions: The departure_positions of this CalculateRouteMatrixRequest.
        :type departure_positions: List[List[float]]
        """
        if departure_positions is None:
            raise ValueError("Invalid value for `departure_positions`, must not be `None`")
        if departure_positions is not None and len(departure_positions) > 350:
            raise ValueError("Invalid value for `departure_positions`, number of items must be less than or equal to `350`")
        if departure_positions is not None and len(departure_positions) < 1:
            raise ValueError("Invalid value for `departure_positions`, number of items must be greater than or equal to `1`")

        self._departure_positions = departure_positions

    @property
    def departure_time(self):
        """Gets the departure_time of this CalculateRouteMatrixRequest.

        <p>Specifies the desired time of departure. Uses the given time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020â€“07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>

        :return: The departure_time of this CalculateRouteMatrixRequest.
        :rtype: datetime
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """Sets the departure_time of this CalculateRouteMatrixRequest.

        <p>Specifies the desired time of departure. Uses the given time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020â€“07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>

        :param departure_time: The departure_time of this CalculateRouteMatrixRequest.
        :type departure_time: datetime
        """

        self._departure_time = departure_time

    @property
    def destination_positions(self):
        """Gets the destination_positions of this CalculateRouteMatrixRequest.

        <p>The list of destination positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-122.339, 47.615]</code> </p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDestinationPositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :return: The destination_positions of this CalculateRouteMatrixRequest.
        :rtype: List[List[float]]
        """
        return self._destination_positions

    @destination_positions.setter
    def destination_positions(self, destination_positions):
        """Sets the destination_positions of this CalculateRouteMatrixRequest.

        <p>The list of destination positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href=\"https://earth-info.nga.mil/GandG/wgs84/index.html\">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-122.339, 47.615]</code> </p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits\"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a destination that's not located on a road, Amazon Location <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDestinationPositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>

        :param destination_positions: The destination_positions of this CalculateRouteMatrixRequest.
        :type destination_positions: List[List[float]]
        """
        if destination_positions is None:
            raise ValueError("Invalid value for `destination_positions`, must not be `None`")
        if destination_positions is not None and len(destination_positions) > 350:
            raise ValueError("Invalid value for `destination_positions`, number of items must be less than or equal to `350`")
        if destination_positions is not None and len(destination_positions) < 1:
            raise ValueError("Invalid value for `destination_positions`, number of items must be greater than or equal to `1`")

        self._destination_positions = destination_positions

    @property
    def distance_unit(self):
        """Gets the distance_unit of this CalculateRouteMatrixRequest.

        <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>

        :return: The distance_unit of this CalculateRouteMatrixRequest.
        :rtype: str
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this CalculateRouteMatrixRequest.

        <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>

        :param distance_unit: The distance_unit of this CalculateRouteMatrixRequest.
        :type distance_unit: str
        """
        allowed_values = ["Kilometers", "Miles"]  # noqa: E501
        if distance_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `distance_unit` ({0}), must be one of {1}"
                .format(distance_unit, allowed_values)
            )

        self._distance_unit = distance_unit

    @property
    def travel_mode(self):
        """Gets the travel_mode of this CalculateRouteMatrixRequest.

        <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>

        :return: The travel_mode of this CalculateRouteMatrixRequest.
        :rtype: str
        """
        return self._travel_mode

    @travel_mode.setter
    def travel_mode(self, travel_mode):
        """Sets the travel_mode of this CalculateRouteMatrixRequest.

        <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>

        :param travel_mode: The travel_mode of this CalculateRouteMatrixRequest.
        :type travel_mode: str
        """
        allowed_values = ["Car", "Truck", "Walking", "Bicycle", "Motorcycle"]  # noqa: E501
        if travel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `travel_mode` ({0}), must be one of {1}"
                .format(travel_mode, allowed_values)
            )

        self._travel_mode = travel_mode

    @property
    def truck_mode_options(self):
        """Gets the truck_mode_options of this CalculateRouteMatrixRequest.


        :return: The truck_mode_options of this CalculateRouteMatrixRequest.
        :rtype: CalculateRouteRequestTruckModeOptions
        """
        return self._truck_mode_options

    @truck_mode_options.setter
    def truck_mode_options(self, truck_mode_options):
        """Sets the truck_mode_options of this CalculateRouteMatrixRequest.


        :param truck_mode_options: The truck_mode_options of this CalculateRouteMatrixRequest.
        :type truck_mode_options: CalculateRouteRequestTruckModeOptions
        """

        self._truck_mode_options = truck_mode_options
