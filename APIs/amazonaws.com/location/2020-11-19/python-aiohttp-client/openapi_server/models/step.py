# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Step(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: float=None, duration_seconds: float=None, end_position: List=None, geometry_offset: int=None, start_position: List=None):
        """Step - a model defined in OpenAPI

        :param distance: The distance of this Step.
        :param duration_seconds: The duration_seconds of this Step.
        :param end_position: The end_position of this Step.
        :param geometry_offset: The geometry_offset of this Step.
        :param start_position: The start_position of this Step.
        """
        self.openapi_types = {
            'distance': float,
            'duration_seconds': float,
            'end_position': List,
            'geometry_offset': int,
            'start_position': List
        }

        self.attribute_map = {
            'distance': 'Distance',
            'duration_seconds': 'DurationSeconds',
            'end_position': 'EndPosition',
            'geometry_offset': 'GeometryOffset',
            'start_position': 'StartPosition'
        }

        self._distance = distance
        self._duration_seconds = duration_seconds
        self._end_position = end_position
        self._geometry_offset = geometry_offset
        self._start_position = start_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Step':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Step of this Step.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this Step.


        :return: The distance of this Step.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Step.


        :param distance: The distance of this Step.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this Step.


        :return: The duration_seconds of this Step.
        :rtype: float
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this Step.


        :param duration_seconds: The duration_seconds of this Step.
        :type duration_seconds: float
        """
        if duration_seconds is None:
            raise ValueError("Invalid value for `duration_seconds`, must not be `None`")

        self._duration_seconds = duration_seconds

    @property
    def end_position(self):
        """Gets the end_position of this Step.


        :return: The end_position of this Step.
        :rtype: List
        """
        return self._end_position

    @end_position.setter
    def end_position(self, end_position):
        """Sets the end_position of this Step.


        :param end_position: The end_position of this Step.
        :type end_position: List
        """
        if end_position is None:
            raise ValueError("Invalid value for `end_position`, must not be `None`")

        self._end_position = end_position

    @property
    def geometry_offset(self):
        """Gets the geometry_offset of this Step.


        :return: The geometry_offset of this Step.
        :rtype: int
        """
        return self._geometry_offset

    @geometry_offset.setter
    def geometry_offset(self, geometry_offset):
        """Sets the geometry_offset of this Step.


        :param geometry_offset: The geometry_offset of this Step.
        :type geometry_offset: int
        """

        self._geometry_offset = geometry_offset

    @property
    def start_position(self):
        """Gets the start_position of this Step.


        :return: The start_position of this Step.
        :rtype: List
        """
        return self._start_position

    @start_position.setter
    def start_position(self, start_position):
        """Sets the start_position of this Step.


        :param start_position: The start_position of this Step.
        :type start_position: List
        """
        if start_position is None:
            raise ValueError("Invalid value for `start_position`, must not be `None`")

        self._start_position = start_position
