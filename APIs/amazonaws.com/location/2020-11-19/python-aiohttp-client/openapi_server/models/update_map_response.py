# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateMapResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map_arn: str=None, map_name: str=None, update_time: datetime=None):
        """UpdateMapResponse - a model defined in OpenAPI

        :param map_arn: The map_arn of this UpdateMapResponse.
        :param map_name: The map_name of this UpdateMapResponse.
        :param update_time: The update_time of this UpdateMapResponse.
        """
        self.openapi_types = {
            'map_arn': str,
            'map_name': str,
            'update_time': datetime
        }

        self.attribute_map = {
            'map_arn': 'MapArn',
            'map_name': 'MapName',
            'update_time': 'UpdateTime'
        }

        self._map_arn = map_arn
        self._map_name = map_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMapResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMapResponse of this UpdateMapResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map_arn(self):
        """Gets the map_arn of this UpdateMapResponse.


        :return: The map_arn of this UpdateMapResponse.
        :rtype: str
        """
        return self._map_arn

    @map_arn.setter
    def map_arn(self, map_arn):
        """Sets the map_arn of this UpdateMapResponse.


        :param map_arn: The map_arn of this UpdateMapResponse.
        :type map_arn: str
        """
        if map_arn is None:
            raise ValueError("Invalid value for `map_arn`, must not be `None`")

        self._map_arn = map_arn

    @property
    def map_name(self):
        """Gets the map_name of this UpdateMapResponse.


        :return: The map_name of this UpdateMapResponse.
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name):
        """Sets the map_name of this UpdateMapResponse.


        :param map_name: The map_name of this UpdateMapResponse.
        :type map_name: str
        """
        if map_name is None:
            raise ValueError("Invalid value for `map_name`, must not be `None`")

        self._map_name = map_name

    @property
    def update_time(self):
        """Gets the update_time of this UpdateMapResponse.


        :return: The update_time of this UpdateMapResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this UpdateMapResponse.


        :param update_time: The update_time of this UpdateMapResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
