# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_update_device_position_error_error import BatchUpdateDevicePositionErrorError
from openapi_server import util


class BatchUpdateDevicePositionError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, error: BatchUpdateDevicePositionErrorError=None, sample_time: datetime=None):
        """BatchUpdateDevicePositionError - a model defined in OpenAPI

        :param device_id: The device_id of this BatchUpdateDevicePositionError.
        :param error: The error of this BatchUpdateDevicePositionError.
        :param sample_time: The sample_time of this BatchUpdateDevicePositionError.
        """
        self.openapi_types = {
            'device_id': str,
            'error': BatchUpdateDevicePositionErrorError,
            'sample_time': datetime
        }

        self.attribute_map = {
            'device_id': 'DeviceId',
            'error': 'Error',
            'sample_time': 'SampleTime'
        }

        self._device_id = device_id
        self._error = error
        self._sample_time = sample_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateDevicePositionError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateDevicePositionError of this BatchUpdateDevicePositionError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this BatchUpdateDevicePositionError.


        :return: The device_id of this BatchUpdateDevicePositionError.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this BatchUpdateDevicePositionError.


        :param device_id: The device_id of this BatchUpdateDevicePositionError.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def error(self):
        """Gets the error of this BatchUpdateDevicePositionError.


        :return: The error of this BatchUpdateDevicePositionError.
        :rtype: BatchUpdateDevicePositionErrorError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BatchUpdateDevicePositionError.


        :param error: The error of this BatchUpdateDevicePositionError.
        :type error: BatchUpdateDevicePositionErrorError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def sample_time(self):
        """Gets the sample_time of this BatchUpdateDevicePositionError.


        :return: The sample_time of this BatchUpdateDevicePositionError.
        :rtype: datetime
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this BatchUpdateDevicePositionError.


        :param sample_time: The sample_time of this BatchUpdateDevicePositionError.
        :type sample_time: datetime
        """
        if sample_time is None:
            raise ValueError("Invalid value for `sample_time`, must not be `None`")

        self._sample_time = sample_time
