# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_position_update import DevicePositionUpdate
from openapi_server import util


class BatchUpdateDevicePositionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, updates: List[DevicePositionUpdate]=None):
        """BatchUpdateDevicePositionRequest - a model defined in OpenAPI

        :param updates: The updates of this BatchUpdateDevicePositionRequest.
        """
        self.openapi_types = {
            'updates': List[DevicePositionUpdate]
        }

        self.attribute_map = {
            'updates': 'Updates'
        }

        self._updates = updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateDevicePositionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateDevicePosition_request of this BatchUpdateDevicePositionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def updates(self):
        """Gets the updates of this BatchUpdateDevicePositionRequest.

        Contains the position update details for each device, up to 10 devices.

        :return: The updates of this BatchUpdateDevicePositionRequest.
        :rtype: List[DevicePositionUpdate]
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this BatchUpdateDevicePositionRequest.

        Contains the position update details for each device, up to 10 devices.

        :param updates: The updates of this BatchUpdateDevicePositionRequest.
        :type updates: List[DevicePositionUpdate]
        """
        if updates is None:
            raise ValueError("Invalid value for `updates`, must not be `None`")
        if updates is not None and len(updates) > 10:
            raise ValueError("Invalid value for `updates`, number of items must be less than or equal to `10`")
        if updates is not None and len(updates) < 1:
            raise ValueError("Invalid value for `updates`, number of items must be greater than or equal to `1`")

        self._updates = updates
