# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_position_update_accuracy import DevicePositionUpdateAccuracy
from openapi_server import util


class DevicePositionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy: DevicePositionUpdateAccuracy=None, device_id: str=None, position: List=None, position_properties: Dict=None, sample_time: datetime=None):
        """DevicePositionUpdate - a model defined in OpenAPI

        :param accuracy: The accuracy of this DevicePositionUpdate.
        :param device_id: The device_id of this DevicePositionUpdate.
        :param position: The position of this DevicePositionUpdate.
        :param position_properties: The position_properties of this DevicePositionUpdate.
        :param sample_time: The sample_time of this DevicePositionUpdate.
        """
        self.openapi_types = {
            'accuracy': DevicePositionUpdateAccuracy,
            'device_id': str,
            'position': List,
            'position_properties': Dict,
            'sample_time': datetime
        }

        self.attribute_map = {
            'accuracy': 'Accuracy',
            'device_id': 'DeviceId',
            'position': 'Position',
            'position_properties': 'PositionProperties',
            'sample_time': 'SampleTime'
        }

        self._accuracy = accuracy
        self._device_id = device_id
        self._position = position
        self._position_properties = position_properties
        self._sample_time = sample_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DevicePositionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DevicePositionUpdate of this DevicePositionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this DevicePositionUpdate.


        :return: The accuracy of this DevicePositionUpdate.
        :rtype: DevicePositionUpdateAccuracy
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this DevicePositionUpdate.


        :param accuracy: The accuracy of this DevicePositionUpdate.
        :type accuracy: DevicePositionUpdateAccuracy
        """

        self._accuracy = accuracy

    @property
    def device_id(self):
        """Gets the device_id of this DevicePositionUpdate.


        :return: The device_id of this DevicePositionUpdate.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DevicePositionUpdate.


        :param device_id: The device_id of this DevicePositionUpdate.
        :type device_id: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")

        self._device_id = device_id

    @property
    def position(self):
        """Gets the position of this DevicePositionUpdate.


        :return: The position of this DevicePositionUpdate.
        :rtype: List
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DevicePositionUpdate.


        :param position: The position of this DevicePositionUpdate.
        :type position: List
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def position_properties(self):
        """Gets the position_properties of this DevicePositionUpdate.


        :return: The position_properties of this DevicePositionUpdate.
        :rtype: Dict
        """
        return self._position_properties

    @position_properties.setter
    def position_properties(self, position_properties):
        """Sets the position_properties of this DevicePositionUpdate.


        :param position_properties: The position_properties of this DevicePositionUpdate.
        :type position_properties: Dict
        """

        self._position_properties = position_properties

    @property
    def sample_time(self):
        """Gets the sample_time of this DevicePositionUpdate.


        :return: The sample_time of this DevicePositionUpdate.
        :rtype: datetime
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this DevicePositionUpdate.


        :param sample_time: The sample_time of this DevicePositionUpdate.
        :type sample_time: datetime
        """
        if sample_time is None:
            raise ValueError("Invalid value for `sample_time`, must not be `None`")

        self._sample_time = sample_time
