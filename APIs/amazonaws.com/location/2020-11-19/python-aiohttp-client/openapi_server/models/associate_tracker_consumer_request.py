# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssociateTrackerConsumerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_arn: str=None):
        """AssociateTrackerConsumerRequest - a model defined in OpenAPI

        :param consumer_arn: The consumer_arn of this AssociateTrackerConsumerRequest.
        """
        self.openapi_types = {
            'consumer_arn': str
        }

        self.attribute_map = {
            'consumer_arn': 'ConsumerArn'
        }

        self._consumer_arn = consumer_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateTrackerConsumerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateTrackerConsumer_request of this AssociateTrackerConsumerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_arn(self):
        """Gets the consumer_arn of this AssociateTrackerConsumerRequest.

        <p>The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all Amazon Web Services.</p> <ul> <li> <p>Format example: <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer</code> </p> </li> </ul>

        :return: The consumer_arn of this AssociateTrackerConsumerRequest.
        :rtype: str
        """
        return self._consumer_arn

    @consumer_arn.setter
    def consumer_arn(self, consumer_arn):
        """Sets the consumer_arn of this AssociateTrackerConsumerRequest.

        <p>The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all Amazon Web Services.</p> <ul> <li> <p>Format example: <code>arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer</code> </p> </li> </ul>

        :param consumer_arn: The consumer_arn of this AssociateTrackerConsumerRequest.
        :type consumer_arn: str
        """
        if consumer_arn is None:
            raise ValueError("Invalid value for `consumer_arn`, must not be `None`")
        if consumer_arn is not None and len(consumer_arn) > 1600:
            raise ValueError("Invalid value for `consumer_arn`, length must be less than or equal to `1600`")
        if consumer_arn is not None and len(consumer_arn) < 0:
            raise ValueError("Invalid value for `consumer_arn`, length must be greater than or equal to `0`")
        if consumer_arn is not None and not re.search(r'^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^\/].*)?$', consumer_arn):
            raise ValueError("Invalid value for `consumer_arn`, must be a follow pattern or equal to `/^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^\/].*)?$/`")

        self._consumer_arn = consumer_arn
