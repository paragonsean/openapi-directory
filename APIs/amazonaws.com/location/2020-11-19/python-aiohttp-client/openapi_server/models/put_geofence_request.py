# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_geofence_request_geometry import PutGeofenceRequestGeometry
from openapi_server import util


class PutGeofenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geofence_properties: Dict[str, str]=None, geometry: PutGeofenceRequestGeometry=None):
        """PutGeofenceRequest - a model defined in OpenAPI

        :param geofence_properties: The geofence_properties of this PutGeofenceRequest.
        :param geometry: The geometry of this PutGeofenceRequest.
        """
        self.openapi_types = {
            'geofence_properties': Dict[str, str],
            'geometry': PutGeofenceRequestGeometry
        }

        self.attribute_map = {
            'geofence_properties': 'GeofenceProperties',
            'geometry': 'Geometry'
        }

        self._geofence_properties = geofence_properties
        self._geometry = geometry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutGeofenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutGeofence_request of this PutGeofenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geofence_properties(self):
        """Gets the geofence_properties of this PutGeofenceRequest.

        <p>Associates one of more properties with the geofence. A property is a key-value pair stored with the geofence and added to any geofence event triggered with that geofence.</p> <p>Format: <code>\"key\" : \"value\"</code> </p>

        :return: The geofence_properties of this PutGeofenceRequest.
        :rtype: Dict[str, str]
        """
        return self._geofence_properties

    @geofence_properties.setter
    def geofence_properties(self, geofence_properties):
        """Sets the geofence_properties of this PutGeofenceRequest.

        <p>Associates one of more properties with the geofence. A property is a key-value pair stored with the geofence and added to any geofence event triggered with that geofence.</p> <p>Format: <code>\"key\" : \"value\"</code> </p>

        :param geofence_properties: The geofence_properties of this PutGeofenceRequest.
        :type geofence_properties: Dict[str, str]
        """
        if geofence_properties is not None and len(geofence_properties) > 3:
            raise ValueError("Invalid value for `geofence_properties`, number of items must be less than or equal to `3`")
        if geofence_properties is not None and len(geofence_properties) < 0:
            raise ValueError("Invalid value for `geofence_properties`, number of items must be greater than or equal to `0`")

        self._geofence_properties = geofence_properties

    @property
    def geometry(self):
        """Gets the geometry of this PutGeofenceRequest.


        :return: The geometry of this PutGeofenceRequest.
        :rtype: PutGeofenceRequestGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this PutGeofenceRequest.


        :param geometry: The geometry of this PutGeofenceRequest.
        :type geometry: PutGeofenceRequestGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")

        self._geometry = geometry
