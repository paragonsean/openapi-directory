# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_put_geofence_request_entry_geometry import BatchPutGeofenceRequestEntryGeometry
from openapi_server import util


class BatchPutGeofenceRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geofence_id: str=None, geofence_properties: Dict=None, geometry: BatchPutGeofenceRequestEntryGeometry=None):
        """BatchPutGeofenceRequestEntry - a model defined in OpenAPI

        :param geofence_id: The geofence_id of this BatchPutGeofenceRequestEntry.
        :param geofence_properties: The geofence_properties of this BatchPutGeofenceRequestEntry.
        :param geometry: The geometry of this BatchPutGeofenceRequestEntry.
        """
        self.openapi_types = {
            'geofence_id': str,
            'geofence_properties': Dict,
            'geometry': BatchPutGeofenceRequestEntryGeometry
        }

        self.attribute_map = {
            'geofence_id': 'GeofenceId',
            'geofence_properties': 'GeofenceProperties',
            'geometry': 'Geometry'
        }

        self._geofence_id = geofence_id
        self._geofence_properties = geofence_properties
        self._geometry = geometry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPutGeofenceRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPutGeofenceRequestEntry of this BatchPutGeofenceRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geofence_id(self):
        """Gets the geofence_id of this BatchPutGeofenceRequestEntry.


        :return: The geofence_id of this BatchPutGeofenceRequestEntry.
        :rtype: str
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this BatchPutGeofenceRequestEntry.


        :param geofence_id: The geofence_id of this BatchPutGeofenceRequestEntry.
        :type geofence_id: str
        """
        if geofence_id is None:
            raise ValueError("Invalid value for `geofence_id`, must not be `None`")

        self._geofence_id = geofence_id

    @property
    def geofence_properties(self):
        """Gets the geofence_properties of this BatchPutGeofenceRequestEntry.


        :return: The geofence_properties of this BatchPutGeofenceRequestEntry.
        :rtype: Dict
        """
        return self._geofence_properties

    @geofence_properties.setter
    def geofence_properties(self, geofence_properties):
        """Sets the geofence_properties of this BatchPutGeofenceRequestEntry.


        :param geofence_properties: The geofence_properties of this BatchPutGeofenceRequestEntry.
        :type geofence_properties: Dict
        """

        self._geofence_properties = geofence_properties

    @property
    def geometry(self):
        """Gets the geometry of this BatchPutGeofenceRequestEntry.


        :return: The geometry of this BatchPutGeofenceRequestEntry.
        :rtype: BatchPutGeofenceRequestEntryGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this BatchPutGeofenceRequestEntry.


        :param geometry: The geometry of this BatchPutGeofenceRequestEntry.
        :type geometry: BatchPutGeofenceRequestEntryGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")

        self._geometry = geometry
