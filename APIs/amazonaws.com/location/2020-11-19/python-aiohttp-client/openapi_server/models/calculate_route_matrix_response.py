# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculate_route_matrix_response_summary import CalculateRouteMatrixResponseSummary
from openapi_server import util


class CalculateRouteMatrixResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, route_matrix: List=None, snapped_departure_positions: List=None, snapped_destination_positions: List=None, summary: CalculateRouteMatrixResponseSummary=None):
        """CalculateRouteMatrixResponse - a model defined in OpenAPI

        :param route_matrix: The route_matrix of this CalculateRouteMatrixResponse.
        :param snapped_departure_positions: The snapped_departure_positions of this CalculateRouteMatrixResponse.
        :param snapped_destination_positions: The snapped_destination_positions of this CalculateRouteMatrixResponse.
        :param summary: The summary of this CalculateRouteMatrixResponse.
        """
        self.openapi_types = {
            'route_matrix': List,
            'snapped_departure_positions': List,
            'snapped_destination_positions': List,
            'summary': CalculateRouteMatrixResponseSummary
        }

        self.attribute_map = {
            'route_matrix': 'RouteMatrix',
            'snapped_departure_positions': 'SnappedDeparturePositions',
            'snapped_destination_positions': 'SnappedDestinationPositions',
            'summary': 'Summary'
        }

        self._route_matrix = route_matrix
        self._snapped_departure_positions = snapped_departure_positions
        self._snapped_destination_positions = snapped_destination_positions
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteMatrixResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRouteMatrixResponse of this CalculateRouteMatrixResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def route_matrix(self):
        """Gets the route_matrix of this CalculateRouteMatrixResponse.


        :return: The route_matrix of this CalculateRouteMatrixResponse.
        :rtype: List
        """
        return self._route_matrix

    @route_matrix.setter
    def route_matrix(self, route_matrix):
        """Sets the route_matrix of this CalculateRouteMatrixResponse.


        :param route_matrix: The route_matrix of this CalculateRouteMatrixResponse.
        :type route_matrix: List
        """
        if route_matrix is None:
            raise ValueError("Invalid value for `route_matrix`, must not be `None`")

        self._route_matrix = route_matrix

    @property
    def snapped_departure_positions(self):
        """Gets the snapped_departure_positions of this CalculateRouteMatrixResponse.


        :return: The snapped_departure_positions of this CalculateRouteMatrixResponse.
        :rtype: List
        """
        return self._snapped_departure_positions

    @snapped_departure_positions.setter
    def snapped_departure_positions(self, snapped_departure_positions):
        """Sets the snapped_departure_positions of this CalculateRouteMatrixResponse.


        :param snapped_departure_positions: The snapped_departure_positions of this CalculateRouteMatrixResponse.
        :type snapped_departure_positions: List
        """

        self._snapped_departure_positions = snapped_departure_positions

    @property
    def snapped_destination_positions(self):
        """Gets the snapped_destination_positions of this CalculateRouteMatrixResponse.


        :return: The snapped_destination_positions of this CalculateRouteMatrixResponse.
        :rtype: List
        """
        return self._snapped_destination_positions

    @snapped_destination_positions.setter
    def snapped_destination_positions(self, snapped_destination_positions):
        """Sets the snapped_destination_positions of this CalculateRouteMatrixResponse.


        :param snapped_destination_positions: The snapped_destination_positions of this CalculateRouteMatrixResponse.
        :type snapped_destination_positions: List
        """

        self._snapped_destination_positions = snapped_destination_positions

    @property
    def summary(self):
        """Gets the summary of this CalculateRouteMatrixResponse.


        :return: The summary of this CalculateRouteMatrixResponse.
        :rtype: CalculateRouteMatrixResponseSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CalculateRouteMatrixResponse.


        :param summary: The summary of this CalculateRouteMatrixResponse.
        :type summary: CalculateRouteMatrixResponseSummary
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary
