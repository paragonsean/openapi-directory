# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchPutGeofenceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List=None, successes: List=None):
        """BatchPutGeofenceResponse - a model defined in OpenAPI

        :param errors: The errors of this BatchPutGeofenceResponse.
        :param successes: The successes of this BatchPutGeofenceResponse.
        """
        self.openapi_types = {
            'errors': List,
            'successes': List
        }

        self.attribute_map = {
            'errors': 'Errors',
            'successes': 'Successes'
        }

        self._errors = errors
        self._successes = successes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPutGeofenceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPutGeofenceResponse of this BatchPutGeofenceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this BatchPutGeofenceResponse.


        :return: The errors of this BatchPutGeofenceResponse.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchPutGeofenceResponse.


        :param errors: The errors of this BatchPutGeofenceResponse.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def successes(self):
        """Gets the successes of this BatchPutGeofenceResponse.


        :return: The successes of this BatchPutGeofenceResponse.
        :rtype: List
        """
        return self._successes

    @successes.setter
    def successes(self, successes):
        """Sets the successes of this BatchPutGeofenceResponse.


        :param successes: The successes of this BatchPutGeofenceResponse.
        :type successes: List
        """
        if successes is None:
            raise ValueError("Invalid value for `successes`, must not be `None`")

        self._successes = successes
