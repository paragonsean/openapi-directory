# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateKeyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, key: str=None, key_arn: str=None, key_name: str=None):
        """CreateKeyResponse - a model defined in OpenAPI

        :param create_time: The create_time of this CreateKeyResponse.
        :param key: The key of this CreateKeyResponse.
        :param key_arn: The key_arn of this CreateKeyResponse.
        :param key_name: The key_name of this CreateKeyResponse.
        """
        self.openapi_types = {
            'create_time': datetime,
            'key': str,
            'key_arn': str,
            'key_name': str
        }

        self.attribute_map = {
            'create_time': 'CreateTime',
            'key': 'Key',
            'key_arn': 'KeyArn',
            'key_name': 'KeyName'
        }

        self._create_time = create_time
        self._key = key
        self._key_arn = key_arn
        self._key_name = key_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKeyResponse of this CreateKeyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this CreateKeyResponse.


        :return: The create_time of this CreateKeyResponse.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CreateKeyResponse.


        :param create_time: The create_time of this CreateKeyResponse.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def key(self):
        """Gets the key of this CreateKeyResponse.


        :return: The key of this CreateKeyResponse.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateKeyResponse.


        :param key: The key of this CreateKeyResponse.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def key_arn(self):
        """Gets the key_arn of this CreateKeyResponse.


        :return: The key_arn of this CreateKeyResponse.
        :rtype: str
        """
        return self._key_arn

    @key_arn.setter
    def key_arn(self, key_arn):
        """Sets the key_arn of this CreateKeyResponse.


        :param key_arn: The key_arn of this CreateKeyResponse.
        :type key_arn: str
        """
        if key_arn is None:
            raise ValueError("Invalid value for `key_arn`, must not be `None`")

        self._key_arn = key_arn

    @property
    def key_name(self):
        """Gets the key_name of this CreateKeyResponse.


        :return: The key_name of this CreateKeyResponse.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this CreateKeyResponse.


        :param key_name: The key_name of this CreateKeyResponse.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name
