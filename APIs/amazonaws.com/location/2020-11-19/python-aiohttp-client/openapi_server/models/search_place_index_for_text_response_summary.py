# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchPlaceIndexForTextResponseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bias_position: List=None, data_source: str=None, filter_b_box: List=None, filter_categories: List=None, filter_countries: List=None, language: str=None, max_results: int=None, result_b_box: List=None, text: str=None):
        """SearchPlaceIndexForTextResponseSummary - a model defined in OpenAPI

        :param bias_position: The bias_position of this SearchPlaceIndexForTextResponseSummary.
        :param data_source: The data_source of this SearchPlaceIndexForTextResponseSummary.
        :param filter_b_box: The filter_b_box of this SearchPlaceIndexForTextResponseSummary.
        :param filter_categories: The filter_categories of this SearchPlaceIndexForTextResponseSummary.
        :param filter_countries: The filter_countries of this SearchPlaceIndexForTextResponseSummary.
        :param language: The language of this SearchPlaceIndexForTextResponseSummary.
        :param max_results: The max_results of this SearchPlaceIndexForTextResponseSummary.
        :param result_b_box: The result_b_box of this SearchPlaceIndexForTextResponseSummary.
        :param text: The text of this SearchPlaceIndexForTextResponseSummary.
        """
        self.openapi_types = {
            'bias_position': List,
            'data_source': str,
            'filter_b_box': List,
            'filter_categories': List,
            'filter_countries': List,
            'language': str,
            'max_results': int,
            'result_b_box': List,
            'text': str
        }

        self.attribute_map = {
            'bias_position': 'BiasPosition',
            'data_source': 'DataSource',
            'filter_b_box': 'FilterBBox',
            'filter_categories': 'FilterCategories',
            'filter_countries': 'FilterCountries',
            'language': 'Language',
            'max_results': 'MaxResults',
            'result_b_box': 'ResultBBox',
            'text': 'Text'
        }

        self._bias_position = bias_position
        self._data_source = data_source
        self._filter_b_box = filter_b_box
        self._filter_categories = filter_categories
        self._filter_countries = filter_countries
        self._language = language
        self._max_results = max_results
        self._result_b_box = result_b_box
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchPlaceIndexForTextResponseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchPlaceIndexForTextResponse_Summary of this SearchPlaceIndexForTextResponseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bias_position(self):
        """Gets the bias_position of this SearchPlaceIndexForTextResponseSummary.


        :return: The bias_position of this SearchPlaceIndexForTextResponseSummary.
        :rtype: List
        """
        return self._bias_position

    @bias_position.setter
    def bias_position(self, bias_position):
        """Sets the bias_position of this SearchPlaceIndexForTextResponseSummary.


        :param bias_position: The bias_position of this SearchPlaceIndexForTextResponseSummary.
        :type bias_position: List
        """

        self._bias_position = bias_position

    @property
    def data_source(self):
        """Gets the data_source of this SearchPlaceIndexForTextResponseSummary.


        :return: The data_source of this SearchPlaceIndexForTextResponseSummary.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this SearchPlaceIndexForTextResponseSummary.


        :param data_source: The data_source of this SearchPlaceIndexForTextResponseSummary.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def filter_b_box(self):
        """Gets the filter_b_box of this SearchPlaceIndexForTextResponseSummary.


        :return: The filter_b_box of this SearchPlaceIndexForTextResponseSummary.
        :rtype: List
        """
        return self._filter_b_box

    @filter_b_box.setter
    def filter_b_box(self, filter_b_box):
        """Sets the filter_b_box of this SearchPlaceIndexForTextResponseSummary.


        :param filter_b_box: The filter_b_box of this SearchPlaceIndexForTextResponseSummary.
        :type filter_b_box: List
        """

        self._filter_b_box = filter_b_box

    @property
    def filter_categories(self):
        """Gets the filter_categories of this SearchPlaceIndexForTextResponseSummary.


        :return: The filter_categories of this SearchPlaceIndexForTextResponseSummary.
        :rtype: List
        """
        return self._filter_categories

    @filter_categories.setter
    def filter_categories(self, filter_categories):
        """Sets the filter_categories of this SearchPlaceIndexForTextResponseSummary.


        :param filter_categories: The filter_categories of this SearchPlaceIndexForTextResponseSummary.
        :type filter_categories: List
        """

        self._filter_categories = filter_categories

    @property
    def filter_countries(self):
        """Gets the filter_countries of this SearchPlaceIndexForTextResponseSummary.


        :return: The filter_countries of this SearchPlaceIndexForTextResponseSummary.
        :rtype: List
        """
        return self._filter_countries

    @filter_countries.setter
    def filter_countries(self, filter_countries):
        """Sets the filter_countries of this SearchPlaceIndexForTextResponseSummary.


        :param filter_countries: The filter_countries of this SearchPlaceIndexForTextResponseSummary.
        :type filter_countries: List
        """

        self._filter_countries = filter_countries

    @property
    def language(self):
        """Gets the language of this SearchPlaceIndexForTextResponseSummary.


        :return: The language of this SearchPlaceIndexForTextResponseSummary.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SearchPlaceIndexForTextResponseSummary.


        :param language: The language of this SearchPlaceIndexForTextResponseSummary.
        :type language: str
        """

        self._language = language

    @property
    def max_results(self):
        """Gets the max_results of this SearchPlaceIndexForTextResponseSummary.


        :return: The max_results of this SearchPlaceIndexForTextResponseSummary.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchPlaceIndexForTextResponseSummary.


        :param max_results: The max_results of this SearchPlaceIndexForTextResponseSummary.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def result_b_box(self):
        """Gets the result_b_box of this SearchPlaceIndexForTextResponseSummary.


        :return: The result_b_box of this SearchPlaceIndexForTextResponseSummary.
        :rtype: List
        """
        return self._result_b_box

    @result_b_box.setter
    def result_b_box(self, result_b_box):
        """Sets the result_b_box of this SearchPlaceIndexForTextResponseSummary.


        :param result_b_box: The result_b_box of this SearchPlaceIndexForTextResponseSummary.
        :type result_b_box: List
        """

        self._result_b_box = result_b_box

    @property
    def text(self):
        """Gets the text of this SearchPlaceIndexForTextResponseSummary.


        :return: The text of this SearchPlaceIndexForTextResponseSummary.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SearchPlaceIndexForTextResponseSummary.


        :param text: The text of this SearchPlaceIndexForTextResponseSummary.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
