# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.position_filtering import PositionFiltering
from openapi_server.models.pricing_plan import PricingPlan
from openapi_server import util


class DescribeTrackerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, description: str=None, event_bridge_enabled: bool=None, kms_key_id: str=None, position_filtering: PositionFiltering=None, pricing_plan: PricingPlan=None, pricing_plan_data_source: str=None, tags: Dict=None, tracker_arn: str=None, tracker_name: str=None, update_time: datetime=None):
        """DescribeTrackerResponse - a model defined in OpenAPI

        :param create_time: The create_time of this DescribeTrackerResponse.
        :param description: The description of this DescribeTrackerResponse.
        :param event_bridge_enabled: The event_bridge_enabled of this DescribeTrackerResponse.
        :param kms_key_id: The kms_key_id of this DescribeTrackerResponse.
        :param position_filtering: The position_filtering of this DescribeTrackerResponse.
        :param pricing_plan: The pricing_plan of this DescribeTrackerResponse.
        :param pricing_plan_data_source: The pricing_plan_data_source of this DescribeTrackerResponse.
        :param tags: The tags of this DescribeTrackerResponse.
        :param tracker_arn: The tracker_arn of this DescribeTrackerResponse.
        :param tracker_name: The tracker_name of this DescribeTrackerResponse.
        :param update_time: The update_time of this DescribeTrackerResponse.
        """
        self.openapi_types = {
            'create_time': datetime,
            'description': str,
            'event_bridge_enabled': bool,
            'kms_key_id': str,
            'position_filtering': PositionFiltering,
            'pricing_plan': PricingPlan,
            'pricing_plan_data_source': str,
            'tags': Dict,
            'tracker_arn': str,
            'tracker_name': str,
            'update_time': datetime
        }

        self.attribute_map = {
            'create_time': 'CreateTime',
            'description': 'Description',
            'event_bridge_enabled': 'EventBridgeEnabled',
            'kms_key_id': 'KmsKeyId',
            'position_filtering': 'PositionFiltering',
            'pricing_plan': 'PricingPlan',
            'pricing_plan_data_source': 'PricingPlanDataSource',
            'tags': 'Tags',
            'tracker_arn': 'TrackerArn',
            'tracker_name': 'TrackerName',
            'update_time': 'UpdateTime'
        }

        self._create_time = create_time
        self._description = description
        self._event_bridge_enabled = event_bridge_enabled
        self._kms_key_id = kms_key_id
        self._position_filtering = position_filtering
        self._pricing_plan = pricing_plan
        self._pricing_plan_data_source = pricing_plan_data_source
        self._tags = tags
        self._tracker_arn = tracker_arn
        self._tracker_name = tracker_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeTrackerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeTrackerResponse of this DescribeTrackerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this DescribeTrackerResponse.


        :return: The create_time of this DescribeTrackerResponse.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DescribeTrackerResponse.


        :param create_time: The create_time of this DescribeTrackerResponse.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this DescribeTrackerResponse.


        :return: The description of this DescribeTrackerResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeTrackerResponse.


        :param description: The description of this DescribeTrackerResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def event_bridge_enabled(self):
        """Gets the event_bridge_enabled of this DescribeTrackerResponse.


        :return: The event_bridge_enabled of this DescribeTrackerResponse.
        :rtype: bool
        """
        return self._event_bridge_enabled

    @event_bridge_enabled.setter
    def event_bridge_enabled(self, event_bridge_enabled):
        """Sets the event_bridge_enabled of this DescribeTrackerResponse.


        :param event_bridge_enabled: The event_bridge_enabled of this DescribeTrackerResponse.
        :type event_bridge_enabled: bool
        """

        self._event_bridge_enabled = event_bridge_enabled

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this DescribeTrackerResponse.


        :return: The kms_key_id of this DescribeTrackerResponse.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this DescribeTrackerResponse.


        :param kms_key_id: The kms_key_id of this DescribeTrackerResponse.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def position_filtering(self):
        """Gets the position_filtering of this DescribeTrackerResponse.


        :return: The position_filtering of this DescribeTrackerResponse.
        :rtype: PositionFiltering
        """
        return self._position_filtering

    @position_filtering.setter
    def position_filtering(self, position_filtering):
        """Sets the position_filtering of this DescribeTrackerResponse.


        :param position_filtering: The position_filtering of this DescribeTrackerResponse.
        :type position_filtering: PositionFiltering
        """

        self._position_filtering = position_filtering

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this DescribeTrackerResponse.


        :return: The pricing_plan of this DescribeTrackerResponse.
        :rtype: PricingPlan
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this DescribeTrackerResponse.


        :param pricing_plan: The pricing_plan of this DescribeTrackerResponse.
        :type pricing_plan: PricingPlan
        """

        self._pricing_plan = pricing_plan

    @property
    def pricing_plan_data_source(self):
        """Gets the pricing_plan_data_source of this DescribeTrackerResponse.


        :return: The pricing_plan_data_source of this DescribeTrackerResponse.
        :rtype: str
        """
        return self._pricing_plan_data_source

    @pricing_plan_data_source.setter
    def pricing_plan_data_source(self, pricing_plan_data_source):
        """Sets the pricing_plan_data_source of this DescribeTrackerResponse.


        :param pricing_plan_data_source: The pricing_plan_data_source of this DescribeTrackerResponse.
        :type pricing_plan_data_source: str
        """

        self._pricing_plan_data_source = pricing_plan_data_source

    @property
    def tags(self):
        """Gets the tags of this DescribeTrackerResponse.


        :return: The tags of this DescribeTrackerResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeTrackerResponse.


        :param tags: The tags of this DescribeTrackerResponse.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def tracker_arn(self):
        """Gets the tracker_arn of this DescribeTrackerResponse.


        :return: The tracker_arn of this DescribeTrackerResponse.
        :rtype: str
        """
        return self._tracker_arn

    @tracker_arn.setter
    def tracker_arn(self, tracker_arn):
        """Sets the tracker_arn of this DescribeTrackerResponse.


        :param tracker_arn: The tracker_arn of this DescribeTrackerResponse.
        :type tracker_arn: str
        """
        if tracker_arn is None:
            raise ValueError("Invalid value for `tracker_arn`, must not be `None`")

        self._tracker_arn = tracker_arn

    @property
    def tracker_name(self):
        """Gets the tracker_name of this DescribeTrackerResponse.


        :return: The tracker_name of this DescribeTrackerResponse.
        :rtype: str
        """
        return self._tracker_name

    @tracker_name.setter
    def tracker_name(self, tracker_name):
        """Sets the tracker_name of this DescribeTrackerResponse.


        :param tracker_name: The tracker_name of this DescribeTrackerResponse.
        :type tracker_name: str
        """
        if tracker_name is None:
            raise ValueError("Invalid value for `tracker_name`, must not be `None`")

        self._tracker_name = tracker_name

    @property
    def update_time(self):
        """Gets the update_time of this DescribeTrackerResponse.


        :return: The update_time of this DescribeTrackerResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DescribeTrackerResponse.


        :param update_time: The update_time of this DescribeTrackerResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
