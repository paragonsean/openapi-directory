# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalculateRouteMatrixRequestCarModeOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avoid_ferries: bool=None, avoid_tolls: bool=None):
        """CalculateRouteMatrixRequestCarModeOptions - a model defined in OpenAPI

        :param avoid_ferries: The avoid_ferries of this CalculateRouteMatrixRequestCarModeOptions.
        :param avoid_tolls: The avoid_tolls of this CalculateRouteMatrixRequestCarModeOptions.
        """
        self.openapi_types = {
            'avoid_ferries': bool,
            'avoid_tolls': bool
        }

        self.attribute_map = {
            'avoid_ferries': 'AvoidFerries',
            'avoid_tolls': 'AvoidTolls'
        }

        self._avoid_ferries = avoid_ferries
        self._avoid_tolls = avoid_tolls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteMatrixRequestCarModeOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRouteMatrixRequest_CarModeOptions of this CalculateRouteMatrixRequestCarModeOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avoid_ferries(self):
        """Gets the avoid_ferries of this CalculateRouteMatrixRequestCarModeOptions.


        :return: The avoid_ferries of this CalculateRouteMatrixRequestCarModeOptions.
        :rtype: bool
        """
        return self._avoid_ferries

    @avoid_ferries.setter
    def avoid_ferries(self, avoid_ferries):
        """Sets the avoid_ferries of this CalculateRouteMatrixRequestCarModeOptions.


        :param avoid_ferries: The avoid_ferries of this CalculateRouteMatrixRequestCarModeOptions.
        :type avoid_ferries: bool
        """

        self._avoid_ferries = avoid_ferries

    @property
    def avoid_tolls(self):
        """Gets the avoid_tolls of this CalculateRouteMatrixRequestCarModeOptions.


        :return: The avoid_tolls of this CalculateRouteMatrixRequestCarModeOptions.
        :rtype: bool
        """
        return self._avoid_tolls

    @avoid_tolls.setter
    def avoid_tolls(self, avoid_tolls):
        """Sets the avoid_tolls of this CalculateRouteMatrixRequestCarModeOptions.


        :param avoid_tolls: The avoid_tolls of this CalculateRouteMatrixRequestCarModeOptions.
        :type avoid_tolls: bool
        """

        self._avoid_tolls = avoid_tolls
