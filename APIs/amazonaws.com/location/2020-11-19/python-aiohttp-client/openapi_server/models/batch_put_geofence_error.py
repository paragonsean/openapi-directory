# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_delete_geofence_error_error import BatchDeleteGeofenceErrorError
from openapi_server import util


class BatchPutGeofenceError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: BatchDeleteGeofenceErrorError=None, geofence_id: str=None):
        """BatchPutGeofenceError - a model defined in OpenAPI

        :param error: The error of this BatchPutGeofenceError.
        :param geofence_id: The geofence_id of this BatchPutGeofenceError.
        """
        self.openapi_types = {
            'error': BatchDeleteGeofenceErrorError,
            'geofence_id': str
        }

        self.attribute_map = {
            'error': 'Error',
            'geofence_id': 'GeofenceId'
        }

        self._error = error
        self._geofence_id = geofence_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPutGeofenceError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPutGeofenceError of this BatchPutGeofenceError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this BatchPutGeofenceError.


        :return: The error of this BatchPutGeofenceError.
        :rtype: BatchDeleteGeofenceErrorError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BatchPutGeofenceError.


        :param error: The error of this BatchPutGeofenceError.
        :type error: BatchDeleteGeofenceErrorError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def geofence_id(self):
        """Gets the geofence_id of this BatchPutGeofenceError.


        :return: The geofence_id of this BatchPutGeofenceError.
        :rtype: str
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this BatchPutGeofenceError.


        :param geofence_id: The geofence_id of this BatchPutGeofenceError.
        :type geofence_id: str
        """
        if geofence_id is None:
            raise ValueError("Invalid value for `geofence_id`, must not be `None`")

        self._geofence_id = geofence_id
