# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distance_unit import DistanceUnit
from openapi_server import util


class CalculateRouteSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: str=None, distance: float=None, distance_unit: DistanceUnit=None, duration_seconds: float=None, route_b_box: List=None):
        """CalculateRouteSummary - a model defined in OpenAPI

        :param data_source: The data_source of this CalculateRouteSummary.
        :param distance: The distance of this CalculateRouteSummary.
        :param distance_unit: The distance_unit of this CalculateRouteSummary.
        :param duration_seconds: The duration_seconds of this CalculateRouteSummary.
        :param route_b_box: The route_b_box of this CalculateRouteSummary.
        """
        self.openapi_types = {
            'data_source': str,
            'distance': float,
            'distance_unit': DistanceUnit,
            'duration_seconds': float,
            'route_b_box': List
        }

        self.attribute_map = {
            'data_source': 'DataSource',
            'distance': 'Distance',
            'distance_unit': 'DistanceUnit',
            'duration_seconds': 'DurationSeconds',
            'route_b_box': 'RouteBBox'
        }

        self._data_source = data_source
        self._distance = distance
        self._distance_unit = distance_unit
        self._duration_seconds = duration_seconds
        self._route_b_box = route_b_box

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateRouteSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateRouteSummary of this CalculateRouteSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this CalculateRouteSummary.


        :return: The data_source of this CalculateRouteSummary.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this CalculateRouteSummary.


        :param data_source: The data_source of this CalculateRouteSummary.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def distance(self):
        """Gets the distance of this CalculateRouteSummary.


        :return: The distance of this CalculateRouteSummary.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this CalculateRouteSummary.


        :param distance: The distance of this CalculateRouteSummary.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def distance_unit(self):
        """Gets the distance_unit of this CalculateRouteSummary.


        :return: The distance_unit of this CalculateRouteSummary.
        :rtype: DistanceUnit
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this CalculateRouteSummary.


        :param distance_unit: The distance_unit of this CalculateRouteSummary.
        :type distance_unit: DistanceUnit
        """
        if distance_unit is None:
            raise ValueError("Invalid value for `distance_unit`, must not be `None`")

        self._distance_unit = distance_unit

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this CalculateRouteSummary.


        :return: The duration_seconds of this CalculateRouteSummary.
        :rtype: float
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this CalculateRouteSummary.


        :param duration_seconds: The duration_seconds of this CalculateRouteSummary.
        :type duration_seconds: float
        """
        if duration_seconds is None:
            raise ValueError("Invalid value for `duration_seconds`, must not be `None`")

        self._duration_seconds = duration_seconds

    @property
    def route_b_box(self):
        """Gets the route_b_box of this CalculateRouteSummary.


        :return: The route_b_box of this CalculateRouteSummary.
        :rtype: List
        """
        return self._route_b_box

    @route_b_box.setter
    def route_b_box(self, route_b_box):
        """Sets the route_b_box of this CalculateRouteSummary.


        :param route_b_box: The route_b_box of this CalculateRouteSummary.
        :type route_b_box: List
        """
        if route_b_box is None:
            raise ValueError("Invalid value for `route_b_box`, must not be `None`")

        self._route_b_box = route_b_box
