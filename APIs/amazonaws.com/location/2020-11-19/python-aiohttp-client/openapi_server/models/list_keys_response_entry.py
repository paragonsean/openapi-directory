# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_key_restrictions import ApiKeyRestrictions
from openapi_server import util


class ListKeysResponseEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, description: str=None, expire_time: datetime=None, key_name: str=None, restrictions: ApiKeyRestrictions=None, update_time: datetime=None):
        """ListKeysResponseEntry - a model defined in OpenAPI

        :param create_time: The create_time of this ListKeysResponseEntry.
        :param description: The description of this ListKeysResponseEntry.
        :param expire_time: The expire_time of this ListKeysResponseEntry.
        :param key_name: The key_name of this ListKeysResponseEntry.
        :param restrictions: The restrictions of this ListKeysResponseEntry.
        :param update_time: The update_time of this ListKeysResponseEntry.
        """
        self.openapi_types = {
            'create_time': datetime,
            'description': str,
            'expire_time': datetime,
            'key_name': str,
            'restrictions': ApiKeyRestrictions,
            'update_time': datetime
        }

        self.attribute_map = {
            'create_time': 'CreateTime',
            'description': 'Description',
            'expire_time': 'ExpireTime',
            'key_name': 'KeyName',
            'restrictions': 'Restrictions',
            'update_time': 'UpdateTime'
        }

        self._create_time = create_time
        self._description = description
        self._expire_time = expire_time
        self._key_name = key_name
        self._restrictions = restrictions
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListKeysResponseEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListKeysResponseEntry of this ListKeysResponseEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ListKeysResponseEntry.


        :return: The create_time of this ListKeysResponseEntry.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ListKeysResponseEntry.


        :param create_time: The create_time of this ListKeysResponseEntry.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ListKeysResponseEntry.


        :return: The description of this ListKeysResponseEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ListKeysResponseEntry.


        :param description: The description of this ListKeysResponseEntry.
        :type description: str
        """

        self._description = description

    @property
    def expire_time(self):
        """Gets the expire_time of this ListKeysResponseEntry.


        :return: The expire_time of this ListKeysResponseEntry.
        :rtype: datetime
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ListKeysResponseEntry.


        :param expire_time: The expire_time of this ListKeysResponseEntry.
        :type expire_time: datetime
        """
        if expire_time is None:
            raise ValueError("Invalid value for `expire_time`, must not be `None`")

        self._expire_time = expire_time

    @property
    def key_name(self):
        """Gets the key_name of this ListKeysResponseEntry.


        :return: The key_name of this ListKeysResponseEntry.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this ListKeysResponseEntry.


        :param key_name: The key_name of this ListKeysResponseEntry.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def restrictions(self):
        """Gets the restrictions of this ListKeysResponseEntry.


        :return: The restrictions of this ListKeysResponseEntry.
        :rtype: ApiKeyRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ListKeysResponseEntry.


        :param restrictions: The restrictions of this ListKeysResponseEntry.
        :type restrictions: ApiKeyRestrictions
        """
        if restrictions is None:
            raise ValueError("Invalid value for `restrictions`, must not be `None`")

        self._restrictions = restrictions

    @property
    def update_time(self):
        """Gets the update_time of this ListKeysResponseEntry.


        :return: The update_time of this ListKeysResponseEntry.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ListKeysResponseEntry.


        :param update_time: The update_time of this ListKeysResponseEntry.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
