# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_key_request_restrictions import CreateKeyRequestRestrictions
import re
from openapi_server import util


class CreateKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, expire_time: datetime=None, key_name: str=None, no_expiry: bool=None, restrictions: CreateKeyRequestRestrictions=None, tags: Dict[str, str]=None):
        """CreateKeyRequest - a model defined in OpenAPI

        :param description: The description of this CreateKeyRequest.
        :param expire_time: The expire_time of this CreateKeyRequest.
        :param key_name: The key_name of this CreateKeyRequest.
        :param no_expiry: The no_expiry of this CreateKeyRequest.
        :param restrictions: The restrictions of this CreateKeyRequest.
        :param tags: The tags of this CreateKeyRequest.
        """
        self.openapi_types = {
            'description': str,
            'expire_time': datetime,
            'key_name': str,
            'no_expiry': bool,
            'restrictions': CreateKeyRequestRestrictions,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'Description',
            'expire_time': 'ExpireTime',
            'key_name': 'KeyName',
            'no_expiry': 'NoExpiry',
            'restrictions': 'Restrictions',
            'tags': 'Tags'
        }

        self._description = description
        self._expire_time = expire_time
        self._key_name = key_name
        self._no_expiry = no_expiry
        self._restrictions = restrictions
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKey_request of this CreateKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateKeyRequest.

        An optional description for the API key resource.

        :return: The description of this CreateKeyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateKeyRequest.

        An optional description for the API key resource.

        :param description: The description of this CreateKeyRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def expire_time(self):
        """Gets the expire_time of this CreateKeyRequest.

        The optional timestamp for when the API key resource will expire in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. One of <code>NoExpiry</code> or <code>ExpireTime</code> must be set.

        :return: The expire_time of this CreateKeyRequest.
        :rtype: datetime
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this CreateKeyRequest.

        The optional timestamp for when the API key resource will expire in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. One of <code>NoExpiry</code> or <code>ExpireTime</code> must be set.

        :param expire_time: The expire_time of this CreateKeyRequest.
        :type expire_time: datetime
        """

        self._expire_time = expire_time

    @property
    def key_name(self):
        """Gets the key_name of this CreateKeyRequest.

        <p>A custom name for the API key resource.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique API key name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleAPIKey</code>.</p> </li> </ul>

        :return: The key_name of this CreateKeyRequest.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this CreateKeyRequest.

        <p>A custom name for the API key resource.</p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique API key name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExampleAPIKey</code>.</p> </li> </ul>

        :param key_name: The key_name of this CreateKeyRequest.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")
        if key_name is not None and len(key_name) > 100:
            raise ValueError("Invalid value for `key_name`, length must be less than or equal to `100`")
        if key_name is not None and len(key_name) < 1:
            raise ValueError("Invalid value for `key_name`, length must be greater than or equal to `1`")
        if key_name is not None and not re.search(r'^[-._\w]+$', key_name):
            raise ValueError("Invalid value for `key_name`, must be a follow pattern or equal to `/^[-._\w]+$/`")

        self._key_name = key_name

    @property
    def no_expiry(self):
        """Gets the no_expiry of this CreateKeyRequest.

        Optionally set to <code>true</code> to set no expiration time for the API key. One of <code>NoExpiry</code> or <code>ExpireTime</code> must be set.

        :return: The no_expiry of this CreateKeyRequest.
        :rtype: bool
        """
        return self._no_expiry

    @no_expiry.setter
    def no_expiry(self, no_expiry):
        """Sets the no_expiry of this CreateKeyRequest.

        Optionally set to <code>true</code> to set no expiration time for the API key. One of <code>NoExpiry</code> or <code>ExpireTime</code> must be set.

        :param no_expiry: The no_expiry of this CreateKeyRequest.
        :type no_expiry: bool
        """

        self._no_expiry = no_expiry

    @property
    def restrictions(self):
        """Gets the restrictions of this CreateKeyRequest.


        :return: The restrictions of this CreateKeyRequest.
        :rtype: CreateKeyRequestRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this CreateKeyRequest.


        :param restrictions: The restrictions of this CreateKeyRequest.
        :type restrictions: CreateKeyRequestRestrictions
        """
        if restrictions is None:
            raise ValueError("Invalid value for `restrictions`, must not be `None`")

        self._restrictions = restrictions

    @property
    def tags(self):
        """Gets the tags of this CreateKeyRequest.

        <p>Applies one or more tags to the map resource. A tag is a key-value pair that helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>

        :return: The tags of this CreateKeyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateKeyRequest.

        <p>Applies one or more tags to the map resource. A tag is a key-value pair that helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>

        :param tags: The tags of this CreateKeyRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
