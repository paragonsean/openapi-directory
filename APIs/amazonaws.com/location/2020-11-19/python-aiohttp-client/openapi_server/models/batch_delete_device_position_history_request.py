# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDeleteDevicePositionHistoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_ids: List[str]=None):
        """BatchDeleteDevicePositionHistoryRequest - a model defined in OpenAPI

        :param device_ids: The device_ids of this BatchDeleteDevicePositionHistoryRequest.
        """
        self.openapi_types = {
            'device_ids': List[str]
        }

        self.attribute_map = {
            'device_ids': 'DeviceIds'
        }

        self._device_ids = device_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDeleteDevicePositionHistoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDeleteDevicePositionHistory_request of this BatchDeleteDevicePositionHistoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_ids(self):
        """Gets the device_ids of this BatchDeleteDevicePositionHistoryRequest.

        <p>Devices whose position history you want to delete.</p> <ul> <li> <p>For example, for two devices: <code>“DeviceIds” : [DeviceId1,DeviceId2]</code> </p> </li> </ul>

        :return: The device_ids of this BatchDeleteDevicePositionHistoryRequest.
        :rtype: List[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this BatchDeleteDevicePositionHistoryRequest.

        <p>Devices whose position history you want to delete.</p> <ul> <li> <p>For example, for two devices: <code>“DeviceIds” : [DeviceId1,DeviceId2]</code> </p> </li> </ul>

        :param device_ids: The device_ids of this BatchDeleteDevicePositionHistoryRequest.
        :type device_ids: List[str]
        """
        if device_ids is None:
            raise ValueError("Invalid value for `device_ids`, must not be `None`")
        if device_ids is not None and len(device_ids) > 100:
            raise ValueError("Invalid value for `device_ids`, number of items must be less than or equal to `100`")
        if device_ids is not None and len(device_ids) < 1:
            raise ValueError("Invalid value for `device_ids`, number of items must be greater than or equal to `1`")

        self._device_ids = device_ids
