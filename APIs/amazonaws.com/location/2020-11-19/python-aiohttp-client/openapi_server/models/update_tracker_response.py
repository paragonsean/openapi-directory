# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTrackerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tracker_arn: str=None, tracker_name: str=None, update_time: datetime=None):
        """UpdateTrackerResponse - a model defined in OpenAPI

        :param tracker_arn: The tracker_arn of this UpdateTrackerResponse.
        :param tracker_name: The tracker_name of this UpdateTrackerResponse.
        :param update_time: The update_time of this UpdateTrackerResponse.
        """
        self.openapi_types = {
            'tracker_arn': str,
            'tracker_name': str,
            'update_time': datetime
        }

        self.attribute_map = {
            'tracker_arn': 'TrackerArn',
            'tracker_name': 'TrackerName',
            'update_time': 'UpdateTime'
        }

        self._tracker_arn = tracker_arn
        self._tracker_name = tracker_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTrackerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTrackerResponse of this UpdateTrackerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tracker_arn(self):
        """Gets the tracker_arn of this UpdateTrackerResponse.


        :return: The tracker_arn of this UpdateTrackerResponse.
        :rtype: str
        """
        return self._tracker_arn

    @tracker_arn.setter
    def tracker_arn(self, tracker_arn):
        """Sets the tracker_arn of this UpdateTrackerResponse.


        :param tracker_arn: The tracker_arn of this UpdateTrackerResponse.
        :type tracker_arn: str
        """
        if tracker_arn is None:
            raise ValueError("Invalid value for `tracker_arn`, must not be `None`")

        self._tracker_arn = tracker_arn

    @property
    def tracker_name(self):
        """Gets the tracker_name of this UpdateTrackerResponse.


        :return: The tracker_name of this UpdateTrackerResponse.
        :rtype: str
        """
        return self._tracker_name

    @tracker_name.setter
    def tracker_name(self, tracker_name):
        """Sets the tracker_name of this UpdateTrackerResponse.


        :param tracker_name: The tracker_name of this UpdateTrackerResponse.
        :type tracker_name: str
        """
        if tracker_name is None:
            raise ValueError("Invalid value for `tracker_name`, must not be `None`")

        self._tracker_name = tracker_name

    @property
    def update_time(self):
        """Gets the update_time of this UpdateTrackerResponse.


        :return: The update_time of this UpdateTrackerResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this UpdateTrackerResponse.


        :param update_time: The update_time of this UpdateTrackerResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
