# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_keys_request_filter import ListKeysRequestFilter
from openapi_server import util


class ListKeysRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: ListKeysRequestFilter=None, max_results: int=None, next_token: str=None):
        """ListKeysRequest - a model defined in OpenAPI

        :param filter: The filter of this ListKeysRequest.
        :param max_results: The max_results of this ListKeysRequest.
        :param next_token: The next_token of this ListKeysRequest.
        """
        self.openapi_types = {
            'filter': ListKeysRequestFilter,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'filter': 'Filter',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._filter = filter
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListKeysRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListKeys_request of this ListKeysRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this ListKeysRequest.


        :return: The filter of this ListKeysRequest.
        :rtype: ListKeysRequestFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListKeysRequest.


        :param filter: The filter of this ListKeysRequest.
        :type filter: ListKeysRequestFilter
        """

        self._filter = filter

    @property
    def max_results(self):
        """Gets the max_results of this ListKeysRequest.

        <p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>

        :return: The max_results of this ListKeysRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListKeysRequest.

        <p>An optional limit for the number of resources returned in a single call. </p> <p>Default value: <code>100</code> </p>

        :param max_results: The max_results of this ListKeysRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListKeysRequest.

        <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>

        :return: The next_token of this ListKeysRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListKeysRequest.

        <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p> <p>Default value: <code>null</code> </p>

        :param next_token: The next_token of this ListKeysRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token
