# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_map_request_configuration import CreateMapRequestConfiguration
import re
from openapi_server import util


class CreateMapRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: CreateMapRequestConfiguration=None, description: str=None, map_name: str=None, pricing_plan: str=None, tags: Dict[str, str]=None):
        """CreateMapRequest - a model defined in OpenAPI

        :param configuration: The configuration of this CreateMapRequest.
        :param description: The description of this CreateMapRequest.
        :param map_name: The map_name of this CreateMapRequest.
        :param pricing_plan: The pricing_plan of this CreateMapRequest.
        :param tags: The tags of this CreateMapRequest.
        """
        self.openapi_types = {
            'configuration': CreateMapRequestConfiguration,
            'description': str,
            'map_name': str,
            'pricing_plan': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'configuration': 'Configuration',
            'description': 'Description',
            'map_name': 'MapName',
            'pricing_plan': 'PricingPlan',
            'tags': 'Tags'
        }

        self._configuration = configuration
        self._description = description
        self._map_name = map_name
        self._pricing_plan = pricing_plan
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMapRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMap_request of this CreateMapRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this CreateMapRequest.


        :return: The configuration of this CreateMapRequest.
        :rtype: CreateMapRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateMapRequest.


        :param configuration: The configuration of this CreateMapRequest.
        :type configuration: CreateMapRequestConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def description(self):
        """Gets the description of this CreateMapRequest.

        An optional description for the map resource.

        :return: The description of this CreateMapRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMapRequest.

        An optional description for the map resource.

        :param description: The description of this CreateMapRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def map_name(self):
        """Gets the map_name of this CreateMapRequest.

        <p>The name for the map resource.</p> <p>Requirements:</p> <ul> <li> <p>Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique map resource name. </p> </li> <li> <p>No spaces allowed. For example, <code>ExampleMap</code>.</p> </li> </ul>

        :return: The map_name of this CreateMapRequest.
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name):
        """Sets the map_name of this CreateMapRequest.

        <p>The name for the map resource.</p> <p>Requirements:</p> <ul> <li> <p>Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique map resource name. </p> </li> <li> <p>No spaces allowed. For example, <code>ExampleMap</code>.</p> </li> </ul>

        :param map_name: The map_name of this CreateMapRequest.
        :type map_name: str
        """
        if map_name is None:
            raise ValueError("Invalid value for `map_name`, must not be `None`")
        if map_name is not None and len(map_name) > 100:
            raise ValueError("Invalid value for `map_name`, length must be less than or equal to `100`")
        if map_name is not None and len(map_name) < 1:
            raise ValueError("Invalid value for `map_name`, length must be greater than or equal to `1`")
        if map_name is not None and not re.search(r'^[-._\w]+$', map_name):
            raise ValueError("Invalid value for `map_name`, must be a follow pattern or equal to `/^[-._\w]+$/`")

        self._map_name = map_name

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this CreateMapRequest.

        No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.

        :return: The pricing_plan of this CreateMapRequest.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this CreateMapRequest.

        No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.

        :param pricing_plan: The pricing_plan of this CreateMapRequest.
        :type pricing_plan: str
        """
        allowed_values = ["RequestBasedUsage", "MobileAssetTracking", "MobileAssetManagement"]  # noqa: E501
        if pricing_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_plan` ({0}), must be one of {1}"
                .format(pricing_plan, allowed_values)
            )

        self._pricing_plan = pricing_plan

    @property
    def tags(self):
        """Gets the tags of this CreateMapRequest.

        <p>Applies one or more tags to the map resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>

        :return: The tags of this CreateMapRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMapRequest.

        <p>Applies one or more tags to the map resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>

        :param tags: The tags of this CreateMapRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
