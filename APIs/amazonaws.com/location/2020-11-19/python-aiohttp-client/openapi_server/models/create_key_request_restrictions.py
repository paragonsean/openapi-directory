# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateKeyRequestRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_actions: List=None, allow_referers: List=None, allow_resources: List=None):
        """CreateKeyRequestRestrictions - a model defined in OpenAPI

        :param allow_actions: The allow_actions of this CreateKeyRequestRestrictions.
        :param allow_referers: The allow_referers of this CreateKeyRequestRestrictions.
        :param allow_resources: The allow_resources of this CreateKeyRequestRestrictions.
        """
        self.openapi_types = {
            'allow_actions': List,
            'allow_referers': List,
            'allow_resources': List
        }

        self.attribute_map = {
            'allow_actions': 'AllowActions',
            'allow_referers': 'AllowReferers',
            'allow_resources': 'AllowResources'
        }

        self._allow_actions = allow_actions
        self._allow_referers = allow_referers
        self._allow_resources = allow_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeyRequestRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKeyRequest_Restrictions of this CreateKeyRequestRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_actions(self):
        """Gets the allow_actions of this CreateKeyRequestRestrictions.


        :return: The allow_actions of this CreateKeyRequestRestrictions.
        :rtype: List
        """
        return self._allow_actions

    @allow_actions.setter
    def allow_actions(self, allow_actions):
        """Sets the allow_actions of this CreateKeyRequestRestrictions.


        :param allow_actions: The allow_actions of this CreateKeyRequestRestrictions.
        :type allow_actions: List
        """
        if allow_actions is None:
            raise ValueError("Invalid value for `allow_actions`, must not be `None`")

        self._allow_actions = allow_actions

    @property
    def allow_referers(self):
        """Gets the allow_referers of this CreateKeyRequestRestrictions.


        :return: The allow_referers of this CreateKeyRequestRestrictions.
        :rtype: List
        """
        return self._allow_referers

    @allow_referers.setter
    def allow_referers(self, allow_referers):
        """Sets the allow_referers of this CreateKeyRequestRestrictions.


        :param allow_referers: The allow_referers of this CreateKeyRequestRestrictions.
        :type allow_referers: List
        """

        self._allow_referers = allow_referers

    @property
    def allow_resources(self):
        """Gets the allow_resources of this CreateKeyRequestRestrictions.


        :return: The allow_resources of this CreateKeyRequestRestrictions.
        :rtype: List
        """
        return self._allow_resources

    @allow_resources.setter
    def allow_resources(self, allow_resources):
        """Sets the allow_resources of this CreateKeyRequestRestrictions.


        :param allow_resources: The allow_resources of this CreateKeyRequestRestrictions.
        :type allow_resources: List
        """
        if allow_resources is None:
            raise ValueError("Invalid value for `allow_resources`, must not be `None`")

        self._allow_resources = allow_resources
