# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_place_index_request_data_source_configuration import CreatePlaceIndexRequestDataSourceConfiguration
import re
from openapi_server import util


class CreatePlaceIndexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: str=None, data_source_configuration: CreatePlaceIndexRequestDataSourceConfiguration=None, description: str=None, index_name: str=None, pricing_plan: str=None, tags: Dict[str, str]=None):
        """CreatePlaceIndexRequest - a model defined in OpenAPI

        :param data_source: The data_source of this CreatePlaceIndexRequest.
        :param data_source_configuration: The data_source_configuration of this CreatePlaceIndexRequest.
        :param description: The description of this CreatePlaceIndexRequest.
        :param index_name: The index_name of this CreatePlaceIndexRequest.
        :param pricing_plan: The pricing_plan of this CreatePlaceIndexRequest.
        :param tags: The tags of this CreatePlaceIndexRequest.
        """
        self.openapi_types = {
            'data_source': str,
            'data_source_configuration': CreatePlaceIndexRequestDataSourceConfiguration,
            'description': str,
            'index_name': str,
            'pricing_plan': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'data_source': 'DataSource',
            'data_source_configuration': 'DataSourceConfiguration',
            'description': 'Description',
            'index_name': 'IndexName',
            'pricing_plan': 'PricingPlan',
            'tags': 'Tags'
        }

        self._data_source = data_source
        self._data_source_configuration = data_source_configuration
        self._description = description
        self._index_name = index_name
        self._pricing_plan = pricing_plan
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePlaceIndexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePlaceIndex_request of this CreatePlaceIndexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this CreatePlaceIndexRequest.

        <p>Specifies the geospatial data provider for the new place index.</p> <note> <p>This field is case-sensitive. Enter the valid values as shown. For example, entering <code>HERE</code> returns an error.</p> </note> <p>Valid values include:</p> <ul> <li> <p> <code>Esri</code> – For additional information about <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/esri.html\">Esri</a>'s coverage in your region of interest, see <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocode-coverage.htm\">Esri details on geocoding coverage</a>.</p> </li> <li> <p> <code>Grab</code> – Grab provides place index functionality for Southeast Asia. For additional information about <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a>' coverage, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html#grab-coverage-area\">GrabMaps countries and areas covered</a>.</p> </li> <li> <p> <code>Here</code> – For additional information about <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/HERE.html\">HERE Technologies</a>' coverage in your region of interest, see <a href=\"https://developer.here.com/documentation/geocoder/dev_guide/topics/coverage-geocoder.html\">HERE details on goecoding coverage</a>.</p> <important> <p>If you specify HERE Technologies (<code>Here</code>) as the data provider, you may not <a href=\"https://docs.aws.amazon.com/location-places/latest/APIReference/API_DataSourceConfiguration.html\">store results</a> for locations in Japan. For more information, see the <a href=\"http://aws.amazon.com/service-terms/\">Amazon Web Services Service Terms</a> for Amazon Location Service.</p> </important> </li> </ul> <p>For additional information , see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html\">Data providers</a> on the <i>Amazon Location Service Developer Guide</i>.</p>

        :return: The data_source of this CreatePlaceIndexRequest.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this CreatePlaceIndexRequest.

        <p>Specifies the geospatial data provider for the new place index.</p> <note> <p>This field is case-sensitive. Enter the valid values as shown. For example, entering <code>HERE</code> returns an error.</p> </note> <p>Valid values include:</p> <ul> <li> <p> <code>Esri</code> – For additional information about <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/esri.html\">Esri</a>'s coverage in your region of interest, see <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocode-coverage.htm\">Esri details on geocoding coverage</a>.</p> </li> <li> <p> <code>Grab</code> – Grab provides place index functionality for Southeast Asia. For additional information about <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html\">GrabMaps</a>' coverage, see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/grab.html#grab-coverage-area\">GrabMaps countries and areas covered</a>.</p> </li> <li> <p> <code>Here</code> – For additional information about <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/HERE.html\">HERE Technologies</a>' coverage in your region of interest, see <a href=\"https://developer.here.com/documentation/geocoder/dev_guide/topics/coverage-geocoder.html\">HERE details on goecoding coverage</a>.</p> <important> <p>If you specify HERE Technologies (<code>Here</code>) as the data provider, you may not <a href=\"https://docs.aws.amazon.com/location-places/latest/APIReference/API_DataSourceConfiguration.html\">store results</a> for locations in Japan. For more information, see the <a href=\"http://aws.amazon.com/service-terms/\">Amazon Web Services Service Terms</a> for Amazon Location Service.</p> </important> </li> </ul> <p>For additional information , see <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html\">Data providers</a> on the <i>Amazon Location Service Developer Guide</i>.</p>

        :param data_source: The data_source of this CreatePlaceIndexRequest.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def data_source_configuration(self):
        """Gets the data_source_configuration of this CreatePlaceIndexRequest.


        :return: The data_source_configuration of this CreatePlaceIndexRequest.
        :rtype: CreatePlaceIndexRequestDataSourceConfiguration
        """
        return self._data_source_configuration

    @data_source_configuration.setter
    def data_source_configuration(self, data_source_configuration):
        """Sets the data_source_configuration of this CreatePlaceIndexRequest.


        :param data_source_configuration: The data_source_configuration of this CreatePlaceIndexRequest.
        :type data_source_configuration: CreatePlaceIndexRequestDataSourceConfiguration
        """

        self._data_source_configuration = data_source_configuration

    @property
    def description(self):
        """Gets the description of this CreatePlaceIndexRequest.

        The optional description for the place index resource.

        :return: The description of this CreatePlaceIndexRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePlaceIndexRequest.

        The optional description for the place index resource.

        :param description: The description of this CreatePlaceIndexRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def index_name(self):
        """Gets the index_name of this CreatePlaceIndexRequest.

        <p>The name of the place index resource. </p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).</p> </li> <li> <p>Must be a unique place index resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExamplePlaceIndex</code>.</p> </li> </ul>

        :return: The index_name of this CreatePlaceIndexRequest.
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this CreatePlaceIndexRequest.

        <p>The name of the place index resource. </p> <p>Requirements:</p> <ul> <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).</p> </li> <li> <p>Must be a unique place index resource name.</p> </li> <li> <p>No spaces allowed. For example, <code>ExamplePlaceIndex</code>.</p> </li> </ul>

        :param index_name: The index_name of this CreatePlaceIndexRequest.
        :type index_name: str
        """
        if index_name is None:
            raise ValueError("Invalid value for `index_name`, must not be `None`")
        if index_name is not None and len(index_name) > 100:
            raise ValueError("Invalid value for `index_name`, length must be less than or equal to `100`")
        if index_name is not None and len(index_name) < 1:
            raise ValueError("Invalid value for `index_name`, length must be greater than or equal to `1`")
        if index_name is not None and not re.search(r'^[-._\w]+$', index_name):
            raise ValueError("Invalid value for `index_name`, must be a follow pattern or equal to `/^[-._\w]+$/`")

        self._index_name = index_name

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this CreatePlaceIndexRequest.

        No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.

        :return: The pricing_plan of this CreatePlaceIndexRequest.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this CreatePlaceIndexRequest.

        No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.

        :param pricing_plan: The pricing_plan of this CreatePlaceIndexRequest.
        :type pricing_plan: str
        """
        allowed_values = ["RequestBasedUsage", "MobileAssetTracking", "MobileAssetManagement"]  # noqa: E501
        if pricing_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_plan` ({0}), must be one of {1}"
                .format(pricing_plan, allowed_values)
            )

        self._pricing_plan = pricing_plan

    @property
    def tags(self):
        """Gets the tags of this CreatePlaceIndexRequest.

        <p>Applies one or more tags to the place index resource. A tag is a key-value pair that helps you manage, identify, search, and filter your resources.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource.</p> </li> <li> <p>Each tag key must be unique and must have exactly one associated value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @</p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>

        :return: The tags of this CreatePlaceIndexRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePlaceIndexRequest.

        <p>Applies one or more tags to the place index resource. A tag is a key-value pair that helps you manage, identify, search, and filter your resources.</p> <p>Format: <code>\"key\" : \"value\"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource.</p> </li> <li> <p>Each tag key must be unique and must have exactly one associated value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @</p> </li> <li> <p>Cannot use \"aws:\" as a prefix for a key.</p> </li> </ul>

        :param tags: The tags of this CreatePlaceIndexRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
