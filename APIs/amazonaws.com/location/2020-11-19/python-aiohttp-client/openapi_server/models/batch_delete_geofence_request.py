# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDeleteGeofenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geofence_ids: List[str]=None):
        """BatchDeleteGeofenceRequest - a model defined in OpenAPI

        :param geofence_ids: The geofence_ids of this BatchDeleteGeofenceRequest.
        """
        self.openapi_types = {
            'geofence_ids': List[str]
        }

        self.attribute_map = {
            'geofence_ids': 'GeofenceIds'
        }

        self._geofence_ids = geofence_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDeleteGeofenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDeleteGeofence_request of this BatchDeleteGeofenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geofence_ids(self):
        """Gets the geofence_ids of this BatchDeleteGeofenceRequest.

        The batch of geofences to be deleted.

        :return: The geofence_ids of this BatchDeleteGeofenceRequest.
        :rtype: List[str]
        """
        return self._geofence_ids

    @geofence_ids.setter
    def geofence_ids(self, geofence_ids):
        """Sets the geofence_ids of this BatchDeleteGeofenceRequest.

        The batch of geofences to be deleted.

        :param geofence_ids: The geofence_ids of this BatchDeleteGeofenceRequest.
        :type geofence_ids: List[str]
        """
        if geofence_ids is None:
            raise ValueError("Invalid value for `geofence_ids`, must not be `None`")
        if geofence_ids is not None and len(geofence_ids) > 10:
            raise ValueError("Invalid value for `geofence_ids`, number of items must be less than or equal to `10`")
        if geofence_ids is not None and len(geofence_ids) < 1:
            raise ValueError("Invalid value for `geofence_ids`, number of items must be greater than or equal to `1`")

        self._geofence_ids = geofence_ids
