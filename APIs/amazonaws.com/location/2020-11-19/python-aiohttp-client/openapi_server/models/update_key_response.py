# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateKeyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_arn: str=None, key_name: str=None, update_time: datetime=None):
        """UpdateKeyResponse - a model defined in OpenAPI

        :param key_arn: The key_arn of this UpdateKeyResponse.
        :param key_name: The key_name of this UpdateKeyResponse.
        :param update_time: The update_time of this UpdateKeyResponse.
        """
        self.openapi_types = {
            'key_arn': str,
            'key_name': str,
            'update_time': datetime
        }

        self.attribute_map = {
            'key_arn': 'KeyArn',
            'key_name': 'KeyName',
            'update_time': 'UpdateTime'
        }

        self._key_arn = key_arn
        self._key_name = key_name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateKeyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateKeyResponse of this UpdateKeyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_arn(self):
        """Gets the key_arn of this UpdateKeyResponse.


        :return: The key_arn of this UpdateKeyResponse.
        :rtype: str
        """
        return self._key_arn

    @key_arn.setter
    def key_arn(self, key_arn):
        """Sets the key_arn of this UpdateKeyResponse.


        :param key_arn: The key_arn of this UpdateKeyResponse.
        :type key_arn: str
        """
        if key_arn is None:
            raise ValueError("Invalid value for `key_arn`, must not be `None`")

        self._key_arn = key_arn

    @property
    def key_name(self):
        """Gets the key_name of this UpdateKeyResponse.


        :return: The key_name of this UpdateKeyResponse.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this UpdateKeyResponse.


        :param key_name: The key_name of this UpdateKeyResponse.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def update_time(self):
        """Gets the update_time of this UpdateKeyResponse.


        :return: The update_time of this UpdateKeyResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this UpdateKeyResponse.


        :param update_time: The update_time of this UpdateKeyResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
