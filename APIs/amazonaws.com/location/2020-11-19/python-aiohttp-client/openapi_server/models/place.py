# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_geometry import PlaceGeometry
from openapi_server.models.place_time_zone import PlaceTimeZone
from openapi_server import util


class Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_number: str=None, categories: List=None, country: str=None, geometry: PlaceGeometry=None, interpolated: bool=None, label: str=None, municipality: str=None, neighborhood: str=None, postal_code: str=None, region: str=None, street: str=None, sub_region: str=None, supplemental_categories: List=None, time_zone: PlaceTimeZone=None, unit_number: str=None, unit_type: str=None):
        """Place - a model defined in OpenAPI

        :param address_number: The address_number of this Place.
        :param categories: The categories of this Place.
        :param country: The country of this Place.
        :param geometry: The geometry of this Place.
        :param interpolated: The interpolated of this Place.
        :param label: The label of this Place.
        :param municipality: The municipality of this Place.
        :param neighborhood: The neighborhood of this Place.
        :param postal_code: The postal_code of this Place.
        :param region: The region of this Place.
        :param street: The street of this Place.
        :param sub_region: The sub_region of this Place.
        :param supplemental_categories: The supplemental_categories of this Place.
        :param time_zone: The time_zone of this Place.
        :param unit_number: The unit_number of this Place.
        :param unit_type: The unit_type of this Place.
        """
        self.openapi_types = {
            'address_number': str,
            'categories': List,
            'country': str,
            'geometry': PlaceGeometry,
            'interpolated': bool,
            'label': str,
            'municipality': str,
            'neighborhood': str,
            'postal_code': str,
            'region': str,
            'street': str,
            'sub_region': str,
            'supplemental_categories': List,
            'time_zone': PlaceTimeZone,
            'unit_number': str,
            'unit_type': str
        }

        self.attribute_map = {
            'address_number': 'AddressNumber',
            'categories': 'Categories',
            'country': 'Country',
            'geometry': 'Geometry',
            'interpolated': 'Interpolated',
            'label': 'Label',
            'municipality': 'Municipality',
            'neighborhood': 'Neighborhood',
            'postal_code': 'PostalCode',
            'region': 'Region',
            'street': 'Street',
            'sub_region': 'SubRegion',
            'supplemental_categories': 'SupplementalCategories',
            'time_zone': 'TimeZone',
            'unit_number': 'UnitNumber',
            'unit_type': 'UnitType'
        }

        self._address_number = address_number
        self._categories = categories
        self._country = country
        self._geometry = geometry
        self._interpolated = interpolated
        self._label = label
        self._municipality = municipality
        self._neighborhood = neighborhood
        self._postal_code = postal_code
        self._region = region
        self._street = street
        self._sub_region = sub_region
        self._supplemental_categories = supplemental_categories
        self._time_zone = time_zone
        self._unit_number = unit_number
        self._unit_type = unit_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Place of this Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_number(self):
        """Gets the address_number of this Place.


        :return: The address_number of this Place.
        :rtype: str
        """
        return self._address_number

    @address_number.setter
    def address_number(self, address_number):
        """Sets the address_number of this Place.


        :param address_number: The address_number of this Place.
        :type address_number: str
        """

        self._address_number = address_number

    @property
    def categories(self):
        """Gets the categories of this Place.


        :return: The categories of this Place.
        :rtype: List
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Place.


        :param categories: The categories of this Place.
        :type categories: List
        """

        self._categories = categories

    @property
    def country(self):
        """Gets the country of this Place.


        :return: The country of this Place.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Place.


        :param country: The country of this Place.
        :type country: str
        """

        self._country = country

    @property
    def geometry(self):
        """Gets the geometry of this Place.


        :return: The geometry of this Place.
        :rtype: PlaceGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Place.


        :param geometry: The geometry of this Place.
        :type geometry: PlaceGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")

        self._geometry = geometry

    @property
    def interpolated(self):
        """Gets the interpolated of this Place.


        :return: The interpolated of this Place.
        :rtype: bool
        """
        return self._interpolated

    @interpolated.setter
    def interpolated(self, interpolated):
        """Sets the interpolated of this Place.


        :param interpolated: The interpolated of this Place.
        :type interpolated: bool
        """

        self._interpolated = interpolated

    @property
    def label(self):
        """Gets the label of this Place.


        :return: The label of this Place.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Place.


        :param label: The label of this Place.
        :type label: str
        """

        self._label = label

    @property
    def municipality(self):
        """Gets the municipality of this Place.


        :return: The municipality of this Place.
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Place.


        :param municipality: The municipality of this Place.
        :type municipality: str
        """

        self._municipality = municipality

    @property
    def neighborhood(self):
        """Gets the neighborhood of this Place.


        :return: The neighborhood of this Place.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this Place.


        :param neighborhood: The neighborhood of this Place.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def postal_code(self):
        """Gets the postal_code of this Place.


        :return: The postal_code of this Place.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Place.


        :param postal_code: The postal_code of this Place.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Place.


        :return: The region of this Place.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Place.


        :param region: The region of this Place.
        :type region: str
        """

        self._region = region

    @property
    def street(self):
        """Gets the street of this Place.


        :return: The street of this Place.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Place.


        :param street: The street of this Place.
        :type street: str
        """

        self._street = street

    @property
    def sub_region(self):
        """Gets the sub_region of this Place.


        :return: The sub_region of this Place.
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region):
        """Sets the sub_region of this Place.


        :param sub_region: The sub_region of this Place.
        :type sub_region: str
        """

        self._sub_region = sub_region

    @property
    def supplemental_categories(self):
        """Gets the supplemental_categories of this Place.


        :return: The supplemental_categories of this Place.
        :rtype: List
        """
        return self._supplemental_categories

    @supplemental_categories.setter
    def supplemental_categories(self, supplemental_categories):
        """Sets the supplemental_categories of this Place.


        :param supplemental_categories: The supplemental_categories of this Place.
        :type supplemental_categories: List
        """

        self._supplemental_categories = supplemental_categories

    @property
    def time_zone(self):
        """Gets the time_zone of this Place.


        :return: The time_zone of this Place.
        :rtype: PlaceTimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Place.


        :param time_zone: The time_zone of this Place.
        :type time_zone: PlaceTimeZone
        """

        self._time_zone = time_zone

    @property
    def unit_number(self):
        """Gets the unit_number of this Place.


        :return: The unit_number of this Place.
        :rtype: str
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this Place.


        :param unit_number: The unit_number of this Place.
        :type unit_number: str
        """

        self._unit_number = unit_number

    @property
    def unit_type(self):
        """Gets the unit_type of this Place.


        :return: The unit_type of this Place.
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this Place.


        :param unit_type: The unit_type of this Place.
        :type unit_type: str
        """

        self._unit_type = unit_type
