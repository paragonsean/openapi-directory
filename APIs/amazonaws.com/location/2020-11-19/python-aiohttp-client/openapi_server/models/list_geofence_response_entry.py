# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_geofence_response_geometry import GetGeofenceResponseGeometry
from openapi_server import util


class ListGeofenceResponseEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, geofence_id: str=None, geofence_properties: Dict=None, geometry: GetGeofenceResponseGeometry=None, status: str=None, update_time: datetime=None):
        """ListGeofenceResponseEntry - a model defined in OpenAPI

        :param create_time: The create_time of this ListGeofenceResponseEntry.
        :param geofence_id: The geofence_id of this ListGeofenceResponseEntry.
        :param geofence_properties: The geofence_properties of this ListGeofenceResponseEntry.
        :param geometry: The geometry of this ListGeofenceResponseEntry.
        :param status: The status of this ListGeofenceResponseEntry.
        :param update_time: The update_time of this ListGeofenceResponseEntry.
        """
        self.openapi_types = {
            'create_time': datetime,
            'geofence_id': str,
            'geofence_properties': Dict,
            'geometry': GetGeofenceResponseGeometry,
            'status': str,
            'update_time': datetime
        }

        self.attribute_map = {
            'create_time': 'CreateTime',
            'geofence_id': 'GeofenceId',
            'geofence_properties': 'GeofenceProperties',
            'geometry': 'Geometry',
            'status': 'Status',
            'update_time': 'UpdateTime'
        }

        self._create_time = create_time
        self._geofence_id = geofence_id
        self._geofence_properties = geofence_properties
        self._geometry = geometry
        self._status = status
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListGeofenceResponseEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListGeofenceResponseEntry of this ListGeofenceResponseEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ListGeofenceResponseEntry.


        :return: The create_time of this ListGeofenceResponseEntry.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ListGeofenceResponseEntry.


        :param create_time: The create_time of this ListGeofenceResponseEntry.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def geofence_id(self):
        """Gets the geofence_id of this ListGeofenceResponseEntry.


        :return: The geofence_id of this ListGeofenceResponseEntry.
        :rtype: str
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this ListGeofenceResponseEntry.


        :param geofence_id: The geofence_id of this ListGeofenceResponseEntry.
        :type geofence_id: str
        """
        if geofence_id is None:
            raise ValueError("Invalid value for `geofence_id`, must not be `None`")

        self._geofence_id = geofence_id

    @property
    def geofence_properties(self):
        """Gets the geofence_properties of this ListGeofenceResponseEntry.


        :return: The geofence_properties of this ListGeofenceResponseEntry.
        :rtype: Dict
        """
        return self._geofence_properties

    @geofence_properties.setter
    def geofence_properties(self, geofence_properties):
        """Sets the geofence_properties of this ListGeofenceResponseEntry.


        :param geofence_properties: The geofence_properties of this ListGeofenceResponseEntry.
        :type geofence_properties: Dict
        """

        self._geofence_properties = geofence_properties

    @property
    def geometry(self):
        """Gets the geometry of this ListGeofenceResponseEntry.


        :return: The geometry of this ListGeofenceResponseEntry.
        :rtype: GetGeofenceResponseGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this ListGeofenceResponseEntry.


        :param geometry: The geometry of this ListGeofenceResponseEntry.
        :type geometry: GetGeofenceResponseGeometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")

        self._geometry = geometry

    @property
    def status(self):
        """Gets the status of this ListGeofenceResponseEntry.


        :return: The status of this ListGeofenceResponseEntry.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListGeofenceResponseEntry.


        :param status: The status of this ListGeofenceResponseEntry.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this ListGeofenceResponseEntry.


        :return: The update_time of this ListGeofenceResponseEntry.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ListGeofenceResponseEntry.


        :param update_time: The update_time of this ListGeofenceResponseEntry.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
