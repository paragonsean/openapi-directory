# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutGeofenceRequestGeometryCircle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, center: List=None, radius: float=None):
        """PutGeofenceRequestGeometryCircle - a model defined in OpenAPI

        :param center: The center of this PutGeofenceRequestGeometryCircle.
        :param radius: The radius of this PutGeofenceRequestGeometryCircle.
        """
        self.openapi_types = {
            'center': List,
            'radius': float
        }

        self.attribute_map = {
            'center': 'Center',
            'radius': 'Radius'
        }

        self._center = center
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutGeofenceRequestGeometryCircle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutGeofence_request_Geometry_Circle of this PutGeofenceRequestGeometryCircle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def center(self):
        """Gets the center of this PutGeofenceRequestGeometryCircle.


        :return: The center of this PutGeofenceRequestGeometryCircle.
        :rtype: List
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this PutGeofenceRequestGeometryCircle.


        :param center: The center of this PutGeofenceRequestGeometryCircle.
        :type center: List
        """
        if center is None:
            raise ValueError("Invalid value for `center`, must not be `None`")

        self._center = center

    @property
    def radius(self):
        """Gets the radius of this PutGeofenceRequestGeometryCircle.


        :return: The radius of this PutGeofenceRequestGeometryCircle.
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this PutGeofenceRequestGeometryCircle.


        :param radius: The radius of this PutGeofenceRequestGeometryCircle.
        :type radius: float
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")

        self._radius = radius
