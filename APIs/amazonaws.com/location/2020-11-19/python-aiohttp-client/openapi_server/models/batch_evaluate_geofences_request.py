# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_position_update import DevicePositionUpdate
from openapi_server import util


class BatchEvaluateGeofencesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_position_updates: List[DevicePositionUpdate]=None):
        """BatchEvaluateGeofencesRequest - a model defined in OpenAPI

        :param device_position_updates: The device_position_updates of this BatchEvaluateGeofencesRequest.
        """
        self.openapi_types = {
            'device_position_updates': List[DevicePositionUpdate]
        }

        self.attribute_map = {
            'device_position_updates': 'DevicePositionUpdates'
        }

        self._device_position_updates = device_position_updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchEvaluateGeofencesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchEvaluateGeofences_request of this BatchEvaluateGeofencesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_position_updates(self):
        """Gets the device_position_updates of this BatchEvaluateGeofencesRequest.

        Contains device details for each device to be evaluated against the given geofence collection.

        :return: The device_position_updates of this BatchEvaluateGeofencesRequest.
        :rtype: List[DevicePositionUpdate]
        """
        return self._device_position_updates

    @device_position_updates.setter
    def device_position_updates(self, device_position_updates):
        """Sets the device_position_updates of this BatchEvaluateGeofencesRequest.

        Contains device details for each device to be evaluated against the given geofence collection.

        :param device_position_updates: The device_position_updates of this BatchEvaluateGeofencesRequest.
        :type device_position_updates: List[DevicePositionUpdate]
        """
        if device_position_updates is None:
            raise ValueError("Invalid value for `device_position_updates`, must not be `None`")
        if device_position_updates is not None and len(device_position_updates) > 10:
            raise ValueError("Invalid value for `device_position_updates`, number of items must be less than or equal to `10`")
        if device_position_updates is not None and len(device_position_updates) < 1:
            raise ValueError("Invalid value for `device_position_updates`, number of items must be greater than or equal to `1`")

        self._device_position_updates = device_position_updates
