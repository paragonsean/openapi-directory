# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_place_response_place import GetPlaceResponsePlace
from openapi_server import util


class GetPlaceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, place: GetPlaceResponsePlace=None):
        """GetPlaceResponse - a model defined in OpenAPI

        :param place: The place of this GetPlaceResponse.
        """
        self.openapi_types = {
            'place': GetPlaceResponsePlace
        }

        self.attribute_map = {
            'place': 'Place'
        }

        self._place = place

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPlaceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPlaceResponse of this GetPlaceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def place(self):
        """Gets the place of this GetPlaceResponse.


        :return: The place of this GetPlaceResponse.
        :rtype: GetPlaceResponsePlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this GetPlaceResponse.


        :param place: The place of this GetPlaceResponse.
        :type place: GetPlaceResponsePlace
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")

        self._place = place
