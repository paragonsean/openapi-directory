# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchPlaceIndexForPositionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None, max_results: int=None, position: List[float]=None):
        """SearchPlaceIndexForPositionRequest - a model defined in OpenAPI

        :param language: The language of this SearchPlaceIndexForPositionRequest.
        :param max_results: The max_results of this SearchPlaceIndexForPositionRequest.
        :param position: The position of this SearchPlaceIndexForPositionRequest.
        """
        self.openapi_types = {
            'language': str,
            'max_results': int,
            'position': List[float]
        }

        self.attribute_map = {
            'language': 'Language',
            'max_results': 'MaxResults',
            'position': 'Position'
        }

        self._language = language
        self._max_results = max_results
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchPlaceIndexForPositionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchPlaceIndexForPosition_request of this SearchPlaceIndexForPositionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this SearchPlaceIndexForPositionRequest.

        <p>The preferred language used to return results. The value must be a valid <a href=\"https://tools.ietf.org/search/bcp47\">BCP 47</a> language tag, for example, <code>en</code> for English.</p> <p>This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p> <p>For an example, we'll use the Greek language. You search for a location around Athens, Greece, with the <code>language</code> parameter set to <code>en</code>. The <code>city</code> in the results will most likely be returned as <code>Athens</code>.</p> <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the <code>city</code> in the results will more likely be returned as <code>Αθήνα</code>.</p> <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>

        :return: The language of this SearchPlaceIndexForPositionRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SearchPlaceIndexForPositionRequest.

        <p>The preferred language used to return results. The value must be a valid <a href=\"https://tools.ietf.org/search/bcp47\">BCP 47</a> language tag, for example, <code>en</code> for English.</p> <p>This setting affects the languages used in the results, but not the results themselves. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p> <p>For an example, we'll use the Greek language. You search for a location around Athens, Greece, with the <code>language</code> parameter set to <code>en</code>. The <code>city</code> in the results will most likely be returned as <code>Athens</code>.</p> <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the <code>city</code> in the results will more likely be returned as <code>Αθήνα</code>.</p> <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>

        :param language: The language of this SearchPlaceIndexForPositionRequest.
        :type language: str
        """
        if language is not None and len(language) > 35:
            raise ValueError("Invalid value for `language`, length must be less than or equal to `35`")
        if language is not None and len(language) < 2:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `2`")

        self._language = language

    @property
    def max_results(self):
        """Gets the max_results of this SearchPlaceIndexForPositionRequest.

        <p>An optional parameter. The maximum number of results returned per request.</p> <p>Default value: <code>50</code> </p>

        :return: The max_results of this SearchPlaceIndexForPositionRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchPlaceIndexForPositionRequest.

        <p>An optional parameter. The maximum number of results returned per request.</p> <p>Default value: <code>50</code> </p>

        :param max_results: The max_results of this SearchPlaceIndexForPositionRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def position(self):
        """Gets the position of this SearchPlaceIndexForPositionRequest.

        <p>Specifies the longitude and latitude of the position to query.</p> <p> This parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p> <p>For example, <code>[-123.1174, 49.2847]</code> represents a position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>

        :return: The position of this SearchPlaceIndexForPositionRequest.
        :rtype: List[float]
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SearchPlaceIndexForPositionRequest.

        <p>Specifies the longitude and latitude of the position to query.</p> <p> This parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p> <p>For example, <code>[-123.1174, 49.2847]</code> represents a position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>

        :param position: The position of this SearchPlaceIndexForPositionRequest.
        :type position: List[float]
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position is not None and len(position) > 2:
            raise ValueError("Invalid value for `position`, number of items must be less than or equal to `2`")
        if position is not None and len(position) < 2:
            raise ValueError("Invalid value for `position`, number of items must be greater than or equal to `2`")

        self._position = position
