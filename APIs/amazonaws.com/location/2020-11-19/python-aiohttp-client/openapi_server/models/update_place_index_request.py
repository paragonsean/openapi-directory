# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_place_index_request_data_source_configuration import CreatePlaceIndexRequestDataSourceConfiguration
from openapi_server import util


class UpdatePlaceIndexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_configuration: CreatePlaceIndexRequestDataSourceConfiguration=None, description: str=None, pricing_plan: str=None):
        """UpdatePlaceIndexRequest - a model defined in OpenAPI

        :param data_source_configuration: The data_source_configuration of this UpdatePlaceIndexRequest.
        :param description: The description of this UpdatePlaceIndexRequest.
        :param pricing_plan: The pricing_plan of this UpdatePlaceIndexRequest.
        """
        self.openapi_types = {
            'data_source_configuration': CreatePlaceIndexRequestDataSourceConfiguration,
            'description': str,
            'pricing_plan': str
        }

        self.attribute_map = {
            'data_source_configuration': 'DataSourceConfiguration',
            'description': 'Description',
            'pricing_plan': 'PricingPlan'
        }

        self._data_source_configuration = data_source_configuration
        self._description = description
        self._pricing_plan = pricing_plan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePlaceIndexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePlaceIndex_request of this UpdatePlaceIndexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_configuration(self):
        """Gets the data_source_configuration of this UpdatePlaceIndexRequest.


        :return: The data_source_configuration of this UpdatePlaceIndexRequest.
        :rtype: CreatePlaceIndexRequestDataSourceConfiguration
        """
        return self._data_source_configuration

    @data_source_configuration.setter
    def data_source_configuration(self, data_source_configuration):
        """Sets the data_source_configuration of this UpdatePlaceIndexRequest.


        :param data_source_configuration: The data_source_configuration of this UpdatePlaceIndexRequest.
        :type data_source_configuration: CreatePlaceIndexRequestDataSourceConfiguration
        """

        self._data_source_configuration = data_source_configuration

    @property
    def description(self):
        """Gets the description of this UpdatePlaceIndexRequest.

        Updates the description for the place index resource.

        :return: The description of this UpdatePlaceIndexRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePlaceIndexRequest.

        Updates the description for the place index resource.

        :param description: The description of this UpdatePlaceIndexRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this UpdatePlaceIndexRequest.

        No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.

        :return: The pricing_plan of this UpdatePlaceIndexRequest.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this UpdatePlaceIndexRequest.

        No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.

        :param pricing_plan: The pricing_plan of this UpdatePlaceIndexRequest.
        :type pricing_plan: str
        """
        allowed_values = ["RequestBasedUsage", "MobileAssetTracking", "MobileAssetManagement"]  # noqa: E501
        if pricing_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_plan` ({0}), must be one of {1}"
                .format(pricing_plan, allowed_values)
            )

        self._pricing_plan = pricing_plan
