# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetDevicePositionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_positions: List=None, errors: List=None):
        """BatchGetDevicePositionResponse - a model defined in OpenAPI

        :param device_positions: The device_positions of this BatchGetDevicePositionResponse.
        :param errors: The errors of this BatchGetDevicePositionResponse.
        """
        self.openapi_types = {
            'device_positions': List,
            'errors': List
        }

        self.attribute_map = {
            'device_positions': 'DevicePositions',
            'errors': 'Errors'
        }

        self._device_positions = device_positions
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetDevicePositionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetDevicePositionResponse of this BatchGetDevicePositionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_positions(self):
        """Gets the device_positions of this BatchGetDevicePositionResponse.


        :return: The device_positions of this BatchGetDevicePositionResponse.
        :rtype: List
        """
        return self._device_positions

    @device_positions.setter
    def device_positions(self, device_positions):
        """Sets the device_positions of this BatchGetDevicePositionResponse.


        :param device_positions: The device_positions of this BatchGetDevicePositionResponse.
        :type device_positions: List
        """
        if device_positions is None:
            raise ValueError("Invalid value for `device_positions`, must not be `None`")

        self._device_positions = device_positions

    @property
    def errors(self):
        """Gets the errors of this BatchGetDevicePositionResponse.


        :return: The errors of this BatchGetDevicePositionResponse.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchGetDevicePositionResponse.


        :param errors: The errors of this BatchGetDevicePositionResponse.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
