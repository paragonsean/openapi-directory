/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPlaceResponse_Place.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPlaceResponse_Place::OAIGetPlaceResponse_Place(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPlaceResponse_Place::OAIGetPlaceResponse_Place() {
    this->initializeModel();
}

OAIGetPlaceResponse_Place::~OAIGetPlaceResponse_Place() {}

void OAIGetPlaceResponse_Place::initializeModel() {

    m_address_number_isSet = false;
    m_address_number_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_interpolated_isSet = false;
    m_interpolated_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_municipality_isSet = false;
    m_municipality_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_sub_region_isSet = false;
    m_sub_region_isValid = false;

    m_supplemental_categories_isSet = false;
    m_supplemental_categories_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_unit_number_isSet = false;
    m_unit_number_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;
}

void OAIGetPlaceResponse_Place::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPlaceResponse_Place::fromJsonObject(QJsonObject json) {

    m_address_number_isValid = ::OpenAPI::fromJsonValue(m_address_number, json[QString("AddressNumber")]);
    m_address_number_isSet = !json[QString("AddressNumber")].isNull() && m_address_number_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("Geometry")]);
    m_geometry_isSet = !json[QString("Geometry")].isNull() && m_geometry_isValid;

    m_interpolated_isValid = ::OpenAPI::fromJsonValue(m_interpolated, json[QString("Interpolated")]);
    m_interpolated_isSet = !json[QString("Interpolated")].isNull() && m_interpolated_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_municipality_isValid = ::OpenAPI::fromJsonValue(m_municipality, json[QString("Municipality")]);
    m_municipality_isSet = !json[QString("Municipality")].isNull() && m_municipality_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("Neighborhood")]);
    m_neighborhood_isSet = !json[QString("Neighborhood")].isNull() && m_neighborhood_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("Street")]);
    m_street_isSet = !json[QString("Street")].isNull() && m_street_isValid;

    m_sub_region_isValid = ::OpenAPI::fromJsonValue(m_sub_region, json[QString("SubRegion")]);
    m_sub_region_isSet = !json[QString("SubRegion")].isNull() && m_sub_region_isValid;

    m_supplemental_categories_isValid = ::OpenAPI::fromJsonValue(m_supplemental_categories, json[QString("SupplementalCategories")]);
    m_supplemental_categories_isSet = !json[QString("SupplementalCategories")].isNull() && m_supplemental_categories_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;

    m_unit_number_isValid = ::OpenAPI::fromJsonValue(m_unit_number, json[QString("UnitNumber")]);
    m_unit_number_isSet = !json[QString("UnitNumber")].isNull() && m_unit_number_isValid;

    m_unit_type_isValid = ::OpenAPI::fromJsonValue(m_unit_type, json[QString("UnitType")]);
    m_unit_type_isSet = !json[QString("UnitType")].isNull() && m_unit_type_isValid;
}

QString OAIGetPlaceResponse_Place::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPlaceResponse_Place::asJsonObject() const {
    QJsonObject obj;
    if (m_address_number_isSet) {
        obj.insert(QString("AddressNumber"), ::OpenAPI::toJsonValue(m_address_number));
    }
    if (m_categories.isSet()) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("Geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_interpolated_isSet) {
        obj.insert(QString("Interpolated"), ::OpenAPI::toJsonValue(m_interpolated));
    }
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_municipality_isSet) {
        obj.insert(QString("Municipality"), ::OpenAPI::toJsonValue(m_municipality));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("Neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_street_isSet) {
        obj.insert(QString("Street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_sub_region_isSet) {
        obj.insert(QString("SubRegion"), ::OpenAPI::toJsonValue(m_sub_region));
    }
    if (m_supplemental_categories.isSet()) {
        obj.insert(QString("SupplementalCategories"), ::OpenAPI::toJsonValue(m_supplemental_categories));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_unit_number_isSet) {
        obj.insert(QString("UnitNumber"), ::OpenAPI::toJsonValue(m_unit_number));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("UnitType"), ::OpenAPI::toJsonValue(m_unit_type));
    }
    return obj;
}

QString OAIGetPlaceResponse_Place::getAddressNumber() const {
    return m_address_number;
}
void OAIGetPlaceResponse_Place::setAddressNumber(const QString &address_number) {
    m_address_number = address_number;
    m_address_number_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_address_number_Set() const{
    return m_address_number_isSet;
}

bool OAIGetPlaceResponse_Place::is_address_number_Valid() const{
    return m_address_number_isValid;
}

QList OAIGetPlaceResponse_Place::getCategories() const {
    return m_categories;
}
void OAIGetPlaceResponse_Place::setCategories(const QList &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGetPlaceResponse_Place::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIGetPlaceResponse_Place::getCountry() const {
    return m_country;
}
void OAIGetPlaceResponse_Place::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGetPlaceResponse_Place::is_country_Valid() const{
    return m_country_isValid;
}

OAIPlaceGeometry OAIGetPlaceResponse_Place::getGeometry() const {
    return m_geometry;
}
void OAIGetPlaceResponse_Place::setGeometry(const OAIPlaceGeometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIGetPlaceResponse_Place::is_geometry_Valid() const{
    return m_geometry_isValid;
}

bool OAIGetPlaceResponse_Place::getInterpolated() const {
    return m_interpolated;
}
void OAIGetPlaceResponse_Place::setInterpolated(const bool &interpolated) {
    m_interpolated = interpolated;
    m_interpolated_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_interpolated_Set() const{
    return m_interpolated_isSet;
}

bool OAIGetPlaceResponse_Place::is_interpolated_Valid() const{
    return m_interpolated_isValid;
}

QString OAIGetPlaceResponse_Place::getLabel() const {
    return m_label;
}
void OAIGetPlaceResponse_Place::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_label_Set() const{
    return m_label_isSet;
}

bool OAIGetPlaceResponse_Place::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIGetPlaceResponse_Place::getMunicipality() const {
    return m_municipality;
}
void OAIGetPlaceResponse_Place::setMunicipality(const QString &municipality) {
    m_municipality = municipality;
    m_municipality_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_municipality_Set() const{
    return m_municipality_isSet;
}

bool OAIGetPlaceResponse_Place::is_municipality_Valid() const{
    return m_municipality_isValid;
}

QString OAIGetPlaceResponse_Place::getNeighborhood() const {
    return m_neighborhood;
}
void OAIGetPlaceResponse_Place::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAIGetPlaceResponse_Place::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAIGetPlaceResponse_Place::getPostalCode() const {
    return m_postal_code;
}
void OAIGetPlaceResponse_Place::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIGetPlaceResponse_Place::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIGetPlaceResponse_Place::getRegion() const {
    return m_region;
}
void OAIGetPlaceResponse_Place::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGetPlaceResponse_Place::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIGetPlaceResponse_Place::getStreet() const {
    return m_street;
}
void OAIGetPlaceResponse_Place::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_street_Set() const{
    return m_street_isSet;
}

bool OAIGetPlaceResponse_Place::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIGetPlaceResponse_Place::getSubRegion() const {
    return m_sub_region;
}
void OAIGetPlaceResponse_Place::setSubRegion(const QString &sub_region) {
    m_sub_region = sub_region;
    m_sub_region_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_sub_region_Set() const{
    return m_sub_region_isSet;
}

bool OAIGetPlaceResponse_Place::is_sub_region_Valid() const{
    return m_sub_region_isValid;
}

QList OAIGetPlaceResponse_Place::getSupplementalCategories() const {
    return m_supplemental_categories;
}
void OAIGetPlaceResponse_Place::setSupplementalCategories(const QList &supplemental_categories) {
    m_supplemental_categories = supplemental_categories;
    m_supplemental_categories_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_supplemental_categories_Set() const{
    return m_supplemental_categories_isSet;
}

bool OAIGetPlaceResponse_Place::is_supplemental_categories_Valid() const{
    return m_supplemental_categories_isValid;
}

OAIPlace_TimeZone OAIGetPlaceResponse_Place::getTimeZone() const {
    return m_time_zone;
}
void OAIGetPlaceResponse_Place::setTimeZone(const OAIPlace_TimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGetPlaceResponse_Place::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIGetPlaceResponse_Place::getUnitNumber() const {
    return m_unit_number;
}
void OAIGetPlaceResponse_Place::setUnitNumber(const QString &unit_number) {
    m_unit_number = unit_number;
    m_unit_number_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_unit_number_Set() const{
    return m_unit_number_isSet;
}

bool OAIGetPlaceResponse_Place::is_unit_number_Valid() const{
    return m_unit_number_isValid;
}

QString OAIGetPlaceResponse_Place::getUnitType() const {
    return m_unit_type;
}
void OAIGetPlaceResponse_Place::setUnitType(const QString &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OAIGetPlaceResponse_Place::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OAIGetPlaceResponse_Place::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

bool OAIGetPlaceResponse_Place::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interpolated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_municipality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplemental_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPlaceResponse_Place::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_geometry_isValid && true;
}

} // namespace OpenAPI
