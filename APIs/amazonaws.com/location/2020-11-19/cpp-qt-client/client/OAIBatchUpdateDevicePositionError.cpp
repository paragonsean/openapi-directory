/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateDevicePositionError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateDevicePositionError::OAIBatchUpdateDevicePositionError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateDevicePositionError::OAIBatchUpdateDevicePositionError() {
    this->initializeModel();
}

OAIBatchUpdateDevicePositionError::~OAIBatchUpdateDevicePositionError() {}

void OAIBatchUpdateDevicePositionError::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_sample_time_isSet = false;
    m_sample_time_isValid = false;
}

void OAIBatchUpdateDevicePositionError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateDevicePositionError::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_sample_time_isValid = ::OpenAPI::fromJsonValue(m_sample_time, json[QString("SampleTime")]);
    m_sample_time_isSet = !json[QString("SampleTime")].isNull() && m_sample_time_isValid;
}

QString OAIBatchUpdateDevicePositionError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateDevicePositionError::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_sample_time_isSet) {
        obj.insert(QString("SampleTime"), ::OpenAPI::toJsonValue(m_sample_time));
    }
    return obj;
}

QString OAIBatchUpdateDevicePositionError::getDeviceId() const {
    return m_device_id;
}
void OAIBatchUpdateDevicePositionError::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIBatchUpdateDevicePositionError::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIBatchUpdateDevicePositionError::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIBatchUpdateDevicePositionError_Error OAIBatchUpdateDevicePositionError::getError() const {
    return m_error;
}
void OAIBatchUpdateDevicePositionError::setError(const OAIBatchUpdateDevicePositionError_Error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIBatchUpdateDevicePositionError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIBatchUpdateDevicePositionError::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAIBatchUpdateDevicePositionError::getSampleTime() const {
    return m_sample_time;
}
void OAIBatchUpdateDevicePositionError::setSampleTime(const QDateTime &sample_time) {
    m_sample_time = sample_time;
    m_sample_time_isSet = true;
}

bool OAIBatchUpdateDevicePositionError::is_sample_time_Set() const{
    return m_sample_time_isSet;
}

bool OAIBatchUpdateDevicePositionError::is_sample_time_Valid() const{
    return m_sample_time_isValid;
}

bool OAIBatchUpdateDevicePositionError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateDevicePositionError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_id_isValid && m_error_isValid && m_sample_time_isValid && true;
}

} // namespace OpenAPI
