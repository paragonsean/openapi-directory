/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListKeysRequest_Filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListKeysRequest_Filter::OAIListKeysRequest_Filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListKeysRequest_Filter::OAIListKeysRequest_Filter() {
    this->initializeModel();
}

OAIListKeysRequest_Filter::~OAIListKeysRequest_Filter() {}

void OAIListKeysRequest_Filter::initializeModel() {

    m_key_status_isSet = false;
    m_key_status_isValid = false;
}

void OAIListKeysRequest_Filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListKeysRequest_Filter::fromJsonObject(QJsonObject json) {

    m_key_status_isValid = ::OpenAPI::fromJsonValue(m_key_status, json[QString("KeyStatus")]);
    m_key_status_isSet = !json[QString("KeyStatus")].isNull() && m_key_status_isValid;
}

QString OAIListKeysRequest_Filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListKeysRequest_Filter::asJsonObject() const {
    QJsonObject obj;
    if (m_key_status.isSet()) {
        obj.insert(QString("KeyStatus"), ::OpenAPI::toJsonValue(m_key_status));
    }
    return obj;
}

OAIStatus OAIListKeysRequest_Filter::getKeyStatus() const {
    return m_key_status;
}
void OAIListKeysRequest_Filter::setKeyStatus(const OAIStatus &key_status) {
    m_key_status = key_status;
    m_key_status_isSet = true;
}

bool OAIListKeysRequest_Filter::is_key_status_Set() const{
    return m_key_status_isSet;
}

bool OAIListKeysRequest_Filter::is_key_status_Valid() const{
    return m_key_status_isValid;
}

bool OAIListKeysRequest_Filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListKeysRequest_Filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
