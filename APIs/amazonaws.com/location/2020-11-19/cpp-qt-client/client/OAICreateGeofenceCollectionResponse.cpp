/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGeofenceCollectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGeofenceCollectionResponse::OAICreateGeofenceCollectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGeofenceCollectionResponse::OAICreateGeofenceCollectionResponse() {
    this->initializeModel();
}

OAICreateGeofenceCollectionResponse::~OAICreateGeofenceCollectionResponse() {}

void OAICreateGeofenceCollectionResponse::initializeModel() {

    m_collection_arn_isSet = false;
    m_collection_arn_isValid = false;

    m_collection_name_isSet = false;
    m_collection_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;
}

void OAICreateGeofenceCollectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGeofenceCollectionResponse::fromJsonObject(QJsonObject json) {

    m_collection_arn_isValid = ::OpenAPI::fromJsonValue(m_collection_arn, json[QString("CollectionArn")]);
    m_collection_arn_isSet = !json[QString("CollectionArn")].isNull() && m_collection_arn_isValid;

    m_collection_name_isValid = ::OpenAPI::fromJsonValue(m_collection_name, json[QString("CollectionName")]);
    m_collection_name_isSet = !json[QString("CollectionName")].isNull() && m_collection_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;
}

QString OAICreateGeofenceCollectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGeofenceCollectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_arn_isSet) {
        obj.insert(QString("CollectionArn"), ::OpenAPI::toJsonValue(m_collection_arn));
    }
    if (m_collection_name_isSet) {
        obj.insert(QString("CollectionName"), ::OpenAPI::toJsonValue(m_collection_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    return obj;
}

QString OAICreateGeofenceCollectionResponse::getCollectionArn() const {
    return m_collection_arn;
}
void OAICreateGeofenceCollectionResponse::setCollectionArn(const QString &collection_arn) {
    m_collection_arn = collection_arn;
    m_collection_arn_isSet = true;
}

bool OAICreateGeofenceCollectionResponse::is_collection_arn_Set() const{
    return m_collection_arn_isSet;
}

bool OAICreateGeofenceCollectionResponse::is_collection_arn_Valid() const{
    return m_collection_arn_isValid;
}

QString OAICreateGeofenceCollectionResponse::getCollectionName() const {
    return m_collection_name;
}
void OAICreateGeofenceCollectionResponse::setCollectionName(const QString &collection_name) {
    m_collection_name = collection_name;
    m_collection_name_isSet = true;
}

bool OAICreateGeofenceCollectionResponse::is_collection_name_Set() const{
    return m_collection_name_isSet;
}

bool OAICreateGeofenceCollectionResponse::is_collection_name_Valid() const{
    return m_collection_name_isValid;
}

QDateTime OAICreateGeofenceCollectionResponse::getCreateTime() const {
    return m_create_time;
}
void OAICreateGeofenceCollectionResponse::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICreateGeofenceCollectionResponse::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICreateGeofenceCollectionResponse::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAICreateGeofenceCollectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGeofenceCollectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collection_arn_isValid && m_collection_name_isValid && m_create_time_isValid && true;
}

} // namespace OpenAPI
