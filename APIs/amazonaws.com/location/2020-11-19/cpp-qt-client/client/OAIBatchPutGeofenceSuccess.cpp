/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPutGeofenceSuccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPutGeofenceSuccess::OAIBatchPutGeofenceSuccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPutGeofenceSuccess::OAIBatchPutGeofenceSuccess() {
    this->initializeModel();
}

OAIBatchPutGeofenceSuccess::~OAIBatchPutGeofenceSuccess() {}

void OAIBatchPutGeofenceSuccess::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_geofence_id_isSet = false;
    m_geofence_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIBatchPutGeofenceSuccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPutGeofenceSuccess::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_geofence_id_isValid = ::OpenAPI::fromJsonValue(m_geofence_id, json[QString("GeofenceId")]);
    m_geofence_id_isSet = !json[QString("GeofenceId")].isNull() && m_geofence_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("UpdateTime")]);
    m_update_time_isSet = !json[QString("UpdateTime")].isNull() && m_update_time_isValid;
}

QString OAIBatchPutGeofenceSuccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPutGeofenceSuccess::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_geofence_id_isSet) {
        obj.insert(QString("GeofenceId"), ::OpenAPI::toJsonValue(m_geofence_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("UpdateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QDateTime OAIBatchPutGeofenceSuccess::getCreateTime() const {
    return m_create_time;
}
void OAIBatchPutGeofenceSuccess::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBatchPutGeofenceSuccess::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBatchPutGeofenceSuccess::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBatchPutGeofenceSuccess::getGeofenceId() const {
    return m_geofence_id;
}
void OAIBatchPutGeofenceSuccess::setGeofenceId(const QString &geofence_id) {
    m_geofence_id = geofence_id;
    m_geofence_id_isSet = true;
}

bool OAIBatchPutGeofenceSuccess::is_geofence_id_Set() const{
    return m_geofence_id_isSet;
}

bool OAIBatchPutGeofenceSuccess::is_geofence_id_Valid() const{
    return m_geofence_id_isValid;
}

QDateTime OAIBatchPutGeofenceSuccess::getUpdateTime() const {
    return m_update_time;
}
void OAIBatchPutGeofenceSuccess::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIBatchPutGeofenceSuccess::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIBatchPutGeofenceSuccess::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIBatchPutGeofenceSuccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geofence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPutGeofenceSuccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_create_time_isValid && m_geofence_id_isValid && m_update_time_isValid && true;
}

} // namespace OpenAPI
