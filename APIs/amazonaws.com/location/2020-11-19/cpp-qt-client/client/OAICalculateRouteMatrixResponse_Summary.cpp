/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRouteMatrixResponse_Summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRouteMatrixResponse_Summary::OAICalculateRouteMatrixResponse_Summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRouteMatrixResponse_Summary::OAICalculateRouteMatrixResponse_Summary() {
    this->initializeModel();
}

OAICalculateRouteMatrixResponse_Summary::~OAICalculateRouteMatrixResponse_Summary() {}

void OAICalculateRouteMatrixResponse_Summary::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_distance_unit_isSet = false;
    m_distance_unit_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_route_count_isSet = false;
    m_route_count_isValid = false;
}

void OAICalculateRouteMatrixResponse_Summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRouteMatrixResponse_Summary::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_distance_unit_isValid = ::OpenAPI::fromJsonValue(m_distance_unit, json[QString("DistanceUnit")]);
    m_distance_unit_isSet = !json[QString("DistanceUnit")].isNull() && m_distance_unit_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("ErrorCount")]);
    m_error_count_isSet = !json[QString("ErrorCount")].isNull() && m_error_count_isValid;

    m_route_count_isValid = ::OpenAPI::fromJsonValue(m_route_count, json[QString("RouteCount")]);
    m_route_count_isSet = !json[QString("RouteCount")].isNull() && m_route_count_isValid;
}

QString OAICalculateRouteMatrixResponse_Summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRouteMatrixResponse_Summary::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_isSet) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_distance_unit.isSet()) {
        obj.insert(QString("DistanceUnit"), ::OpenAPI::toJsonValue(m_distance_unit));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("ErrorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_route_count_isSet) {
        obj.insert(QString("RouteCount"), ::OpenAPI::toJsonValue(m_route_count));
    }
    return obj;
}

QString OAICalculateRouteMatrixResponse_Summary::getDataSource() const {
    return m_data_source;
}
void OAICalculateRouteMatrixResponse_Summary::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAICalculateRouteMatrixResponse_Summary::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAICalculateRouteMatrixResponse_Summary::is_data_source_Valid() const{
    return m_data_source_isValid;
}

OAIDistanceUnit OAICalculateRouteMatrixResponse_Summary::getDistanceUnit() const {
    return m_distance_unit;
}
void OAICalculateRouteMatrixResponse_Summary::setDistanceUnit(const OAIDistanceUnit &distance_unit) {
    m_distance_unit = distance_unit;
    m_distance_unit_isSet = true;
}

bool OAICalculateRouteMatrixResponse_Summary::is_distance_unit_Set() const{
    return m_distance_unit_isSet;
}

bool OAICalculateRouteMatrixResponse_Summary::is_distance_unit_Valid() const{
    return m_distance_unit_isValid;
}

qint32 OAICalculateRouteMatrixResponse_Summary::getErrorCount() const {
    return m_error_count;
}
void OAICalculateRouteMatrixResponse_Summary::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAICalculateRouteMatrixResponse_Summary::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAICalculateRouteMatrixResponse_Summary::is_error_count_Valid() const{
    return m_error_count_isValid;
}

qint32 OAICalculateRouteMatrixResponse_Summary::getRouteCount() const {
    return m_route_count;
}
void OAICalculateRouteMatrixResponse_Summary::setRouteCount(const qint32 &route_count) {
    m_route_count = route_count;
    m_route_count_isSet = true;
}

bool OAICalculateRouteMatrixResponse_Summary::is_route_count_Set() const{
    return m_route_count_isSet;
}

bool OAICalculateRouteMatrixResponse_Summary::is_route_count_Valid() const{
    return m_route_count_isValid;
}

bool OAICalculateRouteMatrixResponse_Summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRouteMatrixResponse_Summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && m_distance_unit_isValid && m_error_count_isValid && m_route_count_isValid && true;
}

} // namespace OpenAPI
