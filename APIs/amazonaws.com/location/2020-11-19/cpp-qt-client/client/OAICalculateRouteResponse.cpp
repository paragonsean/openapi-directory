/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRouteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRouteResponse::OAICalculateRouteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRouteResponse::OAICalculateRouteResponse() {
    this->initializeModel();
}

OAICalculateRouteResponse::~OAICalculateRouteResponse() {}

void OAICalculateRouteResponse::initializeModel() {

    m_legs_isSet = false;
    m_legs_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAICalculateRouteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRouteResponse::fromJsonObject(QJsonObject json) {

    m_legs_isValid = ::OpenAPI::fromJsonValue(m_legs, json[QString("Legs")]);
    m_legs_isSet = !json[QString("Legs")].isNull() && m_legs_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;
}

QString OAICalculateRouteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRouteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_legs.isSet()) {
        obj.insert(QString("Legs"), ::OpenAPI::toJsonValue(m_legs));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList OAICalculateRouteResponse::getLegs() const {
    return m_legs;
}
void OAICalculateRouteResponse::setLegs(const QList &legs) {
    m_legs = legs;
    m_legs_isSet = true;
}

bool OAICalculateRouteResponse::is_legs_Set() const{
    return m_legs_isSet;
}

bool OAICalculateRouteResponse::is_legs_Valid() const{
    return m_legs_isValid;
}

OAICalculateRouteResponse_Summary OAICalculateRouteResponse::getSummary() const {
    return m_summary;
}
void OAICalculateRouteResponse::setSummary(const OAICalculateRouteResponse_Summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICalculateRouteResponse::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICalculateRouteResponse::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAICalculateRouteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_legs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRouteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_legs_isValid && m_summary_isValid && true;
}

} // namespace OpenAPI
