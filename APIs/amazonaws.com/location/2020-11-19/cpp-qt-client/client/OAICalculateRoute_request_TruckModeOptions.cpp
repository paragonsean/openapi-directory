/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRoute_request_TruckModeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRoute_request_TruckModeOptions::OAICalculateRoute_request_TruckModeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRoute_request_TruckModeOptions::OAICalculateRoute_request_TruckModeOptions() {
    this->initializeModel();
}

OAICalculateRoute_request_TruckModeOptions::~OAICalculateRoute_request_TruckModeOptions() {}

void OAICalculateRoute_request_TruckModeOptions::initializeModel() {

    m_avoid_ferries_isSet = false;
    m_avoid_ferries_isValid = false;

    m_avoid_tolls_isSet = false;
    m_avoid_tolls_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAICalculateRoute_request_TruckModeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRoute_request_TruckModeOptions::fromJsonObject(QJsonObject json) {

    m_avoid_ferries_isValid = ::OpenAPI::fromJsonValue(m_avoid_ferries, json[QString("AvoidFerries")]);
    m_avoid_ferries_isSet = !json[QString("AvoidFerries")].isNull() && m_avoid_ferries_isValid;

    m_avoid_tolls_isValid = ::OpenAPI::fromJsonValue(m_avoid_tolls, json[QString("AvoidTolls")]);
    m_avoid_tolls_isSet = !json[QString("AvoidTolls")].isNull() && m_avoid_tolls_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAICalculateRoute_request_TruckModeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRoute_request_TruckModeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_avoid_ferries_isSet) {
        obj.insert(QString("AvoidFerries"), ::OpenAPI::toJsonValue(m_avoid_ferries));
    }
    if (m_avoid_tolls_isSet) {
        obj.insert(QString("AvoidTolls"), ::OpenAPI::toJsonValue(m_avoid_tolls));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

bool OAICalculateRoute_request_TruckModeOptions::getAvoidFerries() const {
    return m_avoid_ferries;
}
void OAICalculateRoute_request_TruckModeOptions::setAvoidFerries(const bool &avoid_ferries) {
    m_avoid_ferries = avoid_ferries;
    m_avoid_ferries_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions::is_avoid_ferries_Set() const{
    return m_avoid_ferries_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions::is_avoid_ferries_Valid() const{
    return m_avoid_ferries_isValid;
}

bool OAICalculateRoute_request_TruckModeOptions::getAvoidTolls() const {
    return m_avoid_tolls;
}
void OAICalculateRoute_request_TruckModeOptions::setAvoidTolls(const bool &avoid_tolls) {
    m_avoid_tolls = avoid_tolls;
    m_avoid_tolls_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions::is_avoid_tolls_Set() const{
    return m_avoid_tolls_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions::is_avoid_tolls_Valid() const{
    return m_avoid_tolls_isValid;
}

OAICalculateRoute_request_TruckModeOptions_Dimensions OAICalculateRoute_request_TruckModeOptions::getDimensions() const {
    return m_dimensions;
}
void OAICalculateRoute_request_TruckModeOptions::setDimensions(const OAICalculateRoute_request_TruckModeOptions_Dimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAICalculateRoute_request_TruckModeOptions_Weight OAICalculateRoute_request_TruckModeOptions::getWeight() const {
    return m_weight;
}
void OAICalculateRoute_request_TruckModeOptions::setWeight(const OAICalculateRoute_request_TruckModeOptions_Weight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAICalculateRoute_request_TruckModeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avoid_ferries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_tolls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRoute_request_TruckModeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
