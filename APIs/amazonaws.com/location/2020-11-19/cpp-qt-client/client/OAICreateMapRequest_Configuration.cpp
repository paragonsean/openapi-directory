/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMapRequest_Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMapRequest_Configuration::OAICreateMapRequest_Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMapRequest_Configuration::OAICreateMapRequest_Configuration() {
    this->initializeModel();
}

OAICreateMapRequest_Configuration::~OAICreateMapRequest_Configuration() {}

void OAICreateMapRequest_Configuration::initializeModel() {

    m_political_view_isSet = false;
    m_political_view_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAICreateMapRequest_Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMapRequest_Configuration::fromJsonObject(QJsonObject json) {

    m_political_view_isValid = ::OpenAPI::fromJsonValue(m_political_view, json[QString("PoliticalView")]);
    m_political_view_isSet = !json[QString("PoliticalView")].isNull() && m_political_view_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("Style")]);
    m_style_isSet = !json[QString("Style")].isNull() && m_style_isValid;
}

QString OAICreateMapRequest_Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMapRequest_Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_political_view_isSet) {
        obj.insert(QString("PoliticalView"), ::OpenAPI::toJsonValue(m_political_view));
    }
    if (m_style_isSet) {
        obj.insert(QString("Style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAICreateMapRequest_Configuration::getPoliticalView() const {
    return m_political_view;
}
void OAICreateMapRequest_Configuration::setPoliticalView(const QString &political_view) {
    m_political_view = political_view;
    m_political_view_isSet = true;
}

bool OAICreateMapRequest_Configuration::is_political_view_Set() const{
    return m_political_view_isSet;
}

bool OAICreateMapRequest_Configuration::is_political_view_Valid() const{
    return m_political_view_isValid;
}

QString OAICreateMapRequest_Configuration::getStyle() const {
    return m_style;
}
void OAICreateMapRequest_Configuration::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAICreateMapRequest_Configuration::is_style_Set() const{
    return m_style_isSet;
}

bool OAICreateMapRequest_Configuration::is_style_Valid() const{
    return m_style_isValid;
}

bool OAICreateMapRequest_Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_political_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMapRequest_Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_style_isValid && true;
}

} // namespace OpenAPI
