/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICalculateRoute_request.h
 *
 * 
 */

#ifndef OAICalculateRoute_request_H
#define OAICalculateRoute_request_H

#include <QJsonObject>

#include "OAICalculateRoute_request_CarModeOptions.h"
#include "OAICalculateRoute_request_TruckModeOptions.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICalculateRoute_request_CarModeOptions;
class OAICalculateRoute_request_TruckModeOptions;

class OAICalculateRoute_request : public OAIObject {
public:
    OAICalculateRoute_request();
    OAICalculateRoute_request(QString json);
    ~OAICalculateRoute_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICalculateRoute_request_CarModeOptions getCarModeOptions() const;
    void setCarModeOptions(const OAICalculateRoute_request_CarModeOptions &car_mode_options);
    bool is_car_mode_options_Set() const;
    bool is_car_mode_options_Valid() const;

    bool isDepartNow() const;
    void setDepartNow(const bool &depart_now);
    bool is_depart_now_Set() const;
    bool is_depart_now_Valid() const;

    QList<double> getDeparturePosition() const;
    void setDeparturePosition(const QList<double> &departure_position);
    bool is_departure_position_Set() const;
    bool is_departure_position_Valid() const;

    QDateTime getDepartureTime() const;
    void setDepartureTime(const QDateTime &departure_time);
    bool is_departure_time_Set() const;
    bool is_departure_time_Valid() const;

    QList<double> getDestinationPosition() const;
    void setDestinationPosition(const QList<double> &destination_position);
    bool is_destination_position_Set() const;
    bool is_destination_position_Valid() const;

    QString getDistanceUnit() const;
    void setDistanceUnit(const QString &distance_unit);
    bool is_distance_unit_Set() const;
    bool is_distance_unit_Valid() const;

    bool isIncludeLegGeometry() const;
    void setIncludeLegGeometry(const bool &include_leg_geometry);
    bool is_include_leg_geometry_Set() const;
    bool is_include_leg_geometry_Valid() const;

    QString getTravelMode() const;
    void setTravelMode(const QString &travel_mode);
    bool is_travel_mode_Set() const;
    bool is_travel_mode_Valid() const;

    OAICalculateRoute_request_TruckModeOptions getTruckModeOptions() const;
    void setTruckModeOptions(const OAICalculateRoute_request_TruckModeOptions &truck_mode_options);
    bool is_truck_mode_options_Set() const;
    bool is_truck_mode_options_Valid() const;

    QList<QList> getWaypointPositions() const;
    void setWaypointPositions(const QList<QList> &waypoint_positions);
    bool is_waypoint_positions_Set() const;
    bool is_waypoint_positions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICalculateRoute_request_CarModeOptions m_car_mode_options;
    bool m_car_mode_options_isSet;
    bool m_car_mode_options_isValid;

    bool m_depart_now;
    bool m_depart_now_isSet;
    bool m_depart_now_isValid;

    QList<double> m_departure_position;
    bool m_departure_position_isSet;
    bool m_departure_position_isValid;

    QDateTime m_departure_time;
    bool m_departure_time_isSet;
    bool m_departure_time_isValid;

    QList<double> m_destination_position;
    bool m_destination_position_isSet;
    bool m_destination_position_isValid;

    QString m_distance_unit;
    bool m_distance_unit_isSet;
    bool m_distance_unit_isValid;

    bool m_include_leg_geometry;
    bool m_include_leg_geometry_isSet;
    bool m_include_leg_geometry_isValid;

    QString m_travel_mode;
    bool m_travel_mode_isSet;
    bool m_travel_mode_isValid;

    OAICalculateRoute_request_TruckModeOptions m_truck_mode_options;
    bool m_truck_mode_options_isSet;
    bool m_truck_mode_options_isValid;

    QList<QList> m_waypoint_positions;
    bool m_waypoint_positions_isSet;
    bool m_waypoint_positions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICalculateRoute_request)

#endif // OAICalculateRoute_request_H
