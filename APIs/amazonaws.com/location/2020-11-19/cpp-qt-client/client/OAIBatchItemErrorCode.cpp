/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchItemErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchItemErrorCode::OAIBatchItemErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchItemErrorCode::OAIBatchItemErrorCode() {
    this->initializeModel();
}

OAIBatchItemErrorCode::~OAIBatchItemErrorCode() {}

void OAIBatchItemErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBatchItemErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBatchItemErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AccessDeniedError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchItemErrorCode::ACCESSDENIEDERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConflictError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchItemErrorCode::CONFLICTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InternalServerError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchItemErrorCode::INTERNALSERVERERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ResourceNotFoundError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchItemErrorCode::RESOURCENOTFOUNDERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ThrottlingError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchItemErrorCode::THROTTLINGERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ValidationError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchItemErrorCode::VALIDATIONERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBatchItemErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBatchItemErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBatchItemErrorCode::ACCESSDENIEDERROR:
            val = "AccessDeniedError";
            break;
        case eOAIBatchItemErrorCode::CONFLICTERROR:
            val = "ConflictError";
            break;
        case eOAIBatchItemErrorCode::INTERNALSERVERERROR:
            val = "InternalServerError";
            break;
        case eOAIBatchItemErrorCode::RESOURCENOTFOUNDERROR:
            val = "ResourceNotFoundError";
            break;
        case eOAIBatchItemErrorCode::THROTTLINGERROR:
            val = "ThrottlingError";
            break;
        case eOAIBatchItemErrorCode::VALIDATIONERROR:
            val = "ValidationError";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBatchItemErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBatchItemErrorCode::eOAIBatchItemErrorCode OAIBatchItemErrorCode::getValue() const {
    return m_value;
}

void OAIBatchItemErrorCode::setValue(const OAIBatchItemErrorCode::eOAIBatchItemErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBatchItemErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIBatchItemErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
