/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStep::OAIStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStep::OAIStep() {
    this->initializeModel();
}

OAIStep::~OAIStep() {}

void OAIStep::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_end_position_isSet = false;
    m_end_position_isValid = false;

    m_geometry_offset_isSet = false;
    m_geometry_offset_isValid = false;

    m_start_position_isSet = false;
    m_start_position_isValid = false;
}

void OAIStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStep::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("DurationSeconds")]);
    m_duration_seconds_isSet = !json[QString("DurationSeconds")].isNull() && m_duration_seconds_isValid;

    m_end_position_isValid = ::OpenAPI::fromJsonValue(m_end_position, json[QString("EndPosition")]);
    m_end_position_isSet = !json[QString("EndPosition")].isNull() && m_end_position_isValid;

    m_geometry_offset_isValid = ::OpenAPI::fromJsonValue(m_geometry_offset, json[QString("GeometryOffset")]);
    m_geometry_offset_isSet = !json[QString("GeometryOffset")].isNull() && m_geometry_offset_isValid;

    m_start_position_isValid = ::OpenAPI::fromJsonValue(m_start_position, json[QString("StartPosition")]);
    m_start_position_isSet = !json[QString("StartPosition")].isNull() && m_start_position_isValid;
}

QString OAIStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStep::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("DurationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_end_position.isSet()) {
        obj.insert(QString("EndPosition"), ::OpenAPI::toJsonValue(m_end_position));
    }
    if (m_geometry_offset_isSet) {
        obj.insert(QString("GeometryOffset"), ::OpenAPI::toJsonValue(m_geometry_offset));
    }
    if (m_start_position.isSet()) {
        obj.insert(QString("StartPosition"), ::OpenAPI::toJsonValue(m_start_position));
    }
    return obj;
}

double OAIStep::getDistance() const {
    return m_distance;
}
void OAIStep::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIStep::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIStep::is_distance_Valid() const{
    return m_distance_isValid;
}

double OAIStep::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIStep::setDurationSeconds(const double &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIStep::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIStep::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

QList OAIStep::getEndPosition() const {
    return m_end_position;
}
void OAIStep::setEndPosition(const QList &end_position) {
    m_end_position = end_position;
    m_end_position_isSet = true;
}

bool OAIStep::is_end_position_Set() const{
    return m_end_position_isSet;
}

bool OAIStep::is_end_position_Valid() const{
    return m_end_position_isValid;
}

qint32 OAIStep::getGeometryOffset() const {
    return m_geometry_offset;
}
void OAIStep::setGeometryOffset(const qint32 &geometry_offset) {
    m_geometry_offset = geometry_offset;
    m_geometry_offset_isSet = true;
}

bool OAIStep::is_geometry_offset_Set() const{
    return m_geometry_offset_isSet;
}

bool OAIStep::is_geometry_offset_Valid() const{
    return m_geometry_offset_isValid;
}

QList OAIStep::getStartPosition() const {
    return m_start_position;
}
void OAIStep::setStartPosition(const QList &start_position) {
    m_start_position = start_position;
    m_start_position_isSet = true;
}

bool OAIStep::is_start_position_Set() const{
    return m_start_position_isSet;
}

bool OAIStep::is_start_position_Valid() const{
    return m_start_position_isValid;
}

bool OAIStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_isValid && m_duration_seconds_isValid && m_end_position_isValid && m_start_position_isValid && true;
}

} // namespace OpenAPI
