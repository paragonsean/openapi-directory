/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePlaceIndex_request_DataSourceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePlaceIndex_request_DataSourceConfiguration::OAICreatePlaceIndex_request_DataSourceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePlaceIndex_request_DataSourceConfiguration::OAICreatePlaceIndex_request_DataSourceConfiguration() {
    this->initializeModel();
}

OAICreatePlaceIndex_request_DataSourceConfiguration::~OAICreatePlaceIndex_request_DataSourceConfiguration() {}

void OAICreatePlaceIndex_request_DataSourceConfiguration::initializeModel() {

    m_intended_use_isSet = false;
    m_intended_use_isValid = false;
}

void OAICreatePlaceIndex_request_DataSourceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePlaceIndex_request_DataSourceConfiguration::fromJsonObject(QJsonObject json) {

    m_intended_use_isValid = ::OpenAPI::fromJsonValue(m_intended_use, json[QString("IntendedUse")]);
    m_intended_use_isSet = !json[QString("IntendedUse")].isNull() && m_intended_use_isValid;
}

QString OAICreatePlaceIndex_request_DataSourceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePlaceIndex_request_DataSourceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_intended_use.isSet()) {
        obj.insert(QString("IntendedUse"), ::OpenAPI::toJsonValue(m_intended_use));
    }
    return obj;
}

OAIIntendedUse OAICreatePlaceIndex_request_DataSourceConfiguration::getIntendedUse() const {
    return m_intended_use;
}
void OAICreatePlaceIndex_request_DataSourceConfiguration::setIntendedUse(const OAIIntendedUse &intended_use) {
    m_intended_use = intended_use;
    m_intended_use_isSet = true;
}

bool OAICreatePlaceIndex_request_DataSourceConfiguration::is_intended_use_Set() const{
    return m_intended_use_isSet;
}

bool OAICreatePlaceIndex_request_DataSourceConfiguration::is_intended_use_Valid() const{
    return m_intended_use_isValid;
}

bool OAICreatePlaceIndex_request_DataSourceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intended_use.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePlaceIndex_request_DataSourceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
