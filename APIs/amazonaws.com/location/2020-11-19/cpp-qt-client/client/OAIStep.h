/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStep.h
 *
 *  Represents an element of a leg within a route. A step contains instructions for how to move to the next step in the leg. 
 */

#ifndef OAIStep_H
#define OAIStep_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStep : public OAIObject {
public:
    OAIStep();
    OAIStep(QString json);
    ~OAIStep() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    double getDurationSeconds() const;
    void setDurationSeconds(const double &duration_seconds);
    bool is_duration_seconds_Set() const;
    bool is_duration_seconds_Valid() const;

    QList getEndPosition() const;
    void setEndPosition(const QList &end_position);
    bool is_end_position_Set() const;
    bool is_end_position_Valid() const;

    qint32 getGeometryOffset() const;
    void setGeometryOffset(const qint32 &geometry_offset);
    bool is_geometry_offset_Set() const;
    bool is_geometry_offset_Valid() const;

    QList getStartPosition() const;
    void setStartPosition(const QList &start_position);
    bool is_start_position_Set() const;
    bool is_start_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    double m_duration_seconds;
    bool m_duration_seconds_isSet;
    bool m_duration_seconds_isValid;

    QList m_end_position;
    bool m_end_position_isSet;
    bool m_end_position_isValid;

    qint32 m_geometry_offset;
    bool m_geometry_offset_isSet;
    bool m_geometry_offset_isValid;

    QList m_start_position;
    bool m_start_position_isSet;
    bool m_start_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStep)

#endif // OAIStep_H
