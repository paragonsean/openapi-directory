/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteDevicePositionHistoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteDevicePositionHistoryRequest::OAIBatchDeleteDevicePositionHistoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteDevicePositionHistoryRequest::OAIBatchDeleteDevicePositionHistoryRequest() {
    this->initializeModel();
}

OAIBatchDeleteDevicePositionHistoryRequest::~OAIBatchDeleteDevicePositionHistoryRequest() {}

void OAIBatchDeleteDevicePositionHistoryRequest::initializeModel() {

    m_device_ids_isSet = false;
    m_device_ids_isValid = false;
}

void OAIBatchDeleteDevicePositionHistoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteDevicePositionHistoryRequest::fromJsonObject(QJsonObject json) {

    m_device_ids_isValid = ::OpenAPI::fromJsonValue(m_device_ids, json[QString("DeviceIds")]);
    m_device_ids_isSet = !json[QString("DeviceIds")].isNull() && m_device_ids_isValid;
}

QString OAIBatchDeleteDevicePositionHistoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteDevicePositionHistoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_device_ids.isSet()) {
        obj.insert(QString("DeviceIds"), ::OpenAPI::toJsonValue(m_device_ids));
    }
    return obj;
}

QList OAIBatchDeleteDevicePositionHistoryRequest::getDeviceIds() const {
    return m_device_ids;
}
void OAIBatchDeleteDevicePositionHistoryRequest::setDeviceIds(const QList &device_ids) {
    m_device_ids = device_ids;
    m_device_ids_isSet = true;
}

bool OAIBatchDeleteDevicePositionHistoryRequest::is_device_ids_Set() const{
    return m_device_ids_isSet;
}

bool OAIBatchDeleteDevicePositionHistoryRequest::is_device_ids_Valid() const{
    return m_device_ids_isValid;
}

bool OAIBatchDeleteDevicePositionHistoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteDevicePositionHistoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_ids_isValid && true;
}

} // namespace OpenAPI
