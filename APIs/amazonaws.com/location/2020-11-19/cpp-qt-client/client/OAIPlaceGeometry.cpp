/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceGeometry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceGeometry::OAIPlaceGeometry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceGeometry::OAIPlaceGeometry() {
    this->initializeModel();
}

OAIPlaceGeometry::~OAIPlaceGeometry() {}

void OAIPlaceGeometry::initializeModel() {

    m_point_isSet = false;
    m_point_isValid = false;
}

void OAIPlaceGeometry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceGeometry::fromJsonObject(QJsonObject json) {

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("Point")]);
    m_point_isSet = !json[QString("Point")].isNull() && m_point_isValid;
}

QString OAIPlaceGeometry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceGeometry::asJsonObject() const {
    QJsonObject obj;
    if (m_point.isSet()) {
        obj.insert(QString("Point"), ::OpenAPI::toJsonValue(m_point));
    }
    return obj;
}

QList OAIPlaceGeometry::getPoint() const {
    return m_point;
}
void OAIPlaceGeometry::setPoint(const QList &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAIPlaceGeometry::is_point_Set() const{
    return m_point_isSet;
}

bool OAIPlaceGeometry::is_point_Valid() const{
    return m_point_isValid;
}

bool OAIPlaceGeometry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_point.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceGeometry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
