/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchForSuggestionsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchForSuggestionsResult::OAISearchForSuggestionsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchForSuggestionsResult::OAISearchForSuggestionsResult() {
    this->initializeModel();
}

OAISearchForSuggestionsResult::~OAISearchForSuggestionsResult() {}

void OAISearchForSuggestionsResult::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_supplemental_categories_isSet = false;
    m_supplemental_categories_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISearchForSuggestionsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchForSuggestionsResult::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("Categories")]);
    m_categories_isSet = !json[QString("Categories")].isNull() && m_categories_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("PlaceId")]);
    m_place_id_isSet = !json[QString("PlaceId")].isNull() && m_place_id_isValid;

    m_supplemental_categories_isValid = ::OpenAPI::fromJsonValue(m_supplemental_categories, json[QString("SupplementalCategories")]);
    m_supplemental_categories_isSet = !json[QString("SupplementalCategories")].isNull() && m_supplemental_categories_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAISearchForSuggestionsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchForSuggestionsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.isSet()) {
        obj.insert(QString("Categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("PlaceId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_supplemental_categories.isSet()) {
        obj.insert(QString("SupplementalCategories"), ::OpenAPI::toJsonValue(m_supplemental_categories));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList OAISearchForSuggestionsResult::getCategories() const {
    return m_categories;
}
void OAISearchForSuggestionsResult::setCategories(const QList &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAISearchForSuggestionsResult::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAISearchForSuggestionsResult::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAISearchForSuggestionsResult::getPlaceId() const {
    return m_place_id;
}
void OAISearchForSuggestionsResult::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAISearchForSuggestionsResult::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAISearchForSuggestionsResult::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QList OAISearchForSuggestionsResult::getSupplementalCategories() const {
    return m_supplemental_categories;
}
void OAISearchForSuggestionsResult::setSupplementalCategories(const QList &supplemental_categories) {
    m_supplemental_categories = supplemental_categories;
    m_supplemental_categories_isSet = true;
}

bool OAISearchForSuggestionsResult::is_supplemental_categories_Set() const{
    return m_supplemental_categories_isSet;
}

bool OAISearchForSuggestionsResult::is_supplemental_categories_Valid() const{
    return m_supplemental_categories_isValid;
}

QString OAISearchForSuggestionsResult::getText() const {
    return m_text;
}
void OAISearchForSuggestionsResult::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISearchForSuggestionsResult::is_text_Set() const{
    return m_text_isSet;
}

bool OAISearchForSuggestionsResult::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISearchForSuggestionsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplemental_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchForSuggestionsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
