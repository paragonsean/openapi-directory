/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteMatrixEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteMatrixEntry::OAIRouteMatrixEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteMatrixEntry::OAIRouteMatrixEntry() {
    this->initializeModel();
}

OAIRouteMatrixEntry::~OAIRouteMatrixEntry() {}

void OAIRouteMatrixEntry::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIRouteMatrixEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteMatrixEntry::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("DurationSeconds")]);
    m_duration_seconds_isSet = !json[QString("DurationSeconds")].isNull() && m_duration_seconds_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;
}

QString OAIRouteMatrixEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteMatrixEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("DurationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

double OAIRouteMatrixEntry::getDistance() const {
    return m_distance;
}
void OAIRouteMatrixEntry::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIRouteMatrixEntry::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIRouteMatrixEntry::is_distance_Valid() const{
    return m_distance_isValid;
}

double OAIRouteMatrixEntry::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIRouteMatrixEntry::setDurationSeconds(const double &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIRouteMatrixEntry::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIRouteMatrixEntry::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

OAIRouteMatrixEntry_Error OAIRouteMatrixEntry::getError() const {
    return m_error;
}
void OAIRouteMatrixEntry::setError(const OAIRouteMatrixEntry_Error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRouteMatrixEntry::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRouteMatrixEntry::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIRouteMatrixEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteMatrixEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
