/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevicePosition.h
 *
 * Contains the device position details.
 */

#ifndef OAIDevicePosition_H
#define OAIDevicePosition_H

#include <QJsonObject>

#include "OAIDevicePositionUpdate_Accuracy.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDevicePositionUpdate_Accuracy;

class OAIDevicePosition : public OAIObject {
public:
    OAIDevicePosition();
    OAIDevicePosition(QString json);
    ~OAIDevicePosition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDevicePositionUpdate_Accuracy getAccuracy() const;
    void setAccuracy(const OAIDevicePositionUpdate_Accuracy &accuracy);
    bool is_accuracy_Set() const;
    bool is_accuracy_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QList getPosition() const;
    void setPosition(const QList &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QMap getPositionProperties() const;
    void setPositionProperties(const QMap &position_properties);
    bool is_position_properties_Set() const;
    bool is_position_properties_Valid() const;

    QDateTime getReceivedTime() const;
    void setReceivedTime(const QDateTime &received_time);
    bool is_received_time_Set() const;
    bool is_received_time_Valid() const;

    QDateTime getSampleTime() const;
    void setSampleTime(const QDateTime &sample_time);
    bool is_sample_time_Set() const;
    bool is_sample_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDevicePositionUpdate_Accuracy m_accuracy;
    bool m_accuracy_isSet;
    bool m_accuracy_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QList m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QMap m_position_properties;
    bool m_position_properties_isSet;
    bool m_position_properties_isValid;

    QDateTime m_received_time;
    bool m_received_time_isSet;
    bool m_received_time_isValid;

    QDateTime m_sample_time;
    bool m_sample_time_isSet;
    bool m_sample_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevicePosition)

#endif // OAIDevicePosition_H
