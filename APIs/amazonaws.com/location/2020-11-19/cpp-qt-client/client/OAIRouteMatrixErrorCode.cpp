/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteMatrixErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteMatrixErrorCode::OAIRouteMatrixErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteMatrixErrorCode::OAIRouteMatrixErrorCode() {
    this->initializeModel();
}

OAIRouteMatrixErrorCode::~OAIRouteMatrixErrorCode() {}

void OAIRouteMatrixErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRouteMatrixErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRouteMatrixErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RouteNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRouteMatrixErrorCode::ROUTENOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RouteTooLong", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRouteMatrixErrorCode::ROUTETOOLONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PositionsNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRouteMatrixErrorCode::POSITIONSNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DestinationPositionNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRouteMatrixErrorCode::DESTINATIONPOSITIONNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeparturePositionNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRouteMatrixErrorCode::DEPARTUREPOSITIONNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OtherValidationError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRouteMatrixErrorCode::OTHERVALIDATIONERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRouteMatrixErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRouteMatrixErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRouteMatrixErrorCode::ROUTENOTFOUND:
            val = "RouteNotFound";
            break;
        case eOAIRouteMatrixErrorCode::ROUTETOOLONG:
            val = "RouteTooLong";
            break;
        case eOAIRouteMatrixErrorCode::POSITIONSNOTFOUND:
            val = "PositionsNotFound";
            break;
        case eOAIRouteMatrixErrorCode::DESTINATIONPOSITIONNOTFOUND:
            val = "DestinationPositionNotFound";
            break;
        case eOAIRouteMatrixErrorCode::DEPARTUREPOSITIONNOTFOUND:
            val = "DeparturePositionNotFound";
            break;
        case eOAIRouteMatrixErrorCode::OTHERVALIDATIONERROR:
            val = "OtherValidationError";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRouteMatrixErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRouteMatrixErrorCode::eOAIRouteMatrixErrorCode OAIRouteMatrixErrorCode::getValue() const {
    return m_value;
}

void OAIRouteMatrixErrorCode::setValue(const OAIRouteMatrixErrorCode::eOAIRouteMatrixErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRouteMatrixErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIRouteMatrixErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
