/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutGeofence_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutGeofence_request::OAIPutGeofence_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutGeofence_request::OAIPutGeofence_request() {
    this->initializeModel();
}

OAIPutGeofence_request::~OAIPutGeofence_request() {}

void OAIPutGeofence_request::initializeModel() {

    m_geofence_properties_isSet = false;
    m_geofence_properties_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;
}

void OAIPutGeofence_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutGeofence_request::fromJsonObject(QJsonObject json) {

    m_geofence_properties_isValid = ::OpenAPI::fromJsonValue(m_geofence_properties, json[QString("GeofenceProperties")]);
    m_geofence_properties_isSet = !json[QString("GeofenceProperties")].isNull() && m_geofence_properties_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("Geometry")]);
    m_geometry_isSet = !json[QString("Geometry")].isNull() && m_geometry_isValid;
}

QString OAIPutGeofence_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutGeofence_request::asJsonObject() const {
    QJsonObject obj;
    if (m_geofence_properties.size() > 0) {
        obj.insert(QString("GeofenceProperties"), ::OpenAPI::toJsonValue(m_geofence_properties));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("Geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    return obj;
}

QMap<QString, QString> OAIPutGeofence_request::getGeofenceProperties() const {
    return m_geofence_properties;
}
void OAIPutGeofence_request::setGeofenceProperties(const QMap<QString, QString> &geofence_properties) {
    m_geofence_properties = geofence_properties;
    m_geofence_properties_isSet = true;
}

bool OAIPutGeofence_request::is_geofence_properties_Set() const{
    return m_geofence_properties_isSet;
}

bool OAIPutGeofence_request::is_geofence_properties_Valid() const{
    return m_geofence_properties_isValid;
}

OAIPutGeofence_request_Geometry OAIPutGeofence_request::getGeometry() const {
    return m_geometry;
}
void OAIPutGeofence_request::setGeometry(const OAIPutGeofence_request_Geometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIPutGeofence_request::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIPutGeofence_request::is_geometry_Valid() const{
    return m_geometry_isValid;
}

bool OAIPutGeofence_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geofence_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutGeofence_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_geometry_isValid && true;
}

} // namespace OpenAPI
