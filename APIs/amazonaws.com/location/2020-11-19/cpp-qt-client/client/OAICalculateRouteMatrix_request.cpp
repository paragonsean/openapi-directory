/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRouteMatrix_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRouteMatrix_request::OAICalculateRouteMatrix_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRouteMatrix_request::OAICalculateRouteMatrix_request() {
    this->initializeModel();
}

OAICalculateRouteMatrix_request::~OAICalculateRouteMatrix_request() {}

void OAICalculateRouteMatrix_request::initializeModel() {

    m_car_mode_options_isSet = false;
    m_car_mode_options_isValid = false;

    m_depart_now_isSet = false;
    m_depart_now_isValid = false;

    m_departure_positions_isSet = false;
    m_departure_positions_isValid = false;

    m_departure_time_isSet = false;
    m_departure_time_isValid = false;

    m_destination_positions_isSet = false;
    m_destination_positions_isValid = false;

    m_distance_unit_isSet = false;
    m_distance_unit_isValid = false;

    m_travel_mode_isSet = false;
    m_travel_mode_isValid = false;

    m_truck_mode_options_isSet = false;
    m_truck_mode_options_isValid = false;
}

void OAICalculateRouteMatrix_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRouteMatrix_request::fromJsonObject(QJsonObject json) {

    m_car_mode_options_isValid = ::OpenAPI::fromJsonValue(m_car_mode_options, json[QString("CarModeOptions")]);
    m_car_mode_options_isSet = !json[QString("CarModeOptions")].isNull() && m_car_mode_options_isValid;

    m_depart_now_isValid = ::OpenAPI::fromJsonValue(m_depart_now, json[QString("DepartNow")]);
    m_depart_now_isSet = !json[QString("DepartNow")].isNull() && m_depart_now_isValid;

    if(json["DeparturePositions"].isArray()){
        auto arr = json["DeparturePositions"].toArray();
        m_departure_positions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_departure_positions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_departure_positions_isSet = !jval.isNull() && m_departure_positions_isValid;
                m_departure_positions.push_back(item);
            }
        }
    }

    m_departure_time_isValid = ::OpenAPI::fromJsonValue(m_departure_time, json[QString("DepartureTime")]);
    m_departure_time_isSet = !json[QString("DepartureTime")].isNull() && m_departure_time_isValid;

    if(json["DestinationPositions"].isArray()){
        auto arr = json["DestinationPositions"].toArray();
        m_destination_positions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_destination_positions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_destination_positions_isSet = !jval.isNull() && m_destination_positions_isValid;
                m_destination_positions.push_back(item);
            }
        }
    }

    m_distance_unit_isValid = ::OpenAPI::fromJsonValue(m_distance_unit, json[QString("DistanceUnit")]);
    m_distance_unit_isSet = !json[QString("DistanceUnit")].isNull() && m_distance_unit_isValid;

    m_travel_mode_isValid = ::OpenAPI::fromJsonValue(m_travel_mode, json[QString("TravelMode")]);
    m_travel_mode_isSet = !json[QString("TravelMode")].isNull() && m_travel_mode_isValid;

    m_truck_mode_options_isValid = ::OpenAPI::fromJsonValue(m_truck_mode_options, json[QString("TruckModeOptions")]);
    m_truck_mode_options_isSet = !json[QString("TruckModeOptions")].isNull() && m_truck_mode_options_isValid;
}

QString OAICalculateRouteMatrix_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRouteMatrix_request::asJsonObject() const {
    QJsonObject obj;
    if (m_car_mode_options.isSet()) {
        obj.insert(QString("CarModeOptions"), ::OpenAPI::toJsonValue(m_car_mode_options));
    }
    if (m_depart_now_isSet) {
        obj.insert(QString("DepartNow"), ::OpenAPI::toJsonValue(m_depart_now));
    }
    if (m_departure_positions.size() > 0) {
        
        obj.insert(QString("DeparturePositions"), toJsonValue(m_departure_positions));
    }
    if (m_departure_time_isSet) {
        obj.insert(QString("DepartureTime"), ::OpenAPI::toJsonValue(m_departure_time));
    }
    if (m_destination_positions.size() > 0) {
        
        obj.insert(QString("DestinationPositions"), toJsonValue(m_destination_positions));
    }
    if (m_distance_unit_isSet) {
        obj.insert(QString("DistanceUnit"), ::OpenAPI::toJsonValue(m_distance_unit));
    }
    if (m_travel_mode_isSet) {
        obj.insert(QString("TravelMode"), ::OpenAPI::toJsonValue(m_travel_mode));
    }
    if (m_truck_mode_options.isSet()) {
        obj.insert(QString("TruckModeOptions"), ::OpenAPI::toJsonValue(m_truck_mode_options));
    }
    return obj;
}

OAICalculateRoute_request_CarModeOptions OAICalculateRouteMatrix_request::getCarModeOptions() const {
    return m_car_mode_options;
}
void OAICalculateRouteMatrix_request::setCarModeOptions(const OAICalculateRoute_request_CarModeOptions &car_mode_options) {
    m_car_mode_options = car_mode_options;
    m_car_mode_options_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_car_mode_options_Set() const{
    return m_car_mode_options_isSet;
}

bool OAICalculateRouteMatrix_request::is_car_mode_options_Valid() const{
    return m_car_mode_options_isValid;
}

bool OAICalculateRouteMatrix_request::isDepartNow() const {
    return m_depart_now;
}
void OAICalculateRouteMatrix_request::setDepartNow(const bool &depart_now) {
    m_depart_now = depart_now;
    m_depart_now_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_depart_now_Set() const{
    return m_depart_now_isSet;
}

bool OAICalculateRouteMatrix_request::is_depart_now_Valid() const{
    return m_depart_now_isValid;
}

QList<QList> OAICalculateRouteMatrix_request::getDeparturePositions() const {
    return m_departure_positions;
}
void OAICalculateRouteMatrix_request::setDeparturePositions(const QList<QList> &departure_positions) {
    m_departure_positions = departure_positions;
    m_departure_positions_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_departure_positions_Set() const{
    return m_departure_positions_isSet;
}

bool OAICalculateRouteMatrix_request::is_departure_positions_Valid() const{
    return m_departure_positions_isValid;
}

QDateTime OAICalculateRouteMatrix_request::getDepartureTime() const {
    return m_departure_time;
}
void OAICalculateRouteMatrix_request::setDepartureTime(const QDateTime &departure_time) {
    m_departure_time = departure_time;
    m_departure_time_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_departure_time_Set() const{
    return m_departure_time_isSet;
}

bool OAICalculateRouteMatrix_request::is_departure_time_Valid() const{
    return m_departure_time_isValid;
}

QList<QList> OAICalculateRouteMatrix_request::getDestinationPositions() const {
    return m_destination_positions;
}
void OAICalculateRouteMatrix_request::setDestinationPositions(const QList<QList> &destination_positions) {
    m_destination_positions = destination_positions;
    m_destination_positions_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_destination_positions_Set() const{
    return m_destination_positions_isSet;
}

bool OAICalculateRouteMatrix_request::is_destination_positions_Valid() const{
    return m_destination_positions_isValid;
}

QString OAICalculateRouteMatrix_request::getDistanceUnit() const {
    return m_distance_unit;
}
void OAICalculateRouteMatrix_request::setDistanceUnit(const QString &distance_unit) {
    m_distance_unit = distance_unit;
    m_distance_unit_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_distance_unit_Set() const{
    return m_distance_unit_isSet;
}

bool OAICalculateRouteMatrix_request::is_distance_unit_Valid() const{
    return m_distance_unit_isValid;
}

QString OAICalculateRouteMatrix_request::getTravelMode() const {
    return m_travel_mode;
}
void OAICalculateRouteMatrix_request::setTravelMode(const QString &travel_mode) {
    m_travel_mode = travel_mode;
    m_travel_mode_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_travel_mode_Set() const{
    return m_travel_mode_isSet;
}

bool OAICalculateRouteMatrix_request::is_travel_mode_Valid() const{
    return m_travel_mode_isValid;
}

OAICalculateRoute_request_TruckModeOptions OAICalculateRouteMatrix_request::getTruckModeOptions() const {
    return m_truck_mode_options;
}
void OAICalculateRouteMatrix_request::setTruckModeOptions(const OAICalculateRoute_request_TruckModeOptions &truck_mode_options) {
    m_truck_mode_options = truck_mode_options;
    m_truck_mode_options_isSet = true;
}

bool OAICalculateRouteMatrix_request::is_truck_mode_options_Set() const{
    return m_truck_mode_options_isSet;
}

bool OAICalculateRouteMatrix_request::is_truck_mode_options_Valid() const{
    return m_truck_mode_options_isValid;
}

bool OAICalculateRouteMatrix_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_car_mode_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depart_now_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_positions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_positions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truck_mode_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRouteMatrix_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_departure_positions_isValid && m_destination_positions_isValid && true;
}

} // namespace OpenAPI
