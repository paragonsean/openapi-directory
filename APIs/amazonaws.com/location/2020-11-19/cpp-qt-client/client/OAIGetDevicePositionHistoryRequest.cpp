/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDevicePositionHistoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDevicePositionHistoryRequest::OAIGetDevicePositionHistoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDevicePositionHistoryRequest::OAIGetDevicePositionHistoryRequest() {
    this->initializeModel();
}

OAIGetDevicePositionHistoryRequest::~OAIGetDevicePositionHistoryRequest() {}

void OAIGetDevicePositionHistoryRequest::initializeModel() {

    m_end_time_exclusive_isSet = false;
    m_end_time_exclusive_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_start_time_inclusive_isSet = false;
    m_start_time_inclusive_isValid = false;
}

void OAIGetDevicePositionHistoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDevicePositionHistoryRequest::fromJsonObject(QJsonObject json) {

    m_end_time_exclusive_isValid = ::OpenAPI::fromJsonValue(m_end_time_exclusive, json[QString("EndTimeExclusive")]);
    m_end_time_exclusive_isSet = !json[QString("EndTimeExclusive")].isNull() && m_end_time_exclusive_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_start_time_inclusive_isValid = ::OpenAPI::fromJsonValue(m_start_time_inclusive, json[QString("StartTimeInclusive")]);
    m_start_time_inclusive_isSet = !json[QString("StartTimeInclusive")].isNull() && m_start_time_inclusive_isValid;
}

QString OAIGetDevicePositionHistoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDevicePositionHistoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_exclusive_isSet) {
        obj.insert(QString("EndTimeExclusive"), ::OpenAPI::toJsonValue(m_end_time_exclusive));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_start_time_inclusive_isSet) {
        obj.insert(QString("StartTimeInclusive"), ::OpenAPI::toJsonValue(m_start_time_inclusive));
    }
    return obj;
}

QDateTime OAIGetDevicePositionHistoryRequest::getEndTimeExclusive() const {
    return m_end_time_exclusive;
}
void OAIGetDevicePositionHistoryRequest::setEndTimeExclusive(const QDateTime &end_time_exclusive) {
    m_end_time_exclusive = end_time_exclusive;
    m_end_time_exclusive_isSet = true;
}

bool OAIGetDevicePositionHistoryRequest::is_end_time_exclusive_Set() const{
    return m_end_time_exclusive_isSet;
}

bool OAIGetDevicePositionHistoryRequest::is_end_time_exclusive_Valid() const{
    return m_end_time_exclusive_isValid;
}

qint32 OAIGetDevicePositionHistoryRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetDevicePositionHistoryRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetDevicePositionHistoryRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetDevicePositionHistoryRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetDevicePositionHistoryRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetDevicePositionHistoryRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetDevicePositionHistoryRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetDevicePositionHistoryRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QDateTime OAIGetDevicePositionHistoryRequest::getStartTimeInclusive() const {
    return m_start_time_inclusive;
}
void OAIGetDevicePositionHistoryRequest::setStartTimeInclusive(const QDateTime &start_time_inclusive) {
    m_start_time_inclusive = start_time_inclusive;
    m_start_time_inclusive_isSet = true;
}

bool OAIGetDevicePositionHistoryRequest::is_start_time_inclusive_Set() const{
    return m_start_time_inclusive_isSet;
}

bool OAIGetDevicePositionHistoryRequest::is_start_time_inclusive_Valid() const{
    return m_start_time_inclusive_isValid;
}

bool OAIGetDevicePositionHistoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDevicePositionHistoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
