/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKeyRequest::OAICreateKeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKeyRequest::OAICreateKeyRequest() {
    this->initializeModel();
}

OAICreateKeyRequest::~OAICreateKeyRequest() {}

void OAICreateKeyRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_no_expiry_isSet = false;
    m_no_expiry_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateKeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKeyRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("ExpireTime")]);
    m_expire_time_isSet = !json[QString("ExpireTime")].isNull() && m_expire_time_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("KeyName")]);
    m_key_name_isSet = !json[QString("KeyName")].isNull() && m_key_name_isValid;

    m_no_expiry_isValid = ::OpenAPI::fromJsonValue(m_no_expiry, json[QString("NoExpiry")]);
    m_no_expiry_isSet = !json[QString("NoExpiry")].isNull() && m_no_expiry_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("Restrictions")]);
    m_restrictions_isSet = !json[QString("Restrictions")].isNull() && m_restrictions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateKeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("ExpireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("KeyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_no_expiry_isSet) {
        obj.insert(QString("NoExpiry"), ::OpenAPI::toJsonValue(m_no_expiry));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("Restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateKeyRequest::getDescription() const {
    return m_description;
}
void OAICreateKeyRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateKeyRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateKeyRequest::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICreateKeyRequest::getExpireTime() const {
    return m_expire_time;
}
void OAICreateKeyRequest::setExpireTime(const QDateTime &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICreateKeyRequest::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICreateKeyRequest::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAICreateKeyRequest::getKeyName() const {
    return m_key_name;
}
void OAICreateKeyRequest::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAICreateKeyRequest::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAICreateKeyRequest::is_key_name_Valid() const{
    return m_key_name_isValid;
}

bool OAICreateKeyRequest::getNoExpiry() const {
    return m_no_expiry;
}
void OAICreateKeyRequest::setNoExpiry(const bool &no_expiry) {
    m_no_expiry = no_expiry;
    m_no_expiry_isSet = true;
}

bool OAICreateKeyRequest::is_no_expiry_Set() const{
    return m_no_expiry_isSet;
}

bool OAICreateKeyRequest::is_no_expiry_Valid() const{
    return m_no_expiry_isValid;
}

OAICreateKeyRequest_Restrictions OAICreateKeyRequest::getRestrictions() const {
    return m_restrictions;
}
void OAICreateKeyRequest::setRestrictions(const OAICreateKeyRequest_Restrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAICreateKeyRequest::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAICreateKeyRequest::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QMap OAICreateKeyRequest::getTags() const {
    return m_tags;
}
void OAICreateKeyRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateKeyRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateKeyRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateKeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_name_isValid && m_restrictions_isValid && true;
}

} // namespace OpenAPI
