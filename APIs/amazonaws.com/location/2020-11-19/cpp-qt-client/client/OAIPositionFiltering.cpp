/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionFiltering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionFiltering::OAIPositionFiltering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionFiltering::OAIPositionFiltering() {
    this->initializeModel();
}

OAIPositionFiltering::~OAIPositionFiltering() {}

void OAIPositionFiltering::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPositionFiltering::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPositionFiltering::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TimeBased", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPositionFiltering::TIMEBASED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DistanceBased", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPositionFiltering::DISTANCEBASED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccuracyBased", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPositionFiltering::ACCURACYBASED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPositionFiltering::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPositionFiltering::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPositionFiltering::TIMEBASED:
            val = "TimeBased";
            break;
        case eOAIPositionFiltering::DISTANCEBASED:
            val = "DistanceBased";
            break;
        case eOAIPositionFiltering::ACCURACYBASED:
            val = "AccuracyBased";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPositionFiltering::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPositionFiltering::eOAIPositionFiltering OAIPositionFiltering::getValue() const {
    return m_value;
}

void OAIPositionFiltering::setValue(const OAIPositionFiltering::eOAIPositionFiltering& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPositionFiltering::isSet() const {
    
    return m_value_isSet;
}

bool OAIPositionFiltering::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
