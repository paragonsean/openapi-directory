/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchPlaceIndexForSuggestionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchPlaceIndexForSuggestionsRequest::OAISearchPlaceIndexForSuggestionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchPlaceIndexForSuggestionsRequest::OAISearchPlaceIndexForSuggestionsRequest() {
    this->initializeModel();
}

OAISearchPlaceIndexForSuggestionsRequest::~OAISearchPlaceIndexForSuggestionsRequest() {}

void OAISearchPlaceIndexForSuggestionsRequest::initializeModel() {

    m_bias_position_isSet = false;
    m_bias_position_isValid = false;

    m_filter_b_box_isSet = false;
    m_filter_b_box_isValid = false;

    m_filter_categories_isSet = false;
    m_filter_categories_isValid = false;

    m_filter_countries_isSet = false;
    m_filter_countries_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISearchPlaceIndexForSuggestionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchPlaceIndexForSuggestionsRequest::fromJsonObject(QJsonObject json) {

    m_bias_position_isValid = ::OpenAPI::fromJsonValue(m_bias_position, json[QString("BiasPosition")]);
    m_bias_position_isSet = !json[QString("BiasPosition")].isNull() && m_bias_position_isValid;

    m_filter_b_box_isValid = ::OpenAPI::fromJsonValue(m_filter_b_box, json[QString("FilterBBox")]);
    m_filter_b_box_isSet = !json[QString("FilterBBox")].isNull() && m_filter_b_box_isValid;

    m_filter_categories_isValid = ::OpenAPI::fromJsonValue(m_filter_categories, json[QString("FilterCategories")]);
    m_filter_categories_isSet = !json[QString("FilterCategories")].isNull() && m_filter_categories_isValid;

    m_filter_countries_isValid = ::OpenAPI::fromJsonValue(m_filter_countries, json[QString("FilterCountries")]);
    m_filter_countries_isSet = !json[QString("FilterCountries")].isNull() && m_filter_countries_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAISearchPlaceIndexForSuggestionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchPlaceIndexForSuggestionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_bias_position.isSet()) {
        obj.insert(QString("BiasPosition"), ::OpenAPI::toJsonValue(m_bias_position));
    }
    if (m_filter_b_box.isSet()) {
        obj.insert(QString("FilterBBox"), ::OpenAPI::toJsonValue(m_filter_b_box));
    }
    if (m_filter_categories.isSet()) {
        obj.insert(QString("FilterCategories"), ::OpenAPI::toJsonValue(m_filter_categories));
    }
    if (m_filter_countries.isSet()) {
        obj.insert(QString("FilterCountries"), ::OpenAPI::toJsonValue(m_filter_countries));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList OAISearchPlaceIndexForSuggestionsRequest::getBiasPosition() const {
    return m_bias_position;
}
void OAISearchPlaceIndexForSuggestionsRequest::setBiasPosition(const QList &bias_position) {
    m_bias_position = bias_position;
    m_bias_position_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_bias_position_Set() const{
    return m_bias_position_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_bias_position_Valid() const{
    return m_bias_position_isValid;
}

QList OAISearchPlaceIndexForSuggestionsRequest::getFilterBBox() const {
    return m_filter_b_box;
}
void OAISearchPlaceIndexForSuggestionsRequest::setFilterBBox(const QList &filter_b_box) {
    m_filter_b_box = filter_b_box;
    m_filter_b_box_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_filter_b_box_Set() const{
    return m_filter_b_box_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_filter_b_box_Valid() const{
    return m_filter_b_box_isValid;
}

QList OAISearchPlaceIndexForSuggestionsRequest::getFilterCategories() const {
    return m_filter_categories;
}
void OAISearchPlaceIndexForSuggestionsRequest::setFilterCategories(const QList &filter_categories) {
    m_filter_categories = filter_categories;
    m_filter_categories_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_filter_categories_Set() const{
    return m_filter_categories_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_filter_categories_Valid() const{
    return m_filter_categories_isValid;
}

QList OAISearchPlaceIndexForSuggestionsRequest::getFilterCountries() const {
    return m_filter_countries;
}
void OAISearchPlaceIndexForSuggestionsRequest::setFilterCountries(const QList &filter_countries) {
    m_filter_countries = filter_countries;
    m_filter_countries_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_filter_countries_Set() const{
    return m_filter_countries_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_filter_countries_Valid() const{
    return m_filter_countries_isValid;
}

QString OAISearchPlaceIndexForSuggestionsRequest::getLanguage() const {
    return m_language;
}
void OAISearchPlaceIndexForSuggestionsRequest::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAISearchPlaceIndexForSuggestionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchPlaceIndexForSuggestionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAISearchPlaceIndexForSuggestionsRequest::getText() const {
    return m_text;
}
void OAISearchPlaceIndexForSuggestionsRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAISearchPlaceIndexForSuggestionsRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISearchPlaceIndexForSuggestionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bias_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_b_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_countries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchPlaceIndexForSuggestionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
