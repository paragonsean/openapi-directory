/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchForPositionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchForPositionResult::OAISearchForPositionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchForPositionResult::OAISearchForPositionResult() {
    this->initializeModel();
}

OAISearchForPositionResult::~OAISearchForPositionResult() {}

void OAISearchForPositionResult::initializeModel() {

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;
}

void OAISearchForPositionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchForPositionResult::fromJsonObject(QJsonObject json) {

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("Place")]);
    m_place_isSet = !json[QString("Place")].isNull() && m_place_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("PlaceId")]);
    m_place_id_isSet = !json[QString("PlaceId")].isNull() && m_place_id_isValid;
}

QString OAISearchForPositionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchForPositionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_place.isSet()) {
        obj.insert(QString("Place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("PlaceId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    return obj;
}

double OAISearchForPositionResult::getDistance() const {
    return m_distance;
}
void OAISearchForPositionResult::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAISearchForPositionResult::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAISearchForPositionResult::is_distance_Valid() const{
    return m_distance_isValid;
}

OAISearchForPositionResult_Place OAISearchForPositionResult::getPlace() const {
    return m_place;
}
void OAISearchForPositionResult::setPlace(const OAISearchForPositionResult_Place &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAISearchForPositionResult::is_place_Set() const{
    return m_place_isSet;
}

bool OAISearchForPositionResult::is_place_Valid() const{
    return m_place_isValid;
}

QString OAISearchForPositionResult::getPlaceId() const {
    return m_place_id;
}
void OAISearchForPositionResult::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAISearchForPositionResult::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAISearchForPositionResult::is_place_id_Valid() const{
    return m_place_id_isValid;
}

bool OAISearchForPositionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchForPositionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_isValid && m_place_isValid && true;
}

} // namespace OpenAPI
