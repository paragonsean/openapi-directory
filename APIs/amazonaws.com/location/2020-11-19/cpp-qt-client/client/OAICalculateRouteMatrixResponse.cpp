/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRouteMatrixResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRouteMatrixResponse::OAICalculateRouteMatrixResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRouteMatrixResponse::OAICalculateRouteMatrixResponse() {
    this->initializeModel();
}

OAICalculateRouteMatrixResponse::~OAICalculateRouteMatrixResponse() {}

void OAICalculateRouteMatrixResponse::initializeModel() {

    m_route_matrix_isSet = false;
    m_route_matrix_isValid = false;

    m_snapped_departure_positions_isSet = false;
    m_snapped_departure_positions_isValid = false;

    m_snapped_destination_positions_isSet = false;
    m_snapped_destination_positions_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAICalculateRouteMatrixResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRouteMatrixResponse::fromJsonObject(QJsonObject json) {

    m_route_matrix_isValid = ::OpenAPI::fromJsonValue(m_route_matrix, json[QString("RouteMatrix")]);
    m_route_matrix_isSet = !json[QString("RouteMatrix")].isNull() && m_route_matrix_isValid;

    m_snapped_departure_positions_isValid = ::OpenAPI::fromJsonValue(m_snapped_departure_positions, json[QString("SnappedDeparturePositions")]);
    m_snapped_departure_positions_isSet = !json[QString("SnappedDeparturePositions")].isNull() && m_snapped_departure_positions_isValid;

    m_snapped_destination_positions_isValid = ::OpenAPI::fromJsonValue(m_snapped_destination_positions, json[QString("SnappedDestinationPositions")]);
    m_snapped_destination_positions_isSet = !json[QString("SnappedDestinationPositions")].isNull() && m_snapped_destination_positions_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("Summary")]);
    m_summary_isSet = !json[QString("Summary")].isNull() && m_summary_isValid;
}

QString OAICalculateRouteMatrixResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRouteMatrixResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_route_matrix.isSet()) {
        obj.insert(QString("RouteMatrix"), ::OpenAPI::toJsonValue(m_route_matrix));
    }
    if (m_snapped_departure_positions.isSet()) {
        obj.insert(QString("SnappedDeparturePositions"), ::OpenAPI::toJsonValue(m_snapped_departure_positions));
    }
    if (m_snapped_destination_positions.isSet()) {
        obj.insert(QString("SnappedDestinationPositions"), ::OpenAPI::toJsonValue(m_snapped_destination_positions));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("Summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList OAICalculateRouteMatrixResponse::getRouteMatrix() const {
    return m_route_matrix;
}
void OAICalculateRouteMatrixResponse::setRouteMatrix(const QList &route_matrix) {
    m_route_matrix = route_matrix;
    m_route_matrix_isSet = true;
}

bool OAICalculateRouteMatrixResponse::is_route_matrix_Set() const{
    return m_route_matrix_isSet;
}

bool OAICalculateRouteMatrixResponse::is_route_matrix_Valid() const{
    return m_route_matrix_isValid;
}

QList OAICalculateRouteMatrixResponse::getSnappedDeparturePositions() const {
    return m_snapped_departure_positions;
}
void OAICalculateRouteMatrixResponse::setSnappedDeparturePositions(const QList &snapped_departure_positions) {
    m_snapped_departure_positions = snapped_departure_positions;
    m_snapped_departure_positions_isSet = true;
}

bool OAICalculateRouteMatrixResponse::is_snapped_departure_positions_Set() const{
    return m_snapped_departure_positions_isSet;
}

bool OAICalculateRouteMatrixResponse::is_snapped_departure_positions_Valid() const{
    return m_snapped_departure_positions_isValid;
}

QList OAICalculateRouteMatrixResponse::getSnappedDestinationPositions() const {
    return m_snapped_destination_positions;
}
void OAICalculateRouteMatrixResponse::setSnappedDestinationPositions(const QList &snapped_destination_positions) {
    m_snapped_destination_positions = snapped_destination_positions;
    m_snapped_destination_positions_isSet = true;
}

bool OAICalculateRouteMatrixResponse::is_snapped_destination_positions_Set() const{
    return m_snapped_destination_positions_isSet;
}

bool OAICalculateRouteMatrixResponse::is_snapped_destination_positions_Valid() const{
    return m_snapped_destination_positions_isValid;
}

OAICalculateRouteMatrixResponse_Summary OAICalculateRouteMatrixResponse::getSummary() const {
    return m_summary;
}
void OAICalculateRouteMatrixResponse::setSummary(const OAICalculateRouteMatrixResponse_Summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICalculateRouteMatrixResponse::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICalculateRouteMatrixResponse::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAICalculateRouteMatrixResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_route_matrix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapped_departure_positions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapped_destination_positions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRouteMatrixResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_route_matrix_isValid && m_summary_isValid && true;
}

} // namespace OpenAPI
