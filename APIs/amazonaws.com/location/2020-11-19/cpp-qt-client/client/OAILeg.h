/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILeg.h
 *
 * &lt;p&gt;Contains the calculated route&#39;s details for each path between a pair of positions. The number of legs returned corresponds to one fewer than the total number of positions in the request. &lt;/p&gt; &lt;p&gt;For example, a route with a departure position and destination position returns one leg with the positions &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html\&quot;&gt;snapped to a nearby road&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;StartPosition&lt;/code&gt; is the departure position.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;EndPosition&lt;/code&gt; is the destination position.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A route with a waypoint between the departure and destination position returns two legs with the positions snapped to a nearby road:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Leg 1: The &lt;code&gt;StartPosition&lt;/code&gt; is the departure position . The &lt;code&gt;EndPosition&lt;/code&gt; is the waypoint positon.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leg 2: The &lt;code&gt;StartPosition&lt;/code&gt; is the waypoint position. The &lt;code&gt;EndPosition&lt;/code&gt; is the destination position.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAILeg_H
#define OAILeg_H

#include <QJsonObject>

#include "OAILeg_Geometry.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILeg_Geometry;

class OAILeg : public OAIObject {
public:
    OAILeg();
    OAILeg(QString json);
    ~OAILeg() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    double getDurationSeconds() const;
    void setDurationSeconds(const double &duration_seconds);
    bool is_duration_seconds_Set() const;
    bool is_duration_seconds_Valid() const;

    QList getEndPosition() const;
    void setEndPosition(const QList &end_position);
    bool is_end_position_Set() const;
    bool is_end_position_Valid() const;

    OAILeg_Geometry getGeometry() const;
    void setGeometry(const OAILeg_Geometry &geometry);
    bool is_geometry_Set() const;
    bool is_geometry_Valid() const;

    QList getStartPosition() const;
    void setStartPosition(const QList &start_position);
    bool is_start_position_Set() const;
    bool is_start_position_Valid() const;

    QList getSteps() const;
    void setSteps(const QList &steps);
    bool is_steps_Set() const;
    bool is_steps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    double m_duration_seconds;
    bool m_duration_seconds_isSet;
    bool m_duration_seconds_isValid;

    QList m_end_position;
    bool m_end_position_isSet;
    bool m_end_position_isValid;

    OAILeg_Geometry m_geometry;
    bool m_geometry_isSet;
    bool m_geometry_isValid;

    QList m_start_position;
    bool m_start_position_isSet;
    bool m_start_position_isValid;

    QList m_steps;
    bool m_steps_isSet;
    bool m_steps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILeg)

#endif // OAILeg_H
