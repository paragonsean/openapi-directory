/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateKeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateKeyRequest::OAIUpdateKeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateKeyRequest::OAIUpdateKeyRequest() {
    this->initializeModel();
}

OAIUpdateKeyRequest::~OAIUpdateKeyRequest() {}

void OAIUpdateKeyRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_force_update_isSet = false;
    m_force_update_isValid = false;

    m_no_expiry_isSet = false;
    m_no_expiry_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;
}

void OAIUpdateKeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateKeyRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("ExpireTime")]);
    m_expire_time_isSet = !json[QString("ExpireTime")].isNull() && m_expire_time_isValid;

    m_force_update_isValid = ::OpenAPI::fromJsonValue(m_force_update, json[QString("ForceUpdate")]);
    m_force_update_isSet = !json[QString("ForceUpdate")].isNull() && m_force_update_isValid;

    m_no_expiry_isValid = ::OpenAPI::fromJsonValue(m_no_expiry, json[QString("NoExpiry")]);
    m_no_expiry_isSet = !json[QString("NoExpiry")].isNull() && m_no_expiry_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("Restrictions")]);
    m_restrictions_isSet = !json[QString("Restrictions")].isNull() && m_restrictions_isValid;
}

QString OAIUpdateKeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateKeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("ExpireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_force_update_isSet) {
        obj.insert(QString("ForceUpdate"), ::OpenAPI::toJsonValue(m_force_update));
    }
    if (m_no_expiry_isSet) {
        obj.insert(QString("NoExpiry"), ::OpenAPI::toJsonValue(m_no_expiry));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("Restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    return obj;
}

QString OAIUpdateKeyRequest::getDescription() const {
    return m_description;
}
void OAIUpdateKeyRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateKeyRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateKeyRequest::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIUpdateKeyRequest::getExpireTime() const {
    return m_expire_time;
}
void OAIUpdateKeyRequest::setExpireTime(const QDateTime &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIUpdateKeyRequest::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIUpdateKeyRequest::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

bool OAIUpdateKeyRequest::getForceUpdate() const {
    return m_force_update;
}
void OAIUpdateKeyRequest::setForceUpdate(const bool &force_update) {
    m_force_update = force_update;
    m_force_update_isSet = true;
}

bool OAIUpdateKeyRequest::is_force_update_Set() const{
    return m_force_update_isSet;
}

bool OAIUpdateKeyRequest::is_force_update_Valid() const{
    return m_force_update_isValid;
}

bool OAIUpdateKeyRequest::getNoExpiry() const {
    return m_no_expiry;
}
void OAIUpdateKeyRequest::setNoExpiry(const bool &no_expiry) {
    m_no_expiry = no_expiry;
    m_no_expiry_isSet = true;
}

bool OAIUpdateKeyRequest::is_no_expiry_Set() const{
    return m_no_expiry_isSet;
}

bool OAIUpdateKeyRequest::is_no_expiry_Valid() const{
    return m_no_expiry_isValid;
}

OAIUpdateKeyRequest_Restrictions OAIUpdateKeyRequest::getRestrictions() const {
    return m_restrictions;
}
void OAIUpdateKeyRequest::setRestrictions(const OAIUpdateKeyRequest_Restrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIUpdateKeyRequest::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIUpdateKeyRequest::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

bool OAIUpdateKeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateKeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
