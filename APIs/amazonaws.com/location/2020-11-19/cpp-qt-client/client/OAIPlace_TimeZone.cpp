/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace_TimeZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace_TimeZone::OAIPlace_TimeZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace_TimeZone::OAIPlace_TimeZone() {
    this->initializeModel();
}

OAIPlace_TimeZone::~OAIPlace_TimeZone() {}

void OAIPlace_TimeZone::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAIPlace_TimeZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace_TimeZone::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("Offset")]);
    m_offset_isSet = !json[QString("Offset")].isNull() && m_offset_isValid;
}

QString OAIPlace_TimeZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace_TimeZone::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("Offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

QString OAIPlace_TimeZone::getName() const {
    return m_name;
}
void OAIPlace_TimeZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlace_TimeZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlace_TimeZone::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPlace_TimeZone::getOffset() const {
    return m_offset;
}
void OAIPlace_TimeZone::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPlace_TimeZone::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPlace_TimeZone::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIPlace_TimeZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace_TimeZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
