/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDevicePositionHistoryRequest.h
 *
 * 
 */

#ifndef OAIGetDevicePositionHistoryRequest_H
#define OAIGetDevicePositionHistoryRequest_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDevicePositionHistoryRequest : public OAIObject {
public:
    OAIGetDevicePositionHistoryRequest();
    OAIGetDevicePositionHistoryRequest(QString json);
    ~OAIGetDevicePositionHistoryRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndTimeExclusive() const;
    void setEndTimeExclusive(const QDateTime &end_time_exclusive);
    bool is_end_time_exclusive_Set() const;
    bool is_end_time_exclusive_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    QDateTime getStartTimeInclusive() const;
    void setStartTimeInclusive(const QDateTime &start_time_inclusive);
    bool is_start_time_inclusive_Set() const;
    bool is_start_time_inclusive_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_time_exclusive;
    bool m_end_time_exclusive_isSet;
    bool m_end_time_exclusive_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    QDateTime m_start_time_inclusive;
    bool m_start_time_inclusive_isSet;
    bool m_start_time_inclusive_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDevicePositionHistoryRequest)

#endif // OAIGetDevicePositionHistoryRequest_H
