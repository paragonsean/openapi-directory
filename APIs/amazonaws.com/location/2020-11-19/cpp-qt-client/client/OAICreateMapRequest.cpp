/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMapRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMapRequest::OAICreateMapRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMapRequest::OAICreateMapRequest() {
    this->initializeModel();
}

OAICreateMapRequest::~OAICreateMapRequest() {}

void OAICreateMapRequest::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_map_name_isSet = false;
    m_map_name_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMapRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMapRequest::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_map_name_isValid = ::OpenAPI::fromJsonValue(m_map_name, json[QString("MapName")]);
    m_map_name_isSet = !json[QString("MapName")].isNull() && m_map_name_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("PricingPlan")]);
    m_pricing_plan_isSet = !json[QString("PricingPlan")].isNull() && m_pricing_plan_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateMapRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMapRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_map_name_isSet) {
        obj.insert(QString("MapName"), ::OpenAPI::toJsonValue(m_map_name));
    }
    if (m_pricing_plan.isSet()) {
        obj.insert(QString("PricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateMapRequest_Configuration OAICreateMapRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateMapRequest::setConfiguration(const OAICreateMapRequest_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateMapRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateMapRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICreateMapRequest::getDescription() const {
    return m_description;
}
void OAICreateMapRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateMapRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateMapRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateMapRequest::getMapName() const {
    return m_map_name;
}
void OAICreateMapRequest::setMapName(const QString &map_name) {
    m_map_name = map_name;
    m_map_name_isSet = true;
}

bool OAICreateMapRequest::is_map_name_Set() const{
    return m_map_name_isSet;
}

bool OAICreateMapRequest::is_map_name_Valid() const{
    return m_map_name_isValid;
}

OAIPricingPlan OAICreateMapRequest::getPricingPlan() const {
    return m_pricing_plan;
}
void OAICreateMapRequest::setPricingPlan(const OAIPricingPlan &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAICreateMapRequest::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAICreateMapRequest::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

QMap OAICreateMapRequest::getTags() const {
    return m_tags;
}
void OAICreateMapRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMapRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMapRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMapRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMapRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && m_map_name_isValid && true;
}

} // namespace OpenAPI
