/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRoute_request_TruckModeOptions_Dimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRoute_request_TruckModeOptions_Dimensions::OAICalculateRoute_request_TruckModeOptions_Dimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRoute_request_TruckModeOptions_Dimensions::OAICalculateRoute_request_TruckModeOptions_Dimensions() {
    this->initializeModel();
}

OAICalculateRoute_request_TruckModeOptions_Dimensions::~OAICalculateRoute_request_TruckModeOptions_Dimensions() {}

void OAICalculateRoute_request_TruckModeOptions_Dimensions::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICalculateRoute_request_TruckModeOptions_Dimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRoute_request_TruckModeOptions_Dimensions::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("Length")]);
    m_length_isSet = !json[QString("Length")].isNull() && m_length_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAICalculateRoute_request_TruckModeOptions_Dimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRoute_request_TruckModeOptions_Dimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_length_isSet) {
        obj.insert(QString("Length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAICalculateRoute_request_TruckModeOptions_Dimensions::getHeight() const {
    return m_height;
}
void OAICalculateRoute_request_TruckModeOptions_Dimensions::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_height_Set() const{
    return m_height_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_height_Valid() const{
    return m_height_isValid;
}

double OAICalculateRoute_request_TruckModeOptions_Dimensions::getLength() const {
    return m_length;
}
void OAICalculateRoute_request_TruckModeOptions_Dimensions::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_length_Set() const{
    return m_length_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_length_Valid() const{
    return m_length_isValid;
}

OAIDimensionUnit OAICalculateRoute_request_TruckModeOptions_Dimensions::getUnit() const {
    return m_unit;
}
void OAICalculateRoute_request_TruckModeOptions_Dimensions::setUnit(const OAIDimensionUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAICalculateRoute_request_TruckModeOptions_Dimensions::getWidth() const {
    return m_width;
}
void OAICalculateRoute_request_TruckModeOptions_Dimensions::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_width_Set() const{
    return m_width_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRoute_request_TruckModeOptions_Dimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
