/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeGeofenceCollectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeGeofenceCollectionResponse::OAIDescribeGeofenceCollectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeGeofenceCollectionResponse::OAIDescribeGeofenceCollectionResponse() {
    this->initializeModel();
}

OAIDescribeGeofenceCollectionResponse::~OAIDescribeGeofenceCollectionResponse() {}

void OAIDescribeGeofenceCollectionResponse::initializeModel() {

    m_collection_arn_isSet = false;
    m_collection_arn_isValid = false;

    m_collection_name_isSet = false;
    m_collection_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_pricing_plan_data_source_isSet = false;
    m_pricing_plan_data_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIDescribeGeofenceCollectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeGeofenceCollectionResponse::fromJsonObject(QJsonObject json) {

    m_collection_arn_isValid = ::OpenAPI::fromJsonValue(m_collection_arn, json[QString("CollectionArn")]);
    m_collection_arn_isSet = !json[QString("CollectionArn")].isNull() && m_collection_arn_isValid;

    m_collection_name_isValid = ::OpenAPI::fromJsonValue(m_collection_name, json[QString("CollectionName")]);
    m_collection_name_isSet = !json[QString("CollectionName")].isNull() && m_collection_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("PricingPlan")]);
    m_pricing_plan_isSet = !json[QString("PricingPlan")].isNull() && m_pricing_plan_isValid;

    m_pricing_plan_data_source_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan_data_source, json[QString("PricingPlanDataSource")]);
    m_pricing_plan_data_source_isSet = !json[QString("PricingPlanDataSource")].isNull() && m_pricing_plan_data_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("UpdateTime")]);
    m_update_time_isSet = !json[QString("UpdateTime")].isNull() && m_update_time_isValid;
}

QString OAIDescribeGeofenceCollectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeGeofenceCollectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_arn_isSet) {
        obj.insert(QString("CollectionArn"), ::OpenAPI::toJsonValue(m_collection_arn));
    }
    if (m_collection_name_isSet) {
        obj.insert(QString("CollectionName"), ::OpenAPI::toJsonValue(m_collection_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_pricing_plan.isSet()) {
        obj.insert(QString("PricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_pricing_plan_data_source_isSet) {
        obj.insert(QString("PricingPlanDataSource"), ::OpenAPI::toJsonValue(m_pricing_plan_data_source));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("UpdateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIDescribeGeofenceCollectionResponse::getCollectionArn() const {
    return m_collection_arn;
}
void OAIDescribeGeofenceCollectionResponse::setCollectionArn(const QString &collection_arn) {
    m_collection_arn = collection_arn;
    m_collection_arn_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_collection_arn_Set() const{
    return m_collection_arn_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_collection_arn_Valid() const{
    return m_collection_arn_isValid;
}

QString OAIDescribeGeofenceCollectionResponse::getCollectionName() const {
    return m_collection_name;
}
void OAIDescribeGeofenceCollectionResponse::setCollectionName(const QString &collection_name) {
    m_collection_name = collection_name;
    m_collection_name_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_collection_name_Set() const{
    return m_collection_name_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_collection_name_Valid() const{
    return m_collection_name_isValid;
}

QDateTime OAIDescribeGeofenceCollectionResponse::getCreateTime() const {
    return m_create_time;
}
void OAIDescribeGeofenceCollectionResponse::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDescribeGeofenceCollectionResponse::getDescription() const {
    return m_description;
}
void OAIDescribeGeofenceCollectionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeGeofenceCollectionResponse::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDescribeGeofenceCollectionResponse::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

OAIPricingPlan OAIDescribeGeofenceCollectionResponse::getPricingPlan() const {
    return m_pricing_plan;
}
void OAIDescribeGeofenceCollectionResponse::setPricingPlan(const OAIPricingPlan &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

QString OAIDescribeGeofenceCollectionResponse::getPricingPlanDataSource() const {
    return m_pricing_plan_data_source;
}
void OAIDescribeGeofenceCollectionResponse::setPricingPlanDataSource(const QString &pricing_plan_data_source) {
    m_pricing_plan_data_source = pricing_plan_data_source;
    m_pricing_plan_data_source_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_pricing_plan_data_source_Set() const{
    return m_pricing_plan_data_source_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_pricing_plan_data_source_Valid() const{
    return m_pricing_plan_data_source_isValid;
}

QMap OAIDescribeGeofenceCollectionResponse::getTags() const {
    return m_tags;
}
void OAIDescribeGeofenceCollectionResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIDescribeGeofenceCollectionResponse::getUpdateTime() const {
    return m_update_time;
}
void OAIDescribeGeofenceCollectionResponse::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDescribeGeofenceCollectionResponse::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDescribeGeofenceCollectionResponse::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIDescribeGeofenceCollectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeGeofenceCollectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collection_arn_isValid && m_collection_name_isValid && m_create_time_isValid && m_description_isValid && m_update_time_isValid && true;
}

} // namespace OpenAPI
