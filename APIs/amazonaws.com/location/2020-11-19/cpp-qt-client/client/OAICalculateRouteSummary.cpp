/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRouteSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRouteSummary::OAICalculateRouteSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRouteSummary::OAICalculateRouteSummary() {
    this->initializeModel();
}

OAICalculateRouteSummary::~OAICalculateRouteSummary() {}

void OAICalculateRouteSummary::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_distance_unit_isSet = false;
    m_distance_unit_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_route_b_box_isSet = false;
    m_route_b_box_isValid = false;
}

void OAICalculateRouteSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRouteSummary::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_distance_unit_isValid = ::OpenAPI::fromJsonValue(m_distance_unit, json[QString("DistanceUnit")]);
    m_distance_unit_isSet = !json[QString("DistanceUnit")].isNull() && m_distance_unit_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("DurationSeconds")]);
    m_duration_seconds_isSet = !json[QString("DurationSeconds")].isNull() && m_duration_seconds_isValid;

    m_route_b_box_isValid = ::OpenAPI::fromJsonValue(m_route_b_box, json[QString("RouteBBox")]);
    m_route_b_box_isSet = !json[QString("RouteBBox")].isNull() && m_route_b_box_isValid;
}

QString OAICalculateRouteSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRouteSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_isSet) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_distance_unit.isSet()) {
        obj.insert(QString("DistanceUnit"), ::OpenAPI::toJsonValue(m_distance_unit));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("DurationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_route_b_box.isSet()) {
        obj.insert(QString("RouteBBox"), ::OpenAPI::toJsonValue(m_route_b_box));
    }
    return obj;
}

QString OAICalculateRouteSummary::getDataSource() const {
    return m_data_source;
}
void OAICalculateRouteSummary::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAICalculateRouteSummary::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAICalculateRouteSummary::is_data_source_Valid() const{
    return m_data_source_isValid;
}

double OAICalculateRouteSummary::getDistance() const {
    return m_distance;
}
void OAICalculateRouteSummary::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAICalculateRouteSummary::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAICalculateRouteSummary::is_distance_Valid() const{
    return m_distance_isValid;
}

OAIDistanceUnit OAICalculateRouteSummary::getDistanceUnit() const {
    return m_distance_unit;
}
void OAICalculateRouteSummary::setDistanceUnit(const OAIDistanceUnit &distance_unit) {
    m_distance_unit = distance_unit;
    m_distance_unit_isSet = true;
}

bool OAICalculateRouteSummary::is_distance_unit_Set() const{
    return m_distance_unit_isSet;
}

bool OAICalculateRouteSummary::is_distance_unit_Valid() const{
    return m_distance_unit_isValid;
}

double OAICalculateRouteSummary::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAICalculateRouteSummary::setDurationSeconds(const double &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAICalculateRouteSummary::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAICalculateRouteSummary::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

QList OAICalculateRouteSummary::getRouteBBox() const {
    return m_route_b_box;
}
void OAICalculateRouteSummary::setRouteBBox(const QList &route_b_box) {
    m_route_b_box = route_b_box;
    m_route_b_box_isSet = true;
}

bool OAICalculateRouteSummary::is_route_b_box_Set() const{
    return m_route_b_box_isSet;
}

bool OAICalculateRouteSummary::is_route_b_box_Valid() const{
    return m_route_b_box_isValid;
}

bool OAICalculateRouteSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_b_box.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRouteSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && m_distance_isValid && m_distance_unit_isValid && m_duration_seconds_isValid && m_route_b_box_isValid && true;
}

} // namespace OpenAPI
