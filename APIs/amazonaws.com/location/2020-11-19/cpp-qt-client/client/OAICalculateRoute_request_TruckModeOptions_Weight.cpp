/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRoute_request_TruckModeOptions_Weight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRoute_request_TruckModeOptions_Weight::OAICalculateRoute_request_TruckModeOptions_Weight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRoute_request_TruckModeOptions_Weight::OAICalculateRoute_request_TruckModeOptions_Weight() {
    this->initializeModel();
}

OAICalculateRoute_request_TruckModeOptions_Weight::~OAICalculateRoute_request_TruckModeOptions_Weight() {}

void OAICalculateRoute_request_TruckModeOptions_Weight::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAICalculateRoute_request_TruckModeOptions_Weight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRoute_request_TruckModeOptions_Weight::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAICalculateRoute_request_TruckModeOptions_Weight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRoute_request_TruckModeOptions_Weight::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

double OAICalculateRoute_request_TruckModeOptions_Weight::getTotal() const {
    return m_total;
}
void OAICalculateRoute_request_TruckModeOptions_Weight::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions_Weight::is_total_Set() const{
    return m_total_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions_Weight::is_total_Valid() const{
    return m_total_isValid;
}

OAIVehicleWeightUnit OAICalculateRoute_request_TruckModeOptions_Weight::getUnit() const {
    return m_unit;
}
void OAICalculateRoute_request_TruckModeOptions_Weight::setUnit(const OAIVehicleWeightUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAICalculateRoute_request_TruckModeOptions_Weight::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAICalculateRoute_request_TruckModeOptions_Weight::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAICalculateRoute_request_TruckModeOptions_Weight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRoute_request_TruckModeOptions_Weight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
