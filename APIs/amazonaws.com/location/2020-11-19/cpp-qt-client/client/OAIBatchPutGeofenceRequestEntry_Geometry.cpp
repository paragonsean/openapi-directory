/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPutGeofenceRequestEntry_Geometry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPutGeofenceRequestEntry_Geometry::OAIBatchPutGeofenceRequestEntry_Geometry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPutGeofenceRequestEntry_Geometry::OAIBatchPutGeofenceRequestEntry_Geometry() {
    this->initializeModel();
}

OAIBatchPutGeofenceRequestEntry_Geometry::~OAIBatchPutGeofenceRequestEntry_Geometry() {}

void OAIBatchPutGeofenceRequestEntry_Geometry::initializeModel() {

    m_circle_isSet = false;
    m_circle_isValid = false;

    m_polygon_isSet = false;
    m_polygon_isValid = false;
}

void OAIBatchPutGeofenceRequestEntry_Geometry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPutGeofenceRequestEntry_Geometry::fromJsonObject(QJsonObject json) {

    m_circle_isValid = ::OpenAPI::fromJsonValue(m_circle, json[QString("Circle")]);
    m_circle_isSet = !json[QString("Circle")].isNull() && m_circle_isValid;

    m_polygon_isValid = ::OpenAPI::fromJsonValue(m_polygon, json[QString("Polygon")]);
    m_polygon_isSet = !json[QString("Polygon")].isNull() && m_polygon_isValid;
}

QString OAIBatchPutGeofenceRequestEntry_Geometry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPutGeofenceRequestEntry_Geometry::asJsonObject() const {
    QJsonObject obj;
    if (m_circle.isSet()) {
        obj.insert(QString("Circle"), ::OpenAPI::toJsonValue(m_circle));
    }
    if (m_polygon.isSet()) {
        obj.insert(QString("Polygon"), ::OpenAPI::toJsonValue(m_polygon));
    }
    return obj;
}

OAIPutGeofence_request_Geometry_Circle OAIBatchPutGeofenceRequestEntry_Geometry::getCircle() const {
    return m_circle;
}
void OAIBatchPutGeofenceRequestEntry_Geometry::setCircle(const OAIPutGeofence_request_Geometry_Circle &circle) {
    m_circle = circle;
    m_circle_isSet = true;
}

bool OAIBatchPutGeofenceRequestEntry_Geometry::is_circle_Set() const{
    return m_circle_isSet;
}

bool OAIBatchPutGeofenceRequestEntry_Geometry::is_circle_Valid() const{
    return m_circle_isValid;
}

QList OAIBatchPutGeofenceRequestEntry_Geometry::getPolygon() const {
    return m_polygon;
}
void OAIBatchPutGeofenceRequestEntry_Geometry::setPolygon(const QList &polygon) {
    m_polygon = polygon;
    m_polygon_isSet = true;
}

bool OAIBatchPutGeofenceRequestEntry_Geometry::is_polygon_Set() const{
    return m_polygon_isSet;
}

bool OAIBatchPutGeofenceRequestEntry_Geometry::is_polygon_Valid() const{
    return m_polygon_isValid;
}

bool OAIBatchPutGeofenceRequestEntry_Geometry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_circle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_polygon.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPutGeofenceRequestEntry_Geometry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
