/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRoute_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRoute_request::OAICalculateRoute_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRoute_request::OAICalculateRoute_request() {
    this->initializeModel();
}

OAICalculateRoute_request::~OAICalculateRoute_request() {}

void OAICalculateRoute_request::initializeModel() {

    m_car_mode_options_isSet = false;
    m_car_mode_options_isValid = false;

    m_depart_now_isSet = false;
    m_depart_now_isValid = false;

    m_departure_position_isSet = false;
    m_departure_position_isValid = false;

    m_departure_time_isSet = false;
    m_departure_time_isValid = false;

    m_destination_position_isSet = false;
    m_destination_position_isValid = false;

    m_distance_unit_isSet = false;
    m_distance_unit_isValid = false;

    m_include_leg_geometry_isSet = false;
    m_include_leg_geometry_isValid = false;

    m_travel_mode_isSet = false;
    m_travel_mode_isValid = false;

    m_truck_mode_options_isSet = false;
    m_truck_mode_options_isValid = false;

    m_waypoint_positions_isSet = false;
    m_waypoint_positions_isValid = false;
}

void OAICalculateRoute_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRoute_request::fromJsonObject(QJsonObject json) {

    m_car_mode_options_isValid = ::OpenAPI::fromJsonValue(m_car_mode_options, json[QString("CarModeOptions")]);
    m_car_mode_options_isSet = !json[QString("CarModeOptions")].isNull() && m_car_mode_options_isValid;

    m_depart_now_isValid = ::OpenAPI::fromJsonValue(m_depart_now, json[QString("DepartNow")]);
    m_depart_now_isSet = !json[QString("DepartNow")].isNull() && m_depart_now_isValid;

    m_departure_position_isValid = ::OpenAPI::fromJsonValue(m_departure_position, json[QString("DeparturePosition")]);
    m_departure_position_isSet = !json[QString("DeparturePosition")].isNull() && m_departure_position_isValid;

    m_departure_time_isValid = ::OpenAPI::fromJsonValue(m_departure_time, json[QString("DepartureTime")]);
    m_departure_time_isSet = !json[QString("DepartureTime")].isNull() && m_departure_time_isValid;

    m_destination_position_isValid = ::OpenAPI::fromJsonValue(m_destination_position, json[QString("DestinationPosition")]);
    m_destination_position_isSet = !json[QString("DestinationPosition")].isNull() && m_destination_position_isValid;

    m_distance_unit_isValid = ::OpenAPI::fromJsonValue(m_distance_unit, json[QString("DistanceUnit")]);
    m_distance_unit_isSet = !json[QString("DistanceUnit")].isNull() && m_distance_unit_isValid;

    m_include_leg_geometry_isValid = ::OpenAPI::fromJsonValue(m_include_leg_geometry, json[QString("IncludeLegGeometry")]);
    m_include_leg_geometry_isSet = !json[QString("IncludeLegGeometry")].isNull() && m_include_leg_geometry_isValid;

    m_travel_mode_isValid = ::OpenAPI::fromJsonValue(m_travel_mode, json[QString("TravelMode")]);
    m_travel_mode_isSet = !json[QString("TravelMode")].isNull() && m_travel_mode_isValid;

    m_truck_mode_options_isValid = ::OpenAPI::fromJsonValue(m_truck_mode_options, json[QString("TruckModeOptions")]);
    m_truck_mode_options_isSet = !json[QString("TruckModeOptions")].isNull() && m_truck_mode_options_isValid;

    if(json["WaypointPositions"].isArray()){
        auto arr = json["WaypointPositions"].toArray();
        m_waypoint_positions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_waypoint_positions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_waypoint_positions_isSet = !jval.isNull() && m_waypoint_positions_isValid;
                m_waypoint_positions.push_back(item);
            }
        }
    }
}

QString OAICalculateRoute_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRoute_request::asJsonObject() const {
    QJsonObject obj;
    if (m_car_mode_options.isSet()) {
        obj.insert(QString("CarModeOptions"), ::OpenAPI::toJsonValue(m_car_mode_options));
    }
    if (m_depart_now_isSet) {
        obj.insert(QString("DepartNow"), ::OpenAPI::toJsonValue(m_depart_now));
    }
    if (m_departure_position.size() > 0) {
        obj.insert(QString("DeparturePosition"), ::OpenAPI::toJsonValue(m_departure_position));
    }
    if (m_departure_time_isSet) {
        obj.insert(QString("DepartureTime"), ::OpenAPI::toJsonValue(m_departure_time));
    }
    if (m_destination_position.size() > 0) {
        obj.insert(QString("DestinationPosition"), ::OpenAPI::toJsonValue(m_destination_position));
    }
    if (m_distance_unit_isSet) {
        obj.insert(QString("DistanceUnit"), ::OpenAPI::toJsonValue(m_distance_unit));
    }
    if (m_include_leg_geometry_isSet) {
        obj.insert(QString("IncludeLegGeometry"), ::OpenAPI::toJsonValue(m_include_leg_geometry));
    }
    if (m_travel_mode_isSet) {
        obj.insert(QString("TravelMode"), ::OpenAPI::toJsonValue(m_travel_mode));
    }
    if (m_truck_mode_options.isSet()) {
        obj.insert(QString("TruckModeOptions"), ::OpenAPI::toJsonValue(m_truck_mode_options));
    }
    if (m_waypoint_positions.size() > 0) {
        
        obj.insert(QString("WaypointPositions"), toJsonValue(m_waypoint_positions));
    }
    return obj;
}

OAICalculateRoute_request_CarModeOptions OAICalculateRoute_request::getCarModeOptions() const {
    return m_car_mode_options;
}
void OAICalculateRoute_request::setCarModeOptions(const OAICalculateRoute_request_CarModeOptions &car_mode_options) {
    m_car_mode_options = car_mode_options;
    m_car_mode_options_isSet = true;
}

bool OAICalculateRoute_request::is_car_mode_options_Set() const{
    return m_car_mode_options_isSet;
}

bool OAICalculateRoute_request::is_car_mode_options_Valid() const{
    return m_car_mode_options_isValid;
}

bool OAICalculateRoute_request::isDepartNow() const {
    return m_depart_now;
}
void OAICalculateRoute_request::setDepartNow(const bool &depart_now) {
    m_depart_now = depart_now;
    m_depart_now_isSet = true;
}

bool OAICalculateRoute_request::is_depart_now_Set() const{
    return m_depart_now_isSet;
}

bool OAICalculateRoute_request::is_depart_now_Valid() const{
    return m_depart_now_isValid;
}

QList<double> OAICalculateRoute_request::getDeparturePosition() const {
    return m_departure_position;
}
void OAICalculateRoute_request::setDeparturePosition(const QList<double> &departure_position) {
    m_departure_position = departure_position;
    m_departure_position_isSet = true;
}

bool OAICalculateRoute_request::is_departure_position_Set() const{
    return m_departure_position_isSet;
}

bool OAICalculateRoute_request::is_departure_position_Valid() const{
    return m_departure_position_isValid;
}

QDateTime OAICalculateRoute_request::getDepartureTime() const {
    return m_departure_time;
}
void OAICalculateRoute_request::setDepartureTime(const QDateTime &departure_time) {
    m_departure_time = departure_time;
    m_departure_time_isSet = true;
}

bool OAICalculateRoute_request::is_departure_time_Set() const{
    return m_departure_time_isSet;
}

bool OAICalculateRoute_request::is_departure_time_Valid() const{
    return m_departure_time_isValid;
}

QList<double> OAICalculateRoute_request::getDestinationPosition() const {
    return m_destination_position;
}
void OAICalculateRoute_request::setDestinationPosition(const QList<double> &destination_position) {
    m_destination_position = destination_position;
    m_destination_position_isSet = true;
}

bool OAICalculateRoute_request::is_destination_position_Set() const{
    return m_destination_position_isSet;
}

bool OAICalculateRoute_request::is_destination_position_Valid() const{
    return m_destination_position_isValid;
}

QString OAICalculateRoute_request::getDistanceUnit() const {
    return m_distance_unit;
}
void OAICalculateRoute_request::setDistanceUnit(const QString &distance_unit) {
    m_distance_unit = distance_unit;
    m_distance_unit_isSet = true;
}

bool OAICalculateRoute_request::is_distance_unit_Set() const{
    return m_distance_unit_isSet;
}

bool OAICalculateRoute_request::is_distance_unit_Valid() const{
    return m_distance_unit_isValid;
}

bool OAICalculateRoute_request::isIncludeLegGeometry() const {
    return m_include_leg_geometry;
}
void OAICalculateRoute_request::setIncludeLegGeometry(const bool &include_leg_geometry) {
    m_include_leg_geometry = include_leg_geometry;
    m_include_leg_geometry_isSet = true;
}

bool OAICalculateRoute_request::is_include_leg_geometry_Set() const{
    return m_include_leg_geometry_isSet;
}

bool OAICalculateRoute_request::is_include_leg_geometry_Valid() const{
    return m_include_leg_geometry_isValid;
}

QString OAICalculateRoute_request::getTravelMode() const {
    return m_travel_mode;
}
void OAICalculateRoute_request::setTravelMode(const QString &travel_mode) {
    m_travel_mode = travel_mode;
    m_travel_mode_isSet = true;
}

bool OAICalculateRoute_request::is_travel_mode_Set() const{
    return m_travel_mode_isSet;
}

bool OAICalculateRoute_request::is_travel_mode_Valid() const{
    return m_travel_mode_isValid;
}

OAICalculateRoute_request_TruckModeOptions OAICalculateRoute_request::getTruckModeOptions() const {
    return m_truck_mode_options;
}
void OAICalculateRoute_request::setTruckModeOptions(const OAICalculateRoute_request_TruckModeOptions &truck_mode_options) {
    m_truck_mode_options = truck_mode_options;
    m_truck_mode_options_isSet = true;
}

bool OAICalculateRoute_request::is_truck_mode_options_Set() const{
    return m_truck_mode_options_isSet;
}

bool OAICalculateRoute_request::is_truck_mode_options_Valid() const{
    return m_truck_mode_options_isValid;
}

QList<QList> OAICalculateRoute_request::getWaypointPositions() const {
    return m_waypoint_positions;
}
void OAICalculateRoute_request::setWaypointPositions(const QList<QList> &waypoint_positions) {
    m_waypoint_positions = waypoint_positions;
    m_waypoint_positions_isSet = true;
}

bool OAICalculateRoute_request::is_waypoint_positions_Set() const{
    return m_waypoint_positions_isSet;
}

bool OAICalculateRoute_request::is_waypoint_positions_Valid() const{
    return m_waypoint_positions_isValid;
}

bool OAICalculateRoute_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_car_mode_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depart_now_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_position.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_departure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_position.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_leg_geometry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truck_mode_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waypoint_positions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRoute_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_departure_position_isValid && m_destination_position_isValid && true;
}

} // namespace OpenAPI
