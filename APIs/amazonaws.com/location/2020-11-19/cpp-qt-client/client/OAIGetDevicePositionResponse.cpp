/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDevicePositionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDevicePositionResponse::OAIGetDevicePositionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDevicePositionResponse::OAIGetDevicePositionResponse() {
    this->initializeModel();
}

OAIGetDevicePositionResponse::~OAIGetDevicePositionResponse() {}

void OAIGetDevicePositionResponse::initializeModel() {

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_position_properties_isSet = false;
    m_position_properties_isValid = false;

    m_received_time_isSet = false;
    m_received_time_isValid = false;

    m_sample_time_isSet = false;
    m_sample_time_isValid = false;
}

void OAIGetDevicePositionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDevicePositionResponse::fromJsonObject(QJsonObject json) {

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("Accuracy")]);
    m_accuracy_isSet = !json[QString("Accuracy")].isNull() && m_accuracy_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_position_properties_isValid = ::OpenAPI::fromJsonValue(m_position_properties, json[QString("PositionProperties")]);
    m_position_properties_isSet = !json[QString("PositionProperties")].isNull() && m_position_properties_isValid;

    m_received_time_isValid = ::OpenAPI::fromJsonValue(m_received_time, json[QString("ReceivedTime")]);
    m_received_time_isSet = !json[QString("ReceivedTime")].isNull() && m_received_time_isValid;

    m_sample_time_isValid = ::OpenAPI::fromJsonValue(m_sample_time, json[QString("SampleTime")]);
    m_sample_time_isSet = !json[QString("SampleTime")].isNull() && m_sample_time_isValid;
}

QString OAIGetDevicePositionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDevicePositionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy.isSet()) {
        obj.insert(QString("Accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_position_properties.isSet()) {
        obj.insert(QString("PositionProperties"), ::OpenAPI::toJsonValue(m_position_properties));
    }
    if (m_received_time_isSet) {
        obj.insert(QString("ReceivedTime"), ::OpenAPI::toJsonValue(m_received_time));
    }
    if (m_sample_time_isSet) {
        obj.insert(QString("SampleTime"), ::OpenAPI::toJsonValue(m_sample_time));
    }
    return obj;
}

OAIDevicePositionUpdate_Accuracy OAIGetDevicePositionResponse::getAccuracy() const {
    return m_accuracy;
}
void OAIGetDevicePositionResponse::setAccuracy(const OAIDevicePositionUpdate_Accuracy &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAIGetDevicePositionResponse::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIGetDevicePositionResponse::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

QString OAIGetDevicePositionResponse::getDeviceId() const {
    return m_device_id;
}
void OAIGetDevicePositionResponse::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGetDevicePositionResponse::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGetDevicePositionResponse::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QList OAIGetDevicePositionResponse::getPosition() const {
    return m_position;
}
void OAIGetDevicePositionResponse::setPosition(const QList &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIGetDevicePositionResponse::is_position_Set() const{
    return m_position_isSet;
}

bool OAIGetDevicePositionResponse::is_position_Valid() const{
    return m_position_isValid;
}

QMap OAIGetDevicePositionResponse::getPositionProperties() const {
    return m_position_properties;
}
void OAIGetDevicePositionResponse::setPositionProperties(const QMap &position_properties) {
    m_position_properties = position_properties;
    m_position_properties_isSet = true;
}

bool OAIGetDevicePositionResponse::is_position_properties_Set() const{
    return m_position_properties_isSet;
}

bool OAIGetDevicePositionResponse::is_position_properties_Valid() const{
    return m_position_properties_isValid;
}

QDateTime OAIGetDevicePositionResponse::getReceivedTime() const {
    return m_received_time;
}
void OAIGetDevicePositionResponse::setReceivedTime(const QDateTime &received_time) {
    m_received_time = received_time;
    m_received_time_isSet = true;
}

bool OAIGetDevicePositionResponse::is_received_time_Set() const{
    return m_received_time_isSet;
}

bool OAIGetDevicePositionResponse::is_received_time_Valid() const{
    return m_received_time_isValid;
}

QDateTime OAIGetDevicePositionResponse::getSampleTime() const {
    return m_sample_time;
}
void OAIGetDevicePositionResponse::setSampleTime(const QDateTime &sample_time) {
    m_sample_time = sample_time;
    m_sample_time_isSet = true;
}

bool OAIGetDevicePositionResponse::is_sample_time_Set() const{
    return m_sample_time_isSet;
}

bool OAIGetDevicePositionResponse::is_sample_time_Valid() const{
    return m_sample_time_isValid;
}

bool OAIGetDevicePositionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDevicePositionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_position_isValid && m_received_time_isValid && m_sample_time_isValid && true;
}

} // namespace OpenAPI
