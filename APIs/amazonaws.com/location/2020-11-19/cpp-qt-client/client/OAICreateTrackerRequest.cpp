/**
 * Amazon Location Service
 * \"Suite of geospatial services including Maps, Places, Routes, Tracking, and Geofencing\"
 *
 * The version of the OpenAPI document: 2020-11-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTrackerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTrackerRequest::OAICreateTrackerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTrackerRequest::OAICreateTrackerRequest() {
    this->initializeModel();
}

OAICreateTrackerRequest::~OAICreateTrackerRequest() {}

void OAICreateTrackerRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_bridge_enabled_isSet = false;
    m_event_bridge_enabled_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_position_filtering_isSet = false;
    m_position_filtering_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_pricing_plan_data_source_isSet = false;
    m_pricing_plan_data_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tracker_name_isSet = false;
    m_tracker_name_isValid = false;
}

void OAICreateTrackerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTrackerRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_event_bridge_enabled_isValid = ::OpenAPI::fromJsonValue(m_event_bridge_enabled, json[QString("EventBridgeEnabled")]);
    m_event_bridge_enabled_isSet = !json[QString("EventBridgeEnabled")].isNull() && m_event_bridge_enabled_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_position_filtering_isValid = ::OpenAPI::fromJsonValue(m_position_filtering, json[QString("PositionFiltering")]);
    m_position_filtering_isSet = !json[QString("PositionFiltering")].isNull() && m_position_filtering_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("PricingPlan")]);
    m_pricing_plan_isSet = !json[QString("PricingPlan")].isNull() && m_pricing_plan_isValid;

    m_pricing_plan_data_source_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan_data_source, json[QString("PricingPlanDataSource")]);
    m_pricing_plan_data_source_isSet = !json[QString("PricingPlanDataSource")].isNull() && m_pricing_plan_data_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_tracker_name_isValid = ::OpenAPI::fromJsonValue(m_tracker_name, json[QString("TrackerName")]);
    m_tracker_name_isSet = !json[QString("TrackerName")].isNull() && m_tracker_name_isValid;
}

QString OAICreateTrackerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTrackerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_bridge_enabled_isSet) {
        obj.insert(QString("EventBridgeEnabled"), ::OpenAPI::toJsonValue(m_event_bridge_enabled));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_position_filtering.isSet()) {
        obj.insert(QString("PositionFiltering"), ::OpenAPI::toJsonValue(m_position_filtering));
    }
    if (m_pricing_plan.isSet()) {
        obj.insert(QString("PricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_pricing_plan_data_source_isSet) {
        obj.insert(QString("PricingPlanDataSource"), ::OpenAPI::toJsonValue(m_pricing_plan_data_source));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tracker_name_isSet) {
        obj.insert(QString("TrackerName"), ::OpenAPI::toJsonValue(m_tracker_name));
    }
    return obj;
}

QString OAICreateTrackerRequest::getDescription() const {
    return m_description;
}
void OAICreateTrackerRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateTrackerRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateTrackerRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateTrackerRequest::getEventBridgeEnabled() const {
    return m_event_bridge_enabled;
}
void OAICreateTrackerRequest::setEventBridgeEnabled(const bool &event_bridge_enabled) {
    m_event_bridge_enabled = event_bridge_enabled;
    m_event_bridge_enabled_isSet = true;
}

bool OAICreateTrackerRequest::is_event_bridge_enabled_Set() const{
    return m_event_bridge_enabled_isSet;
}

bool OAICreateTrackerRequest::is_event_bridge_enabled_Valid() const{
    return m_event_bridge_enabled_isValid;
}

QString OAICreateTrackerRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateTrackerRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateTrackerRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateTrackerRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

OAIPositionFiltering OAICreateTrackerRequest::getPositionFiltering() const {
    return m_position_filtering;
}
void OAICreateTrackerRequest::setPositionFiltering(const OAIPositionFiltering &position_filtering) {
    m_position_filtering = position_filtering;
    m_position_filtering_isSet = true;
}

bool OAICreateTrackerRequest::is_position_filtering_Set() const{
    return m_position_filtering_isSet;
}

bool OAICreateTrackerRequest::is_position_filtering_Valid() const{
    return m_position_filtering_isValid;
}

OAIPricingPlan OAICreateTrackerRequest::getPricingPlan() const {
    return m_pricing_plan;
}
void OAICreateTrackerRequest::setPricingPlan(const OAIPricingPlan &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAICreateTrackerRequest::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAICreateTrackerRequest::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

QString OAICreateTrackerRequest::getPricingPlanDataSource() const {
    return m_pricing_plan_data_source;
}
void OAICreateTrackerRequest::setPricingPlanDataSource(const QString &pricing_plan_data_source) {
    m_pricing_plan_data_source = pricing_plan_data_source;
    m_pricing_plan_data_source_isSet = true;
}

bool OAICreateTrackerRequest::is_pricing_plan_data_source_Set() const{
    return m_pricing_plan_data_source_isSet;
}

bool OAICreateTrackerRequest::is_pricing_plan_data_source_Valid() const{
    return m_pricing_plan_data_source_isValid;
}

QMap OAICreateTrackerRequest::getTags() const {
    return m_tags;
}
void OAICreateTrackerRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateTrackerRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateTrackerRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateTrackerRequest::getTrackerName() const {
    return m_tracker_name;
}
void OAICreateTrackerRequest::setTrackerName(const QString &tracker_name) {
    m_tracker_name = tracker_name;
    m_tracker_name_isSet = true;
}

bool OAICreateTrackerRequest::is_tracker_name_Set() const{
    return m_tracker_name_isSet;
}

bool OAICreateTrackerRequest::is_tracker_name_Valid() const{
    return m_tracker_name_isValid;
}

bool OAICreateTrackerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_filtering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracker_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTrackerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tracker_name_isValid && true;
}

} // namespace OpenAPI
