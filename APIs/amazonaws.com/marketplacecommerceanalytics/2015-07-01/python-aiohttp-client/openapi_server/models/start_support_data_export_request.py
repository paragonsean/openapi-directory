# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.support_data_set_type import SupportDataSetType
from openapi_server import util


class StartSupportDataExportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_type: SupportDataSetType=None, from_date: datetime=None, role_name_arn: str=None, destination_s3_bucket_name: str=None, destination_s3_prefix: str=None, sns_topic_arn: str=None, customer_defined_values: Dict=None):
        """StartSupportDataExportRequest - a model defined in OpenAPI

        :param data_set_type: The data_set_type of this StartSupportDataExportRequest.
        :param from_date: The from_date of this StartSupportDataExportRequest.
        :param role_name_arn: The role_name_arn of this StartSupportDataExportRequest.
        :param destination_s3_bucket_name: The destination_s3_bucket_name of this StartSupportDataExportRequest.
        :param destination_s3_prefix: The destination_s3_prefix of this StartSupportDataExportRequest.
        :param sns_topic_arn: The sns_topic_arn of this StartSupportDataExportRequest.
        :param customer_defined_values: The customer_defined_values of this StartSupportDataExportRequest.
        """
        self.openapi_types = {
            'data_set_type': SupportDataSetType,
            'from_date': datetime,
            'role_name_arn': str,
            'destination_s3_bucket_name': str,
            'destination_s3_prefix': str,
            'sns_topic_arn': str,
            'customer_defined_values': Dict
        }

        self.attribute_map = {
            'data_set_type': 'dataSetType',
            'from_date': 'fromDate',
            'role_name_arn': 'roleNameArn',
            'destination_s3_bucket_name': 'destinationS3BucketName',
            'destination_s3_prefix': 'destinationS3Prefix',
            'sns_topic_arn': 'snsTopicArn',
            'customer_defined_values': 'customerDefinedValues'
        }

        self._data_set_type = data_set_type
        self._from_date = from_date
        self._role_name_arn = role_name_arn
        self._destination_s3_bucket_name = destination_s3_bucket_name
        self._destination_s3_prefix = destination_s3_prefix
        self._sns_topic_arn = sns_topic_arn
        self._customer_defined_values = customer_defined_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSupportDataExportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSupportDataExportRequest of this StartSupportDataExportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_type(self):
        """Gets the data_set_type of this StartSupportDataExportRequest.


        :return: The data_set_type of this StartSupportDataExportRequest.
        :rtype: SupportDataSetType
        """
        return self._data_set_type

    @data_set_type.setter
    def data_set_type(self, data_set_type):
        """Sets the data_set_type of this StartSupportDataExportRequest.


        :param data_set_type: The data_set_type of this StartSupportDataExportRequest.
        :type data_set_type: SupportDataSetType
        """
        if data_set_type is None:
            raise ValueError("Invalid value for `data_set_type`, must not be `None`")

        self._data_set_type = data_set_type

    @property
    def from_date(self):
        """Gets the from_date of this StartSupportDataExportRequest.


        :return: The from_date of this StartSupportDataExportRequest.
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this StartSupportDataExportRequest.


        :param from_date: The from_date of this StartSupportDataExportRequest.
        :type from_date: datetime
        """
        if from_date is None:
            raise ValueError("Invalid value for `from_date`, must not be `None`")

        self._from_date = from_date

    @property
    def role_name_arn(self):
        """Gets the role_name_arn of this StartSupportDataExportRequest.


        :return: The role_name_arn of this StartSupportDataExportRequest.
        :rtype: str
        """
        return self._role_name_arn

    @role_name_arn.setter
    def role_name_arn(self, role_name_arn):
        """Sets the role_name_arn of this StartSupportDataExportRequest.


        :param role_name_arn: The role_name_arn of this StartSupportDataExportRequest.
        :type role_name_arn: str
        """
        if role_name_arn is None:
            raise ValueError("Invalid value for `role_name_arn`, must not be `None`")

        self._role_name_arn = role_name_arn

    @property
    def destination_s3_bucket_name(self):
        """Gets the destination_s3_bucket_name of this StartSupportDataExportRequest.


        :return: The destination_s3_bucket_name of this StartSupportDataExportRequest.
        :rtype: str
        """
        return self._destination_s3_bucket_name

    @destination_s3_bucket_name.setter
    def destination_s3_bucket_name(self, destination_s3_bucket_name):
        """Sets the destination_s3_bucket_name of this StartSupportDataExportRequest.


        :param destination_s3_bucket_name: The destination_s3_bucket_name of this StartSupportDataExportRequest.
        :type destination_s3_bucket_name: str
        """
        if destination_s3_bucket_name is None:
            raise ValueError("Invalid value for `destination_s3_bucket_name`, must not be `None`")

        self._destination_s3_bucket_name = destination_s3_bucket_name

    @property
    def destination_s3_prefix(self):
        """Gets the destination_s3_prefix of this StartSupportDataExportRequest.


        :return: The destination_s3_prefix of this StartSupportDataExportRequest.
        :rtype: str
        """
        return self._destination_s3_prefix

    @destination_s3_prefix.setter
    def destination_s3_prefix(self, destination_s3_prefix):
        """Sets the destination_s3_prefix of this StartSupportDataExportRequest.


        :param destination_s3_prefix: The destination_s3_prefix of this StartSupportDataExportRequest.
        :type destination_s3_prefix: str
        """

        self._destination_s3_prefix = destination_s3_prefix

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this StartSupportDataExportRequest.


        :return: The sns_topic_arn of this StartSupportDataExportRequest.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this StartSupportDataExportRequest.


        :param sns_topic_arn: The sns_topic_arn of this StartSupportDataExportRequest.
        :type sns_topic_arn: str
        """
        if sns_topic_arn is None:
            raise ValueError("Invalid value for `sns_topic_arn`, must not be `None`")

        self._sns_topic_arn = sns_topic_arn

    @property
    def customer_defined_values(self):
        """Gets the customer_defined_values of this StartSupportDataExportRequest.


        :return: The customer_defined_values of this StartSupportDataExportRequest.
        :rtype: Dict
        """
        return self._customer_defined_values

    @customer_defined_values.setter
    def customer_defined_values(self, customer_defined_values):
        """Sets the customer_defined_values of this StartSupportDataExportRequest.


        :param customer_defined_values: The customer_defined_values of this StartSupportDataExportRequest.
        :type customer_defined_values: Dict
        """

        self._customer_defined_values = customer_defined_values
