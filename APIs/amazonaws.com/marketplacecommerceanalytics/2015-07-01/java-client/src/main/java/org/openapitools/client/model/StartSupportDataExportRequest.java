/*
 * AWS Marketplace Commerce Analytics
 * Provides AWS Marketplace business intelligence data on-demand.
 *
 * The version of the OpenAPI document: 2015-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SupportDataSetType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for the parameters to the StartSupportDataExport operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:27.100334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSupportDataExportRequest {
  public static final String SERIALIZED_NAME_DATA_SET_TYPE = "dataSetType";
  @SerializedName(SERIALIZED_NAME_DATA_SET_TYPE)
  private SupportDataSetType dataSetType;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_ROLE_NAME_ARN = "roleNameArn";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME_ARN)
  private String roleNameArn;

  public static final String SERIALIZED_NAME_DESTINATION_S3_BUCKET_NAME = "destinationS3BucketName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_S3_BUCKET_NAME)
  private String destinationS3BucketName;

  public static final String SERIALIZED_NAME_DESTINATION_S3_PREFIX = "destinationS3Prefix";
  @SerializedName(SERIALIZED_NAME_DESTINATION_S3_PREFIX)
  private String destinationS3Prefix;

  public static final String SERIALIZED_NAME_SNS_TOPIC_ARN = "snsTopicArn";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC_ARN)
  private String snsTopicArn;

  public static final String SERIALIZED_NAME_CUSTOMER_DEFINED_VALUES = "customerDefinedValues";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DEFINED_VALUES)
  private Map customerDefinedValues;

  public StartSupportDataExportRequest() {
  }

  public StartSupportDataExportRequest dataSetType(SupportDataSetType dataSetType) {
    this.dataSetType = dataSetType;
    return this;
  }

  /**
   * Get dataSetType
   * @return dataSetType
   */
  @javax.annotation.Nonnull
  public SupportDataSetType getDataSetType() {
    return dataSetType;
  }

  public void setDataSetType(SupportDataSetType dataSetType) {
    this.dataSetType = dataSetType;
  }


  public StartSupportDataExportRequest fromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  /**
   * Get fromDate
   * @return fromDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFromDate() {
    return fromDate;
  }

  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }


  public StartSupportDataExportRequest roleNameArn(String roleNameArn) {
    this.roleNameArn = roleNameArn;
    return this;
  }

  /**
   * Get roleNameArn
   * @return roleNameArn
   */
  @javax.annotation.Nonnull
  public String getRoleNameArn() {
    return roleNameArn;
  }

  public void setRoleNameArn(String roleNameArn) {
    this.roleNameArn = roleNameArn;
  }


  public StartSupportDataExportRequest destinationS3BucketName(String destinationS3BucketName) {
    this.destinationS3BucketName = destinationS3BucketName;
    return this;
  }

  /**
   * Get destinationS3BucketName
   * @return destinationS3BucketName
   */
  @javax.annotation.Nonnull
  public String getDestinationS3BucketName() {
    return destinationS3BucketName;
  }

  public void setDestinationS3BucketName(String destinationS3BucketName) {
    this.destinationS3BucketName = destinationS3BucketName;
  }


  public StartSupportDataExportRequest destinationS3Prefix(String destinationS3Prefix) {
    this.destinationS3Prefix = destinationS3Prefix;
    return this;
  }

  /**
   * Get destinationS3Prefix
   * @return destinationS3Prefix
   */
  @javax.annotation.Nullable
  public String getDestinationS3Prefix() {
    return destinationS3Prefix;
  }

  public void setDestinationS3Prefix(String destinationS3Prefix) {
    this.destinationS3Prefix = destinationS3Prefix;
  }


  public StartSupportDataExportRequest snsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
    return this;
  }

  /**
   * Get snsTopicArn
   * @return snsTopicArn
   */
  @javax.annotation.Nonnull
  public String getSnsTopicArn() {
    return snsTopicArn;
  }

  public void setSnsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
  }


  public StartSupportDataExportRequest customerDefinedValues(Map customerDefinedValues) {
    this.customerDefinedValues = customerDefinedValues;
    return this;
  }

  /**
   * Get customerDefinedValues
   * @return customerDefinedValues
   */
  @javax.annotation.Nullable
  public Map getCustomerDefinedValues() {
    return customerDefinedValues;
  }

  public void setCustomerDefinedValues(Map customerDefinedValues) {
    this.customerDefinedValues = customerDefinedValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSupportDataExportRequest startSupportDataExportRequest = (StartSupportDataExportRequest) o;
    return Objects.equals(this.dataSetType, startSupportDataExportRequest.dataSetType) &&
        Objects.equals(this.fromDate, startSupportDataExportRequest.fromDate) &&
        Objects.equals(this.roleNameArn, startSupportDataExportRequest.roleNameArn) &&
        Objects.equals(this.destinationS3BucketName, startSupportDataExportRequest.destinationS3BucketName) &&
        Objects.equals(this.destinationS3Prefix, startSupportDataExportRequest.destinationS3Prefix) &&
        Objects.equals(this.snsTopicArn, startSupportDataExportRequest.snsTopicArn) &&
        Objects.equals(this.customerDefinedValues, startSupportDataExportRequest.customerDefinedValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetType, fromDate, roleNameArn, destinationS3BucketName, destinationS3Prefix, snsTopicArn, customerDefinedValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSupportDataExportRequest {\n");
    sb.append("    dataSetType: ").append(toIndentedString(dataSetType)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    roleNameArn: ").append(toIndentedString(roleNameArn)).append("\n");
    sb.append("    destinationS3BucketName: ").append(toIndentedString(destinationS3BucketName)).append("\n");
    sb.append("    destinationS3Prefix: ").append(toIndentedString(destinationS3Prefix)).append("\n");
    sb.append("    snsTopicArn: ").append(toIndentedString(snsTopicArn)).append("\n");
    sb.append("    customerDefinedValues: ").append(toIndentedString(customerDefinedValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetType");
    openapiFields.add("fromDate");
    openapiFields.add("roleNameArn");
    openapiFields.add("destinationS3BucketName");
    openapiFields.add("destinationS3Prefix");
    openapiFields.add("snsTopicArn");
    openapiFields.add("customerDefinedValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSetType");
    openapiRequiredFields.add("fromDate");
    openapiRequiredFields.add("roleNameArn");
    openapiRequiredFields.add("destinationS3BucketName");
    openapiRequiredFields.add("snsTopicArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSupportDataExportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSupportDataExportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSupportDataExportRequest is not found in the empty JSON string", StartSupportDataExportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSupportDataExportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSupportDataExportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSupportDataExportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dataSetType`
      SupportDataSetType.validateJsonElement(jsonObj.get("dataSetType"));
      // validate the required field `fromDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("fromDate"));
      // validate the required field `roleNameArn`
      String.validateJsonElement(jsonObj.get("roleNameArn"));
      // validate the required field `destinationS3BucketName`
      String.validateJsonElement(jsonObj.get("destinationS3BucketName"));
      // validate the optional field `destinationS3Prefix`
      if (jsonObj.get("destinationS3Prefix") != null && !jsonObj.get("destinationS3Prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("destinationS3Prefix"));
      }
      // validate the required field `snsTopicArn`
      String.validateJsonElement(jsonObj.get("snsTopicArn"));
      // validate the optional field `customerDefinedValues`
      if (jsonObj.get("customerDefinedValues") != null && !jsonObj.get("customerDefinedValues").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("customerDefinedValues"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSupportDataExportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSupportDataExportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSupportDataExportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSupportDataExportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSupportDataExportRequest>() {
           @Override
           public void write(JsonWriter out, StartSupportDataExportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSupportDataExportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSupportDataExportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSupportDataExportRequest
   * @throws IOException if the JSON string is invalid with respect to StartSupportDataExportRequest
   */
  public static StartSupportDataExportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSupportDataExportRequest.class);
  }

  /**
   * Convert an instance of StartSupportDataExportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

