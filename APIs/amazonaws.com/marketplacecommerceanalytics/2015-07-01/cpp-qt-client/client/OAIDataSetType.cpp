/**
 * AWS Marketplace Commerce Analytics
 * Provides AWS Marketplace business intelligence data on-demand.
 *
 * The version of the OpenAPI document: 2015-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetType::OAIDataSetType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetType::OAIDataSetType() {
    this->initializeModel();
}

OAIDataSetType::~OAIDataSetType() {}

void OAIDataSetType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSetType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSetType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("customer_subscriber_hourly_monthly_subscriptions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::CUSTOMER_SUBSCRIBER_HOURLY_MONTHLY_SUBSCRIPTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customer_subscriber_annual_subscriptions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::CUSTOMER_SUBSCRIBER_ANNUAL_SUBSCRIPTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("daily_business_usage_by_instance_type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DAILY_BUSINESS_USAGE_BY_INSTANCE_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("daily_business_fees", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DAILY_BUSINESS_FEES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("daily_business_free_trial_conversions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DAILY_BUSINESS_FREE_TRIAL_CONVERSIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("daily_business_new_instances", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DAILY_BUSINESS_NEW_INSTANCES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("daily_business_new_product_subscribers", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DAILY_BUSINESS_NEW_PRODUCT_SUBSCRIBERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("daily_business_canceled_product_subscribers", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DAILY_BUSINESS_CANCELED_PRODUCT_SUBSCRIBERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("monthly_revenue_billing_and_revenue_data", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::MONTHLY_REVENUE_BILLING_AND_REVENUE_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("monthly_revenue_annual_subscriptions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::MONTHLY_REVENUE_ANNUAL_SUBSCRIPTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("monthly_revenue_field_demonstration_usage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::MONTHLY_REVENUE_FIELD_DEMONSTRATION_USAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("monthly_revenue_flexible_payment_schedule", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::MONTHLY_REVENUE_FLEXIBLE_PAYMENT_SCHEDULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_product", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_PRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_product_with_uncollected_funds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_PRODUCT_WITH_UNCOLLECTED_FUNDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_instance_hours", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_INSTANCE_HOURS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_customer_geo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_CUSTOMER_GEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_age_of_uncollected_funds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_AGE_OF_UNCOLLECTED_FUNDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_age_of_disbursed_funds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_AGE_OF_DISBURSED_FUNDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_age_of_past_due_funds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_AGE_OF_PAST_DUE_FUNDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disbursed_amount_by_uncollected_funds_breakdown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::DISBURSED_AMOUNT_BY_UNCOLLECTED_FUNDS_BREAKDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customer_profile_by_industry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::CUSTOMER_PROFILE_BY_INDUSTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customer_profile_by_revenue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::CUSTOMER_PROFILE_BY_REVENUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customer_profile_by_geography", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::CUSTOMER_PROFILE_BY_GEOGRAPHY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sales_compensation_billed_revenue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::SALES_COMPENSATION_BILLED_REVENUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us_sales_and_use_tax_records", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSetType::US_SALES_AND_USE_TAX_RECORDS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSetType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSetType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSetType::CUSTOMER_SUBSCRIBER_HOURLY_MONTHLY_SUBSCRIPTIONS:
            val = "customer_subscriber_hourly_monthly_subscriptions";
            break;
        case eOAIDataSetType::CUSTOMER_SUBSCRIBER_ANNUAL_SUBSCRIPTIONS:
            val = "customer_subscriber_annual_subscriptions";
            break;
        case eOAIDataSetType::DAILY_BUSINESS_USAGE_BY_INSTANCE_TYPE:
            val = "daily_business_usage_by_instance_type";
            break;
        case eOAIDataSetType::DAILY_BUSINESS_FEES:
            val = "daily_business_fees";
            break;
        case eOAIDataSetType::DAILY_BUSINESS_FREE_TRIAL_CONVERSIONS:
            val = "daily_business_free_trial_conversions";
            break;
        case eOAIDataSetType::DAILY_BUSINESS_NEW_INSTANCES:
            val = "daily_business_new_instances";
            break;
        case eOAIDataSetType::DAILY_BUSINESS_NEW_PRODUCT_SUBSCRIBERS:
            val = "daily_business_new_product_subscribers";
            break;
        case eOAIDataSetType::DAILY_BUSINESS_CANCELED_PRODUCT_SUBSCRIBERS:
            val = "daily_business_canceled_product_subscribers";
            break;
        case eOAIDataSetType::MONTHLY_REVENUE_BILLING_AND_REVENUE_DATA:
            val = "monthly_revenue_billing_and_revenue_data";
            break;
        case eOAIDataSetType::MONTHLY_REVENUE_ANNUAL_SUBSCRIPTIONS:
            val = "monthly_revenue_annual_subscriptions";
            break;
        case eOAIDataSetType::MONTHLY_REVENUE_FIELD_DEMONSTRATION_USAGE:
            val = "monthly_revenue_field_demonstration_usage";
            break;
        case eOAIDataSetType::MONTHLY_REVENUE_FLEXIBLE_PAYMENT_SCHEDULE:
            val = "monthly_revenue_flexible_payment_schedule";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_PRODUCT:
            val = "disbursed_amount_by_product";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_PRODUCT_WITH_UNCOLLECTED_FUNDS:
            val = "disbursed_amount_by_product_with_uncollected_funds";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_INSTANCE_HOURS:
            val = "disbursed_amount_by_instance_hours";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_CUSTOMER_GEO:
            val = "disbursed_amount_by_customer_geo";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_AGE_OF_UNCOLLECTED_FUNDS:
            val = "disbursed_amount_by_age_of_uncollected_funds";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_AGE_OF_DISBURSED_FUNDS:
            val = "disbursed_amount_by_age_of_disbursed_funds";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_AGE_OF_PAST_DUE_FUNDS:
            val = "disbursed_amount_by_age_of_past_due_funds";
            break;
        case eOAIDataSetType::DISBURSED_AMOUNT_BY_UNCOLLECTED_FUNDS_BREAKDOWN:
            val = "disbursed_amount_by_uncollected_funds_breakdown";
            break;
        case eOAIDataSetType::CUSTOMER_PROFILE_BY_INDUSTRY:
            val = "customer_profile_by_industry";
            break;
        case eOAIDataSetType::CUSTOMER_PROFILE_BY_REVENUE:
            val = "customer_profile_by_revenue";
            break;
        case eOAIDataSetType::CUSTOMER_PROFILE_BY_GEOGRAPHY:
            val = "customer_profile_by_geography";
            break;
        case eOAIDataSetType::SALES_COMPENSATION_BILLED_REVENUE:
            val = "sales_compensation_billed_revenue";
            break;
        case eOAIDataSetType::US_SALES_AND_USE_TAX_RECORDS:
            val = "us_sales_and_use_tax_records";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSetType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSetType::eOAIDataSetType OAIDataSetType::getValue() const {
    return m_value;
}

void OAIDataSetType::setValue(const OAIDataSetType::eOAIDataSetType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSetType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSetType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
