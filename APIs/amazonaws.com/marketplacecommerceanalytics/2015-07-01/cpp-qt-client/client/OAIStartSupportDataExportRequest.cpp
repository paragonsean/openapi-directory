/**
 * AWS Marketplace Commerce Analytics
 * Provides AWS Marketplace business intelligence data on-demand.
 *
 * The version of the OpenAPI document: 2015-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSupportDataExportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSupportDataExportRequest::OAIStartSupportDataExportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSupportDataExportRequest::OAIStartSupportDataExportRequest() {
    this->initializeModel();
}

OAIStartSupportDataExportRequest::~OAIStartSupportDataExportRequest() {}

void OAIStartSupportDataExportRequest::initializeModel() {

    m_data_set_type_isSet = false;
    m_data_set_type_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_role_name_arn_isSet = false;
    m_role_name_arn_isValid = false;

    m_destination_s3_bucket_name_isSet = false;
    m_destination_s3_bucket_name_isValid = false;

    m_destination_s3_prefix_isSet = false;
    m_destination_s3_prefix_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_customer_defined_values_isSet = false;
    m_customer_defined_values_isValid = false;
}

void OAIStartSupportDataExportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSupportDataExportRequest::fromJsonObject(QJsonObject json) {

    m_data_set_type_isValid = ::OpenAPI::fromJsonValue(m_data_set_type, json[QString("dataSetType")]);
    m_data_set_type_isSet = !json[QString("dataSetType")].isNull() && m_data_set_type_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_role_name_arn_isValid = ::OpenAPI::fromJsonValue(m_role_name_arn, json[QString("roleNameArn")]);
    m_role_name_arn_isSet = !json[QString("roleNameArn")].isNull() && m_role_name_arn_isValid;

    m_destination_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_destination_s3_bucket_name, json[QString("destinationS3BucketName")]);
    m_destination_s3_bucket_name_isSet = !json[QString("destinationS3BucketName")].isNull() && m_destination_s3_bucket_name_isValid;

    m_destination_s3_prefix_isValid = ::OpenAPI::fromJsonValue(m_destination_s3_prefix, json[QString("destinationS3Prefix")]);
    m_destination_s3_prefix_isSet = !json[QString("destinationS3Prefix")].isNull() && m_destination_s3_prefix_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("snsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("snsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_customer_defined_values_isValid = ::OpenAPI::fromJsonValue(m_customer_defined_values, json[QString("customerDefinedValues")]);
    m_customer_defined_values_isSet = !json[QString("customerDefinedValues")].isNull() && m_customer_defined_values_isValid;
}

QString OAIStartSupportDataExportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSupportDataExportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_type.isSet()) {
        obj.insert(QString("dataSetType"), ::OpenAPI::toJsonValue(m_data_set_type));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_role_name_arn_isSet) {
        obj.insert(QString("roleNameArn"), ::OpenAPI::toJsonValue(m_role_name_arn));
    }
    if (m_destination_s3_bucket_name_isSet) {
        obj.insert(QString("destinationS3BucketName"), ::OpenAPI::toJsonValue(m_destination_s3_bucket_name));
    }
    if (m_destination_s3_prefix_isSet) {
        obj.insert(QString("destinationS3Prefix"), ::OpenAPI::toJsonValue(m_destination_s3_prefix));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("snsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_customer_defined_values.isSet()) {
        obj.insert(QString("customerDefinedValues"), ::OpenAPI::toJsonValue(m_customer_defined_values));
    }
    return obj;
}

OAISupportDataSetType OAIStartSupportDataExportRequest::getDataSetType() const {
    return m_data_set_type;
}
void OAIStartSupportDataExportRequest::setDataSetType(const OAISupportDataSetType &data_set_type) {
    m_data_set_type = data_set_type;
    m_data_set_type_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_data_set_type_Set() const{
    return m_data_set_type_isSet;
}

bool OAIStartSupportDataExportRequest::is_data_set_type_Valid() const{
    return m_data_set_type_isValid;
}

QDateTime OAIStartSupportDataExportRequest::getFromDate() const {
    return m_from_date;
}
void OAIStartSupportDataExportRequest::setFromDate(const QDateTime &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIStartSupportDataExportRequest::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAIStartSupportDataExportRequest::getRoleNameArn() const {
    return m_role_name_arn;
}
void OAIStartSupportDataExportRequest::setRoleNameArn(const QString &role_name_arn) {
    m_role_name_arn = role_name_arn;
    m_role_name_arn_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_role_name_arn_Set() const{
    return m_role_name_arn_isSet;
}

bool OAIStartSupportDataExportRequest::is_role_name_arn_Valid() const{
    return m_role_name_arn_isValid;
}

QString OAIStartSupportDataExportRequest::getDestinationS3BucketName() const {
    return m_destination_s3_bucket_name;
}
void OAIStartSupportDataExportRequest::setDestinationS3BucketName(const QString &destination_s3_bucket_name) {
    m_destination_s3_bucket_name = destination_s3_bucket_name;
    m_destination_s3_bucket_name_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_destination_s3_bucket_name_Set() const{
    return m_destination_s3_bucket_name_isSet;
}

bool OAIStartSupportDataExportRequest::is_destination_s3_bucket_name_Valid() const{
    return m_destination_s3_bucket_name_isValid;
}

QString OAIStartSupportDataExportRequest::getDestinationS3Prefix() const {
    return m_destination_s3_prefix;
}
void OAIStartSupportDataExportRequest::setDestinationS3Prefix(const QString &destination_s3_prefix) {
    m_destination_s3_prefix = destination_s3_prefix;
    m_destination_s3_prefix_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_destination_s3_prefix_Set() const{
    return m_destination_s3_prefix_isSet;
}

bool OAIStartSupportDataExportRequest::is_destination_s3_prefix_Valid() const{
    return m_destination_s3_prefix_isValid;
}

QString OAIStartSupportDataExportRequest::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIStartSupportDataExportRequest::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIStartSupportDataExportRequest::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QMap OAIStartSupportDataExportRequest::getCustomerDefinedValues() const {
    return m_customer_defined_values;
}
void OAIStartSupportDataExportRequest::setCustomerDefinedValues(const QMap &customer_defined_values) {
    m_customer_defined_values = customer_defined_values;
    m_customer_defined_values_isSet = true;
}

bool OAIStartSupportDataExportRequest::is_customer_defined_values_Set() const{
    return m_customer_defined_values_isSet;
}

bool OAIStartSupportDataExportRequest::is_customer_defined_values_Valid() const{
    return m_customer_defined_values_isValid;
}

bool OAIStartSupportDataExportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_s3_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_defined_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSupportDataExportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_type_isValid && m_from_date_isValid && m_role_name_arn_isValid && m_destination_s3_bucket_name_isValid && m_sns_topic_arn_isValid && true;
}

} // namespace OpenAPI
