/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResendValidationEmailRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:57.407675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResendValidationEmailRequest {
  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "CertificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_VALIDATION_DOMAIN = "ValidationDomain";
  @SerializedName(SERIALIZED_NAME_VALIDATION_DOMAIN)
  private String validationDomain;

  public ResendValidationEmailRequest() {
  }

  public ResendValidationEmailRequest certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nonnull
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public ResendValidationEmailRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ResendValidationEmailRequest validationDomain(String validationDomain) {
    this.validationDomain = validationDomain;
    return this;
  }

  /**
   * Get validationDomain
   * @return validationDomain
   */
  @javax.annotation.Nonnull
  public String getValidationDomain() {
    return validationDomain;
  }

  public void setValidationDomain(String validationDomain) {
    this.validationDomain = validationDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResendValidationEmailRequest resendValidationEmailRequest = (ResendValidationEmailRequest) o;
    return Objects.equals(this.certificateArn, resendValidationEmailRequest.certificateArn) &&
        Objects.equals(this.domain, resendValidationEmailRequest.domain) &&
        Objects.equals(this.validationDomain, resendValidationEmailRequest.validationDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateArn, domain, validationDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResendValidationEmailRequest {\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    validationDomain: ").append(toIndentedString(validationDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateArn");
    openapiFields.add("Domain");
    openapiFields.add("ValidationDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CertificateArn");
    openapiRequiredFields.add("Domain");
    openapiRequiredFields.add("ValidationDomain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResendValidationEmailRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResendValidationEmailRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResendValidationEmailRequest is not found in the empty JSON string", ResendValidationEmailRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResendValidationEmailRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResendValidationEmailRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResendValidationEmailRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CertificateArn`
      String.validateJsonElement(jsonObj.get("CertificateArn"));
      // validate the required field `Domain`
      String.validateJsonElement(jsonObj.get("Domain"));
      // validate the required field `ValidationDomain`
      String.validateJsonElement(jsonObj.get("ValidationDomain"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResendValidationEmailRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResendValidationEmailRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResendValidationEmailRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResendValidationEmailRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ResendValidationEmailRequest>() {
           @Override
           public void write(JsonWriter out, ResendValidationEmailRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResendValidationEmailRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResendValidationEmailRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResendValidationEmailRequest
   * @throws IOException if the JSON string is invalid with respect to ResendValidationEmailRequest
   */
  public static ResendValidationEmailRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResendValidationEmailRequest.class);
  }

  /**
   * Convert an instance of ResendValidationEmailRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

