/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateStatus;
import org.openapitools.client.model.CertificateType;
import org.openapitools.client.model.KeyAlgorithm;
import org.openapitools.client.model.RenewalEligibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This structure is returned in the response object of &lt;a&gt;ListCertificates&lt;/a&gt; action. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:57.407675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateSummary {
  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "CertificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAME_SUMMARIES = "SubjectAlternativeNameSummaries";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAME_SUMMARIES)
  private List subjectAlternativeNameSummaries;

  public static final String SERIALIZED_NAME_HAS_ADDITIONAL_SUBJECT_ALTERNATIVE_NAMES = "HasAdditionalSubjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_HAS_ADDITIONAL_SUBJECT_ALTERNATIVE_NAMES)
  private Boolean hasAdditionalSubjectAlternativeNames;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CertificateStatus status;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CertificateType type;

  public static final String SERIALIZED_NAME_KEY_ALGORITHM = "KeyAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_ALGORITHM)
  private KeyAlgorithm keyAlgorithm;

  public static final String SERIALIZED_NAME_KEY_USAGES = "KeyUsages";
  @SerializedName(SERIALIZED_NAME_KEY_USAGES)
  private List keyUsages;

  public static final String SERIALIZED_NAME_EXTENDED_KEY_USAGES = "ExtendedKeyUsages";
  @SerializedName(SERIALIZED_NAME_EXTENDED_KEY_USAGES)
  private List extendedKeyUsages;

  public static final String SERIALIZED_NAME_IN_USE = "InUse";
  @SerializedName(SERIALIZED_NAME_IN_USE)
  private Boolean inUse;

  public static final String SERIALIZED_NAME_EXPORTED = "Exported";
  @SerializedName(SERIALIZED_NAME_EXPORTED)
  private Boolean exported;

  public static final String SERIALIZED_NAME_RENEWAL_ELIGIBILITY = "RenewalEligibility";
  @SerializedName(SERIALIZED_NAME_RENEWAL_ELIGIBILITY)
  private RenewalEligibility renewalEligibility;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "NotBefore";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private OffsetDateTime notBefore;

  public static final String SERIALIZED_NAME_NOT_AFTER = "NotAfter";
  @SerializedName(SERIALIZED_NAME_NOT_AFTER)
  private OffsetDateTime notAfter;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ISSUED_AT = "IssuedAt";
  @SerializedName(SERIALIZED_NAME_ISSUED_AT)
  private OffsetDateTime issuedAt;

  public static final String SERIALIZED_NAME_IMPORTED_AT = "ImportedAt";
  @SerializedName(SERIALIZED_NAME_IMPORTED_AT)
  private OffsetDateTime importedAt;

  public static final String SERIALIZED_NAME_REVOKED_AT = "RevokedAt";
  @SerializedName(SERIALIZED_NAME_REVOKED_AT)
  private OffsetDateTime revokedAt;

  public CertificateSummary() {
  }

  public CertificateSummary certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public CertificateSummary domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public CertificateSummary subjectAlternativeNameSummaries(List subjectAlternativeNameSummaries) {
    this.subjectAlternativeNameSummaries = subjectAlternativeNameSummaries;
    return this;
  }

  /**
   * Get subjectAlternativeNameSummaries
   * @return subjectAlternativeNameSummaries
   */
  @javax.annotation.Nullable
  public List getSubjectAlternativeNameSummaries() {
    return subjectAlternativeNameSummaries;
  }

  public void setSubjectAlternativeNameSummaries(List subjectAlternativeNameSummaries) {
    this.subjectAlternativeNameSummaries = subjectAlternativeNameSummaries;
  }


  public CertificateSummary hasAdditionalSubjectAlternativeNames(Boolean hasAdditionalSubjectAlternativeNames) {
    this.hasAdditionalSubjectAlternativeNames = hasAdditionalSubjectAlternativeNames;
    return this;
  }

  /**
   * Get hasAdditionalSubjectAlternativeNames
   * @return hasAdditionalSubjectAlternativeNames
   */
  @javax.annotation.Nullable
  public Boolean getHasAdditionalSubjectAlternativeNames() {
    return hasAdditionalSubjectAlternativeNames;
  }

  public void setHasAdditionalSubjectAlternativeNames(Boolean hasAdditionalSubjectAlternativeNames) {
    this.hasAdditionalSubjectAlternativeNames = hasAdditionalSubjectAlternativeNames;
  }


  public CertificateSummary status(CertificateStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CertificateStatus getStatus() {
    return status;
  }

  public void setStatus(CertificateStatus status) {
    this.status = status;
  }


  public CertificateSummary type(CertificateType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CertificateType getType() {
    return type;
  }

  public void setType(CertificateType type) {
    this.type = type;
  }


  public CertificateSummary keyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Get keyAlgorithm
   * @return keyAlgorithm
   */
  @javax.annotation.Nullable
  public KeyAlgorithm getKeyAlgorithm() {
    return keyAlgorithm;
  }

  public void setKeyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
  }


  public CertificateSummary keyUsages(List keyUsages) {
    this.keyUsages = keyUsages;
    return this;
  }

  /**
   * Get keyUsages
   * @return keyUsages
   */
  @javax.annotation.Nullable
  public List getKeyUsages() {
    return keyUsages;
  }

  public void setKeyUsages(List keyUsages) {
    this.keyUsages = keyUsages;
  }


  public CertificateSummary extendedKeyUsages(List extendedKeyUsages) {
    this.extendedKeyUsages = extendedKeyUsages;
    return this;
  }

  /**
   * Get extendedKeyUsages
   * @return extendedKeyUsages
   */
  @javax.annotation.Nullable
  public List getExtendedKeyUsages() {
    return extendedKeyUsages;
  }

  public void setExtendedKeyUsages(List extendedKeyUsages) {
    this.extendedKeyUsages = extendedKeyUsages;
  }


  public CertificateSummary inUse(Boolean inUse) {
    this.inUse = inUse;
    return this;
  }

  /**
   * Get inUse
   * @return inUse
   */
  @javax.annotation.Nullable
  public Boolean getInUse() {
    return inUse;
  }

  public void setInUse(Boolean inUse) {
    this.inUse = inUse;
  }


  public CertificateSummary exported(Boolean exported) {
    this.exported = exported;
    return this;
  }

  /**
   * Get exported
   * @return exported
   */
  @javax.annotation.Nullable
  public Boolean getExported() {
    return exported;
  }

  public void setExported(Boolean exported) {
    this.exported = exported;
  }


  public CertificateSummary renewalEligibility(RenewalEligibility renewalEligibility) {
    this.renewalEligibility = renewalEligibility;
    return this;
  }

  /**
   * Get renewalEligibility
   * @return renewalEligibility
   */
  @javax.annotation.Nullable
  public RenewalEligibility getRenewalEligibility() {
    return renewalEligibility;
  }

  public void setRenewalEligibility(RenewalEligibility renewalEligibility) {
    this.renewalEligibility = renewalEligibility;
  }


  public CertificateSummary notBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * Get notBefore
   * @return notBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
  }


  public CertificateSummary notAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
    return this;
  }

  /**
   * Get notAfter
   * @return notAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotAfter() {
    return notAfter;
  }

  public void setNotAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
  }


  public CertificateSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CertificateSummary issuedAt(OffsetDateTime issuedAt) {
    this.issuedAt = issuedAt;
    return this;
  }

  /**
   * Get issuedAt
   * @return issuedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIssuedAt() {
    return issuedAt;
  }

  public void setIssuedAt(OffsetDateTime issuedAt) {
    this.issuedAt = issuedAt;
  }


  public CertificateSummary importedAt(OffsetDateTime importedAt) {
    this.importedAt = importedAt;
    return this;
  }

  /**
   * Get importedAt
   * @return importedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImportedAt() {
    return importedAt;
  }

  public void setImportedAt(OffsetDateTime importedAt) {
    this.importedAt = importedAt;
  }


  public CertificateSummary revokedAt(OffsetDateTime revokedAt) {
    this.revokedAt = revokedAt;
    return this;
  }

  /**
   * Get revokedAt
   * @return revokedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevokedAt() {
    return revokedAt;
  }

  public void setRevokedAt(OffsetDateTime revokedAt) {
    this.revokedAt = revokedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateSummary certificateSummary = (CertificateSummary) o;
    return Objects.equals(this.certificateArn, certificateSummary.certificateArn) &&
        Objects.equals(this.domainName, certificateSummary.domainName) &&
        Objects.equals(this.subjectAlternativeNameSummaries, certificateSummary.subjectAlternativeNameSummaries) &&
        Objects.equals(this.hasAdditionalSubjectAlternativeNames, certificateSummary.hasAdditionalSubjectAlternativeNames) &&
        Objects.equals(this.status, certificateSummary.status) &&
        Objects.equals(this.type, certificateSummary.type) &&
        Objects.equals(this.keyAlgorithm, certificateSummary.keyAlgorithm) &&
        Objects.equals(this.keyUsages, certificateSummary.keyUsages) &&
        Objects.equals(this.extendedKeyUsages, certificateSummary.extendedKeyUsages) &&
        Objects.equals(this.inUse, certificateSummary.inUse) &&
        Objects.equals(this.exported, certificateSummary.exported) &&
        Objects.equals(this.renewalEligibility, certificateSummary.renewalEligibility) &&
        Objects.equals(this.notBefore, certificateSummary.notBefore) &&
        Objects.equals(this.notAfter, certificateSummary.notAfter) &&
        Objects.equals(this.createdAt, certificateSummary.createdAt) &&
        Objects.equals(this.issuedAt, certificateSummary.issuedAt) &&
        Objects.equals(this.importedAt, certificateSummary.importedAt) &&
        Objects.equals(this.revokedAt, certificateSummary.revokedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateArn, domainName, subjectAlternativeNameSummaries, hasAdditionalSubjectAlternativeNames, status, type, keyAlgorithm, keyUsages, extendedKeyUsages, inUse, exported, renewalEligibility, notBefore, notAfter, createdAt, issuedAt, importedAt, revokedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateSummary {\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    subjectAlternativeNameSummaries: ").append(toIndentedString(subjectAlternativeNameSummaries)).append("\n");
    sb.append("    hasAdditionalSubjectAlternativeNames: ").append(toIndentedString(hasAdditionalSubjectAlternativeNames)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("    keyUsages: ").append(toIndentedString(keyUsages)).append("\n");
    sb.append("    extendedKeyUsages: ").append(toIndentedString(extendedKeyUsages)).append("\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    exported: ").append(toIndentedString(exported)).append("\n");
    sb.append("    renewalEligibility: ").append(toIndentedString(renewalEligibility)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    issuedAt: ").append(toIndentedString(issuedAt)).append("\n");
    sb.append("    importedAt: ").append(toIndentedString(importedAt)).append("\n");
    sb.append("    revokedAt: ").append(toIndentedString(revokedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateArn");
    openapiFields.add("DomainName");
    openapiFields.add("SubjectAlternativeNameSummaries");
    openapiFields.add("HasAdditionalSubjectAlternativeNames");
    openapiFields.add("Status");
    openapiFields.add("Type");
    openapiFields.add("KeyAlgorithm");
    openapiFields.add("KeyUsages");
    openapiFields.add("ExtendedKeyUsages");
    openapiFields.add("InUse");
    openapiFields.add("Exported");
    openapiFields.add("RenewalEligibility");
    openapiFields.add("NotBefore");
    openapiFields.add("NotAfter");
    openapiFields.add("CreatedAt");
    openapiFields.add("IssuedAt");
    openapiFields.add("ImportedAt");
    openapiFields.add("RevokedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateSummary is not found in the empty JSON string", CertificateSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CertificateArn`
      if (jsonObj.get("CertificateArn") != null && !jsonObj.get("CertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateArn"));
      }
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `SubjectAlternativeNameSummaries`
      if (jsonObj.get("SubjectAlternativeNameSummaries") != null && !jsonObj.get("SubjectAlternativeNameSummaries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubjectAlternativeNameSummaries"));
      }
      // validate the optional field `HasAdditionalSubjectAlternativeNames`
      if (jsonObj.get("HasAdditionalSubjectAlternativeNames") != null && !jsonObj.get("HasAdditionalSubjectAlternativeNames").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HasAdditionalSubjectAlternativeNames"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        CertificateStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        CertificateType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `KeyAlgorithm`
      if (jsonObj.get("KeyAlgorithm") != null && !jsonObj.get("KeyAlgorithm").isJsonNull()) {
        KeyAlgorithm.validateJsonElement(jsonObj.get("KeyAlgorithm"));
      }
      // validate the optional field `KeyUsages`
      if (jsonObj.get("KeyUsages") != null && !jsonObj.get("KeyUsages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KeyUsages"));
      }
      // validate the optional field `ExtendedKeyUsages`
      if (jsonObj.get("ExtendedKeyUsages") != null && !jsonObj.get("ExtendedKeyUsages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExtendedKeyUsages"));
      }
      // validate the optional field `InUse`
      if (jsonObj.get("InUse") != null && !jsonObj.get("InUse").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("InUse"));
      }
      // validate the optional field `Exported`
      if (jsonObj.get("Exported") != null && !jsonObj.get("Exported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Exported"));
      }
      // validate the optional field `RenewalEligibility`
      if (jsonObj.get("RenewalEligibility") != null && !jsonObj.get("RenewalEligibility").isJsonNull()) {
        RenewalEligibility.validateJsonElement(jsonObj.get("RenewalEligibility"));
      }
      // validate the optional field `NotBefore`
      if (jsonObj.get("NotBefore") != null && !jsonObj.get("NotBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("NotBefore"));
      }
      // validate the optional field `NotAfter`
      if (jsonObj.get("NotAfter") != null && !jsonObj.get("NotAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("NotAfter"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `IssuedAt`
      if (jsonObj.get("IssuedAt") != null && !jsonObj.get("IssuedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("IssuedAt"));
      }
      // validate the optional field `ImportedAt`
      if (jsonObj.get("ImportedAt") != null && !jsonObj.get("ImportedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ImportedAt"));
      }
      // validate the optional field `RevokedAt`
      if (jsonObj.get("RevokedAt") != null && !jsonObj.get("RevokedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RevokedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateSummary>() {
           @Override
           public void write(JsonWriter out, CertificateSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateSummary
   * @throws IOException if the JSON string is invalid with respect to CertificateSummary
   */
  public static CertificateSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateSummary.class);
  }

  /**
   * Convert an instance of CertificateSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

