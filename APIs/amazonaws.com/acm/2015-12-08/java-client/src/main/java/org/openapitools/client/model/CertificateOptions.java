/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateTransparencyLoggingPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency\&quot;&gt;Certificate Transparency Logging&lt;/a&gt;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:57.407675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateOptions {
  public static final String SERIALIZED_NAME_CERTIFICATE_TRANSPARENCY_LOGGING_PREFERENCE = "CertificateTransparencyLoggingPreference";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TRANSPARENCY_LOGGING_PREFERENCE)
  private CertificateTransparencyLoggingPreference certificateTransparencyLoggingPreference;

  public CertificateOptions() {
  }

  public CertificateOptions certificateTransparencyLoggingPreference(CertificateTransparencyLoggingPreference certificateTransparencyLoggingPreference) {
    this.certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference;
    return this;
  }

  /**
   * Get certificateTransparencyLoggingPreference
   * @return certificateTransparencyLoggingPreference
   */
  @javax.annotation.Nullable
  public CertificateTransparencyLoggingPreference getCertificateTransparencyLoggingPreference() {
    return certificateTransparencyLoggingPreference;
  }

  public void setCertificateTransparencyLoggingPreference(CertificateTransparencyLoggingPreference certificateTransparencyLoggingPreference) {
    this.certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateOptions certificateOptions = (CertificateOptions) o;
    return Objects.equals(this.certificateTransparencyLoggingPreference, certificateOptions.certificateTransparencyLoggingPreference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateTransparencyLoggingPreference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateOptions {\n");
    sb.append("    certificateTransparencyLoggingPreference: ").append(toIndentedString(certificateTransparencyLoggingPreference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateTransparencyLoggingPreference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateOptions is not found in the empty JSON string", CertificateOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CertificateTransparencyLoggingPreference`
      if (jsonObj.get("CertificateTransparencyLoggingPreference") != null && !jsonObj.get("CertificateTransparencyLoggingPreference").isJsonNull()) {
        CertificateTransparencyLoggingPreference.validateJsonElement(jsonObj.get("CertificateTransparencyLoggingPreference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateOptions>() {
           @Override
           public void write(JsonWriter out, CertificateOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateOptions
   * @throws IOException if the JSON string is invalid with respect to CertificateOptions
   */
  public static CertificateOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateOptions.class);
  }

  /**
   * Convert an instance of CertificateOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

