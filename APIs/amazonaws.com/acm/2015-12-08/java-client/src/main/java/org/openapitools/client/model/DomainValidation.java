/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DomainStatus;
import org.openapitools.client.model.DomainValidationResourceRecord;
import org.openapitools.client.model.ValidationMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the validation of each domain name in the certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:57.407675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainValidation {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_VALIDATION_EMAILS = "ValidationEmails";
  @SerializedName(SERIALIZED_NAME_VALIDATION_EMAILS)
  private List validationEmails;

  public static final String SERIALIZED_NAME_VALIDATION_DOMAIN = "ValidationDomain";
  @SerializedName(SERIALIZED_NAME_VALIDATION_DOMAIN)
  private String validationDomain;

  public static final String SERIALIZED_NAME_VALIDATION_STATUS = "ValidationStatus";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATUS)
  private DomainStatus validationStatus;

  public static final String SERIALIZED_NAME_RESOURCE_RECORD = "ResourceRecord";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RECORD)
  private DomainValidationResourceRecord resourceRecord;

  public static final String SERIALIZED_NAME_VALIDATION_METHOD = "ValidationMethod";
  @SerializedName(SERIALIZED_NAME_VALIDATION_METHOD)
  private ValidationMethod validationMethod;

  public DomainValidation() {
  }

  public DomainValidation domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public DomainValidation validationEmails(List validationEmails) {
    this.validationEmails = validationEmails;
    return this;
  }

  /**
   * Get validationEmails
   * @return validationEmails
   */
  @javax.annotation.Nullable
  public List getValidationEmails() {
    return validationEmails;
  }

  public void setValidationEmails(List validationEmails) {
    this.validationEmails = validationEmails;
  }


  public DomainValidation validationDomain(String validationDomain) {
    this.validationDomain = validationDomain;
    return this;
  }

  /**
   * Get validationDomain
   * @return validationDomain
   */
  @javax.annotation.Nullable
  public String getValidationDomain() {
    return validationDomain;
  }

  public void setValidationDomain(String validationDomain) {
    this.validationDomain = validationDomain;
  }


  public DomainValidation validationStatus(DomainStatus validationStatus) {
    this.validationStatus = validationStatus;
    return this;
  }

  /**
   * Get validationStatus
   * @return validationStatus
   */
  @javax.annotation.Nullable
  public DomainStatus getValidationStatus() {
    return validationStatus;
  }

  public void setValidationStatus(DomainStatus validationStatus) {
    this.validationStatus = validationStatus;
  }


  public DomainValidation resourceRecord(DomainValidationResourceRecord resourceRecord) {
    this.resourceRecord = resourceRecord;
    return this;
  }

  /**
   * Get resourceRecord
   * @return resourceRecord
   */
  @javax.annotation.Nullable
  public DomainValidationResourceRecord getResourceRecord() {
    return resourceRecord;
  }

  public void setResourceRecord(DomainValidationResourceRecord resourceRecord) {
    this.resourceRecord = resourceRecord;
  }


  public DomainValidation validationMethod(ValidationMethod validationMethod) {
    this.validationMethod = validationMethod;
    return this;
  }

  /**
   * Get validationMethod
   * @return validationMethod
   */
  @javax.annotation.Nullable
  public ValidationMethod getValidationMethod() {
    return validationMethod;
  }

  public void setValidationMethod(ValidationMethod validationMethod) {
    this.validationMethod = validationMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainValidation domainValidation = (DomainValidation) o;
    return Objects.equals(this.domainName, domainValidation.domainName) &&
        Objects.equals(this.validationEmails, domainValidation.validationEmails) &&
        Objects.equals(this.validationDomain, domainValidation.validationDomain) &&
        Objects.equals(this.validationStatus, domainValidation.validationStatus) &&
        Objects.equals(this.resourceRecord, domainValidation.resourceRecord) &&
        Objects.equals(this.validationMethod, domainValidation.validationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, validationEmails, validationDomain, validationStatus, resourceRecord, validationMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainValidation {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    validationEmails: ").append(toIndentedString(validationEmails)).append("\n");
    sb.append("    validationDomain: ").append(toIndentedString(validationDomain)).append("\n");
    sb.append("    validationStatus: ").append(toIndentedString(validationStatus)).append("\n");
    sb.append("    resourceRecord: ").append(toIndentedString(resourceRecord)).append("\n");
    sb.append("    validationMethod: ").append(toIndentedString(validationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("ValidationEmails");
    openapiFields.add("ValidationDomain");
    openapiFields.add("ValidationStatus");
    openapiFields.add("ResourceRecord");
    openapiFields.add("ValidationMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainValidation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainValidation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainValidation is not found in the empty JSON string", DomainValidation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainValidation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainValidation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainValidation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the optional field `ValidationEmails`
      if (jsonObj.get("ValidationEmails") != null && !jsonObj.get("ValidationEmails").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ValidationEmails"));
      }
      // validate the optional field `ValidationDomain`
      if (jsonObj.get("ValidationDomain") != null && !jsonObj.get("ValidationDomain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ValidationDomain"));
      }
      // validate the optional field `ValidationStatus`
      if (jsonObj.get("ValidationStatus") != null && !jsonObj.get("ValidationStatus").isJsonNull()) {
        DomainStatus.validateJsonElement(jsonObj.get("ValidationStatus"));
      }
      // validate the optional field `ResourceRecord`
      if (jsonObj.get("ResourceRecord") != null && !jsonObj.get("ResourceRecord").isJsonNull()) {
        DomainValidationResourceRecord.validateJsonElement(jsonObj.get("ResourceRecord"));
      }
      // validate the optional field `ValidationMethod`
      if (jsonObj.get("ValidationMethod") != null && !jsonObj.get("ValidationMethod").isJsonNull()) {
        ValidationMethod.validateJsonElement(jsonObj.get("ValidationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainValidation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainValidation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainValidation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainValidation.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainValidation>() {
           @Override
           public void write(JsonWriter out, DomainValidation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainValidation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainValidation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainValidation
   * @throws IOException if the JSON string is invalid with respect to DomainValidation
   */
  public static DomainValidation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainValidation.class);
  }

  /**
   * Convert an instance of DomainValidation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

