/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateDetailOptions;
import org.openapitools.client.model.CertificateDetailRenewalSummary;
import org.openapitools.client.model.CertificateStatus;
import org.openapitools.client.model.CertificateType;
import org.openapitools.client.model.FailureReason;
import org.openapitools.client.model.KeyAlgorithm;
import org.openapitools.client.model.RenewalEligibility;
import org.openapitools.client.model.RevocationReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains metadata about an ACM certificate. This structure is returned in the response to a &lt;a&gt;DescribeCertificate&lt;/a&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:57.407675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateDetail {
  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "CertificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES = "SubjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES)
  private List subjectAlternativeNames;

  public static final String SERIALIZED_NAME_DOMAIN_VALIDATION_OPTIONS = "DomainValidationOptions";
  @SerializedName(SERIALIZED_NAME_DOMAIN_VALIDATION_OPTIONS)
  private List domainValidationOptions;

  public static final String SERIALIZED_NAME_SERIAL = "Serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ISSUED_AT = "IssuedAt";
  @SerializedName(SERIALIZED_NAME_ISSUED_AT)
  private OffsetDateTime issuedAt;

  public static final String SERIALIZED_NAME_IMPORTED_AT = "ImportedAt";
  @SerializedName(SERIALIZED_NAME_IMPORTED_AT)
  private OffsetDateTime importedAt;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CertificateStatus status;

  public static final String SERIALIZED_NAME_REVOKED_AT = "RevokedAt";
  @SerializedName(SERIALIZED_NAME_REVOKED_AT)
  private OffsetDateTime revokedAt;

  public static final String SERIALIZED_NAME_REVOCATION_REASON = "RevocationReason";
  @SerializedName(SERIALIZED_NAME_REVOCATION_REASON)
  private RevocationReason revocationReason;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "NotBefore";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private OffsetDateTime notBefore;

  public static final String SERIALIZED_NAME_NOT_AFTER = "NotAfter";
  @SerializedName(SERIALIZED_NAME_NOT_AFTER)
  private OffsetDateTime notAfter;

  public static final String SERIALIZED_NAME_KEY_ALGORITHM = "KeyAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_ALGORITHM)
  private KeyAlgorithm keyAlgorithm;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "SignatureAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private String signatureAlgorithm;

  public static final String SERIALIZED_NAME_IN_USE_BY = "InUseBy";
  @SerializedName(SERIALIZED_NAME_IN_USE_BY)
  private List inUseBy;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReason failureReason;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CertificateType type;

  public static final String SERIALIZED_NAME_RENEWAL_SUMMARY = "RenewalSummary";
  @SerializedName(SERIALIZED_NAME_RENEWAL_SUMMARY)
  private CertificateDetailRenewalSummary renewalSummary;

  public static final String SERIALIZED_NAME_KEY_USAGES = "KeyUsages";
  @SerializedName(SERIALIZED_NAME_KEY_USAGES)
  private List keyUsages;

  public static final String SERIALIZED_NAME_EXTENDED_KEY_USAGES = "ExtendedKeyUsages";
  @SerializedName(SERIALIZED_NAME_EXTENDED_KEY_USAGES)
  private List extendedKeyUsages;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN = "CertificateAuthorityArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN)
  private String certificateAuthorityArn;

  public static final String SERIALIZED_NAME_RENEWAL_ELIGIBILITY = "RenewalEligibility";
  @SerializedName(SERIALIZED_NAME_RENEWAL_ELIGIBILITY)
  private RenewalEligibility renewalEligibility;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private CertificateDetailOptions options;

  public CertificateDetail() {
  }

  public CertificateDetail certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public CertificateDetail domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public CertificateDetail subjectAlternativeNames(List subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  /**
   * Get subjectAlternativeNames
   * @return subjectAlternativeNames
   */
  @javax.annotation.Nullable
  public List getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(List subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }


  public CertificateDetail domainValidationOptions(List domainValidationOptions) {
    this.domainValidationOptions = domainValidationOptions;
    return this;
  }

  /**
   * Get domainValidationOptions
   * @return domainValidationOptions
   */
  @javax.annotation.Nullable
  public List getDomainValidationOptions() {
    return domainValidationOptions;
  }

  public void setDomainValidationOptions(List domainValidationOptions) {
    this.domainValidationOptions = domainValidationOptions;
  }


  public CertificateDetail serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Get serial
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public CertificateDetail subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CertificateDetail issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public CertificateDetail createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CertificateDetail issuedAt(OffsetDateTime issuedAt) {
    this.issuedAt = issuedAt;
    return this;
  }

  /**
   * Get issuedAt
   * @return issuedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIssuedAt() {
    return issuedAt;
  }

  public void setIssuedAt(OffsetDateTime issuedAt) {
    this.issuedAt = issuedAt;
  }


  public CertificateDetail importedAt(OffsetDateTime importedAt) {
    this.importedAt = importedAt;
    return this;
  }

  /**
   * Get importedAt
   * @return importedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImportedAt() {
    return importedAt;
  }

  public void setImportedAt(OffsetDateTime importedAt) {
    this.importedAt = importedAt;
  }


  public CertificateDetail status(CertificateStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CertificateStatus getStatus() {
    return status;
  }

  public void setStatus(CertificateStatus status) {
    this.status = status;
  }


  public CertificateDetail revokedAt(OffsetDateTime revokedAt) {
    this.revokedAt = revokedAt;
    return this;
  }

  /**
   * Get revokedAt
   * @return revokedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevokedAt() {
    return revokedAt;
  }

  public void setRevokedAt(OffsetDateTime revokedAt) {
    this.revokedAt = revokedAt;
  }


  public CertificateDetail revocationReason(RevocationReason revocationReason) {
    this.revocationReason = revocationReason;
    return this;
  }

  /**
   * Get revocationReason
   * @return revocationReason
   */
  @javax.annotation.Nullable
  public RevocationReason getRevocationReason() {
    return revocationReason;
  }

  public void setRevocationReason(RevocationReason revocationReason) {
    this.revocationReason = revocationReason;
  }


  public CertificateDetail notBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * Get notBefore
   * @return notBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
  }


  public CertificateDetail notAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
    return this;
  }

  /**
   * Get notAfter
   * @return notAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotAfter() {
    return notAfter;
  }

  public void setNotAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
  }


  public CertificateDetail keyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Get keyAlgorithm
   * @return keyAlgorithm
   */
  @javax.annotation.Nullable
  public KeyAlgorithm getKeyAlgorithm() {
    return keyAlgorithm;
  }

  public void setKeyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
  }


  public CertificateDetail signatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * Get signatureAlgorithm
   * @return signatureAlgorithm
   */
  @javax.annotation.Nullable
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }


  public CertificateDetail inUseBy(List inUseBy) {
    this.inUseBy = inUseBy;
    return this;
  }

  /**
   * Get inUseBy
   * @return inUseBy
   */
  @javax.annotation.Nullable
  public List getInUseBy() {
    return inUseBy;
  }

  public void setInUseBy(List inUseBy) {
    this.inUseBy = inUseBy;
  }


  public CertificateDetail failureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public FailureReason getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
  }


  public CertificateDetail type(CertificateType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CertificateType getType() {
    return type;
  }

  public void setType(CertificateType type) {
    this.type = type;
  }


  public CertificateDetail renewalSummary(CertificateDetailRenewalSummary renewalSummary) {
    this.renewalSummary = renewalSummary;
    return this;
  }

  /**
   * Get renewalSummary
   * @return renewalSummary
   */
  @javax.annotation.Nullable
  public CertificateDetailRenewalSummary getRenewalSummary() {
    return renewalSummary;
  }

  public void setRenewalSummary(CertificateDetailRenewalSummary renewalSummary) {
    this.renewalSummary = renewalSummary;
  }


  public CertificateDetail keyUsages(List keyUsages) {
    this.keyUsages = keyUsages;
    return this;
  }

  /**
   * Get keyUsages
   * @return keyUsages
   */
  @javax.annotation.Nullable
  public List getKeyUsages() {
    return keyUsages;
  }

  public void setKeyUsages(List keyUsages) {
    this.keyUsages = keyUsages;
  }


  public CertificateDetail extendedKeyUsages(List extendedKeyUsages) {
    this.extendedKeyUsages = extendedKeyUsages;
    return this;
  }

  /**
   * Get extendedKeyUsages
   * @return extendedKeyUsages
   */
  @javax.annotation.Nullable
  public List getExtendedKeyUsages() {
    return extendedKeyUsages;
  }

  public void setExtendedKeyUsages(List extendedKeyUsages) {
    this.extendedKeyUsages = extendedKeyUsages;
  }


  public CertificateDetail certificateAuthorityArn(String certificateAuthorityArn) {
    this.certificateAuthorityArn = certificateAuthorityArn;
    return this;
  }

  /**
   * Get certificateAuthorityArn
   * @return certificateAuthorityArn
   */
  @javax.annotation.Nullable
  public String getCertificateAuthorityArn() {
    return certificateAuthorityArn;
  }

  public void setCertificateAuthorityArn(String certificateAuthorityArn) {
    this.certificateAuthorityArn = certificateAuthorityArn;
  }


  public CertificateDetail renewalEligibility(RenewalEligibility renewalEligibility) {
    this.renewalEligibility = renewalEligibility;
    return this;
  }

  /**
   * Get renewalEligibility
   * @return renewalEligibility
   */
  @javax.annotation.Nullable
  public RenewalEligibility getRenewalEligibility() {
    return renewalEligibility;
  }

  public void setRenewalEligibility(RenewalEligibility renewalEligibility) {
    this.renewalEligibility = renewalEligibility;
  }


  public CertificateDetail options(CertificateDetailOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public CertificateDetailOptions getOptions() {
    return options;
  }

  public void setOptions(CertificateDetailOptions options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateDetail certificateDetail = (CertificateDetail) o;
    return Objects.equals(this.certificateArn, certificateDetail.certificateArn) &&
        Objects.equals(this.domainName, certificateDetail.domainName) &&
        Objects.equals(this.subjectAlternativeNames, certificateDetail.subjectAlternativeNames) &&
        Objects.equals(this.domainValidationOptions, certificateDetail.domainValidationOptions) &&
        Objects.equals(this.serial, certificateDetail.serial) &&
        Objects.equals(this.subject, certificateDetail.subject) &&
        Objects.equals(this.issuer, certificateDetail.issuer) &&
        Objects.equals(this.createdAt, certificateDetail.createdAt) &&
        Objects.equals(this.issuedAt, certificateDetail.issuedAt) &&
        Objects.equals(this.importedAt, certificateDetail.importedAt) &&
        Objects.equals(this.status, certificateDetail.status) &&
        Objects.equals(this.revokedAt, certificateDetail.revokedAt) &&
        Objects.equals(this.revocationReason, certificateDetail.revocationReason) &&
        Objects.equals(this.notBefore, certificateDetail.notBefore) &&
        Objects.equals(this.notAfter, certificateDetail.notAfter) &&
        Objects.equals(this.keyAlgorithm, certificateDetail.keyAlgorithm) &&
        Objects.equals(this.signatureAlgorithm, certificateDetail.signatureAlgorithm) &&
        Objects.equals(this.inUseBy, certificateDetail.inUseBy) &&
        Objects.equals(this.failureReason, certificateDetail.failureReason) &&
        Objects.equals(this.type, certificateDetail.type) &&
        Objects.equals(this.renewalSummary, certificateDetail.renewalSummary) &&
        Objects.equals(this.keyUsages, certificateDetail.keyUsages) &&
        Objects.equals(this.extendedKeyUsages, certificateDetail.extendedKeyUsages) &&
        Objects.equals(this.certificateAuthorityArn, certificateDetail.certificateAuthorityArn) &&
        Objects.equals(this.renewalEligibility, certificateDetail.renewalEligibility) &&
        Objects.equals(this.options, certificateDetail.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateArn, domainName, subjectAlternativeNames, domainValidationOptions, serial, subject, issuer, createdAt, issuedAt, importedAt, status, revokedAt, revocationReason, notBefore, notAfter, keyAlgorithm, signatureAlgorithm, inUseBy, failureReason, type, renewalSummary, keyUsages, extendedKeyUsages, certificateAuthorityArn, renewalEligibility, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateDetail {\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    domainValidationOptions: ").append(toIndentedString(domainValidationOptions)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    issuedAt: ").append(toIndentedString(issuedAt)).append("\n");
    sb.append("    importedAt: ").append(toIndentedString(importedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    revokedAt: ").append(toIndentedString(revokedAt)).append("\n");
    sb.append("    revocationReason: ").append(toIndentedString(revocationReason)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    inUseBy: ").append(toIndentedString(inUseBy)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    renewalSummary: ").append(toIndentedString(renewalSummary)).append("\n");
    sb.append("    keyUsages: ").append(toIndentedString(keyUsages)).append("\n");
    sb.append("    extendedKeyUsages: ").append(toIndentedString(extendedKeyUsages)).append("\n");
    sb.append("    certificateAuthorityArn: ").append(toIndentedString(certificateAuthorityArn)).append("\n");
    sb.append("    renewalEligibility: ").append(toIndentedString(renewalEligibility)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateArn");
    openapiFields.add("DomainName");
    openapiFields.add("SubjectAlternativeNames");
    openapiFields.add("DomainValidationOptions");
    openapiFields.add("Serial");
    openapiFields.add("Subject");
    openapiFields.add("Issuer");
    openapiFields.add("CreatedAt");
    openapiFields.add("IssuedAt");
    openapiFields.add("ImportedAt");
    openapiFields.add("Status");
    openapiFields.add("RevokedAt");
    openapiFields.add("RevocationReason");
    openapiFields.add("NotBefore");
    openapiFields.add("NotAfter");
    openapiFields.add("KeyAlgorithm");
    openapiFields.add("SignatureAlgorithm");
    openapiFields.add("InUseBy");
    openapiFields.add("FailureReason");
    openapiFields.add("Type");
    openapiFields.add("RenewalSummary");
    openapiFields.add("KeyUsages");
    openapiFields.add("ExtendedKeyUsages");
    openapiFields.add("CertificateAuthorityArn");
    openapiFields.add("RenewalEligibility");
    openapiFields.add("Options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateDetail is not found in the empty JSON string", CertificateDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CertificateArn`
      if (jsonObj.get("CertificateArn") != null && !jsonObj.get("CertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateArn"));
      }
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `SubjectAlternativeNames`
      if (jsonObj.get("SubjectAlternativeNames") != null && !jsonObj.get("SubjectAlternativeNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubjectAlternativeNames"));
      }
      // validate the optional field `DomainValidationOptions`
      if (jsonObj.get("DomainValidationOptions") != null && !jsonObj.get("DomainValidationOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DomainValidationOptions"));
      }
      // validate the optional field `Serial`
      if (jsonObj.get("Serial") != null && !jsonObj.get("Serial").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Serial"));
      }
      // validate the optional field `Subject`
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subject"));
      }
      // validate the optional field `Issuer`
      if (jsonObj.get("Issuer") != null && !jsonObj.get("Issuer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Issuer"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `IssuedAt`
      if (jsonObj.get("IssuedAt") != null && !jsonObj.get("IssuedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("IssuedAt"));
      }
      // validate the optional field `ImportedAt`
      if (jsonObj.get("ImportedAt") != null && !jsonObj.get("ImportedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ImportedAt"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        CertificateStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `RevokedAt`
      if (jsonObj.get("RevokedAt") != null && !jsonObj.get("RevokedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RevokedAt"));
      }
      // validate the optional field `RevocationReason`
      if (jsonObj.get("RevocationReason") != null && !jsonObj.get("RevocationReason").isJsonNull()) {
        RevocationReason.validateJsonElement(jsonObj.get("RevocationReason"));
      }
      // validate the optional field `NotBefore`
      if (jsonObj.get("NotBefore") != null && !jsonObj.get("NotBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("NotBefore"));
      }
      // validate the optional field `NotAfter`
      if (jsonObj.get("NotAfter") != null && !jsonObj.get("NotAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("NotAfter"));
      }
      // validate the optional field `KeyAlgorithm`
      if (jsonObj.get("KeyAlgorithm") != null && !jsonObj.get("KeyAlgorithm").isJsonNull()) {
        KeyAlgorithm.validateJsonElement(jsonObj.get("KeyAlgorithm"));
      }
      // validate the optional field `SignatureAlgorithm`
      if (jsonObj.get("SignatureAlgorithm") != null && !jsonObj.get("SignatureAlgorithm").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SignatureAlgorithm"));
      }
      // validate the optional field `InUseBy`
      if (jsonObj.get("InUseBy") != null && !jsonObj.get("InUseBy").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InUseBy"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        FailureReason.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        CertificateType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `RenewalSummary`
      if (jsonObj.get("RenewalSummary") != null && !jsonObj.get("RenewalSummary").isJsonNull()) {
        CertificateDetailRenewalSummary.validateJsonElement(jsonObj.get("RenewalSummary"));
      }
      // validate the optional field `KeyUsages`
      if (jsonObj.get("KeyUsages") != null && !jsonObj.get("KeyUsages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KeyUsages"));
      }
      // validate the optional field `ExtendedKeyUsages`
      if (jsonObj.get("ExtendedKeyUsages") != null && !jsonObj.get("ExtendedKeyUsages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExtendedKeyUsages"));
      }
      // validate the optional field `CertificateAuthorityArn`
      if (jsonObj.get("CertificateAuthorityArn") != null && !jsonObj.get("CertificateAuthorityArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateAuthorityArn"));
      }
      // validate the optional field `RenewalEligibility`
      if (jsonObj.get("RenewalEligibility") != null && !jsonObj.get("RenewalEligibility").isJsonNull()) {
        RenewalEligibility.validateJsonElement(jsonObj.get("RenewalEligibility"));
      }
      // validate the optional field `Options`
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        CertificateDetailOptions.validateJsonElement(jsonObj.get("Options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateDetail>() {
           @Override
           public void write(JsonWriter out, CertificateDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateDetail
   * @throws IOException if the JSON string is invalid with respect to CertificateDetail
   */
  public static CertificateDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateDetail.class);
  }

  /**
   * Convert an instance of CertificateDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

