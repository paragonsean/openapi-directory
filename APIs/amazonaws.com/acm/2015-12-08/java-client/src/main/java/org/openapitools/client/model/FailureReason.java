/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets FailureReason
 */
@JsonAdapter(FailureReason.Adapter.class)
public enum FailureReason {
  
  NO_AVAILABLE_CONTACTS("NO_AVAILABLE_CONTACTS"),
  
  ADDITIONAL_VERIFICATION_REQUIRED("ADDITIONAL_VERIFICATION_REQUIRED"),
  
  DOMAIN_NOT_ALLOWED("DOMAIN_NOT_ALLOWED"),
  
  INVALID_PUBLIC_DOMAIN("INVALID_PUBLIC_DOMAIN"),
  
  DOMAIN_VALIDATION_DENIED("DOMAIN_VALIDATION_DENIED"),
  
  CAA_ERROR("CAA_ERROR"),
  
  PCA_LIMIT_EXCEEDED("PCA_LIMIT_EXCEEDED"),
  
  PCA_INVALID_ARN("PCA_INVALID_ARN"),
  
  PCA_INVALID_STATE("PCA_INVALID_STATE"),
  
  PCA_REQUEST_FAILED("PCA_REQUEST_FAILED"),
  
  PCA_NAME_CONSTRAINTS_VALIDATION("PCA_NAME_CONSTRAINTS_VALIDATION"),
  
  PCA_RESOURCE_NOT_FOUND("PCA_RESOURCE_NOT_FOUND"),
  
  PCA_INVALID_ARGS("PCA_INVALID_ARGS"),
  
  PCA_INVALID_DURATION("PCA_INVALID_DURATION"),
  
  PCA_ACCESS_DENIED("PCA_ACCESS_DENIED"),
  
  SLR_NOT_FOUND("SLR_NOT_FOUND"),
  
  OTHER("OTHER");

  private String value;

  FailureReason(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FailureReason fromValue(String value) {
    for (FailureReason b : FailureReason.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FailureReason> {
    @Override
    public void write(final JsonWriter jsonWriter, final FailureReason enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FailureReason read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FailureReason.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FailureReason.fromValue(value);
  }
}

