/*
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyAlgorithm;
import org.openapitools.client.model.RequestCertificateRequestOptions;
import org.openapitools.client.model.ValidationMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestCertificateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:57.407675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestCertificateRequest {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_VALIDATION_METHOD = "ValidationMethod";
  @SerializedName(SERIALIZED_NAME_VALIDATION_METHOD)
  private ValidationMethod validationMethod;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES = "SubjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES)
  private List subjectAlternativeNames;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public static final String SERIALIZED_NAME_DOMAIN_VALIDATION_OPTIONS = "DomainValidationOptions";
  @SerializedName(SERIALIZED_NAME_DOMAIN_VALIDATION_OPTIONS)
  private List domainValidationOptions;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private RequestCertificateRequestOptions options;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN = "CertificateAuthorityArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_ARN)
  private String certificateAuthorityArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_KEY_ALGORITHM = "KeyAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_ALGORITHM)
  private KeyAlgorithm keyAlgorithm;

  public RequestCertificateRequest() {
  }

  public RequestCertificateRequest domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public RequestCertificateRequest validationMethod(ValidationMethod validationMethod) {
    this.validationMethod = validationMethod;
    return this;
  }

  /**
   * Get validationMethod
   * @return validationMethod
   */
  @javax.annotation.Nullable
  public ValidationMethod getValidationMethod() {
    return validationMethod;
  }

  public void setValidationMethod(ValidationMethod validationMethod) {
    this.validationMethod = validationMethod;
  }


  public RequestCertificateRequest subjectAlternativeNames(List subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  /**
   * Get subjectAlternativeNames
   * @return subjectAlternativeNames
   */
  @javax.annotation.Nullable
  public List getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(List subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }


  public RequestCertificateRequest idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * Get idempotencyToken
   * @return idempotencyToken
   */
  @javax.annotation.Nullable
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }


  public RequestCertificateRequest domainValidationOptions(List domainValidationOptions) {
    this.domainValidationOptions = domainValidationOptions;
    return this;
  }

  /**
   * Get domainValidationOptions
   * @return domainValidationOptions
   */
  @javax.annotation.Nullable
  public List getDomainValidationOptions() {
    return domainValidationOptions;
  }

  public void setDomainValidationOptions(List domainValidationOptions) {
    this.domainValidationOptions = domainValidationOptions;
  }


  public RequestCertificateRequest options(RequestCertificateRequestOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public RequestCertificateRequestOptions getOptions() {
    return options;
  }

  public void setOptions(RequestCertificateRequestOptions options) {
    this.options = options;
  }


  public RequestCertificateRequest certificateAuthorityArn(String certificateAuthorityArn) {
    this.certificateAuthorityArn = certificateAuthorityArn;
    return this;
  }

  /**
   * Get certificateAuthorityArn
   * @return certificateAuthorityArn
   */
  @javax.annotation.Nullable
  public String getCertificateAuthorityArn() {
    return certificateAuthorityArn;
  }

  public void setCertificateAuthorityArn(String certificateAuthorityArn) {
    this.certificateAuthorityArn = certificateAuthorityArn;
  }


  public RequestCertificateRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public RequestCertificateRequest keyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Get keyAlgorithm
   * @return keyAlgorithm
   */
  @javax.annotation.Nullable
  public KeyAlgorithm getKeyAlgorithm() {
    return keyAlgorithm;
  }

  public void setKeyAlgorithm(KeyAlgorithm keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestCertificateRequest requestCertificateRequest = (RequestCertificateRequest) o;
    return Objects.equals(this.domainName, requestCertificateRequest.domainName) &&
        Objects.equals(this.validationMethod, requestCertificateRequest.validationMethod) &&
        Objects.equals(this.subjectAlternativeNames, requestCertificateRequest.subjectAlternativeNames) &&
        Objects.equals(this.idempotencyToken, requestCertificateRequest.idempotencyToken) &&
        Objects.equals(this.domainValidationOptions, requestCertificateRequest.domainValidationOptions) &&
        Objects.equals(this.options, requestCertificateRequest.options) &&
        Objects.equals(this.certificateAuthorityArn, requestCertificateRequest.certificateAuthorityArn) &&
        Objects.equals(this.tags, requestCertificateRequest.tags) &&
        Objects.equals(this.keyAlgorithm, requestCertificateRequest.keyAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, validationMethod, subjectAlternativeNames, idempotencyToken, domainValidationOptions, options, certificateAuthorityArn, tags, keyAlgorithm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestCertificateRequest {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    validationMethod: ").append(toIndentedString(validationMethod)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("    domainValidationOptions: ").append(toIndentedString(domainValidationOptions)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    certificateAuthorityArn: ").append(toIndentedString(certificateAuthorityArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("ValidationMethod");
    openapiFields.add("SubjectAlternativeNames");
    openapiFields.add("IdempotencyToken");
    openapiFields.add("DomainValidationOptions");
    openapiFields.add("Options");
    openapiFields.add("CertificateAuthorityArn");
    openapiFields.add("Tags");
    openapiFields.add("KeyAlgorithm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestCertificateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestCertificateRequest is not found in the empty JSON string", RequestCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestCertificateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the optional field `ValidationMethod`
      if (jsonObj.get("ValidationMethod") != null && !jsonObj.get("ValidationMethod").isJsonNull()) {
        ValidationMethod.validateJsonElement(jsonObj.get("ValidationMethod"));
      }
      // validate the optional field `SubjectAlternativeNames`
      if (jsonObj.get("SubjectAlternativeNames") != null && !jsonObj.get("SubjectAlternativeNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubjectAlternativeNames"));
      }
      // validate the optional field `IdempotencyToken`
      if (jsonObj.get("IdempotencyToken") != null && !jsonObj.get("IdempotencyToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdempotencyToken"));
      }
      // validate the optional field `DomainValidationOptions`
      if (jsonObj.get("DomainValidationOptions") != null && !jsonObj.get("DomainValidationOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DomainValidationOptions"));
      }
      // validate the optional field `Options`
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        RequestCertificateRequestOptions.validateJsonElement(jsonObj.get("Options"));
      }
      // validate the optional field `CertificateAuthorityArn`
      if (jsonObj.get("CertificateAuthorityArn") != null && !jsonObj.get("CertificateAuthorityArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateAuthorityArn"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `KeyAlgorithm`
      if (jsonObj.get("KeyAlgorithm") != null && !jsonObj.get("KeyAlgorithm").isJsonNull()) {
        KeyAlgorithm.validateJsonElement(jsonObj.get("KeyAlgorithm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestCertificateRequest>() {
           @Override
           public void write(JsonWriter out, RequestCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestCertificateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestCertificateRequest
   * @throws IOException if the JSON string is invalid with respect to RequestCertificateRequest
   */
  public static RequestCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestCertificateRequest.class);
  }

  /**
   * Convert an instance of RequestCertificateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

