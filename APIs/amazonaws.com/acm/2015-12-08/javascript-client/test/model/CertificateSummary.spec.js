/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCertificateManager);
  }
}(this, function(expect, AwsCertificateManager) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCertificateManager.CertificateSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CertificateSummary', function() {
    it('should create an instance of CertificateSummary', function() {
      // uncomment below and update the code to test CertificateSummary
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be.a(AwsCertificateManager.CertificateSummary);
    });

    it('should have the property certificateArn (base name: "CertificateArn")', function() {
      // uncomment below and update the code to test the property certificateArn
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "DomainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property subjectAlternativeNameSummaries (base name: "SubjectAlternativeNameSummaries")', function() {
      // uncomment below and update the code to test the property subjectAlternativeNameSummaries
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property hasAdditionalSubjectAlternativeNames (base name: "HasAdditionalSubjectAlternativeNames")', function() {
      // uncomment below and update the code to test the property hasAdditionalSubjectAlternativeNames
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property keyAlgorithm (base name: "KeyAlgorithm")', function() {
      // uncomment below and update the code to test the property keyAlgorithm
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property keyUsages (base name: "KeyUsages")', function() {
      // uncomment below and update the code to test the property keyUsages
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property extendedKeyUsages (base name: "ExtendedKeyUsages")', function() {
      // uncomment below and update the code to test the property extendedKeyUsages
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property inUse (base name: "InUse")', function() {
      // uncomment below and update the code to test the property inUse
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property exported (base name: "Exported")', function() {
      // uncomment below and update the code to test the property exported
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property renewalEligibility (base name: "RenewalEligibility")', function() {
      // uncomment below and update the code to test the property renewalEligibility
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property notBefore (base name: "NotBefore")', function() {
      // uncomment below and update the code to test the property notBefore
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property notAfter (base name: "NotAfter")', function() {
      // uncomment below and update the code to test the property notAfter
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "CreatedAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property issuedAt (base name: "IssuedAt")', function() {
      // uncomment below and update the code to test the property issuedAt
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property importedAt (base name: "ImportedAt")', function() {
      // uncomment below and update the code to test the property importedAt
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

    it('should have the property revokedAt (base name: "RevokedAt")', function() {
      // uncomment below and update the code to test the property revokedAt
      //var instance = new AwsCertificateManager.CertificateSummary();
      //expect(instance).to.be();
    });

  });

}));
