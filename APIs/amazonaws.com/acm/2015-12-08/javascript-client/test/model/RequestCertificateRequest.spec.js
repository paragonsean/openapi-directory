/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCertificateManager);
  }
}(this, function(expect, AwsCertificateManager) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCertificateManager.RequestCertificateRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RequestCertificateRequest', function() {
    it('should create an instance of RequestCertificateRequest', function() {
      // uncomment below and update the code to test RequestCertificateRequest
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be.a(AwsCertificateManager.RequestCertificateRequest);
    });

    it('should have the property domainName (base name: "DomainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property validationMethod (base name: "ValidationMethod")', function() {
      // uncomment below and update the code to test the property validationMethod
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property subjectAlternativeNames (base name: "SubjectAlternativeNames")', function() {
      // uncomment below and update the code to test the property subjectAlternativeNames
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property idempotencyToken (base name: "IdempotencyToken")', function() {
      // uncomment below and update the code to test the property idempotencyToken
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property domainValidationOptions (base name: "DomainValidationOptions")', function() {
      // uncomment below and update the code to test the property domainValidationOptions
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "Options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property certificateAuthorityArn (base name: "CertificateAuthorityArn")', function() {
      // uncomment below and update the code to test the property certificateAuthorityArn
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

    it('should have the property keyAlgorithm (base name: "KeyAlgorithm")', function() {
      // uncomment below and update the code to test the property keyAlgorithm
      //var instance = new AwsCertificateManager.RequestCertificateRequest();
      //expect(instance).to.be();
    });

  });

}));
