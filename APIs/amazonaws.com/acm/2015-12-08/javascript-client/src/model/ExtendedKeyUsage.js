/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedKeyUsageName from './ExtendedKeyUsageName';

/**
 * The ExtendedKeyUsage model module.
 * @module model/ExtendedKeyUsage
 * @version 2015-12-08
 */
class ExtendedKeyUsage {
    /**
     * Constructs a new <code>ExtendedKeyUsage</code>.
     * The Extended Key Usage X.509 v3 extension defines one or more purposes for which the public key can be used. This is in addition to or in place of the basic purposes specified by the Key Usage extension. 
     * @alias module:model/ExtendedKeyUsage
     */
    constructor() { 
        
        ExtendedKeyUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtendedKeyUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedKeyUsage} obj Optional instance to populate.
     * @return {module:model/ExtendedKeyUsage} The populated <code>ExtendedKeyUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedKeyUsage();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], ExtendedKeyUsageName);
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedKeyUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedKeyUsage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          ExtendedKeyUsageName.validateJSON(data['Name']);
        }
        // validate the optional field `OID`
        if (data['OID']) { // data not null
          String.validateJSON(data['OID']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExtendedKeyUsageName} Name
 */
ExtendedKeyUsage.prototype['Name'] = undefined;

/**
 * @member {String} OID
 */
ExtendedKeyUsage.prototype['OID'] = undefined;






export default ExtendedKeyUsage;

