/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateTransparencyLoggingPreference from './CertificateTransparencyLoggingPreference';

/**
 * The CertificateOptions model module.
 * @module model/CertificateOptions
 * @version 2015-12-08
 */
class CertificateOptions {
    /**
     * Constructs a new <code>CertificateOptions</code>.
     * Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency\&quot;&gt;Certificate Transparency Logging&lt;/a&gt;. 
     * @alias module:model/CertificateOptions
     */
    constructor() { 
        
        CertificateOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateOptions} obj Optional instance to populate.
     * @return {module:model/CertificateOptions} The populated <code>CertificateOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateOptions();

            if (data.hasOwnProperty('CertificateTransparencyLoggingPreference')) {
                obj['CertificateTransparencyLoggingPreference'] = ApiClient.convertToType(data['CertificateTransparencyLoggingPreference'], CertificateTransparencyLoggingPreference);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CertificateTransparencyLoggingPreference`
        if (data['CertificateTransparencyLoggingPreference']) { // data not null
          CertificateTransparencyLoggingPreference.validateJSON(data['CertificateTransparencyLoggingPreference']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateTransparencyLoggingPreference} CertificateTransparencyLoggingPreference
 */
CertificateOptions.prototype['CertificateTransparencyLoggingPreference'] = undefined;






export default CertificateOptions;

