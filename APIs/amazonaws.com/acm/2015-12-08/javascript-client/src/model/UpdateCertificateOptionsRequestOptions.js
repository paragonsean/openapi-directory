/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateOptions from './CertificateOptions';
import CertificateTransparencyLoggingPreference from './CertificateTransparencyLoggingPreference';

/**
 * The UpdateCertificateOptionsRequestOptions model module.
 * @module model/UpdateCertificateOptionsRequestOptions
 * @version 2015-12-08
 */
class UpdateCertificateOptionsRequestOptions {
    /**
     * Constructs a new <code>UpdateCertificateOptionsRequestOptions</code>.
     * @alias module:model/UpdateCertificateOptionsRequestOptions
     * @implements module:model/CertificateOptions
     */
    constructor() { 
        CertificateOptions.initialize(this);
        UpdateCertificateOptionsRequestOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateCertificateOptionsRequestOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateCertificateOptionsRequestOptions} obj Optional instance to populate.
     * @return {module:model/UpdateCertificateOptionsRequestOptions} The populated <code>UpdateCertificateOptionsRequestOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateCertificateOptionsRequestOptions();
            CertificateOptions.constructFromObject(data, obj);

            if (data.hasOwnProperty('CertificateTransparencyLoggingPreference')) {
                obj['CertificateTransparencyLoggingPreference'] = ApiClient.convertToType(data['CertificateTransparencyLoggingPreference'], CertificateTransparencyLoggingPreference);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateCertificateOptionsRequestOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateCertificateOptionsRequestOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CertificateTransparencyLoggingPreference`
        if (data['CertificateTransparencyLoggingPreference']) { // data not null
          CertificateTransparencyLoggingPreference.validateJSON(data['CertificateTransparencyLoggingPreference']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateTransparencyLoggingPreference} CertificateTransparencyLoggingPreference
 */
UpdateCertificateOptionsRequestOptions.prototype['CertificateTransparencyLoggingPreference'] = undefined;


// Implement CertificateOptions interface:
/**
 * @member {module:model/CertificateTransparencyLoggingPreference} CertificateTransparencyLoggingPreference
 */
CertificateOptions.prototype['CertificateTransparencyLoggingPreference'] = undefined;




export default UpdateCertificateOptionsRequestOptions;

