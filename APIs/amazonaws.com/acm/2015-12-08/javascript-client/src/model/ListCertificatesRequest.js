/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListCertificatesRequestIncludes from './ListCertificatesRequestIncludes';
import SortBy from './SortBy';
import SortOrder from './SortOrder';

/**
 * The ListCertificatesRequest model module.
 * @module model/ListCertificatesRequest
 * @version 2015-12-08
 */
class ListCertificatesRequest {
    /**
     * Constructs a new <code>ListCertificatesRequest</code>.
     * @alias module:model/ListCertificatesRequest
     */
    constructor() { 
        
        ListCertificatesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListCertificatesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListCertificatesRequest} obj Optional instance to populate.
     * @return {module:model/ListCertificatesRequest} The populated <code>ListCertificatesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListCertificatesRequest();

            if (data.hasOwnProperty('CertificateStatuses')) {
                obj['CertificateStatuses'] = ApiClient.convertToType(data['CertificateStatuses'], Array);
            }
            if (data.hasOwnProperty('Includes')) {
                obj['Includes'] = ListCertificatesRequestIncludes.constructFromObject(data['Includes']);
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('MaxItems')) {
                obj['MaxItems'] = ApiClient.convertToType(data['MaxItems'], 'Number');
            }
            if (data.hasOwnProperty('SortBy')) {
                obj['SortBy'] = ApiClient.convertToType(data['SortBy'], SortBy);
            }
            if (data.hasOwnProperty('SortOrder')) {
                obj['SortOrder'] = ApiClient.convertToType(data['SortOrder'], SortOrder);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListCertificatesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListCertificatesRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CertificateStatuses`
        if (data['CertificateStatuses']) { // data not null
          Array.validateJSON(data['CertificateStatuses']);
        }
        // validate the optional field `Includes`
        if (data['Includes']) { // data not null
          ListCertificatesRequestIncludes.validateJSON(data['Includes']);
        }
        // validate the optional field `NextToken`
        if (data['NextToken']) { // data not null
          String.validateJSON(data['NextToken']);
        }
        // validate the optional field `MaxItems`
        if (data['MaxItems']) { // data not null
          Number.validateJSON(data['MaxItems']);
        }
        // validate the optional field `SortBy`
        if (data['SortBy']) { // data not null
          SortBy.validateJSON(data['SortBy']);
        }
        // validate the optional field `SortOrder`
        if (data['SortOrder']) { // data not null
          SortOrder.validateJSON(data['SortOrder']);
        }

        return true;
    }


}



/**
 * @member {Array} CertificateStatuses
 */
ListCertificatesRequest.prototype['CertificateStatuses'] = undefined;

/**
 * @member {module:model/ListCertificatesRequestIncludes} Includes
 */
ListCertificatesRequest.prototype['Includes'] = undefined;

/**
 * @member {String} NextToken
 */
ListCertificatesRequest.prototype['NextToken'] = undefined;

/**
 * @member {Number} MaxItems
 */
ListCertificatesRequest.prototype['MaxItems'] = undefined;

/**
 * @member {module:model/SortBy} SortBy
 */
ListCertificatesRequest.prototype['SortBy'] = undefined;

/**
 * @member {module:model/SortOrder} SortOrder
 */
ListCertificatesRequest.prototype['SortOrder'] = undefined;






export default ListCertificatesRequest;

