/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateStatus from './CertificateStatus';
import CertificateType from './CertificateType';
import KeyAlgorithm from './KeyAlgorithm';
import RenewalEligibility from './RenewalEligibility';

/**
 * The CertificateSummary model module.
 * @module model/CertificateSummary
 * @version 2015-12-08
 */
class CertificateSummary {
    /**
     * Constructs a new <code>CertificateSummary</code>.
     * This structure is returned in the response object of &lt;a&gt;ListCertificates&lt;/a&gt; action. 
     * @alias module:model/CertificateSummary
     */
    constructor() { 
        
        CertificateSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateSummary} obj Optional instance to populate.
     * @return {module:model/CertificateSummary} The populated <code>CertificateSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateSummary();

            if (data.hasOwnProperty('CertificateArn')) {
                obj['CertificateArn'] = ApiClient.convertToType(data['CertificateArn'], 'String');
            }
            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('SubjectAlternativeNameSummaries')) {
                obj['SubjectAlternativeNameSummaries'] = ApiClient.convertToType(data['SubjectAlternativeNameSummaries'], Array);
            }
            if (data.hasOwnProperty('HasAdditionalSubjectAlternativeNames')) {
                obj['HasAdditionalSubjectAlternativeNames'] = ApiClient.convertToType(data['HasAdditionalSubjectAlternativeNames'], 'Boolean');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], CertificateStatus);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], CertificateType);
            }
            if (data.hasOwnProperty('KeyAlgorithm')) {
                obj['KeyAlgorithm'] = ApiClient.convertToType(data['KeyAlgorithm'], KeyAlgorithm);
            }
            if (data.hasOwnProperty('KeyUsages')) {
                obj['KeyUsages'] = ApiClient.convertToType(data['KeyUsages'], Array);
            }
            if (data.hasOwnProperty('ExtendedKeyUsages')) {
                obj['ExtendedKeyUsages'] = ApiClient.convertToType(data['ExtendedKeyUsages'], Array);
            }
            if (data.hasOwnProperty('InUse')) {
                obj['InUse'] = ApiClient.convertToType(data['InUse'], 'Boolean');
            }
            if (data.hasOwnProperty('Exported')) {
                obj['Exported'] = ApiClient.convertToType(data['Exported'], 'Boolean');
            }
            if (data.hasOwnProperty('RenewalEligibility')) {
                obj['RenewalEligibility'] = ApiClient.convertToType(data['RenewalEligibility'], RenewalEligibility);
            }
            if (data.hasOwnProperty('NotBefore')) {
                obj['NotBefore'] = ApiClient.convertToType(data['NotBefore'], 'Date');
            }
            if (data.hasOwnProperty('NotAfter')) {
                obj['NotAfter'] = ApiClient.convertToType(data['NotAfter'], 'Date');
            }
            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('IssuedAt')) {
                obj['IssuedAt'] = ApiClient.convertToType(data['IssuedAt'], 'Date');
            }
            if (data.hasOwnProperty('ImportedAt')) {
                obj['ImportedAt'] = ApiClient.convertToType(data['ImportedAt'], 'Date');
            }
            if (data.hasOwnProperty('RevokedAt')) {
                obj['RevokedAt'] = ApiClient.convertToType(data['RevokedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CertificateArn`
        if (data['CertificateArn']) { // data not null
          String.validateJSON(data['CertificateArn']);
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `SubjectAlternativeNameSummaries`
        if (data['SubjectAlternativeNameSummaries']) { // data not null
          Array.validateJSON(data['SubjectAlternativeNameSummaries']);
        }
        // validate the optional field `HasAdditionalSubjectAlternativeNames`
        if (data['HasAdditionalSubjectAlternativeNames']) { // data not null
          Boolean.validateJSON(data['HasAdditionalSubjectAlternativeNames']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          CertificateStatus.validateJSON(data['Status']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          CertificateType.validateJSON(data['Type']);
        }
        // validate the optional field `KeyAlgorithm`
        if (data['KeyAlgorithm']) { // data not null
          KeyAlgorithm.validateJSON(data['KeyAlgorithm']);
        }
        // validate the optional field `KeyUsages`
        if (data['KeyUsages']) { // data not null
          Array.validateJSON(data['KeyUsages']);
        }
        // validate the optional field `ExtendedKeyUsages`
        if (data['ExtendedKeyUsages']) { // data not null
          Array.validateJSON(data['ExtendedKeyUsages']);
        }
        // validate the optional field `InUse`
        if (data['InUse']) { // data not null
          Boolean.validateJSON(data['InUse']);
        }
        // validate the optional field `Exported`
        if (data['Exported']) { // data not null
          Boolean.validateJSON(data['Exported']);
        }
        // validate the optional field `RenewalEligibility`
        if (data['RenewalEligibility']) { // data not null
          RenewalEligibility.validateJSON(data['RenewalEligibility']);
        }
        // validate the optional field `NotBefore`
        if (data['NotBefore']) { // data not null
          Date.validateJSON(data['NotBefore']);
        }
        // validate the optional field `NotAfter`
        if (data['NotAfter']) { // data not null
          Date.validateJSON(data['NotAfter']);
        }
        // validate the optional field `CreatedAt`
        if (data['CreatedAt']) { // data not null
          Date.validateJSON(data['CreatedAt']);
        }
        // validate the optional field `IssuedAt`
        if (data['IssuedAt']) { // data not null
          Date.validateJSON(data['IssuedAt']);
        }
        // validate the optional field `ImportedAt`
        if (data['ImportedAt']) { // data not null
          Date.validateJSON(data['ImportedAt']);
        }
        // validate the optional field `RevokedAt`
        if (data['RevokedAt']) { // data not null
          Date.validateJSON(data['RevokedAt']);
        }

        return true;
    }


}



/**
 * @member {String} CertificateArn
 */
CertificateSummary.prototype['CertificateArn'] = undefined;

/**
 * @member {String} DomainName
 */
CertificateSummary.prototype['DomainName'] = undefined;

/**
 * @member {Array} SubjectAlternativeNameSummaries
 */
CertificateSummary.prototype['SubjectAlternativeNameSummaries'] = undefined;

/**
 * @member {Boolean} HasAdditionalSubjectAlternativeNames
 */
CertificateSummary.prototype['HasAdditionalSubjectAlternativeNames'] = undefined;

/**
 * @member {module:model/CertificateStatus} Status
 */
CertificateSummary.prototype['Status'] = undefined;

/**
 * @member {module:model/CertificateType} Type
 */
CertificateSummary.prototype['Type'] = undefined;

/**
 * @member {module:model/KeyAlgorithm} KeyAlgorithm
 */
CertificateSummary.prototype['KeyAlgorithm'] = undefined;

/**
 * @member {Array} KeyUsages
 */
CertificateSummary.prototype['KeyUsages'] = undefined;

/**
 * @member {Array} ExtendedKeyUsages
 */
CertificateSummary.prototype['ExtendedKeyUsages'] = undefined;

/**
 * @member {Boolean} InUse
 */
CertificateSummary.prototype['InUse'] = undefined;

/**
 * @member {Boolean} Exported
 */
CertificateSummary.prototype['Exported'] = undefined;

/**
 * @member {module:model/RenewalEligibility} RenewalEligibility
 */
CertificateSummary.prototype['RenewalEligibility'] = undefined;

/**
 * @member {Date} NotBefore
 */
CertificateSummary.prototype['NotBefore'] = undefined;

/**
 * @member {Date} NotAfter
 */
CertificateSummary.prototype['NotAfter'] = undefined;

/**
 * @member {Date} CreatedAt
 */
CertificateSummary.prototype['CreatedAt'] = undefined;

/**
 * @member {Date} IssuedAt
 */
CertificateSummary.prototype['IssuedAt'] = undefined;

/**
 * @member {Date} ImportedAt
 */
CertificateSummary.prototype['ImportedAt'] = undefined;

/**
 * @member {Date} RevokedAt
 */
CertificateSummary.prototype['RevokedAt'] = undefined;






export default CertificateSummary;

