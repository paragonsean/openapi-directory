/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateDetail from './CertificateDetail';
import CertificateDetailOptions from './CertificateDetailOptions';
import CertificateDetailRenewalSummary from './CertificateDetailRenewalSummary';
import CertificateStatus from './CertificateStatus';
import CertificateType from './CertificateType';
import FailureReason from './FailureReason';
import KeyAlgorithm from './KeyAlgorithm';
import RenewalEligibility from './RenewalEligibility';
import RevocationReason from './RevocationReason';

/**
 * The DescribeCertificateResponseCertificate model module.
 * @module model/DescribeCertificateResponseCertificate
 * @version 2015-12-08
 */
class DescribeCertificateResponseCertificate {
    /**
     * Constructs a new <code>DescribeCertificateResponseCertificate</code>.
     * @alias module:model/DescribeCertificateResponseCertificate
     * @implements module:model/CertificateDetail
     */
    constructor() { 
        CertificateDetail.initialize(this);
        DescribeCertificateResponseCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeCertificateResponseCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeCertificateResponseCertificate} obj Optional instance to populate.
     * @return {module:model/DescribeCertificateResponseCertificate} The populated <code>DescribeCertificateResponseCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeCertificateResponseCertificate();
            CertificateDetail.constructFromObject(data, obj);

            if (data.hasOwnProperty('CertificateArn')) {
                obj['CertificateArn'] = ApiClient.convertToType(data['CertificateArn'], 'String');
            }
            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('SubjectAlternativeNames')) {
                obj['SubjectAlternativeNames'] = ApiClient.convertToType(data['SubjectAlternativeNames'], Array);
            }
            if (data.hasOwnProperty('DomainValidationOptions')) {
                obj['DomainValidationOptions'] = ApiClient.convertToType(data['DomainValidationOptions'], Array);
            }
            if (data.hasOwnProperty('Serial')) {
                obj['Serial'] = ApiClient.convertToType(data['Serial'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('Issuer')) {
                obj['Issuer'] = ApiClient.convertToType(data['Issuer'], 'String');
            }
            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('IssuedAt')) {
                obj['IssuedAt'] = ApiClient.convertToType(data['IssuedAt'], 'Date');
            }
            if (data.hasOwnProperty('ImportedAt')) {
                obj['ImportedAt'] = ApiClient.convertToType(data['ImportedAt'], 'Date');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], CertificateStatus);
            }
            if (data.hasOwnProperty('RevokedAt')) {
                obj['RevokedAt'] = ApiClient.convertToType(data['RevokedAt'], 'Date');
            }
            if (data.hasOwnProperty('RevocationReason')) {
                obj['RevocationReason'] = ApiClient.convertToType(data['RevocationReason'], RevocationReason);
            }
            if (data.hasOwnProperty('NotBefore')) {
                obj['NotBefore'] = ApiClient.convertToType(data['NotBefore'], 'Date');
            }
            if (data.hasOwnProperty('NotAfter')) {
                obj['NotAfter'] = ApiClient.convertToType(data['NotAfter'], 'Date');
            }
            if (data.hasOwnProperty('KeyAlgorithm')) {
                obj['KeyAlgorithm'] = ApiClient.convertToType(data['KeyAlgorithm'], KeyAlgorithm);
            }
            if (data.hasOwnProperty('SignatureAlgorithm')) {
                obj['SignatureAlgorithm'] = ApiClient.convertToType(data['SignatureAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('InUseBy')) {
                obj['InUseBy'] = ApiClient.convertToType(data['InUseBy'], Array);
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = ApiClient.convertToType(data['FailureReason'], FailureReason);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], CertificateType);
            }
            if (data.hasOwnProperty('RenewalSummary')) {
                obj['RenewalSummary'] = CertificateDetailRenewalSummary.constructFromObject(data['RenewalSummary']);
            }
            if (data.hasOwnProperty('KeyUsages')) {
                obj['KeyUsages'] = ApiClient.convertToType(data['KeyUsages'], Array);
            }
            if (data.hasOwnProperty('ExtendedKeyUsages')) {
                obj['ExtendedKeyUsages'] = ApiClient.convertToType(data['ExtendedKeyUsages'], Array);
            }
            if (data.hasOwnProperty('CertificateAuthorityArn')) {
                obj['CertificateAuthorityArn'] = ApiClient.convertToType(data['CertificateAuthorityArn'], 'String');
            }
            if (data.hasOwnProperty('RenewalEligibility')) {
                obj['RenewalEligibility'] = ApiClient.convertToType(data['RenewalEligibility'], RenewalEligibility);
            }
            if (data.hasOwnProperty('Options')) {
                obj['Options'] = CertificateDetailOptions.constructFromObject(data['Options']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeCertificateResponseCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeCertificateResponseCertificate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CertificateArn`
        if (data['CertificateArn']) { // data not null
          String.validateJSON(data['CertificateArn']);
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `SubjectAlternativeNames`
        if (data['SubjectAlternativeNames']) { // data not null
          Array.validateJSON(data['SubjectAlternativeNames']);
        }
        // validate the optional field `DomainValidationOptions`
        if (data['DomainValidationOptions']) { // data not null
          Array.validateJSON(data['DomainValidationOptions']);
        }
        // validate the optional field `Serial`
        if (data['Serial']) { // data not null
          String.validateJSON(data['Serial']);
        }
        // validate the optional field `Subject`
        if (data['Subject']) { // data not null
          String.validateJSON(data['Subject']);
        }
        // validate the optional field `Issuer`
        if (data['Issuer']) { // data not null
          String.validateJSON(data['Issuer']);
        }
        // validate the optional field `CreatedAt`
        if (data['CreatedAt']) { // data not null
          Date.validateJSON(data['CreatedAt']);
        }
        // validate the optional field `IssuedAt`
        if (data['IssuedAt']) { // data not null
          Date.validateJSON(data['IssuedAt']);
        }
        // validate the optional field `ImportedAt`
        if (data['ImportedAt']) { // data not null
          Date.validateJSON(data['ImportedAt']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          CertificateStatus.validateJSON(data['Status']);
        }
        // validate the optional field `RevokedAt`
        if (data['RevokedAt']) { // data not null
          Date.validateJSON(data['RevokedAt']);
        }
        // validate the optional field `RevocationReason`
        if (data['RevocationReason']) { // data not null
          RevocationReason.validateJSON(data['RevocationReason']);
        }
        // validate the optional field `NotBefore`
        if (data['NotBefore']) { // data not null
          Date.validateJSON(data['NotBefore']);
        }
        // validate the optional field `NotAfter`
        if (data['NotAfter']) { // data not null
          Date.validateJSON(data['NotAfter']);
        }
        // validate the optional field `KeyAlgorithm`
        if (data['KeyAlgorithm']) { // data not null
          KeyAlgorithm.validateJSON(data['KeyAlgorithm']);
        }
        // validate the optional field `SignatureAlgorithm`
        if (data['SignatureAlgorithm']) { // data not null
          String.validateJSON(data['SignatureAlgorithm']);
        }
        // validate the optional field `InUseBy`
        if (data['InUseBy']) { // data not null
          Array.validateJSON(data['InUseBy']);
        }
        // validate the optional field `FailureReason`
        if (data['FailureReason']) { // data not null
          FailureReason.validateJSON(data['FailureReason']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          CertificateType.validateJSON(data['Type']);
        }
        // validate the optional field `RenewalSummary`
        if (data['RenewalSummary']) { // data not null
          CertificateDetailRenewalSummary.validateJSON(data['RenewalSummary']);
        }
        // validate the optional field `KeyUsages`
        if (data['KeyUsages']) { // data not null
          Array.validateJSON(data['KeyUsages']);
        }
        // validate the optional field `ExtendedKeyUsages`
        if (data['ExtendedKeyUsages']) { // data not null
          Array.validateJSON(data['ExtendedKeyUsages']);
        }
        // validate the optional field `CertificateAuthorityArn`
        if (data['CertificateAuthorityArn']) { // data not null
          String.validateJSON(data['CertificateAuthorityArn']);
        }
        // validate the optional field `RenewalEligibility`
        if (data['RenewalEligibility']) { // data not null
          RenewalEligibility.validateJSON(data['RenewalEligibility']);
        }
        // validate the optional field `Options`
        if (data['Options']) { // data not null
          CertificateDetailOptions.validateJSON(data['Options']);
        }

        return true;
    }


}



/**
 * @member {String} CertificateArn
 */
DescribeCertificateResponseCertificate.prototype['CertificateArn'] = undefined;

/**
 * @member {String} DomainName
 */
DescribeCertificateResponseCertificate.prototype['DomainName'] = undefined;

/**
 * @member {Array} SubjectAlternativeNames
 */
DescribeCertificateResponseCertificate.prototype['SubjectAlternativeNames'] = undefined;

/**
 * @member {Array} DomainValidationOptions
 */
DescribeCertificateResponseCertificate.prototype['DomainValidationOptions'] = undefined;

/**
 * @member {String} Serial
 */
DescribeCertificateResponseCertificate.prototype['Serial'] = undefined;

/**
 * @member {String} Subject
 */
DescribeCertificateResponseCertificate.prototype['Subject'] = undefined;

/**
 * @member {String} Issuer
 */
DescribeCertificateResponseCertificate.prototype['Issuer'] = undefined;

/**
 * @member {Date} CreatedAt
 */
DescribeCertificateResponseCertificate.prototype['CreatedAt'] = undefined;

/**
 * @member {Date} IssuedAt
 */
DescribeCertificateResponseCertificate.prototype['IssuedAt'] = undefined;

/**
 * @member {Date} ImportedAt
 */
DescribeCertificateResponseCertificate.prototype['ImportedAt'] = undefined;

/**
 * @member {module:model/CertificateStatus} Status
 */
DescribeCertificateResponseCertificate.prototype['Status'] = undefined;

/**
 * @member {Date} RevokedAt
 */
DescribeCertificateResponseCertificate.prototype['RevokedAt'] = undefined;

/**
 * @member {module:model/RevocationReason} RevocationReason
 */
DescribeCertificateResponseCertificate.prototype['RevocationReason'] = undefined;

/**
 * @member {Date} NotBefore
 */
DescribeCertificateResponseCertificate.prototype['NotBefore'] = undefined;

/**
 * @member {Date} NotAfter
 */
DescribeCertificateResponseCertificate.prototype['NotAfter'] = undefined;

/**
 * @member {module:model/KeyAlgorithm} KeyAlgorithm
 */
DescribeCertificateResponseCertificate.prototype['KeyAlgorithm'] = undefined;

/**
 * @member {String} SignatureAlgorithm
 */
DescribeCertificateResponseCertificate.prototype['SignatureAlgorithm'] = undefined;

/**
 * @member {Array} InUseBy
 */
DescribeCertificateResponseCertificate.prototype['InUseBy'] = undefined;

/**
 * @member {module:model/FailureReason} FailureReason
 */
DescribeCertificateResponseCertificate.prototype['FailureReason'] = undefined;

/**
 * @member {module:model/CertificateType} Type
 */
DescribeCertificateResponseCertificate.prototype['Type'] = undefined;

/**
 * @member {module:model/CertificateDetailRenewalSummary} RenewalSummary
 */
DescribeCertificateResponseCertificate.prototype['RenewalSummary'] = undefined;

/**
 * @member {Array} KeyUsages
 */
DescribeCertificateResponseCertificate.prototype['KeyUsages'] = undefined;

/**
 * @member {Array} ExtendedKeyUsages
 */
DescribeCertificateResponseCertificate.prototype['ExtendedKeyUsages'] = undefined;

/**
 * @member {String} CertificateAuthorityArn
 */
DescribeCertificateResponseCertificate.prototype['CertificateAuthorityArn'] = undefined;

/**
 * @member {module:model/RenewalEligibility} RenewalEligibility
 */
DescribeCertificateResponseCertificate.prototype['RenewalEligibility'] = undefined;

/**
 * @member {module:model/CertificateDetailOptions} Options
 */
DescribeCertificateResponseCertificate.prototype['Options'] = undefined;


// Implement CertificateDetail interface:
/**
 * @member {String} CertificateArn
 */
CertificateDetail.prototype['CertificateArn'] = undefined;
/**
 * @member {String} DomainName
 */
CertificateDetail.prototype['DomainName'] = undefined;
/**
 * @member {Array} SubjectAlternativeNames
 */
CertificateDetail.prototype['SubjectAlternativeNames'] = undefined;
/**
 * @member {Array} DomainValidationOptions
 */
CertificateDetail.prototype['DomainValidationOptions'] = undefined;
/**
 * @member {String} Serial
 */
CertificateDetail.prototype['Serial'] = undefined;
/**
 * @member {String} Subject
 */
CertificateDetail.prototype['Subject'] = undefined;
/**
 * @member {String} Issuer
 */
CertificateDetail.prototype['Issuer'] = undefined;
/**
 * @member {Date} CreatedAt
 */
CertificateDetail.prototype['CreatedAt'] = undefined;
/**
 * @member {Date} IssuedAt
 */
CertificateDetail.prototype['IssuedAt'] = undefined;
/**
 * @member {Date} ImportedAt
 */
CertificateDetail.prototype['ImportedAt'] = undefined;
/**
 * @member {module:model/CertificateStatus} Status
 */
CertificateDetail.prototype['Status'] = undefined;
/**
 * @member {Date} RevokedAt
 */
CertificateDetail.prototype['RevokedAt'] = undefined;
/**
 * @member {module:model/RevocationReason} RevocationReason
 */
CertificateDetail.prototype['RevocationReason'] = undefined;
/**
 * @member {Date} NotBefore
 */
CertificateDetail.prototype['NotBefore'] = undefined;
/**
 * @member {Date} NotAfter
 */
CertificateDetail.prototype['NotAfter'] = undefined;
/**
 * @member {module:model/KeyAlgorithm} KeyAlgorithm
 */
CertificateDetail.prototype['KeyAlgorithm'] = undefined;
/**
 * @member {String} SignatureAlgorithm
 */
CertificateDetail.prototype['SignatureAlgorithm'] = undefined;
/**
 * @member {Array} InUseBy
 */
CertificateDetail.prototype['InUseBy'] = undefined;
/**
 * @member {module:model/FailureReason} FailureReason
 */
CertificateDetail.prototype['FailureReason'] = undefined;
/**
 * @member {module:model/CertificateType} Type
 */
CertificateDetail.prototype['Type'] = undefined;
/**
 * @member {module:model/CertificateDetailRenewalSummary} RenewalSummary
 */
CertificateDetail.prototype['RenewalSummary'] = undefined;
/**
 * @member {Array} KeyUsages
 */
CertificateDetail.prototype['KeyUsages'] = undefined;
/**
 * @member {Array} ExtendedKeyUsages
 */
CertificateDetail.prototype['ExtendedKeyUsages'] = undefined;
/**
 * @member {String} CertificateAuthorityArn
 */
CertificateDetail.prototype['CertificateAuthorityArn'] = undefined;
/**
 * @member {module:model/RenewalEligibility} RenewalEligibility
 */
CertificateDetail.prototype['RenewalEligibility'] = undefined;
/**
 * @member {module:model/CertificateDetailOptions} Options
 */
CertificateDetail.prototype['Options'] = undefined;




export default DescribeCertificateResponseCertificate;

