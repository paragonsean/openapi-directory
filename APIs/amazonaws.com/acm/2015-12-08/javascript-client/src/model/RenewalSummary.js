/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FailureReason from './FailureReason';
import RenewalStatus from './RenewalStatus';

/**
 * The RenewalSummary model module.
 * @module model/RenewalSummary
 * @version 2015-12-08
 */
class RenewalSummary {
    /**
     * Constructs a new <code>RenewalSummary</code>.
     * Contains information about the status of ACM&#39;s &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\&quot;&gt;managed renewal&lt;/a&gt; for the certificate. This structure exists only when the certificate type is &lt;code&gt;AMAZON_ISSUED&lt;/code&gt;.
     * @alias module:model/RenewalSummary
     * @param renewalStatus {module:model/RenewalStatus} 
     * @param domainValidationOptions {Array} 
     * @param updatedAt {Date} 
     */
    constructor(renewalStatus, domainValidationOptions, updatedAt) { 
        
        RenewalSummary.initialize(this, renewalStatus, domainValidationOptions, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, renewalStatus, domainValidationOptions, updatedAt) { 
        obj['RenewalStatus'] = renewalStatus;
        obj['DomainValidationOptions'] = domainValidationOptions;
        obj['UpdatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>RenewalSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RenewalSummary} obj Optional instance to populate.
     * @return {module:model/RenewalSummary} The populated <code>RenewalSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RenewalSummary();

            if (data.hasOwnProperty('RenewalStatus')) {
                obj['RenewalStatus'] = ApiClient.convertToType(data['RenewalStatus'], RenewalStatus);
            }
            if (data.hasOwnProperty('DomainValidationOptions')) {
                obj['DomainValidationOptions'] = ApiClient.convertToType(data['DomainValidationOptions'], Array);
            }
            if (data.hasOwnProperty('RenewalStatusReason')) {
                obj['RenewalStatusReason'] = ApiClient.convertToType(data['RenewalStatusReason'], FailureReason);
            }
            if (data.hasOwnProperty('UpdatedAt')) {
                obj['UpdatedAt'] = ApiClient.convertToType(data['UpdatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RenewalSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RenewalSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RenewalSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `RenewalStatus`
        if (data['RenewalStatus']) { // data not null
          RenewalStatus.validateJSON(data['RenewalStatus']);
        }
        // validate the optional field `DomainValidationOptions`
        if (data['DomainValidationOptions']) { // data not null
          Array.validateJSON(data['DomainValidationOptions']);
        }
        // validate the optional field `RenewalStatusReason`
        if (data['RenewalStatusReason']) { // data not null
          FailureReason.validateJSON(data['RenewalStatusReason']);
        }
        // validate the optional field `UpdatedAt`
        if (data['UpdatedAt']) { // data not null
          Date.validateJSON(data['UpdatedAt']);
        }

        return true;
    }


}

RenewalSummary.RequiredProperties = ["RenewalStatus", "DomainValidationOptions", "UpdatedAt"];

/**
 * @member {module:model/RenewalStatus} RenewalStatus
 */
RenewalSummary.prototype['RenewalStatus'] = undefined;

/**
 * @member {Array} DomainValidationOptions
 */
RenewalSummary.prototype['DomainValidationOptions'] = undefined;

/**
 * @member {module:model/FailureReason} RenewalStatusReason
 */
RenewalSummary.prototype['RenewalStatusReason'] = undefined;

/**
 * @member {Date} UpdatedAt
 */
RenewalSummary.prototype['UpdatedAt'] = undefined;






export default RenewalSummary;

