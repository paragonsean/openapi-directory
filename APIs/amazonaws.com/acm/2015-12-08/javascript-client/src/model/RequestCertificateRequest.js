/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyAlgorithm from './KeyAlgorithm';
import RequestCertificateRequestOptions from './RequestCertificateRequestOptions';
import ValidationMethod from './ValidationMethod';

/**
 * The RequestCertificateRequest model module.
 * @module model/RequestCertificateRequest
 * @version 2015-12-08
 */
class RequestCertificateRequest {
    /**
     * Constructs a new <code>RequestCertificateRequest</code>.
     * @alias module:model/RequestCertificateRequest
     * @param domainName {String} 
     */
    constructor(domainName) { 
        
        RequestCertificateRequest.initialize(this, domainName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName) { 
        obj['DomainName'] = domainName;
    }

    /**
     * Constructs a <code>RequestCertificateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestCertificateRequest} obj Optional instance to populate.
     * @return {module:model/RequestCertificateRequest} The populated <code>RequestCertificateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestCertificateRequest();

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('ValidationMethod')) {
                obj['ValidationMethod'] = ApiClient.convertToType(data['ValidationMethod'], ValidationMethod);
            }
            if (data.hasOwnProperty('SubjectAlternativeNames')) {
                obj['SubjectAlternativeNames'] = ApiClient.convertToType(data['SubjectAlternativeNames'], Array);
            }
            if (data.hasOwnProperty('IdempotencyToken')) {
                obj['IdempotencyToken'] = ApiClient.convertToType(data['IdempotencyToken'], 'String');
            }
            if (data.hasOwnProperty('DomainValidationOptions')) {
                obj['DomainValidationOptions'] = ApiClient.convertToType(data['DomainValidationOptions'], Array);
            }
            if (data.hasOwnProperty('Options')) {
                obj['Options'] = RequestCertificateRequestOptions.constructFromObject(data['Options']);
            }
            if (data.hasOwnProperty('CertificateAuthorityArn')) {
                obj['CertificateAuthorityArn'] = ApiClient.convertToType(data['CertificateAuthorityArn'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('KeyAlgorithm')) {
                obj['KeyAlgorithm'] = ApiClient.convertToType(data['KeyAlgorithm'], KeyAlgorithm);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestCertificateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestCertificateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RequestCertificateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `ValidationMethod`
        if (data['ValidationMethod']) { // data not null
          ValidationMethod.validateJSON(data['ValidationMethod']);
        }
        // validate the optional field `SubjectAlternativeNames`
        if (data['SubjectAlternativeNames']) { // data not null
          Array.validateJSON(data['SubjectAlternativeNames']);
        }
        // validate the optional field `IdempotencyToken`
        if (data['IdempotencyToken']) { // data not null
          String.validateJSON(data['IdempotencyToken']);
        }
        // validate the optional field `DomainValidationOptions`
        if (data['DomainValidationOptions']) { // data not null
          Array.validateJSON(data['DomainValidationOptions']);
        }
        // validate the optional field `Options`
        if (data['Options']) { // data not null
          RequestCertificateRequestOptions.validateJSON(data['Options']);
        }
        // validate the optional field `CertificateAuthorityArn`
        if (data['CertificateAuthorityArn']) { // data not null
          String.validateJSON(data['CertificateAuthorityArn']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `KeyAlgorithm`
        if (data['KeyAlgorithm']) { // data not null
          KeyAlgorithm.validateJSON(data['KeyAlgorithm']);
        }

        return true;
    }


}

RequestCertificateRequest.RequiredProperties = ["DomainName"];

/**
 * @member {String} DomainName
 */
RequestCertificateRequest.prototype['DomainName'] = undefined;

/**
 * @member {module:model/ValidationMethod} ValidationMethod
 */
RequestCertificateRequest.prototype['ValidationMethod'] = undefined;

/**
 * @member {Array} SubjectAlternativeNames
 */
RequestCertificateRequest.prototype['SubjectAlternativeNames'] = undefined;

/**
 * @member {String} IdempotencyToken
 */
RequestCertificateRequest.prototype['IdempotencyToken'] = undefined;

/**
 * @member {Array} DomainValidationOptions
 */
RequestCertificateRequest.prototype['DomainValidationOptions'] = undefined;

/**
 * @member {module:model/RequestCertificateRequestOptions} Options
 */
RequestCertificateRequest.prototype['Options'] = undefined;

/**
 * @member {String} CertificateAuthorityArn
 */
RequestCertificateRequest.prototype['CertificateAuthorityArn'] = undefined;

/**
 * @member {Array} Tags
 */
RequestCertificateRequest.prototype['Tags'] = undefined;

/**
 * @member {module:model/KeyAlgorithm} KeyAlgorithm
 */
RequestCertificateRequest.prototype['KeyAlgorithm'] = undefined;






export default RequestCertificateRequest;

