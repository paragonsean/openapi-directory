/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainStatus from './DomainStatus';
import DomainValidationResourceRecord from './DomainValidationResourceRecord';
import ValidationMethod from './ValidationMethod';

/**
 * The DomainValidation model module.
 * @module model/DomainValidation
 * @version 2015-12-08
 */
class DomainValidation {
    /**
     * Constructs a new <code>DomainValidation</code>.
     * Contains information about the validation of each domain name in the certificate.
     * @alias module:model/DomainValidation
     * @param domainName {String} 
     */
    constructor(domainName) { 
        
        DomainValidation.initialize(this, domainName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName) { 
        obj['DomainName'] = domainName;
    }

    /**
     * Constructs a <code>DomainValidation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainValidation} obj Optional instance to populate.
     * @return {module:model/DomainValidation} The populated <code>DomainValidation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainValidation();

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('ValidationEmails')) {
                obj['ValidationEmails'] = ApiClient.convertToType(data['ValidationEmails'], Array);
            }
            if (data.hasOwnProperty('ValidationDomain')) {
                obj['ValidationDomain'] = ApiClient.convertToType(data['ValidationDomain'], 'String');
            }
            if (data.hasOwnProperty('ValidationStatus')) {
                obj['ValidationStatus'] = ApiClient.convertToType(data['ValidationStatus'], DomainStatus);
            }
            if (data.hasOwnProperty('ResourceRecord')) {
                obj['ResourceRecord'] = DomainValidationResourceRecord.constructFromObject(data['ResourceRecord']);
            }
            if (data.hasOwnProperty('ValidationMethod')) {
                obj['ValidationMethod'] = ApiClient.convertToType(data['ValidationMethod'], ValidationMethod);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainValidation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainValidation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainValidation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `ValidationEmails`
        if (data['ValidationEmails']) { // data not null
          Array.validateJSON(data['ValidationEmails']);
        }
        // validate the optional field `ValidationDomain`
        if (data['ValidationDomain']) { // data not null
          String.validateJSON(data['ValidationDomain']);
        }
        // validate the optional field `ValidationStatus`
        if (data['ValidationStatus']) { // data not null
          DomainStatus.validateJSON(data['ValidationStatus']);
        }
        // validate the optional field `ResourceRecord`
        if (data['ResourceRecord']) { // data not null
          DomainValidationResourceRecord.validateJSON(data['ResourceRecord']);
        }
        // validate the optional field `ValidationMethod`
        if (data['ValidationMethod']) { // data not null
          ValidationMethod.validateJSON(data['ValidationMethod']);
        }

        return true;
    }


}

DomainValidation.RequiredProperties = ["DomainName"];

/**
 * @member {String} DomainName
 */
DomainValidation.prototype['DomainName'] = undefined;

/**
 * @member {Array} ValidationEmails
 */
DomainValidation.prototype['ValidationEmails'] = undefined;

/**
 * @member {String} ValidationDomain
 */
DomainValidation.prototype['ValidationDomain'] = undefined;

/**
 * @member {module:model/DomainStatus} ValidationStatus
 */
DomainValidation.prototype['ValidationStatus'] = undefined;

/**
 * @member {module:model/DomainValidationResourceRecord} ResourceRecord
 */
DomainValidation.prototype['ResourceRecord'] = undefined;

/**
 * @member {module:model/ValidationMethod} ValidationMethod
 */
DomainValidation.prototype['ValidationMethod'] = undefined;






export default DomainValidation;

