# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResendValidationEmailRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_arn: str=None, domain: str=None, validation_domain: str=None):
        """ResendValidationEmailRequest - a model defined in OpenAPI

        :param certificate_arn: The certificate_arn of this ResendValidationEmailRequest.
        :param domain: The domain of this ResendValidationEmailRequest.
        :param validation_domain: The validation_domain of this ResendValidationEmailRequest.
        """
        self.openapi_types = {
            'certificate_arn': str,
            'domain': str,
            'validation_domain': str
        }

        self.attribute_map = {
            'certificate_arn': 'CertificateArn',
            'domain': 'Domain',
            'validation_domain': 'ValidationDomain'
        }

        self._certificate_arn = certificate_arn
        self._domain = domain
        self._validation_domain = validation_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResendValidationEmailRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResendValidationEmailRequest of this ResendValidationEmailRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_arn(self):
        """Gets the certificate_arn of this ResendValidationEmailRequest.


        :return: The certificate_arn of this ResendValidationEmailRequest.
        :rtype: str
        """
        return self._certificate_arn

    @certificate_arn.setter
    def certificate_arn(self, certificate_arn):
        """Sets the certificate_arn of this ResendValidationEmailRequest.


        :param certificate_arn: The certificate_arn of this ResendValidationEmailRequest.
        :type certificate_arn: str
        """
        if certificate_arn is None:
            raise ValueError("Invalid value for `certificate_arn`, must not be `None`")

        self._certificate_arn = certificate_arn

    @property
    def domain(self):
        """Gets the domain of this ResendValidationEmailRequest.


        :return: The domain of this ResendValidationEmailRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ResendValidationEmailRequest.


        :param domain: The domain of this ResendValidationEmailRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def validation_domain(self):
        """Gets the validation_domain of this ResendValidationEmailRequest.


        :return: The validation_domain of this ResendValidationEmailRequest.
        :rtype: str
        """
        return self._validation_domain

    @validation_domain.setter
    def validation_domain(self, validation_domain):
        """Sets the validation_domain of this ResendValidationEmailRequest.


        :param validation_domain: The validation_domain of this ResendValidationEmailRequest.
        :type validation_domain: str
        """
        if validation_domain is None:
            raise ValueError("Invalid value for `validation_domain`, must not be `None`")

        self._validation_domain = validation_domain
