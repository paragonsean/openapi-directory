# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_arn: str=None, certificate: str=None, private_key: str=None, certificate_chain: str=None, tags: List=None):
        """ImportCertificateRequest - a model defined in OpenAPI

        :param certificate_arn: The certificate_arn of this ImportCertificateRequest.
        :param certificate: The certificate of this ImportCertificateRequest.
        :param private_key: The private_key of this ImportCertificateRequest.
        :param certificate_chain: The certificate_chain of this ImportCertificateRequest.
        :param tags: The tags of this ImportCertificateRequest.
        """
        self.openapi_types = {
            'certificate_arn': str,
            'certificate': str,
            'private_key': str,
            'certificate_chain': str,
            'tags': List
        }

        self.attribute_map = {
            'certificate_arn': 'CertificateArn',
            'certificate': 'Certificate',
            'private_key': 'PrivateKey',
            'certificate_chain': 'CertificateChain',
            'tags': 'Tags'
        }

        self._certificate_arn = certificate_arn
        self._certificate = certificate
        self._private_key = private_key
        self._certificate_chain = certificate_chain
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportCertificateRequest of this ImportCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_arn(self):
        """Gets the certificate_arn of this ImportCertificateRequest.


        :return: The certificate_arn of this ImportCertificateRequest.
        :rtype: str
        """
        return self._certificate_arn

    @certificate_arn.setter
    def certificate_arn(self, certificate_arn):
        """Sets the certificate_arn of this ImportCertificateRequest.


        :param certificate_arn: The certificate_arn of this ImportCertificateRequest.
        :type certificate_arn: str
        """

        self._certificate_arn = certificate_arn

    @property
    def certificate(self):
        """Gets the certificate of this ImportCertificateRequest.


        :return: The certificate of this ImportCertificateRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ImportCertificateRequest.


        :param certificate: The certificate of this ImportCertificateRequest.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def private_key(self):
        """Gets the private_key of this ImportCertificateRequest.


        :return: The private_key of this ImportCertificateRequest.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this ImportCertificateRequest.


        :param private_key: The private_key of this ImportCertificateRequest.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def certificate_chain(self):
        """Gets the certificate_chain of this ImportCertificateRequest.


        :return: The certificate_chain of this ImportCertificateRequest.
        :rtype: str
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain):
        """Sets the certificate_chain of this ImportCertificateRequest.


        :param certificate_chain: The certificate_chain of this ImportCertificateRequest.
        :type certificate_chain: str
        """

        self._certificate_chain = certificate_chain

    @property
    def tags(self):
        """Gets the tags of this ImportCertificateRequest.


        :return: The tags of this ImportCertificateRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportCertificateRequest.


        :param tags: The tags of this ImportCertificateRequest.
        :type tags: List
        """

        self._tags = tags
