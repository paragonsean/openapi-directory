# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_status import DomainStatus
from openapi_server.models.domain_validation_resource_record import DomainValidationResourceRecord
from openapi_server.models.validation_method import ValidationMethod
from openapi_server import util


class DomainValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, validation_emails: List=None, validation_domain: str=None, validation_status: DomainStatus=None, resource_record: DomainValidationResourceRecord=None, validation_method: ValidationMethod=None):
        """DomainValidation - a model defined in OpenAPI

        :param domain_name: The domain_name of this DomainValidation.
        :param validation_emails: The validation_emails of this DomainValidation.
        :param validation_domain: The validation_domain of this DomainValidation.
        :param validation_status: The validation_status of this DomainValidation.
        :param resource_record: The resource_record of this DomainValidation.
        :param validation_method: The validation_method of this DomainValidation.
        """
        self.openapi_types = {
            'domain_name': str,
            'validation_emails': List,
            'validation_domain': str,
            'validation_status': DomainStatus,
            'resource_record': DomainValidationResourceRecord,
            'validation_method': ValidationMethod
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'validation_emails': 'ValidationEmails',
            'validation_domain': 'ValidationDomain',
            'validation_status': 'ValidationStatus',
            'resource_record': 'ResourceRecord',
            'validation_method': 'ValidationMethod'
        }

        self._domain_name = domain_name
        self._validation_emails = validation_emails
        self._validation_domain = validation_domain
        self._validation_status = validation_status
        self._resource_record = resource_record
        self._validation_method = validation_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainValidation of this DomainValidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this DomainValidation.


        :return: The domain_name of this DomainValidation.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DomainValidation.


        :param domain_name: The domain_name of this DomainValidation.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def validation_emails(self):
        """Gets the validation_emails of this DomainValidation.


        :return: The validation_emails of this DomainValidation.
        :rtype: List
        """
        return self._validation_emails

    @validation_emails.setter
    def validation_emails(self, validation_emails):
        """Sets the validation_emails of this DomainValidation.


        :param validation_emails: The validation_emails of this DomainValidation.
        :type validation_emails: List
        """

        self._validation_emails = validation_emails

    @property
    def validation_domain(self):
        """Gets the validation_domain of this DomainValidation.


        :return: The validation_domain of this DomainValidation.
        :rtype: str
        """
        return self._validation_domain

    @validation_domain.setter
    def validation_domain(self, validation_domain):
        """Sets the validation_domain of this DomainValidation.


        :param validation_domain: The validation_domain of this DomainValidation.
        :type validation_domain: str
        """

        self._validation_domain = validation_domain

    @property
    def validation_status(self):
        """Gets the validation_status of this DomainValidation.


        :return: The validation_status of this DomainValidation.
        :rtype: DomainStatus
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """Sets the validation_status of this DomainValidation.


        :param validation_status: The validation_status of this DomainValidation.
        :type validation_status: DomainStatus
        """

        self._validation_status = validation_status

    @property
    def resource_record(self):
        """Gets the resource_record of this DomainValidation.


        :return: The resource_record of this DomainValidation.
        :rtype: DomainValidationResourceRecord
        """
        return self._resource_record

    @resource_record.setter
    def resource_record(self, resource_record):
        """Sets the resource_record of this DomainValidation.


        :param resource_record: The resource_record of this DomainValidation.
        :type resource_record: DomainValidationResourceRecord
        """

        self._resource_record = resource_record

    @property
    def validation_method(self):
        """Gets the validation_method of this DomainValidation.


        :return: The validation_method of this DomainValidation.
        :rtype: ValidationMethod
        """
        return self._validation_method

    @validation_method.setter
    def validation_method(self, validation_method):
        """Sets the validation_method of this DomainValidation.


        :param validation_method: The validation_method of this DomainValidation.
        :type validation_method: ValidationMethod
        """

        self._validation_method = validation_method
