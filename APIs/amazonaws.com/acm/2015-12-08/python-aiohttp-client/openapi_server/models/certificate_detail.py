# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_detail_options import CertificateDetailOptions
from openapi_server.models.certificate_detail_renewal_summary import CertificateDetailRenewalSummary
from openapi_server.models.certificate_status import CertificateStatus
from openapi_server.models.certificate_type import CertificateType
from openapi_server.models.failure_reason import FailureReason
from openapi_server.models.key_algorithm import KeyAlgorithm
from openapi_server.models.renewal_eligibility import RenewalEligibility
from openapi_server.models.revocation_reason import RevocationReason
from openapi_server import util


class CertificateDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_arn: str=None, domain_name: str=None, subject_alternative_names: List=None, domain_validation_options: List=None, serial: str=None, subject: str=None, issuer: str=None, created_at: datetime=None, issued_at: datetime=None, imported_at: datetime=None, status: CertificateStatus=None, revoked_at: datetime=None, revocation_reason: RevocationReason=None, not_before: datetime=None, not_after: datetime=None, key_algorithm: KeyAlgorithm=None, signature_algorithm: str=None, in_use_by: List=None, failure_reason: FailureReason=None, type: CertificateType=None, renewal_summary: CertificateDetailRenewalSummary=None, key_usages: List=None, extended_key_usages: List=None, certificate_authority_arn: str=None, renewal_eligibility: RenewalEligibility=None, options: CertificateDetailOptions=None):
        """CertificateDetail - a model defined in OpenAPI

        :param certificate_arn: The certificate_arn of this CertificateDetail.
        :param domain_name: The domain_name of this CertificateDetail.
        :param subject_alternative_names: The subject_alternative_names of this CertificateDetail.
        :param domain_validation_options: The domain_validation_options of this CertificateDetail.
        :param serial: The serial of this CertificateDetail.
        :param subject: The subject of this CertificateDetail.
        :param issuer: The issuer of this CertificateDetail.
        :param created_at: The created_at of this CertificateDetail.
        :param issued_at: The issued_at of this CertificateDetail.
        :param imported_at: The imported_at of this CertificateDetail.
        :param status: The status of this CertificateDetail.
        :param revoked_at: The revoked_at of this CertificateDetail.
        :param revocation_reason: The revocation_reason of this CertificateDetail.
        :param not_before: The not_before of this CertificateDetail.
        :param not_after: The not_after of this CertificateDetail.
        :param key_algorithm: The key_algorithm of this CertificateDetail.
        :param signature_algorithm: The signature_algorithm of this CertificateDetail.
        :param in_use_by: The in_use_by of this CertificateDetail.
        :param failure_reason: The failure_reason of this CertificateDetail.
        :param type: The type of this CertificateDetail.
        :param renewal_summary: The renewal_summary of this CertificateDetail.
        :param key_usages: The key_usages of this CertificateDetail.
        :param extended_key_usages: The extended_key_usages of this CertificateDetail.
        :param certificate_authority_arn: The certificate_authority_arn of this CertificateDetail.
        :param renewal_eligibility: The renewal_eligibility of this CertificateDetail.
        :param options: The options of this CertificateDetail.
        """
        self.openapi_types = {
            'certificate_arn': str,
            'domain_name': str,
            'subject_alternative_names': List,
            'domain_validation_options': List,
            'serial': str,
            'subject': str,
            'issuer': str,
            'created_at': datetime,
            'issued_at': datetime,
            'imported_at': datetime,
            'status': CertificateStatus,
            'revoked_at': datetime,
            'revocation_reason': RevocationReason,
            'not_before': datetime,
            'not_after': datetime,
            'key_algorithm': KeyAlgorithm,
            'signature_algorithm': str,
            'in_use_by': List,
            'failure_reason': FailureReason,
            'type': CertificateType,
            'renewal_summary': CertificateDetailRenewalSummary,
            'key_usages': List,
            'extended_key_usages': List,
            'certificate_authority_arn': str,
            'renewal_eligibility': RenewalEligibility,
            'options': CertificateDetailOptions
        }

        self.attribute_map = {
            'certificate_arn': 'CertificateArn',
            'domain_name': 'DomainName',
            'subject_alternative_names': 'SubjectAlternativeNames',
            'domain_validation_options': 'DomainValidationOptions',
            'serial': 'Serial',
            'subject': 'Subject',
            'issuer': 'Issuer',
            'created_at': 'CreatedAt',
            'issued_at': 'IssuedAt',
            'imported_at': 'ImportedAt',
            'status': 'Status',
            'revoked_at': 'RevokedAt',
            'revocation_reason': 'RevocationReason',
            'not_before': 'NotBefore',
            'not_after': 'NotAfter',
            'key_algorithm': 'KeyAlgorithm',
            'signature_algorithm': 'SignatureAlgorithm',
            'in_use_by': 'InUseBy',
            'failure_reason': 'FailureReason',
            'type': 'Type',
            'renewal_summary': 'RenewalSummary',
            'key_usages': 'KeyUsages',
            'extended_key_usages': 'ExtendedKeyUsages',
            'certificate_authority_arn': 'CertificateAuthorityArn',
            'renewal_eligibility': 'RenewalEligibility',
            'options': 'Options'
        }

        self._certificate_arn = certificate_arn
        self._domain_name = domain_name
        self._subject_alternative_names = subject_alternative_names
        self._domain_validation_options = domain_validation_options
        self._serial = serial
        self._subject = subject
        self._issuer = issuer
        self._created_at = created_at
        self._issued_at = issued_at
        self._imported_at = imported_at
        self._status = status
        self._revoked_at = revoked_at
        self._revocation_reason = revocation_reason
        self._not_before = not_before
        self._not_after = not_after
        self._key_algorithm = key_algorithm
        self._signature_algorithm = signature_algorithm
        self._in_use_by = in_use_by
        self._failure_reason = failure_reason
        self._type = type
        self._renewal_summary = renewal_summary
        self._key_usages = key_usages
        self._extended_key_usages = extended_key_usages
        self._certificate_authority_arn = certificate_authority_arn
        self._renewal_eligibility = renewal_eligibility
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateDetail of this CertificateDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_arn(self):
        """Gets the certificate_arn of this CertificateDetail.


        :return: The certificate_arn of this CertificateDetail.
        :rtype: str
        """
        return self._certificate_arn

    @certificate_arn.setter
    def certificate_arn(self, certificate_arn):
        """Sets the certificate_arn of this CertificateDetail.


        :param certificate_arn: The certificate_arn of this CertificateDetail.
        :type certificate_arn: str
        """

        self._certificate_arn = certificate_arn

    @property
    def domain_name(self):
        """Gets the domain_name of this CertificateDetail.


        :return: The domain_name of this CertificateDetail.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CertificateDetail.


        :param domain_name: The domain_name of this CertificateDetail.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this CertificateDetail.


        :return: The subject_alternative_names of this CertificateDetail.
        :rtype: List
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this CertificateDetail.


        :param subject_alternative_names: The subject_alternative_names of this CertificateDetail.
        :type subject_alternative_names: List
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def domain_validation_options(self):
        """Gets the domain_validation_options of this CertificateDetail.


        :return: The domain_validation_options of this CertificateDetail.
        :rtype: List
        """
        return self._domain_validation_options

    @domain_validation_options.setter
    def domain_validation_options(self, domain_validation_options):
        """Sets the domain_validation_options of this CertificateDetail.


        :param domain_validation_options: The domain_validation_options of this CertificateDetail.
        :type domain_validation_options: List
        """

        self._domain_validation_options = domain_validation_options

    @property
    def serial(self):
        """Gets the serial of this CertificateDetail.


        :return: The serial of this CertificateDetail.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this CertificateDetail.


        :param serial: The serial of this CertificateDetail.
        :type serial: str
        """

        self._serial = serial

    @property
    def subject(self):
        """Gets the subject of this CertificateDetail.


        :return: The subject of this CertificateDetail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateDetail.


        :param subject: The subject of this CertificateDetail.
        :type subject: str
        """

        self._subject = subject

    @property
    def issuer(self):
        """Gets the issuer of this CertificateDetail.


        :return: The issuer of this CertificateDetail.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateDetail.


        :param issuer: The issuer of this CertificateDetail.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def created_at(self):
        """Gets the created_at of this CertificateDetail.


        :return: The created_at of this CertificateDetail.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CertificateDetail.


        :param created_at: The created_at of this CertificateDetail.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def issued_at(self):
        """Gets the issued_at of this CertificateDetail.


        :return: The issued_at of this CertificateDetail.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this CertificateDetail.


        :param issued_at: The issued_at of this CertificateDetail.
        :type issued_at: datetime
        """

        self._issued_at = issued_at

    @property
    def imported_at(self):
        """Gets the imported_at of this CertificateDetail.


        :return: The imported_at of this CertificateDetail.
        :rtype: datetime
        """
        return self._imported_at

    @imported_at.setter
    def imported_at(self, imported_at):
        """Sets the imported_at of this CertificateDetail.


        :param imported_at: The imported_at of this CertificateDetail.
        :type imported_at: datetime
        """

        self._imported_at = imported_at

    @property
    def status(self):
        """Gets the status of this CertificateDetail.


        :return: The status of this CertificateDetail.
        :rtype: CertificateStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateDetail.


        :param status: The status of this CertificateDetail.
        :type status: CertificateStatus
        """

        self._status = status

    @property
    def revoked_at(self):
        """Gets the revoked_at of this CertificateDetail.


        :return: The revoked_at of this CertificateDetail.
        :rtype: datetime
        """
        return self._revoked_at

    @revoked_at.setter
    def revoked_at(self, revoked_at):
        """Sets the revoked_at of this CertificateDetail.


        :param revoked_at: The revoked_at of this CertificateDetail.
        :type revoked_at: datetime
        """

        self._revoked_at = revoked_at

    @property
    def revocation_reason(self):
        """Gets the revocation_reason of this CertificateDetail.


        :return: The revocation_reason of this CertificateDetail.
        :rtype: RevocationReason
        """
        return self._revocation_reason

    @revocation_reason.setter
    def revocation_reason(self, revocation_reason):
        """Sets the revocation_reason of this CertificateDetail.


        :param revocation_reason: The revocation_reason of this CertificateDetail.
        :type revocation_reason: RevocationReason
        """

        self._revocation_reason = revocation_reason

    @property
    def not_before(self):
        """Gets the not_before of this CertificateDetail.


        :return: The not_before of this CertificateDetail.
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateDetail.


        :param not_before: The not_before of this CertificateDetail.
        :type not_before: datetime
        """

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this CertificateDetail.


        :return: The not_after of this CertificateDetail.
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateDetail.


        :param not_after: The not_after of this CertificateDetail.
        :type not_after: datetime
        """

        self._not_after = not_after

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this CertificateDetail.


        :return: The key_algorithm of this CertificateDetail.
        :rtype: KeyAlgorithm
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this CertificateDetail.


        :param key_algorithm: The key_algorithm of this CertificateDetail.
        :type key_algorithm: KeyAlgorithm
        """

        self._key_algorithm = key_algorithm

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this CertificateDetail.


        :return: The signature_algorithm of this CertificateDetail.
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this CertificateDetail.


        :param signature_algorithm: The signature_algorithm of this CertificateDetail.
        :type signature_algorithm: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def in_use_by(self):
        """Gets the in_use_by of this CertificateDetail.


        :return: The in_use_by of this CertificateDetail.
        :rtype: List
        """
        return self._in_use_by

    @in_use_by.setter
    def in_use_by(self, in_use_by):
        """Sets the in_use_by of this CertificateDetail.


        :param in_use_by: The in_use_by of this CertificateDetail.
        :type in_use_by: List
        """

        self._in_use_by = in_use_by

    @property
    def failure_reason(self):
        """Gets the failure_reason of this CertificateDetail.


        :return: The failure_reason of this CertificateDetail.
        :rtype: FailureReason
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this CertificateDetail.


        :param failure_reason: The failure_reason of this CertificateDetail.
        :type failure_reason: FailureReason
        """

        self._failure_reason = failure_reason

    @property
    def type(self):
        """Gets the type of this CertificateDetail.


        :return: The type of this CertificateDetail.
        :rtype: CertificateType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CertificateDetail.


        :param type: The type of this CertificateDetail.
        :type type: CertificateType
        """

        self._type = type

    @property
    def renewal_summary(self):
        """Gets the renewal_summary of this CertificateDetail.


        :return: The renewal_summary of this CertificateDetail.
        :rtype: CertificateDetailRenewalSummary
        """
        return self._renewal_summary

    @renewal_summary.setter
    def renewal_summary(self, renewal_summary):
        """Sets the renewal_summary of this CertificateDetail.


        :param renewal_summary: The renewal_summary of this CertificateDetail.
        :type renewal_summary: CertificateDetailRenewalSummary
        """

        self._renewal_summary = renewal_summary

    @property
    def key_usages(self):
        """Gets the key_usages of this CertificateDetail.


        :return: The key_usages of this CertificateDetail.
        :rtype: List
        """
        return self._key_usages

    @key_usages.setter
    def key_usages(self, key_usages):
        """Sets the key_usages of this CertificateDetail.


        :param key_usages: The key_usages of this CertificateDetail.
        :type key_usages: List
        """

        self._key_usages = key_usages

    @property
    def extended_key_usages(self):
        """Gets the extended_key_usages of this CertificateDetail.


        :return: The extended_key_usages of this CertificateDetail.
        :rtype: List
        """
        return self._extended_key_usages

    @extended_key_usages.setter
    def extended_key_usages(self, extended_key_usages):
        """Sets the extended_key_usages of this CertificateDetail.


        :param extended_key_usages: The extended_key_usages of this CertificateDetail.
        :type extended_key_usages: List
        """

        self._extended_key_usages = extended_key_usages

    @property
    def certificate_authority_arn(self):
        """Gets the certificate_authority_arn of this CertificateDetail.


        :return: The certificate_authority_arn of this CertificateDetail.
        :rtype: str
        """
        return self._certificate_authority_arn

    @certificate_authority_arn.setter
    def certificate_authority_arn(self, certificate_authority_arn):
        """Sets the certificate_authority_arn of this CertificateDetail.


        :param certificate_authority_arn: The certificate_authority_arn of this CertificateDetail.
        :type certificate_authority_arn: str
        """

        self._certificate_authority_arn = certificate_authority_arn

    @property
    def renewal_eligibility(self):
        """Gets the renewal_eligibility of this CertificateDetail.


        :return: The renewal_eligibility of this CertificateDetail.
        :rtype: RenewalEligibility
        """
        return self._renewal_eligibility

    @renewal_eligibility.setter
    def renewal_eligibility(self, renewal_eligibility):
        """Sets the renewal_eligibility of this CertificateDetail.


        :param renewal_eligibility: The renewal_eligibility of this CertificateDetail.
        :type renewal_eligibility: RenewalEligibility
        """

        self._renewal_eligibility = renewal_eligibility

    @property
    def options(self):
        """Gets the options of this CertificateDetail.


        :return: The options of this CertificateDetail.
        :rtype: CertificateDetailOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CertificateDetail.


        :param options: The options of this CertificateDetail.
        :type options: CertificateDetailOptions
        """

        self._options = options
