# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_algorithm import KeyAlgorithm
from openapi_server.models.request_certificate_request_options import RequestCertificateRequestOptions
from openapi_server.models.validation_method import ValidationMethod
from openapi_server import util


class RequestCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, validation_method: ValidationMethod=None, subject_alternative_names: List=None, idempotency_token: str=None, domain_validation_options: List=None, options: RequestCertificateRequestOptions=None, certificate_authority_arn: str=None, tags: List=None, key_algorithm: KeyAlgorithm=None):
        """RequestCertificateRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this RequestCertificateRequest.
        :param validation_method: The validation_method of this RequestCertificateRequest.
        :param subject_alternative_names: The subject_alternative_names of this RequestCertificateRequest.
        :param idempotency_token: The idempotency_token of this RequestCertificateRequest.
        :param domain_validation_options: The domain_validation_options of this RequestCertificateRequest.
        :param options: The options of this RequestCertificateRequest.
        :param certificate_authority_arn: The certificate_authority_arn of this RequestCertificateRequest.
        :param tags: The tags of this RequestCertificateRequest.
        :param key_algorithm: The key_algorithm of this RequestCertificateRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'validation_method': ValidationMethod,
            'subject_alternative_names': List,
            'idempotency_token': str,
            'domain_validation_options': List,
            'options': RequestCertificateRequestOptions,
            'certificate_authority_arn': str,
            'tags': List,
            'key_algorithm': KeyAlgorithm
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'validation_method': 'ValidationMethod',
            'subject_alternative_names': 'SubjectAlternativeNames',
            'idempotency_token': 'IdempotencyToken',
            'domain_validation_options': 'DomainValidationOptions',
            'options': 'Options',
            'certificate_authority_arn': 'CertificateAuthorityArn',
            'tags': 'Tags',
            'key_algorithm': 'KeyAlgorithm'
        }

        self._domain_name = domain_name
        self._validation_method = validation_method
        self._subject_alternative_names = subject_alternative_names
        self._idempotency_token = idempotency_token
        self._domain_validation_options = domain_validation_options
        self._options = options
        self._certificate_authority_arn = certificate_authority_arn
        self._tags = tags
        self._key_algorithm = key_algorithm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestCertificateRequest of this RequestCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this RequestCertificateRequest.


        :return: The domain_name of this RequestCertificateRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this RequestCertificateRequest.


        :param domain_name: The domain_name of this RequestCertificateRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def validation_method(self):
        """Gets the validation_method of this RequestCertificateRequest.


        :return: The validation_method of this RequestCertificateRequest.
        :rtype: ValidationMethod
        """
        return self._validation_method

    @validation_method.setter
    def validation_method(self, validation_method):
        """Sets the validation_method of this RequestCertificateRequest.


        :param validation_method: The validation_method of this RequestCertificateRequest.
        :type validation_method: ValidationMethod
        """

        self._validation_method = validation_method

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this RequestCertificateRequest.


        :return: The subject_alternative_names of this RequestCertificateRequest.
        :rtype: List
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this RequestCertificateRequest.


        :param subject_alternative_names: The subject_alternative_names of this RequestCertificateRequest.
        :type subject_alternative_names: List
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this RequestCertificateRequest.


        :return: The idempotency_token of this RequestCertificateRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this RequestCertificateRequest.


        :param idempotency_token: The idempotency_token of this RequestCertificateRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token

    @property
    def domain_validation_options(self):
        """Gets the domain_validation_options of this RequestCertificateRequest.


        :return: The domain_validation_options of this RequestCertificateRequest.
        :rtype: List
        """
        return self._domain_validation_options

    @domain_validation_options.setter
    def domain_validation_options(self, domain_validation_options):
        """Sets the domain_validation_options of this RequestCertificateRequest.


        :param domain_validation_options: The domain_validation_options of this RequestCertificateRequest.
        :type domain_validation_options: List
        """

        self._domain_validation_options = domain_validation_options

    @property
    def options(self):
        """Gets the options of this RequestCertificateRequest.


        :return: The options of this RequestCertificateRequest.
        :rtype: RequestCertificateRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RequestCertificateRequest.


        :param options: The options of this RequestCertificateRequest.
        :type options: RequestCertificateRequestOptions
        """

        self._options = options

    @property
    def certificate_authority_arn(self):
        """Gets the certificate_authority_arn of this RequestCertificateRequest.


        :return: The certificate_authority_arn of this RequestCertificateRequest.
        :rtype: str
        """
        return self._certificate_authority_arn

    @certificate_authority_arn.setter
    def certificate_authority_arn(self, certificate_authority_arn):
        """Sets the certificate_authority_arn of this RequestCertificateRequest.


        :param certificate_authority_arn: The certificate_authority_arn of this RequestCertificateRequest.
        :type certificate_authority_arn: str
        """

        self._certificate_authority_arn = certificate_authority_arn

    @property
    def tags(self):
        """Gets the tags of this RequestCertificateRequest.


        :return: The tags of this RequestCertificateRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RequestCertificateRequest.


        :param tags: The tags of this RequestCertificateRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this RequestCertificateRequest.


        :return: The key_algorithm of this RequestCertificateRequest.
        :rtype: KeyAlgorithm
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this RequestCertificateRequest.


        :param key_algorithm: The key_algorithm of this RequestCertificateRequest.
        :type key_algorithm: KeyAlgorithm
        """

        self._key_algorithm = key_algorithm
