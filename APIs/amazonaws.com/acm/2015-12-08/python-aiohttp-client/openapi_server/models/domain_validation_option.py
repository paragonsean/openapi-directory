# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DomainValidationOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, validation_domain: str=None):
        """DomainValidationOption - a model defined in OpenAPI

        :param domain_name: The domain_name of this DomainValidationOption.
        :param validation_domain: The validation_domain of this DomainValidationOption.
        """
        self.openapi_types = {
            'domain_name': str,
            'validation_domain': str
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'validation_domain': 'ValidationDomain'
        }

        self._domain_name = domain_name
        self._validation_domain = validation_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainValidationOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainValidationOption of this DomainValidationOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this DomainValidationOption.


        :return: The domain_name of this DomainValidationOption.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DomainValidationOption.


        :param domain_name: The domain_name of this DomainValidationOption.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def validation_domain(self):
        """Gets the validation_domain of this DomainValidationOption.


        :return: The validation_domain of this DomainValidationOption.
        :rtype: str
        """
        return self._validation_domain

    @validation_domain.setter
    def validation_domain(self, validation_domain):
        """Sets the validation_domain of this DomainValidationOption.


        :param validation_domain: The validation_domain of this DomainValidationOption.
        :type validation_domain: str
        """
        if validation_domain is None:
            raise ValueError("Invalid value for `validation_domain`, must not be `None`")

        self._validation_domain = validation_domain
