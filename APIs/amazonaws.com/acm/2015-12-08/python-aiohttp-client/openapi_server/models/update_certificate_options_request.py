# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_certificate_options_request_options import UpdateCertificateOptionsRequestOptions
from openapi_server import util


class UpdateCertificateOptionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_arn: str=None, options: UpdateCertificateOptionsRequestOptions=None):
        """UpdateCertificateOptionsRequest - a model defined in OpenAPI

        :param certificate_arn: The certificate_arn of this UpdateCertificateOptionsRequest.
        :param options: The options of this UpdateCertificateOptionsRequest.
        """
        self.openapi_types = {
            'certificate_arn': str,
            'options': UpdateCertificateOptionsRequestOptions
        }

        self.attribute_map = {
            'certificate_arn': 'CertificateArn',
            'options': 'Options'
        }

        self._certificate_arn = certificate_arn
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCertificateOptionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCertificateOptionsRequest of this UpdateCertificateOptionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_arn(self):
        """Gets the certificate_arn of this UpdateCertificateOptionsRequest.


        :return: The certificate_arn of this UpdateCertificateOptionsRequest.
        :rtype: str
        """
        return self._certificate_arn

    @certificate_arn.setter
    def certificate_arn(self, certificate_arn):
        """Sets the certificate_arn of this UpdateCertificateOptionsRequest.


        :param certificate_arn: The certificate_arn of this UpdateCertificateOptionsRequest.
        :type certificate_arn: str
        """
        if certificate_arn is None:
            raise ValueError("Invalid value for `certificate_arn`, must not be `None`")

        self._certificate_arn = certificate_arn

    @property
    def options(self):
        """Gets the options of this UpdateCertificateOptionsRequest.


        :return: The options of this UpdateCertificateOptionsRequest.
        :rtype: UpdateCertificateOptionsRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this UpdateCertificateOptionsRequest.


        :param options: The options of this UpdateCertificateOptionsRequest.
        :type options: UpdateCertificateOptionsRequestOptions
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options
