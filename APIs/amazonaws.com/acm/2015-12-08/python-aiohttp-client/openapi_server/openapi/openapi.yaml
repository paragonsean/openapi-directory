openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>Certificate Manager</fullname> <p>You can use Certificate\
    \ Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based\
    \ websites and applications. For more information about using ACM, see the <a\
    \ href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager\
    \ User Guide</a>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS Certificate Manager
  version: 2015-12-08
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: acm
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-2015-12-08.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/acm/
servers:
- description: The ACM multi-region endpoint
  url: "http://acm.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The ACM multi-region endpoint
  url: "https://acm.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The ACM endpoint for China (Beijing) and China (Ningxia)
  url: "http://acm.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The ACM endpoint for China (Beijing) and China (Ningxia)
  url: "https://acm.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=CertificateManager.AddTagsToCertificate:
    post:
      description: "<p>Adds one or more tags to an ACM certificate. Tags are labels\
        \ that you can use to identify and organize your Amazon Web Services resources.\
        \ Each tag consists of a <code>key</code> and an optional <code>value</code>.\
        \ You specify the certificate on input by its Amazon Resource Name (ARN).\
        \ You specify the tag by using a key-value pair. </p> <p>You can apply a tag\
        \ to just one certificate if you want to identify a specific characteristic\
        \ of that certificate, or you can apply the same tag to multiple certificates\
        \ if you want to filter for a common relationship among those certificates.\
        \ Similarly, you can apply the same tag to multiple resources if you want\
        \ to specify a relationship among those resources. For example, you can add\
        \ the same tag to an ACM certificate and an Elastic Load Balancing load balancer\
        \ to indicate that they are both used by the same website. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/tags.html\"\
        >Tagging ACM certificates</a>. </p> <p>To remove one or more tags, use the\
        \ <a>RemoveTagsFromCertificate</a> action. To view all of the tags that have\
        \ been applied to the certificate, use the <a>ListTagsForCertificate</a> action.\
        \ </p>"
      operationId: add_tags_to_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.AddTagsToCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagsToCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
          description: InvalidTagException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.DeleteCertificate:
    post:
      description: "<p>Deletes a certificate and its associated private key. If this\
        \ action succeeds, the certificate no longer appears in the list that can\
        \ be displayed by calling the <a>ListCertificates</a> action or be retrieved\
        \ by calling the <a>GetCertificate</a> action. The certificate will not be\
        \ available for use by Amazon Web Services services integrated with ACM. </p>\
        \ <note> <p>You cannot delete an ACM certificate that is being used by another\
        \ Amazon Web Services service. To delete a certificate that is in use, the\
        \ certificate association must first be removed.</p> </note>"
      operationId: delete_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.DeleteCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.DescribeCertificate:
    post:
      description: "<p>Returns detailed metadata about the specified ACM certificate.</p>\
        \ <p>If you have just created a certificate using the <code>RequestCertificate</code>\
        \ action, there is a delay of several seconds before you can retrieve information\
        \ about it.</p>"
      operationId: describe_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.DescribeCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeCertificateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.ExportCertificate:
    post:
      description: "<p>Exports a private certificate issued by a private certificate\
        \ authority (CA) for use anywhere. The exported file contains the certificate,\
        \ the certificate chain, and the encrypted private 2048-bit RSA key associated\
        \ with the public key that is embedded in the certificate. For security, you\
        \ must assign a passphrase for the private key when exporting it. </p> <p>For\
        \ information about exporting and formatting a certificate using the ACM console\
        \ or CLI, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-export-private.html\"\
        >Export a Private Certificate</a>.</p>"
      operationId: export_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.ExportCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCertificateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestInProgressException'
          description: RequestInProgressException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.GetAccountConfiguration:
    post:
      description: Returns the account configuration options associated with an Amazon
        Web Services account.
      operationId: get_account_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.GetAccountConfiguration
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /#X-Amz-Target=CertificateManager.GetCertificate:
    post:
      description: Retrieves an Amazon-issued certificate and its certificate chain.
        The chain consists of the certificate of the issuing CA and the intermediate
        certificates of any other subordinate CAs. All of the certificates are base64
        encoded. You can use <a href="https://wiki.openssl.org/index.php/Command_Line_Utilities">OpenSSL</a>
        to decode the certificates and inspect individual fields.
      operationId: get_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.GetCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCertificateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestInProgressException'
          description: RequestInProgressException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.ImportCertificate:
    post:
      description: "<p>Imports a certificate into Certificate Manager (ACM) to use\
        \ with services that are integrated with ACM. Note that <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html\"\
        >integrated services</a> allow only certificate types and keys they support\
        \ to be associated with their resources. Further, their support differs depending\
        \ on whether the certificate is imported into IAM or into ACM. For more information,\
        \ see the documentation for each service. For more information about importing\
        \ certificates into ACM, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html\"\
        >Importing Certificates</a> in the <i>Certificate Manager User Guide</i>.\
        \ </p> <note> <p>ACM does not provide <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\
        >managed renewal</a> for certificates that you import.</p> </note> <p>Note\
        \ the following guidelines when importing third party certificates:</p> <ul>\
        \ <li> <p>You must enter the private key that matches the certificate you\
        \ are importing.</p> </li> <li> <p>The private key must be unencrypted. You\
        \ cannot import a private key that is protected by a password or a passphrase.</p>\
        \ </li> <li> <p>The private key must be no larger than 5 KB (5,120 bytes).</p>\
        \ </li> <li> <p>If the certificate you are importing is not self-signed, you\
        \ must enter its certificate chain.</p> </li> <li> <p>If a certificate chain\
        \ is included, the issuer must be the subject of one of the certificates in\
        \ the chain.</p> </li> <li> <p>The certificate, private key, and certificate\
        \ chain must be PEM-encoded.</p> </li> <li> <p>The current time must be between\
        \ the <code>Not Before</code> and <code>Not After</code> certificate fields.</p>\
        \ </li> <li> <p>The <code>Issuer</code> field must not be empty.</p> </li>\
        \ <li> <p>The OCSP authority URL, if present, must not exceed 1000 characters.</p>\
        \ </li> <li> <p>To import a new certificate, omit the <code>CertificateArn</code>\
        \ argument. Include this argument only when you want to replace a previously\
        \ imported certificate.</p> </li> <li> <p>When you import a certificate by\
        \ using the CLI, you must specify the certificate, the certificate chain,\
        \ and the private key by their file names preceded by <code>fileb://</code>.\
        \ For example, you can specify a certificate saved in the <code>C:\\temp</code>\
        \ folder as <code>fileb://C:\\temp\\certificate_to_import.pem</code>. If you\
        \ are making an HTTP or HTTPS Query request, include these arguments as BLOBs.\
        \ </p> </li> <li> <p>When you import a certificate by using an SDK, you must\
        \ specify the certificate, the certificate chain, and the private key files\
        \ in the manner required by the programming language you're using. </p> </li>\
        \ <li> <p>The cryptographic algorithm of an imported certificate must match\
        \ the algorithm of the signing CA. For example, if the signing CA key type\
        \ is RSA, then the certificate key type must also be RSA.</p> </li> </ul>\
        \ <p>This operation returns the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
        >Amazon Resource Name (ARN)</a> of the imported certificate.</p>"
      operationId: import_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.ImportCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCertificateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
          description: InvalidTagException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.ListCertificates:
    post:
      description: "Retrieves a list of certificate ARNs and domain names. You can\
        \ request that only certificates that match a specific status be listed. You\
        \ can also filter by specific attributes of the certificate. Default filtering\
        \ returns only <code>RSA_2048</code> certificates. For more information, see\
        \ <a>Filters</a>."
      operationId: list_certificates
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxItems
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.ListCertificates
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCertificatesRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgsException'
          description: InvalidArgsException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.ListTagsForCertificate:
    post:
      description: "Lists the tags that have been applied to the ACM certificate.\
        \ Use the certificate's Amazon Resource Name (ARN) to specify the certificate.\
        \ To add a tag to an ACM certificate, use the <a>AddTagsToCertificate</a>\
        \ action. To delete a tag, use the <a>RemoveTagsFromCertificate</a> action. "
      operationId: list_tags_for_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.ListTagsForCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForCertificateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.PutAccountConfiguration:
    post:
      description: "<p>Adds or modifies account-level configurations in ACM. </p>\
        \ <p>The supported configuration option is <code>DaysBeforeExpiry</code>.\
        \ This option specifies the number of days prior to certificate expiration\
        \ when ACM starts generating <code>EventBridge</code> events. ACM sends one\
        \ event per day per certificate until the certificate expires. By default,\
        \ accounts receive events starting 45 days before certificate expiration.</p>"
      operationId: put_account_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.PutAccountConfiguration
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAccountConfigurationRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.RemoveTagsFromCertificate:
    post:
      description: "<p>Remove one or more tags from an ACM certificate. A tag consists\
        \ of a key-value pair. If you do not specify the value portion of the tag\
        \ when calling this function, the tag will be removed regardless of value.\
        \ If you specify a value, the tag is removed only if it is associated with\
        \ the specified value. </p> <p>To add tags to a certificate, use the <a>AddTagsToCertificate</a>\
        \ action. To view all of the tags that have been applied to a specific ACM\
        \ certificate, use the <a>ListTagsForCertificate</a> action. </p>"
      operationId: remove_tags_from_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.RemoveTagsFromCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTagsFromCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
          description: InvalidTagException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.RenewCertificate:
    post:
      description: "Renews an eligible ACM certificate. At this time, only exported\
        \ private certificates can be renewed with this operation. In order to renew\
        \ your Amazon Web Services Private CA certificates with ACM, you must first\
        \ <a href=\"https://docs.aws.amazon.com/privateca/latest/userguide/PcaPermissions.html\"\
        >grant the ACM service principal permission to do so</a>. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/manual-renewal.html\"\
        >Testing Managed Renewal</a> in the ACM User Guide."
      operationId: renew_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.RenewCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.RequestCertificate:
    post:
      description: "<p>Requests an ACM certificate for use with other Amazon Web Services\
        \ services. To request an ACM certificate, you must specify a fully qualified\
        \ domain name (FQDN) in the <code>DomainName</code> parameter. You can also\
        \ specify additional FQDNs in the <code>SubjectAlternativeNames</code> parameter.\
        \ </p> <p>If you are requesting a private certificate, domain validation is\
        \ not required. If you are requesting a public certificate, each domain name\
        \ that you specify must be validated to verify that you own or control the\
        \ domain. You can use <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html\"\
        >DNS validation</a> or <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html\"\
        >email validation</a>. We recommend that you use DNS validation. ACM issues\
        \ public certificates after receiving approval from the domain owner. </p>\
        \ <note> <p>ACM behavior differs from the <a href=\"https://datatracker.ietf.org/doc/html/rfc6125#appendix-B.2\"\
        >RFC 6125</a> specification of the certificate validation process. ACM first\
        \ checks for a Subject Alternative Name, and, if it finds one, ignores the\
        \ common name (CN).</p> </note> <p>After successful completion of the <code>RequestCertificate</code>\
        \ action, there is a delay of several seconds before you can retrieve information\
        \ about the new certificate.</p>"
      operationId: request_certificate
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.RequestCertificate
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCertificateRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestCertificateResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDomainValidationOptionsException'
          description: InvalidDomainValidationOptionsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
          description: InvalidTagException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPolicyException'
          description: TagPolicyException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.ResendValidationEmail:
    post:
      description: "Resends the email that requests domain ownership validation. The\
        \ domain owner or an authorized representative must approve the ACM certificate\
        \ before it can be issued. The certificate can be approved by clicking a link\
        \ in the mail to navigate to the Amazon certificate approval website and then\
        \ clicking <b>I Approve</b>. However, the validation email can be blocked\
        \ by spam filters. Therefore, if you do not receive the original mail, you\
        \ can request that the mail be resent within 72 hours of requesting the ACM\
        \ certificate. If more than 72 hours have elapsed since your original request\
        \ or since your last attempt to resend validation mail, you must request a\
        \ new certificate. For more information about setting up your contact email\
        \ addresses, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/setup-email.html\"\
        >Configure Email for your Domain</a>. "
      operationId: resend_validation_email
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.ResendValidationEmail
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendValidationEmailRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidStateException'
          description: InvalidStateException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDomainValidationOptionsException'
          description: InvalidDomainValidationOptionsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /#X-Amz-Target=CertificateManager.UpdateCertificateOptions:
    post:
      description: "Updates a certificate. Currently, you can use this function to\
        \ specify whether to opt in to or out of recording your certificate in a certificate\
        \ transparency log. For more information, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency\"\
        > Opting Out of Certificate Transparency Logging</a>. "
      operationId: update_certificate_options
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - CertificateManager.UpdateCertificateOptions
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCertificateOptionsRequest'
        required: true
        x-body-name: body
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidStateException'
          description: InvalidStateException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArnException'
          description: InvalidArnException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    AddTagsToCertificateRequest:
      example:
        Tags: ""
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains the ARN of the ACM certificate to\
              \ which the tag is to be applied. This must be of the form:</p> <p>\
              \ <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The key-value pair that defines the tag. The tag value is
              optional.
          title: Tags
      required:
      - CertificateArn
      - Tags
      title: AddTagsToCertificateRequest
      type: object
    ResourceNotFoundException: {}
    InvalidArnException: {}
    InvalidTagException: {}
    TooManyTagsException: {}
    TagPolicyException: {}
    InvalidParameterException: {}
    ThrottlingException: {}
    DeleteCertificateRequest:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains the ARN of the ACM certificate to\
              \ be deleted. This must be of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
      required:
      - CertificateArn
      title: DeleteCertificateRequest
      type: object
    ResourceInUseException: {}
    AccessDeniedException: {}
    ConflictException: {}
    DescribeCertificateResponse:
      example:
        Certificate:
          Options:
            CertificateTransparencyLoggingPreference: ""
          Issuer: ""
          InUseBy: ""
          CreatedAt: ""
          SignatureAlgorithm: ""
          NotAfter: ""
          RenewalEligibility: ""
          RevokedAt: ""
          KeyUsages: ""
          DomainValidationOptions: ""
          Status: ""
          RevocationReason: ""
          IssuedAt: ""
          DomainName: ""
          SubjectAlternativeNames: ""
          ExtendedKeyUsages: ""
          Subject: ""
          KeyAlgorithm: ""
          ImportedAt: ""
          CertificateAuthorityArn: ""
          Serial: ""
          Type: ""
          RenewalSummary:
            DomainValidationOptions: ""
            RenewalStatusReason: ""
            RenewalStatus: ""
            UpdatedAt: ""
          FailureReason: ""
          NotBefore: ""
          CertificateArn: ""
      properties:
        Certificate:
          $ref: '#/components/schemas/DescribeCertificateResponse_Certificate'
      title: DescribeCertificateResponse
      type: object
    DescribeCertificateRequest:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>The Amazon Resource Name (ARN) of the ACM certificate.\
              \ The ARN must have the following form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
      required:
      - CertificateArn
      title: DescribeCertificateRequest
      type: object
    ExportCertificateResponse:
      example:
        PrivateKey: ""
        CertificateChain: ""
        Certificate: ""
      properties:
        Certificate:
          allOf:
          - $ref: '#/components/schemas/CertificateBody'
          - description: The base64 PEM-encoded certificate.
          title: Certificate
        CertificateChain:
          allOf:
          - $ref: '#/components/schemas/CertificateChain'
          - description: The base64 PEM-encoded certificate chain. This does not include
              the certificate that you are exporting.
          title: CertificateChain
        PrivateKey:
          allOf:
          - $ref: '#/components/schemas/PrivateKey'
          - description: "The encrypted private key associated with the public key\
              \ in the certificate. The key is output in PKCS #8 format and is base64\
              \ PEM-encoded. "
          title: PrivateKey
      title: ExportCertificateResponse
      type: object
    ExportCertificateRequest:
      example:
        Passphrase: ""
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: <p>An Amazon Resource Name (ARN) of the issued certificate.
              This must be of the form:</p> <p> <code>arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012</code>
              </p>
          title: CertificateArn
        Passphrase:
          allOf:
          - $ref: '#/components/schemas/PassphraseBlob'
          - description: "<p>Passphrase to associate with the encrypted exported private\
              \ key. </p> <note> <p>When creating your passphrase, you can use any\
              \ ASCII character except #, $, or %.</p> </note> <p>If you want to later\
              \ decrypt the private key, you must have the passphrase. You can use\
              \ the following OpenSSL command to decrypt a private key. After entering\
              \ the command, you are prompted for the passphrase.</p> <p> <code>openssl\
              \ rsa -in encrypted_key.pem -out decrypted_key.pem</code> </p>"
          title: Passphrase
      required:
      - CertificateArn
      - Passphrase
      title: ExportCertificateRequest
      type: object
    RequestInProgressException: {}
    GetAccountConfigurationResponse:
      example:
        ExpiryEvents:
          DaysBeforeExpiry: ""
      properties:
        ExpiryEvents:
          $ref: '#/components/schemas/GetAccountConfigurationResponse_ExpiryEvents'
      title: GetAccountConfigurationResponse
      type: object
    GetCertificateResponse:
      example:
        CertificateChain: ""
        Certificate: ""
      properties:
        Certificate:
          allOf:
          - $ref: '#/components/schemas/CertificateBody'
          - description: The ACM-issued certificate corresponding to the ARN specified
              as input.
          title: Certificate
        CertificateChain:
          allOf:
          - $ref: '#/components/schemas/CertificateChain'
          - description: 'Certificates forming the requested certificate''s chain
              of trust. The chain consists of the certificate of the issuing CA and
              the intermediate certificates of any other subordinate CAs. '
          title: CertificateChain
      title: GetCertificateResponse
      type: object
    GetCertificateRequest:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains a certificate ARN in the following\
              \ format:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
      required:
      - CertificateArn
      title: GetCertificateRequest
      type: object
    ImportCertificateResponse:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon
              Resource Name (ARN)</a> of the imported certificate.
          title: CertificateArn
      title: ImportCertificateResponse
      type: object
    ImportCertificateRequest:
      example:
        PrivateKey: ""
        CertificateChain: ""
        Tags: ""
        CertificateArn: ""
        Certificate: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Name (ARN)</a> of an imported certificate to replace.\
              \ To import a new certificate, omit this field. "
          title: CertificateArn
        Certificate:
          allOf:
          - $ref: '#/components/schemas/CertificateBodyBlob'
          - description: The certificate to import.
          title: Certificate
        PrivateKey:
          allOf:
          - $ref: '#/components/schemas/PrivateKeyBlob'
          - description: The private key that matches the public key in the certificate.
          title: PrivateKey
        CertificateChain:
          allOf:
          - $ref: '#/components/schemas/CertificateChainBlob'
          - description: The PEM encoded certificate chain.
          title: CertificateChain
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "<p>One or more resource tags to associate with the imported\
              \ certificate. </p> <p>Note: You cannot apply tags when reimporting\
              \ a certificate.</p>"
          title: Tags
      required:
      - Certificate
      - PrivateKey
      title: ImportCertificateRequest
      type: object
    LimitExceededException: {}
    ListCertificatesResponse:
      example:
        NextToken: ""
        CertificateSummaryList: ""
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "When the list is truncated, this value is present and contains\
              \ the value to use for the <code>NextToken</code> parameter in a subsequent\
              \ pagination request."
          title: NextToken
        CertificateSummaryList:
          allOf:
          - $ref: '#/components/schemas/CertificateSummaryList'
          - description: A list of ACM certificates.
          title: CertificateSummaryList
      title: ListCertificatesResponse
      type: object
    ListCertificatesRequest:
      example:
        Includes:
          keyUsage: ""
          extendedKeyUsage: ""
          keyTypes: ""
        CertificateStatuses: ""
        NextToken: ""
        SortBy: ""
        SortOrder: ""
        MaxItems: ""
      properties:
        CertificateStatuses:
          allOf:
          - $ref: '#/components/schemas/CertificateStatuses'
          - description: Filter the certificate list by status value.
          title: CertificateStatuses
        Includes:
          $ref: '#/components/schemas/ListCertificatesRequest_Includes'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: Use this parameter only when paginating results and only
              in a subsequent request after you receive a response with truncated
              results. Set it to the value of <code>NextToken</code> from the response
              you just received.
          title: NextToken
        MaxItems:
          allOf:
          - $ref: '#/components/schemas/MaxItems'
          - description: "Use this parameter when paginating results to specify the\
              \ maximum number of items to return in the response. If additional items\
              \ exist beyond the number you specify, the <code>NextToken</code> element\
              \ is sent in the response. Use this <code>NextToken</code> value in\
              \ a subsequent request to retrieve additional items."
          title: MaxItems
        SortBy:
          allOf:
          - $ref: '#/components/schemas/SortBy'
          - description: "Specifies the field to sort results by. If you specify <code>SortBy</code>,\
              \ you must also specify <code>SortOrder</code>."
          title: SortBy
        SortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          - description: "Specifies the order of sorted results. If you specify <code>SortOrder</code>,\
              \ you must also specify <code>SortBy</code>."
          title: SortOrder
      title: ListCertificatesRequest
      type: object
    InvalidArgsException: {}
    ValidationException: {}
    ListTagsForCertificateResponse:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The key-value pairs that define the applied tags.
          title: Tags
      title: ListTagsForCertificateResponse
      type: object
    ListTagsForCertificateRequest:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains the ARN of the ACM certificate for\
              \ which you want to list the tags. This must have the following form:</p>\
              \ <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
      required:
      - CertificateArn
      title: ListTagsForCertificateRequest
      type: object
    PutAccountConfigurationRequest:
      example:
        ExpiryEvents:
          DaysBeforeExpiry: ""
        IdempotencyToken: ""
      properties:
        ExpiryEvents:
          $ref: '#/components/schemas/PutAccountConfigurationRequest_ExpiryEvents'
        IdempotencyToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          - description: "Customer-chosen string used to distinguish between calls\
              \ to <code>PutAccountConfiguration</code>. Idempotency tokens time out\
              \ after one hour. If you call <code>PutAccountConfiguration</code> multiple\
              \ times with the same unexpired idempotency token, ACM treats it as\
              \ the same request and returns the original result. If you change the\
              \ idempotency token for each call, ACM treats each call as a new request."
          title: IdempotencyToken
      required:
      - IdempotencyToken
      title: PutAccountConfigurationRequest
      type: object
    RemoveTagsFromCertificateRequest:
      example:
        Tags: ""
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains the ARN of the ACM Certificate with\
              \ one or more tags that you want to remove. This must be of the form:</p>\
              \ <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The key-value pair that defines the tag to remove.
          title: Tags
      required:
      - CertificateArn
      - Tags
      title: RemoveTagsFromCertificateRequest
      type: object
    RenewCertificateRequest:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains the ARN of the ACM certificate to\
              \ be renewed. This must be of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
      required:
      - CertificateArn
      title: RenewCertificateRequest
      type: object
    RequestCertificateResponse:
      example:
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: <p>String that contains the ARN of the issued certificate.
              This must be of the form:</p> <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
              </p>
          title: CertificateArn
      title: RequestCertificateResponse
      type: object
    RequestCertificateRequest:
      example:
        IdempotencyToken: ""
        Options:
          CertificateTransparencyLoggingPreference: ""
        CertificateAuthorityArn: ""
        DomainValidationOptions: ""
        DomainName: ""
        ValidationMethod: ""
        SubjectAlternativeNames: ""
        Tags: ""
        KeyAlgorithm: ""
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: "<p>Fully qualified domain name (FQDN), such as www.example.com,\
              \ that you want to secure with an ACM certificate. Use an asterisk (*)\
              \ to create a wildcard certificate that protects several sites in the\
              \ same domain. For example, *.example.com protects www.example.com,\
              \ site.example.com, and images.example.com. </p> <p>In compliance with\
              \ <a href=\"https://datatracker.ietf.org/doc/html/rfc5280\">RFC 5280</a>,\
              \ the length of the domain name (technically, the Common Name) that\
              \ you provide cannot exceed 64 octets (characters), including periods.\
              \ To add a longer domain name, specify it in the Subject Alternative\
              \ Name field, which supports names up to 253 octets in length. </p>"
          title: DomainName
        ValidationMethod:
          allOf:
          - $ref: '#/components/schemas/ValidationMethod'
          - description: 'The method you want to use if you are requesting a public
              certificate to validate that you own or control domain. You can <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">validate
              with DNS</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html">validate
              with email</a>. We recommend that you use DNS validation. '
          title: ValidationMethod
        SubjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/DomainList'
          - description: "<p>Additional FQDNs to be included in the Subject Alternative\
              \ Name extension of the ACM certificate. For example, add the name www.example.net\
              \ to a certificate for which the <code>DomainName</code> field is www.example.com\
              \ if users can reach your site by using either name. The maximum number\
              \ of domain names that you can add to an ACM certificate is 100. However,\
              \ the initial quota is 10 domain names. If you need more than 10 names,\
              \ you must request a quota increase. For more information, see <a href=\"\
              https://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html\">Quotas</a>.</p>\
              \ <p> The maximum length of a SAN DNS name is 253 octets. The name is\
              \ made up of multiple labels separated by periods. No label can be longer\
              \ than 63 octets. Consider the following examples: </p> <ul> <li> <p>\
              \ <code>(63 octets).(63 octets).(63 octets).(61 octets)</code> is legal\
              \ because the total length is 253 octets (63+1+63+1+63+1+61) and no\
              \ label exceeds 63 octets.</p> </li> <li> <p> <code>(64 octets).(63\
              \ octets).(63 octets).(61 octets)</code> is not legal because the total\
              \ length exceeds 253 octets (64+1+63+1+63+1+61) and the first label\
              \ exceeds 63 octets.</p> </li> <li> <p> <code>(63 octets).(63 octets).(63\
              \ octets).(62 octets)</code> is not legal because the total length of\
              \ the DNS name (63+1+63+1+63+1+62) exceeds 253 octets.</p> </li> </ul>"
          title: SubjectAlternativeNames
        IdempotencyToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          - description: "Customer chosen string that can be used to distinguish between\
              \ calls to <code>RequestCertificate</code>. Idempotency tokens time\
              \ out after one hour. Therefore, if you call <code>RequestCertificate</code>\
              \ multiple times with the same idempotency token within one hour, ACM\
              \ recognizes that you are requesting only one certificate and will issue\
              \ only one. If you change the idempotency token for each call, ACM recognizes\
              \ that you are requesting multiple certificates."
          title: IdempotencyToken
        DomainValidationOptions:
          allOf:
          - $ref: '#/components/schemas/DomainValidationOptionList'
          - description: The domain name that you want ACM to use to send you emails
              so that you can validate domain ownership.
          title: DomainValidationOptions
        Options:
          $ref: '#/components/schemas/RequestCertificateRequest_Options'
        CertificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/PcaArn'
          - description: "<p>The Amazon Resource Name (ARN) of the private certificate\
              \ authority (CA) that will be used to issue the certificate. If you\
              \ do not provide an ARN and you are trying to request a private certificate,\
              \ ACM will attempt to issue a public certificate. For more information\
              \ about private CAs, see the <a href=\"https://docs.aws.amazon.com/privateca/latest/userguide/PcaWelcome.html\"\
              >Amazon Web Services Private Certificate Authority</a> user guide. The\
              \ ARN must have the following form: </p> <p> <code>arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012</code>\
              \ </p>"
          title: CertificateAuthorityArn
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: One or more resource tags to associate with the certificate.
          title: Tags
        KeyAlgorithm:
          allOf:
          - $ref: '#/components/schemas/KeyAlgorithm'
          - description: "<p>Specifies the algorithm of the public and private key\
              \ pair that your certificate uses to encrypt data. RSA is the default\
              \ key algorithm for ACM certificates. Elliptic Curve Digital Signature\
              \ Algorithm (ECDSA) keys are smaller, offering security comparable to\
              \ RSA keys but with greater computing efficiency. However, ECDSA is\
              \ not supported by all network clients. Some AWS services may require\
              \ RSA keys, or only support ECDSA keys of a particular size, while others\
              \ allow the use of either RSA and ECDSA keys to ensure that compatibility\
              \ is not broken. Check the requirements for the AWS service where you\
              \ plan to deploy your certificate.</p> <p>Default: RSA_2048</p>"
          title: KeyAlgorithm
      required:
      - DomainName
      title: RequestCertificateRequest
      type: object
    InvalidDomainValidationOptionsException: {}
    ResendValidationEmailRequest:
      example:
        Domain: ""
        ValidationDomain: ""
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>String that contains the ARN of the requested certificate.\
              \ The certificate ARN is generated and returned by the <a>RequestCertificate</a>\
              \ action as soon as the request is made. By default, using this parameter\
              \ causes email to be sent to all top-level domains you specified in\
              \ the certificate request. The ARN must be of the form: </p> <p> <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p>"
          title: CertificateArn
        Domain:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: The fully qualified domain name (FQDN) of the certificate
              that needs to be validated.
          title: Domain
        ValidationDomain:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: "<p>The base validation domain that will act as the suffix\
              \ of the email addresses that are used to send the emails. This must\
              \ be the same as the <code>Domain</code> value or a superdomain of the\
              \ <code>Domain</code> value. For example, if you requested a certificate\
              \ for <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b>\
              \ of <code>subdomain.example.com</code>, ACM sends email to the domain\
              \ registrant, technical contact, and administrative contact in WHOIS\
              \ and the following five addresses:</p> <ul> <li> <p>admin@subdomain.example.com</p>\
              \ </li> <li> <p>administrator@subdomain.example.com</p> </li> <li> <p>hostmaster@subdomain.example.com</p>\
              \ </li> <li> <p>postmaster@subdomain.example.com</p> </li> <li> <p>webmaster@subdomain.example.com</p>\
              \ </li> </ul>"
          title: ValidationDomain
      required:
      - CertificateArn
      - Domain
      - ValidationDomain
      title: ResendValidationEmailRequest
      type: object
    InvalidStateException: {}
    UpdateCertificateOptionsRequest:
      example:
        Options:
          CertificateTransparencyLoggingPreference: ""
        CertificateArn: ""
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: <p>ARN of the requested certificate to update. This must
              be of the form:</p> <p> <code>arn:aws:acm:us-east-1:<i>account</i>:certificate/<i>12345678-1234-1234-1234-123456789012</i>
              </code> </p>
          title: CertificateArn
        Options:
          $ref: '#/components/schemas/UpdateCertificateOptionsRequest_Options'
      required:
      - CertificateArn
      - Options
      title: UpdateCertificateOptionsRequest
      type: object
    Arn:
      maxLength: 2048
      minLength: 20
      pattern: "arn:[\\w+=/,.@-]+:acm:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=,.@-]+)*"
      type: string
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      maxItems: 50
      minItems: 1
      type: array
    CertificateBody:
      maxLength: 32768
      minLength: 1
      pattern: "-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\\
        u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\\
        u000D?\\u000A)?"
      type: string
    CertificateBodyBlob:
      maxLength: 32768
      minLength: 1
      type: string
    CertificateChain:
      maxLength: 2097152
      minLength: 1
      pattern: "(-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\\
        u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}\\u000D?\\\
        u000A)*-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\\
        u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\\
        u000D?\\u000A)?"
      type: string
    CertificateChainBlob:
      maxLength: 2097152
      minLength: 1
      type: string
    DomainNameString:
      maxLength: 253
      minLength: 1
      pattern: "^(\\*\\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$"
      title: DomainNameString
      type: string
    DomainList:
      items:
        $ref: '#/components/schemas/DomainNameString'
      maxItems: 100
      minItems: 1
      type: array
    DomainValidationList:
      items:
        $ref: '#/components/schemas/DomainValidation'
      maxItems: 1000
      minItems: 1
      type: array
    String:
      title: String
      type: string
    TStamp:
      format: date-time
      type: string
    CertificateStatus:
      enum:
      - PENDING_VALIDATION
      - ISSUED
      - INACTIVE
      - EXPIRED
      - VALIDATION_TIMED_OUT
      - REVOKED
      - FAILED
      title: CertificateStatus
      type: string
    RevocationReason:
      enum:
      - UNSPECIFIED
      - KEY_COMPROMISE
      - CA_COMPROMISE
      - AFFILIATION_CHANGED
      - SUPERCEDED
      - CESSATION_OF_OPERATION
      - CERTIFICATE_HOLD
      - REMOVE_FROM_CRL
      - PRIVILEGE_WITHDRAWN
      - A_A_COMPROMISE
      title: RevocationReason
      type: string
    KeyAlgorithm:
      enum:
      - RSA_1024
      - RSA_2048
      - RSA_3072
      - RSA_4096
      - EC_prime256v1
      - EC_secp384r1
      - EC_secp521r1
      title: KeyAlgorithm
      type: string
    InUseList:
      items:
        $ref: '#/components/schemas/String'
      type: array
    FailureReason:
      enum:
      - NO_AVAILABLE_CONTACTS
      - ADDITIONAL_VERIFICATION_REQUIRED
      - DOMAIN_NOT_ALLOWED
      - INVALID_PUBLIC_DOMAIN
      - DOMAIN_VALIDATION_DENIED
      - CAA_ERROR
      - PCA_LIMIT_EXCEEDED
      - PCA_INVALID_ARN
      - PCA_INVALID_STATE
      - PCA_REQUEST_FAILED
      - PCA_NAME_CONSTRAINTS_VALIDATION
      - PCA_RESOURCE_NOT_FOUND
      - PCA_INVALID_ARGS
      - PCA_INVALID_DURATION
      - PCA_ACCESS_DENIED
      - SLR_NOT_FOUND
      - OTHER
      title: FailureReason
      type: string
    CertificateType:
      enum:
      - IMPORTED
      - AMAZON_ISSUED
      - PRIVATE
      title: CertificateType
      type: string
    RenewalSummary:
      description: Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed
        renewal</a> for the certificate. This structure exists only when the certificate
        type is <code>AMAZON_ISSUED</code>.
      properties:
        RenewalStatus:
          allOf:
          - $ref: '#/components/schemas/RenewalStatus'
          - description: The status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed
              renewal</a> of the certificate.
          title: RenewalStatus
        DomainValidationOptions:
          allOf:
          - $ref: '#/components/schemas/DomainValidationList'
          - description: "Contains information about the validation of each domain\
              \ name in the certificate, as it pertains to ACM's <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\
              >managed renewal</a>. This is different from the initial validation\
              \ that occurs as a result of the <a>RequestCertificate</a> request.\
              \ This field exists only when the certificate type is <code>AMAZON_ISSUED</code>."
          title: DomainValidationOptions
        RenewalStatusReason:
          allOf:
          - $ref: '#/components/schemas/FailureReason'
          - description: The reason that a renewal request was unsuccessful.
          title: RenewalStatusReason
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time at which the renewal summary was last updated.
          title: UpdatedAt
      required:
      - DomainValidationOptions
      - RenewalStatus
      - UpdatedAt
      title: RenewalSummary
      type: object
    KeyUsageList:
      items:
        $ref: '#/components/schemas/KeyUsage'
      type: array
    ExtendedKeyUsageList:
      items:
        $ref: '#/components/schemas/ExtendedKeyUsage'
      type: array
    RenewalEligibility:
      enum:
      - ELIGIBLE
      - INELIGIBLE
      title: RenewalEligibility
      type: string
    CertificateOptions:
      description: "Structure that contains options for your certificate. Currently,\
        \ you can use this only to specify whether to opt in to or out of certificate\
        \ transparency logging. Some browsers require that public certificates issued\
        \ for your domain be recorded in a log. Certificates that are not logged typically\
        \ generate a browser error. Transparency makes it possible for you to detect\
        \ SSL/TLS certificates that have been mistakenly or maliciously issued for\
        \ your domain. For general information, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency\"\
        >Certificate Transparency Logging</a>. "
      properties:
        CertificateTransparencyLoggingPreference:
          allOf:
          - $ref: '#/components/schemas/CertificateTransparencyLoggingPreference'
          - description: 'You can opt out of certificate transparency logging by specifying
              the <code>DISABLED</code> option. Opt in by specifying <code>ENABLED</code>. '
          title: CertificateTransparencyLoggingPreference
      title: CertificateOptions
      type: object
    CertificateDetail:
      description: 'Contains metadata about an ACM certificate. This structure is
        returned in the response to a <a>DescribeCertificate</a> request. '
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) of the certificate. For more\
              \ information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General\
              \ Reference</i>."
          title: CertificateArn
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: "The fully qualified domain name for the certificate, such\
              \ as www.example.com or example.com."
          title: DomainName
        SubjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/DomainList'
          - description: 'One or more domain names (subject alternative names) included
              in the certificate. This list contains the domain names that are bound
              to the public key that is contained in the certificate. The subject
              alternative names include the canonical domain name (CN) of the certificate
              and additional domain names that can be used to connect to the website. '
          title: SubjectAlternativeNames
        DomainValidationOptions:
          allOf:
          - $ref: '#/components/schemas/DomainValidationList'
          - description: 'Contains information about the initial validation of each
              domain name that occurs as a result of the <a>RequestCertificate</a>
              request. This field exists only when the certificate type is <code>AMAZON_ISSUED</code>. '
          title: DomainValidationOptions
        Serial:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The serial number of the certificate.
          title: Serial
        Subject:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the entity that is associated with the public
              key contained in the certificate.
          title: Subject
        Issuer:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the certificate authority that issued and signed
              the certificate.
          title: Issuer
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time at which the certificate was requested.
          title: CreatedAt
        IssuedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: 'The time at which the certificate was issued. This value
              exists only when the certificate type is <code>AMAZON_ISSUED</code>. '
          title: IssuedAt
        ImportedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: 'The date and time when the certificate was imported. This
              value exists only when the certificate type is <code>IMPORTED</code>. '
          title: ImportedAt
        Status:
          allOf:
          - $ref: '#/components/schemas/CertificateStatus'
          - description: "<p>The status of the certificate.</p> <p>A certificate enters\
              \ status PENDING_VALIDATION upon being requested, unless it fails for\
              \ any of the reasons given in the troubleshooting topic <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html\"\
              >Certificate request fails</a>. ACM makes repeated attempts to validate\
              \ a certificate for 72 hours and then times out. If a certificate shows\
              \ status FAILED or VALIDATION_TIMED_OUT, delete the request, correct\
              \ the issue with <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html\"\
              >DNS validation</a> or <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html\"\
              >Email validation</a>, and try again. If validation succeeds, the certificate\
              \ enters status ISSUED. </p>"
          title: Status
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: 'The time at which the certificate was revoked. This value
              exists only when the certificate status is <code>REVOKED</code>. '
          title: RevokedAt
        RevocationReason:
          allOf:
          - $ref: '#/components/schemas/RevocationReason'
          - description: 'The reason the certificate was revoked. This value exists
              only when the certificate status is <code>REVOKED</code>. '
          title: RevocationReason
        NotBefore:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time before which the certificate is not valid.
          title: NotBefore
        NotAfter:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time after which the certificate is not valid.
          title: NotAfter
        KeyAlgorithm:
          allOf:
          - $ref: '#/components/schemas/KeyAlgorithm'
          - description: The algorithm that was used to generate the public-private
              key pair.
          title: KeyAlgorithm
        SignatureAlgorithm:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The algorithm that was used to sign the certificate.
          title: SignatureAlgorithm
        InUseBy:
          allOf:
          - $ref: '#/components/schemas/InUseList'
          - description: 'A list of ARNs for the Amazon Web Services resources that
              are using the certificate. A certificate can be used by multiple Amazon
              Web Services resources. '
          title: InUseBy
        FailureReason:
          allOf:
          - $ref: '#/components/schemas/FailureReason'
          - description: "The reason the certificate request failed. This value exists\
              \ only when the certificate status is <code>FAILED</code>. For more\
              \ information, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting.html#troubleshooting-failed\"\
              >Certificate Request Failed</a> in the <i>Certificate Manager User Guide</i>. "
          title: FailureReason
        Type:
          allOf:
          - $ref: '#/components/schemas/CertificateType'
          - description: "The source of the certificate. For certificates provided\
              \ by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates\
              \ that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>.\
              \ ACM does not provide <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\
              >managed renewal</a> for imported certificates. For more information\
              \ about the differences between certificates that you import and those\
              \ that ACM provides, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html\"\
              >Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. "
          title: Type
        RenewalSummary:
          $ref: '#/components/schemas/CertificateDetail_RenewalSummary'
        KeyUsages:
          allOf:
          - $ref: '#/components/schemas/KeyUsageList'
          - description: "A list of Key Usage X.509 v3 extension objects. Each object\
              \ is a string value that identifies the purpose of the public key contained\
              \ in the certificate. Possible extension values include DIGITAL_SIGNATURE,\
              \ KEY_ENCHIPHERMENT, NON_REPUDIATION, and more."
          title: KeyUsages
        ExtendedKeyUsages:
          allOf:
          - $ref: '#/components/schemas/ExtendedKeyUsageList'
          - description: 'Contains a list of Extended Key Usage X.509 v3 extension
              objects. Each object specifies a purpose for which the certificate public
              key can be used and consists of a name and an object identifier (OID). '
          title: ExtendedKeyUsages
        CertificateAuthorityArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>The Amazon Resource Name (ARN) of the private certificate\
              \ authority (CA) that issued the certificate. This has the following\
              \ format: </p> <p> <code>arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012</code>\
              \ </p>"
          title: CertificateAuthorityArn
        RenewalEligibility:
          allOf:
          - $ref: '#/components/schemas/RenewalEligibility'
          - description: "Specifies whether the certificate is eligible for renewal.\
              \ At this time, only exported private certificates can be renewed with\
              \ the <a>RenewCertificate</a> command."
          title: RenewalEligibility
        Options:
          $ref: '#/components/schemas/CertificateDetail_Options'
      title: CertificateDetail
      type: object
    CertificateTransparencyLoggingPreference:
      enum:
      - ENABLED
      - DISABLED
      title: CertificateTransparencyLoggingPreference
      type: string
    CertificateStatuses:
      items:
        $ref: '#/components/schemas/CertificateStatus'
      type: array
    NullableBoolean:
      type: boolean
    KeyUsageNames:
      items:
        $ref: '#/components/schemas/KeyUsageName'
      type: array
    ExtendedKeyUsageNames:
      items:
        $ref: '#/components/schemas/ExtendedKeyUsageName'
      type: array
    CertificateSummary:
      description: 'This structure is returned in the response object of <a>ListCertificates</a>
        action. '
      properties:
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "<p>Amazon Resource Name (ARN) of the certificate. This is\
              \ of the form:</p> <p> <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>\
              \ </p> <p>For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >Amazon Resource Names (ARNs)</a>.</p>"
          title: CertificateArn
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: "Fully qualified domain name (FQDN), such as www.example.com\
              \ or example.com, for the certificate."
          title: DomainName
        SubjectAlternativeNameSummaries:
          allOf:
          - $ref: '#/components/schemas/DomainList'
          - description: "<p>One or more domain names (subject alternative names)\
              \ included in the certificate. This list contains the domain names that\
              \ are bound to the public key that is contained in the certificate.\
              \ The subject alternative names include the canonical domain name (CN)\
              \ of the certificate and additional domain names that can be used to\
              \ connect to the website. </p> <p>When called by <a href=\"https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html\"\
              >ListCertificates</a>, this parameter will only return the first 100\
              \ subject alternative names included in the certificate. To display\
              \ the full list of subject alternative names, use <a href=\"https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html\"\
              >DescribeCertificate</a>.</p>"
          title: SubjectAlternativeNameSummaries
        HasAdditionalSubjectAlternativeNames:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          - description: "When called by <a href=\"https://docs.aws.amazon.com/acm/latestAPIReference/API_ListCertificates.html\"\
              >ListCertificates</a>, indicates whether the full list of subject alternative\
              \ names has been included in the response. If false, the response includes\
              \ all of the subject alternative names included in the certificate.\
              \ If true, the response only includes the first 100 subject alternative\
              \ names included in the certificate. To display the full list of subject\
              \ alternative names, use <a href=\"https://docs.aws.amazon.com/acm/latestAPIReference/API_DescribeCertificate.html\"\
              >DescribeCertificate</a>."
          title: HasAdditionalSubjectAlternativeNames
        Status:
          allOf:
          - $ref: '#/components/schemas/CertificateStatus'
          - description: "<p>The status of the certificate.</p> <p>A certificate enters\
              \ status PENDING_VALIDATION upon being requested, unless it fails for\
              \ any of the reasons given in the troubleshooting topic <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html\"\
              >Certificate request fails</a>. ACM makes repeated attempts to validate\
              \ a certificate for 72 hours and then times out. If a certificate shows\
              \ status FAILED or VALIDATION_TIMED_OUT, delete the request, correct\
              \ the issue with <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html\"\
              >DNS validation</a> or <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html\"\
              >Email validation</a>, and try again. If validation succeeds, the certificate\
              \ enters status ISSUED. </p>"
          title: Status
        Type:
          allOf:
          - $ref: '#/components/schemas/CertificateType'
          - description: "The source of the certificate. For certificates provided\
              \ by ACM, this value is <code>AMAZON_ISSUED</code>. For certificates\
              \ that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>.\
              \ ACM does not provide <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\
              >managed renewal</a> for imported certificates. For more information\
              \ about the differences between certificates that you import and those\
              \ that ACM provides, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html\"\
              >Importing Certificates</a> in the <i>Certificate Manager User Guide</i>. "
          title: Type
        KeyAlgorithm:
          allOf:
          - $ref: '#/components/schemas/KeyAlgorithm'
          - description: The algorithm that was used to generate the public-private
              key pair.
          title: KeyAlgorithm
        KeyUsages:
          allOf:
          - $ref: '#/components/schemas/KeyUsageNames'
          - description: "A list of Key Usage X.509 v3 extension objects. Each object\
              \ is a string value that identifies the purpose of the public key contained\
              \ in the certificate. Possible extension values include DIGITAL_SIGNATURE,\
              \ KEY_ENCHIPHERMENT, NON_REPUDIATION, and more."
          title: KeyUsages
        ExtendedKeyUsages:
          allOf:
          - $ref: '#/components/schemas/ExtendedKeyUsageNames'
          - description: 'Contains a list of Extended Key Usage X.509 v3 extension
              objects. Each object specifies a purpose for which the certificate public
              key can be used and consists of a name and an object identifier (OID). '
          title: ExtendedKeyUsages
        InUse:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          - description: Indicates whether the certificate is currently in use by
              any Amazon Web Services resources.
          title: InUse
        Exported:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          - description: Indicates whether the certificate has been exported. This
              value exists only when the certificate type is <code>PRIVATE</code>.
          title: Exported
        RenewalEligibility:
          allOf:
          - $ref: '#/components/schemas/RenewalEligibility'
          - description: "Specifies whether the certificate is eligible for renewal.\
              \ At this time, only exported private certificates can be renewed with\
              \ the <a>RenewCertificate</a> command."
          title: RenewalEligibility
        NotBefore:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time before which the certificate is not valid.
          title: NotBefore
        NotAfter:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time after which the certificate is not valid.
          title: NotAfter
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: The time at which the certificate was requested.
          title: CreatedAt
        IssuedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: 'The time at which the certificate was issued. This value
              exists only when the certificate type is <code>AMAZON_ISSUED</code>. '
          title: IssuedAt
        ImportedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: 'The date and time when the certificate was imported. This
              value exists only when the certificate type is <code>IMPORTED</code>. '
          title: ImportedAt
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/TStamp'
          - description: 'The time at which the certificate was revoked. This value
              exists only when the certificate status is <code>REVOKED</code>. '
          title: RevokedAt
      title: CertificateSummary
      type: object
    CertificateSummaryList:
      items:
        $ref: '#/components/schemas/CertificateSummary'
      type: array
    DomainStatus:
      enum:
      - PENDING_VALIDATION
      - SUCCESS
      - FAILED
      title: DomainStatus
      type: string
    ValidationEmailList:
      items:
        $ref: '#/components/schemas/String'
      type: array
    ResourceRecord:
      description: 'Contains a DNS record value that you can use to validate ownership
        or control of a domain. This is used by the <a>DescribeCertificate</a> action. '
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the DNS record to create in your domain. This
              is supplied by ACM.
          title: Name
        Type:
          allOf:
          - $ref: '#/components/schemas/RecordType'
          - description: The type of DNS record. Currently this can be <code>CNAME</code>.
          title: Type
        Value:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The value of the CNAME record to add to your DNS database.
              This is supplied by ACM.
          title: Value
      required:
      - Name
      - Type
      - Value
      title: ResourceRecord
      type: object
    ValidationMethod:
      enum:
      - EMAIL
      - DNS
      title: ValidationMethod
      type: string
    DomainValidation:
      description: Contains information about the validation of each domain name in
        the certificate.
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: "A fully qualified domain name (FQDN) in the certificate.\
              \ For example, <code>www.example.com</code> or <code>example.com</code>. "
          title: DomainName
        ValidationEmails:
          allOf:
          - $ref: '#/components/schemas/ValidationEmailList'
          - description: A list of email addresses that ACM used to send domain validation
              emails.
          title: ValidationEmails
        ValidationDomain:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: The domain name that ACM used to send domain validation emails.
          title: ValidationDomain
        ValidationStatus:
          allOf:
          - $ref: '#/components/schemas/DomainStatus'
          - description: <p>The validation status of the domain name. This can be
              one of the following values:</p> <ul> <li> <p> <code>PENDING_VALIDATION</code>
              </p> </li> <li> <p> <code/>SUCCESS</p> </li> <li> <p> <code/>FAILED</p>
              </li> </ul>
          title: ValidationStatus
        ResourceRecord:
          $ref: '#/components/schemas/DomainValidation_ResourceRecord'
        ValidationMethod:
          allOf:
          - $ref: '#/components/schemas/ValidationMethod'
          - description: Specifies the domain validation method.
          title: ValidationMethod
      required:
      - DomainName
      title: DomainValidation
      type: object
    DomainValidationOption:
      description: Contains information about the domain names that you want ACM to
        use to send you emails that enable you to validate domain ownership.
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: A fully qualified domain name (FQDN) in the certificate request.
          title: DomainName
        ValidationDomain:
          allOf:
          - $ref: '#/components/schemas/DomainNameString'
          - description: "<p>The domain name that you want ACM to use to send you\
              \ validation emails. This domain name is the suffix of the email addresses\
              \ that you want ACM to use. This must be the same as the <code>DomainName</code>\
              \ value or a superdomain of the <code>DomainName</code> value. For example,\
              \ if you request a certificate for <code>testing.example.com</code>,\
              \ you can specify <code>example.com</code> for this value. In that case,\
              \ ACM sends domain validation emails to the following five addresses:</p>\
              \ <ul> <li> <p>admin@example.com</p> </li> <li> <p>administrator@example.com</p>\
              \ </li> <li> <p>hostmaster@example.com</p> </li> <li> <p>postmaster@example.com</p>\
              \ </li> <li> <p>webmaster@example.com</p> </li> </ul>"
          title: ValidationDomain
      required:
      - DomainName
      - ValidationDomain
      title: DomainValidationOption
      type: object
    DomainValidationOptionList:
      items:
        $ref: '#/components/schemas/DomainValidationOption'
      maxItems: 100
      minItems: 1
      type: array
    PositiveInteger:
      minimum: 1
      type: integer
    ExpiryEventsConfiguration:
      description: Object containing expiration events options associated with an
        Amazon Web Services account.
      properties:
        DaysBeforeExpiry:
          allOf:
          - $ref: '#/components/schemas/PositiveInteger'
          - description: "Specifies the number of days prior to certificate expiration\
              \ when ACM starts generating <code>EventBridge</code> events. ACM sends\
              \ one event per day per certificate until the certificate expires. By\
              \ default, accounts receive events starting 45 days before certificate\
              \ expiration."
          title: DaysBeforeExpiry
      title: ExpiryEventsConfiguration
      type: object
    PassphraseBlob:
      format: password
      maxLength: 128
      minLength: 4
      type: string
    PrivateKey:
      format: password
      maxLength: 524288
      minLength: 1
      pattern: "-{5}BEGIN PRIVATE KEY-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\\
        u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END PRIVATE KEY-{5}(\\\
        u000D?\\u000A)?"
      type: string
    ExtendedKeyUsageName:
      enum:
      - TLS_WEB_SERVER_AUTHENTICATION
      - TLS_WEB_CLIENT_AUTHENTICATION
      - CODE_SIGNING
      - EMAIL_PROTECTION
      - TIME_STAMPING
      - OCSP_SIGNING
      - IPSEC_END_SYSTEM
      - IPSEC_TUNNEL
      - IPSEC_USER
      - ANY
      - NONE
      - CUSTOM
      title: ExtendedKeyUsageName
      type: string
    ExtendedKeyUsage:
      description: 'The Extended Key Usage X.509 v3 extension defines one or more
        purposes for which the public key can be used. This is in addition to or in
        place of the basic purposes specified by the Key Usage extension. '
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ExtendedKeyUsageName'
          - description: The name of an Extended Key Usage value.
          title: Name
        OID:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: <p>An object identifier (OID) for the extension value. OIDs
              are strings of numbers separated by periods. The following OIDs are
              defined in RFC 3280 and RFC 5280. </p> <ul> <li> <p> <code>1.3.6.1.5.5.7.3.1
              (TLS_WEB_SERVER_AUTHENTICATION)</code> </p> </li> <li> <p> <code>1.3.6.1.5.5.7.3.2
              (TLS_WEB_CLIENT_AUTHENTICATION)</code> </p> </li> <li> <p> <code>1.3.6.1.5.5.7.3.3
              (CODE_SIGNING)</code> </p> </li> <li> <p> <code>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</code>
              </p> </li> <li> <p> <code>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</code> </p>
              </li> <li> <p> <code>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</code> </p> </li>
              <li> <p> <code>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</code> </p> </li>
              <li> <p> <code>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</code> </p> </li> <li>
              <p> <code>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</code> </p> </li> </ul>
          title: OID
      title: ExtendedKeyUsage
      type: object
    ExtendedKeyUsageFilterList:
      items:
        $ref: '#/components/schemas/ExtendedKeyUsageName'
      type: array
    KeyUsageFilterList:
      items:
        $ref: '#/components/schemas/KeyUsageName'
      type: array
    KeyAlgorithmList:
      items:
        $ref: '#/components/schemas/KeyAlgorithm'
      type: array
    Filters:
      description: 'This structure can be used in the <a>ListCertificates</a> action
        to filter the output of the certificate list. '
      properties:
        extendedKeyUsage:
          allOf:
          - $ref: '#/components/schemas/ExtendedKeyUsageFilterList'
          - description: Specify one or more <a>ExtendedKeyUsage</a> extension values.
          title: extendedKeyUsage
        keyUsage:
          allOf:
          - $ref: '#/components/schemas/KeyUsageFilterList'
          - description: Specify one or more <a>KeyUsage</a> extension values.
          title: keyUsage
        keyTypes:
          allOf:
          - $ref: '#/components/schemas/KeyAlgorithmList'
          - description: "<p>Specify one or more algorithms that can be used to generate\
              \ key pairs.</p> <p>Default filtering returns only <code>RSA_1024</code>\
              \ and <code>RSA_2048</code> certificates that have at least one domain.\
              \ To return other certificate types, provide the desired type signatures\
              \ in a comma-separated list. For example, <code>\"keyTypes\": [\"RSA_2048\"\
              ,\"RSA_4096\"]</code> returns both <code>RSA_2048</code> and <code>RSA_4096</code>\
              \ certificates.</p>"
          title: keyTypes
      title: Filters
      type: object
    IdempotencyToken:
      maxLength: 32
      minLength: 1
      pattern: \w+
      type: string
    PrivateKeyBlob:
      format: password
      maxLength: 5120
      minLength: 1
      type: string
    KeyUsageName:
      enum:
      - DIGITAL_SIGNATURE
      - NON_REPUDIATION
      - KEY_ENCIPHERMENT
      - DATA_ENCIPHERMENT
      - KEY_AGREEMENT
      - CERTIFICATE_SIGNING
      - CRL_SIGNING
      - ENCIPHER_ONLY
      - DECIPHER_ONLY
      - ANY
      - CUSTOM
      title: KeyUsageName
      type: string
    KeyUsage:
      description: The Key Usage X.509 v3 extension defines the purpose of the public
        key contained in the certificate.
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/KeyUsageName'
          - description: A string value that contains a Key Usage extension name.
          title: Name
      title: KeyUsage
      type: object
    NextToken:
      maxLength: 10000
      minLength: 1
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*"
      type: string
    MaxItems:
      maximum: 1000
      minimum: 1
      type: integer
    SortBy:
      enum:
      - CREATED_AT
      title: SortBy
      type: string
    SortOrder:
      enum:
      - ASCENDING
      - DESCENDING
      title: SortOrder
      type: string
    PcaArn:
      maxLength: 2048
      minLength: 20
      pattern: "arn:[\\w+=/,.@-]+:acm-pca:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=,.@-]+)*"
      type: string
    RecordType:
      enum:
      - CNAME
      title: RecordType
      type: string
    RenewalStatus:
      enum:
      - PENDING_AUTO_RENEWAL
      - PENDING_VALIDATION
      - SUCCESS
      - FAILED
      title: RenewalStatus
      type: string
    TagKey:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*"
      type: string
    TagValue:
      maxLength: 256
      minLength: 0
      pattern: "[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*"
      type: string
    Tag:
      description: A key-value pair that identifies or specifies metadata about an
        ACM resource.
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: The key of the tag.
          title: Key
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: The value of the tag.
          title: Value
      required:
      - Key
      title: Tag
      type: object
    DescribeCertificateResponse_Certificate:
      allOf:
      - $ref: '#/components/schemas/CertificateDetail'
      - description: Metadata about an ACM certificate.
      example:
        Options:
          CertificateTransparencyLoggingPreference: ""
        Issuer: ""
        InUseBy: ""
        CreatedAt: ""
        SignatureAlgorithm: ""
        NotAfter: ""
        RenewalEligibility: ""
        RevokedAt: ""
        KeyUsages: ""
        DomainValidationOptions: ""
        Status: ""
        RevocationReason: ""
        IssuedAt: ""
        DomainName: ""
        SubjectAlternativeNames: ""
        ExtendedKeyUsages: ""
        Subject: ""
        KeyAlgorithm: ""
        ImportedAt: ""
        CertificateAuthorityArn: ""
        Serial: ""
        Type: ""
        RenewalSummary:
          DomainValidationOptions: ""
          RenewalStatusReason: ""
          RenewalStatus: ""
          UpdatedAt: ""
        FailureReason: ""
        NotBefore: ""
        CertificateArn: ""
      title: DescribeCertificateResponse_Certificate
    GetAccountConfigurationResponse_ExpiryEvents:
      allOf:
      - $ref: '#/components/schemas/ExpiryEventsConfiguration'
      - description: Expiration events configuration options associated with the Amazon
          Web Services account.
      example:
        DaysBeforeExpiry: ""
      title: GetAccountConfigurationResponse_ExpiryEvents
    ListCertificatesRequest_Includes:
      allOf:
      - $ref: '#/components/schemas/Filters'
      - description: "Filter the certificate list. For more information, see the <a>Filters</a>\
          \ structure."
      example:
        keyUsage: ""
        extendedKeyUsage: ""
        keyTypes: ""
      title: ListCertificatesRequest_Includes
    PutAccountConfigurationRequest_ExpiryEvents:
      allOf:
      - $ref: '#/components/schemas/ExpiryEventsConfiguration'
      - description: Specifies expiration events associated with an account.
      example:
        DaysBeforeExpiry: ""
      title: PutAccountConfigurationRequest_ExpiryEvents
    RequestCertificateRequest_Options:
      allOf:
      - $ref: '#/components/schemas/CertificateOptions'
      - description: "Currently, you can use this parameter to specify whether to\
          \ add the certificate to a certificate transparency log. Certificate transparency\
          \ makes it possible to detect SSL/TLS certificates that have been mistakenly\
          \ or maliciously issued. Certificates that have not been logged typically\
          \ produce an error message in a browser. For more information, see <a href=\"\
          https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency\"\
          >Opting Out of Certificate Transparency Logging</a>."
      example:
        CertificateTransparencyLoggingPreference: ""
      title: RequestCertificateRequest_Options
    UpdateCertificateOptionsRequest_Options:
      allOf:
      - $ref: '#/components/schemas/CertificateOptions'
      - description: "Use to update the options for your certificate. Currently, you\
          \ can specify whether to add your certificate to a transparency log. Certificate\
          \ transparency makes it possible to detect SSL/TLS certificates that have\
          \ been mistakenly or maliciously issued. Certificates that have not been\
          \ logged typically produce an error message in a browser. "
      example:
        CertificateTransparencyLoggingPreference: ""
      title: UpdateCertificateOptionsRequest_Options
    CertificateDetail_RenewalSummary:
      allOf:
      - $ref: '#/components/schemas/RenewalSummary'
      - description: Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed
          renewal</a> for the certificate. This field exists only when the certificate
          type is <code>AMAZON_ISSUED</code>.
      example:
        DomainValidationOptions: ""
        RenewalStatusReason: ""
        RenewalStatus: ""
        UpdatedAt: ""
      title: CertificateDetail_RenewalSummary
    CertificateDetail_Options:
      allOf:
      - $ref: '#/components/schemas/CertificateOptions'
      - description: 'Value that specifies whether to add the certificate to a transparency
          log. Certificate transparency makes it possible to detect SSL certificates
          that have been mistakenly or maliciously issued. A browser might respond
          to certificate that has not been logged by showing an error message. The
          logs are cryptographically secure. '
      example:
        CertificateTransparencyLoggingPreference: ""
      title: CertificateDetail_Options
    DomainValidation_ResourceRecord:
      allOf:
      - $ref: '#/components/schemas/ResourceRecord'
      - description: "<p>Contains the CNAME record that you add to your DNS database\
          \ for domain validation. For more information, see <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html\"\
          >Use DNS to Validate Domain Ownership</a>.</p> <p>Note: The CNAME information\
          \ that you need does not include the name of your domain. If you include&#x2028;\
          \ your domain name in the DNS database CNAME record, validation fails.&#x2028;\
          \ For example, if the name is \"_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com\"\
          , only \"_a79865eb4cd1a6ab990a45779b4e0b96\" must be used.</p>"
      title: DomainValidation_ResourceRecord
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
