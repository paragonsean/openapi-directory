/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResendValidationEmailRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResendValidationEmailRequest::OAIResendValidationEmailRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResendValidationEmailRequest::OAIResendValidationEmailRequest() {
    this->initializeModel();
}

OAIResendValidationEmailRequest::~OAIResendValidationEmailRequest() {}

void OAIResendValidationEmailRequest::initializeModel() {

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_validation_domain_isSet = false;
    m_validation_domain_isValid = false;
}

void OAIResendValidationEmailRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResendValidationEmailRequest::fromJsonObject(QJsonObject json) {

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("CertificateArn")]);
    m_certificate_arn_isSet = !json[QString("CertificateArn")].isNull() && m_certificate_arn_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_validation_domain_isValid = ::OpenAPI::fromJsonValue(m_validation_domain, json[QString("ValidationDomain")]);
    m_validation_domain_isSet = !json[QString("ValidationDomain")].isNull() && m_validation_domain_isValid;
}

QString OAIResendValidationEmailRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResendValidationEmailRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_arn_isSet) {
        obj.insert(QString("CertificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_validation_domain_isSet) {
        obj.insert(QString("ValidationDomain"), ::OpenAPI::toJsonValue(m_validation_domain));
    }
    return obj;
}

QString OAIResendValidationEmailRequest::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIResendValidationEmailRequest::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIResendValidationEmailRequest::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIResendValidationEmailRequest::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QString OAIResendValidationEmailRequest::getDomain() const {
    return m_domain;
}
void OAIResendValidationEmailRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIResendValidationEmailRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIResendValidationEmailRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIResendValidationEmailRequest::getValidationDomain() const {
    return m_validation_domain;
}
void OAIResendValidationEmailRequest::setValidationDomain(const QString &validation_domain) {
    m_validation_domain = validation_domain;
    m_validation_domain_isSet = true;
}

bool OAIResendValidationEmailRequest::is_validation_domain_Set() const{
    return m_validation_domain_isSet;
}

bool OAIResendValidationEmailRequest::is_validation_domain_Valid() const{
    return m_validation_domain_isValid;
}

bool OAIResendValidationEmailRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResendValidationEmailRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_arn_isValid && m_domain_isValid && m_validation_domain_isValid && true;
}

} // namespace OpenAPI
