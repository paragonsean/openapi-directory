/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCertificatesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCertificatesRequest::OAIListCertificatesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCertificatesRequest::OAIListCertificatesRequest() {
    this->initializeModel();
}

OAIListCertificatesRequest::~OAIListCertificatesRequest() {}

void OAIListCertificatesRequest::initializeModel() {

    m_certificate_statuses_isSet = false;
    m_certificate_statuses_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListCertificatesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCertificatesRequest::fromJsonObject(QJsonObject json) {

    m_certificate_statuses_isValid = ::OpenAPI::fromJsonValue(m_certificate_statuses, json[QString("CertificateStatuses")]);
    m_certificate_statuses_isSet = !json[QString("CertificateStatuses")].isNull() && m_certificate_statuses_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("Includes")]);
    m_includes_isSet = !json[QString("Includes")].isNull() && m_includes_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListCertificatesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCertificatesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_statuses.isSet()) {
        obj.insert(QString("CertificateStatuses"), ::OpenAPI::toJsonValue(m_certificate_statuses));
    }
    if (m_includes.isSet()) {
        obj.insert(QString("Includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QList OAIListCertificatesRequest::getCertificateStatuses() const {
    return m_certificate_statuses;
}
void OAIListCertificatesRequest::setCertificateStatuses(const QList &certificate_statuses) {
    m_certificate_statuses = certificate_statuses;
    m_certificate_statuses_isSet = true;
}

bool OAIListCertificatesRequest::is_certificate_statuses_Set() const{
    return m_certificate_statuses_isSet;
}

bool OAIListCertificatesRequest::is_certificate_statuses_Valid() const{
    return m_certificate_statuses_isValid;
}

OAIListCertificatesRequest_Includes OAIListCertificatesRequest::getIncludes() const {
    return m_includes;
}
void OAIListCertificatesRequest::setIncludes(const OAIListCertificatesRequest_Includes &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIListCertificatesRequest::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIListCertificatesRequest::is_includes_Valid() const{
    return m_includes_isValid;
}

QString OAIListCertificatesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListCertificatesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCertificatesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCertificatesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListCertificatesRequest::getMaxItems() const {
    return m_max_items;
}
void OAIListCertificatesRequest::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListCertificatesRequest::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListCertificatesRequest::is_max_items_Valid() const{
    return m_max_items_isValid;
}

OAISortBy OAIListCertificatesRequest::getSortBy() const {
    return m_sort_by;
}
void OAIListCertificatesRequest::setSortBy(const OAISortBy &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListCertificatesRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListCertificatesRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListCertificatesRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListCertificatesRequest::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListCertificatesRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListCertificatesRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListCertificatesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCertificatesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
