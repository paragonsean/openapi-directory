/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyAlgorithm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyAlgorithm::OAIKeyAlgorithm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyAlgorithm::OAIKeyAlgorithm() {
    this->initializeModel();
}

OAIKeyAlgorithm::~OAIKeyAlgorithm() {}

void OAIKeyAlgorithm::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIKeyAlgorithm::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIKeyAlgorithm::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RSA_1024", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::RSA_1024;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RSA_2048", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::RSA_2048;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RSA_3072", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::RSA_3072;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RSA_4096", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::RSA_4096;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC_prime256v1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::EC_PRIME256V1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC_secp384r1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::EC_SECP384R1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC_secp521r1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyAlgorithm::EC_SECP521R1;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIKeyAlgorithm::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIKeyAlgorithm::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIKeyAlgorithm::RSA_1024:
            val = "RSA_1024";
            break;
        case eOAIKeyAlgorithm::RSA_2048:
            val = "RSA_2048";
            break;
        case eOAIKeyAlgorithm::RSA_3072:
            val = "RSA_3072";
            break;
        case eOAIKeyAlgorithm::RSA_4096:
            val = "RSA_4096";
            break;
        case eOAIKeyAlgorithm::EC_PRIME256V1:
            val = "EC_prime256v1";
            break;
        case eOAIKeyAlgorithm::EC_SECP384R1:
            val = "EC_secp384r1";
            break;
        case eOAIKeyAlgorithm::EC_SECP521R1:
            val = "EC_secp521r1";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIKeyAlgorithm::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIKeyAlgorithm::eOAIKeyAlgorithm OAIKeyAlgorithm::getValue() const {
    return m_value;
}

void OAIKeyAlgorithm::setValue(const OAIKeyAlgorithm::eOAIKeyAlgorithm& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIKeyAlgorithm::isSet() const {
    
    return m_value_isSet;
}

bool OAIKeyAlgorithm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
