/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestCertificateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestCertificateRequest::OAIRequestCertificateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestCertificateRequest::OAIRequestCertificateRequest() {
    this->initializeModel();
}

OAIRequestCertificateRequest::~OAIRequestCertificateRequest() {}

void OAIRequestCertificateRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_validation_method_isSet = false;
    m_validation_method_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;

    m_domain_validation_options_isSet = false;
    m_domain_validation_options_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_certificate_authority_arn_isSet = false;
    m_certificate_authority_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_key_algorithm_isSet = false;
    m_key_algorithm_isValid = false;
}

void OAIRequestCertificateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestCertificateRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_validation_method_isValid = ::OpenAPI::fromJsonValue(m_validation_method, json[QString("ValidationMethod")]);
    m_validation_method_isSet = !json[QString("ValidationMethod")].isNull() && m_validation_method_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("SubjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("SubjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;

    m_domain_validation_options_isValid = ::OpenAPI::fromJsonValue(m_domain_validation_options, json[QString("DomainValidationOptions")]);
    m_domain_validation_options_isSet = !json[QString("DomainValidationOptions")].isNull() && m_domain_validation_options_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_certificate_authority_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_arn, json[QString("CertificateAuthorityArn")]);
    m_certificate_authority_arn_isSet = !json[QString("CertificateAuthorityArn")].isNull() && m_certificate_authority_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_key_algorithm_isValid = ::OpenAPI::fromJsonValue(m_key_algorithm, json[QString("KeyAlgorithm")]);
    m_key_algorithm_isSet = !json[QString("KeyAlgorithm")].isNull() && m_key_algorithm_isValid;
}

QString OAIRequestCertificateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestCertificateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_validation_method.isSet()) {
        obj.insert(QString("ValidationMethod"), ::OpenAPI::toJsonValue(m_validation_method));
    }
    if (m_subject_alternative_names.isSet()) {
        obj.insert(QString("SubjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    if (m_domain_validation_options.isSet()) {
        obj.insert(QString("DomainValidationOptions"), ::OpenAPI::toJsonValue(m_domain_validation_options));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_certificate_authority_arn_isSet) {
        obj.insert(QString("CertificateAuthorityArn"), ::OpenAPI::toJsonValue(m_certificate_authority_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_key_algorithm.isSet()) {
        obj.insert(QString("KeyAlgorithm"), ::OpenAPI::toJsonValue(m_key_algorithm));
    }
    return obj;
}

QString OAIRequestCertificateRequest::getDomainName() const {
    return m_domain_name;
}
void OAIRequestCertificateRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIRequestCertificateRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIRequestCertificateRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIValidationMethod OAIRequestCertificateRequest::getValidationMethod() const {
    return m_validation_method;
}
void OAIRequestCertificateRequest::setValidationMethod(const OAIValidationMethod &validation_method) {
    m_validation_method = validation_method;
    m_validation_method_isSet = true;
}

bool OAIRequestCertificateRequest::is_validation_method_Set() const{
    return m_validation_method_isSet;
}

bool OAIRequestCertificateRequest::is_validation_method_Valid() const{
    return m_validation_method_isValid;
}

QList OAIRequestCertificateRequest::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAIRequestCertificateRequest::setSubjectAlternativeNames(const QList &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAIRequestCertificateRequest::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAIRequestCertificateRequest::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

QString OAIRequestCertificateRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIRequestCertificateRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIRequestCertificateRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIRequestCertificateRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

QList OAIRequestCertificateRequest::getDomainValidationOptions() const {
    return m_domain_validation_options;
}
void OAIRequestCertificateRequest::setDomainValidationOptions(const QList &domain_validation_options) {
    m_domain_validation_options = domain_validation_options;
    m_domain_validation_options_isSet = true;
}

bool OAIRequestCertificateRequest::is_domain_validation_options_Set() const{
    return m_domain_validation_options_isSet;
}

bool OAIRequestCertificateRequest::is_domain_validation_options_Valid() const{
    return m_domain_validation_options_isValid;
}

OAIRequestCertificateRequest_Options OAIRequestCertificateRequest::getOptions() const {
    return m_options;
}
void OAIRequestCertificateRequest::setOptions(const OAIRequestCertificateRequest_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIRequestCertificateRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAIRequestCertificateRequest::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIRequestCertificateRequest::getCertificateAuthorityArn() const {
    return m_certificate_authority_arn;
}
void OAIRequestCertificateRequest::setCertificateAuthorityArn(const QString &certificate_authority_arn) {
    m_certificate_authority_arn = certificate_authority_arn;
    m_certificate_authority_arn_isSet = true;
}

bool OAIRequestCertificateRequest::is_certificate_authority_arn_Set() const{
    return m_certificate_authority_arn_isSet;
}

bool OAIRequestCertificateRequest::is_certificate_authority_arn_Valid() const{
    return m_certificate_authority_arn_isValid;
}

QList OAIRequestCertificateRequest::getTags() const {
    return m_tags;
}
void OAIRequestCertificateRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRequestCertificateRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRequestCertificateRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIKeyAlgorithm OAIRequestCertificateRequest::getKeyAlgorithm() const {
    return m_key_algorithm;
}
void OAIRequestCertificateRequest::setKeyAlgorithm(const OAIKeyAlgorithm &key_algorithm) {
    m_key_algorithm = key_algorithm;
    m_key_algorithm_isSet = true;
}

bool OAIRequestCertificateRequest::is_key_algorithm_Set() const{
    return m_key_algorithm_isSet;
}

bool OAIRequestCertificateRequest::is_key_algorithm_Valid() const{
    return m_key_algorithm_isValid;
}

bool OAIRequestCertificateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_validation_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_authority_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestCertificateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
