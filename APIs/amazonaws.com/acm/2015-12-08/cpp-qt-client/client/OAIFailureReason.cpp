/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailureReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailureReason::OAIFailureReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailureReason::OAIFailureReason() {
    this->initializeModel();
}

OAIFailureReason::~OAIFailureReason() {}

void OAIFailureReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFailureReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFailureReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NO_AVAILABLE_CONTACTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::NO_AVAILABLE_CONTACTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDITIONAL_VERIFICATION_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::ADDITIONAL_VERIFICATION_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOMAIN_NOT_ALLOWED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::DOMAIN_NOT_ALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_PUBLIC_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::INVALID_PUBLIC_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOMAIN_VALIDATION_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::DOMAIN_VALIDATION_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CAA_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::CAA_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_LIMIT_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_LIMIT_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_INVALID_ARN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_INVALID_ARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_INVALID_STATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_INVALID_STATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_REQUEST_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_REQUEST_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_NAME_CONSTRAINTS_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_NAME_CONSTRAINTS_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_RESOURCE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_RESOURCE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_INVALID_ARGS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_INVALID_ARGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_INVALID_DURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_INVALID_DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PCA_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::PCA_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SLR_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::SLR_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFailureReason::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFailureReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFailureReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFailureReason::NO_AVAILABLE_CONTACTS:
            val = "NO_AVAILABLE_CONTACTS";
            break;
        case eOAIFailureReason::ADDITIONAL_VERIFICATION_REQUIRED:
            val = "ADDITIONAL_VERIFICATION_REQUIRED";
            break;
        case eOAIFailureReason::DOMAIN_NOT_ALLOWED:
            val = "DOMAIN_NOT_ALLOWED";
            break;
        case eOAIFailureReason::INVALID_PUBLIC_DOMAIN:
            val = "INVALID_PUBLIC_DOMAIN";
            break;
        case eOAIFailureReason::DOMAIN_VALIDATION_DENIED:
            val = "DOMAIN_VALIDATION_DENIED";
            break;
        case eOAIFailureReason::CAA_ERROR:
            val = "CAA_ERROR";
            break;
        case eOAIFailureReason::PCA_LIMIT_EXCEEDED:
            val = "PCA_LIMIT_EXCEEDED";
            break;
        case eOAIFailureReason::PCA_INVALID_ARN:
            val = "PCA_INVALID_ARN";
            break;
        case eOAIFailureReason::PCA_INVALID_STATE:
            val = "PCA_INVALID_STATE";
            break;
        case eOAIFailureReason::PCA_REQUEST_FAILED:
            val = "PCA_REQUEST_FAILED";
            break;
        case eOAIFailureReason::PCA_NAME_CONSTRAINTS_VALIDATION:
            val = "PCA_NAME_CONSTRAINTS_VALIDATION";
            break;
        case eOAIFailureReason::PCA_RESOURCE_NOT_FOUND:
            val = "PCA_RESOURCE_NOT_FOUND";
            break;
        case eOAIFailureReason::PCA_INVALID_ARGS:
            val = "PCA_INVALID_ARGS";
            break;
        case eOAIFailureReason::PCA_INVALID_DURATION:
            val = "PCA_INVALID_DURATION";
            break;
        case eOAIFailureReason::PCA_ACCESS_DENIED:
            val = "PCA_ACCESS_DENIED";
            break;
        case eOAIFailureReason::SLR_NOT_FOUND:
            val = "SLR_NOT_FOUND";
            break;
        case eOAIFailureReason::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFailureReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFailureReason::eOAIFailureReason OAIFailureReason::getValue() const {
    return m_value;
}

void OAIFailureReason::setValue(const OAIFailureReason::eOAIFailureReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFailureReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIFailureReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
