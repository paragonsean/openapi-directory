/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateDetail_RenewalSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateDetail_RenewalSummary::OAICertificateDetail_RenewalSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateDetail_RenewalSummary::OAICertificateDetail_RenewalSummary() {
    this->initializeModel();
}

OAICertificateDetail_RenewalSummary::~OAICertificateDetail_RenewalSummary() {}

void OAICertificateDetail_RenewalSummary::initializeModel() {

    m_renewal_status_isSet = false;
    m_renewal_status_isValid = false;

    m_domain_validation_options_isSet = false;
    m_domain_validation_options_isValid = false;

    m_renewal_status_reason_isSet = false;
    m_renewal_status_reason_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICertificateDetail_RenewalSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateDetail_RenewalSummary::fromJsonObject(QJsonObject json) {

    m_renewal_status_isValid = ::OpenAPI::fromJsonValue(m_renewal_status, json[QString("RenewalStatus")]);
    m_renewal_status_isSet = !json[QString("RenewalStatus")].isNull() && m_renewal_status_isValid;

    m_domain_validation_options_isValid = ::OpenAPI::fromJsonValue(m_domain_validation_options, json[QString("DomainValidationOptions")]);
    m_domain_validation_options_isSet = !json[QString("DomainValidationOptions")].isNull() && m_domain_validation_options_isValid;

    m_renewal_status_reason_isValid = ::OpenAPI::fromJsonValue(m_renewal_status_reason, json[QString("RenewalStatusReason")]);
    m_renewal_status_reason_isSet = !json[QString("RenewalStatusReason")].isNull() && m_renewal_status_reason_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;
}

QString OAICertificateDetail_RenewalSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateDetail_RenewalSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_renewal_status.isSet()) {
        obj.insert(QString("RenewalStatus"), ::OpenAPI::toJsonValue(m_renewal_status));
    }
    if (m_domain_validation_options.isSet()) {
        obj.insert(QString("DomainValidationOptions"), ::OpenAPI::toJsonValue(m_domain_validation_options));
    }
    if (m_renewal_status_reason.isSet()) {
        obj.insert(QString("RenewalStatusReason"), ::OpenAPI::toJsonValue(m_renewal_status_reason));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIRenewalStatus OAICertificateDetail_RenewalSummary::getRenewalStatus() const {
    return m_renewal_status;
}
void OAICertificateDetail_RenewalSummary::setRenewalStatus(const OAIRenewalStatus &renewal_status) {
    m_renewal_status = renewal_status;
    m_renewal_status_isSet = true;
}

bool OAICertificateDetail_RenewalSummary::is_renewal_status_Set() const{
    return m_renewal_status_isSet;
}

bool OAICertificateDetail_RenewalSummary::is_renewal_status_Valid() const{
    return m_renewal_status_isValid;
}

QList OAICertificateDetail_RenewalSummary::getDomainValidationOptions() const {
    return m_domain_validation_options;
}
void OAICertificateDetail_RenewalSummary::setDomainValidationOptions(const QList &domain_validation_options) {
    m_domain_validation_options = domain_validation_options;
    m_domain_validation_options_isSet = true;
}

bool OAICertificateDetail_RenewalSummary::is_domain_validation_options_Set() const{
    return m_domain_validation_options_isSet;
}

bool OAICertificateDetail_RenewalSummary::is_domain_validation_options_Valid() const{
    return m_domain_validation_options_isValid;
}

OAIFailureReason OAICertificateDetail_RenewalSummary::getRenewalStatusReason() const {
    return m_renewal_status_reason;
}
void OAICertificateDetail_RenewalSummary::setRenewalStatusReason(const OAIFailureReason &renewal_status_reason) {
    m_renewal_status_reason = renewal_status_reason;
    m_renewal_status_reason_isSet = true;
}

bool OAICertificateDetail_RenewalSummary::is_renewal_status_reason_Set() const{
    return m_renewal_status_reason_isSet;
}

bool OAICertificateDetail_RenewalSummary::is_renewal_status_reason_Valid() const{
    return m_renewal_status_reason_isValid;
}

QDateTime OAICertificateDetail_RenewalSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAICertificateDetail_RenewalSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICertificateDetail_RenewalSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICertificateDetail_RenewalSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICertificateDetail_RenewalSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_renewal_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_validation_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_status_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateDetail_RenewalSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_renewal_status_isValid && m_domain_validation_options_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
