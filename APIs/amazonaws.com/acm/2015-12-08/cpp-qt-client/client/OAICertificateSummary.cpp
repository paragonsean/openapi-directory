/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateSummary::OAICertificateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateSummary::OAICertificateSummary() {
    this->initializeModel();
}

OAICertificateSummary::~OAICertificateSummary() {}

void OAICertificateSummary::initializeModel() {

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_subject_alternative_name_summaries_isSet = false;
    m_subject_alternative_name_summaries_isValid = false;

    m_has_additional_subject_alternative_names_isSet = false;
    m_has_additional_subject_alternative_names_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_key_algorithm_isSet = false;
    m_key_algorithm_isValid = false;

    m_key_usages_isSet = false;
    m_key_usages_isValid = false;

    m_extended_key_usages_isSet = false;
    m_extended_key_usages_isValid = false;

    m_in_use_isSet = false;
    m_in_use_isValid = false;

    m_exported_isSet = false;
    m_exported_isValid = false;

    m_renewal_eligibility_isSet = false;
    m_renewal_eligibility_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_not_after_isSet = false;
    m_not_after_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_imported_at_isSet = false;
    m_imported_at_isValid = false;

    m_revoked_at_isSet = false;
    m_revoked_at_isValid = false;
}

void OAICertificateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateSummary::fromJsonObject(QJsonObject json) {

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("CertificateArn")]);
    m_certificate_arn_isSet = !json[QString("CertificateArn")].isNull() && m_certificate_arn_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_subject_alternative_name_summaries_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_name_summaries, json[QString("SubjectAlternativeNameSummaries")]);
    m_subject_alternative_name_summaries_isSet = !json[QString("SubjectAlternativeNameSummaries")].isNull() && m_subject_alternative_name_summaries_isValid;

    m_has_additional_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_has_additional_subject_alternative_names, json[QString("HasAdditionalSubjectAlternativeNames")]);
    m_has_additional_subject_alternative_names_isSet = !json[QString("HasAdditionalSubjectAlternativeNames")].isNull() && m_has_additional_subject_alternative_names_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_key_algorithm_isValid = ::OpenAPI::fromJsonValue(m_key_algorithm, json[QString("KeyAlgorithm")]);
    m_key_algorithm_isSet = !json[QString("KeyAlgorithm")].isNull() && m_key_algorithm_isValid;

    m_key_usages_isValid = ::OpenAPI::fromJsonValue(m_key_usages, json[QString("KeyUsages")]);
    m_key_usages_isSet = !json[QString("KeyUsages")].isNull() && m_key_usages_isValid;

    m_extended_key_usages_isValid = ::OpenAPI::fromJsonValue(m_extended_key_usages, json[QString("ExtendedKeyUsages")]);
    m_extended_key_usages_isSet = !json[QString("ExtendedKeyUsages")].isNull() && m_extended_key_usages_isValid;

    m_in_use_isValid = ::OpenAPI::fromJsonValue(m_in_use, json[QString("InUse")]);
    m_in_use_isSet = !json[QString("InUse")].isNull() && m_in_use_isValid;

    m_exported_isValid = ::OpenAPI::fromJsonValue(m_exported, json[QString("Exported")]);
    m_exported_isSet = !json[QString("Exported")].isNull() && m_exported_isValid;

    m_renewal_eligibility_isValid = ::OpenAPI::fromJsonValue(m_renewal_eligibility, json[QString("RenewalEligibility")]);
    m_renewal_eligibility_isSet = !json[QString("RenewalEligibility")].isNull() && m_renewal_eligibility_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("NotBefore")]);
    m_not_before_isSet = !json[QString("NotBefore")].isNull() && m_not_before_isValid;

    m_not_after_isValid = ::OpenAPI::fromJsonValue(m_not_after, json[QString("NotAfter")]);
    m_not_after_isSet = !json[QString("NotAfter")].isNull() && m_not_after_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("IssuedAt")]);
    m_issued_at_isSet = !json[QString("IssuedAt")].isNull() && m_issued_at_isValid;

    m_imported_at_isValid = ::OpenAPI::fromJsonValue(m_imported_at, json[QString("ImportedAt")]);
    m_imported_at_isSet = !json[QString("ImportedAt")].isNull() && m_imported_at_isValid;

    m_revoked_at_isValid = ::OpenAPI::fromJsonValue(m_revoked_at, json[QString("RevokedAt")]);
    m_revoked_at_isSet = !json[QString("RevokedAt")].isNull() && m_revoked_at_isValid;
}

QString OAICertificateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_arn_isSet) {
        obj.insert(QString("CertificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_subject_alternative_name_summaries.isSet()) {
        obj.insert(QString("SubjectAlternativeNameSummaries"), ::OpenAPI::toJsonValue(m_subject_alternative_name_summaries));
    }
    if (m_has_additional_subject_alternative_names_isSet) {
        obj.insert(QString("HasAdditionalSubjectAlternativeNames"), ::OpenAPI::toJsonValue(m_has_additional_subject_alternative_names));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_key_algorithm.isSet()) {
        obj.insert(QString("KeyAlgorithm"), ::OpenAPI::toJsonValue(m_key_algorithm));
    }
    if (m_key_usages.isSet()) {
        obj.insert(QString("KeyUsages"), ::OpenAPI::toJsonValue(m_key_usages));
    }
    if (m_extended_key_usages.isSet()) {
        obj.insert(QString("ExtendedKeyUsages"), ::OpenAPI::toJsonValue(m_extended_key_usages));
    }
    if (m_in_use_isSet) {
        obj.insert(QString("InUse"), ::OpenAPI::toJsonValue(m_in_use));
    }
    if (m_exported_isSet) {
        obj.insert(QString("Exported"), ::OpenAPI::toJsonValue(m_exported));
    }
    if (m_renewal_eligibility.isSet()) {
        obj.insert(QString("RenewalEligibility"), ::OpenAPI::toJsonValue(m_renewal_eligibility));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("NotBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_not_after_isSet) {
        obj.insert(QString("NotAfter"), ::OpenAPI::toJsonValue(m_not_after));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("IssuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_imported_at_isSet) {
        obj.insert(QString("ImportedAt"), ::OpenAPI::toJsonValue(m_imported_at));
    }
    if (m_revoked_at_isSet) {
        obj.insert(QString("RevokedAt"), ::OpenAPI::toJsonValue(m_revoked_at));
    }
    return obj;
}

QString OAICertificateSummary::getCertificateArn() const {
    return m_certificate_arn;
}
void OAICertificateSummary::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAICertificateSummary::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAICertificateSummary::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QString OAICertificateSummary::getDomainName() const {
    return m_domain_name;
}
void OAICertificateSummary::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAICertificateSummary::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAICertificateSummary::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAICertificateSummary::getSubjectAlternativeNameSummaries() const {
    return m_subject_alternative_name_summaries;
}
void OAICertificateSummary::setSubjectAlternativeNameSummaries(const QList &subject_alternative_name_summaries) {
    m_subject_alternative_name_summaries = subject_alternative_name_summaries;
    m_subject_alternative_name_summaries_isSet = true;
}

bool OAICertificateSummary::is_subject_alternative_name_summaries_Set() const{
    return m_subject_alternative_name_summaries_isSet;
}

bool OAICertificateSummary::is_subject_alternative_name_summaries_Valid() const{
    return m_subject_alternative_name_summaries_isValid;
}

bool OAICertificateSummary::getHasAdditionalSubjectAlternativeNames() const {
    return m_has_additional_subject_alternative_names;
}
void OAICertificateSummary::setHasAdditionalSubjectAlternativeNames(const bool &has_additional_subject_alternative_names) {
    m_has_additional_subject_alternative_names = has_additional_subject_alternative_names;
    m_has_additional_subject_alternative_names_isSet = true;
}

bool OAICertificateSummary::is_has_additional_subject_alternative_names_Set() const{
    return m_has_additional_subject_alternative_names_isSet;
}

bool OAICertificateSummary::is_has_additional_subject_alternative_names_Valid() const{
    return m_has_additional_subject_alternative_names_isValid;
}

OAICertificateStatus OAICertificateSummary::getStatus() const {
    return m_status;
}
void OAICertificateSummary::setStatus(const OAICertificateStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICertificateSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAICertificateSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAICertificateType OAICertificateSummary::getType() const {
    return m_type;
}
void OAICertificateSummary::setType(const OAICertificateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICertificateSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAICertificateSummary::is_type_Valid() const{
    return m_type_isValid;
}

OAIKeyAlgorithm OAICertificateSummary::getKeyAlgorithm() const {
    return m_key_algorithm;
}
void OAICertificateSummary::setKeyAlgorithm(const OAIKeyAlgorithm &key_algorithm) {
    m_key_algorithm = key_algorithm;
    m_key_algorithm_isSet = true;
}

bool OAICertificateSummary::is_key_algorithm_Set() const{
    return m_key_algorithm_isSet;
}

bool OAICertificateSummary::is_key_algorithm_Valid() const{
    return m_key_algorithm_isValid;
}

QList OAICertificateSummary::getKeyUsages() const {
    return m_key_usages;
}
void OAICertificateSummary::setKeyUsages(const QList &key_usages) {
    m_key_usages = key_usages;
    m_key_usages_isSet = true;
}

bool OAICertificateSummary::is_key_usages_Set() const{
    return m_key_usages_isSet;
}

bool OAICertificateSummary::is_key_usages_Valid() const{
    return m_key_usages_isValid;
}

QList OAICertificateSummary::getExtendedKeyUsages() const {
    return m_extended_key_usages;
}
void OAICertificateSummary::setExtendedKeyUsages(const QList &extended_key_usages) {
    m_extended_key_usages = extended_key_usages;
    m_extended_key_usages_isSet = true;
}

bool OAICertificateSummary::is_extended_key_usages_Set() const{
    return m_extended_key_usages_isSet;
}

bool OAICertificateSummary::is_extended_key_usages_Valid() const{
    return m_extended_key_usages_isValid;
}

bool OAICertificateSummary::getInUse() const {
    return m_in_use;
}
void OAICertificateSummary::setInUse(const bool &in_use) {
    m_in_use = in_use;
    m_in_use_isSet = true;
}

bool OAICertificateSummary::is_in_use_Set() const{
    return m_in_use_isSet;
}

bool OAICertificateSummary::is_in_use_Valid() const{
    return m_in_use_isValid;
}

bool OAICertificateSummary::getExported() const {
    return m_exported;
}
void OAICertificateSummary::setExported(const bool &exported) {
    m_exported = exported;
    m_exported_isSet = true;
}

bool OAICertificateSummary::is_exported_Set() const{
    return m_exported_isSet;
}

bool OAICertificateSummary::is_exported_Valid() const{
    return m_exported_isValid;
}

OAIRenewalEligibility OAICertificateSummary::getRenewalEligibility() const {
    return m_renewal_eligibility;
}
void OAICertificateSummary::setRenewalEligibility(const OAIRenewalEligibility &renewal_eligibility) {
    m_renewal_eligibility = renewal_eligibility;
    m_renewal_eligibility_isSet = true;
}

bool OAICertificateSummary::is_renewal_eligibility_Set() const{
    return m_renewal_eligibility_isSet;
}

bool OAICertificateSummary::is_renewal_eligibility_Valid() const{
    return m_renewal_eligibility_isValid;
}

QDateTime OAICertificateSummary::getNotBefore() const {
    return m_not_before;
}
void OAICertificateSummary::setNotBefore(const QDateTime &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAICertificateSummary::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAICertificateSummary::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QDateTime OAICertificateSummary::getNotAfter() const {
    return m_not_after;
}
void OAICertificateSummary::setNotAfter(const QDateTime &not_after) {
    m_not_after = not_after;
    m_not_after_isSet = true;
}

bool OAICertificateSummary::is_not_after_Set() const{
    return m_not_after_isSet;
}

bool OAICertificateSummary::is_not_after_Valid() const{
    return m_not_after_isValid;
}

QDateTime OAICertificateSummary::getCreatedAt() const {
    return m_created_at;
}
void OAICertificateSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICertificateSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICertificateSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAICertificateSummary::getIssuedAt() const {
    return m_issued_at;
}
void OAICertificateSummary::setIssuedAt(const QDateTime &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAICertificateSummary::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAICertificateSummary::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QDateTime OAICertificateSummary::getImportedAt() const {
    return m_imported_at;
}
void OAICertificateSummary::setImportedAt(const QDateTime &imported_at) {
    m_imported_at = imported_at;
    m_imported_at_isSet = true;
}

bool OAICertificateSummary::is_imported_at_Set() const{
    return m_imported_at_isSet;
}

bool OAICertificateSummary::is_imported_at_Valid() const{
    return m_imported_at_isValid;
}

QDateTime OAICertificateSummary::getRevokedAt() const {
    return m_revoked_at;
}
void OAICertificateSummary::setRevokedAt(const QDateTime &revoked_at) {
    m_revoked_at = revoked_at;
    m_revoked_at_isSet = true;
}

bool OAICertificateSummary::is_revoked_at_Set() const{
    return m_revoked_at_isSet;
}

bool OAICertificateSummary::is_revoked_at_Valid() const{
    return m_revoked_at_isValid;
}

bool OAICertificateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_name_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_additional_subject_alternative_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_key_usages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_eligibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
