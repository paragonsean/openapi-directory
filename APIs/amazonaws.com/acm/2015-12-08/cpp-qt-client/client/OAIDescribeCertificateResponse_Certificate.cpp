/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCertificateResponse_Certificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCertificateResponse_Certificate::OAIDescribeCertificateResponse_Certificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCertificateResponse_Certificate::OAIDescribeCertificateResponse_Certificate() {
    this->initializeModel();
}

OAIDescribeCertificateResponse_Certificate::~OAIDescribeCertificateResponse_Certificate() {}

void OAIDescribeCertificateResponse_Certificate::initializeModel() {

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_domain_validation_options_isSet = false;
    m_domain_validation_options_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_imported_at_isSet = false;
    m_imported_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_revoked_at_isSet = false;
    m_revoked_at_isValid = false;

    m_revocation_reason_isSet = false;
    m_revocation_reason_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_not_after_isSet = false;
    m_not_after_isValid = false;

    m_key_algorithm_isSet = false;
    m_key_algorithm_isValid = false;

    m_signature_algorithm_isSet = false;
    m_signature_algorithm_isValid = false;

    m_in_use_by_isSet = false;
    m_in_use_by_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_renewal_summary_isSet = false;
    m_renewal_summary_isValid = false;

    m_key_usages_isSet = false;
    m_key_usages_isValid = false;

    m_extended_key_usages_isSet = false;
    m_extended_key_usages_isValid = false;

    m_certificate_authority_arn_isSet = false;
    m_certificate_authority_arn_isValid = false;

    m_renewal_eligibility_isSet = false;
    m_renewal_eligibility_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIDescribeCertificateResponse_Certificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCertificateResponse_Certificate::fromJsonObject(QJsonObject json) {

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("CertificateArn")]);
    m_certificate_arn_isSet = !json[QString("CertificateArn")].isNull() && m_certificate_arn_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("SubjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("SubjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_domain_validation_options_isValid = ::OpenAPI::fromJsonValue(m_domain_validation_options, json[QString("DomainValidationOptions")]);
    m_domain_validation_options_isSet = !json[QString("DomainValidationOptions")].isNull() && m_domain_validation_options_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("IssuedAt")]);
    m_issued_at_isSet = !json[QString("IssuedAt")].isNull() && m_issued_at_isValid;

    m_imported_at_isValid = ::OpenAPI::fromJsonValue(m_imported_at, json[QString("ImportedAt")]);
    m_imported_at_isSet = !json[QString("ImportedAt")].isNull() && m_imported_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_revoked_at_isValid = ::OpenAPI::fromJsonValue(m_revoked_at, json[QString("RevokedAt")]);
    m_revoked_at_isSet = !json[QString("RevokedAt")].isNull() && m_revoked_at_isValid;

    m_revocation_reason_isValid = ::OpenAPI::fromJsonValue(m_revocation_reason, json[QString("RevocationReason")]);
    m_revocation_reason_isSet = !json[QString("RevocationReason")].isNull() && m_revocation_reason_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("NotBefore")]);
    m_not_before_isSet = !json[QString("NotBefore")].isNull() && m_not_before_isValid;

    m_not_after_isValid = ::OpenAPI::fromJsonValue(m_not_after, json[QString("NotAfter")]);
    m_not_after_isSet = !json[QString("NotAfter")].isNull() && m_not_after_isValid;

    m_key_algorithm_isValid = ::OpenAPI::fromJsonValue(m_key_algorithm, json[QString("KeyAlgorithm")]);
    m_key_algorithm_isSet = !json[QString("KeyAlgorithm")].isNull() && m_key_algorithm_isValid;

    m_signature_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signature_algorithm, json[QString("SignatureAlgorithm")]);
    m_signature_algorithm_isSet = !json[QString("SignatureAlgorithm")].isNull() && m_signature_algorithm_isValid;

    m_in_use_by_isValid = ::OpenAPI::fromJsonValue(m_in_use_by, json[QString("InUseBy")]);
    m_in_use_by_isSet = !json[QString("InUseBy")].isNull() && m_in_use_by_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_renewal_summary_isValid = ::OpenAPI::fromJsonValue(m_renewal_summary, json[QString("RenewalSummary")]);
    m_renewal_summary_isSet = !json[QString("RenewalSummary")].isNull() && m_renewal_summary_isValid;

    m_key_usages_isValid = ::OpenAPI::fromJsonValue(m_key_usages, json[QString("KeyUsages")]);
    m_key_usages_isSet = !json[QString("KeyUsages")].isNull() && m_key_usages_isValid;

    m_extended_key_usages_isValid = ::OpenAPI::fromJsonValue(m_extended_key_usages, json[QString("ExtendedKeyUsages")]);
    m_extended_key_usages_isSet = !json[QString("ExtendedKeyUsages")].isNull() && m_extended_key_usages_isValid;

    m_certificate_authority_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_arn, json[QString("CertificateAuthorityArn")]);
    m_certificate_authority_arn_isSet = !json[QString("CertificateAuthorityArn")].isNull() && m_certificate_authority_arn_isValid;

    m_renewal_eligibility_isValid = ::OpenAPI::fromJsonValue(m_renewal_eligibility, json[QString("RenewalEligibility")]);
    m_renewal_eligibility_isSet = !json[QString("RenewalEligibility")].isNull() && m_renewal_eligibility_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCertificateResponse_Certificate::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_arn_isSet) {
        obj.insert(QString("CertificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_subject_alternative_names.isSet()) {
        obj.insert(QString("SubjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_domain_validation_options.isSet()) {
        obj.insert(QString("DomainValidationOptions"), ::OpenAPI::toJsonValue(m_domain_validation_options));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("IssuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_imported_at_isSet) {
        obj.insert(QString("ImportedAt"), ::OpenAPI::toJsonValue(m_imported_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_revoked_at_isSet) {
        obj.insert(QString("RevokedAt"), ::OpenAPI::toJsonValue(m_revoked_at));
    }
    if (m_revocation_reason.isSet()) {
        obj.insert(QString("RevocationReason"), ::OpenAPI::toJsonValue(m_revocation_reason));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("NotBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_not_after_isSet) {
        obj.insert(QString("NotAfter"), ::OpenAPI::toJsonValue(m_not_after));
    }
    if (m_key_algorithm.isSet()) {
        obj.insert(QString("KeyAlgorithm"), ::OpenAPI::toJsonValue(m_key_algorithm));
    }
    if (m_signature_algorithm_isSet) {
        obj.insert(QString("SignatureAlgorithm"), ::OpenAPI::toJsonValue(m_signature_algorithm));
    }
    if (m_in_use_by.isSet()) {
        obj.insert(QString("InUseBy"), ::OpenAPI::toJsonValue(m_in_use_by));
    }
    if (m_failure_reason.isSet()) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_renewal_summary.isSet()) {
        obj.insert(QString("RenewalSummary"), ::OpenAPI::toJsonValue(m_renewal_summary));
    }
    if (m_key_usages.isSet()) {
        obj.insert(QString("KeyUsages"), ::OpenAPI::toJsonValue(m_key_usages));
    }
    if (m_extended_key_usages.isSet()) {
        obj.insert(QString("ExtendedKeyUsages"), ::OpenAPI::toJsonValue(m_extended_key_usages));
    }
    if (m_certificate_authority_arn_isSet) {
        obj.insert(QString("CertificateAuthorityArn"), ::OpenAPI::toJsonValue(m_certificate_authority_arn));
    }
    if (m_renewal_eligibility.isSet()) {
        obj.insert(QString("RenewalEligibility"), ::OpenAPI::toJsonValue(m_renewal_eligibility));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIDescribeCertificateResponse_Certificate::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIDescribeCertificateResponse_Certificate::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getDomainName() const {
    return m_domain_name;
}
void OAIDescribeCertificateResponse_Certificate::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIDescribeCertificateResponse_Certificate::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAIDescribeCertificateResponse_Certificate::setSubjectAlternativeNames(const QList &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

QList OAIDescribeCertificateResponse_Certificate::getDomainValidationOptions() const {
    return m_domain_validation_options;
}
void OAIDescribeCertificateResponse_Certificate::setDomainValidationOptions(const QList &domain_validation_options) {
    m_domain_validation_options = domain_validation_options;
    m_domain_validation_options_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_domain_validation_options_Set() const{
    return m_domain_validation_options_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_domain_validation_options_Valid() const{
    return m_domain_validation_options_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getSerial() const {
    return m_serial;
}
void OAIDescribeCertificateResponse_Certificate::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getSubject() const {
    return m_subject;
}
void OAIDescribeCertificateResponse_Certificate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getIssuer() const {
    return m_issuer;
}
void OAIDescribeCertificateResponse_Certificate::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeCertificateResponse_Certificate::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getIssuedAt() const {
    return m_issued_at;
}
void OAIDescribeCertificateResponse_Certificate::setIssuedAt(const QDateTime &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getImportedAt() const {
    return m_imported_at;
}
void OAIDescribeCertificateResponse_Certificate::setImportedAt(const QDateTime &imported_at) {
    m_imported_at = imported_at;
    m_imported_at_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_imported_at_Set() const{
    return m_imported_at_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_imported_at_Valid() const{
    return m_imported_at_isValid;
}

OAICertificateStatus OAIDescribeCertificateResponse_Certificate::getStatus() const {
    return m_status;
}
void OAIDescribeCertificateResponse_Certificate::setStatus(const OAICertificateStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getRevokedAt() const {
    return m_revoked_at;
}
void OAIDescribeCertificateResponse_Certificate::setRevokedAt(const QDateTime &revoked_at) {
    m_revoked_at = revoked_at;
    m_revoked_at_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_revoked_at_Set() const{
    return m_revoked_at_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_revoked_at_Valid() const{
    return m_revoked_at_isValid;
}

OAIRevocationReason OAIDescribeCertificateResponse_Certificate::getRevocationReason() const {
    return m_revocation_reason;
}
void OAIDescribeCertificateResponse_Certificate::setRevocationReason(const OAIRevocationReason &revocation_reason) {
    m_revocation_reason = revocation_reason;
    m_revocation_reason_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_revocation_reason_Set() const{
    return m_revocation_reason_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_revocation_reason_Valid() const{
    return m_revocation_reason_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getNotBefore() const {
    return m_not_before;
}
void OAIDescribeCertificateResponse_Certificate::setNotBefore(const QDateTime &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getNotAfter() const {
    return m_not_after;
}
void OAIDescribeCertificateResponse_Certificate::setNotAfter(const QDateTime &not_after) {
    m_not_after = not_after;
    m_not_after_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_after_Set() const{
    return m_not_after_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_after_Valid() const{
    return m_not_after_isValid;
}

OAIKeyAlgorithm OAIDescribeCertificateResponse_Certificate::getKeyAlgorithm() const {
    return m_key_algorithm;
}
void OAIDescribeCertificateResponse_Certificate::setKeyAlgorithm(const OAIKeyAlgorithm &key_algorithm) {
    m_key_algorithm = key_algorithm;
    m_key_algorithm_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_key_algorithm_Set() const{
    return m_key_algorithm_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_key_algorithm_Valid() const{
    return m_key_algorithm_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getSignatureAlgorithm() const {
    return m_signature_algorithm;
}
void OAIDescribeCertificateResponse_Certificate::setSignatureAlgorithm(const QString &signature_algorithm) {
    m_signature_algorithm = signature_algorithm;
    m_signature_algorithm_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_signature_algorithm_Set() const{
    return m_signature_algorithm_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_signature_algorithm_Valid() const{
    return m_signature_algorithm_isValid;
}

QList OAIDescribeCertificateResponse_Certificate::getInUseBy() const {
    return m_in_use_by;
}
void OAIDescribeCertificateResponse_Certificate::setInUseBy(const QList &in_use_by) {
    m_in_use_by = in_use_by;
    m_in_use_by_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_in_use_by_Set() const{
    return m_in_use_by_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_in_use_by_Valid() const{
    return m_in_use_by_isValid;
}

OAIFailureReason OAIDescribeCertificateResponse_Certificate::getFailureReason() const {
    return m_failure_reason;
}
void OAIDescribeCertificateResponse_Certificate::setFailureReason(const OAIFailureReason &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAICertificateType OAIDescribeCertificateResponse_Certificate::getType() const {
    return m_type;
}
void OAIDescribeCertificateResponse_Certificate::setType(const OAICertificateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_type_Valid() const{
    return m_type_isValid;
}

OAICertificateDetail_RenewalSummary OAIDescribeCertificateResponse_Certificate::getRenewalSummary() const {
    return m_renewal_summary;
}
void OAIDescribeCertificateResponse_Certificate::setRenewalSummary(const OAICertificateDetail_RenewalSummary &renewal_summary) {
    m_renewal_summary = renewal_summary;
    m_renewal_summary_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_renewal_summary_Set() const{
    return m_renewal_summary_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_renewal_summary_Valid() const{
    return m_renewal_summary_isValid;
}

QList OAIDescribeCertificateResponse_Certificate::getKeyUsages() const {
    return m_key_usages;
}
void OAIDescribeCertificateResponse_Certificate::setKeyUsages(const QList &key_usages) {
    m_key_usages = key_usages;
    m_key_usages_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_key_usages_Set() const{
    return m_key_usages_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_key_usages_Valid() const{
    return m_key_usages_isValid;
}

QList OAIDescribeCertificateResponse_Certificate::getExtendedKeyUsages() const {
    return m_extended_key_usages;
}
void OAIDescribeCertificateResponse_Certificate::setExtendedKeyUsages(const QList &extended_key_usages) {
    m_extended_key_usages = extended_key_usages;
    m_extended_key_usages_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_extended_key_usages_Set() const{
    return m_extended_key_usages_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_extended_key_usages_Valid() const{
    return m_extended_key_usages_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getCertificateAuthorityArn() const {
    return m_certificate_authority_arn;
}
void OAIDescribeCertificateResponse_Certificate::setCertificateAuthorityArn(const QString &certificate_authority_arn) {
    m_certificate_authority_arn = certificate_authority_arn;
    m_certificate_authority_arn_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_authority_arn_Set() const{
    return m_certificate_authority_arn_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_authority_arn_Valid() const{
    return m_certificate_authority_arn_isValid;
}

OAIRenewalEligibility OAIDescribeCertificateResponse_Certificate::getRenewalEligibility() const {
    return m_renewal_eligibility;
}
void OAIDescribeCertificateResponse_Certificate::setRenewalEligibility(const OAIRenewalEligibility &renewal_eligibility) {
    m_renewal_eligibility = renewal_eligibility;
    m_renewal_eligibility_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_renewal_eligibility_Set() const{
    return m_renewal_eligibility_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_renewal_eligibility_Valid() const{
    return m_renewal_eligibility_isValid;
}

OAICertificateDetail_Options OAIDescribeCertificateResponse_Certificate::getOptions() const {
    return m_options;
}
void OAIDescribeCertificateResponse_Certificate::setOptions(const OAICertificateDetail_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_options_Set() const{
    return m_options_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIDescribeCertificateResponse_Certificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_validation_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_use_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_key_usages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_authority_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_eligibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCertificateResponse_Certificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
