/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportCertificateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportCertificateResponse::OAIExportCertificateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportCertificateResponse::OAIExportCertificateResponse() {
    this->initializeModel();
}

OAIExportCertificateResponse::~OAIExportCertificateResponse() {}

void OAIExportCertificateResponse::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_chain_isSet = false;
    m_certificate_chain_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;
}

void OAIExportCertificateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportCertificateResponse::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_certificate_chain, json[QString("CertificateChain")]);
    m_certificate_chain_isSet = !json[QString("CertificateChain")].isNull() && m_certificate_chain_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("PrivateKey")]);
    m_private_key_isSet = !json[QString("PrivateKey")].isNull() && m_private_key_isValid;
}

QString OAIExportCertificateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportCertificateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_chain_isSet) {
        obj.insert(QString("CertificateChain"), ::OpenAPI::toJsonValue(m_certificate_chain));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("PrivateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    return obj;
}

QString OAIExportCertificateResponse::getCertificate() const {
    return m_certificate;
}
void OAIExportCertificateResponse::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIExportCertificateResponse::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIExportCertificateResponse::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIExportCertificateResponse::getCertificateChain() const {
    return m_certificate_chain;
}
void OAIExportCertificateResponse::setCertificateChain(const QString &certificate_chain) {
    m_certificate_chain = certificate_chain;
    m_certificate_chain_isSet = true;
}

bool OAIExportCertificateResponse::is_certificate_chain_Set() const{
    return m_certificate_chain_isSet;
}

bool OAIExportCertificateResponse::is_certificate_chain_Valid() const{
    return m_certificate_chain_isValid;
}

QString OAIExportCertificateResponse::getPrivateKey() const {
    return m_private_key;
}
void OAIExportCertificateResponse::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIExportCertificateResponse::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIExportCertificateResponse::is_private_key_Valid() const{
    return m_private_key_isValid;
}

bool OAIExportCertificateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportCertificateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
