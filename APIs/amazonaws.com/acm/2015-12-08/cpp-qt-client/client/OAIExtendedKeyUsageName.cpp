/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedKeyUsageName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedKeyUsageName::OAIExtendedKeyUsageName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedKeyUsageName::OAIExtendedKeyUsageName() {
    this->initializeModel();
}

OAIExtendedKeyUsageName::~OAIExtendedKeyUsageName() {}

void OAIExtendedKeyUsageName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExtendedKeyUsageName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExtendedKeyUsageName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TLS_WEB_SERVER_AUTHENTICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::TLS_WEB_SERVER_AUTHENTICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLS_WEB_CLIENT_AUTHENTICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::TLS_WEB_CLIENT_AUTHENTICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CODE_SIGNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::CODE_SIGNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL_PROTECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::EMAIL_PROTECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_STAMPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::TIME_STAMPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OCSP_SIGNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::OCSP_SIGNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IPSEC_END_SYSTEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::IPSEC_END_SYSTEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IPSEC_TUNNEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::IPSEC_TUNNEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IPSEC_USER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::IPSEC_USER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::ANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtendedKeyUsageName::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExtendedKeyUsageName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExtendedKeyUsageName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExtendedKeyUsageName::TLS_WEB_SERVER_AUTHENTICATION:
            val = "TLS_WEB_SERVER_AUTHENTICATION";
            break;
        case eOAIExtendedKeyUsageName::TLS_WEB_CLIENT_AUTHENTICATION:
            val = "TLS_WEB_CLIENT_AUTHENTICATION";
            break;
        case eOAIExtendedKeyUsageName::CODE_SIGNING:
            val = "CODE_SIGNING";
            break;
        case eOAIExtendedKeyUsageName::EMAIL_PROTECTION:
            val = "EMAIL_PROTECTION";
            break;
        case eOAIExtendedKeyUsageName::TIME_STAMPING:
            val = "TIME_STAMPING";
            break;
        case eOAIExtendedKeyUsageName::OCSP_SIGNING:
            val = "OCSP_SIGNING";
            break;
        case eOAIExtendedKeyUsageName::IPSEC_END_SYSTEM:
            val = "IPSEC_END_SYSTEM";
            break;
        case eOAIExtendedKeyUsageName::IPSEC_TUNNEL:
            val = "IPSEC_TUNNEL";
            break;
        case eOAIExtendedKeyUsageName::IPSEC_USER:
            val = "IPSEC_USER";
            break;
        case eOAIExtendedKeyUsageName::ANY:
            val = "ANY";
            break;
        case eOAIExtendedKeyUsageName::NONE:
            val = "NONE";
            break;
        case eOAIExtendedKeyUsageName::CUSTOM:
            val = "CUSTOM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExtendedKeyUsageName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExtendedKeyUsageName::eOAIExtendedKeyUsageName OAIExtendedKeyUsageName::getValue() const {
    return m_value;
}

void OAIExtendedKeyUsageName::setValue(const OAIExtendedKeyUsageName::eOAIExtendedKeyUsageName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExtendedKeyUsageName::isSet() const {
    
    return m_value_isSet;
}

bool OAIExtendedKeyUsageName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
