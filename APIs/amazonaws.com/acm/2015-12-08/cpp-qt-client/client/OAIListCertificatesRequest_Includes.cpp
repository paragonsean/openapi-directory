/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCertificatesRequest_Includes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCertificatesRequest_Includes::OAIListCertificatesRequest_Includes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCertificatesRequest_Includes::OAIListCertificatesRequest_Includes() {
    this->initializeModel();
}

OAIListCertificatesRequest_Includes::~OAIListCertificatesRequest_Includes() {}

void OAIListCertificatesRequest_Includes::initializeModel() {

    m_extended_key_usage_isSet = false;
    m_extended_key_usage_isValid = false;

    m_key_usage_isSet = false;
    m_key_usage_isValid = false;

    m_key_types_isSet = false;
    m_key_types_isValid = false;
}

void OAIListCertificatesRequest_Includes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCertificatesRequest_Includes::fromJsonObject(QJsonObject json) {

    m_extended_key_usage_isValid = ::OpenAPI::fromJsonValue(m_extended_key_usage, json[QString("extendedKeyUsage")]);
    m_extended_key_usage_isSet = !json[QString("extendedKeyUsage")].isNull() && m_extended_key_usage_isValid;

    m_key_usage_isValid = ::OpenAPI::fromJsonValue(m_key_usage, json[QString("keyUsage")]);
    m_key_usage_isSet = !json[QString("keyUsage")].isNull() && m_key_usage_isValid;

    m_key_types_isValid = ::OpenAPI::fromJsonValue(m_key_types, json[QString("keyTypes")]);
    m_key_types_isSet = !json[QString("keyTypes")].isNull() && m_key_types_isValid;
}

QString OAIListCertificatesRequest_Includes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCertificatesRequest_Includes::asJsonObject() const {
    QJsonObject obj;
    if (m_extended_key_usage.isSet()) {
        obj.insert(QString("extendedKeyUsage"), ::OpenAPI::toJsonValue(m_extended_key_usage));
    }
    if (m_key_usage.isSet()) {
        obj.insert(QString("keyUsage"), ::OpenAPI::toJsonValue(m_key_usage));
    }
    if (m_key_types.isSet()) {
        obj.insert(QString("keyTypes"), ::OpenAPI::toJsonValue(m_key_types));
    }
    return obj;
}

QList OAIListCertificatesRequest_Includes::getExtendedKeyUsage() const {
    return m_extended_key_usage;
}
void OAIListCertificatesRequest_Includes::setExtendedKeyUsage(const QList &extended_key_usage) {
    m_extended_key_usage = extended_key_usage;
    m_extended_key_usage_isSet = true;
}

bool OAIListCertificatesRequest_Includes::is_extended_key_usage_Set() const{
    return m_extended_key_usage_isSet;
}

bool OAIListCertificatesRequest_Includes::is_extended_key_usage_Valid() const{
    return m_extended_key_usage_isValid;
}

QList OAIListCertificatesRequest_Includes::getKeyUsage() const {
    return m_key_usage;
}
void OAIListCertificatesRequest_Includes::setKeyUsage(const QList &key_usage) {
    m_key_usage = key_usage;
    m_key_usage_isSet = true;
}

bool OAIListCertificatesRequest_Includes::is_key_usage_Set() const{
    return m_key_usage_isSet;
}

bool OAIListCertificatesRequest_Includes::is_key_usage_Valid() const{
    return m_key_usage_isValid;
}

QList OAIListCertificatesRequest_Includes::getKeyTypes() const {
    return m_key_types;
}
void OAIListCertificatesRequest_Includes::setKeyTypes(const QList &key_types) {
    m_key_types = key_types;
    m_key_types_isSet = true;
}

bool OAIListCertificatesRequest_Includes::is_key_types_Set() const{
    return m_key_types_isSet;
}

bool OAIListCertificatesRequest_Includes::is_key_types_Valid() const{
    return m_key_types_isValid;
}

bool OAIListCertificatesRequest_Includes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extended_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCertificatesRequest_Includes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
