/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyUsageName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyUsageName::OAIKeyUsageName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyUsageName::OAIKeyUsageName() {
    this->initializeModel();
}

OAIKeyUsageName::~OAIKeyUsageName() {}

void OAIKeyUsageName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIKeyUsageName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIKeyUsageName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DIGITAL_SIGNATURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::DIGITAL_SIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NON_REPUDIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::NON_REPUDIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KEY_ENCIPHERMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::KEY_ENCIPHERMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_ENCIPHERMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::DATA_ENCIPHERMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KEY_AGREEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::KEY_AGREEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CERTIFICATE_SIGNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::CERTIFICATE_SIGNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CRL_SIGNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::CRL_SIGNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCIPHER_ONLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::ENCIPHER_ONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DECIPHER_ONLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::DECIPHER_ONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::ANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyUsageName::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIKeyUsageName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIKeyUsageName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIKeyUsageName::DIGITAL_SIGNATURE:
            val = "DIGITAL_SIGNATURE";
            break;
        case eOAIKeyUsageName::NON_REPUDIATION:
            val = "NON_REPUDIATION";
            break;
        case eOAIKeyUsageName::KEY_ENCIPHERMENT:
            val = "KEY_ENCIPHERMENT";
            break;
        case eOAIKeyUsageName::DATA_ENCIPHERMENT:
            val = "DATA_ENCIPHERMENT";
            break;
        case eOAIKeyUsageName::KEY_AGREEMENT:
            val = "KEY_AGREEMENT";
            break;
        case eOAIKeyUsageName::CERTIFICATE_SIGNING:
            val = "CERTIFICATE_SIGNING";
            break;
        case eOAIKeyUsageName::CRL_SIGNING:
            val = "CRL_SIGNING";
            break;
        case eOAIKeyUsageName::ENCIPHER_ONLY:
            val = "ENCIPHER_ONLY";
            break;
        case eOAIKeyUsageName::DECIPHER_ONLY:
            val = "DECIPHER_ONLY";
            break;
        case eOAIKeyUsageName::ANY:
            val = "ANY";
            break;
        case eOAIKeyUsageName::CUSTOM:
            val = "CUSTOM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIKeyUsageName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIKeyUsageName::eOAIKeyUsageName OAIKeyUsageName::getValue() const {
    return m_value;
}

void OAIKeyUsageName::setValue(const OAIKeyUsageName::eOAIKeyUsageName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIKeyUsageName::isSet() const {
    
    return m_value_isSet;
}

bool OAIKeyUsageName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
