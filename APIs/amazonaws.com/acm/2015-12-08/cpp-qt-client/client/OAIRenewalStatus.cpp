/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenewalStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenewalStatus::OAIRenewalStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenewalStatus::OAIRenewalStatus() {
    this->initializeModel();
}

OAIRenewalStatus::~OAIRenewalStatus() {}

void OAIRenewalStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRenewalStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRenewalStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING_AUTO_RENEWAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenewalStatus::PENDING_AUTO_RENEWAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenewalStatus::PENDING_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenewalStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRenewalStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRenewalStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRenewalStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRenewalStatus::PENDING_AUTO_RENEWAL:
            val = "PENDING_AUTO_RENEWAL";
            break;
        case eOAIRenewalStatus::PENDING_VALIDATION:
            val = "PENDING_VALIDATION";
            break;
        case eOAIRenewalStatus::SUCCESS:
            val = "SUCCESS";
            break;
        case eOAIRenewalStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRenewalStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRenewalStatus::eOAIRenewalStatus OAIRenewalStatus::getValue() const {
    return m_value;
}

void OAIRenewalStatus::setValue(const OAIRenewalStatus::eOAIRenewalStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRenewalStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIRenewalStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
