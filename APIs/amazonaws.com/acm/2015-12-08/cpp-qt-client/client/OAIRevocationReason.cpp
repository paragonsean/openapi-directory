/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevocationReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevocationReason::OAIRevocationReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevocationReason::OAIRevocationReason() {
    this->initializeModel();
}

OAIRevocationReason::~OAIRevocationReason() {}

void OAIRevocationReason::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRevocationReason::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRevocationReason::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNSPECIFIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::UNSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KEY_COMPROMISE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::KEY_COMPROMISE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA_COMPROMISE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::CA_COMPROMISE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AFFILIATION_CHANGED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::AFFILIATION_CHANGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUPERCEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::SUPERCEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CESSATION_OF_OPERATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::CESSATION_OF_OPERATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CERTIFICATE_HOLD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::CERTIFICATE_HOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVE_FROM_CRL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::REMOVE_FROM_CRL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRIVILEGE_WITHDRAWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::PRIVILEGE_WITHDRAWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("A_A_COMPROMISE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRevocationReason::A_A_COMPROMISE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRevocationReason::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRevocationReason::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRevocationReason::UNSPECIFIED:
            val = "UNSPECIFIED";
            break;
        case eOAIRevocationReason::KEY_COMPROMISE:
            val = "KEY_COMPROMISE";
            break;
        case eOAIRevocationReason::CA_COMPROMISE:
            val = "CA_COMPROMISE";
            break;
        case eOAIRevocationReason::AFFILIATION_CHANGED:
            val = "AFFILIATION_CHANGED";
            break;
        case eOAIRevocationReason::SUPERCEDED:
            val = "SUPERCEDED";
            break;
        case eOAIRevocationReason::CESSATION_OF_OPERATION:
            val = "CESSATION_OF_OPERATION";
            break;
        case eOAIRevocationReason::CERTIFICATE_HOLD:
            val = "CERTIFICATE_HOLD";
            break;
        case eOAIRevocationReason::REMOVE_FROM_CRL:
            val = "REMOVE_FROM_CRL";
            break;
        case eOAIRevocationReason::PRIVILEGE_WITHDRAWN:
            val = "PRIVILEGE_WITHDRAWN";
            break;
        case eOAIRevocationReason::A_A_COMPROMISE:
            val = "A_A_COMPROMISE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRevocationReason::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRevocationReason::eOAIRevocationReason OAIRevocationReason::getValue() const {
    return m_value;
}

void OAIRevocationReason::setValue(const OAIRevocationReason::eOAIRevocationReason& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRevocationReason::isSet() const {
    
    return m_value_isSet;
}

bool OAIRevocationReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
