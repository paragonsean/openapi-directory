/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateStatus::OAICertificateStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateStatus::OAICertificateStatus() {
    this->initializeModel();
}

OAICertificateStatus::~OAICertificateStatus() {}

void OAICertificateStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICertificateStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICertificateStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING_VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::PENDING_VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ISSUED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::ISSUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::INACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_TIMED_OUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::VALIDATION_TIMED_OUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REVOKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::REVOKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICertificateStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICertificateStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICertificateStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICertificateStatus::PENDING_VALIDATION:
            val = "PENDING_VALIDATION";
            break;
        case eOAICertificateStatus::ISSUED:
            val = "ISSUED";
            break;
        case eOAICertificateStatus::INACTIVE:
            val = "INACTIVE";
            break;
        case eOAICertificateStatus::EXPIRED:
            val = "EXPIRED";
            break;
        case eOAICertificateStatus::VALIDATION_TIMED_OUT:
            val = "VALIDATION_TIMED_OUT";
            break;
        case eOAICertificateStatus::REVOKED:
            val = "REVOKED";
            break;
        case eOAICertificateStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICertificateStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICertificateStatus::eOAICertificateStatus OAICertificateStatus::getValue() const {
    return m_value;
}

void OAICertificateStatus::setValue(const OAICertificateStatus::eOAICertificateStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICertificateStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAICertificateStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
