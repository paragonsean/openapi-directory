/**
 * AWS Certificate Manager
 * <fullname>Certificate Manager</fullname> <p>You can use Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">Certificate Manager User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-12-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainValidation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainValidation::OAIDomainValidation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainValidation::OAIDomainValidation() {
    this->initializeModel();
}

OAIDomainValidation::~OAIDomainValidation() {}

void OAIDomainValidation::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_validation_emails_isSet = false;
    m_validation_emails_isValid = false;

    m_validation_domain_isSet = false;
    m_validation_domain_isValid = false;

    m_validation_status_isSet = false;
    m_validation_status_isValid = false;

    m_resource_record_isSet = false;
    m_resource_record_isValid = false;

    m_validation_method_isSet = false;
    m_validation_method_isValid = false;
}

void OAIDomainValidation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainValidation::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_validation_emails_isValid = ::OpenAPI::fromJsonValue(m_validation_emails, json[QString("ValidationEmails")]);
    m_validation_emails_isSet = !json[QString("ValidationEmails")].isNull() && m_validation_emails_isValid;

    m_validation_domain_isValid = ::OpenAPI::fromJsonValue(m_validation_domain, json[QString("ValidationDomain")]);
    m_validation_domain_isSet = !json[QString("ValidationDomain")].isNull() && m_validation_domain_isValid;

    m_validation_status_isValid = ::OpenAPI::fromJsonValue(m_validation_status, json[QString("ValidationStatus")]);
    m_validation_status_isSet = !json[QString("ValidationStatus")].isNull() && m_validation_status_isValid;

    m_resource_record_isValid = ::OpenAPI::fromJsonValue(m_resource_record, json[QString("ResourceRecord")]);
    m_resource_record_isSet = !json[QString("ResourceRecord")].isNull() && m_resource_record_isValid;

    m_validation_method_isValid = ::OpenAPI::fromJsonValue(m_validation_method, json[QString("ValidationMethod")]);
    m_validation_method_isSet = !json[QString("ValidationMethod")].isNull() && m_validation_method_isValid;
}

QString OAIDomainValidation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainValidation::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_validation_emails.isSet()) {
        obj.insert(QString("ValidationEmails"), ::OpenAPI::toJsonValue(m_validation_emails));
    }
    if (m_validation_domain_isSet) {
        obj.insert(QString("ValidationDomain"), ::OpenAPI::toJsonValue(m_validation_domain));
    }
    if (m_validation_status.isSet()) {
        obj.insert(QString("ValidationStatus"), ::OpenAPI::toJsonValue(m_validation_status));
    }
    if (m_resource_record.isSet()) {
        obj.insert(QString("ResourceRecord"), ::OpenAPI::toJsonValue(m_resource_record));
    }
    if (m_validation_method.isSet()) {
        obj.insert(QString("ValidationMethod"), ::OpenAPI::toJsonValue(m_validation_method));
    }
    return obj;
}

QString OAIDomainValidation::getDomainName() const {
    return m_domain_name;
}
void OAIDomainValidation::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomainValidation::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomainValidation::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIDomainValidation::getValidationEmails() const {
    return m_validation_emails;
}
void OAIDomainValidation::setValidationEmails(const QList &validation_emails) {
    m_validation_emails = validation_emails;
    m_validation_emails_isSet = true;
}

bool OAIDomainValidation::is_validation_emails_Set() const{
    return m_validation_emails_isSet;
}

bool OAIDomainValidation::is_validation_emails_Valid() const{
    return m_validation_emails_isValid;
}

QString OAIDomainValidation::getValidationDomain() const {
    return m_validation_domain;
}
void OAIDomainValidation::setValidationDomain(const QString &validation_domain) {
    m_validation_domain = validation_domain;
    m_validation_domain_isSet = true;
}

bool OAIDomainValidation::is_validation_domain_Set() const{
    return m_validation_domain_isSet;
}

bool OAIDomainValidation::is_validation_domain_Valid() const{
    return m_validation_domain_isValid;
}

OAIDomainStatus OAIDomainValidation::getValidationStatus() const {
    return m_validation_status;
}
void OAIDomainValidation::setValidationStatus(const OAIDomainStatus &validation_status) {
    m_validation_status = validation_status;
    m_validation_status_isSet = true;
}

bool OAIDomainValidation::is_validation_status_Set() const{
    return m_validation_status_isSet;
}

bool OAIDomainValidation::is_validation_status_Valid() const{
    return m_validation_status_isValid;
}

OAIDomainValidation_ResourceRecord OAIDomainValidation::getResourceRecord() const {
    return m_resource_record;
}
void OAIDomainValidation::setResourceRecord(const OAIDomainValidation_ResourceRecord &resource_record) {
    m_resource_record = resource_record;
    m_resource_record_isSet = true;
}

bool OAIDomainValidation::is_resource_record_Set() const{
    return m_resource_record_isSet;
}

bool OAIDomainValidation::is_resource_record_Valid() const{
    return m_resource_record_isValid;
}

OAIValidationMethod OAIDomainValidation::getValidationMethod() const {
    return m_validation_method;
}
void OAIDomainValidation::setValidationMethod(const OAIValidationMethod &validation_method) {
    m_validation_method = validation_method;
    m_validation_method_isSet = true;
}

bool OAIDomainValidation::is_validation_method_Set() const{
    return m_validation_method_isSet;
}

bool OAIDomainValidation::is_validation_method_Valid() const{
    return m_validation_method_isValid;
}

bool OAIDomainValidation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_emails.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainValidation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
