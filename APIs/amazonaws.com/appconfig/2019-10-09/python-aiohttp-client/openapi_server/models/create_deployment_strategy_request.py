# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDeploymentStrategyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, deployment_duration_in_minutes: int=None, final_bake_time_in_minutes: int=None, growth_factor: float=None, growth_type: str=None, replicate_to: str=None, tags: Dict[str, str]=None):
        """CreateDeploymentStrategyRequest - a model defined in OpenAPI

        :param name: The name of this CreateDeploymentStrategyRequest.
        :param description: The description of this CreateDeploymentStrategyRequest.
        :param deployment_duration_in_minutes: The deployment_duration_in_minutes of this CreateDeploymentStrategyRequest.
        :param final_bake_time_in_minutes: The final_bake_time_in_minutes of this CreateDeploymentStrategyRequest.
        :param growth_factor: The growth_factor of this CreateDeploymentStrategyRequest.
        :param growth_type: The growth_type of this CreateDeploymentStrategyRequest.
        :param replicate_to: The replicate_to of this CreateDeploymentStrategyRequest.
        :param tags: The tags of this CreateDeploymentStrategyRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'deployment_duration_in_minutes': int,
            'final_bake_time_in_minutes': int,
            'growth_factor': float,
            'growth_type': str,
            'replicate_to': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'deployment_duration_in_minutes': 'DeploymentDurationInMinutes',
            'final_bake_time_in_minutes': 'FinalBakeTimeInMinutes',
            'growth_factor': 'GrowthFactor',
            'growth_type': 'GrowthType',
            'replicate_to': 'ReplicateTo',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._deployment_duration_in_minutes = deployment_duration_in_minutes
        self._final_bake_time_in_minutes = final_bake_time_in_minutes
        self._growth_factor = growth_factor
        self._growth_type = growth_type
        self._replicate_to = replicate_to
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeploymentStrategyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeploymentStrategy_request of this CreateDeploymentStrategyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateDeploymentStrategyRequest.

        A name for the deployment strategy.

        :return: The name of this CreateDeploymentStrategyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDeploymentStrategyRequest.

        A name for the deployment strategy.

        :param name: The name of this CreateDeploymentStrategyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateDeploymentStrategyRequest.

        A description of the deployment strategy.

        :return: The description of this CreateDeploymentStrategyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDeploymentStrategyRequest.

        A description of the deployment strategy.

        :param description: The description of this CreateDeploymentStrategyRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def deployment_duration_in_minutes(self):
        """Gets the deployment_duration_in_minutes of this CreateDeploymentStrategyRequest.

        Total amount of time for a deployment to last.

        :return: The deployment_duration_in_minutes of this CreateDeploymentStrategyRequest.
        :rtype: int
        """
        return self._deployment_duration_in_minutes

    @deployment_duration_in_minutes.setter
    def deployment_duration_in_minutes(self, deployment_duration_in_minutes):
        """Sets the deployment_duration_in_minutes of this CreateDeploymentStrategyRequest.

        Total amount of time for a deployment to last.

        :param deployment_duration_in_minutes: The deployment_duration_in_minutes of this CreateDeploymentStrategyRequest.
        :type deployment_duration_in_minutes: int
        """
        if deployment_duration_in_minutes is None:
            raise ValueError("Invalid value for `deployment_duration_in_minutes`, must not be `None`")
        if deployment_duration_in_minutes is not None and deployment_duration_in_minutes > 1440:
            raise ValueError("Invalid value for `deployment_duration_in_minutes`, must be a value less than or equal to `1440`")
        if deployment_duration_in_minutes is not None and deployment_duration_in_minutes < 0:
            raise ValueError("Invalid value for `deployment_duration_in_minutes`, must be a value greater than or equal to `0`")

        self._deployment_duration_in_minutes = deployment_duration_in_minutes

    @property
    def final_bake_time_in_minutes(self):
        """Gets the final_bake_time_in_minutes of this CreateDeploymentStrategyRequest.

        Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AppConfig rolls back the deployment. You must configure permissions for AppConfig to roll back based on CloudWatch alarms. For more information, see <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/getting-started-with-appconfig-cloudwatch-alarms-permissions.html\">Configuring permissions for rollback based on Amazon CloudWatch alarms</a> in the <i>AppConfig User Guide</i>.

        :return: The final_bake_time_in_minutes of this CreateDeploymentStrategyRequest.
        :rtype: int
        """
        return self._final_bake_time_in_minutes

    @final_bake_time_in_minutes.setter
    def final_bake_time_in_minutes(self, final_bake_time_in_minutes):
        """Sets the final_bake_time_in_minutes of this CreateDeploymentStrategyRequest.

        Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AppConfig rolls back the deployment. You must configure permissions for AppConfig to roll back based on CloudWatch alarms. For more information, see <a href=\"https://docs.aws.amazon.com/appconfig/latest/userguide/getting-started-with-appconfig-cloudwatch-alarms-permissions.html\">Configuring permissions for rollback based on Amazon CloudWatch alarms</a> in the <i>AppConfig User Guide</i>.

        :param final_bake_time_in_minutes: The final_bake_time_in_minutes of this CreateDeploymentStrategyRequest.
        :type final_bake_time_in_minutes: int
        """
        if final_bake_time_in_minutes is not None and final_bake_time_in_minutes > 1440:
            raise ValueError("Invalid value for `final_bake_time_in_minutes`, must be a value less than or equal to `1440`")
        if final_bake_time_in_minutes is not None and final_bake_time_in_minutes < 0:
            raise ValueError("Invalid value for `final_bake_time_in_minutes`, must be a value greater than or equal to `0`")

        self._final_bake_time_in_minutes = final_bake_time_in_minutes

    @property
    def growth_factor(self):
        """Gets the growth_factor of this CreateDeploymentStrategyRequest.

        The percentage of targets to receive a deployed configuration during each interval.

        :return: The growth_factor of this CreateDeploymentStrategyRequest.
        :rtype: float
        """
        return self._growth_factor

    @growth_factor.setter
    def growth_factor(self, growth_factor):
        """Sets the growth_factor of this CreateDeploymentStrategyRequest.

        The percentage of targets to receive a deployed configuration during each interval.

        :param growth_factor: The growth_factor of this CreateDeploymentStrategyRequest.
        :type growth_factor: float
        """
        if growth_factor is None:
            raise ValueError("Invalid value for `growth_factor`, must not be `None`")
        if growth_factor is not None and growth_factor > 100:
            raise ValueError("Invalid value for `growth_factor`, must be a value less than or equal to `100`")
        if growth_factor is not None and growth_factor < 1:
            raise ValueError("Invalid value for `growth_factor`, must be a value greater than or equal to `1`")

        self._growth_factor = growth_factor

    @property
    def growth_type(self):
        """Gets the growth_type of this CreateDeploymentStrategyRequest.

        <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by dividing the total number of targets by the value specified for <code>Step percentage</code>. For example, a linear deployment that uses a <code>Step percentage</code> of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>

        :return: The growth_type of this CreateDeploymentStrategyRequest.
        :rtype: str
        """
        return self._growth_type

    @growth_type.setter
    def growth_type(self, growth_type):
        """Sets the growth_type of this CreateDeploymentStrategyRequest.

        <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by dividing the total number of targets by the value specified for <code>Step percentage</code>. For example, a linear deployment that uses a <code>Step percentage</code> of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>

        :param growth_type: The growth_type of this CreateDeploymentStrategyRequest.
        :type growth_type: str
        """
        allowed_values = ["LINEAR", "EXPONENTIAL"]  # noqa: E501
        if growth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `growth_type` ({0}), must be one of {1}"
                .format(growth_type, allowed_values)
            )

        self._growth_type = growth_type

    @property
    def replicate_to(self):
        """Gets the replicate_to of this CreateDeploymentStrategyRequest.

        Save the deployment strategy to a Systems Manager (SSM) document.

        :return: The replicate_to of this CreateDeploymentStrategyRequest.
        :rtype: str
        """
        return self._replicate_to

    @replicate_to.setter
    def replicate_to(self, replicate_to):
        """Sets the replicate_to of this CreateDeploymentStrategyRequest.

        Save the deployment strategy to a Systems Manager (SSM) document.

        :param replicate_to: The replicate_to of this CreateDeploymentStrategyRequest.
        :type replicate_to: str
        """
        allowed_values = ["NONE", "SSM_DOCUMENT"]  # noqa: E501
        if replicate_to not in allowed_values:
            raise ValueError(
                "Invalid value for `replicate_to` ({0}), must be one of {1}"
                .format(replicate_to, allowed_values)
            )

        self._replicate_to = replicate_to

    @property
    def tags(self):
        """Gets the tags of this CreateDeploymentStrategyRequest.

        Metadata to assign to the deployment strategy. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :return: The tags of this CreateDeploymentStrategyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDeploymentStrategyRequest.

        Metadata to assign to the deployment strategy. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :param tags: The tags of this CreateDeploymentStrategyRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
