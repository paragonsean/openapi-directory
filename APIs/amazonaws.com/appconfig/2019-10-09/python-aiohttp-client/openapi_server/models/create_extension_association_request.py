# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateExtensionAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_identifier: str=None, extension_version_number: int=None, resource_identifier: str=None, parameters: Dict[str, str]=None, tags: Dict[str, str]=None):
        """CreateExtensionAssociationRequest - a model defined in OpenAPI

        :param extension_identifier: The extension_identifier of this CreateExtensionAssociationRequest.
        :param extension_version_number: The extension_version_number of this CreateExtensionAssociationRequest.
        :param resource_identifier: The resource_identifier of this CreateExtensionAssociationRequest.
        :param parameters: The parameters of this CreateExtensionAssociationRequest.
        :param tags: The tags of this CreateExtensionAssociationRequest.
        """
        self.openapi_types = {
            'extension_identifier': str,
            'extension_version_number': int,
            'resource_identifier': str,
            'parameters': Dict[str, str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'extension_identifier': 'ExtensionIdentifier',
            'extension_version_number': 'ExtensionVersionNumber',
            'resource_identifier': 'ResourceIdentifier',
            'parameters': 'Parameters',
            'tags': 'Tags'
        }

        self._extension_identifier = extension_identifier
        self._extension_version_number = extension_version_number
        self._resource_identifier = resource_identifier
        self._parameters = parameters
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExtensionAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExtensionAssociation_request of this CreateExtensionAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_identifier(self):
        """Gets the extension_identifier of this CreateExtensionAssociationRequest.

        The name, the ID, or the Amazon Resource Name (ARN) of the extension.

        :return: The extension_identifier of this CreateExtensionAssociationRequest.
        :rtype: str
        """
        return self._extension_identifier

    @extension_identifier.setter
    def extension_identifier(self, extension_identifier):
        """Sets the extension_identifier of this CreateExtensionAssociationRequest.

        The name, the ID, or the Amazon Resource Name (ARN) of the extension.

        :param extension_identifier: The extension_identifier of this CreateExtensionAssociationRequest.
        :type extension_identifier: str
        """
        if extension_identifier is None:
            raise ValueError("Invalid value for `extension_identifier`, must not be `None`")
        if extension_identifier is not None and len(extension_identifier) > 2048:
            raise ValueError("Invalid value for `extension_identifier`, length must be less than or equal to `2048`")
        if extension_identifier is not None and len(extension_identifier) < 1:
            raise ValueError("Invalid value for `extension_identifier`, length must be greater than or equal to `1`")

        self._extension_identifier = extension_identifier

    @property
    def extension_version_number(self):
        """Gets the extension_version_number of this CreateExtensionAssociationRequest.

        The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.

        :return: The extension_version_number of this CreateExtensionAssociationRequest.
        :rtype: int
        """
        return self._extension_version_number

    @extension_version_number.setter
    def extension_version_number(self, extension_version_number):
        """Sets the extension_version_number of this CreateExtensionAssociationRequest.

        The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.

        :param extension_version_number: The extension_version_number of this CreateExtensionAssociationRequest.
        :type extension_version_number: int
        """

        self._extension_version_number = extension_version_number

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this CreateExtensionAssociationRequest.

        The ARN of an application, configuration profile, or environment.

        :return: The resource_identifier of this CreateExtensionAssociationRequest.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this CreateExtensionAssociationRequest.

        The ARN of an application, configuration profile, or environment.

        :param resource_identifier: The resource_identifier of this CreateExtensionAssociationRequest.
        :type resource_identifier: str
        """
        if resource_identifier is None:
            raise ValueError("Invalid value for `resource_identifier`, must not be `None`")
        if resource_identifier is not None and len(resource_identifier) > 2048:
            raise ValueError("Invalid value for `resource_identifier`, length must be less than or equal to `2048`")
        if resource_identifier is not None and len(resource_identifier) < 1:
            raise ValueError("Invalid value for `resource_identifier`, length must be greater than or equal to `1`")

        self._resource_identifier = resource_identifier

    @property
    def parameters(self):
        """Gets the parameters of this CreateExtensionAssociationRequest.

        The parameter names and values defined in the extensions. Extension parameters marked <code>Required</code> must be entered for this field.

        :return: The parameters of this CreateExtensionAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateExtensionAssociationRequest.

        The parameter names and values defined in the extensions. Extension parameters marked <code>Required</code> must be entered for this field.

        :param parameters: The parameters of this CreateExtensionAssociationRequest.
        :type parameters: Dict[str, str]
        """
        if parameters is not None and len(parameters) > 5:
            raise ValueError("Invalid value for `parameters`, number of items must be less than or equal to `5`")
        if parameters is not None and len(parameters) < 0:
            raise ValueError("Invalid value for `parameters`, number of items must be greater than or equal to `0`")

        self._parameters = parameters

    @property
    def tags(self):
        """Gets the tags of this CreateExtensionAssociationRequest.

        Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. 

        :return: The tags of this CreateExtensionAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateExtensionAssociationRequest.

        Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. 

        :param tags: The tags of this CreateExtensionAssociationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
