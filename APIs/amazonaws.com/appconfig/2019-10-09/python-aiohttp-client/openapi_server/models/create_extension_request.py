# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.parameter import Parameter
from openapi_server import util


class CreateExtensionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, actions: Dict[str, List[Action]]=None, parameters: Dict[str, Parameter]=None, tags: Dict[str, str]=None):
        """CreateExtensionRequest - a model defined in OpenAPI

        :param name: The name of this CreateExtensionRequest.
        :param description: The description of this CreateExtensionRequest.
        :param actions: The actions of this CreateExtensionRequest.
        :param parameters: The parameters of this CreateExtensionRequest.
        :param tags: The tags of this CreateExtensionRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'actions': Dict[str, List[Action]],
            'parameters': Dict[str, Parameter],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'actions': 'Actions',
            'parameters': 'Parameters',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._actions = actions
        self._parameters = parameters
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExtensionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExtension_request of this CreateExtensionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateExtensionRequest.

        A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.

        :return: The name of this CreateExtensionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateExtensionRequest.

        A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.

        :param name: The name of this CreateExtensionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateExtensionRequest.

        Information about the extension.

        :return: The description of this CreateExtensionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateExtensionRequest.

        Information about the extension.

        :param description: The description of this CreateExtensionRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def actions(self):
        """Gets the actions of this CreateExtensionRequest.

        The actions defined in the extension.

        :return: The actions of this CreateExtensionRequest.
        :rtype: Dict[str, List[Action]]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CreateExtensionRequest.

        The actions defined in the extension.

        :param actions: The actions of this CreateExtensionRequest.
        :type actions: Dict[str, List[Action]]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")
        if actions is not None and len(actions) > 5:
            raise ValueError("Invalid value for `actions`, number of items must be less than or equal to `5`")
        if actions is not None and len(actions) < 1:
            raise ValueError("Invalid value for `actions`, number of items must be greater than or equal to `1`")

        self._actions = actions

    @property
    def parameters(self):
        """Gets the parameters of this CreateExtensionRequest.

        The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.

        :return: The parameters of this CreateExtensionRequest.
        :rtype: Dict[str, Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateExtensionRequest.

        The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.

        :param parameters: The parameters of this CreateExtensionRequest.
        :type parameters: Dict[str, Parameter]
        """
        if parameters is not None and len(parameters) > 5:
            raise ValueError("Invalid value for `parameters`, number of items must be less than or equal to `5`")
        if parameters is not None and len(parameters) < 1:
            raise ValueError("Invalid value for `parameters`, number of items must be greater than or equal to `1`")

        self._parameters = parameters

    @property
    def tags(self):
        """Gets the tags of this CreateExtensionRequest.

        Adds one or more tags for the specified extension. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. 

        :return: The tags of this CreateExtensionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateExtensionRequest.

        Adds one or more tags for the specified extension. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. 

        :param tags: The tags of this CreateExtensionRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
