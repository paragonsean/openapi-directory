# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validator import Validator
import re
from openapi_server import util


class UpdateConfigurationProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, retrieval_role_arn: str=None, validators: List[Validator]=None):
        """UpdateConfigurationProfileRequest - a model defined in OpenAPI

        :param name: The name of this UpdateConfigurationProfileRequest.
        :param description: The description of this UpdateConfigurationProfileRequest.
        :param retrieval_role_arn: The retrieval_role_arn of this UpdateConfigurationProfileRequest.
        :param validators: The validators of this UpdateConfigurationProfileRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'retrieval_role_arn': str,
            'validators': List[Validator]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'retrieval_role_arn': 'RetrievalRoleArn',
            'validators': 'Validators'
        }

        self._name = name
        self._description = description
        self._retrieval_role_arn = retrieval_role_arn
        self._validators = validators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateConfigurationProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateConfigurationProfile_request of this UpdateConfigurationProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateConfigurationProfileRequest.

        The name of the configuration profile.

        :return: The name of this UpdateConfigurationProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateConfigurationProfileRequest.

        The name of the configuration profile.

        :param name: The name of this UpdateConfigurationProfileRequest.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateConfigurationProfileRequest.

        A description of the configuration profile.

        :return: The description of this UpdateConfigurationProfileRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateConfigurationProfileRequest.

        A description of the configuration profile.

        :param description: The description of this UpdateConfigurationProfileRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def retrieval_role_arn(self):
        """Gets the retrieval_role_arn of this UpdateConfigurationProfileRequest.

        The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.

        :return: The retrieval_role_arn of this UpdateConfigurationProfileRequest.
        :rtype: str
        """
        return self._retrieval_role_arn

    @retrieval_role_arn.setter
    def retrieval_role_arn(self, retrieval_role_arn):
        """Sets the retrieval_role_arn of this UpdateConfigurationProfileRequest.

        The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.

        :param retrieval_role_arn: The retrieval_role_arn of this UpdateConfigurationProfileRequest.
        :type retrieval_role_arn: str
        """
        if retrieval_role_arn is not None and len(retrieval_role_arn) > 2048:
            raise ValueError("Invalid value for `retrieval_role_arn`, length must be less than or equal to `2048`")
        if retrieval_role_arn is not None and len(retrieval_role_arn) < 20:
            raise ValueError("Invalid value for `retrieval_role_arn`, length must be greater than or equal to `20`")
        if retrieval_role_arn is not None and not re.search(r'^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[\/].*)$', retrieval_role_arn):
            raise ValueError("Invalid value for `retrieval_role_arn`, must be a follow pattern or equal to `/^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[\/].*)$/`")

        self._retrieval_role_arn = retrieval_role_arn

    @property
    def validators(self):
        """Gets the validators of this UpdateConfigurationProfileRequest.

        A list of methods for validating the configuration.

        :return: The validators of this UpdateConfigurationProfileRequest.
        :rtype: List[Validator]
        """
        return self._validators

    @validators.setter
    def validators(self, validators):
        """Sets the validators of this UpdateConfigurationProfileRequest.

        A list of methods for validating the configuration.

        :param validators: The validators of this UpdateConfigurationProfileRequest.
        :type validators: List[Validator]
        """
        if validators is not None and len(validators) > 2:
            raise ValueError("Invalid value for `validators`, number of items must be less than or equal to `2`")
        if validators is not None and len(validators) < 0:
            raise ValueError("Invalid value for `validators`, number of items must be greater than or equal to `0`")

        self._validators = validators
