# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDeploymentStrategyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, deployment_duration_in_minutes: int=None, final_bake_time_in_minutes: int=None, growth_factor: float=None, growth_type: str=None):
        """UpdateDeploymentStrategyRequest - a model defined in OpenAPI

        :param description: The description of this UpdateDeploymentStrategyRequest.
        :param deployment_duration_in_minutes: The deployment_duration_in_minutes of this UpdateDeploymentStrategyRequest.
        :param final_bake_time_in_minutes: The final_bake_time_in_minutes of this UpdateDeploymentStrategyRequest.
        :param growth_factor: The growth_factor of this UpdateDeploymentStrategyRequest.
        :param growth_type: The growth_type of this UpdateDeploymentStrategyRequest.
        """
        self.openapi_types = {
            'description': str,
            'deployment_duration_in_minutes': int,
            'final_bake_time_in_minutes': int,
            'growth_factor': float,
            'growth_type': str
        }

        self.attribute_map = {
            'description': 'Description',
            'deployment_duration_in_minutes': 'DeploymentDurationInMinutes',
            'final_bake_time_in_minutes': 'FinalBakeTimeInMinutes',
            'growth_factor': 'GrowthFactor',
            'growth_type': 'GrowthType'
        }

        self._description = description
        self._deployment_duration_in_minutes = deployment_duration_in_minutes
        self._final_bake_time_in_minutes = final_bake_time_in_minutes
        self._growth_factor = growth_factor
        self._growth_type = growth_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDeploymentStrategyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDeploymentStrategy_request of this UpdateDeploymentStrategyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateDeploymentStrategyRequest.

        A description of the deployment strategy.

        :return: The description of this UpdateDeploymentStrategyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateDeploymentStrategyRequest.

        A description of the deployment strategy.

        :param description: The description of this UpdateDeploymentStrategyRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def deployment_duration_in_minutes(self):
        """Gets the deployment_duration_in_minutes of this UpdateDeploymentStrategyRequest.

        Total amount of time for a deployment to last.

        :return: The deployment_duration_in_minutes of this UpdateDeploymentStrategyRequest.
        :rtype: int
        """
        return self._deployment_duration_in_minutes

    @deployment_duration_in_minutes.setter
    def deployment_duration_in_minutes(self, deployment_duration_in_minutes):
        """Sets the deployment_duration_in_minutes of this UpdateDeploymentStrategyRequest.

        Total amount of time for a deployment to last.

        :param deployment_duration_in_minutes: The deployment_duration_in_minutes of this UpdateDeploymentStrategyRequest.
        :type deployment_duration_in_minutes: int
        """
        if deployment_duration_in_minutes is not None and deployment_duration_in_minutes > 1440:
            raise ValueError("Invalid value for `deployment_duration_in_minutes`, must be a value less than or equal to `1440`")
        if deployment_duration_in_minutes is not None and deployment_duration_in_minutes < 0:
            raise ValueError("Invalid value for `deployment_duration_in_minutes`, must be a value greater than or equal to `0`")

        self._deployment_duration_in_minutes = deployment_duration_in_minutes

    @property
    def final_bake_time_in_minutes(self):
        """Gets the final_bake_time_in_minutes of this UpdateDeploymentStrategyRequest.

        The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.

        :return: The final_bake_time_in_minutes of this UpdateDeploymentStrategyRequest.
        :rtype: int
        """
        return self._final_bake_time_in_minutes

    @final_bake_time_in_minutes.setter
    def final_bake_time_in_minutes(self, final_bake_time_in_minutes):
        """Sets the final_bake_time_in_minutes of this UpdateDeploymentStrategyRequest.

        The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.

        :param final_bake_time_in_minutes: The final_bake_time_in_minutes of this UpdateDeploymentStrategyRequest.
        :type final_bake_time_in_minutes: int
        """
        if final_bake_time_in_minutes is not None and final_bake_time_in_minutes > 1440:
            raise ValueError("Invalid value for `final_bake_time_in_minutes`, must be a value less than or equal to `1440`")
        if final_bake_time_in_minutes is not None and final_bake_time_in_minutes < 0:
            raise ValueError("Invalid value for `final_bake_time_in_minutes`, must be a value greater than or equal to `0`")

        self._final_bake_time_in_minutes = final_bake_time_in_minutes

    @property
    def growth_factor(self):
        """Gets the growth_factor of this UpdateDeploymentStrategyRequest.

        The percentage of targets to receive a deployed configuration during each interval.

        :return: The growth_factor of this UpdateDeploymentStrategyRequest.
        :rtype: float
        """
        return self._growth_factor

    @growth_factor.setter
    def growth_factor(self, growth_factor):
        """Sets the growth_factor of this UpdateDeploymentStrategyRequest.

        The percentage of targets to receive a deployed configuration during each interval.

        :param growth_factor: The growth_factor of this UpdateDeploymentStrategyRequest.
        :type growth_factor: float
        """
        if growth_factor is not None and growth_factor > 100:
            raise ValueError("Invalid value for `growth_factor`, must be a value less than or equal to `100`")
        if growth_factor is not None and growth_factor < 1:
            raise ValueError("Invalid value for `growth_factor`, must be a value greater than or equal to `1`")

        self._growth_factor = growth_factor

    @property
    def growth_type(self):
        """Gets the growth_type of this UpdateDeploymentStrategyRequest.

        <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>

        :return: The growth_type of this UpdateDeploymentStrategyRequest.
        :rtype: str
        """
        return self._growth_type

    @growth_type.setter
    def growth_type(self, growth_type):
        """Sets the growth_type of this UpdateDeploymentStrategyRequest.

        <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>

        :param growth_type: The growth_type of this UpdateDeploymentStrategyRequest.
        :type growth_type: str
        """
        allowed_values = ["LINEAR", "EXPONENTIAL"]  # noqa: E501
        if growth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `growth_type` ({0}), must be one of {1}"
                .format(growth_type, allowed_values)
            )

        self._growth_type = growth_type
