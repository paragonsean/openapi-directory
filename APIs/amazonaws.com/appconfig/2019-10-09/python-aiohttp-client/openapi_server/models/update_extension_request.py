# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.parameter import Parameter
from openapi_server import util


class UpdateExtensionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, actions: Dict[str, List[Action]]=None, parameters: Dict[str, Parameter]=None, version_number: int=None):
        """UpdateExtensionRequest - a model defined in OpenAPI

        :param description: The description of this UpdateExtensionRequest.
        :param actions: The actions of this UpdateExtensionRequest.
        :param parameters: The parameters of this UpdateExtensionRequest.
        :param version_number: The version_number of this UpdateExtensionRequest.
        """
        self.openapi_types = {
            'description': str,
            'actions': Dict[str, List[Action]],
            'parameters': Dict[str, Parameter],
            'version_number': int
        }

        self.attribute_map = {
            'description': 'Description',
            'actions': 'Actions',
            'parameters': 'Parameters',
            'version_number': 'VersionNumber'
        }

        self._description = description
        self._actions = actions
        self._parameters = parameters
        self._version_number = version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateExtensionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateExtension_request of this UpdateExtensionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateExtensionRequest.

        Information about the extension.

        :return: The description of this UpdateExtensionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateExtensionRequest.

        Information about the extension.

        :param description: The description of this UpdateExtensionRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def actions(self):
        """Gets the actions of this UpdateExtensionRequest.

        The actions defined in the extension.

        :return: The actions of this UpdateExtensionRequest.
        :rtype: Dict[str, List[Action]]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this UpdateExtensionRequest.

        The actions defined in the extension.

        :param actions: The actions of this UpdateExtensionRequest.
        :type actions: Dict[str, List[Action]]
        """
        if actions is not None and len(actions) > 5:
            raise ValueError("Invalid value for `actions`, number of items must be less than or equal to `5`")
        if actions is not None and len(actions) < 1:
            raise ValueError("Invalid value for `actions`, number of items must be greater than or equal to `1`")

        self._actions = actions

    @property
    def parameters(self):
        """Gets the parameters of this UpdateExtensionRequest.

        One or more parameters for the actions called by the extension.

        :return: The parameters of this UpdateExtensionRequest.
        :rtype: Dict[str, Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this UpdateExtensionRequest.

        One or more parameters for the actions called by the extension.

        :param parameters: The parameters of this UpdateExtensionRequest.
        :type parameters: Dict[str, Parameter]
        """
        if parameters is not None and len(parameters) > 5:
            raise ValueError("Invalid value for `parameters`, number of items must be less than or equal to `5`")
        if parameters is not None and len(parameters) < 1:
            raise ValueError("Invalid value for `parameters`, number of items must be greater than or equal to `1`")

        self._parameters = parameters

    @property
    def version_number(self):
        """Gets the version_number of this UpdateExtensionRequest.

        The extension version number.

        :return: The version_number of this UpdateExtensionRequest.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this UpdateExtensionRequest.

        The extension version number.

        :param version_number: The version_number of this UpdateExtensionRequest.
        :type version_number: int
        """

        self._version_number = version_number
