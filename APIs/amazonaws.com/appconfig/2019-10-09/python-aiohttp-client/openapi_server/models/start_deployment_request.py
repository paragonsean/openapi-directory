# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartDeploymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_strategy_id: str=None, configuration_profile_id: str=None, configuration_version: str=None, description: str=None, tags: Dict[str, str]=None, kms_key_identifier: str=None):
        """StartDeploymentRequest - a model defined in OpenAPI

        :param deployment_strategy_id: The deployment_strategy_id of this StartDeploymentRequest.
        :param configuration_profile_id: The configuration_profile_id of this StartDeploymentRequest.
        :param configuration_version: The configuration_version of this StartDeploymentRequest.
        :param description: The description of this StartDeploymentRequest.
        :param tags: The tags of this StartDeploymentRequest.
        :param kms_key_identifier: The kms_key_identifier of this StartDeploymentRequest.
        """
        self.openapi_types = {
            'deployment_strategy_id': str,
            'configuration_profile_id': str,
            'configuration_version': str,
            'description': str,
            'tags': Dict[str, str],
            'kms_key_identifier': str
        }

        self.attribute_map = {
            'deployment_strategy_id': 'DeploymentStrategyId',
            'configuration_profile_id': 'ConfigurationProfileId',
            'configuration_version': 'ConfigurationVersion',
            'description': 'Description',
            'tags': 'Tags',
            'kms_key_identifier': 'KmsKeyIdentifier'
        }

        self._deployment_strategy_id = deployment_strategy_id
        self._configuration_profile_id = configuration_profile_id
        self._configuration_version = configuration_version
        self._description = description
        self._tags = tags
        self._kms_key_identifier = kms_key_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartDeploymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartDeployment_request of this StartDeploymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_strategy_id(self):
        """Gets the deployment_strategy_id of this StartDeploymentRequest.

        The deployment strategy ID.

        :return: The deployment_strategy_id of this StartDeploymentRequest.
        :rtype: str
        """
        return self._deployment_strategy_id

    @deployment_strategy_id.setter
    def deployment_strategy_id(self, deployment_strategy_id):
        """Sets the deployment_strategy_id of this StartDeploymentRequest.

        The deployment strategy ID.

        :param deployment_strategy_id: The deployment_strategy_id of this StartDeploymentRequest.
        :type deployment_strategy_id: str
        """
        if deployment_strategy_id is None:
            raise ValueError("Invalid value for `deployment_strategy_id`, must not be `None`")
        if deployment_strategy_id is not None and not re.search(r'(^[a-z0-9]{4,7}$|^AppConfig\.[A-Za-z0-9]{9,40}$)', deployment_strategy_id):
            raise ValueError("Invalid value for `deployment_strategy_id`, must be a follow pattern or equal to `/(^[a-z0-9]{4,7}$|^AppConfig\.[A-Za-z0-9]{9,40}$)/`")

        self._deployment_strategy_id = deployment_strategy_id

    @property
    def configuration_profile_id(self):
        """Gets the configuration_profile_id of this StartDeploymentRequest.

        The configuration profile ID.

        :return: The configuration_profile_id of this StartDeploymentRequest.
        :rtype: str
        """
        return self._configuration_profile_id

    @configuration_profile_id.setter
    def configuration_profile_id(self, configuration_profile_id):
        """Sets the configuration_profile_id of this StartDeploymentRequest.

        The configuration profile ID.

        :param configuration_profile_id: The configuration_profile_id of this StartDeploymentRequest.
        :type configuration_profile_id: str
        """
        if configuration_profile_id is None:
            raise ValueError("Invalid value for `configuration_profile_id`, must not be `None`")
        if configuration_profile_id is not None and not re.search(r'[a-z0-9]{4,7}', configuration_profile_id):
            raise ValueError("Invalid value for `configuration_profile_id`, must be a follow pattern or equal to `/[a-z0-9]{4,7}/`")

        self._configuration_profile_id = configuration_profile_id

    @property
    def configuration_version(self):
        """Gets the configuration_version of this StartDeploymentRequest.

        The configuration version to deploy. If deploying an AppConfig hosted configuration version, you can specify either the version number or version label.

        :return: The configuration_version of this StartDeploymentRequest.
        :rtype: str
        """
        return self._configuration_version

    @configuration_version.setter
    def configuration_version(self, configuration_version):
        """Sets the configuration_version of this StartDeploymentRequest.

        The configuration version to deploy. If deploying an AppConfig hosted configuration version, you can specify either the version number or version label.

        :param configuration_version: The configuration_version of this StartDeploymentRequest.
        :type configuration_version: str
        """
        if configuration_version is None:
            raise ValueError("Invalid value for `configuration_version`, must not be `None`")
        if configuration_version is not None and len(configuration_version) > 1024:
            raise ValueError("Invalid value for `configuration_version`, length must be less than or equal to `1024`")
        if configuration_version is not None and len(configuration_version) < 1:
            raise ValueError("Invalid value for `configuration_version`, length must be greater than or equal to `1`")

        self._configuration_version = configuration_version

    @property
    def description(self):
        """Gets the description of this StartDeploymentRequest.

        A description of the deployment.

        :return: The description of this StartDeploymentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartDeploymentRequest.

        A description of the deployment.

        :param description: The description of this StartDeploymentRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this StartDeploymentRequest.

        Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :return: The tags of this StartDeploymentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartDeploymentRequest.

        Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :param tags: The tags of this StartDeploymentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def kms_key_identifier(self):
        """Gets the kms_key_identifier of this StartDeploymentRequest.

        The KMS key identifier (key ID, key alias, or key ARN). AppConfig uses this ID to encrypt the configuration data using a customer managed key. 

        :return: The kms_key_identifier of this StartDeploymentRequest.
        :rtype: str
        """
        return self._kms_key_identifier

    @kms_key_identifier.setter
    def kms_key_identifier(self, kms_key_identifier):
        """Sets the kms_key_identifier of this StartDeploymentRequest.

        The KMS key identifier (key ID, key alias, or key ARN). AppConfig uses this ID to encrypt the configuration data using a customer managed key. 

        :param kms_key_identifier: The kms_key_identifier of this StartDeploymentRequest.
        :type kms_key_identifier: str
        """
        if kms_key_identifier is not None and len(kms_key_identifier) > 2048:
            raise ValueError("Invalid value for `kms_key_identifier`, length must be less than or equal to `2048`")
        if kms_key_identifier is not None and len(kms_key_identifier) < 1:
            raise ValueError("Invalid value for `kms_key_identifier`, length must be greater than or equal to `1`")

        self._kms_key_identifier = kms_key_identifier
