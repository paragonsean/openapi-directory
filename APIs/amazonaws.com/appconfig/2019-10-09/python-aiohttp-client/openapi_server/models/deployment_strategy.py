# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.growth_type import GrowthType
from openapi_server.models.replicate_to import ReplicateTo
from openapi_server import util


class DeploymentStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, deployment_duration_in_minutes: int=None, growth_type: GrowthType=None, growth_factor: float=None, final_bake_time_in_minutes: int=None, replicate_to: ReplicateTo=None):
        """DeploymentStrategy - a model defined in OpenAPI

        :param id: The id of this DeploymentStrategy.
        :param name: The name of this DeploymentStrategy.
        :param description: The description of this DeploymentStrategy.
        :param deployment_duration_in_minutes: The deployment_duration_in_minutes of this DeploymentStrategy.
        :param growth_type: The growth_type of this DeploymentStrategy.
        :param growth_factor: The growth_factor of this DeploymentStrategy.
        :param final_bake_time_in_minutes: The final_bake_time_in_minutes of this DeploymentStrategy.
        :param replicate_to: The replicate_to of this DeploymentStrategy.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'deployment_duration_in_minutes': int,
            'growth_type': GrowthType,
            'growth_factor': float,
            'final_bake_time_in_minutes': int,
            'replicate_to': ReplicateTo
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'description': 'Description',
            'deployment_duration_in_minutes': 'DeploymentDurationInMinutes',
            'growth_type': 'GrowthType',
            'growth_factor': 'GrowthFactor',
            'final_bake_time_in_minutes': 'FinalBakeTimeInMinutes',
            'replicate_to': 'ReplicateTo'
        }

        self._id = id
        self._name = name
        self._description = description
        self._deployment_duration_in_minutes = deployment_duration_in_minutes
        self._growth_type = growth_type
        self._growth_factor = growth_factor
        self._final_bake_time_in_minutes = final_bake_time_in_minutes
        self._replicate_to = replicate_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentStrategy of this DeploymentStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeploymentStrategy.


        :return: The id of this DeploymentStrategy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentStrategy.


        :param id: The id of this DeploymentStrategy.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DeploymentStrategy.


        :return: The name of this DeploymentStrategy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentStrategy.


        :param name: The name of this DeploymentStrategy.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DeploymentStrategy.


        :return: The description of this DeploymentStrategy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeploymentStrategy.


        :param description: The description of this DeploymentStrategy.
        :type description: str
        """

        self._description = description

    @property
    def deployment_duration_in_minutes(self):
        """Gets the deployment_duration_in_minutes of this DeploymentStrategy.


        :return: The deployment_duration_in_minutes of this DeploymentStrategy.
        :rtype: int
        """
        return self._deployment_duration_in_minutes

    @deployment_duration_in_minutes.setter
    def deployment_duration_in_minutes(self, deployment_duration_in_minutes):
        """Sets the deployment_duration_in_minutes of this DeploymentStrategy.


        :param deployment_duration_in_minutes: The deployment_duration_in_minutes of this DeploymentStrategy.
        :type deployment_duration_in_minutes: int
        """

        self._deployment_duration_in_minutes = deployment_duration_in_minutes

    @property
    def growth_type(self):
        """Gets the growth_type of this DeploymentStrategy.


        :return: The growth_type of this DeploymentStrategy.
        :rtype: GrowthType
        """
        return self._growth_type

    @growth_type.setter
    def growth_type(self, growth_type):
        """Sets the growth_type of this DeploymentStrategy.


        :param growth_type: The growth_type of this DeploymentStrategy.
        :type growth_type: GrowthType
        """

        self._growth_type = growth_type

    @property
    def growth_factor(self):
        """Gets the growth_factor of this DeploymentStrategy.


        :return: The growth_factor of this DeploymentStrategy.
        :rtype: float
        """
        return self._growth_factor

    @growth_factor.setter
    def growth_factor(self, growth_factor):
        """Sets the growth_factor of this DeploymentStrategy.


        :param growth_factor: The growth_factor of this DeploymentStrategy.
        :type growth_factor: float
        """

        self._growth_factor = growth_factor

    @property
    def final_bake_time_in_minutes(self):
        """Gets the final_bake_time_in_minutes of this DeploymentStrategy.


        :return: The final_bake_time_in_minutes of this DeploymentStrategy.
        :rtype: int
        """
        return self._final_bake_time_in_minutes

    @final_bake_time_in_minutes.setter
    def final_bake_time_in_minutes(self, final_bake_time_in_minutes):
        """Sets the final_bake_time_in_minutes of this DeploymentStrategy.


        :param final_bake_time_in_minutes: The final_bake_time_in_minutes of this DeploymentStrategy.
        :type final_bake_time_in_minutes: int
        """

        self._final_bake_time_in_minutes = final_bake_time_in_minutes

    @property
    def replicate_to(self):
        """Gets the replicate_to of this DeploymentStrategy.


        :return: The replicate_to of this DeploymentStrategy.
        :rtype: ReplicateTo
        """
        return self._replicate_to

    @replicate_to.setter
    def replicate_to(self, replicate_to):
        """Sets the replicate_to of this DeploymentStrategy.


        :param replicate_to: The replicate_to of this DeploymentStrategy.
        :type replicate_to: ReplicateTo
        """

        self._replicate_to = replicate_to
