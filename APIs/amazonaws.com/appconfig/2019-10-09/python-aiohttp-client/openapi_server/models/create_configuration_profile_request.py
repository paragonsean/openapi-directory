# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validator import Validator
import re
from openapi_server import util


class CreateConfigurationProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, location_uri: str=None, retrieval_role_arn: str=None, validators: List[Validator]=None, tags: Dict[str, str]=None, type: str=None):
        """CreateConfigurationProfileRequest - a model defined in OpenAPI

        :param name: The name of this CreateConfigurationProfileRequest.
        :param description: The description of this CreateConfigurationProfileRequest.
        :param location_uri: The location_uri of this CreateConfigurationProfileRequest.
        :param retrieval_role_arn: The retrieval_role_arn of this CreateConfigurationProfileRequest.
        :param validators: The validators of this CreateConfigurationProfileRequest.
        :param tags: The tags of this CreateConfigurationProfileRequest.
        :param type: The type of this CreateConfigurationProfileRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'location_uri': str,
            'retrieval_role_arn': str,
            'validators': List[Validator],
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'location_uri': 'LocationUri',
            'retrieval_role_arn': 'RetrievalRoleArn',
            'validators': 'Validators',
            'tags': 'Tags',
            'type': 'Type'
        }

        self._name = name
        self._description = description
        self._location_uri = location_uri
        self._retrieval_role_arn = retrieval_role_arn
        self._validators = validators
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfigurationProfile_request of this CreateConfigurationProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateConfigurationProfileRequest.

        A name for the configuration profile.

        :return: The name of this CreateConfigurationProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfigurationProfileRequest.

        A name for the configuration profile.

        :param name: The name of this CreateConfigurationProfileRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateConfigurationProfileRequest.

        A description of the configuration profile.

        :return: The description of this CreateConfigurationProfileRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfigurationProfileRequest.

        A description of the configuration profile.

        :param description: The description of this CreateConfigurationProfileRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def location_uri(self):
        """Gets the location_uri of this CreateConfigurationProfileRequest.

        <p>A URI to locate the configuration. You can specify the following:</p> <ul> <li> <p>For the AppConfig hosted configuration store and for feature flags, specify <code>hosted</code>.</p> </li> <li> <p>For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format <code>ssm-parameter://&lt;parameter name&gt;</code> or the ARN.</p> </li> <li> <p>For an Secrets Manager secret, specify the URI in the following format: <code>secrets-manager</code>://&lt;secret name&gt;.</p> </li> <li> <p>For an Amazon S3 object, specify the URI in the following format: <code>s3://&lt;bucket&gt;/&lt;objectKey&gt; </code>. Here is an example: <code>s3://my-bucket/my-app/us-east-1/my-config.json</code> </p> </li> <li> <p>For an SSM document, specify either the document name in the format <code>ssm-document://&lt;document name&gt;</code> or the Amazon Resource Name (ARN).</p> </li> </ul>

        :return: The location_uri of this CreateConfigurationProfileRequest.
        :rtype: str
        """
        return self._location_uri

    @location_uri.setter
    def location_uri(self, location_uri):
        """Sets the location_uri of this CreateConfigurationProfileRequest.

        <p>A URI to locate the configuration. You can specify the following:</p> <ul> <li> <p>For the AppConfig hosted configuration store and for feature flags, specify <code>hosted</code>.</p> </li> <li> <p>For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format <code>ssm-parameter://&lt;parameter name&gt;</code> or the ARN.</p> </li> <li> <p>For an Secrets Manager secret, specify the URI in the following format: <code>secrets-manager</code>://&lt;secret name&gt;.</p> </li> <li> <p>For an Amazon S3 object, specify the URI in the following format: <code>s3://&lt;bucket&gt;/&lt;objectKey&gt; </code>. Here is an example: <code>s3://my-bucket/my-app/us-east-1/my-config.json</code> </p> </li> <li> <p>For an SSM document, specify either the document name in the format <code>ssm-document://&lt;document name&gt;</code> or the Amazon Resource Name (ARN).</p> </li> </ul>

        :param location_uri: The location_uri of this CreateConfigurationProfileRequest.
        :type location_uri: str
        """
        if location_uri is None:
            raise ValueError("Invalid value for `location_uri`, must not be `None`")
        if location_uri is not None and len(location_uri) > 2048:
            raise ValueError("Invalid value for `location_uri`, length must be less than or equal to `2048`")
        if location_uri is not None and len(location_uri) < 1:
            raise ValueError("Invalid value for `location_uri`, length must be greater than or equal to `1`")

        self._location_uri = location_uri

    @property
    def retrieval_role_arn(self):
        """Gets the retrieval_role_arn of this CreateConfigurationProfileRequest.

        <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p> <important> <p>A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration. </p> </important>

        :return: The retrieval_role_arn of this CreateConfigurationProfileRequest.
        :rtype: str
        """
        return self._retrieval_role_arn

    @retrieval_role_arn.setter
    def retrieval_role_arn(self, retrieval_role_arn):
        """Sets the retrieval_role_arn of this CreateConfigurationProfileRequest.

        <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p> <important> <p>A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration. </p> </important>

        :param retrieval_role_arn: The retrieval_role_arn of this CreateConfigurationProfileRequest.
        :type retrieval_role_arn: str
        """
        if retrieval_role_arn is not None and len(retrieval_role_arn) > 2048:
            raise ValueError("Invalid value for `retrieval_role_arn`, length must be less than or equal to `2048`")
        if retrieval_role_arn is not None and len(retrieval_role_arn) < 20:
            raise ValueError("Invalid value for `retrieval_role_arn`, length must be greater than or equal to `20`")
        if retrieval_role_arn is not None and not re.search(r'^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[\/].*)$', retrieval_role_arn):
            raise ValueError("Invalid value for `retrieval_role_arn`, must be a follow pattern or equal to `/^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[\/].*)$/`")

        self._retrieval_role_arn = retrieval_role_arn

    @property
    def validators(self):
        """Gets the validators of this CreateConfigurationProfileRequest.

        A list of methods for validating the configuration.

        :return: The validators of this CreateConfigurationProfileRequest.
        :rtype: List[Validator]
        """
        return self._validators

    @validators.setter
    def validators(self, validators):
        """Sets the validators of this CreateConfigurationProfileRequest.

        A list of methods for validating the configuration.

        :param validators: The validators of this CreateConfigurationProfileRequest.
        :type validators: List[Validator]
        """
        if validators is not None and len(validators) > 2:
            raise ValueError("Invalid value for `validators`, number of items must be less than or equal to `2`")
        if validators is not None and len(validators) < 0:
            raise ValueError("Invalid value for `validators`, number of items must be greater than or equal to `0`")

        self._validators = validators

    @property
    def tags(self):
        """Gets the tags of this CreateConfigurationProfileRequest.

        Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :return: The tags of this CreateConfigurationProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfigurationProfileRequest.

        Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :param tags: The tags of this CreateConfigurationProfileRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this CreateConfigurationProfileRequest.

        <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p> <p> <code>AWS.AppConfig.FeatureFlags</code> </p> <p> <code>AWS.Freeform</code> </p>

        :return: The type of this CreateConfigurationProfileRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateConfigurationProfileRequest.

        <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p> <p> <code>AWS.AppConfig.FeatureFlags</code> </p> <p> <code>AWS.Freeform</code> </p>

        :param type: The type of this CreateConfigurationProfileRequest.
        :type type: str
        """
        if type is not None and not re.search(r'^[a-zA-Z\.]+', type):
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/^[a-zA-Z\.]+/`")

        self._type = type
