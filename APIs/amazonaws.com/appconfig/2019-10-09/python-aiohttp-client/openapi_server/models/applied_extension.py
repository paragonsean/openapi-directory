# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppliedExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_id: str=None, extension_association_id: str=None, version_number: int=None, parameters: Dict=None):
        """AppliedExtension - a model defined in OpenAPI

        :param extension_id: The extension_id of this AppliedExtension.
        :param extension_association_id: The extension_association_id of this AppliedExtension.
        :param version_number: The version_number of this AppliedExtension.
        :param parameters: The parameters of this AppliedExtension.
        """
        self.openapi_types = {
            'extension_id': str,
            'extension_association_id': str,
            'version_number': int,
            'parameters': Dict
        }

        self.attribute_map = {
            'extension_id': 'ExtensionId',
            'extension_association_id': 'ExtensionAssociationId',
            'version_number': 'VersionNumber',
            'parameters': 'Parameters'
        }

        self._extension_id = extension_id
        self._extension_association_id = extension_association_id
        self._version_number = version_number
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppliedExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppliedExtension of this AppliedExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_id(self):
        """Gets the extension_id of this AppliedExtension.


        :return: The extension_id of this AppliedExtension.
        :rtype: str
        """
        return self._extension_id

    @extension_id.setter
    def extension_id(self, extension_id):
        """Sets the extension_id of this AppliedExtension.


        :param extension_id: The extension_id of this AppliedExtension.
        :type extension_id: str
        """

        self._extension_id = extension_id

    @property
    def extension_association_id(self):
        """Gets the extension_association_id of this AppliedExtension.


        :return: The extension_association_id of this AppliedExtension.
        :rtype: str
        """
        return self._extension_association_id

    @extension_association_id.setter
    def extension_association_id(self, extension_association_id):
        """Sets the extension_association_id of this AppliedExtension.


        :param extension_association_id: The extension_association_id of this AppliedExtension.
        :type extension_association_id: str
        """

        self._extension_association_id = extension_association_id

    @property
    def version_number(self):
        """Gets the version_number of this AppliedExtension.


        :return: The version_number of this AppliedExtension.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this AppliedExtension.


        :param version_number: The version_number of this AppliedExtension.
        :type version_number: int
        """

        self._version_number = version_number

    @property
    def parameters(self):
        """Gets the parameters of this AppliedExtension.


        :return: The parameters of this AppliedExtension.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AppliedExtension.


        :param parameters: The parameters of this AppliedExtension.
        :type parameters: Dict
        """

        self._parameters = parameters
