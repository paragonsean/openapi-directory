# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtensionAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, extension_arn: str=None, resource_arn: str=None, arn: str=None, parameters: Dict=None, extension_version_number: int=None):
        """ExtensionAssociation - a model defined in OpenAPI

        :param id: The id of this ExtensionAssociation.
        :param extension_arn: The extension_arn of this ExtensionAssociation.
        :param resource_arn: The resource_arn of this ExtensionAssociation.
        :param arn: The arn of this ExtensionAssociation.
        :param parameters: The parameters of this ExtensionAssociation.
        :param extension_version_number: The extension_version_number of this ExtensionAssociation.
        """
        self.openapi_types = {
            'id': str,
            'extension_arn': str,
            'resource_arn': str,
            'arn': str,
            'parameters': Dict,
            'extension_version_number': int
        }

        self.attribute_map = {
            'id': 'Id',
            'extension_arn': 'ExtensionArn',
            'resource_arn': 'ResourceArn',
            'arn': 'Arn',
            'parameters': 'Parameters',
            'extension_version_number': 'ExtensionVersionNumber'
        }

        self._id = id
        self._extension_arn = extension_arn
        self._resource_arn = resource_arn
        self._arn = arn
        self._parameters = parameters
        self._extension_version_number = extension_version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionAssociation of this ExtensionAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ExtensionAssociation.


        :return: The id of this ExtensionAssociation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtensionAssociation.


        :param id: The id of this ExtensionAssociation.
        :type id: str
        """

        self._id = id

    @property
    def extension_arn(self):
        """Gets the extension_arn of this ExtensionAssociation.


        :return: The extension_arn of this ExtensionAssociation.
        :rtype: str
        """
        return self._extension_arn

    @extension_arn.setter
    def extension_arn(self, extension_arn):
        """Sets the extension_arn of this ExtensionAssociation.


        :param extension_arn: The extension_arn of this ExtensionAssociation.
        :type extension_arn: str
        """

        self._extension_arn = extension_arn

    @property
    def resource_arn(self):
        """Gets the resource_arn of this ExtensionAssociation.


        :return: The resource_arn of this ExtensionAssociation.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this ExtensionAssociation.


        :param resource_arn: The resource_arn of this ExtensionAssociation.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def arn(self):
        """Gets the arn of this ExtensionAssociation.


        :return: The arn of this ExtensionAssociation.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ExtensionAssociation.


        :param arn: The arn of this ExtensionAssociation.
        :type arn: str
        """

        self._arn = arn

    @property
    def parameters(self):
        """Gets the parameters of this ExtensionAssociation.


        :return: The parameters of this ExtensionAssociation.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExtensionAssociation.


        :param parameters: The parameters of this ExtensionAssociation.
        :type parameters: Dict
        """

        self._parameters = parameters

    @property
    def extension_version_number(self):
        """Gets the extension_version_number of this ExtensionAssociation.


        :return: The extension_version_number of this ExtensionAssociation.
        :rtype: int
        """
        return self._extension_version_number

    @extension_version_number.setter
    def extension_version_number(self, extension_version_number):
        """Sets the extension_version_number of this ExtensionAssociation.


        :param extension_version_number: The extension_version_number of this ExtensionAssociation.
        :type extension_version_number: int
        """

        self._extension_version_number = extension_version_number
