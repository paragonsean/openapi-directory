# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_state import EnvironmentState
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, id: str=None, name: str=None, description: str=None, state: EnvironmentState=None, monitors: List=None):
        """Environment - a model defined in OpenAPI

        :param application_id: The application_id of this Environment.
        :param id: The id of this Environment.
        :param name: The name of this Environment.
        :param description: The description of this Environment.
        :param state: The state of this Environment.
        :param monitors: The monitors of this Environment.
        """
        self.openapi_types = {
            'application_id': str,
            'id': str,
            'name': str,
            'description': str,
            'state': EnvironmentState,
            'monitors': List
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'id': 'Id',
            'name': 'Name',
            'description': 'Description',
            'state': 'State',
            'monitors': 'Monitors'
        }

        self._application_id = application_id
        self._id = id
        self._name = name
        self._description = description
        self._state = state
        self._monitors = monitors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this Environment.


        :return: The application_id of this Environment.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Environment.


        :param application_id: The application_id of this Environment.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def id(self):
        """Gets the id of this Environment.


        :return: The id of this Environment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.


        :param id: The id of this Environment.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Environment.


        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.


        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Environment.


        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.


        :param description: The description of this Environment.
        :type description: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this Environment.


        :return: The state of this Environment.
        :rtype: EnvironmentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Environment.


        :param state: The state of this Environment.
        :type state: EnvironmentState
        """

        self._state = state

    @property
    def monitors(self):
        """Gets the monitors of this Environment.


        :return: The monitors of this Environment.
        :rtype: List
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors):
        """Sets the monitors of this Environment.


        :param monitors: The monitors of this Environment.
        :type monitors: List
        """

        self._monitors = monitors
