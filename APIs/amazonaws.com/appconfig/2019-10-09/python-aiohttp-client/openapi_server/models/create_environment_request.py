# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitor import Monitor
from openapi_server import util


class CreateEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, monitors: List[Monitor]=None, tags: Dict[str, str]=None):
        """CreateEnvironmentRequest - a model defined in OpenAPI

        :param name: The name of this CreateEnvironmentRequest.
        :param description: The description of this CreateEnvironmentRequest.
        :param monitors: The monitors of this CreateEnvironmentRequest.
        :param tags: The tags of this CreateEnvironmentRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'monitors': List[Monitor],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'monitors': 'Monitors',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._monitors = monitors
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironment_request of this CreateEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateEnvironmentRequest.

        A name for the environment.

        :return: The name of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEnvironmentRequest.

        A name for the environment.

        :param name: The name of this CreateEnvironmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentRequest.

        A description of the environment.

        :return: The description of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentRequest.

        A description of the environment.

        :param description: The description of this CreateEnvironmentRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def monitors(self):
        """Gets the monitors of this CreateEnvironmentRequest.

        Amazon CloudWatch alarms to monitor during the deployment process.

        :return: The monitors of this CreateEnvironmentRequest.
        :rtype: List[Monitor]
        """
        return self._monitors

    @monitors.setter
    def monitors(self, monitors):
        """Sets the monitors of this CreateEnvironmentRequest.

        Amazon CloudWatch alarms to monitor during the deployment process.

        :param monitors: The monitors of this CreateEnvironmentRequest.
        :type monitors: List[Monitor]
        """
        if monitors is not None and len(monitors) > 5:
            raise ValueError("Invalid value for `monitors`, number of items must be less than or equal to `5`")
        if monitors is not None and len(monitors) < 0:
            raise ValueError("Invalid value for `monitors`, number of items must be greater than or equal to `0`")

        self._monitors = monitors

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentRequest.

        Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :return: The tags of this CreateEnvironmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentRequest.

        Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.

        :param tags: The tags of this CreateEnvironmentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
