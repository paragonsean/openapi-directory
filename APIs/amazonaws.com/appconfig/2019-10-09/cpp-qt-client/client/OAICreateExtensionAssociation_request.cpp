/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExtensionAssociation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExtensionAssociation_request::OAICreateExtensionAssociation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExtensionAssociation_request::OAICreateExtensionAssociation_request() {
    this->initializeModel();
}

OAICreateExtensionAssociation_request::~OAICreateExtensionAssociation_request() {}

void OAICreateExtensionAssociation_request::initializeModel() {

    m_extension_identifier_isSet = false;
    m_extension_identifier_isValid = false;

    m_extension_version_number_isSet = false;
    m_extension_version_number_isValid = false;

    m_resource_identifier_isSet = false;
    m_resource_identifier_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateExtensionAssociation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExtensionAssociation_request::fromJsonObject(QJsonObject json) {

    m_extension_identifier_isValid = ::OpenAPI::fromJsonValue(m_extension_identifier, json[QString("ExtensionIdentifier")]);
    m_extension_identifier_isSet = !json[QString("ExtensionIdentifier")].isNull() && m_extension_identifier_isValid;

    m_extension_version_number_isValid = ::OpenAPI::fromJsonValue(m_extension_version_number, json[QString("ExtensionVersionNumber")]);
    m_extension_version_number_isSet = !json[QString("ExtensionVersionNumber")].isNull() && m_extension_version_number_isValid;

    m_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier, json[QString("ResourceIdentifier")]);
    m_resource_identifier_isSet = !json[QString("ResourceIdentifier")].isNull() && m_resource_identifier_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateExtensionAssociation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExtensionAssociation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_identifier_isSet) {
        obj.insert(QString("ExtensionIdentifier"), ::OpenAPI::toJsonValue(m_extension_identifier));
    }
    if (m_extension_version_number_isSet) {
        obj.insert(QString("ExtensionVersionNumber"), ::OpenAPI::toJsonValue(m_extension_version_number));
    }
    if (m_resource_identifier_isSet) {
        obj.insert(QString("ResourceIdentifier"), ::OpenAPI::toJsonValue(m_resource_identifier));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateExtensionAssociation_request::getExtensionIdentifier() const {
    return m_extension_identifier;
}
void OAICreateExtensionAssociation_request::setExtensionIdentifier(const QString &extension_identifier) {
    m_extension_identifier = extension_identifier;
    m_extension_identifier_isSet = true;
}

bool OAICreateExtensionAssociation_request::is_extension_identifier_Set() const{
    return m_extension_identifier_isSet;
}

bool OAICreateExtensionAssociation_request::is_extension_identifier_Valid() const{
    return m_extension_identifier_isValid;
}

qint32 OAICreateExtensionAssociation_request::getExtensionVersionNumber() const {
    return m_extension_version_number;
}
void OAICreateExtensionAssociation_request::setExtensionVersionNumber(const qint32 &extension_version_number) {
    m_extension_version_number = extension_version_number;
    m_extension_version_number_isSet = true;
}

bool OAICreateExtensionAssociation_request::is_extension_version_number_Set() const{
    return m_extension_version_number_isSet;
}

bool OAICreateExtensionAssociation_request::is_extension_version_number_Valid() const{
    return m_extension_version_number_isValid;
}

QString OAICreateExtensionAssociation_request::getResourceIdentifier() const {
    return m_resource_identifier;
}
void OAICreateExtensionAssociation_request::setResourceIdentifier(const QString &resource_identifier) {
    m_resource_identifier = resource_identifier;
    m_resource_identifier_isSet = true;
}

bool OAICreateExtensionAssociation_request::is_resource_identifier_Set() const{
    return m_resource_identifier_isSet;
}

bool OAICreateExtensionAssociation_request::is_resource_identifier_Valid() const{
    return m_resource_identifier_isValid;
}

QMap<QString, QString> OAICreateExtensionAssociation_request::getParameters() const {
    return m_parameters;
}
void OAICreateExtensionAssociation_request::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateExtensionAssociation_request::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateExtensionAssociation_request::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap<QString, QString> OAICreateExtensionAssociation_request::getTags() const {
    return m_tags;
}
void OAICreateExtensionAssociation_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateExtensionAssociation_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateExtensionAssociation_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateExtensionAssociation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExtensionAssociation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_extension_identifier_isValid && m_resource_identifier_isValid && true;
}

} // namespace OpenAPI
