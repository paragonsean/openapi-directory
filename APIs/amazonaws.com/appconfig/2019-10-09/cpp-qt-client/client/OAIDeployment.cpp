/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_deployment_strategy_id_isSet = false;
    m_deployment_strategy_id_isValid = false;

    m_configuration_profile_id_isSet = false;
    m_configuration_profile_id_isValid = false;

    m_deployment_number_isSet = false;
    m_deployment_number_isValid = false;

    m_configuration_name_isSet = false;
    m_configuration_name_isValid = false;

    m_configuration_location_uri_isSet = false;
    m_configuration_location_uri_isValid = false;

    m_configuration_version_isSet = false;
    m_configuration_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_deployment_duration_in_minutes_isSet = false;
    m_deployment_duration_in_minutes_isValid = false;

    m_growth_type_isSet = false;
    m_growth_type_isValid = false;

    m_growth_factor_isSet = false;
    m_growth_factor_isValid = false;

    m_final_bake_time_in_minutes_isSet = false;
    m_final_bake_time_in_minutes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_event_log_isSet = false;
    m_event_log_isValid = false;

    m_percentage_complete_isSet = false;
    m_percentage_complete_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_applied_extensions_isSet = false;
    m_applied_extensions_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_kms_key_identifier_isSet = false;
    m_kms_key_identifier_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("EnvironmentId")]);
    m_environment_id_isSet = !json[QString("EnvironmentId")].isNull() && m_environment_id_isValid;

    m_deployment_strategy_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_strategy_id, json[QString("DeploymentStrategyId")]);
    m_deployment_strategy_id_isSet = !json[QString("DeploymentStrategyId")].isNull() && m_deployment_strategy_id_isValid;

    m_configuration_profile_id_isValid = ::OpenAPI::fromJsonValue(m_configuration_profile_id, json[QString("ConfigurationProfileId")]);
    m_configuration_profile_id_isSet = !json[QString("ConfigurationProfileId")].isNull() && m_configuration_profile_id_isValid;

    m_deployment_number_isValid = ::OpenAPI::fromJsonValue(m_deployment_number, json[QString("DeploymentNumber")]);
    m_deployment_number_isSet = !json[QString("DeploymentNumber")].isNull() && m_deployment_number_isValid;

    m_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_name, json[QString("ConfigurationName")]);
    m_configuration_name_isSet = !json[QString("ConfigurationName")].isNull() && m_configuration_name_isValid;

    m_configuration_location_uri_isValid = ::OpenAPI::fromJsonValue(m_configuration_location_uri, json[QString("ConfigurationLocationUri")]);
    m_configuration_location_uri_isSet = !json[QString("ConfigurationLocationUri")].isNull() && m_configuration_location_uri_isValid;

    m_configuration_version_isValid = ::OpenAPI::fromJsonValue(m_configuration_version, json[QString("ConfigurationVersion")]);
    m_configuration_version_isSet = !json[QString("ConfigurationVersion")].isNull() && m_configuration_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_deployment_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_deployment_duration_in_minutes, json[QString("DeploymentDurationInMinutes")]);
    m_deployment_duration_in_minutes_isSet = !json[QString("DeploymentDurationInMinutes")].isNull() && m_deployment_duration_in_minutes_isValid;

    m_growth_type_isValid = ::OpenAPI::fromJsonValue(m_growth_type, json[QString("GrowthType")]);
    m_growth_type_isSet = !json[QString("GrowthType")].isNull() && m_growth_type_isValid;

    m_growth_factor_isValid = ::OpenAPI::fromJsonValue(m_growth_factor, json[QString("GrowthFactor")]);
    m_growth_factor_isSet = !json[QString("GrowthFactor")].isNull() && m_growth_factor_isValid;

    m_final_bake_time_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_final_bake_time_in_minutes, json[QString("FinalBakeTimeInMinutes")]);
    m_final_bake_time_in_minutes_isSet = !json[QString("FinalBakeTimeInMinutes")].isNull() && m_final_bake_time_in_minutes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_event_log_isValid = ::OpenAPI::fromJsonValue(m_event_log, json[QString("EventLog")]);
    m_event_log_isSet = !json[QString("EventLog")].isNull() && m_event_log_isValid;

    m_percentage_complete_isValid = ::OpenAPI::fromJsonValue(m_percentage_complete, json[QString("PercentageComplete")]);
    m_percentage_complete_isSet = !json[QString("PercentageComplete")].isNull() && m_percentage_complete_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("CompletedAt")]);
    m_completed_at_isSet = !json[QString("CompletedAt")].isNull() && m_completed_at_isValid;

    m_applied_extensions_isValid = ::OpenAPI::fromJsonValue(m_applied_extensions, json[QString("AppliedExtensions")]);
    m_applied_extensions_isSet = !json[QString("AppliedExtensions")].isNull() && m_applied_extensions_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_kms_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_kms_key_identifier, json[QString("KmsKeyIdentifier")]);
    m_kms_key_identifier_isSet = !json[QString("KmsKeyIdentifier")].isNull() && m_kms_key_identifier_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("EnvironmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_deployment_strategy_id_isSet) {
        obj.insert(QString("DeploymentStrategyId"), ::OpenAPI::toJsonValue(m_deployment_strategy_id));
    }
    if (m_configuration_profile_id_isSet) {
        obj.insert(QString("ConfigurationProfileId"), ::OpenAPI::toJsonValue(m_configuration_profile_id));
    }
    if (m_deployment_number_isSet) {
        obj.insert(QString("DeploymentNumber"), ::OpenAPI::toJsonValue(m_deployment_number));
    }
    if (m_configuration_name_isSet) {
        obj.insert(QString("ConfigurationName"), ::OpenAPI::toJsonValue(m_configuration_name));
    }
    if (m_configuration_location_uri_isSet) {
        obj.insert(QString("ConfigurationLocationUri"), ::OpenAPI::toJsonValue(m_configuration_location_uri));
    }
    if (m_configuration_version_isSet) {
        obj.insert(QString("ConfigurationVersion"), ::OpenAPI::toJsonValue(m_configuration_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_deployment_duration_in_minutes_isSet) {
        obj.insert(QString("DeploymentDurationInMinutes"), ::OpenAPI::toJsonValue(m_deployment_duration_in_minutes));
    }
    if (m_growth_type.isSet()) {
        obj.insert(QString("GrowthType"), ::OpenAPI::toJsonValue(m_growth_type));
    }
    if (m_growth_factor_isSet) {
        obj.insert(QString("GrowthFactor"), ::OpenAPI::toJsonValue(m_growth_factor));
    }
    if (m_final_bake_time_in_minutes_isSet) {
        obj.insert(QString("FinalBakeTimeInMinutes"), ::OpenAPI::toJsonValue(m_final_bake_time_in_minutes));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_event_log.isSet()) {
        obj.insert(QString("EventLog"), ::OpenAPI::toJsonValue(m_event_log));
    }
    if (m_percentage_complete_isSet) {
        obj.insert(QString("PercentageComplete"), ::OpenAPI::toJsonValue(m_percentage_complete));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("CompletedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_applied_extensions.isSet()) {
        obj.insert(QString("AppliedExtensions"), ::OpenAPI::toJsonValue(m_applied_extensions));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_kms_key_identifier_isSet) {
        obj.insert(QString("KmsKeyIdentifier"), ::OpenAPI::toJsonValue(m_kms_key_identifier));
    }
    return obj;
}

QString OAIDeployment::getApplicationId() const {
    return m_application_id;
}
void OAIDeployment::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDeployment::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDeployment::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIDeployment::getEnvironmentId() const {
    return m_environment_id;
}
void OAIDeployment::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIDeployment::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIDeployment::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIDeployment::getDeploymentStrategyId() const {
    return m_deployment_strategy_id;
}
void OAIDeployment::setDeploymentStrategyId(const QString &deployment_strategy_id) {
    m_deployment_strategy_id = deployment_strategy_id;
    m_deployment_strategy_id_isSet = true;
}

bool OAIDeployment::is_deployment_strategy_id_Set() const{
    return m_deployment_strategy_id_isSet;
}

bool OAIDeployment::is_deployment_strategy_id_Valid() const{
    return m_deployment_strategy_id_isValid;
}

QString OAIDeployment::getConfigurationProfileId() const {
    return m_configuration_profile_id;
}
void OAIDeployment::setConfigurationProfileId(const QString &configuration_profile_id) {
    m_configuration_profile_id = configuration_profile_id;
    m_configuration_profile_id_isSet = true;
}

bool OAIDeployment::is_configuration_profile_id_Set() const{
    return m_configuration_profile_id_isSet;
}

bool OAIDeployment::is_configuration_profile_id_Valid() const{
    return m_configuration_profile_id_isValid;
}

qint32 OAIDeployment::getDeploymentNumber() const {
    return m_deployment_number;
}
void OAIDeployment::setDeploymentNumber(const qint32 &deployment_number) {
    m_deployment_number = deployment_number;
    m_deployment_number_isSet = true;
}

bool OAIDeployment::is_deployment_number_Set() const{
    return m_deployment_number_isSet;
}

bool OAIDeployment::is_deployment_number_Valid() const{
    return m_deployment_number_isValid;
}

QString OAIDeployment::getConfigurationName() const {
    return m_configuration_name;
}
void OAIDeployment::setConfigurationName(const QString &configuration_name) {
    m_configuration_name = configuration_name;
    m_configuration_name_isSet = true;
}

bool OAIDeployment::is_configuration_name_Set() const{
    return m_configuration_name_isSet;
}

bool OAIDeployment::is_configuration_name_Valid() const{
    return m_configuration_name_isValid;
}

QString OAIDeployment::getConfigurationLocationUri() const {
    return m_configuration_location_uri;
}
void OAIDeployment::setConfigurationLocationUri(const QString &configuration_location_uri) {
    m_configuration_location_uri = configuration_location_uri;
    m_configuration_location_uri_isSet = true;
}

bool OAIDeployment::is_configuration_location_uri_Set() const{
    return m_configuration_location_uri_isSet;
}

bool OAIDeployment::is_configuration_location_uri_Valid() const{
    return m_configuration_location_uri_isValid;
}

QString OAIDeployment::getConfigurationVersion() const {
    return m_configuration_version;
}
void OAIDeployment::setConfigurationVersion(const QString &configuration_version) {
    m_configuration_version = configuration_version;
    m_configuration_version_isSet = true;
}

bool OAIDeployment::is_configuration_version_Set() const{
    return m_configuration_version_isSet;
}

bool OAIDeployment::is_configuration_version_Valid() const{
    return m_configuration_version_isValid;
}

QString OAIDeployment::getDescription() const {
    return m_description;
}
void OAIDeployment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeployment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeployment::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIDeployment::getDeploymentDurationInMinutes() const {
    return m_deployment_duration_in_minutes;
}
void OAIDeployment::setDeploymentDurationInMinutes(const qint32 &deployment_duration_in_minutes) {
    m_deployment_duration_in_minutes = deployment_duration_in_minutes;
    m_deployment_duration_in_minutes_isSet = true;
}

bool OAIDeployment::is_deployment_duration_in_minutes_Set() const{
    return m_deployment_duration_in_minutes_isSet;
}

bool OAIDeployment::is_deployment_duration_in_minutes_Valid() const{
    return m_deployment_duration_in_minutes_isValid;
}

OAIGrowthType OAIDeployment::getGrowthType() const {
    return m_growth_type;
}
void OAIDeployment::setGrowthType(const OAIGrowthType &growth_type) {
    m_growth_type = growth_type;
    m_growth_type_isSet = true;
}

bool OAIDeployment::is_growth_type_Set() const{
    return m_growth_type_isSet;
}

bool OAIDeployment::is_growth_type_Valid() const{
    return m_growth_type_isValid;
}

float OAIDeployment::getGrowthFactor() const {
    return m_growth_factor;
}
void OAIDeployment::setGrowthFactor(const float &growth_factor) {
    m_growth_factor = growth_factor;
    m_growth_factor_isSet = true;
}

bool OAIDeployment::is_growth_factor_Set() const{
    return m_growth_factor_isSet;
}

bool OAIDeployment::is_growth_factor_Valid() const{
    return m_growth_factor_isValid;
}

qint32 OAIDeployment::getFinalBakeTimeInMinutes() const {
    return m_final_bake_time_in_minutes;
}
void OAIDeployment::setFinalBakeTimeInMinutes(const qint32 &final_bake_time_in_minutes) {
    m_final_bake_time_in_minutes = final_bake_time_in_minutes;
    m_final_bake_time_in_minutes_isSet = true;
}

bool OAIDeployment::is_final_bake_time_in_minutes_Set() const{
    return m_final_bake_time_in_minutes_isSet;
}

bool OAIDeployment::is_final_bake_time_in_minutes_Valid() const{
    return m_final_bake_time_in_minutes_isValid;
}

OAIDeploymentState OAIDeployment::getState() const {
    return m_state;
}
void OAIDeployment::setState(const OAIDeploymentState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeployment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeployment::is_state_Valid() const{
    return m_state_isValid;
}

QList OAIDeployment::getEventLog() const {
    return m_event_log;
}
void OAIDeployment::setEventLog(const QList &event_log) {
    m_event_log = event_log;
    m_event_log_isSet = true;
}

bool OAIDeployment::is_event_log_Set() const{
    return m_event_log_isSet;
}

bool OAIDeployment::is_event_log_Valid() const{
    return m_event_log_isValid;
}

float OAIDeployment::getPercentageComplete() const {
    return m_percentage_complete;
}
void OAIDeployment::setPercentageComplete(const float &percentage_complete) {
    m_percentage_complete = percentage_complete;
    m_percentage_complete_isSet = true;
}

bool OAIDeployment::is_percentage_complete_Set() const{
    return m_percentage_complete_isSet;
}

bool OAIDeployment::is_percentage_complete_Valid() const{
    return m_percentage_complete_isValid;
}

QDateTime OAIDeployment::getStartedAt() const {
    return m_started_at;
}
void OAIDeployment::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIDeployment::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIDeployment::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QDateTime OAIDeployment::getCompletedAt() const {
    return m_completed_at;
}
void OAIDeployment::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIDeployment::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIDeployment::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QList OAIDeployment::getAppliedExtensions() const {
    return m_applied_extensions;
}
void OAIDeployment::setAppliedExtensions(const QList &applied_extensions) {
    m_applied_extensions = applied_extensions;
    m_applied_extensions_isSet = true;
}

bool OAIDeployment::is_applied_extensions_Set() const{
    return m_applied_extensions_isSet;
}

bool OAIDeployment::is_applied_extensions_Valid() const{
    return m_applied_extensions_isValid;
}

QString OAIDeployment::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIDeployment::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIDeployment::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIDeployment::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAIDeployment::getKmsKeyIdentifier() const {
    return m_kms_key_identifier;
}
void OAIDeployment::setKmsKeyIdentifier(const QString &kms_key_identifier) {
    m_kms_key_identifier = kms_key_identifier;
    m_kms_key_identifier_isSet = true;
}

bool OAIDeployment::is_kms_key_identifier_Set() const{
    return m_kms_key_identifier_isSet;
}

bool OAIDeployment::is_kms_key_identifier_Valid() const{
    return m_kms_key_identifier_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_strategy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_bake_time_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_log.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
