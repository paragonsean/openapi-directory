/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploymentEvent.h
 *
 * An object that describes a deployment event.
 */

#ifndef OAIDeploymentEvent_H
#define OAIDeploymentEvent_H

#include <QJsonObject>

#include "OAIDeploymentEventType.h"
#include "OAITriggeredBy.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeploymentEvent : public OAIObject {
public:
    OAIDeploymentEvent();
    OAIDeploymentEvent(QString json);
    ~OAIDeploymentEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDeploymentEventType getEventType() const;
    void setEventType(const OAIDeploymentEventType &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    OAITriggeredBy getTriggeredBy() const;
    void setTriggeredBy(const OAITriggeredBy &triggered_by);
    bool is_triggered_by_Set() const;
    bool is_triggered_by_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getActionInvocations() const;
    void setActionInvocations(const QList &action_invocations);
    bool is_action_invocations_Set() const;
    bool is_action_invocations_Valid() const;

    QDateTime getOccurredAt() const;
    void setOccurredAt(const QDateTime &occurred_at);
    bool is_occurred_at_Set() const;
    bool is_occurred_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDeploymentEventType m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    OAITriggeredBy m_triggered_by;
    bool m_triggered_by_isSet;
    bool m_triggered_by_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_action_invocations;
    bool m_action_invocations_isSet;
    bool m_action_invocations_isValid;

    QDateTime m_occurred_at;
    bool m_occurred_at_isSet;
    bool m_occurred_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploymentEvent)

#endif // OAIDeploymentEvent_H
