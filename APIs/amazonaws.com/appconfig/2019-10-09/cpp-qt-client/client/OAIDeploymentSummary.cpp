/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentSummary::OAIDeploymentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentSummary::OAIDeploymentSummary() {
    this->initializeModel();
}

OAIDeploymentSummary::~OAIDeploymentSummary() {}

void OAIDeploymentSummary::initializeModel() {

    m_deployment_number_isSet = false;
    m_deployment_number_isValid = false;

    m_configuration_name_isSet = false;
    m_configuration_name_isValid = false;

    m_configuration_version_isSet = false;
    m_configuration_version_isValid = false;

    m_deployment_duration_in_minutes_isSet = false;
    m_deployment_duration_in_minutes_isValid = false;

    m_growth_type_isSet = false;
    m_growth_type_isValid = false;

    m_growth_factor_isSet = false;
    m_growth_factor_isValid = false;

    m_final_bake_time_in_minutes_isSet = false;
    m_final_bake_time_in_minutes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_percentage_complete_isSet = false;
    m_percentage_complete_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;
}

void OAIDeploymentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentSummary::fromJsonObject(QJsonObject json) {

    m_deployment_number_isValid = ::OpenAPI::fromJsonValue(m_deployment_number, json[QString("DeploymentNumber")]);
    m_deployment_number_isSet = !json[QString("DeploymentNumber")].isNull() && m_deployment_number_isValid;

    m_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_name, json[QString("ConfigurationName")]);
    m_configuration_name_isSet = !json[QString("ConfigurationName")].isNull() && m_configuration_name_isValid;

    m_configuration_version_isValid = ::OpenAPI::fromJsonValue(m_configuration_version, json[QString("ConfigurationVersion")]);
    m_configuration_version_isSet = !json[QString("ConfigurationVersion")].isNull() && m_configuration_version_isValid;

    m_deployment_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_deployment_duration_in_minutes, json[QString("DeploymentDurationInMinutes")]);
    m_deployment_duration_in_minutes_isSet = !json[QString("DeploymentDurationInMinutes")].isNull() && m_deployment_duration_in_minutes_isValid;

    m_growth_type_isValid = ::OpenAPI::fromJsonValue(m_growth_type, json[QString("GrowthType")]);
    m_growth_type_isSet = !json[QString("GrowthType")].isNull() && m_growth_type_isValid;

    m_growth_factor_isValid = ::OpenAPI::fromJsonValue(m_growth_factor, json[QString("GrowthFactor")]);
    m_growth_factor_isSet = !json[QString("GrowthFactor")].isNull() && m_growth_factor_isValid;

    m_final_bake_time_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_final_bake_time_in_minutes, json[QString("FinalBakeTimeInMinutes")]);
    m_final_bake_time_in_minutes_isSet = !json[QString("FinalBakeTimeInMinutes")].isNull() && m_final_bake_time_in_minutes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_percentage_complete_isValid = ::OpenAPI::fromJsonValue(m_percentage_complete, json[QString("PercentageComplete")]);
    m_percentage_complete_isSet = !json[QString("PercentageComplete")].isNull() && m_percentage_complete_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("StartedAt")]);
    m_started_at_isSet = !json[QString("StartedAt")].isNull() && m_started_at_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("CompletedAt")]);
    m_completed_at_isSet = !json[QString("CompletedAt")].isNull() && m_completed_at_isValid;
}

QString OAIDeploymentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_number_isSet) {
        obj.insert(QString("DeploymentNumber"), ::OpenAPI::toJsonValue(m_deployment_number));
    }
    if (m_configuration_name_isSet) {
        obj.insert(QString("ConfigurationName"), ::OpenAPI::toJsonValue(m_configuration_name));
    }
    if (m_configuration_version_isSet) {
        obj.insert(QString("ConfigurationVersion"), ::OpenAPI::toJsonValue(m_configuration_version));
    }
    if (m_deployment_duration_in_minutes_isSet) {
        obj.insert(QString("DeploymentDurationInMinutes"), ::OpenAPI::toJsonValue(m_deployment_duration_in_minutes));
    }
    if (m_growth_type.isSet()) {
        obj.insert(QString("GrowthType"), ::OpenAPI::toJsonValue(m_growth_type));
    }
    if (m_growth_factor_isSet) {
        obj.insert(QString("GrowthFactor"), ::OpenAPI::toJsonValue(m_growth_factor));
    }
    if (m_final_bake_time_in_minutes_isSet) {
        obj.insert(QString("FinalBakeTimeInMinutes"), ::OpenAPI::toJsonValue(m_final_bake_time_in_minutes));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_percentage_complete_isSet) {
        obj.insert(QString("PercentageComplete"), ::OpenAPI::toJsonValue(m_percentage_complete));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("StartedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("CompletedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    return obj;
}

qint32 OAIDeploymentSummary::getDeploymentNumber() const {
    return m_deployment_number;
}
void OAIDeploymentSummary::setDeploymentNumber(const qint32 &deployment_number) {
    m_deployment_number = deployment_number;
    m_deployment_number_isSet = true;
}

bool OAIDeploymentSummary::is_deployment_number_Set() const{
    return m_deployment_number_isSet;
}

bool OAIDeploymentSummary::is_deployment_number_Valid() const{
    return m_deployment_number_isValid;
}

QString OAIDeploymentSummary::getConfigurationName() const {
    return m_configuration_name;
}
void OAIDeploymentSummary::setConfigurationName(const QString &configuration_name) {
    m_configuration_name = configuration_name;
    m_configuration_name_isSet = true;
}

bool OAIDeploymentSummary::is_configuration_name_Set() const{
    return m_configuration_name_isSet;
}

bool OAIDeploymentSummary::is_configuration_name_Valid() const{
    return m_configuration_name_isValid;
}

QString OAIDeploymentSummary::getConfigurationVersion() const {
    return m_configuration_version;
}
void OAIDeploymentSummary::setConfigurationVersion(const QString &configuration_version) {
    m_configuration_version = configuration_version;
    m_configuration_version_isSet = true;
}

bool OAIDeploymentSummary::is_configuration_version_Set() const{
    return m_configuration_version_isSet;
}

bool OAIDeploymentSummary::is_configuration_version_Valid() const{
    return m_configuration_version_isValid;
}

qint32 OAIDeploymentSummary::getDeploymentDurationInMinutes() const {
    return m_deployment_duration_in_minutes;
}
void OAIDeploymentSummary::setDeploymentDurationInMinutes(const qint32 &deployment_duration_in_minutes) {
    m_deployment_duration_in_minutes = deployment_duration_in_minutes;
    m_deployment_duration_in_minutes_isSet = true;
}

bool OAIDeploymentSummary::is_deployment_duration_in_minutes_Set() const{
    return m_deployment_duration_in_minutes_isSet;
}

bool OAIDeploymentSummary::is_deployment_duration_in_minutes_Valid() const{
    return m_deployment_duration_in_minutes_isValid;
}

OAIGrowthType OAIDeploymentSummary::getGrowthType() const {
    return m_growth_type;
}
void OAIDeploymentSummary::setGrowthType(const OAIGrowthType &growth_type) {
    m_growth_type = growth_type;
    m_growth_type_isSet = true;
}

bool OAIDeploymentSummary::is_growth_type_Set() const{
    return m_growth_type_isSet;
}

bool OAIDeploymentSummary::is_growth_type_Valid() const{
    return m_growth_type_isValid;
}

float OAIDeploymentSummary::getGrowthFactor() const {
    return m_growth_factor;
}
void OAIDeploymentSummary::setGrowthFactor(const float &growth_factor) {
    m_growth_factor = growth_factor;
    m_growth_factor_isSet = true;
}

bool OAIDeploymentSummary::is_growth_factor_Set() const{
    return m_growth_factor_isSet;
}

bool OAIDeploymentSummary::is_growth_factor_Valid() const{
    return m_growth_factor_isValid;
}

qint32 OAIDeploymentSummary::getFinalBakeTimeInMinutes() const {
    return m_final_bake_time_in_minutes;
}
void OAIDeploymentSummary::setFinalBakeTimeInMinutes(const qint32 &final_bake_time_in_minutes) {
    m_final_bake_time_in_minutes = final_bake_time_in_minutes;
    m_final_bake_time_in_minutes_isSet = true;
}

bool OAIDeploymentSummary::is_final_bake_time_in_minutes_Set() const{
    return m_final_bake_time_in_minutes_isSet;
}

bool OAIDeploymentSummary::is_final_bake_time_in_minutes_Valid() const{
    return m_final_bake_time_in_minutes_isValid;
}

OAIDeploymentState OAIDeploymentSummary::getState() const {
    return m_state;
}
void OAIDeploymentSummary::setState(const OAIDeploymentState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeploymentSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeploymentSummary::is_state_Valid() const{
    return m_state_isValid;
}

float OAIDeploymentSummary::getPercentageComplete() const {
    return m_percentage_complete;
}
void OAIDeploymentSummary::setPercentageComplete(const float &percentage_complete) {
    m_percentage_complete = percentage_complete;
    m_percentage_complete_isSet = true;
}

bool OAIDeploymentSummary::is_percentage_complete_Set() const{
    return m_percentage_complete_isSet;
}

bool OAIDeploymentSummary::is_percentage_complete_Valid() const{
    return m_percentage_complete_isValid;
}

QDateTime OAIDeploymentSummary::getStartedAt() const {
    return m_started_at;
}
void OAIDeploymentSummary::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIDeploymentSummary::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIDeploymentSummary::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QDateTime OAIDeploymentSummary::getCompletedAt() const {
    return m_completed_at;
}
void OAIDeploymentSummary::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIDeploymentSummary::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIDeploymentSummary::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

bool OAIDeploymentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_growth_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_bake_time_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
