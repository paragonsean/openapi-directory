/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploymentSummary.h
 *
 * Information about the deployment.
 */

#ifndef OAIDeploymentSummary_H
#define OAIDeploymentSummary_H

#include <QJsonObject>

#include "OAIDeploymentState.h"
#include "OAIGrowthType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeploymentSummary : public OAIObject {
public:
    OAIDeploymentSummary();
    OAIDeploymentSummary(QString json);
    ~OAIDeploymentSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDeploymentNumber() const;
    void setDeploymentNumber(const qint32 &deployment_number);
    bool is_deployment_number_Set() const;
    bool is_deployment_number_Valid() const;

    QString getConfigurationName() const;
    void setConfigurationName(const QString &configuration_name);
    bool is_configuration_name_Set() const;
    bool is_configuration_name_Valid() const;

    QString getConfigurationVersion() const;
    void setConfigurationVersion(const QString &configuration_version);
    bool is_configuration_version_Set() const;
    bool is_configuration_version_Valid() const;

    qint32 getDeploymentDurationInMinutes() const;
    void setDeploymentDurationInMinutes(const qint32 &deployment_duration_in_minutes);
    bool is_deployment_duration_in_minutes_Set() const;
    bool is_deployment_duration_in_minutes_Valid() const;

    OAIGrowthType getGrowthType() const;
    void setGrowthType(const OAIGrowthType &growth_type);
    bool is_growth_type_Set() const;
    bool is_growth_type_Valid() const;

    float getGrowthFactor() const;
    void setGrowthFactor(const float &growth_factor);
    bool is_growth_factor_Set() const;
    bool is_growth_factor_Valid() const;

    qint32 getFinalBakeTimeInMinutes() const;
    void setFinalBakeTimeInMinutes(const qint32 &final_bake_time_in_minutes);
    bool is_final_bake_time_in_minutes_Set() const;
    bool is_final_bake_time_in_minutes_Valid() const;

    OAIDeploymentState getState() const;
    void setState(const OAIDeploymentState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    float getPercentageComplete() const;
    void setPercentageComplete(const float &percentage_complete);
    bool is_percentage_complete_Set() const;
    bool is_percentage_complete_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    QDateTime getCompletedAt() const;
    void setCompletedAt(const QDateTime &completed_at);
    bool is_completed_at_Set() const;
    bool is_completed_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_deployment_number;
    bool m_deployment_number_isSet;
    bool m_deployment_number_isValid;

    QString m_configuration_name;
    bool m_configuration_name_isSet;
    bool m_configuration_name_isValid;

    QString m_configuration_version;
    bool m_configuration_version_isSet;
    bool m_configuration_version_isValid;

    qint32 m_deployment_duration_in_minutes;
    bool m_deployment_duration_in_minutes_isSet;
    bool m_deployment_duration_in_minutes_isValid;

    OAIGrowthType m_growth_type;
    bool m_growth_type_isSet;
    bool m_growth_type_isValid;

    float m_growth_factor;
    bool m_growth_factor_isSet;
    bool m_growth_factor_isValid;

    qint32 m_final_bake_time_in_minutes;
    bool m_final_bake_time_in_minutes_isSet;
    bool m_final_bake_time_in_minutes_isValid;

    OAIDeploymentState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    float m_percentage_complete;
    bool m_percentage_complete_isSet;
    bool m_percentage_complete_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    QDateTime m_completed_at;
    bool m_completed_at_isSet;
    bool m_completed_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploymentSummary)

#endif // OAIDeploymentSummary_H
