/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Validator from './Validator';

/**
 * The CreateConfigurationProfileRequest model module.
 * @module model/CreateConfigurationProfileRequest
 * @version 2019-10-09
 */
class CreateConfigurationProfileRequest {
    /**
     * Constructs a new <code>CreateConfigurationProfileRequest</code>.
     * @alias module:model/CreateConfigurationProfileRequest
     * @param name {String} A name for the configuration profile.
     * @param locationUri {String} <p>A URI to locate the configuration. You can specify the following:</p> <ul> <li> <p>For the AppConfig hosted configuration store and for feature flags, specify <code>hosted</code>.</p> </li> <li> <p>For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format <code>ssm-parameter://&lt;parameter name&gt;</code> or the ARN.</p> </li> <li> <p>For an Secrets Manager secret, specify the URI in the following format: <code>secrets-manager</code>://&lt;secret name&gt;.</p> </li> <li> <p>For an Amazon S3 object, specify the URI in the following format: <code>s3://&lt;bucket&gt;/&lt;objectKey&gt; </code>. Here is an example: <code>s3://my-bucket/my-app/us-east-1/my-config.json</code> </p> </li> <li> <p>For an SSM document, specify either the document name in the format <code>ssm-document://&lt;document name&gt;</code> or the Amazon Resource Name (ARN).</p> </li> </ul>
     */
    constructor(name, locationUri) { 
        
        CreateConfigurationProfileRequest.initialize(this, name, locationUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, locationUri) { 
        obj['Name'] = name;
        obj['LocationUri'] = locationUri;
    }

    /**
     * Constructs a <code>CreateConfigurationProfileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConfigurationProfileRequest} obj Optional instance to populate.
     * @return {module:model/CreateConfigurationProfileRequest} The populated <code>CreateConfigurationProfileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConfigurationProfileRequest();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('LocationUri')) {
                obj['LocationUri'] = ApiClient.convertToType(data['LocationUri'], 'String');
            }
            if (data.hasOwnProperty('RetrievalRoleArn')) {
                obj['RetrievalRoleArn'] = ApiClient.convertToType(data['RetrievalRoleArn'], 'String');
            }
            if (data.hasOwnProperty('Validators')) {
                obj['Validators'] = ApiClient.convertToType(data['Validators'], [Validator]);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateConfigurationProfileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateConfigurationProfileRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateConfigurationProfileRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['LocationUri'] && !(typeof data['LocationUri'] === 'string' || data['LocationUri'] instanceof String)) {
            throw new Error("Expected the field `LocationUri` to be a primitive type in the JSON string but got " + data['LocationUri']);
        }
        // ensure the json data is a string
        if (data['RetrievalRoleArn'] && !(typeof data['RetrievalRoleArn'] === 'string' || data['RetrievalRoleArn'] instanceof String)) {
            throw new Error("Expected the field `RetrievalRoleArn` to be a primitive type in the JSON string but got " + data['RetrievalRoleArn']);
        }
        if (data['Validators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Validators'])) {
                throw new Error("Expected the field `Validators` to be an array in the JSON data but got " + data['Validators']);
            }
            // validate the optional field `Validators` (array)
            for (const item of data['Validators']) {
                Validator.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}

CreateConfigurationProfileRequest.RequiredProperties = ["Name", "LocationUri"];

/**
 * A name for the configuration profile.
 * @member {String} Name
 */
CreateConfigurationProfileRequest.prototype['Name'] = undefined;

/**
 * A description of the configuration profile.
 * @member {String} Description
 */
CreateConfigurationProfileRequest.prototype['Description'] = undefined;

/**
 * <p>A URI to locate the configuration. You can specify the following:</p> <ul> <li> <p>For the AppConfig hosted configuration store and for feature flags, specify <code>hosted</code>.</p> </li> <li> <p>For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format <code>ssm-parameter://&lt;parameter name&gt;</code> or the ARN.</p> </li> <li> <p>For an Secrets Manager secret, specify the URI in the following format: <code>secrets-manager</code>://&lt;secret name&gt;.</p> </li> <li> <p>For an Amazon S3 object, specify the URI in the following format: <code>s3://&lt;bucket&gt;/&lt;objectKey&gt; </code>. Here is an example: <code>s3://my-bucket/my-app/us-east-1/my-config.json</code> </p> </li> <li> <p>For an SSM document, specify either the document name in the format <code>ssm-document://&lt;document name&gt;</code> or the Amazon Resource Name (ARN).</p> </li> </ul>
 * @member {String} LocationUri
 */
CreateConfigurationProfileRequest.prototype['LocationUri'] = undefined;

/**
 * <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p> <important> <p>A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration. </p> </important>
 * @member {String} RetrievalRoleArn
 */
CreateConfigurationProfileRequest.prototype['RetrievalRoleArn'] = undefined;

/**
 * A list of methods for validating the configuration.
 * @member {Array.<module:model/Validator>} Validators
 */
CreateConfigurationProfileRequest.prototype['Validators'] = undefined;

/**
 * Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
 * @member {Object.<String, String>} Tags
 */
CreateConfigurationProfileRequest.prototype['Tags'] = undefined;

/**
 * <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p> <p> <code>AWS.AppConfig.FeatureFlags</code> </p> <p> <code>AWS.Freeform</code> </p>
 * @member {String} Type
 */
CreateConfigurationProfileRequest.prototype['Type'] = undefined;






export default CreateConfigurationProfileRequest;

