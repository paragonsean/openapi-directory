/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateDeploymentStrategyRequest model module.
 * @module model/UpdateDeploymentStrategyRequest
 * @version 2019-10-09
 */
class UpdateDeploymentStrategyRequest {
    /**
     * Constructs a new <code>UpdateDeploymentStrategyRequest</code>.
     * @alias module:model/UpdateDeploymentStrategyRequest
     */
    constructor() { 
        
        UpdateDeploymentStrategyRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDeploymentStrategyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDeploymentStrategyRequest} obj Optional instance to populate.
     * @return {module:model/UpdateDeploymentStrategyRequest} The populated <code>UpdateDeploymentStrategyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDeploymentStrategyRequest();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DeploymentDurationInMinutes')) {
                obj['DeploymentDurationInMinutes'] = ApiClient.convertToType(data['DeploymentDurationInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('FinalBakeTimeInMinutes')) {
                obj['FinalBakeTimeInMinutes'] = ApiClient.convertToType(data['FinalBakeTimeInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('GrowthFactor')) {
                obj['GrowthFactor'] = ApiClient.convertToType(data['GrowthFactor'], 'Number');
            }
            if (data.hasOwnProperty('GrowthType')) {
                obj['GrowthType'] = ApiClient.convertToType(data['GrowthType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDeploymentStrategyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDeploymentStrategyRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['GrowthType'] && !(typeof data['GrowthType'] === 'string' || data['GrowthType'] instanceof String)) {
            throw new Error("Expected the field `GrowthType` to be a primitive type in the JSON string but got " + data['GrowthType']);
        }

        return true;
    }


}



/**
 * A description of the deployment strategy.
 * @member {String} Description
 */
UpdateDeploymentStrategyRequest.prototype['Description'] = undefined;

/**
 * Total amount of time for a deployment to last.
 * @member {Number} DeploymentDurationInMinutes
 */
UpdateDeploymentStrategyRequest.prototype['DeploymentDurationInMinutes'] = undefined;

/**
 * The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.
 * @member {Number} FinalBakeTimeInMinutes
 */
UpdateDeploymentStrategyRequest.prototype['FinalBakeTimeInMinutes'] = undefined;

/**
 * The percentage of targets to receive a deployed configuration during each interval.
 * @member {Number} GrowthFactor
 */
UpdateDeploymentStrategyRequest.prototype['GrowthFactor'] = undefined;

/**
 * <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>
 * @member {module:model/UpdateDeploymentStrategyRequest.GrowthTypeEnum} GrowthType
 */
UpdateDeploymentStrategyRequest.prototype['GrowthType'] = undefined;





/**
 * Allowed values for the <code>GrowthType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDeploymentStrategyRequest['GrowthTypeEnum'] = {

    /**
     * value: "LINEAR"
     * @const
     */
    "LINEAR": "LINEAR",

    /**
     * value: "EXPONENTIAL"
     * @const
     */
    "EXPONENTIAL": "EXPONENTIAL"
};



export default UpdateDeploymentStrategyRequest;

