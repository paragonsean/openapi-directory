/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonAppConfig);
  }
}(this, function(expect, AmazonAppConfig) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonAppConfig.Deployment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Deployment', function() {
    it('should create an instance of Deployment', function() {
      // uncomment below and update the code to test Deployment
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be.a(AmazonAppConfig.Deployment);
    });

    it('should have the property applicationId (base name: "ApplicationId")', function() {
      // uncomment below and update the code to test the property applicationId
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property environmentId (base name: "EnvironmentId")', function() {
      // uncomment below and update the code to test the property environmentId
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property deploymentStrategyId (base name: "DeploymentStrategyId")', function() {
      // uncomment below and update the code to test the property deploymentStrategyId
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property configurationProfileId (base name: "ConfigurationProfileId")', function() {
      // uncomment below and update the code to test the property configurationProfileId
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property deploymentNumber (base name: "DeploymentNumber")', function() {
      // uncomment below and update the code to test the property deploymentNumber
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property configurationName (base name: "ConfigurationName")', function() {
      // uncomment below and update the code to test the property configurationName
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property configurationLocationUri (base name: "ConfigurationLocationUri")', function() {
      // uncomment below and update the code to test the property configurationLocationUri
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property configurationVersion (base name: "ConfigurationVersion")', function() {
      // uncomment below and update the code to test the property configurationVersion
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property deploymentDurationInMinutes (base name: "DeploymentDurationInMinutes")', function() {
      // uncomment below and update the code to test the property deploymentDurationInMinutes
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property growthType (base name: "GrowthType")', function() {
      // uncomment below and update the code to test the property growthType
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property growthFactor (base name: "GrowthFactor")', function() {
      // uncomment below and update the code to test the property growthFactor
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property finalBakeTimeInMinutes (base name: "FinalBakeTimeInMinutes")', function() {
      // uncomment below and update the code to test the property finalBakeTimeInMinutes
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property eventLog (base name: "EventLog")', function() {
      // uncomment below and update the code to test the property eventLog
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property percentageComplete (base name: "PercentageComplete")', function() {
      // uncomment below and update the code to test the property percentageComplete
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property startedAt (base name: "StartedAt")', function() {
      // uncomment below and update the code to test the property startedAt
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property completedAt (base name: "CompletedAt")', function() {
      // uncomment below and update the code to test the property completedAt
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property appliedExtensions (base name: "AppliedExtensions")', function() {
      // uncomment below and update the code to test the property appliedExtensions
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyArn (base name: "KmsKeyArn")', function() {
      // uncomment below and update the code to test the property kmsKeyArn
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyIdentifier (base name: "KmsKeyIdentifier")', function() {
      // uncomment below and update the code to test the property kmsKeyIdentifier
      //var instance = new AmazonAppConfig.Deployment();
      //expect(instance).to.be();
    });

  });

}));
