/**
 * Amazon AppConfig
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly deploy application configurations. AppConfig supports controlled deployments to applications of any size and includes built-in validation checks and monitoring. You can use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers, mobile applications, or IoT devices.</p> <p>To prevent errors when deploying application configurations, especially for production systems where a simple typo could cause an unexpected outage, AppConfig includes validators. A validator provides a syntactic or semantic check to ensure that the configuration you want to deploy works as intended. To validate your application configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The configuration deployment or update can only proceed when the configuration data is valid.</p> <p>During a configuration deployment, AppConfig monitors the application to ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can configure a deployment strategy for each application or environment that includes deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back to the previous version. </p> <p>AppConfig supports multiple use cases. Here are some examples:</p> <ul> <li> <p> <b>Feature flags</b>: Use AppConfig to turn on new features that require a timely deployment, such as a product launch or announcement. </p> </li> <li> <p> <b>Application tuning</b>: Use AppConfig to carefully introduce changes to your application that can only be tested with production traffic.</p> </li> <li> <p> <b>Allow list</b>: Use AppConfig to allow premium subscribers to access paid content. </p> </li> <li> <p> <b>Operational issues</b>: Use AppConfig to reduce stress on your application when a dependency or other external factor impacts the system.</p> </li> </ul> <p>This reference is intended to be used with the <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html\">AppConfig User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2019-10-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonAppConfig);
  }
}(this, function(expect, AmazonAppConfig) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonAppConfig.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createApplication', function() {
      it('should call createApplication successfully', function(done) {
        //uncomment below and update the code to test createApplication
        //instance.createApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfigurationProfile', function() {
      it('should call createConfigurationProfile successfully', function(done) {
        //uncomment below and update the code to test createConfigurationProfile
        //instance.createConfigurationProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeploymentStrategy', function() {
      it('should call createDeploymentStrategy successfully', function(done) {
        //uncomment below and update the code to test createDeploymentStrategy
        //instance.createDeploymentStrategy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEnvironment', function() {
      it('should call createEnvironment successfully', function(done) {
        //uncomment below and update the code to test createEnvironment
        //instance.createEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createExtension', function() {
      it('should call createExtension successfully', function(done) {
        //uncomment below and update the code to test createExtension
        //instance.createExtension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createExtensionAssociation', function() {
      it('should call createExtensionAssociation successfully', function(done) {
        //uncomment below and update the code to test createExtensionAssociation
        //instance.createExtensionAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHostedConfigurationVersion', function() {
      it('should call createHostedConfigurationVersion successfully', function(done) {
        //uncomment below and update the code to test createHostedConfigurationVersion
        //instance.createHostedConfigurationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplication', function() {
      it('should call deleteApplication successfully', function(done) {
        //uncomment below and update the code to test deleteApplication
        //instance.deleteApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConfigurationProfile', function() {
      it('should call deleteConfigurationProfile successfully', function(done) {
        //uncomment below and update the code to test deleteConfigurationProfile
        //instance.deleteConfigurationProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeploymentStrategy', function() {
      it('should call deleteDeploymentStrategy successfully', function(done) {
        //uncomment below and update the code to test deleteDeploymentStrategy
        //instance.deleteDeploymentStrategy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEnvironment', function() {
      it('should call deleteEnvironment successfully', function(done) {
        //uncomment below and update the code to test deleteEnvironment
        //instance.deleteEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExtension', function() {
      it('should call deleteExtension successfully', function(done) {
        //uncomment below and update the code to test deleteExtension
        //instance.deleteExtension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExtensionAssociation', function() {
      it('should call deleteExtensionAssociation successfully', function(done) {
        //uncomment below and update the code to test deleteExtensionAssociation
        //instance.deleteExtensionAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHostedConfigurationVersion', function() {
      it('should call deleteHostedConfigurationVersion successfully', function(done) {
        //uncomment below and update the code to test deleteHostedConfigurationVersion
        //instance.deleteHostedConfigurationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplication', function() {
      it('should call getApplication successfully', function(done) {
        //uncomment below and update the code to test getApplication
        //instance.getApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfiguration', function() {
      it('should call getConfiguration successfully', function(done) {
        //uncomment below and update the code to test getConfiguration
        //instance.getConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfigurationProfile', function() {
      it('should call getConfigurationProfile successfully', function(done) {
        //uncomment below and update the code to test getConfigurationProfile
        //instance.getConfigurationProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployment', function() {
      it('should call getDeployment successfully', function(done) {
        //uncomment below and update the code to test getDeployment
        //instance.getDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeploymentStrategy', function() {
      it('should call getDeploymentStrategy successfully', function(done) {
        //uncomment below and update the code to test getDeploymentStrategy
        //instance.getDeploymentStrategy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEnvironment', function() {
      it('should call getEnvironment successfully', function(done) {
        //uncomment below and update the code to test getEnvironment
        //instance.getEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExtension', function() {
      it('should call getExtension successfully', function(done) {
        //uncomment below and update the code to test getExtension
        //instance.getExtension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExtensionAssociation', function() {
      it('should call getExtensionAssociation successfully', function(done) {
        //uncomment below and update the code to test getExtensionAssociation
        //instance.getExtensionAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHostedConfigurationVersion', function() {
      it('should call getHostedConfigurationVersion successfully', function(done) {
        //uncomment below and update the code to test getHostedConfigurationVersion
        //instance.getHostedConfigurationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplications', function() {
      it('should call listApplications successfully', function(done) {
        //uncomment below and update the code to test listApplications
        //instance.listApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigurationProfiles', function() {
      it('should call listConfigurationProfiles successfully', function(done) {
        //uncomment below and update the code to test listConfigurationProfiles
        //instance.listConfigurationProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeploymentStrategies', function() {
      it('should call listDeploymentStrategies successfully', function(done) {
        //uncomment below and update the code to test listDeploymentStrategies
        //instance.listDeploymentStrategies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeployments', function() {
      it('should call listDeployments successfully', function(done) {
        //uncomment below and update the code to test listDeployments
        //instance.listDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEnvironments', function() {
      it('should call listEnvironments successfully', function(done) {
        //uncomment below and update the code to test listEnvironments
        //instance.listEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExtensionAssociations', function() {
      it('should call listExtensionAssociations successfully', function(done) {
        //uncomment below and update the code to test listExtensionAssociations
        //instance.listExtensionAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExtensions', function() {
      it('should call listExtensions successfully', function(done) {
        //uncomment below and update the code to test listExtensions
        //instance.listExtensions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHostedConfigurationVersions', function() {
      it('should call listHostedConfigurationVersions successfully', function(done) {
        //uncomment below and update the code to test listHostedConfigurationVersions
        //instance.listHostedConfigurationVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startDeployment', function() {
      it('should call startDeployment successfully', function(done) {
        //uncomment below and update the code to test startDeployment
        //instance.startDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopDeployment', function() {
      it('should call stopDeployment successfully', function(done) {
        //uncomment below and update the code to test stopDeployment
        //instance.stopDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplication', function() {
      it('should call updateApplication successfully', function(done) {
        //uncomment below and update the code to test updateApplication
        //instance.updateApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConfigurationProfile', function() {
      it('should call updateConfigurationProfile successfully', function(done) {
        //uncomment below and update the code to test updateConfigurationProfile
        //instance.updateConfigurationProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeploymentStrategy', function() {
      it('should call updateDeploymentStrategy successfully', function(done) {
        //uncomment below and update the code to test updateDeploymentStrategy
        //instance.updateDeploymentStrategy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEnvironment', function() {
      it('should call updateEnvironment successfully', function(done) {
        //uncomment below and update the code to test updateEnvironment
        //instance.updateEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExtension', function() {
      it('should call updateExtension successfully', function(done) {
        //uncomment below and update the code to test updateExtension
        //instance.updateExtension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExtensionAssociation', function() {
      it('should call updateExtensionAssociation successfully', function(done) {
        //uncomment below and update the code to test updateExtensionAssociation
        //instance.updateExtensionAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateConfiguration', function() {
      it('should call validateConfiguration successfully', function(done) {
        //uncomment below and update the code to test validateConfiguration
        //instance.validateConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
