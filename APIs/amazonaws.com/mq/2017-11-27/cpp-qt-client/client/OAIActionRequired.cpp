/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionRequired.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionRequired::OAIActionRequired(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionRequired::OAIActionRequired() {
    this->initializeModel();
}

OAIActionRequired::~OAIActionRequired() {}

void OAIActionRequired::initializeModel() {

    m_action_required_code_isSet = false;
    m_action_required_code_isValid = false;

    m_action_required_info_isSet = false;
    m_action_required_info_isValid = false;
}

void OAIActionRequired::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionRequired::fromJsonObject(QJsonObject json) {

    m_action_required_code_isValid = ::OpenAPI::fromJsonValue(m_action_required_code, json[QString("ActionRequiredCode")]);
    m_action_required_code_isSet = !json[QString("ActionRequiredCode")].isNull() && m_action_required_code_isValid;

    m_action_required_info_isValid = ::OpenAPI::fromJsonValue(m_action_required_info, json[QString("ActionRequiredInfo")]);
    m_action_required_info_isSet = !json[QString("ActionRequiredInfo")].isNull() && m_action_required_info_isValid;
}

QString OAIActionRequired::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionRequired::asJsonObject() const {
    QJsonObject obj;
    if (m_action_required_code_isSet) {
        obj.insert(QString("ActionRequiredCode"), ::OpenAPI::toJsonValue(m_action_required_code));
    }
    if (m_action_required_info_isSet) {
        obj.insert(QString("ActionRequiredInfo"), ::OpenAPI::toJsonValue(m_action_required_info));
    }
    return obj;
}

QString OAIActionRequired::getActionRequiredCode() const {
    return m_action_required_code;
}
void OAIActionRequired::setActionRequiredCode(const QString &action_required_code) {
    m_action_required_code = action_required_code;
    m_action_required_code_isSet = true;
}

bool OAIActionRequired::is_action_required_code_Set() const{
    return m_action_required_code_isSet;
}

bool OAIActionRequired::is_action_required_code_Valid() const{
    return m_action_required_code_isValid;
}

QString OAIActionRequired::getActionRequiredInfo() const {
    return m_action_required_info;
}
void OAIActionRequired::setActionRequiredInfo(const QString &action_required_info) {
    m_action_required_info = action_required_info;
    m_action_required_info_isSet = true;
}

bool OAIActionRequired::is_action_required_info_Set() const{
    return m_action_required_info_isSet;
}

bool OAIActionRequired::is_action_required_info_Valid() const{
    return m_action_required_info_isValid;
}

bool OAIActionRequired::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_required_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_required_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionRequired::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
