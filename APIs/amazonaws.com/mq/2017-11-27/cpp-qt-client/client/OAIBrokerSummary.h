/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBrokerSummary.h
 *
 * Returns information about all brokers.
 */

#ifndef OAIBrokerSummary_H
#define OAIBrokerSummary_H

#include <QJsonObject>

#include "OAIBrokerState.h"
#include "OAIDeploymentMode.h"
#include "OAIEngineType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBrokerSummary : public OAIObject {
public:
    OAIBrokerSummary();
    OAIBrokerSummary(QString json);
    ~OAIBrokerSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBrokerArn() const;
    void setBrokerArn(const QString &broker_arn);
    bool is_broker_arn_Set() const;
    bool is_broker_arn_Valid() const;

    QString getBrokerId() const;
    void setBrokerId(const QString &broker_id);
    bool is_broker_id_Set() const;
    bool is_broker_id_Valid() const;

    QString getBrokerName() const;
    void setBrokerName(const QString &broker_name);
    bool is_broker_name_Set() const;
    bool is_broker_name_Valid() const;

    OAIBrokerState getBrokerState() const;
    void setBrokerState(const OAIBrokerState &broker_state);
    bool is_broker_state_Set() const;
    bool is_broker_state_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIDeploymentMode getDeploymentMode() const;
    void setDeploymentMode(const OAIDeploymentMode &deployment_mode);
    bool is_deployment_mode_Set() const;
    bool is_deployment_mode_Valid() const;

    OAIEngineType getEngineType() const;
    void setEngineType(const OAIEngineType &engine_type);
    bool is_engine_type_Set() const;
    bool is_engine_type_Valid() const;

    QString getHostInstanceType() const;
    void setHostInstanceType(const QString &host_instance_type);
    bool is_host_instance_type_Set() const;
    bool is_host_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_broker_arn;
    bool m_broker_arn_isSet;
    bool m_broker_arn_isValid;

    QString m_broker_id;
    bool m_broker_id_isSet;
    bool m_broker_id_isValid;

    QString m_broker_name;
    bool m_broker_name_isSet;
    bool m_broker_name_isValid;

    OAIBrokerState m_broker_state;
    bool m_broker_state_isSet;
    bool m_broker_state_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIDeploymentMode m_deployment_mode;
    bool m_deployment_mode_isSet;
    bool m_deployment_mode_isValid;

    OAIEngineType m_engine_type;
    bool m_engine_type_isSet;
    bool m_engine_type_isValid;

    QString m_host_instance_type;
    bool m_host_instance_type_isSet;
    bool m_host_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBrokerSummary)

#endif // OAIBrokerSummary_H
