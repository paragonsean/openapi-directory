/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeConfigurationRevisionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeConfigurationRevisionResponse::OAIDescribeConfigurationRevisionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeConfigurationRevisionResponse::OAIDescribeConfigurationRevisionResponse() {
    this->initializeModel();
}

OAIDescribeConfigurationRevisionResponse::~OAIDescribeConfigurationRevisionResponse() {}

void OAIDescribeConfigurationRevisionResponse::initializeModel() {

    m_configuration_id_isSet = false;
    m_configuration_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIDescribeConfigurationRevisionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeConfigurationRevisionResponse::fromJsonObject(QJsonObject json) {

    m_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_configuration_id, json[QString("ConfigurationId")]);
    m_configuration_id_isSet = !json[QString("ConfigurationId")].isNull() && m_configuration_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIDescribeConfigurationRevisionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeConfigurationRevisionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_id_isSet) {
        obj.insert(QString("ConfigurationId"), ::OpenAPI::toJsonValue(m_configuration_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_isSet) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIDescribeConfigurationRevisionResponse::getConfigurationId() const {
    return m_configuration_id;
}
void OAIDescribeConfigurationRevisionResponse::setConfigurationId(const QString &configuration_id) {
    m_configuration_id = configuration_id;
    m_configuration_id_isSet = true;
}

bool OAIDescribeConfigurationRevisionResponse::is_configuration_id_Set() const{
    return m_configuration_id_isSet;
}

bool OAIDescribeConfigurationRevisionResponse::is_configuration_id_Valid() const{
    return m_configuration_id_isValid;
}

QDateTime OAIDescribeConfigurationRevisionResponse::getCreated() const {
    return m_created;
}
void OAIDescribeConfigurationRevisionResponse::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDescribeConfigurationRevisionResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDescribeConfigurationRevisionResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIDescribeConfigurationRevisionResponse::getData() const {
    return m_data;
}
void OAIDescribeConfigurationRevisionResponse::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDescribeConfigurationRevisionResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDescribeConfigurationRevisionResponse::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDescribeConfigurationRevisionResponse::getDescription() const {
    return m_description;
}
void OAIDescribeConfigurationRevisionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeConfigurationRevisionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeConfigurationRevisionResponse::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDescribeConfigurationRevisionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeConfigurationRevisionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
