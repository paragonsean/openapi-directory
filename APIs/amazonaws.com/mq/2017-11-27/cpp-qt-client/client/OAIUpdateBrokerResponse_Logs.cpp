/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBrokerResponse_Logs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBrokerResponse_Logs::OAIUpdateBrokerResponse_Logs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBrokerResponse_Logs::OAIUpdateBrokerResponse_Logs() {
    this->initializeModel();
}

OAIUpdateBrokerResponse_Logs::~OAIUpdateBrokerResponse_Logs() {}

void OAIUpdateBrokerResponse_Logs::initializeModel() {

    m_audit_isSet = false;
    m_audit_isValid = false;

    m_general_isSet = false;
    m_general_isValid = false;
}

void OAIUpdateBrokerResponse_Logs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBrokerResponse_Logs::fromJsonObject(QJsonObject json) {

    m_audit_isValid = ::OpenAPI::fromJsonValue(m_audit, json[QString("Audit")]);
    m_audit_isSet = !json[QString("Audit")].isNull() && m_audit_isValid;

    m_general_isValid = ::OpenAPI::fromJsonValue(m_general, json[QString("General")]);
    m_general_isSet = !json[QString("General")].isNull() && m_general_isValid;
}

QString OAIUpdateBrokerResponse_Logs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBrokerResponse_Logs::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_isSet) {
        obj.insert(QString("Audit"), ::OpenAPI::toJsonValue(m_audit));
    }
    if (m_general_isSet) {
        obj.insert(QString("General"), ::OpenAPI::toJsonValue(m_general));
    }
    return obj;
}

bool OAIUpdateBrokerResponse_Logs::getAudit() const {
    return m_audit;
}
void OAIUpdateBrokerResponse_Logs::setAudit(const bool &audit) {
    m_audit = audit;
    m_audit_isSet = true;
}

bool OAIUpdateBrokerResponse_Logs::is_audit_Set() const{
    return m_audit_isSet;
}

bool OAIUpdateBrokerResponse_Logs::is_audit_Valid() const{
    return m_audit_isValid;
}

bool OAIUpdateBrokerResponse_Logs::getGeneral() const {
    return m_general;
}
void OAIUpdateBrokerResponse_Logs::setGeneral(const bool &general) {
    m_general = general;
    m_general_isSet = true;
}

bool OAIUpdateBrokerResponse_Logs::is_general_Set() const{
    return m_general_isSet;
}

bool OAIUpdateBrokerResponse_Logs::is_general_Valid() const{
    return m_general_isValid;
}

bool OAIUpdateBrokerResponse_Logs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBrokerResponse_Logs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
