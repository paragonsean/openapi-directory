/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBroker_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBroker_request::OAIUpdateBroker_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBroker_request::OAIUpdateBroker_request() {
    this->initializeModel();
}

OAIUpdateBroker_request::~OAIUpdateBroker_request() {}

void OAIUpdateBroker_request::initializeModel() {

    m_authentication_strategy_isSet = false;
    m_authentication_strategy_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_host_instance_type_isSet = false;
    m_host_instance_type_isValid = false;

    m_ldap_server_metadata_isSet = false;
    m_ldap_server_metadata_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_maintenance_window_start_time_isSet = false;
    m_maintenance_window_start_time_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_data_replication_mode_isSet = false;
    m_data_replication_mode_isValid = false;
}

void OAIUpdateBroker_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBroker_request::fromJsonObject(QJsonObject json) {

    m_authentication_strategy_isValid = ::OpenAPI::fromJsonValue(m_authentication_strategy, json[QString("authenticationStrategy")]);
    m_authentication_strategy_isSet = !json[QString("authenticationStrategy")].isNull() && m_authentication_strategy_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("autoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("autoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_host_instance_type_isValid = ::OpenAPI::fromJsonValue(m_host_instance_type, json[QString("hostInstanceType")]);
    m_host_instance_type_isSet = !json[QString("hostInstanceType")].isNull() && m_host_instance_type_isValid;

    m_ldap_server_metadata_isValid = ::OpenAPI::fromJsonValue(m_ldap_server_metadata, json[QString("ldapServerMetadata")]);
    m_ldap_server_metadata_isSet = !json[QString("ldapServerMetadata")].isNull() && m_ldap_server_metadata_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_maintenance_window_start_time_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window_start_time, json[QString("maintenanceWindowStartTime")]);
    m_maintenance_window_start_time_isSet = !json[QString("maintenanceWindowStartTime")].isNull() && m_maintenance_window_start_time_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("securityGroups")]);
    m_security_groups_isSet = !json[QString("securityGroups")].isNull() && m_security_groups_isValid;

    m_data_replication_mode_isValid = ::OpenAPI::fromJsonValue(m_data_replication_mode, json[QString("dataReplicationMode")]);
    m_data_replication_mode_isSet = !json[QString("dataReplicationMode")].isNull() && m_data_replication_mode_isValid;
}

QString OAIUpdateBroker_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBroker_request::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_strategy_isSet) {
        obj.insert(QString("authenticationStrategy"), ::OpenAPI::toJsonValue(m_authentication_strategy));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("autoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_host_instance_type_isSet) {
        obj.insert(QString("hostInstanceType"), ::OpenAPI::toJsonValue(m_host_instance_type));
    }
    if (m_ldap_server_metadata.isSet()) {
        obj.insert(QString("ldapServerMetadata"), ::OpenAPI::toJsonValue(m_ldap_server_metadata));
    }
    if (m_logs.isSet()) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_maintenance_window_start_time.isSet()) {
        obj.insert(QString("maintenanceWindowStartTime"), ::OpenAPI::toJsonValue(m_maintenance_window_start_time));
    }
    if (m_security_groups.size() > 0) {
        obj.insert(QString("securityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_data_replication_mode_isSet) {
        obj.insert(QString("dataReplicationMode"), ::OpenAPI::toJsonValue(m_data_replication_mode));
    }
    return obj;
}

QString OAIUpdateBroker_request::getAuthenticationStrategy() const {
    return m_authentication_strategy;
}
void OAIUpdateBroker_request::setAuthenticationStrategy(const QString &authentication_strategy) {
    m_authentication_strategy = authentication_strategy;
    m_authentication_strategy_isSet = true;
}

bool OAIUpdateBroker_request::is_authentication_strategy_Set() const{
    return m_authentication_strategy_isSet;
}

bool OAIUpdateBroker_request::is_authentication_strategy_Valid() const{
    return m_authentication_strategy_isValid;
}

bool OAIUpdateBroker_request::isAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAIUpdateBroker_request::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAIUpdateBroker_request::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAIUpdateBroker_request::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

OAICreateBroker_request_configuration OAIUpdateBroker_request::getConfiguration() const {
    return m_configuration;
}
void OAIUpdateBroker_request::setConfiguration(const OAICreateBroker_request_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIUpdateBroker_request::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIUpdateBroker_request::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIUpdateBroker_request::getEngineVersion() const {
    return m_engine_version;
}
void OAIUpdateBroker_request::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIUpdateBroker_request::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIUpdateBroker_request::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIUpdateBroker_request::getHostInstanceType() const {
    return m_host_instance_type;
}
void OAIUpdateBroker_request::setHostInstanceType(const QString &host_instance_type) {
    m_host_instance_type = host_instance_type;
    m_host_instance_type_isSet = true;
}

bool OAIUpdateBroker_request::is_host_instance_type_Set() const{
    return m_host_instance_type_isSet;
}

bool OAIUpdateBroker_request::is_host_instance_type_Valid() const{
    return m_host_instance_type_isValid;
}

OAICreateBroker_request_ldapServerMetadata OAIUpdateBroker_request::getLdapServerMetadata() const {
    return m_ldap_server_metadata;
}
void OAIUpdateBroker_request::setLdapServerMetadata(const OAICreateBroker_request_ldapServerMetadata &ldap_server_metadata) {
    m_ldap_server_metadata = ldap_server_metadata;
    m_ldap_server_metadata_isSet = true;
}

bool OAIUpdateBroker_request::is_ldap_server_metadata_Set() const{
    return m_ldap_server_metadata_isSet;
}

bool OAIUpdateBroker_request::is_ldap_server_metadata_Valid() const{
    return m_ldap_server_metadata_isValid;
}

OAICreateBroker_request_logs OAIUpdateBroker_request::getLogs() const {
    return m_logs;
}
void OAIUpdateBroker_request::setLogs(const OAICreateBroker_request_logs &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIUpdateBroker_request::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIUpdateBroker_request::is_logs_Valid() const{
    return m_logs_isValid;
}

OAICreateBroker_request_maintenanceWindowStartTime OAIUpdateBroker_request::getMaintenanceWindowStartTime() const {
    return m_maintenance_window_start_time;
}
void OAIUpdateBroker_request::setMaintenanceWindowStartTime(const OAICreateBroker_request_maintenanceWindowStartTime &maintenance_window_start_time) {
    m_maintenance_window_start_time = maintenance_window_start_time;
    m_maintenance_window_start_time_isSet = true;
}

bool OAIUpdateBroker_request::is_maintenance_window_start_time_Set() const{
    return m_maintenance_window_start_time_isSet;
}

bool OAIUpdateBroker_request::is_maintenance_window_start_time_Valid() const{
    return m_maintenance_window_start_time_isValid;
}

QList<QString> OAIUpdateBroker_request::getSecurityGroups() const {
    return m_security_groups;
}
void OAIUpdateBroker_request::setSecurityGroups(const QList<QString> &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIUpdateBroker_request::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIUpdateBroker_request::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QString OAIUpdateBroker_request::getDataReplicationMode() const {
    return m_data_replication_mode;
}
void OAIUpdateBroker_request::setDataReplicationMode(const QString &data_replication_mode) {
    m_data_replication_mode = data_replication_mode;
    m_data_replication_mode_isSet = true;
}

bool OAIUpdateBroker_request::is_data_replication_mode_Set() const{
    return m_data_replication_mode_isSet;
}

bool OAIUpdateBroker_request::is_data_replication_mode_Valid() const{
    return m_data_replication_mode_isValid;
}

bool OAIUpdateBroker_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_server_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBroker_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
