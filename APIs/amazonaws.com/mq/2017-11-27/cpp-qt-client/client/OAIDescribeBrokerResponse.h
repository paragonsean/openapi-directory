/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeBrokerResponse.h
 *
 * 
 */

#ifndef OAIDescribeBrokerResponse_H
#define OAIDescribeBrokerResponse_H

#include <QJsonObject>

#include "OAIAuthenticationStrategy.h"
#include "OAIBrokerState.h"
#include "OAIBrokerStorageType.h"
#include "OAIDataReplicationMode.h"
#include "OAIDeploymentMode.h"
#include "OAIDescribeBrokerResponse_Configurations.h"
#include "OAIDescribeBrokerResponse_DataReplicationMetadata.h"
#include "OAIDescribeBrokerResponse_EncryptionOptions.h"
#include "OAIDescribeBrokerResponse_LdapServerMetadata.h"
#include "OAIDescribeBrokerResponse_Logs.h"
#include "OAIDescribeBrokerResponse_MaintenanceWindowStartTime.h"
#include "OAIDescribeBrokerResponse_PendingDataReplicationMetadata.h"
#include "OAIDescribeBrokerResponse_PendingLdapServerMetadata.h"
#include "OAIEngineType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeBrokerResponse_Configurations;
class OAIDescribeBrokerResponse_EncryptionOptions;
class OAIDescribeBrokerResponse_LdapServerMetadata;
class OAIDescribeBrokerResponse_Logs;
class OAIDescribeBrokerResponse_MaintenanceWindowStartTime;
class OAIDescribeBrokerResponse_PendingLdapServerMetadata;
class OAIDescribeBrokerResponse_DataReplicationMetadata;
class OAIDescribeBrokerResponse_PendingDataReplicationMetadata;

class OAIDescribeBrokerResponse : public OAIObject {
public:
    OAIDescribeBrokerResponse();
    OAIDescribeBrokerResponse(QString json);
    ~OAIDescribeBrokerResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getActionsRequired() const;
    void setActionsRequired(const QList &actions_required);
    bool is_actions_required_Set() const;
    bool is_actions_required_Valid() const;

    OAIAuthenticationStrategy getAuthenticationStrategy() const;
    void setAuthenticationStrategy(const OAIAuthenticationStrategy &authentication_strategy);
    bool is_authentication_strategy_Set() const;
    bool is_authentication_strategy_Valid() const;

    bool getAutoMinorVersionUpgrade() const;
    void setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade);
    bool is_auto_minor_version_upgrade_Set() const;
    bool is_auto_minor_version_upgrade_Valid() const;

    QString getBrokerArn() const;
    void setBrokerArn(const QString &broker_arn);
    bool is_broker_arn_Set() const;
    bool is_broker_arn_Valid() const;

    QString getBrokerId() const;
    void setBrokerId(const QString &broker_id);
    bool is_broker_id_Set() const;
    bool is_broker_id_Valid() const;

    QList getBrokerInstances() const;
    void setBrokerInstances(const QList &broker_instances);
    bool is_broker_instances_Set() const;
    bool is_broker_instances_Valid() const;

    QString getBrokerName() const;
    void setBrokerName(const QString &broker_name);
    bool is_broker_name_Set() const;
    bool is_broker_name_Valid() const;

    OAIBrokerState getBrokerState() const;
    void setBrokerState(const OAIBrokerState &broker_state);
    bool is_broker_state_Set() const;
    bool is_broker_state_Valid() const;

    OAIDescribeBrokerResponse_Configurations getConfigurations() const;
    void setConfigurations(const OAIDescribeBrokerResponse_Configurations &configurations);
    bool is_configurations_Set() const;
    bool is_configurations_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIDeploymentMode getDeploymentMode() const;
    void setDeploymentMode(const OAIDeploymentMode &deployment_mode);
    bool is_deployment_mode_Set() const;
    bool is_deployment_mode_Valid() const;

    OAIDescribeBrokerResponse_EncryptionOptions getEncryptionOptions() const;
    void setEncryptionOptions(const OAIDescribeBrokerResponse_EncryptionOptions &encryption_options);
    bool is_encryption_options_Set() const;
    bool is_encryption_options_Valid() const;

    OAIEngineType getEngineType() const;
    void setEngineType(const OAIEngineType &engine_type);
    bool is_engine_type_Set() const;
    bool is_engine_type_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getHostInstanceType() const;
    void setHostInstanceType(const QString &host_instance_type);
    bool is_host_instance_type_Set() const;
    bool is_host_instance_type_Valid() const;

    OAIDescribeBrokerResponse_LdapServerMetadata getLdapServerMetadata() const;
    void setLdapServerMetadata(const OAIDescribeBrokerResponse_LdapServerMetadata &ldap_server_metadata);
    bool is_ldap_server_metadata_Set() const;
    bool is_ldap_server_metadata_Valid() const;

    OAIDescribeBrokerResponse_Logs getLogs() const;
    void setLogs(const OAIDescribeBrokerResponse_Logs &logs);
    bool is_logs_Set() const;
    bool is_logs_Valid() const;

    OAIDescribeBrokerResponse_MaintenanceWindowStartTime getMaintenanceWindowStartTime() const;
    void setMaintenanceWindowStartTime(const OAIDescribeBrokerResponse_MaintenanceWindowStartTime &maintenance_window_start_time);
    bool is_maintenance_window_start_time_Set() const;
    bool is_maintenance_window_start_time_Valid() const;

    OAIAuthenticationStrategy getPendingAuthenticationStrategy() const;
    void setPendingAuthenticationStrategy(const OAIAuthenticationStrategy &pending_authentication_strategy);
    bool is_pending_authentication_strategy_Set() const;
    bool is_pending_authentication_strategy_Valid() const;

    QString getPendingEngineVersion() const;
    void setPendingEngineVersion(const QString &pending_engine_version);
    bool is_pending_engine_version_Set() const;
    bool is_pending_engine_version_Valid() const;

    QString getPendingHostInstanceType() const;
    void setPendingHostInstanceType(const QString &pending_host_instance_type);
    bool is_pending_host_instance_type_Set() const;
    bool is_pending_host_instance_type_Valid() const;

    OAIDescribeBrokerResponse_PendingLdapServerMetadata getPendingLdapServerMetadata() const;
    void setPendingLdapServerMetadata(const OAIDescribeBrokerResponse_PendingLdapServerMetadata &pending_ldap_server_metadata);
    bool is_pending_ldap_server_metadata_Set() const;
    bool is_pending_ldap_server_metadata_Valid() const;

    QList getPendingSecurityGroups() const;
    void setPendingSecurityGroups(const QList &pending_security_groups);
    bool is_pending_security_groups_Set() const;
    bool is_pending_security_groups_Valid() const;

    bool getPubliclyAccessible() const;
    void setPubliclyAccessible(const bool &publicly_accessible);
    bool is_publicly_accessible_Set() const;
    bool is_publicly_accessible_Valid() const;

    QList getSecurityGroups() const;
    void setSecurityGroups(const QList &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    OAIBrokerStorageType getStorageType() const;
    void setStorageType(const OAIBrokerStorageType &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QList getSubnetIds() const;
    void setSubnetIds(const QList &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getUsers() const;
    void setUsers(const QList &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    OAIDescribeBrokerResponse_DataReplicationMetadata getDataReplicationMetadata() const;
    void setDataReplicationMetadata(const OAIDescribeBrokerResponse_DataReplicationMetadata &data_replication_metadata);
    bool is_data_replication_metadata_Set() const;
    bool is_data_replication_metadata_Valid() const;

    OAIDataReplicationMode getDataReplicationMode() const;
    void setDataReplicationMode(const OAIDataReplicationMode &data_replication_mode);
    bool is_data_replication_mode_Set() const;
    bool is_data_replication_mode_Valid() const;

    OAIDescribeBrokerResponse_PendingDataReplicationMetadata getPendingDataReplicationMetadata() const;
    void setPendingDataReplicationMetadata(const OAIDescribeBrokerResponse_PendingDataReplicationMetadata &pending_data_replication_metadata);
    bool is_pending_data_replication_metadata_Set() const;
    bool is_pending_data_replication_metadata_Valid() const;

    OAIDataReplicationMode getPendingDataReplicationMode() const;
    void setPendingDataReplicationMode(const OAIDataReplicationMode &pending_data_replication_mode);
    bool is_pending_data_replication_mode_Set() const;
    bool is_pending_data_replication_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_actions_required;
    bool m_actions_required_isSet;
    bool m_actions_required_isValid;

    OAIAuthenticationStrategy m_authentication_strategy;
    bool m_authentication_strategy_isSet;
    bool m_authentication_strategy_isValid;

    bool m_auto_minor_version_upgrade;
    bool m_auto_minor_version_upgrade_isSet;
    bool m_auto_minor_version_upgrade_isValid;

    QString m_broker_arn;
    bool m_broker_arn_isSet;
    bool m_broker_arn_isValid;

    QString m_broker_id;
    bool m_broker_id_isSet;
    bool m_broker_id_isValid;

    QList m_broker_instances;
    bool m_broker_instances_isSet;
    bool m_broker_instances_isValid;

    QString m_broker_name;
    bool m_broker_name_isSet;
    bool m_broker_name_isValid;

    OAIBrokerState m_broker_state;
    bool m_broker_state_isSet;
    bool m_broker_state_isValid;

    OAIDescribeBrokerResponse_Configurations m_configurations;
    bool m_configurations_isSet;
    bool m_configurations_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIDeploymentMode m_deployment_mode;
    bool m_deployment_mode_isSet;
    bool m_deployment_mode_isValid;

    OAIDescribeBrokerResponse_EncryptionOptions m_encryption_options;
    bool m_encryption_options_isSet;
    bool m_encryption_options_isValid;

    OAIEngineType m_engine_type;
    bool m_engine_type_isSet;
    bool m_engine_type_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_host_instance_type;
    bool m_host_instance_type_isSet;
    bool m_host_instance_type_isValid;

    OAIDescribeBrokerResponse_LdapServerMetadata m_ldap_server_metadata;
    bool m_ldap_server_metadata_isSet;
    bool m_ldap_server_metadata_isValid;

    OAIDescribeBrokerResponse_Logs m_logs;
    bool m_logs_isSet;
    bool m_logs_isValid;

    OAIDescribeBrokerResponse_MaintenanceWindowStartTime m_maintenance_window_start_time;
    bool m_maintenance_window_start_time_isSet;
    bool m_maintenance_window_start_time_isValid;

    OAIAuthenticationStrategy m_pending_authentication_strategy;
    bool m_pending_authentication_strategy_isSet;
    bool m_pending_authentication_strategy_isValid;

    QString m_pending_engine_version;
    bool m_pending_engine_version_isSet;
    bool m_pending_engine_version_isValid;

    QString m_pending_host_instance_type;
    bool m_pending_host_instance_type_isSet;
    bool m_pending_host_instance_type_isValid;

    OAIDescribeBrokerResponse_PendingLdapServerMetadata m_pending_ldap_server_metadata;
    bool m_pending_ldap_server_metadata_isSet;
    bool m_pending_ldap_server_metadata_isValid;

    QList m_pending_security_groups;
    bool m_pending_security_groups_isSet;
    bool m_pending_security_groups_isValid;

    bool m_publicly_accessible;
    bool m_publicly_accessible_isSet;
    bool m_publicly_accessible_isValid;

    QList m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    OAIBrokerStorageType m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QList m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_users;
    bool m_users_isSet;
    bool m_users_isValid;

    OAIDescribeBrokerResponse_DataReplicationMetadata m_data_replication_metadata;
    bool m_data_replication_metadata_isSet;
    bool m_data_replication_metadata_isValid;

    OAIDataReplicationMode m_data_replication_mode;
    bool m_data_replication_mode_isSet;
    bool m_data_replication_mode_isValid;

    OAIDescribeBrokerResponse_PendingDataReplicationMetadata m_pending_data_replication_metadata;
    bool m_pending_data_replication_metadata_isSet;
    bool m_pending_data_replication_metadata_isValid;

    OAIDataReplicationMode m_pending_data_replication_mode;
    bool m_pending_data_replication_mode_isSet;
    bool m_pending_data_replication_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeBrokerResponse)

#endif // OAIDescribeBrokerResponse_H
