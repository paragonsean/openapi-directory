/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSummary::OAIUserSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSummary::OAIUserSummary() {
    this->initializeModel();
}

OAIUserSummary::~OAIUserSummary() {}

void OAIUserSummary::initializeModel() {

    m_pending_change_isSet = false;
    m_pending_change_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSummary::fromJsonObject(QJsonObject json) {

    m_pending_change_isValid = ::OpenAPI::fromJsonValue(m_pending_change, json[QString("PendingChange")]);
    m_pending_change_isSet = !json[QString("PendingChange")].isNull() && m_pending_change_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAIUserSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_pending_change.isSet()) {
        obj.insert(QString("PendingChange"), ::OpenAPI::toJsonValue(m_pending_change));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAIChangeType OAIUserSummary::getPendingChange() const {
    return m_pending_change;
}
void OAIUserSummary::setPendingChange(const OAIChangeType &pending_change) {
    m_pending_change = pending_change;
    m_pending_change_isSet = true;
}

bool OAIUserSummary::is_pending_change_Set() const{
    return m_pending_change_isSet;
}

bool OAIUserSummary::is_pending_change_Valid() const{
    return m_pending_change_isValid;
}

QString OAIUserSummary::getUsername() const {
    return m_username;
}
void OAIUserSummary::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserSummary::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserSummary::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pending_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && true;
}

} // namespace OpenAPI
