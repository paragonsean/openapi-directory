/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISanitizationWarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISanitizationWarning::OAISanitizationWarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISanitizationWarning::OAISanitizationWarning() {
    this->initializeModel();
}

OAISanitizationWarning::~OAISanitizationWarning() {}

void OAISanitizationWarning::initializeModel() {

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_element_name_isSet = false;
    m_element_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAISanitizationWarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISanitizationWarning::fromJsonObject(QJsonObject json) {

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("AttributeName")]);
    m_attribute_name_isSet = !json[QString("AttributeName")].isNull() && m_attribute_name_isValid;

    m_element_name_isValid = ::OpenAPI::fromJsonValue(m_element_name, json[QString("ElementName")]);
    m_element_name_isSet = !json[QString("ElementName")].isNull() && m_element_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;
}

QString OAISanitizationWarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISanitizationWarning::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_name_isSet) {
        obj.insert(QString("AttributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_element_name_isSet) {
        obj.insert(QString("ElementName"), ::OpenAPI::toJsonValue(m_element_name));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAISanitizationWarning::getAttributeName() const {
    return m_attribute_name;
}
void OAISanitizationWarning::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAISanitizationWarning::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAISanitizationWarning::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAISanitizationWarning::getElementName() const {
    return m_element_name;
}
void OAISanitizationWarning::setElementName(const QString &element_name) {
    m_element_name = element_name;
    m_element_name_isSet = true;
}

bool OAISanitizationWarning::is_element_name_Set() const{
    return m_element_name_isSet;
}

bool OAISanitizationWarning::is_element_name_Valid() const{
    return m_element_name_isValid;
}

OAISanitizationWarningReason OAISanitizationWarning::getReason() const {
    return m_reason;
}
void OAISanitizationWarning::setReason(const OAISanitizationWarningReason &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAISanitizationWarning::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAISanitizationWarning::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAISanitizationWarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISanitizationWarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reason_isValid && true;
}

} // namespace OpenAPI
