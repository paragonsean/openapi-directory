/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeBrokerResponse_EncryptionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeBrokerResponse_EncryptionOptions::OAIDescribeBrokerResponse_EncryptionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeBrokerResponse_EncryptionOptions::OAIDescribeBrokerResponse_EncryptionOptions() {
    this->initializeModel();
}

OAIDescribeBrokerResponse_EncryptionOptions::~OAIDescribeBrokerResponse_EncryptionOptions() {}

void OAIDescribeBrokerResponse_EncryptionOptions::initializeModel() {

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_use_aws_owned_key_isSet = false;
    m_use_aws_owned_key_isValid = false;
}

void OAIDescribeBrokerResponse_EncryptionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeBrokerResponse_EncryptionOptions::fromJsonObject(QJsonObject json) {

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_use_aws_owned_key_isValid = ::OpenAPI::fromJsonValue(m_use_aws_owned_key, json[QString("UseAwsOwnedKey")]);
    m_use_aws_owned_key_isSet = !json[QString("UseAwsOwnedKey")].isNull() && m_use_aws_owned_key_isValid;
}

QString OAIDescribeBrokerResponse_EncryptionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeBrokerResponse_EncryptionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_use_aws_owned_key_isSet) {
        obj.insert(QString("UseAwsOwnedKey"), ::OpenAPI::toJsonValue(m_use_aws_owned_key));
    }
    return obj;
}

QString OAIDescribeBrokerResponse_EncryptionOptions::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDescribeBrokerResponse_EncryptionOptions::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::getUseAwsOwnedKey() const {
    return m_use_aws_owned_key;
}
void OAIDescribeBrokerResponse_EncryptionOptions::setUseAwsOwnedKey(const bool &use_aws_owned_key) {
    m_use_aws_owned_key = use_aws_owned_key;
    m_use_aws_owned_key_isSet = true;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::is_use_aws_owned_key_Set() const{
    return m_use_aws_owned_key_isSet;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::is_use_aws_owned_key_Valid() const{
    return m_use_aws_owned_key_isValid;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_aws_owned_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeBrokerResponse_EncryptionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_use_aws_owned_key_isValid && true;
}

} // namespace OpenAPI
