/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentMode::OAIDeploymentMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentMode::OAIDeploymentMode() {
    this->initializeModel();
}

OAIDeploymentMode::~OAIDeploymentMode() {}

void OAIDeploymentMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeploymentMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeploymentMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SINGLE_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentMode::SINGLE_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE_STANDBY_MULTI_AZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentMode::ACTIVE_STANDBY_MULTI_AZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLUSTER_MULTI_AZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentMode::CLUSTER_MULTI_AZ;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeploymentMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeploymentMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeploymentMode::SINGLE_INSTANCE:
            val = "SINGLE_INSTANCE";
            break;
        case eOAIDeploymentMode::ACTIVE_STANDBY_MULTI_AZ:
            val = "ACTIVE_STANDBY_MULTI_AZ";
            break;
        case eOAIDeploymentMode::CLUSTER_MULTI_AZ:
            val = "CLUSTER_MULTI_AZ";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeploymentMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeploymentMode::eOAIDeploymentMode OAIDeploymentMode::getValue() const {
    return m_value;
}

void OAIDeploymentMode::setValue(const OAIDeploymentMode::eOAIDeploymentMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeploymentMode::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeploymentMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
