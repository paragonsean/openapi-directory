/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBroker_request_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBroker_request_configuration::OAICreateBroker_request_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBroker_request_configuration::OAICreateBroker_request_configuration() {
    this->initializeModel();
}

OAICreateBroker_request_configuration::~OAICreateBroker_request_configuration() {}

void OAICreateBroker_request_configuration::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAICreateBroker_request_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBroker_request_configuration::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;
}

QString OAICreateBroker_request_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBroker_request_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

QString OAICreateBroker_request_configuration::getId() const {
    return m_id;
}
void OAICreateBroker_request_configuration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateBroker_request_configuration::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateBroker_request_configuration::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICreateBroker_request_configuration::getRevision() const {
    return m_revision;
}
void OAICreateBroker_request_configuration::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAICreateBroker_request_configuration::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAICreateBroker_request_configuration::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAICreateBroker_request_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBroker_request_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
