/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConfiguration_request::OAICreateConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConfiguration_request::OAICreateConfiguration_request() {
    this->initializeModel();
}

OAICreateConfiguration_request::~OAICreateConfiguration_request() {}

void OAICreateConfiguration_request::initializeModel() {

    m_authentication_strategy_isSet = false;
    m_authentication_strategy_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConfiguration_request::fromJsonObject(QJsonObject json) {

    m_authentication_strategy_isValid = ::OpenAPI::fromJsonValue(m_authentication_strategy, json[QString("authenticationStrategy")]);
    m_authentication_strategy_isSet = !json[QString("authenticationStrategy")].isNull() && m_authentication_strategy_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_strategy_isSet) {
        obj.insert(QString("authenticationStrategy"), ::OpenAPI::toJsonValue(m_authentication_strategy));
    }
    if (m_engine_type_isSet) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateConfiguration_request::getAuthenticationStrategy() const {
    return m_authentication_strategy;
}
void OAICreateConfiguration_request::setAuthenticationStrategy(const QString &authentication_strategy) {
    m_authentication_strategy = authentication_strategy;
    m_authentication_strategy_isSet = true;
}

bool OAICreateConfiguration_request::is_authentication_strategy_Set() const{
    return m_authentication_strategy_isSet;
}

bool OAICreateConfiguration_request::is_authentication_strategy_Valid() const{
    return m_authentication_strategy_isValid;
}

QString OAICreateConfiguration_request::getEngineType() const {
    return m_engine_type;
}
void OAICreateConfiguration_request::setEngineType(const QString &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAICreateConfiguration_request::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAICreateConfiguration_request::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAICreateConfiguration_request::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateConfiguration_request::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateConfiguration_request::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateConfiguration_request::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAICreateConfiguration_request::getName() const {
    return m_name;
}
void OAICreateConfiguration_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConfiguration_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConfiguration_request::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICreateConfiguration_request::getTags() const {
    return m_tags;
}
void OAICreateConfiguration_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateConfiguration_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateConfiguration_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engine_type_isValid && m_engine_version_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
