/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurations::OAIConfigurations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurations::OAIConfigurations() {
    this->initializeModel();
}

OAIConfigurations::~OAIConfigurations() {}

void OAIConfigurations::initializeModel() {

    m_current_isSet = false;
    m_current_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;
}

void OAIConfigurations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurations::fromJsonObject(QJsonObject json) {

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("Current")]);
    m_current_isSet = !json[QString("Current")].isNull() && m_current_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("History")]);
    m_history_isSet = !json[QString("History")].isNull() && m_history_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("Pending")]);
    m_pending_isSet = !json[QString("Pending")].isNull() && m_pending_isValid;
}

QString OAIConfigurations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurations::asJsonObject() const {
    QJsonObject obj;
    if (m_current.isSet()) {
        obj.insert(QString("Current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_history.isSet()) {
        obj.insert(QString("History"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_pending.isSet()) {
        obj.insert(QString("Pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    return obj;
}

OAIConfigurations_Current OAIConfigurations::getCurrent() const {
    return m_current;
}
void OAIConfigurations::setCurrent(const OAIConfigurations_Current &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIConfigurations::is_current_Set() const{
    return m_current_isSet;
}

bool OAIConfigurations::is_current_Valid() const{
    return m_current_isValid;
}

QList OAIConfigurations::getHistory() const {
    return m_history;
}
void OAIConfigurations::setHistory(const QList &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIConfigurations::is_history_Set() const{
    return m_history_isSet;
}

bool OAIConfigurations::is_history_Valid() const{
    return m_history_isValid;
}

OAIConfigurations_Pending OAIConfigurations::getPending() const {
    return m_pending;
}
void OAIConfigurations::setPending(const OAIConfigurations_Pending &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIConfigurations::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIConfigurations::is_pending_Valid() const{
    return m_pending_isValid;
}

bool OAIConfigurations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
