/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrokerSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrokerSummary::OAIBrokerSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrokerSummary::OAIBrokerSummary() {
    this->initializeModel();
}

OAIBrokerSummary::~OAIBrokerSummary() {}

void OAIBrokerSummary::initializeModel() {

    m_broker_arn_isSet = false;
    m_broker_arn_isValid = false;

    m_broker_id_isSet = false;
    m_broker_id_isValid = false;

    m_broker_name_isSet = false;
    m_broker_name_isValid = false;

    m_broker_state_isSet = false;
    m_broker_state_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_deployment_mode_isSet = false;
    m_deployment_mode_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_host_instance_type_isSet = false;
    m_host_instance_type_isValid = false;
}

void OAIBrokerSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrokerSummary::fromJsonObject(QJsonObject json) {

    m_broker_arn_isValid = ::OpenAPI::fromJsonValue(m_broker_arn, json[QString("BrokerArn")]);
    m_broker_arn_isSet = !json[QString("BrokerArn")].isNull() && m_broker_arn_isValid;

    m_broker_id_isValid = ::OpenAPI::fromJsonValue(m_broker_id, json[QString("BrokerId")]);
    m_broker_id_isSet = !json[QString("BrokerId")].isNull() && m_broker_id_isValid;

    m_broker_name_isValid = ::OpenAPI::fromJsonValue(m_broker_name, json[QString("BrokerName")]);
    m_broker_name_isSet = !json[QString("BrokerName")].isNull() && m_broker_name_isValid;

    m_broker_state_isValid = ::OpenAPI::fromJsonValue(m_broker_state, json[QString("BrokerState")]);
    m_broker_state_isSet = !json[QString("BrokerState")].isNull() && m_broker_state_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_deployment_mode_isValid = ::OpenAPI::fromJsonValue(m_deployment_mode, json[QString("DeploymentMode")]);
    m_deployment_mode_isSet = !json[QString("DeploymentMode")].isNull() && m_deployment_mode_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("EngineType")]);
    m_engine_type_isSet = !json[QString("EngineType")].isNull() && m_engine_type_isValid;

    m_host_instance_type_isValid = ::OpenAPI::fromJsonValue(m_host_instance_type, json[QString("HostInstanceType")]);
    m_host_instance_type_isSet = !json[QString("HostInstanceType")].isNull() && m_host_instance_type_isValid;
}

QString OAIBrokerSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrokerSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_broker_arn_isSet) {
        obj.insert(QString("BrokerArn"), ::OpenAPI::toJsonValue(m_broker_arn));
    }
    if (m_broker_id_isSet) {
        obj.insert(QString("BrokerId"), ::OpenAPI::toJsonValue(m_broker_id));
    }
    if (m_broker_name_isSet) {
        obj.insert(QString("BrokerName"), ::OpenAPI::toJsonValue(m_broker_name));
    }
    if (m_broker_state.isSet()) {
        obj.insert(QString("BrokerState"), ::OpenAPI::toJsonValue(m_broker_state));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_deployment_mode.isSet()) {
        obj.insert(QString("DeploymentMode"), ::OpenAPI::toJsonValue(m_deployment_mode));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("EngineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_host_instance_type_isSet) {
        obj.insert(QString("HostInstanceType"), ::OpenAPI::toJsonValue(m_host_instance_type));
    }
    return obj;
}

QString OAIBrokerSummary::getBrokerArn() const {
    return m_broker_arn;
}
void OAIBrokerSummary::setBrokerArn(const QString &broker_arn) {
    m_broker_arn = broker_arn;
    m_broker_arn_isSet = true;
}

bool OAIBrokerSummary::is_broker_arn_Set() const{
    return m_broker_arn_isSet;
}

bool OAIBrokerSummary::is_broker_arn_Valid() const{
    return m_broker_arn_isValid;
}

QString OAIBrokerSummary::getBrokerId() const {
    return m_broker_id;
}
void OAIBrokerSummary::setBrokerId(const QString &broker_id) {
    m_broker_id = broker_id;
    m_broker_id_isSet = true;
}

bool OAIBrokerSummary::is_broker_id_Set() const{
    return m_broker_id_isSet;
}

bool OAIBrokerSummary::is_broker_id_Valid() const{
    return m_broker_id_isValid;
}

QString OAIBrokerSummary::getBrokerName() const {
    return m_broker_name;
}
void OAIBrokerSummary::setBrokerName(const QString &broker_name) {
    m_broker_name = broker_name;
    m_broker_name_isSet = true;
}

bool OAIBrokerSummary::is_broker_name_Set() const{
    return m_broker_name_isSet;
}

bool OAIBrokerSummary::is_broker_name_Valid() const{
    return m_broker_name_isValid;
}

OAIBrokerState OAIBrokerSummary::getBrokerState() const {
    return m_broker_state;
}
void OAIBrokerSummary::setBrokerState(const OAIBrokerState &broker_state) {
    m_broker_state = broker_state;
    m_broker_state_isSet = true;
}

bool OAIBrokerSummary::is_broker_state_Set() const{
    return m_broker_state_isSet;
}

bool OAIBrokerSummary::is_broker_state_Valid() const{
    return m_broker_state_isValid;
}

QDateTime OAIBrokerSummary::getCreated() const {
    return m_created;
}
void OAIBrokerSummary::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIBrokerSummary::is_created_Set() const{
    return m_created_isSet;
}

bool OAIBrokerSummary::is_created_Valid() const{
    return m_created_isValid;
}

OAIDeploymentMode OAIBrokerSummary::getDeploymentMode() const {
    return m_deployment_mode;
}
void OAIBrokerSummary::setDeploymentMode(const OAIDeploymentMode &deployment_mode) {
    m_deployment_mode = deployment_mode;
    m_deployment_mode_isSet = true;
}

bool OAIBrokerSummary::is_deployment_mode_Set() const{
    return m_deployment_mode_isSet;
}

bool OAIBrokerSummary::is_deployment_mode_Valid() const{
    return m_deployment_mode_isValid;
}

OAIEngineType OAIBrokerSummary::getEngineType() const {
    return m_engine_type;
}
void OAIBrokerSummary::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIBrokerSummary::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIBrokerSummary::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIBrokerSummary::getHostInstanceType() const {
    return m_host_instance_type;
}
void OAIBrokerSummary::setHostInstanceType(const QString &host_instance_type) {
    m_host_instance_type = host_instance_type;
    m_host_instance_type_isSet = true;
}

bool OAIBrokerSummary::is_host_instance_type_Set() const{
    return m_host_instance_type_isSet;
}

bool OAIBrokerSummary::is_host_instance_type_Valid() const{
    return m_host_instance_type_isValid;
}

bool OAIBrokerSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_broker_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrokerSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployment_mode_isValid && m_engine_type_isValid && true;
}

} // namespace OpenAPI
