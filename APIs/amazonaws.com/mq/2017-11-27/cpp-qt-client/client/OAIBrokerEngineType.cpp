/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrokerEngineType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrokerEngineType::OAIBrokerEngineType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrokerEngineType::OAIBrokerEngineType() {
    this->initializeModel();
}

OAIBrokerEngineType::~OAIBrokerEngineType() {}

void OAIBrokerEngineType::initializeModel() {

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_versions_isSet = false;
    m_engine_versions_isValid = false;
}

void OAIBrokerEngineType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrokerEngineType::fromJsonObject(QJsonObject json) {

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("EngineType")]);
    m_engine_type_isSet = !json[QString("EngineType")].isNull() && m_engine_type_isValid;

    m_engine_versions_isValid = ::OpenAPI::fromJsonValue(m_engine_versions, json[QString("EngineVersions")]);
    m_engine_versions_isSet = !json[QString("EngineVersions")].isNull() && m_engine_versions_isValid;
}

QString OAIBrokerEngineType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrokerEngineType::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_type.isSet()) {
        obj.insert(QString("EngineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_versions.isSet()) {
        obj.insert(QString("EngineVersions"), ::OpenAPI::toJsonValue(m_engine_versions));
    }
    return obj;
}

OAIEngineType OAIBrokerEngineType::getEngineType() const {
    return m_engine_type;
}
void OAIBrokerEngineType::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIBrokerEngineType::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIBrokerEngineType::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QList OAIBrokerEngineType::getEngineVersions() const {
    return m_engine_versions;
}
void OAIBrokerEngineType::setEngineVersions(const QList &engine_versions) {
    m_engine_versions = engine_versions;
    m_engine_versions_isSet = true;
}

bool OAIBrokerEngineType::is_engine_versions_Set() const{
    return m_engine_versions_isSet;
}

bool OAIBrokerEngineType::is_engine_versions_Valid() const{
    return m_engine_versions_isValid;
}

bool OAIBrokerEngineType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrokerEngineType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
