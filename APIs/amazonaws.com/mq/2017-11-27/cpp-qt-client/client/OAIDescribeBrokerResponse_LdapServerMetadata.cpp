/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeBrokerResponse_LdapServerMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeBrokerResponse_LdapServerMetadata::OAIDescribeBrokerResponse_LdapServerMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeBrokerResponse_LdapServerMetadata::OAIDescribeBrokerResponse_LdapServerMetadata() {
    this->initializeModel();
}

OAIDescribeBrokerResponse_LdapServerMetadata::~OAIDescribeBrokerResponse_LdapServerMetadata() {}

void OAIDescribeBrokerResponse_LdapServerMetadata::initializeModel() {

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_role_base_isSet = false;
    m_role_base_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_role_search_matching_isSet = false;
    m_role_search_matching_isValid = false;

    m_role_search_subtree_isSet = false;
    m_role_search_subtree_isValid = false;

    m_service_account_username_isSet = false;
    m_service_account_username_isValid = false;

    m_user_base_isSet = false;
    m_user_base_isValid = false;

    m_user_role_name_isSet = false;
    m_user_role_name_isValid = false;

    m_user_search_matching_isSet = false;
    m_user_search_matching_isValid = false;

    m_user_search_subtree_isSet = false;
    m_user_search_subtree_isValid = false;
}

void OAIDescribeBrokerResponse_LdapServerMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeBrokerResponse_LdapServerMetadata::fromJsonObject(QJsonObject json) {

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("Hosts")]);
    m_hosts_isSet = !json[QString("Hosts")].isNull() && m_hosts_isValid;

    m_role_base_isValid = ::OpenAPI::fromJsonValue(m_role_base, json[QString("RoleBase")]);
    m_role_base_isSet = !json[QString("RoleBase")].isNull() && m_role_base_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("RoleName")]);
    m_role_name_isSet = !json[QString("RoleName")].isNull() && m_role_name_isValid;

    m_role_search_matching_isValid = ::OpenAPI::fromJsonValue(m_role_search_matching, json[QString("RoleSearchMatching")]);
    m_role_search_matching_isSet = !json[QString("RoleSearchMatching")].isNull() && m_role_search_matching_isValid;

    m_role_search_subtree_isValid = ::OpenAPI::fromJsonValue(m_role_search_subtree, json[QString("RoleSearchSubtree")]);
    m_role_search_subtree_isSet = !json[QString("RoleSearchSubtree")].isNull() && m_role_search_subtree_isValid;

    m_service_account_username_isValid = ::OpenAPI::fromJsonValue(m_service_account_username, json[QString("ServiceAccountUsername")]);
    m_service_account_username_isSet = !json[QString("ServiceAccountUsername")].isNull() && m_service_account_username_isValid;

    m_user_base_isValid = ::OpenAPI::fromJsonValue(m_user_base, json[QString("UserBase")]);
    m_user_base_isSet = !json[QString("UserBase")].isNull() && m_user_base_isValid;

    m_user_role_name_isValid = ::OpenAPI::fromJsonValue(m_user_role_name, json[QString("UserRoleName")]);
    m_user_role_name_isSet = !json[QString("UserRoleName")].isNull() && m_user_role_name_isValid;

    m_user_search_matching_isValid = ::OpenAPI::fromJsonValue(m_user_search_matching, json[QString("UserSearchMatching")]);
    m_user_search_matching_isSet = !json[QString("UserSearchMatching")].isNull() && m_user_search_matching_isValid;

    m_user_search_subtree_isValid = ::OpenAPI::fromJsonValue(m_user_search_subtree, json[QString("UserSearchSubtree")]);
    m_user_search_subtree_isSet = !json[QString("UserSearchSubtree")].isNull() && m_user_search_subtree_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeBrokerResponse_LdapServerMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_hosts.isSet()) {
        obj.insert(QString("Hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_role_base_isSet) {
        obj.insert(QString("RoleBase"), ::OpenAPI::toJsonValue(m_role_base));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("RoleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_role_search_matching_isSet) {
        obj.insert(QString("RoleSearchMatching"), ::OpenAPI::toJsonValue(m_role_search_matching));
    }
    if (m_role_search_subtree_isSet) {
        obj.insert(QString("RoleSearchSubtree"), ::OpenAPI::toJsonValue(m_role_search_subtree));
    }
    if (m_service_account_username_isSet) {
        obj.insert(QString("ServiceAccountUsername"), ::OpenAPI::toJsonValue(m_service_account_username));
    }
    if (m_user_base_isSet) {
        obj.insert(QString("UserBase"), ::OpenAPI::toJsonValue(m_user_base));
    }
    if (m_user_role_name_isSet) {
        obj.insert(QString("UserRoleName"), ::OpenAPI::toJsonValue(m_user_role_name));
    }
    if (m_user_search_matching_isSet) {
        obj.insert(QString("UserSearchMatching"), ::OpenAPI::toJsonValue(m_user_search_matching));
    }
    if (m_user_search_subtree_isSet) {
        obj.insert(QString("UserSearchSubtree"), ::OpenAPI::toJsonValue(m_user_search_subtree));
    }
    return obj;
}

QList OAIDescribeBrokerResponse_LdapServerMetadata::getHosts() const {
    return m_hosts;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setHosts(const QList &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_hosts_Valid() const{
    return m_hosts_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getRoleBase() const {
    return m_role_base;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setRoleBase(const QString &role_base) {
    m_role_base = role_base;
    m_role_base_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_base_Set() const{
    return m_role_base_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_base_Valid() const{
    return m_role_base_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getRoleName() const {
    return m_role_name;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_name_Valid() const{
    return m_role_name_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getRoleSearchMatching() const {
    return m_role_search_matching;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setRoleSearchMatching(const QString &role_search_matching) {
    m_role_search_matching = role_search_matching;
    m_role_search_matching_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_search_matching_Set() const{
    return m_role_search_matching_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_search_matching_Valid() const{
    return m_role_search_matching_isValid;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::getRoleSearchSubtree() const {
    return m_role_search_subtree;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setRoleSearchSubtree(const bool &role_search_subtree) {
    m_role_search_subtree = role_search_subtree;
    m_role_search_subtree_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_search_subtree_Set() const{
    return m_role_search_subtree_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_role_search_subtree_Valid() const{
    return m_role_search_subtree_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getServiceAccountUsername() const {
    return m_service_account_username;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setServiceAccountUsername(const QString &service_account_username) {
    m_service_account_username = service_account_username;
    m_service_account_username_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_service_account_username_Set() const{
    return m_service_account_username_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_service_account_username_Valid() const{
    return m_service_account_username_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getUserBase() const {
    return m_user_base;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setUserBase(const QString &user_base) {
    m_user_base = user_base;
    m_user_base_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_base_Set() const{
    return m_user_base_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_base_Valid() const{
    return m_user_base_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getUserRoleName() const {
    return m_user_role_name;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setUserRoleName(const QString &user_role_name) {
    m_user_role_name = user_role_name;
    m_user_role_name_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_role_name_Set() const{
    return m_user_role_name_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_role_name_Valid() const{
    return m_user_role_name_isValid;
}

QString OAIDescribeBrokerResponse_LdapServerMetadata::getUserSearchMatching() const {
    return m_user_search_matching;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setUserSearchMatching(const QString &user_search_matching) {
    m_user_search_matching = user_search_matching;
    m_user_search_matching_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_search_matching_Set() const{
    return m_user_search_matching_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_search_matching_Valid() const{
    return m_user_search_matching_isValid;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::getUserSearchSubtree() const {
    return m_user_search_subtree;
}
void OAIDescribeBrokerResponse_LdapServerMetadata::setUserSearchSubtree(const bool &user_search_subtree) {
    m_user_search_subtree = user_search_subtree;
    m_user_search_subtree_isSet = true;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_search_subtree_Set() const{
    return m_user_search_subtree_isSet;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::is_user_search_subtree_Valid() const{
    return m_user_search_subtree_isValid;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_search_matching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_search_subtree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_search_matching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_search_subtree_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeBrokerResponse_LdapServerMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hosts_isValid && m_role_base_isValid && m_role_search_matching_isValid && m_service_account_username_isValid && m_user_base_isValid && m_user_search_matching_isValid && true;
}

} // namespace OpenAPI
