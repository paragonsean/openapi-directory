/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeeklyStartTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeeklyStartTime::OAIWeeklyStartTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeeklyStartTime::OAIWeeklyStartTime() {
    this->initializeModel();
}

OAIWeeklyStartTime::~OAIWeeklyStartTime() {}

void OAIWeeklyStartTime::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_time_of_day_isSet = false;
    m_time_of_day_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIWeeklyStartTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeeklyStartTime::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_time_of_day, json[QString("TimeOfDay")]);
    m_time_of_day_isSet = !json[QString("TimeOfDay")].isNull() && m_time_of_day_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;
}

QString OAIWeeklyStartTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeeklyStartTime::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week.isSet()) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_time_of_day_isSet) {
        obj.insert(QString("TimeOfDay"), ::OpenAPI::toJsonValue(m_time_of_day));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIDayOfWeek OAIWeeklyStartTime::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIWeeklyStartTime::setDayOfWeek(const OAIDayOfWeek &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIWeeklyStartTime::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIWeeklyStartTime::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

QString OAIWeeklyStartTime::getTimeOfDay() const {
    return m_time_of_day;
}
void OAIWeeklyStartTime::setTimeOfDay(const QString &time_of_day) {
    m_time_of_day = time_of_day;
    m_time_of_day_isSet = true;
}

bool OAIWeeklyStartTime::is_time_of_day_Set() const{
    return m_time_of_day_isSet;
}

bool OAIWeeklyStartTime::is_time_of_day_Valid() const{
    return m_time_of_day_isValid;
}

QString OAIWeeklyStartTime::getTimeZone() const {
    return m_time_zone;
}
void OAIWeeklyStartTime::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIWeeklyStartTime::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIWeeklyStartTime::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIWeeklyStartTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeeklyStartTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_day_of_week_isValid && m_time_of_day_isValid && true;
}

} // namespace OpenAPI
