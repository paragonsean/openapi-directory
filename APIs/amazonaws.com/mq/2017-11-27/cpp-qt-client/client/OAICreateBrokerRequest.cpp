/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBrokerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBrokerRequest::OAICreateBrokerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBrokerRequest::OAICreateBrokerRequest() {
    this->initializeModel();
}

OAICreateBrokerRequest::~OAICreateBrokerRequest() {}

void OAICreateBrokerRequest::initializeModel() {

    m_authentication_strategy_isSet = false;
    m_authentication_strategy_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_broker_name_isSet = false;
    m_broker_name_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_deployment_mode_isSet = false;
    m_deployment_mode_isValid = false;

    m_encryption_options_isSet = false;
    m_encryption_options_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_host_instance_type_isSet = false;
    m_host_instance_type_isValid = false;

    m_ldap_server_metadata_isSet = false;
    m_ldap_server_metadata_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_maintenance_window_start_time_isSet = false;
    m_maintenance_window_start_time_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_data_replication_mode_isSet = false;
    m_data_replication_mode_isValid = false;

    m_data_replication_primary_broker_arn_isSet = false;
    m_data_replication_primary_broker_arn_isValid = false;
}

void OAICreateBrokerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBrokerRequest::fromJsonObject(QJsonObject json) {

    m_authentication_strategy_isValid = ::OpenAPI::fromJsonValue(m_authentication_strategy, json[QString("AuthenticationStrategy")]);
    m_authentication_strategy_isSet = !json[QString("AuthenticationStrategy")].isNull() && m_authentication_strategy_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_broker_name_isValid = ::OpenAPI::fromJsonValue(m_broker_name, json[QString("BrokerName")]);
    m_broker_name_isSet = !json[QString("BrokerName")].isNull() && m_broker_name_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_deployment_mode_isValid = ::OpenAPI::fromJsonValue(m_deployment_mode, json[QString("DeploymentMode")]);
    m_deployment_mode_isSet = !json[QString("DeploymentMode")].isNull() && m_deployment_mode_isValid;

    m_encryption_options_isValid = ::OpenAPI::fromJsonValue(m_encryption_options, json[QString("EncryptionOptions")]);
    m_encryption_options_isSet = !json[QString("EncryptionOptions")].isNull() && m_encryption_options_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("EngineType")]);
    m_engine_type_isSet = !json[QString("EngineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_host_instance_type_isValid = ::OpenAPI::fromJsonValue(m_host_instance_type, json[QString("HostInstanceType")]);
    m_host_instance_type_isSet = !json[QString("HostInstanceType")].isNull() && m_host_instance_type_isValid;

    m_ldap_server_metadata_isValid = ::OpenAPI::fromJsonValue(m_ldap_server_metadata, json[QString("LdapServerMetadata")]);
    m_ldap_server_metadata_isSet = !json[QString("LdapServerMetadata")].isNull() && m_ldap_server_metadata_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("Logs")]);
    m_logs_isSet = !json[QString("Logs")].isNull() && m_logs_isValid;

    m_maintenance_window_start_time_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window_start_time, json[QString("MaintenanceWindowStartTime")]);
    m_maintenance_window_start_time_isSet = !json[QString("MaintenanceWindowStartTime")].isNull() && m_maintenance_window_start_time_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("Users")]);
    m_users_isSet = !json[QString("Users")].isNull() && m_users_isValid;

    m_data_replication_mode_isValid = ::OpenAPI::fromJsonValue(m_data_replication_mode, json[QString("DataReplicationMode")]);
    m_data_replication_mode_isSet = !json[QString("DataReplicationMode")].isNull() && m_data_replication_mode_isValid;

    m_data_replication_primary_broker_arn_isValid = ::OpenAPI::fromJsonValue(m_data_replication_primary_broker_arn, json[QString("DataReplicationPrimaryBrokerArn")]);
    m_data_replication_primary_broker_arn_isSet = !json[QString("DataReplicationPrimaryBrokerArn")].isNull() && m_data_replication_primary_broker_arn_isValid;
}

QString OAICreateBrokerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBrokerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_strategy.isSet()) {
        obj.insert(QString("AuthenticationStrategy"), ::OpenAPI::toJsonValue(m_authentication_strategy));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_broker_name_isSet) {
        obj.insert(QString("BrokerName"), ::OpenAPI::toJsonValue(m_broker_name));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_deployment_mode.isSet()) {
        obj.insert(QString("DeploymentMode"), ::OpenAPI::toJsonValue(m_deployment_mode));
    }
    if (m_encryption_options.isSet()) {
        obj.insert(QString("EncryptionOptions"), ::OpenAPI::toJsonValue(m_encryption_options));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("EngineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_host_instance_type_isSet) {
        obj.insert(QString("HostInstanceType"), ::OpenAPI::toJsonValue(m_host_instance_type));
    }
    if (m_ldap_server_metadata.isSet()) {
        obj.insert(QString("LdapServerMetadata"), ::OpenAPI::toJsonValue(m_ldap_server_metadata));
    }
    if (m_logs.isSet()) {
        obj.insert(QString("Logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_maintenance_window_start_time.isSet()) {
        obj.insert(QString("MaintenanceWindowStartTime"), ::OpenAPI::toJsonValue(m_maintenance_window_start_time));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_storage_type.isSet()) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_users.isSet()) {
        obj.insert(QString("Users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_data_replication_mode.isSet()) {
        obj.insert(QString("DataReplicationMode"), ::OpenAPI::toJsonValue(m_data_replication_mode));
    }
    if (m_data_replication_primary_broker_arn_isSet) {
        obj.insert(QString("DataReplicationPrimaryBrokerArn"), ::OpenAPI::toJsonValue(m_data_replication_primary_broker_arn));
    }
    return obj;
}

OAIAuthenticationStrategy OAICreateBrokerRequest::getAuthenticationStrategy() const {
    return m_authentication_strategy;
}
void OAICreateBrokerRequest::setAuthenticationStrategy(const OAIAuthenticationStrategy &authentication_strategy) {
    m_authentication_strategy = authentication_strategy;
    m_authentication_strategy_isSet = true;
}

bool OAICreateBrokerRequest::is_authentication_strategy_Set() const{
    return m_authentication_strategy_isSet;
}

bool OAICreateBrokerRequest::is_authentication_strategy_Valid() const{
    return m_authentication_strategy_isValid;
}

bool OAICreateBrokerRequest::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAICreateBrokerRequest::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAICreateBrokerRequest::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAICreateBrokerRequest::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

QString OAICreateBrokerRequest::getBrokerName() const {
    return m_broker_name;
}
void OAICreateBrokerRequest::setBrokerName(const QString &broker_name) {
    m_broker_name = broker_name;
    m_broker_name_isSet = true;
}

bool OAICreateBrokerRequest::is_broker_name_Set() const{
    return m_broker_name_isSet;
}

bool OAICreateBrokerRequest::is_broker_name_Valid() const{
    return m_broker_name_isValid;
}

OAICreateBrokerRequest_Configuration OAICreateBrokerRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateBrokerRequest::setConfiguration(const OAICreateBrokerRequest_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateBrokerRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateBrokerRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICreateBrokerRequest::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateBrokerRequest::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateBrokerRequest::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateBrokerRequest::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

OAIDeploymentMode OAICreateBrokerRequest::getDeploymentMode() const {
    return m_deployment_mode;
}
void OAICreateBrokerRequest::setDeploymentMode(const OAIDeploymentMode &deployment_mode) {
    m_deployment_mode = deployment_mode;
    m_deployment_mode_isSet = true;
}

bool OAICreateBrokerRequest::is_deployment_mode_Set() const{
    return m_deployment_mode_isSet;
}

bool OAICreateBrokerRequest::is_deployment_mode_Valid() const{
    return m_deployment_mode_isValid;
}

OAIDescribeBrokerResponse_EncryptionOptions OAICreateBrokerRequest::getEncryptionOptions() const {
    return m_encryption_options;
}
void OAICreateBrokerRequest::setEncryptionOptions(const OAIDescribeBrokerResponse_EncryptionOptions &encryption_options) {
    m_encryption_options = encryption_options;
    m_encryption_options_isSet = true;
}

bool OAICreateBrokerRequest::is_encryption_options_Set() const{
    return m_encryption_options_isSet;
}

bool OAICreateBrokerRequest::is_encryption_options_Valid() const{
    return m_encryption_options_isValid;
}

OAIEngineType OAICreateBrokerRequest::getEngineType() const {
    return m_engine_type;
}
void OAICreateBrokerRequest::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAICreateBrokerRequest::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAICreateBrokerRequest::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAICreateBrokerRequest::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateBrokerRequest::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateBrokerRequest::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateBrokerRequest::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAICreateBrokerRequest::getHostInstanceType() const {
    return m_host_instance_type;
}
void OAICreateBrokerRequest::setHostInstanceType(const QString &host_instance_type) {
    m_host_instance_type = host_instance_type;
    m_host_instance_type_isSet = true;
}

bool OAICreateBrokerRequest::is_host_instance_type_Set() const{
    return m_host_instance_type_isSet;
}

bool OAICreateBrokerRequest::is_host_instance_type_Valid() const{
    return m_host_instance_type_isValid;
}

OAICreateBrokerRequest_LdapServerMetadata OAICreateBrokerRequest::getLdapServerMetadata() const {
    return m_ldap_server_metadata;
}
void OAICreateBrokerRequest::setLdapServerMetadata(const OAICreateBrokerRequest_LdapServerMetadata &ldap_server_metadata) {
    m_ldap_server_metadata = ldap_server_metadata;
    m_ldap_server_metadata_isSet = true;
}

bool OAICreateBrokerRequest::is_ldap_server_metadata_Set() const{
    return m_ldap_server_metadata_isSet;
}

bool OAICreateBrokerRequest::is_ldap_server_metadata_Valid() const{
    return m_ldap_server_metadata_isValid;
}

OAICreateBrokerRequest_Logs OAICreateBrokerRequest::getLogs() const {
    return m_logs;
}
void OAICreateBrokerRequest::setLogs(const OAICreateBrokerRequest_Logs &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAICreateBrokerRequest::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAICreateBrokerRequest::is_logs_Valid() const{
    return m_logs_isValid;
}

OAIDescribeBrokerResponse_MaintenanceWindowStartTime OAICreateBrokerRequest::getMaintenanceWindowStartTime() const {
    return m_maintenance_window_start_time;
}
void OAICreateBrokerRequest::setMaintenanceWindowStartTime(const OAIDescribeBrokerResponse_MaintenanceWindowStartTime &maintenance_window_start_time) {
    m_maintenance_window_start_time = maintenance_window_start_time;
    m_maintenance_window_start_time_isSet = true;
}

bool OAICreateBrokerRequest::is_maintenance_window_start_time_Set() const{
    return m_maintenance_window_start_time_isSet;
}

bool OAICreateBrokerRequest::is_maintenance_window_start_time_Valid() const{
    return m_maintenance_window_start_time_isValid;
}

bool OAICreateBrokerRequest::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAICreateBrokerRequest::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAICreateBrokerRequest::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAICreateBrokerRequest::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList OAICreateBrokerRequest::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateBrokerRequest::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateBrokerRequest::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateBrokerRequest::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIBrokerStorageType OAICreateBrokerRequest::getStorageType() const {
    return m_storage_type;
}
void OAICreateBrokerRequest::setStorageType(const OAIBrokerStorageType &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAICreateBrokerRequest::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAICreateBrokerRequest::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QList OAICreateBrokerRequest::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateBrokerRequest::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateBrokerRequest::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateBrokerRequest::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QMap OAICreateBrokerRequest::getTags() const {
    return m_tags;
}
void OAICreateBrokerRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateBrokerRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateBrokerRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateBrokerRequest::getUsers() const {
    return m_users;
}
void OAICreateBrokerRequest::setUsers(const QList &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAICreateBrokerRequest::is_users_Set() const{
    return m_users_isSet;
}

bool OAICreateBrokerRequest::is_users_Valid() const{
    return m_users_isValid;
}

OAIDataReplicationMode OAICreateBrokerRequest::getDataReplicationMode() const {
    return m_data_replication_mode;
}
void OAICreateBrokerRequest::setDataReplicationMode(const OAIDataReplicationMode &data_replication_mode) {
    m_data_replication_mode = data_replication_mode;
    m_data_replication_mode_isSet = true;
}

bool OAICreateBrokerRequest::is_data_replication_mode_Set() const{
    return m_data_replication_mode_isSet;
}

bool OAICreateBrokerRequest::is_data_replication_mode_Valid() const{
    return m_data_replication_mode_isValid;
}

QString OAICreateBrokerRequest::getDataReplicationPrimaryBrokerArn() const {
    return m_data_replication_primary_broker_arn;
}
void OAICreateBrokerRequest::setDataReplicationPrimaryBrokerArn(const QString &data_replication_primary_broker_arn) {
    m_data_replication_primary_broker_arn = data_replication_primary_broker_arn;
    m_data_replication_primary_broker_arn_isSet = true;
}

bool OAICreateBrokerRequest::is_data_replication_primary_broker_arn_Set() const{
    return m_data_replication_primary_broker_arn_isSet;
}

bool OAICreateBrokerRequest::is_data_replication_primary_broker_arn_Valid() const{
    return m_data_replication_primary_broker_arn_isValid;
}

bool OAICreateBrokerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_server_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_primary_broker_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBrokerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_minor_version_upgrade_isValid && m_broker_name_isValid && m_deployment_mode_isValid && m_engine_type_isValid && m_engine_version_isValid && m_host_instance_type_isValid && m_publicly_accessible_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
