/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConfigurationResponse::OAICreateConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConfigurationResponse::OAICreateConfigurationResponse() {
    this->initializeModel();
}

OAICreateConfigurationResponse::~OAICreateConfigurationResponse() {}

void OAICreateConfigurationResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_authentication_strategy_isSet = false;
    m_authentication_strategy_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_revision_isSet = false;
    m_latest_revision_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_authentication_strategy_isValid = ::OpenAPI::fromJsonValue(m_authentication_strategy, json[QString("AuthenticationStrategy")]);
    m_authentication_strategy_isSet = !json[QString("AuthenticationStrategy")].isNull() && m_authentication_strategy_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_latest_revision_isValid = ::OpenAPI::fromJsonValue(m_latest_revision, json[QString("LatestRevision")]);
    m_latest_revision_isSet = !json[QString("LatestRevision")].isNull() && m_latest_revision_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAICreateConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_authentication_strategy.isSet()) {
        obj.insert(QString("AuthenticationStrategy"), ::OpenAPI::toJsonValue(m_authentication_strategy));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_revision.isSet()) {
        obj.insert(QString("LatestRevision"), ::OpenAPI::toJsonValue(m_latest_revision));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateConfigurationResponse::getArn() const {
    return m_arn;
}
void OAICreateConfigurationResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateConfigurationResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateConfigurationResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAuthenticationStrategy OAICreateConfigurationResponse::getAuthenticationStrategy() const {
    return m_authentication_strategy;
}
void OAICreateConfigurationResponse::setAuthenticationStrategy(const OAIAuthenticationStrategy &authentication_strategy) {
    m_authentication_strategy = authentication_strategy;
    m_authentication_strategy_isSet = true;
}

bool OAICreateConfigurationResponse::is_authentication_strategy_Set() const{
    return m_authentication_strategy_isSet;
}

bool OAICreateConfigurationResponse::is_authentication_strategy_Valid() const{
    return m_authentication_strategy_isValid;
}

QDateTime OAICreateConfigurationResponse::getCreated() const {
    return m_created;
}
void OAICreateConfigurationResponse::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICreateConfigurationResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAICreateConfigurationResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICreateConfigurationResponse::getId() const {
    return m_id;
}
void OAICreateConfigurationResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateConfigurationResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateConfigurationResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAICreateConfigurationResponse_LatestRevision OAICreateConfigurationResponse::getLatestRevision() const {
    return m_latest_revision;
}
void OAICreateConfigurationResponse::setLatestRevision(const OAICreateConfigurationResponse_LatestRevision &latest_revision) {
    m_latest_revision = latest_revision;
    m_latest_revision_isSet = true;
}

bool OAICreateConfigurationResponse::is_latest_revision_Set() const{
    return m_latest_revision_isSet;
}

bool OAICreateConfigurationResponse::is_latest_revision_Valid() const{
    return m_latest_revision_isValid;
}

QString OAICreateConfigurationResponse::getName() const {
    return m_name;
}
void OAICreateConfigurationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConfigurationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConfigurationResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_revision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
