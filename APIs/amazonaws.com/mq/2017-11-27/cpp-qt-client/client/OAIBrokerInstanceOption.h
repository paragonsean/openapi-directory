/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBrokerInstanceOption.h
 *
 * Option for host instance type.
 */

#ifndef OAIBrokerInstanceOption_H
#define OAIBrokerInstanceOption_H

#include <QJsonObject>

#include "OAIBrokerStorageType.h"
#include "OAIEngineType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBrokerInstanceOption : public OAIObject {
public:
    OAIBrokerInstanceOption();
    OAIBrokerInstanceOption(QString json);
    ~OAIBrokerInstanceOption() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    OAIEngineType getEngineType() const;
    void setEngineType(const OAIEngineType &engine_type);
    bool is_engine_type_Set() const;
    bool is_engine_type_Valid() const;

    QString getHostInstanceType() const;
    void setHostInstanceType(const QString &host_instance_type);
    bool is_host_instance_type_Set() const;
    bool is_host_instance_type_Valid() const;

    OAIBrokerStorageType getStorageType() const;
    void setStorageType(const OAIBrokerStorageType &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QList getSupportedDeploymentModes() const;
    void setSupportedDeploymentModes(const QList &supported_deployment_modes);
    bool is_supported_deployment_modes_Set() const;
    bool is_supported_deployment_modes_Valid() const;

    QList getSupportedEngineVersions() const;
    void setSupportedEngineVersions(const QList &supported_engine_versions);
    bool is_supported_engine_versions_Set() const;
    bool is_supported_engine_versions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    OAIEngineType m_engine_type;
    bool m_engine_type_isSet;
    bool m_engine_type_isValid;

    QString m_host_instance_type;
    bool m_host_instance_type_isSet;
    bool m_host_instance_type_isValid;

    OAIBrokerStorageType m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QList m_supported_deployment_modes;
    bool m_supported_deployment_modes_isSet;
    bool m_supported_deployment_modes_isValid;

    QList m_supported_engine_versions;
    bool m_supported_engine_versions_isSet;
    bool m_supported_engine_versions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBrokerInstanceOption)

#endif // OAIBrokerInstanceOption_H
