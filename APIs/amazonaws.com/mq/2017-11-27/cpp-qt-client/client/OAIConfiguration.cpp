/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguration::OAIConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguration::OAIConfiguration() {
    this->initializeModel();
}

OAIConfiguration::~OAIConfiguration() {}

void OAIConfiguration::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_authentication_strategy_isSet = false;
    m_authentication_strategy_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_revision_isSet = false;
    m_latest_revision_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguration::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_authentication_strategy_isValid = ::OpenAPI::fromJsonValue(m_authentication_strategy, json[QString("AuthenticationStrategy")]);
    m_authentication_strategy_isSet = !json[QString("AuthenticationStrategy")].isNull() && m_authentication_strategy_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("EngineType")]);
    m_engine_type_isSet = !json[QString("EngineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_latest_revision_isValid = ::OpenAPI::fromJsonValue(m_latest_revision, json[QString("LatestRevision")]);
    m_latest_revision_isSet = !json[QString("LatestRevision")].isNull() && m_latest_revision_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_authentication_strategy.isSet()) {
        obj.insert(QString("AuthenticationStrategy"), ::OpenAPI::toJsonValue(m_authentication_strategy));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("EngineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_revision.isSet()) {
        obj.insert(QString("LatestRevision"), ::OpenAPI::toJsonValue(m_latest_revision));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIConfiguration::getArn() const {
    return m_arn;
}
void OAIConfiguration::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIConfiguration::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIConfiguration::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAuthenticationStrategy OAIConfiguration::getAuthenticationStrategy() const {
    return m_authentication_strategy;
}
void OAIConfiguration::setAuthenticationStrategy(const OAIAuthenticationStrategy &authentication_strategy) {
    m_authentication_strategy = authentication_strategy;
    m_authentication_strategy_isSet = true;
}

bool OAIConfiguration::is_authentication_strategy_Set() const{
    return m_authentication_strategy_isSet;
}

bool OAIConfiguration::is_authentication_strategy_Valid() const{
    return m_authentication_strategy_isValid;
}

QDateTime OAIConfiguration::getCreated() const {
    return m_created;
}
void OAIConfiguration::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIConfiguration::is_created_Set() const{
    return m_created_isSet;
}

bool OAIConfiguration::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIConfiguration::getDescription() const {
    return m_description;
}
void OAIConfiguration::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConfiguration::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConfiguration::is_description_Valid() const{
    return m_description_isValid;
}

OAIEngineType OAIConfiguration::getEngineType() const {
    return m_engine_type;
}
void OAIConfiguration::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIConfiguration::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIConfiguration::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIConfiguration::getEngineVersion() const {
    return m_engine_version;
}
void OAIConfiguration::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIConfiguration::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIConfiguration::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIConfiguration::getId() const {
    return m_id;
}
void OAIConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

OAIDescribeConfigurationResponse_LatestRevision OAIConfiguration::getLatestRevision() const {
    return m_latest_revision;
}
void OAIConfiguration::setLatestRevision(const OAIDescribeConfigurationResponse_LatestRevision &latest_revision) {
    m_latest_revision = latest_revision;
    m_latest_revision_isSet = true;
}

bool OAIConfiguration::is_latest_revision_Set() const{
    return m_latest_revision_isSet;
}

bool OAIConfiguration::is_latest_revision_Valid() const{
    return m_latest_revision_isValid;
}

QString OAIConfiguration::getName() const {
    return m_name;
}
void OAIConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAIConfiguration::getTags() const {
    return m_tags;
}
void OAIConfiguration::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConfiguration::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConfiguration::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_revision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_authentication_strategy_isValid && m_created_isValid && m_description_isValid && m_engine_type_isValid && m_engine_version_isValid && m_id_isValid && m_latest_revision_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
