/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserRequest::OAICreateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserRequest::OAICreateUserRequest() {
    this->initializeModel();
}

OAICreateUserRequest::~OAICreateUserRequest() {}

void OAICreateUserRequest::initializeModel() {

    m_console_access_isSet = false;
    m_console_access_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_replication_user_isSet = false;
    m_replication_user_isValid = false;
}

void OAICreateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserRequest::fromJsonObject(QJsonObject json) {

    m_console_access_isValid = ::OpenAPI::fromJsonValue(m_console_access, json[QString("ConsoleAccess")]);
    m_console_access_isSet = !json[QString("ConsoleAccess")].isNull() && m_console_access_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("Groups")]);
    m_groups_isSet = !json[QString("Groups")].isNull() && m_groups_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_replication_user_isValid = ::OpenAPI::fromJsonValue(m_replication_user, json[QString("ReplicationUser")]);
    m_replication_user_isSet = !json[QString("ReplicationUser")].isNull() && m_replication_user_isValid;
}

QString OAICreateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_console_access_isSet) {
        obj.insert(QString("ConsoleAccess"), ::OpenAPI::toJsonValue(m_console_access));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("Groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_replication_user_isSet) {
        obj.insert(QString("ReplicationUser"), ::OpenAPI::toJsonValue(m_replication_user));
    }
    return obj;
}

bool OAICreateUserRequest::getConsoleAccess() const {
    return m_console_access;
}
void OAICreateUserRequest::setConsoleAccess(const bool &console_access) {
    m_console_access = console_access;
    m_console_access_isSet = true;
}

bool OAICreateUserRequest::is_console_access_Set() const{
    return m_console_access_isSet;
}

bool OAICreateUserRequest::is_console_access_Valid() const{
    return m_console_access_isValid;
}

QList OAICreateUserRequest::getGroups() const {
    return m_groups;
}
void OAICreateUserRequest::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAICreateUserRequest::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAICreateUserRequest::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAICreateUserRequest::getPassword() const {
    return m_password;
}
void OAICreateUserRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateUserRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateUserRequest::is_password_Valid() const{
    return m_password_isValid;
}

bool OAICreateUserRequest::getReplicationUser() const {
    return m_replication_user;
}
void OAICreateUserRequest::setReplicationUser(const bool &replication_user) {
    m_replication_user = replication_user;
    m_replication_user_isSet = true;
}

bool OAICreateUserRequest::is_replication_user_Set() const{
    return m_replication_user_isSet;
}

bool OAICreateUserRequest::is_replication_user_Valid() const{
    return m_replication_user_isValid;
}

bool OAICreateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_console_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_password_isValid && true;
}

} // namespace OpenAPI
