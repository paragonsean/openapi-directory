/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrokerInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrokerInstance::OAIBrokerInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrokerInstance::OAIBrokerInstance() {
    this->initializeModel();
}

OAIBrokerInstance::~OAIBrokerInstance() {}

void OAIBrokerInstance::initializeModel() {

    m_console_url_isSet = false;
    m_console_url_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;
}

void OAIBrokerInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrokerInstance::fromJsonObject(QJsonObject json) {

    m_console_url_isValid = ::OpenAPI::fromJsonValue(m_console_url, json[QString("ConsoleURL")]);
    m_console_url_isSet = !json[QString("ConsoleURL")].isNull() && m_console_url_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;
}

QString OAIBrokerInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrokerInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_console_url_isSet) {
        obj.insert(QString("ConsoleURL"), ::OpenAPI::toJsonValue(m_console_url));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    return obj;
}

QString OAIBrokerInstance::getConsoleUrl() const {
    return m_console_url;
}
void OAIBrokerInstance::setConsoleUrl(const QString &console_url) {
    m_console_url = console_url;
    m_console_url_isSet = true;
}

bool OAIBrokerInstance::is_console_url_Set() const{
    return m_console_url_isSet;
}

bool OAIBrokerInstance::is_console_url_Valid() const{
    return m_console_url_isValid;
}

QList OAIBrokerInstance::getEndpoints() const {
    return m_endpoints;
}
void OAIBrokerInstance::setEndpoints(const QList &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIBrokerInstance::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIBrokerInstance::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIBrokerInstance::getIpAddress() const {
    return m_ip_address;
}
void OAIBrokerInstance::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIBrokerInstance::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIBrokerInstance::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAIBrokerInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_console_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrokerInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
