/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBrokerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBrokerResponse::OAIUpdateBrokerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBrokerResponse::OAIUpdateBrokerResponse() {
    this->initializeModel();
}

OAIUpdateBrokerResponse::~OAIUpdateBrokerResponse() {}

void OAIUpdateBrokerResponse::initializeModel() {

    m_authentication_strategy_isSet = false;
    m_authentication_strategy_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_broker_id_isSet = false;
    m_broker_id_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_host_instance_type_isSet = false;
    m_host_instance_type_isValid = false;

    m_ldap_server_metadata_isSet = false;
    m_ldap_server_metadata_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_maintenance_window_start_time_isSet = false;
    m_maintenance_window_start_time_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_data_replication_metadata_isSet = false;
    m_data_replication_metadata_isValid = false;

    m_data_replication_mode_isSet = false;
    m_data_replication_mode_isValid = false;

    m_pending_data_replication_metadata_isSet = false;
    m_pending_data_replication_metadata_isValid = false;

    m_pending_data_replication_mode_isSet = false;
    m_pending_data_replication_mode_isValid = false;
}

void OAIUpdateBrokerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBrokerResponse::fromJsonObject(QJsonObject json) {

    m_authentication_strategy_isValid = ::OpenAPI::fromJsonValue(m_authentication_strategy, json[QString("AuthenticationStrategy")]);
    m_authentication_strategy_isSet = !json[QString("AuthenticationStrategy")].isNull() && m_authentication_strategy_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_broker_id_isValid = ::OpenAPI::fromJsonValue(m_broker_id, json[QString("BrokerId")]);
    m_broker_id_isSet = !json[QString("BrokerId")].isNull() && m_broker_id_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_host_instance_type_isValid = ::OpenAPI::fromJsonValue(m_host_instance_type, json[QString("HostInstanceType")]);
    m_host_instance_type_isSet = !json[QString("HostInstanceType")].isNull() && m_host_instance_type_isValid;

    m_ldap_server_metadata_isValid = ::OpenAPI::fromJsonValue(m_ldap_server_metadata, json[QString("LdapServerMetadata")]);
    m_ldap_server_metadata_isSet = !json[QString("LdapServerMetadata")].isNull() && m_ldap_server_metadata_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("Logs")]);
    m_logs_isSet = !json[QString("Logs")].isNull() && m_logs_isValid;

    m_maintenance_window_start_time_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window_start_time, json[QString("MaintenanceWindowStartTime")]);
    m_maintenance_window_start_time_isSet = !json[QString("MaintenanceWindowStartTime")].isNull() && m_maintenance_window_start_time_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_data_replication_metadata_isValid = ::OpenAPI::fromJsonValue(m_data_replication_metadata, json[QString("DataReplicationMetadata")]);
    m_data_replication_metadata_isSet = !json[QString("DataReplicationMetadata")].isNull() && m_data_replication_metadata_isValid;

    m_data_replication_mode_isValid = ::OpenAPI::fromJsonValue(m_data_replication_mode, json[QString("DataReplicationMode")]);
    m_data_replication_mode_isSet = !json[QString("DataReplicationMode")].isNull() && m_data_replication_mode_isValid;

    m_pending_data_replication_metadata_isValid = ::OpenAPI::fromJsonValue(m_pending_data_replication_metadata, json[QString("PendingDataReplicationMetadata")]);
    m_pending_data_replication_metadata_isSet = !json[QString("PendingDataReplicationMetadata")].isNull() && m_pending_data_replication_metadata_isValid;

    m_pending_data_replication_mode_isValid = ::OpenAPI::fromJsonValue(m_pending_data_replication_mode, json[QString("PendingDataReplicationMode")]);
    m_pending_data_replication_mode_isSet = !json[QString("PendingDataReplicationMode")].isNull() && m_pending_data_replication_mode_isValid;
}

QString OAIUpdateBrokerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBrokerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_strategy.isSet()) {
        obj.insert(QString("AuthenticationStrategy"), ::OpenAPI::toJsonValue(m_authentication_strategy));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_broker_id_isSet) {
        obj.insert(QString("BrokerId"), ::OpenAPI::toJsonValue(m_broker_id));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_host_instance_type_isSet) {
        obj.insert(QString("HostInstanceType"), ::OpenAPI::toJsonValue(m_host_instance_type));
    }
    if (m_ldap_server_metadata.isSet()) {
        obj.insert(QString("LdapServerMetadata"), ::OpenAPI::toJsonValue(m_ldap_server_metadata));
    }
    if (m_logs.isSet()) {
        obj.insert(QString("Logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_maintenance_window_start_time.isSet()) {
        obj.insert(QString("MaintenanceWindowStartTime"), ::OpenAPI::toJsonValue(m_maintenance_window_start_time));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_data_replication_metadata.isSet()) {
        obj.insert(QString("DataReplicationMetadata"), ::OpenAPI::toJsonValue(m_data_replication_metadata));
    }
    if (m_data_replication_mode.isSet()) {
        obj.insert(QString("DataReplicationMode"), ::OpenAPI::toJsonValue(m_data_replication_mode));
    }
    if (m_pending_data_replication_metadata.isSet()) {
        obj.insert(QString("PendingDataReplicationMetadata"), ::OpenAPI::toJsonValue(m_pending_data_replication_metadata));
    }
    if (m_pending_data_replication_mode.isSet()) {
        obj.insert(QString("PendingDataReplicationMode"), ::OpenAPI::toJsonValue(m_pending_data_replication_mode));
    }
    return obj;
}

OAIAuthenticationStrategy OAIUpdateBrokerResponse::getAuthenticationStrategy() const {
    return m_authentication_strategy;
}
void OAIUpdateBrokerResponse::setAuthenticationStrategy(const OAIAuthenticationStrategy &authentication_strategy) {
    m_authentication_strategy = authentication_strategy;
    m_authentication_strategy_isSet = true;
}

bool OAIUpdateBrokerResponse::is_authentication_strategy_Set() const{
    return m_authentication_strategy_isSet;
}

bool OAIUpdateBrokerResponse::is_authentication_strategy_Valid() const{
    return m_authentication_strategy_isValid;
}

bool OAIUpdateBrokerResponse::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAIUpdateBrokerResponse::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAIUpdateBrokerResponse::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAIUpdateBrokerResponse::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

QString OAIUpdateBrokerResponse::getBrokerId() const {
    return m_broker_id;
}
void OAIUpdateBrokerResponse::setBrokerId(const QString &broker_id) {
    m_broker_id = broker_id;
    m_broker_id_isSet = true;
}

bool OAIUpdateBrokerResponse::is_broker_id_Set() const{
    return m_broker_id_isSet;
}

bool OAIUpdateBrokerResponse::is_broker_id_Valid() const{
    return m_broker_id_isValid;
}

OAIUpdateBrokerResponse_Configuration OAIUpdateBrokerResponse::getConfiguration() const {
    return m_configuration;
}
void OAIUpdateBrokerResponse::setConfiguration(const OAIUpdateBrokerResponse_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIUpdateBrokerResponse::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIUpdateBrokerResponse::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIUpdateBrokerResponse::getEngineVersion() const {
    return m_engine_version;
}
void OAIUpdateBrokerResponse::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIUpdateBrokerResponse::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIUpdateBrokerResponse::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIUpdateBrokerResponse::getHostInstanceType() const {
    return m_host_instance_type;
}
void OAIUpdateBrokerResponse::setHostInstanceType(const QString &host_instance_type) {
    m_host_instance_type = host_instance_type;
    m_host_instance_type_isSet = true;
}

bool OAIUpdateBrokerResponse::is_host_instance_type_Set() const{
    return m_host_instance_type_isSet;
}

bool OAIUpdateBrokerResponse::is_host_instance_type_Valid() const{
    return m_host_instance_type_isValid;
}

OAIUpdateBrokerResponse_LdapServerMetadata OAIUpdateBrokerResponse::getLdapServerMetadata() const {
    return m_ldap_server_metadata;
}
void OAIUpdateBrokerResponse::setLdapServerMetadata(const OAIUpdateBrokerResponse_LdapServerMetadata &ldap_server_metadata) {
    m_ldap_server_metadata = ldap_server_metadata;
    m_ldap_server_metadata_isSet = true;
}

bool OAIUpdateBrokerResponse::is_ldap_server_metadata_Set() const{
    return m_ldap_server_metadata_isSet;
}

bool OAIUpdateBrokerResponse::is_ldap_server_metadata_Valid() const{
    return m_ldap_server_metadata_isValid;
}

OAIUpdateBrokerResponse_Logs OAIUpdateBrokerResponse::getLogs() const {
    return m_logs;
}
void OAIUpdateBrokerResponse::setLogs(const OAIUpdateBrokerResponse_Logs &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIUpdateBrokerResponse::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIUpdateBrokerResponse::is_logs_Valid() const{
    return m_logs_isValid;
}

OAIDescribeBrokerResponse_MaintenanceWindowStartTime OAIUpdateBrokerResponse::getMaintenanceWindowStartTime() const {
    return m_maintenance_window_start_time;
}
void OAIUpdateBrokerResponse::setMaintenanceWindowStartTime(const OAIDescribeBrokerResponse_MaintenanceWindowStartTime &maintenance_window_start_time) {
    m_maintenance_window_start_time = maintenance_window_start_time;
    m_maintenance_window_start_time_isSet = true;
}

bool OAIUpdateBrokerResponse::is_maintenance_window_start_time_Set() const{
    return m_maintenance_window_start_time_isSet;
}

bool OAIUpdateBrokerResponse::is_maintenance_window_start_time_Valid() const{
    return m_maintenance_window_start_time_isValid;
}

QList OAIUpdateBrokerResponse::getSecurityGroups() const {
    return m_security_groups;
}
void OAIUpdateBrokerResponse::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIUpdateBrokerResponse::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIUpdateBrokerResponse::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIDescribeBrokerResponse_DataReplicationMetadata OAIUpdateBrokerResponse::getDataReplicationMetadata() const {
    return m_data_replication_metadata;
}
void OAIUpdateBrokerResponse::setDataReplicationMetadata(const OAIDescribeBrokerResponse_DataReplicationMetadata &data_replication_metadata) {
    m_data_replication_metadata = data_replication_metadata;
    m_data_replication_metadata_isSet = true;
}

bool OAIUpdateBrokerResponse::is_data_replication_metadata_Set() const{
    return m_data_replication_metadata_isSet;
}

bool OAIUpdateBrokerResponse::is_data_replication_metadata_Valid() const{
    return m_data_replication_metadata_isValid;
}

OAIDataReplicationMode OAIUpdateBrokerResponse::getDataReplicationMode() const {
    return m_data_replication_mode;
}
void OAIUpdateBrokerResponse::setDataReplicationMode(const OAIDataReplicationMode &data_replication_mode) {
    m_data_replication_mode = data_replication_mode;
    m_data_replication_mode_isSet = true;
}

bool OAIUpdateBrokerResponse::is_data_replication_mode_Set() const{
    return m_data_replication_mode_isSet;
}

bool OAIUpdateBrokerResponse::is_data_replication_mode_Valid() const{
    return m_data_replication_mode_isValid;
}

OAIDescribeBrokerResponse_PendingDataReplicationMetadata OAIUpdateBrokerResponse::getPendingDataReplicationMetadata() const {
    return m_pending_data_replication_metadata;
}
void OAIUpdateBrokerResponse::setPendingDataReplicationMetadata(const OAIDescribeBrokerResponse_PendingDataReplicationMetadata &pending_data_replication_metadata) {
    m_pending_data_replication_metadata = pending_data_replication_metadata;
    m_pending_data_replication_metadata_isSet = true;
}

bool OAIUpdateBrokerResponse::is_pending_data_replication_metadata_Set() const{
    return m_pending_data_replication_metadata_isSet;
}

bool OAIUpdateBrokerResponse::is_pending_data_replication_metadata_Valid() const{
    return m_pending_data_replication_metadata_isValid;
}

OAIDataReplicationMode OAIUpdateBrokerResponse::getPendingDataReplicationMode() const {
    return m_pending_data_replication_mode;
}
void OAIUpdateBrokerResponse::setPendingDataReplicationMode(const OAIDataReplicationMode &pending_data_replication_mode) {
    m_pending_data_replication_mode = pending_data_replication_mode;
    m_pending_data_replication_mode_isSet = true;
}

bool OAIUpdateBrokerResponse::is_pending_data_replication_mode_Set() const{
    return m_pending_data_replication_mode_isSet;
}

bool OAIUpdateBrokerResponse::is_pending_data_replication_mode_Valid() const{
    return m_pending_data_replication_mode_isValid;
}

bool OAIUpdateBrokerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_server_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_data_replication_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_data_replication_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBrokerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
