/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns information about all brokers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:52.574212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrokerInstance {
  public static final String SERIALIZED_NAME_CONSOLE_U_R_L = "ConsoleURL";
  @SerializedName(SERIALIZED_NAME_CONSOLE_U_R_L)
  private String consoleURL;

  public static final String SERIALIZED_NAME_ENDPOINTS = "Endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List endpoints;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public BrokerInstance() {
  }

  public BrokerInstance consoleURL(String consoleURL) {
    this.consoleURL = consoleURL;
    return this;
  }

  /**
   * Get consoleURL
   * @return consoleURL
   */
  @javax.annotation.Nullable
  public String getConsoleURL() {
    return consoleURL;
  }

  public void setConsoleURL(String consoleURL) {
    this.consoleURL = consoleURL;
  }


  public BrokerInstance endpoints(List endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * Get endpoints
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List endpoints) {
    this.endpoints = endpoints;
  }


  public BrokerInstance ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrokerInstance brokerInstance = (BrokerInstance) o;
    return Objects.equals(this.consoleURL, brokerInstance.consoleURL) &&
        Objects.equals(this.endpoints, brokerInstance.endpoints) &&
        Objects.equals(this.ipAddress, brokerInstance.ipAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consoleURL, endpoints, ipAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrokerInstance {\n");
    sb.append("    consoleURL: ").append(toIndentedString(consoleURL)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConsoleURL");
    openapiFields.add("Endpoints");
    openapiFields.add("IpAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrokerInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrokerInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrokerInstance is not found in the empty JSON string", BrokerInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrokerInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrokerInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConsoleURL`
      if (jsonObj.get("ConsoleURL") != null && !jsonObj.get("ConsoleURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConsoleURL"));
      }
      // validate the optional field `Endpoints`
      if (jsonObj.get("Endpoints") != null && !jsonObj.get("Endpoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Endpoints"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrokerInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrokerInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrokerInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrokerInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<BrokerInstance>() {
           @Override
           public void write(JsonWriter out, BrokerInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrokerInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrokerInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrokerInstance
   * @throws IOException if the JSON string is invalid with respect to BrokerInstance
   */
  public static BrokerInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrokerInstance.class);
  }

  /**
   * Convert an instance of BrokerInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

