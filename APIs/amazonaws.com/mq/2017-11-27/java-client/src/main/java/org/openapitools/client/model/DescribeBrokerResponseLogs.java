/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LogsSummaryPending;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeBrokerResponseLogs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:52.574212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeBrokerResponseLogs {
  public static final String SERIALIZED_NAME_AUDIT = "Audit";
  @SerializedName(SERIALIZED_NAME_AUDIT)
  private Boolean audit;

  public static final String SERIALIZED_NAME_AUDIT_LOG_GROUP = "AuditLogGroup";
  @SerializedName(SERIALIZED_NAME_AUDIT_LOG_GROUP)
  private String auditLogGroup;

  public static final String SERIALIZED_NAME_GENERAL = "General";
  @SerializedName(SERIALIZED_NAME_GENERAL)
  private Boolean general;

  public static final String SERIALIZED_NAME_GENERAL_LOG_GROUP = "GeneralLogGroup";
  @SerializedName(SERIALIZED_NAME_GENERAL_LOG_GROUP)
  private String generalLogGroup;

  public static final String SERIALIZED_NAME_PENDING = "Pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private LogsSummaryPending pending;

  public DescribeBrokerResponseLogs() {
  }

  public DescribeBrokerResponseLogs audit(Boolean audit) {
    this.audit = audit;
    return this;
  }

  /**
   * Get audit
   * @return audit
   */
  @javax.annotation.Nullable
  public Boolean getAudit() {
    return audit;
  }

  public void setAudit(Boolean audit) {
    this.audit = audit;
  }


  public DescribeBrokerResponseLogs auditLogGroup(String auditLogGroup) {
    this.auditLogGroup = auditLogGroup;
    return this;
  }

  /**
   * Get auditLogGroup
   * @return auditLogGroup
   */
  @javax.annotation.Nullable
  public String getAuditLogGroup() {
    return auditLogGroup;
  }

  public void setAuditLogGroup(String auditLogGroup) {
    this.auditLogGroup = auditLogGroup;
  }


  public DescribeBrokerResponseLogs general(Boolean general) {
    this.general = general;
    return this;
  }

  /**
   * Get general
   * @return general
   */
  @javax.annotation.Nonnull
  public Boolean getGeneral() {
    return general;
  }

  public void setGeneral(Boolean general) {
    this.general = general;
  }


  public DescribeBrokerResponseLogs generalLogGroup(String generalLogGroup) {
    this.generalLogGroup = generalLogGroup;
    return this;
  }

  /**
   * Get generalLogGroup
   * @return generalLogGroup
   */
  @javax.annotation.Nonnull
  public String getGeneralLogGroup() {
    return generalLogGroup;
  }

  public void setGeneralLogGroup(String generalLogGroup) {
    this.generalLogGroup = generalLogGroup;
  }


  public DescribeBrokerResponseLogs pending(LogsSummaryPending pending) {
    this.pending = pending;
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nullable
  public LogsSummaryPending getPending() {
    return pending;
  }

  public void setPending(LogsSummaryPending pending) {
    this.pending = pending;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeBrokerResponseLogs describeBrokerResponseLogs = (DescribeBrokerResponseLogs) o;
    return Objects.equals(this.audit, describeBrokerResponseLogs.audit) &&
        Objects.equals(this.auditLogGroup, describeBrokerResponseLogs.auditLogGroup) &&
        Objects.equals(this.general, describeBrokerResponseLogs.general) &&
        Objects.equals(this.generalLogGroup, describeBrokerResponseLogs.generalLogGroup) &&
        Objects.equals(this.pending, describeBrokerResponseLogs.pending);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audit, auditLogGroup, general, generalLogGroup, pending);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeBrokerResponseLogs {\n");
    sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
    sb.append("    auditLogGroup: ").append(toIndentedString(auditLogGroup)).append("\n");
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    generalLogGroup: ").append(toIndentedString(generalLogGroup)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Audit");
    openapiFields.add("AuditLogGroup");
    openapiFields.add("General");
    openapiFields.add("GeneralLogGroup");
    openapiFields.add("Pending");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("General");
    openapiRequiredFields.add("GeneralLogGroup");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeBrokerResponseLogs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeBrokerResponseLogs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeBrokerResponseLogs is not found in the empty JSON string", DescribeBrokerResponseLogs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeBrokerResponseLogs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeBrokerResponseLogs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeBrokerResponseLogs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Audit`
      if (jsonObj.get("Audit") != null && !jsonObj.get("Audit").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Audit"));
      }
      // validate the optional field `AuditLogGroup`
      if (jsonObj.get("AuditLogGroup") != null && !jsonObj.get("AuditLogGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuditLogGroup"));
      }
      // validate the required field `General`
      Boolean.validateJsonElement(jsonObj.get("General"));
      // validate the required field `GeneralLogGroup`
      String.validateJsonElement(jsonObj.get("GeneralLogGroup"));
      // validate the optional field `Pending`
      if (jsonObj.get("Pending") != null && !jsonObj.get("Pending").isJsonNull()) {
        LogsSummaryPending.validateJsonElement(jsonObj.get("Pending"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeBrokerResponseLogs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeBrokerResponseLogs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeBrokerResponseLogs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeBrokerResponseLogs.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeBrokerResponseLogs>() {
           @Override
           public void write(JsonWriter out, DescribeBrokerResponseLogs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeBrokerResponseLogs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeBrokerResponseLogs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeBrokerResponseLogs
   * @throws IOException if the JSON string is invalid with respect to DescribeBrokerResponseLogs
   */
  public static DescribeBrokerResponseLogs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeBrokerResponseLogs.class);
  }

  /**
   * Convert an instance of DescribeBrokerResponseLogs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

