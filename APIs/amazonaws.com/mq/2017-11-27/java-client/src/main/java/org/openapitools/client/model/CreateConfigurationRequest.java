/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:52.574212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfigurationRequest {
  /**
   * Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
   */
  @JsonAdapter(AuthenticationStrategyEnum.Adapter.class)
  public enum AuthenticationStrategyEnum {
    SIMPLE("SIMPLE"),
    
    LDAP("LDAP");

    private String value;

    AuthenticationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationStrategyEnum fromValue(String value) {
      for (AuthenticationStrategyEnum b : AuthenticationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_STRATEGY = "authenticationStrategy";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_STRATEGY)
  private AuthenticationStrategyEnum authenticationStrategy;

  /**
   * The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
   */
  @JsonAdapter(EngineTypeEnum.Adapter.class)
  public enum EngineTypeEnum {
    ACTIVEMQ("ACTIVEMQ"),
    
    RABBITMQ("RABBITMQ");

    private String value;

    EngineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineTypeEnum fromValue(String value) {
      for (EngineTypeEnum b : EngineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EngineTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGINE_TYPE = "engineType";
  @SerializedName(SERIALIZED_NAME_ENGINE_TYPE)
  private EngineTypeEnum engineType;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "engineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateConfigurationRequest() {
  }

  public CreateConfigurationRequest authenticationStrategy(AuthenticationStrategyEnum authenticationStrategy) {
    this.authenticationStrategy = authenticationStrategy;
    return this;
  }

  /**
   * Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
   * @return authenticationStrategy
   */
  @javax.annotation.Nullable
  public AuthenticationStrategyEnum getAuthenticationStrategy() {
    return authenticationStrategy;
  }

  public void setAuthenticationStrategy(AuthenticationStrategyEnum authenticationStrategy) {
    this.authenticationStrategy = authenticationStrategy;
  }


  public CreateConfigurationRequest engineType(EngineTypeEnum engineType) {
    this.engineType = engineType;
    return this;
  }

  /**
   * The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
   * @return engineType
   */
  @javax.annotation.Nonnull
  public EngineTypeEnum getEngineType() {
    return engineType;
  }

  public void setEngineType(EngineTypeEnum engineType) {
    this.engineType = engineType;
  }


  public CreateConfigurationRequest engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Required. The broker engine&#39;s version. For a list of supported engine versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\&quot;&gt;Supported engines&lt;/a&gt;.
   * @return engineVersion
   */
  @javax.annotation.Nonnull
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public CreateConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConfigurationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateConfigurationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Create tags when creating the configuration.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfigurationRequest createConfigurationRequest = (CreateConfigurationRequest) o;
    return Objects.equals(this.authenticationStrategy, createConfigurationRequest.authenticationStrategy) &&
        Objects.equals(this.engineType, createConfigurationRequest.engineType) &&
        Objects.equals(this.engineVersion, createConfigurationRequest.engineVersion) &&
        Objects.equals(this.name, createConfigurationRequest.name) &&
        Objects.equals(this.tags, createConfigurationRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationStrategy, engineType, engineVersion, name, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfigurationRequest {\n");
    sb.append("    authenticationStrategy: ").append(toIndentedString(authenticationStrategy)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationStrategy");
    openapiFields.add("engineType");
    openapiFields.add("engineVersion");
    openapiFields.add("name");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engineType");
    openapiRequiredFields.add("engineVersion");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfigurationRequest is not found in the empty JSON string", CreateConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationStrategy") != null && !jsonObj.get("authenticationStrategy").isJsonNull()) && !jsonObj.get("authenticationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationStrategy").toString()));
      }
      // validate the optional field `authenticationStrategy`
      if (jsonObj.get("authenticationStrategy") != null && !jsonObj.get("authenticationStrategy").isJsonNull()) {
        AuthenticationStrategyEnum.validateJsonElement(jsonObj.get("authenticationStrategy"));
      }
      if (!jsonObj.get("engineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineType").toString()));
      }
      // validate the required field `engineType`
      EngineTypeEnum.validateJsonElement(jsonObj.get("engineType"));
      if (!jsonObj.get("engineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineVersion").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, CreateConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConfigurationRequest
   */
  public static CreateConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfigurationRequest.class);
  }

  /**
   * Convert an instance of CreateConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

