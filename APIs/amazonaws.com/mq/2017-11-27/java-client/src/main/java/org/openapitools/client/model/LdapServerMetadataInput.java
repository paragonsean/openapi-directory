/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.&lt;/p&gt; &lt;important&gt;&lt;p&gt;Does not apply to RabbitMQ brokers.&lt;/p&gt;&lt;/important&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:52.574212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LdapServerMetadataInput {
  public static final String SERIALIZED_NAME_HOSTS = "Hosts";
  @SerializedName(SERIALIZED_NAME_HOSTS)
  private List hosts;

  public static final String SERIALIZED_NAME_ROLE_BASE = "RoleBase";
  @SerializedName(SERIALIZED_NAME_ROLE_BASE)
  private String roleBase;

  public static final String SERIALIZED_NAME_ROLE_NAME = "RoleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_ROLE_SEARCH_MATCHING = "RoleSearchMatching";
  @SerializedName(SERIALIZED_NAME_ROLE_SEARCH_MATCHING)
  private String roleSearchMatching;

  public static final String SERIALIZED_NAME_ROLE_SEARCH_SUBTREE = "RoleSearchSubtree";
  @SerializedName(SERIALIZED_NAME_ROLE_SEARCH_SUBTREE)
  private Boolean roleSearchSubtree;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_PASSWORD = "ServiceAccountPassword";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_PASSWORD)
  private String serviceAccountPassword;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_USERNAME = "ServiceAccountUsername";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_USERNAME)
  private String serviceAccountUsername;

  public static final String SERIALIZED_NAME_USER_BASE = "UserBase";
  @SerializedName(SERIALIZED_NAME_USER_BASE)
  private String userBase;

  public static final String SERIALIZED_NAME_USER_ROLE_NAME = "UserRoleName";
  @SerializedName(SERIALIZED_NAME_USER_ROLE_NAME)
  private String userRoleName;

  public static final String SERIALIZED_NAME_USER_SEARCH_MATCHING = "UserSearchMatching";
  @SerializedName(SERIALIZED_NAME_USER_SEARCH_MATCHING)
  private String userSearchMatching;

  public static final String SERIALIZED_NAME_USER_SEARCH_SUBTREE = "UserSearchSubtree";
  @SerializedName(SERIALIZED_NAME_USER_SEARCH_SUBTREE)
  private Boolean userSearchSubtree;

  public LdapServerMetadataInput() {
  }

  public LdapServerMetadataInput hosts(List hosts) {
    this.hosts = hosts;
    return this;
  }

  /**
   * Get hosts
   * @return hosts
   */
  @javax.annotation.Nonnull
  public List getHosts() {
    return hosts;
  }

  public void setHosts(List hosts) {
    this.hosts = hosts;
  }


  public LdapServerMetadataInput roleBase(String roleBase) {
    this.roleBase = roleBase;
    return this;
  }

  /**
   * Get roleBase
   * @return roleBase
   */
  @javax.annotation.Nonnull
  public String getRoleBase() {
    return roleBase;
  }

  public void setRoleBase(String roleBase) {
    this.roleBase = roleBase;
  }


  public LdapServerMetadataInput roleName(String roleName) {
    this.roleName = roleName;
    return this;
  }

  /**
   * Get roleName
   * @return roleName
   */
  @javax.annotation.Nullable
  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }


  public LdapServerMetadataInput roleSearchMatching(String roleSearchMatching) {
    this.roleSearchMatching = roleSearchMatching;
    return this;
  }

  /**
   * Get roleSearchMatching
   * @return roleSearchMatching
   */
  @javax.annotation.Nonnull
  public String getRoleSearchMatching() {
    return roleSearchMatching;
  }

  public void setRoleSearchMatching(String roleSearchMatching) {
    this.roleSearchMatching = roleSearchMatching;
  }


  public LdapServerMetadataInput roleSearchSubtree(Boolean roleSearchSubtree) {
    this.roleSearchSubtree = roleSearchSubtree;
    return this;
  }

  /**
   * Get roleSearchSubtree
   * @return roleSearchSubtree
   */
  @javax.annotation.Nullable
  public Boolean getRoleSearchSubtree() {
    return roleSearchSubtree;
  }

  public void setRoleSearchSubtree(Boolean roleSearchSubtree) {
    this.roleSearchSubtree = roleSearchSubtree;
  }


  public LdapServerMetadataInput serviceAccountPassword(String serviceAccountPassword) {
    this.serviceAccountPassword = serviceAccountPassword;
    return this;
  }

  /**
   * Get serviceAccountPassword
   * @return serviceAccountPassword
   */
  @javax.annotation.Nonnull
  public String getServiceAccountPassword() {
    return serviceAccountPassword;
  }

  public void setServiceAccountPassword(String serviceAccountPassword) {
    this.serviceAccountPassword = serviceAccountPassword;
  }


  public LdapServerMetadataInput serviceAccountUsername(String serviceAccountUsername) {
    this.serviceAccountUsername = serviceAccountUsername;
    return this;
  }

  /**
   * Get serviceAccountUsername
   * @return serviceAccountUsername
   */
  @javax.annotation.Nonnull
  public String getServiceAccountUsername() {
    return serviceAccountUsername;
  }

  public void setServiceAccountUsername(String serviceAccountUsername) {
    this.serviceAccountUsername = serviceAccountUsername;
  }


  public LdapServerMetadataInput userBase(String userBase) {
    this.userBase = userBase;
    return this;
  }

  /**
   * Get userBase
   * @return userBase
   */
  @javax.annotation.Nonnull
  public String getUserBase() {
    return userBase;
  }

  public void setUserBase(String userBase) {
    this.userBase = userBase;
  }


  public LdapServerMetadataInput userRoleName(String userRoleName) {
    this.userRoleName = userRoleName;
    return this;
  }

  /**
   * Get userRoleName
   * @return userRoleName
   */
  @javax.annotation.Nullable
  public String getUserRoleName() {
    return userRoleName;
  }

  public void setUserRoleName(String userRoleName) {
    this.userRoleName = userRoleName;
  }


  public LdapServerMetadataInput userSearchMatching(String userSearchMatching) {
    this.userSearchMatching = userSearchMatching;
    return this;
  }

  /**
   * Get userSearchMatching
   * @return userSearchMatching
   */
  @javax.annotation.Nonnull
  public String getUserSearchMatching() {
    return userSearchMatching;
  }

  public void setUserSearchMatching(String userSearchMatching) {
    this.userSearchMatching = userSearchMatching;
  }


  public LdapServerMetadataInput userSearchSubtree(Boolean userSearchSubtree) {
    this.userSearchSubtree = userSearchSubtree;
    return this;
  }

  /**
   * Get userSearchSubtree
   * @return userSearchSubtree
   */
  @javax.annotation.Nullable
  public Boolean getUserSearchSubtree() {
    return userSearchSubtree;
  }

  public void setUserSearchSubtree(Boolean userSearchSubtree) {
    this.userSearchSubtree = userSearchSubtree;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdapServerMetadataInput ldapServerMetadataInput = (LdapServerMetadataInput) o;
    return Objects.equals(this.hosts, ldapServerMetadataInput.hosts) &&
        Objects.equals(this.roleBase, ldapServerMetadataInput.roleBase) &&
        Objects.equals(this.roleName, ldapServerMetadataInput.roleName) &&
        Objects.equals(this.roleSearchMatching, ldapServerMetadataInput.roleSearchMatching) &&
        Objects.equals(this.roleSearchSubtree, ldapServerMetadataInput.roleSearchSubtree) &&
        Objects.equals(this.serviceAccountPassword, ldapServerMetadataInput.serviceAccountPassword) &&
        Objects.equals(this.serviceAccountUsername, ldapServerMetadataInput.serviceAccountUsername) &&
        Objects.equals(this.userBase, ldapServerMetadataInput.userBase) &&
        Objects.equals(this.userRoleName, ldapServerMetadataInput.userRoleName) &&
        Objects.equals(this.userSearchMatching, ldapServerMetadataInput.userSearchMatching) &&
        Objects.equals(this.userSearchSubtree, ldapServerMetadataInput.userSearchSubtree);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hosts, roleBase, roleName, roleSearchMatching, roleSearchSubtree, serviceAccountPassword, serviceAccountUsername, userBase, userRoleName, userSearchMatching, userSearchSubtree);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdapServerMetadataInput {\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    roleBase: ").append(toIndentedString(roleBase)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    roleSearchMatching: ").append(toIndentedString(roleSearchMatching)).append("\n");
    sb.append("    roleSearchSubtree: ").append(toIndentedString(roleSearchSubtree)).append("\n");
    sb.append("    serviceAccountPassword: ").append(toIndentedString(serviceAccountPassword)).append("\n");
    sb.append("    serviceAccountUsername: ").append(toIndentedString(serviceAccountUsername)).append("\n");
    sb.append("    userBase: ").append(toIndentedString(userBase)).append("\n");
    sb.append("    userRoleName: ").append(toIndentedString(userRoleName)).append("\n");
    sb.append("    userSearchMatching: ").append(toIndentedString(userSearchMatching)).append("\n");
    sb.append("    userSearchSubtree: ").append(toIndentedString(userSearchSubtree)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Hosts");
    openapiFields.add("RoleBase");
    openapiFields.add("RoleName");
    openapiFields.add("RoleSearchMatching");
    openapiFields.add("RoleSearchSubtree");
    openapiFields.add("ServiceAccountPassword");
    openapiFields.add("ServiceAccountUsername");
    openapiFields.add("UserBase");
    openapiFields.add("UserRoleName");
    openapiFields.add("UserSearchMatching");
    openapiFields.add("UserSearchSubtree");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Hosts");
    openapiRequiredFields.add("RoleBase");
    openapiRequiredFields.add("RoleSearchMatching");
    openapiRequiredFields.add("ServiceAccountPassword");
    openapiRequiredFields.add("ServiceAccountUsername");
    openapiRequiredFields.add("UserBase");
    openapiRequiredFields.add("UserSearchMatching");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LdapServerMetadataInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LdapServerMetadataInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdapServerMetadataInput is not found in the empty JSON string", LdapServerMetadataInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LdapServerMetadataInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LdapServerMetadataInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LdapServerMetadataInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Hosts`
      List.validateJsonElement(jsonObj.get("Hosts"));
      // validate the required field `RoleBase`
      String.validateJsonElement(jsonObj.get("RoleBase"));
      // validate the optional field `RoleName`
      if (jsonObj.get("RoleName") != null && !jsonObj.get("RoleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleName"));
      }
      // validate the required field `RoleSearchMatching`
      String.validateJsonElement(jsonObj.get("RoleSearchMatching"));
      // validate the optional field `RoleSearchSubtree`
      if (jsonObj.get("RoleSearchSubtree") != null && !jsonObj.get("RoleSearchSubtree").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RoleSearchSubtree"));
      }
      // validate the required field `ServiceAccountPassword`
      String.validateJsonElement(jsonObj.get("ServiceAccountPassword"));
      // validate the required field `ServiceAccountUsername`
      String.validateJsonElement(jsonObj.get("ServiceAccountUsername"));
      // validate the required field `UserBase`
      String.validateJsonElement(jsonObj.get("UserBase"));
      // validate the optional field `UserRoleName`
      if (jsonObj.get("UserRoleName") != null && !jsonObj.get("UserRoleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserRoleName"));
      }
      // validate the required field `UserSearchMatching`
      String.validateJsonElement(jsonObj.get("UserSearchMatching"));
      // validate the optional field `UserSearchSubtree`
      if (jsonObj.get("UserSearchSubtree") != null && !jsonObj.get("UserSearchSubtree").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UserSearchSubtree"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdapServerMetadataInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdapServerMetadataInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdapServerMetadataInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdapServerMetadataInput.class));

       return (TypeAdapter<T>) new TypeAdapter<LdapServerMetadataInput>() {
           @Override
           public void write(JsonWriter out, LdapServerMetadataInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LdapServerMetadataInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LdapServerMetadataInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LdapServerMetadataInput
   * @throws IOException if the JSON string is invalid with respect to LdapServerMetadataInput
   */
  public static LdapServerMetadataInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdapServerMetadataInput.class);
  }

  /**
   * Convert an instance of LdapServerMetadataInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

