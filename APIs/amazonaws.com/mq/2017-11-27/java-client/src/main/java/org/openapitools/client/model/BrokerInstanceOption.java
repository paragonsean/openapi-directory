/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BrokerStorageType;
import org.openapitools.client.model.EngineType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Option for host instance type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:52.574212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrokerInstanceOption {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public static final String SERIALIZED_NAME_ENGINE_TYPE = "EngineType";
  @SerializedName(SERIALIZED_NAME_ENGINE_TYPE)
  private EngineType engineType;

  public static final String SERIALIZED_NAME_HOST_INSTANCE_TYPE = "HostInstanceType";
  @SerializedName(SERIALIZED_NAME_HOST_INSTANCE_TYPE)
  private String hostInstanceType;

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "StorageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private BrokerStorageType storageType;

  public static final String SERIALIZED_NAME_SUPPORTED_DEPLOYMENT_MODES = "SupportedDeploymentModes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DEPLOYMENT_MODES)
  private List supportedDeploymentModes;

  public static final String SERIALIZED_NAME_SUPPORTED_ENGINE_VERSIONS = "SupportedEngineVersions";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ENGINE_VERSIONS)
  private List supportedEngineVersions;

  public BrokerInstanceOption() {
  }

  public BrokerInstanceOption availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }


  public BrokerInstanceOption engineType(EngineType engineType) {
    this.engineType = engineType;
    return this;
  }

  /**
   * Get engineType
   * @return engineType
   */
  @javax.annotation.Nullable
  public EngineType getEngineType() {
    return engineType;
  }

  public void setEngineType(EngineType engineType) {
    this.engineType = engineType;
  }


  public BrokerInstanceOption hostInstanceType(String hostInstanceType) {
    this.hostInstanceType = hostInstanceType;
    return this;
  }

  /**
   * Get hostInstanceType
   * @return hostInstanceType
   */
  @javax.annotation.Nullable
  public String getHostInstanceType() {
    return hostInstanceType;
  }

  public void setHostInstanceType(String hostInstanceType) {
    this.hostInstanceType = hostInstanceType;
  }


  public BrokerInstanceOption storageType(BrokerStorageType storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * Get storageType
   * @return storageType
   */
  @javax.annotation.Nullable
  public BrokerStorageType getStorageType() {
    return storageType;
  }

  public void setStorageType(BrokerStorageType storageType) {
    this.storageType = storageType;
  }


  public BrokerInstanceOption supportedDeploymentModes(List supportedDeploymentModes) {
    this.supportedDeploymentModes = supportedDeploymentModes;
    return this;
  }

  /**
   * Get supportedDeploymentModes
   * @return supportedDeploymentModes
   */
  @javax.annotation.Nullable
  public List getSupportedDeploymentModes() {
    return supportedDeploymentModes;
  }

  public void setSupportedDeploymentModes(List supportedDeploymentModes) {
    this.supportedDeploymentModes = supportedDeploymentModes;
  }


  public BrokerInstanceOption supportedEngineVersions(List supportedEngineVersions) {
    this.supportedEngineVersions = supportedEngineVersions;
    return this;
  }

  /**
   * Get supportedEngineVersions
   * @return supportedEngineVersions
   */
  @javax.annotation.Nullable
  public List getSupportedEngineVersions() {
    return supportedEngineVersions;
  }

  public void setSupportedEngineVersions(List supportedEngineVersions) {
    this.supportedEngineVersions = supportedEngineVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrokerInstanceOption brokerInstanceOption = (BrokerInstanceOption) o;
    return Objects.equals(this.availabilityZones, brokerInstanceOption.availabilityZones) &&
        Objects.equals(this.engineType, brokerInstanceOption.engineType) &&
        Objects.equals(this.hostInstanceType, brokerInstanceOption.hostInstanceType) &&
        Objects.equals(this.storageType, brokerInstanceOption.storageType) &&
        Objects.equals(this.supportedDeploymentModes, brokerInstanceOption.supportedDeploymentModes) &&
        Objects.equals(this.supportedEngineVersions, brokerInstanceOption.supportedEngineVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZones, engineType, hostInstanceType, storageType, supportedDeploymentModes, supportedEngineVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrokerInstanceOption {\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    hostInstanceType: ").append(toIndentedString(hostInstanceType)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    supportedDeploymentModes: ").append(toIndentedString(supportedDeploymentModes)).append("\n");
    sb.append("    supportedEngineVersions: ").append(toIndentedString(supportedEngineVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZones");
    openapiFields.add("EngineType");
    openapiFields.add("HostInstanceType");
    openapiFields.add("StorageType");
    openapiFields.add("SupportedDeploymentModes");
    openapiFields.add("SupportedEngineVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrokerInstanceOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrokerInstanceOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrokerInstanceOption is not found in the empty JSON string", BrokerInstanceOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrokerInstanceOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrokerInstanceOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
      // validate the optional field `EngineType`
      if (jsonObj.get("EngineType") != null && !jsonObj.get("EngineType").isJsonNull()) {
        EngineType.validateJsonElement(jsonObj.get("EngineType"));
      }
      // validate the optional field `HostInstanceType`
      if (jsonObj.get("HostInstanceType") != null && !jsonObj.get("HostInstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostInstanceType"));
      }
      // validate the optional field `StorageType`
      if (jsonObj.get("StorageType") != null && !jsonObj.get("StorageType").isJsonNull()) {
        BrokerStorageType.validateJsonElement(jsonObj.get("StorageType"));
      }
      // validate the optional field `SupportedDeploymentModes`
      if (jsonObj.get("SupportedDeploymentModes") != null && !jsonObj.get("SupportedDeploymentModes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedDeploymentModes"));
      }
      // validate the optional field `SupportedEngineVersions`
      if (jsonObj.get("SupportedEngineVersions") != null && !jsonObj.get("SupportedEngineVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedEngineVersions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrokerInstanceOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrokerInstanceOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrokerInstanceOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrokerInstanceOption.class));

       return (TypeAdapter<T>) new TypeAdapter<BrokerInstanceOption>() {
           @Override
           public void write(JsonWriter out, BrokerInstanceOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrokerInstanceOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrokerInstanceOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrokerInstanceOption
   * @throws IOException if the JSON string is invalid with respect to BrokerInstanceOption
   */
  public static BrokerInstanceOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrokerInstanceOption.class);
  }

  /**
   * Convert an instance of BrokerInstanceOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

