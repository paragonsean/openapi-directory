/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateBrokerRequestConfiguration;
import org.openapitools.client.model.CreateBrokerRequestLdapServerMetadata;
import org.openapitools.client.model.CreateBrokerRequestLogs;
import org.openapitools.client.model.CreateBrokerRequestMaintenanceWindowStartTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateBrokerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:52.574212-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateBrokerRequest {
  /**
   * Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
   */
  @JsonAdapter(AuthenticationStrategyEnum.Adapter.class)
  public enum AuthenticationStrategyEnum {
    SIMPLE("SIMPLE"),
    
    LDAP("LDAP");

    private String value;

    AuthenticationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationStrategyEnum fromValue(String value) {
      for (AuthenticationStrategyEnum b : AuthenticationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_STRATEGY = "authenticationStrategy";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_STRATEGY)
  private AuthenticationStrategyEnum authenticationStrategy;

  public static final String SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE = "autoMinorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE)
  private Boolean autoMinorVersionUpgrade;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private CreateBrokerRequestConfiguration _configuration;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "engineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_HOST_INSTANCE_TYPE = "hostInstanceType";
  @SerializedName(SERIALIZED_NAME_HOST_INSTANCE_TYPE)
  private String hostInstanceType;

  public static final String SERIALIZED_NAME_LDAP_SERVER_METADATA = "ldapServerMetadata";
  @SerializedName(SERIALIZED_NAME_LDAP_SERVER_METADATA)
  private CreateBrokerRequestLdapServerMetadata ldapServerMetadata;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private CreateBrokerRequestLogs logs;

  public static final String SERIALIZED_NAME_MAINTENANCE_WINDOW_START_TIME = "maintenanceWindowStartTime";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_WINDOW_START_TIME)
  private CreateBrokerRequestMaintenanceWindowStartTime maintenanceWindowStartTime;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List<String> securityGroups = new ArrayList<>();

  /**
   * Specifies whether a broker is a part of a data replication pair.
   */
  @JsonAdapter(DataReplicationModeEnum.Adapter.class)
  public enum DataReplicationModeEnum {
    NONE("NONE"),
    
    CRDR("CRDR");

    private String value;

    DataReplicationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataReplicationModeEnum fromValue(String value) {
      for (DataReplicationModeEnum b : DataReplicationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataReplicationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataReplicationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataReplicationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataReplicationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataReplicationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_REPLICATION_MODE = "dataReplicationMode";
  @SerializedName(SERIALIZED_NAME_DATA_REPLICATION_MODE)
  private DataReplicationModeEnum dataReplicationMode;

  public UpdateBrokerRequest() {
  }

  public UpdateBrokerRequest authenticationStrategy(AuthenticationStrategyEnum authenticationStrategy) {
    this.authenticationStrategy = authenticationStrategy;
    return this;
  }

  /**
   * Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
   * @return authenticationStrategy
   */
  @javax.annotation.Nullable
  public AuthenticationStrategyEnum getAuthenticationStrategy() {
    return authenticationStrategy;
  }

  public void setAuthenticationStrategy(AuthenticationStrategyEnum authenticationStrategy) {
    this.authenticationStrategy = authenticationStrategy;
  }


  public UpdateBrokerRequest autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
    return this;
  }

  /**
   * Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
   * @return autoMinorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAutoMinorVersionUpgrade() {
    return autoMinorVersionUpgrade;
  }

  public void setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
  }


  public UpdateBrokerRequest _configuration(CreateBrokerRequestConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public CreateBrokerRequestConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(CreateBrokerRequestConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public UpdateBrokerRequest engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * The broker engine version. For a list of supported engine versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\&quot;&gt;Supported engines&lt;/a&gt;.
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public UpdateBrokerRequest hostInstanceType(String hostInstanceType) {
    this.hostInstanceType = hostInstanceType;
    return this;
  }

  /**
   * The broker&#39;s host instance type to upgrade to. For a list of supported instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\&quot;&gt;Broker instance types&lt;/a&gt;.
   * @return hostInstanceType
   */
  @javax.annotation.Nullable
  public String getHostInstanceType() {
    return hostInstanceType;
  }

  public void setHostInstanceType(String hostInstanceType) {
    this.hostInstanceType = hostInstanceType;
  }


  public UpdateBrokerRequest ldapServerMetadata(CreateBrokerRequestLdapServerMetadata ldapServerMetadata) {
    this.ldapServerMetadata = ldapServerMetadata;
    return this;
  }

  /**
   * Get ldapServerMetadata
   * @return ldapServerMetadata
   */
  @javax.annotation.Nullable
  public CreateBrokerRequestLdapServerMetadata getLdapServerMetadata() {
    return ldapServerMetadata;
  }

  public void setLdapServerMetadata(CreateBrokerRequestLdapServerMetadata ldapServerMetadata) {
    this.ldapServerMetadata = ldapServerMetadata;
  }


  public UpdateBrokerRequest logs(CreateBrokerRequestLogs logs) {
    this.logs = logs;
    return this;
  }

  /**
   * Get logs
   * @return logs
   */
  @javax.annotation.Nullable
  public CreateBrokerRequestLogs getLogs() {
    return logs;
  }

  public void setLogs(CreateBrokerRequestLogs logs) {
    this.logs = logs;
  }


  public UpdateBrokerRequest maintenanceWindowStartTime(CreateBrokerRequestMaintenanceWindowStartTime maintenanceWindowStartTime) {
    this.maintenanceWindowStartTime = maintenanceWindowStartTime;
    return this;
  }

  /**
   * Get maintenanceWindowStartTime
   * @return maintenanceWindowStartTime
   */
  @javax.annotation.Nullable
  public CreateBrokerRequestMaintenanceWindowStartTime getMaintenanceWindowStartTime() {
    return maintenanceWindowStartTime;
  }

  public void setMaintenanceWindowStartTime(CreateBrokerRequestMaintenanceWindowStartTime maintenanceWindowStartTime) {
    this.maintenanceWindowStartTime = maintenanceWindowStartTime;
  }


  public UpdateBrokerRequest securityGroups(List<String> securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  public UpdateBrokerRequest addSecurityGroupsItem(String securityGroupsItem) {
    if (this.securityGroups == null) {
      this.securityGroups = new ArrayList<>();
    }
    this.securityGroups.add(securityGroupsItem);
    return this;
  }

  /**
   * The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List<String> getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List<String> securityGroups) {
    this.securityGroups = securityGroups;
  }


  public UpdateBrokerRequest dataReplicationMode(DataReplicationModeEnum dataReplicationMode) {
    this.dataReplicationMode = dataReplicationMode;
    return this;
  }

  /**
   * Specifies whether a broker is a part of a data replication pair.
   * @return dataReplicationMode
   */
  @javax.annotation.Nullable
  public DataReplicationModeEnum getDataReplicationMode() {
    return dataReplicationMode;
  }

  public void setDataReplicationMode(DataReplicationModeEnum dataReplicationMode) {
    this.dataReplicationMode = dataReplicationMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBrokerRequest updateBrokerRequest = (UpdateBrokerRequest) o;
    return Objects.equals(this.authenticationStrategy, updateBrokerRequest.authenticationStrategy) &&
        Objects.equals(this.autoMinorVersionUpgrade, updateBrokerRequest.autoMinorVersionUpgrade) &&
        Objects.equals(this._configuration, updateBrokerRequest._configuration) &&
        Objects.equals(this.engineVersion, updateBrokerRequest.engineVersion) &&
        Objects.equals(this.hostInstanceType, updateBrokerRequest.hostInstanceType) &&
        Objects.equals(this.ldapServerMetadata, updateBrokerRequest.ldapServerMetadata) &&
        Objects.equals(this.logs, updateBrokerRequest.logs) &&
        Objects.equals(this.maintenanceWindowStartTime, updateBrokerRequest.maintenanceWindowStartTime) &&
        Objects.equals(this.securityGroups, updateBrokerRequest.securityGroups) &&
        Objects.equals(this.dataReplicationMode, updateBrokerRequest.dataReplicationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationStrategy, autoMinorVersionUpgrade, _configuration, engineVersion, hostInstanceType, ldapServerMetadata, logs, maintenanceWindowStartTime, securityGroups, dataReplicationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBrokerRequest {\n");
    sb.append("    authenticationStrategy: ").append(toIndentedString(authenticationStrategy)).append("\n");
    sb.append("    autoMinorVersionUpgrade: ").append(toIndentedString(autoMinorVersionUpgrade)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    hostInstanceType: ").append(toIndentedString(hostInstanceType)).append("\n");
    sb.append("    ldapServerMetadata: ").append(toIndentedString(ldapServerMetadata)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    maintenanceWindowStartTime: ").append(toIndentedString(maintenanceWindowStartTime)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    dataReplicationMode: ").append(toIndentedString(dataReplicationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationStrategy");
    openapiFields.add("autoMinorVersionUpgrade");
    openapiFields.add("configuration");
    openapiFields.add("engineVersion");
    openapiFields.add("hostInstanceType");
    openapiFields.add("ldapServerMetadata");
    openapiFields.add("logs");
    openapiFields.add("maintenanceWindowStartTime");
    openapiFields.add("securityGroups");
    openapiFields.add("dataReplicationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateBrokerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateBrokerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBrokerRequest is not found in the empty JSON string", UpdateBrokerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateBrokerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateBrokerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authenticationStrategy") != null && !jsonObj.get("authenticationStrategy").isJsonNull()) && !jsonObj.get("authenticationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationStrategy").toString()));
      }
      // validate the optional field `authenticationStrategy`
      if (jsonObj.get("authenticationStrategy") != null && !jsonObj.get("authenticationStrategy").isJsonNull()) {
        AuthenticationStrategyEnum.validateJsonElement(jsonObj.get("authenticationStrategy"));
      }
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        CreateBrokerRequestConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      if ((jsonObj.get("engineVersion") != null && !jsonObj.get("engineVersion").isJsonNull()) && !jsonObj.get("engineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineVersion").toString()));
      }
      if ((jsonObj.get("hostInstanceType") != null && !jsonObj.get("hostInstanceType").isJsonNull()) && !jsonObj.get("hostInstanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostInstanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostInstanceType").toString()));
      }
      // validate the optional field `ldapServerMetadata`
      if (jsonObj.get("ldapServerMetadata") != null && !jsonObj.get("ldapServerMetadata").isJsonNull()) {
        CreateBrokerRequestLdapServerMetadata.validateJsonElement(jsonObj.get("ldapServerMetadata"));
      }
      // validate the optional field `logs`
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        CreateBrokerRequestLogs.validateJsonElement(jsonObj.get("logs"));
      }
      // validate the optional field `maintenanceWindowStartTime`
      if (jsonObj.get("maintenanceWindowStartTime") != null && !jsonObj.get("maintenanceWindowStartTime").isJsonNull()) {
        CreateBrokerRequestMaintenanceWindowStartTime.validateJsonElement(jsonObj.get("maintenanceWindowStartTime"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("securityGroups") != null && !jsonObj.get("securityGroups").isJsonNull() && !jsonObj.get("securityGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityGroups` to be an array in the JSON string but got `%s`", jsonObj.get("securityGroups").toString()));
      }
      if ((jsonObj.get("dataReplicationMode") != null && !jsonObj.get("dataReplicationMode").isJsonNull()) && !jsonObj.get("dataReplicationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataReplicationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataReplicationMode").toString()));
      }
      // validate the optional field `dataReplicationMode`
      if (jsonObj.get("dataReplicationMode") != null && !jsonObj.get("dataReplicationMode").isJsonNull()) {
        DataReplicationModeEnum.validateJsonElement(jsonObj.get("dataReplicationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBrokerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBrokerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBrokerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBrokerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBrokerRequest>() {
           @Override
           public void write(JsonWriter out, UpdateBrokerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBrokerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateBrokerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateBrokerRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateBrokerRequest
   */
  public static UpdateBrokerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBrokerRequest.class);
  }

  /**
   * Convert an instance of UpdateBrokerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

