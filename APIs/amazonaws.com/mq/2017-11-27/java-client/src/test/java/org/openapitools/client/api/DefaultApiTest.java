/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateBrokerRequest;
import org.openapitools.client.model.CreateBrokerResponse;
import org.openapitools.client.model.CreateConfigurationRequest;
import org.openapitools.client.model.CreateConfigurationResponse;
import org.openapitools.client.model.CreateTagsRequest;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.DeleteBrokerResponse;
import org.openapitools.client.model.DescribeBrokerEngineTypesResponse;
import org.openapitools.client.model.DescribeBrokerInstanceOptionsResponse;
import org.openapitools.client.model.DescribeBrokerResponse;
import org.openapitools.client.model.DescribeConfigurationResponse;
import org.openapitools.client.model.DescribeConfigurationRevisionResponse;
import org.openapitools.client.model.DescribeUserResponse;
import org.openapitools.client.model.ListBrokersResponse;
import org.openapitools.client.model.ListConfigurationRevisionsResponse;
import org.openapitools.client.model.ListConfigurationsResponse;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.PromoteRequest;
import org.openapitools.client.model.PromoteResponse;
import org.openapitools.client.model.UpdateBrokerRequest;
import org.openapitools.client.model.UpdateBrokerResponse;
import org.openapitools.client.model.UpdateConfigurationRequest;
import org.openapitools.client.model.UpdateConfigurationResponse;
import org.openapitools.client.model.UpdateUserRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates a broker. Note: This API is asynchronous.&lt;/p&gt; &lt;p&gt;To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;p&gt;ec2:CreateNetworkInterface&lt;/p&gt; &lt;p&gt;This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:CreateNetworkInterfacePermission&lt;/p&gt; &lt;p&gt;This permission is required to attach the ENI to the broker instance.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DeleteNetworkInterface&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DeleteNetworkInterfacePermission&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DetachNetworkInterface&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeInternetGateways&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeNetworkInterfaces&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeNetworkInterfacePermissions&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeRouteTables&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeSecurityGroups&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeSubnets&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ec2:DescribeVpcs&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user\&quot;&gt;Create an IAM User and Get Your Amazon Web Services Credentials&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface\&quot;&gt;Never Modify or Delete the Amazon MQ Elastic Network Interface&lt;/a&gt; in the &lt;i&gt;Amazon MQ Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBrokerTest() throws ApiException {
        CreateBrokerRequest createBrokerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBrokerResponse response = api.createBroker(createBrokerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfigurationTest() throws ApiException {
        CreateConfigurationRequest createConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConfigurationResponse response = api.createConfiguration(createConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add a tag to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagsTest() throws ApiException {
        String resourceArn = null;
        CreateTagsRequest createTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.createTags(resourceArn, createTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an ActiveMQ user.&lt;/p&gt; &lt;important&gt;&lt;p&gt;Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker usernames are not intended to be used for private or sensitive data.&lt;/p&gt;&lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String brokerId = null;
        String username = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createUser(brokerId, username, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a broker. Note: This API is asynchronous.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBrokerTest() throws ApiException {
        String brokerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBrokerResponse response = api.deleteBroker(brokerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagsTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteTags(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an ActiveMQ user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String brokerId = null;
        String username = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUser(brokerId, username, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the specified broker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBrokerTest() throws ApiException {
        String brokerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBrokerResponse response = api.describeBroker(brokerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describe available engine types and versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBrokerEngineTypesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineType = null;
        Integer maxResults = null;
        String nextToken = null;
        DescribeBrokerEngineTypesResponse response = api.describeBrokerEngineTypes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineType, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Describe available broker instance options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBrokerInstanceOptionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineType = null;
        String hostInstanceType = null;
        Integer maxResults = null;
        String nextToken = null;
        String storageType = null;
        DescribeBrokerInstanceOptionsResponse response = api.describeBrokerInstanceOptions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineType, hostInstanceType, maxResults, nextToken, storageType);
        // TODO: test validations
    }

    /**
     * Returns information about the specified configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConfigurationTest() throws ApiException {
        String configurationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConfigurationResponse response = api.describeConfiguration(configurationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the specified configuration revision for the specified configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConfigurationRevisionTest() throws ApiException {
        String configurationId = null;
        String configurationRevision = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConfigurationRevisionResponse response = api.describeConfigurationRevision(configurationId, configurationRevision, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about an ActiveMQ user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserTest() throws ApiException {
        String brokerId = null;
        String username = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserResponse response = api.describeUser(brokerId, username, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of all brokers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBrokersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBrokersResponse response = api.listBrokers(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of all revisions for the specified configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationRevisionsTest() throws ApiException {
        String configurationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListConfigurationRevisionsResponse response = api.listConfigurationRevisions(configurationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of all configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListConfigurationsResponse response = api.listConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists tags for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsResponse response = api.listTags(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of all ActiveMQ users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String brokerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListUsersResponse response = api.listUsers(brokerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Promotes a data replication replica broker to the primary broker role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promoteTest() throws ApiException {
        String brokerId = null;
        PromoteRequest promoteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PromoteResponse response = api.promote(brokerId, promoteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Reboots a broker. Note: This API is asynchronous.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootBrokerTest() throws ApiException {
        String brokerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.rebootBroker(brokerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a pending configuration change to a broker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrokerTest() throws ApiException {
        String brokerId = null;
        UpdateBrokerRequest updateBrokerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBrokerResponse response = api.updateBroker(brokerId, updateBrokerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigurationTest() throws ApiException {
        String configurationId = null;
        UpdateConfigurationRequest updateConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConfigurationResponse response = api.updateConfiguration(configurationId, updateConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the information for an ActiveMQ user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String brokerId = null;
        String username = null;
        UpdateUserRequest updateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateUser(brokerId, username, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
