/*
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthenticationStrategy;
import org.openapitools.client.model.BrokerState;
import org.openapitools.client.model.BrokerStorageType;
import org.openapitools.client.model.DataReplicationMode;
import org.openapitools.client.model.DeploymentMode;
import org.openapitools.client.model.DescribeBrokerResponseConfigurations;
import org.openapitools.client.model.DescribeBrokerResponseDataReplicationMetadata;
import org.openapitools.client.model.DescribeBrokerResponseEncryptionOptions;
import org.openapitools.client.model.DescribeBrokerResponseLdapServerMetadata;
import org.openapitools.client.model.DescribeBrokerResponseLogs;
import org.openapitools.client.model.DescribeBrokerResponseMaintenanceWindowStartTime;
import org.openapitools.client.model.DescribeBrokerResponsePendingDataReplicationMetadata;
import org.openapitools.client.model.DescribeBrokerResponsePendingLdapServerMetadata;
import org.openapitools.client.model.EngineType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DescribeBrokerResponse
 */
public class DescribeBrokerResponseTest {
    private final DescribeBrokerResponse model = new DescribeBrokerResponse();

    /**
     * Model tests for DescribeBrokerResponse
     */
    @Test
    public void testDescribeBrokerResponse() {
        // TODO: test DescribeBrokerResponse
    }

    /**
     * Test the property 'actionsRequired'
     */
    @Test
    public void actionsRequiredTest() {
        // TODO: test actionsRequired
    }

    /**
     * Test the property 'authenticationStrategy'
     */
    @Test
    public void authenticationStrategyTest() {
        // TODO: test authenticationStrategy
    }

    /**
     * Test the property 'autoMinorVersionUpgrade'
     */
    @Test
    public void autoMinorVersionUpgradeTest() {
        // TODO: test autoMinorVersionUpgrade
    }

    /**
     * Test the property 'brokerArn'
     */
    @Test
    public void brokerArnTest() {
        // TODO: test brokerArn
    }

    /**
     * Test the property 'brokerId'
     */
    @Test
    public void brokerIdTest() {
        // TODO: test brokerId
    }

    /**
     * Test the property 'brokerInstances'
     */
    @Test
    public void brokerInstancesTest() {
        // TODO: test brokerInstances
    }

    /**
     * Test the property 'brokerName'
     */
    @Test
    public void brokerNameTest() {
        // TODO: test brokerName
    }

    /**
     * Test the property 'brokerState'
     */
    @Test
    public void brokerStateTest() {
        // TODO: test brokerState
    }

    /**
     * Test the property 'configurations'
     */
    @Test
    public void configurationsTest() {
        // TODO: test configurations
    }

    /**
     * Test the property 'created'
     */
    @Test
    public void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'deploymentMode'
     */
    @Test
    public void deploymentModeTest() {
        // TODO: test deploymentMode
    }

    /**
     * Test the property 'encryptionOptions'
     */
    @Test
    public void encryptionOptionsTest() {
        // TODO: test encryptionOptions
    }

    /**
     * Test the property 'engineType'
     */
    @Test
    public void engineTypeTest() {
        // TODO: test engineType
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'hostInstanceType'
     */
    @Test
    public void hostInstanceTypeTest() {
        // TODO: test hostInstanceType
    }

    /**
     * Test the property 'ldapServerMetadata'
     */
    @Test
    public void ldapServerMetadataTest() {
        // TODO: test ldapServerMetadata
    }

    /**
     * Test the property 'logs'
     */
    @Test
    public void logsTest() {
        // TODO: test logs
    }

    /**
     * Test the property 'maintenanceWindowStartTime'
     */
    @Test
    public void maintenanceWindowStartTimeTest() {
        // TODO: test maintenanceWindowStartTime
    }

    /**
     * Test the property 'pendingAuthenticationStrategy'
     */
    @Test
    public void pendingAuthenticationStrategyTest() {
        // TODO: test pendingAuthenticationStrategy
    }

    /**
     * Test the property 'pendingEngineVersion'
     */
    @Test
    public void pendingEngineVersionTest() {
        // TODO: test pendingEngineVersion
    }

    /**
     * Test the property 'pendingHostInstanceType'
     */
    @Test
    public void pendingHostInstanceTypeTest() {
        // TODO: test pendingHostInstanceType
    }

    /**
     * Test the property 'pendingLdapServerMetadata'
     */
    @Test
    public void pendingLdapServerMetadataTest() {
        // TODO: test pendingLdapServerMetadata
    }

    /**
     * Test the property 'pendingSecurityGroups'
     */
    @Test
    public void pendingSecurityGroupsTest() {
        // TODO: test pendingSecurityGroups
    }

    /**
     * Test the property 'publiclyAccessible'
     */
    @Test
    public void publiclyAccessibleTest() {
        // TODO: test publiclyAccessible
    }

    /**
     * Test the property 'securityGroups'
     */
    @Test
    public void securityGroupsTest() {
        // TODO: test securityGroups
    }

    /**
     * Test the property 'storageType'
     */
    @Test
    public void storageTypeTest() {
        // TODO: test storageType
    }

    /**
     * Test the property 'subnetIds'
     */
    @Test
    public void subnetIdsTest() {
        // TODO: test subnetIds
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'users'
     */
    @Test
    public void usersTest() {
        // TODO: test users
    }

    /**
     * Test the property 'dataReplicationMetadata'
     */
    @Test
    public void dataReplicationMetadataTest() {
        // TODO: test dataReplicationMetadata
    }

    /**
     * Test the property 'dataReplicationMode'
     */
    @Test
    public void dataReplicationModeTest() {
        // TODO: test dataReplicationMode
    }

    /**
     * Test the property 'pendingDataReplicationMetadata'
     */
    @Test
    public void pendingDataReplicationMetadataTest() {
        // TODO: test pendingDataReplicationMetadata
    }

    /**
     * Test the property 'pendingDataReplicationMode'
     */
    @Test
    public void pendingDataReplicationModeTest() {
        // TODO: test pendingDataReplicationMode
    }

}
