# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_replication_metadata_output_data_replication_counterpart import DataReplicationMetadataOutputDataReplicationCounterpart
from openapi_server import util


class DescribeBrokerResponsePendingDataReplicationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_replication_counterpart: DataReplicationMetadataOutputDataReplicationCounterpart=None, data_replication_role: str=None):
        """DescribeBrokerResponsePendingDataReplicationMetadata - a model defined in OpenAPI

        :param data_replication_counterpart: The data_replication_counterpart of this DescribeBrokerResponsePendingDataReplicationMetadata.
        :param data_replication_role: The data_replication_role of this DescribeBrokerResponsePendingDataReplicationMetadata.
        """
        self.openapi_types = {
            'data_replication_counterpart': DataReplicationMetadataOutputDataReplicationCounterpart,
            'data_replication_role': str
        }

        self.attribute_map = {
            'data_replication_counterpart': 'DataReplicationCounterpart',
            'data_replication_role': 'DataReplicationRole'
        }

        self._data_replication_counterpart = data_replication_counterpart
        self._data_replication_role = data_replication_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBrokerResponsePendingDataReplicationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBrokerResponse_PendingDataReplicationMetadata of this DescribeBrokerResponsePendingDataReplicationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_replication_counterpart(self):
        """Gets the data_replication_counterpart of this DescribeBrokerResponsePendingDataReplicationMetadata.


        :return: The data_replication_counterpart of this DescribeBrokerResponsePendingDataReplicationMetadata.
        :rtype: DataReplicationMetadataOutputDataReplicationCounterpart
        """
        return self._data_replication_counterpart

    @data_replication_counterpart.setter
    def data_replication_counterpart(self, data_replication_counterpart):
        """Sets the data_replication_counterpart of this DescribeBrokerResponsePendingDataReplicationMetadata.


        :param data_replication_counterpart: The data_replication_counterpart of this DescribeBrokerResponsePendingDataReplicationMetadata.
        :type data_replication_counterpart: DataReplicationMetadataOutputDataReplicationCounterpart
        """

        self._data_replication_counterpart = data_replication_counterpart

    @property
    def data_replication_role(self):
        """Gets the data_replication_role of this DescribeBrokerResponsePendingDataReplicationMetadata.


        :return: The data_replication_role of this DescribeBrokerResponsePendingDataReplicationMetadata.
        :rtype: str
        """
        return self._data_replication_role

    @data_replication_role.setter
    def data_replication_role(self, data_replication_role):
        """Sets the data_replication_role of this DescribeBrokerResponsePendingDataReplicationMetadata.


        :param data_replication_role: The data_replication_role of this DescribeBrokerResponsePendingDataReplicationMetadata.
        :type data_replication_role: str
        """
        if data_replication_role is None:
            raise ValueError("Invalid value for `data_replication_role`, must not be `None`")

        self._data_replication_role = data_replication_role
