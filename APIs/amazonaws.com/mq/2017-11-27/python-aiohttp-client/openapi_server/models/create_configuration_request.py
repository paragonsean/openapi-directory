# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_strategy: str=None, engine_type: str=None, engine_version: str=None, name: str=None, tags: Dict[str, str]=None):
        """CreateConfigurationRequest - a model defined in OpenAPI

        :param authentication_strategy: The authentication_strategy of this CreateConfigurationRequest.
        :param engine_type: The engine_type of this CreateConfigurationRequest.
        :param engine_version: The engine_version of this CreateConfigurationRequest.
        :param name: The name of this CreateConfigurationRequest.
        :param tags: The tags of this CreateConfigurationRequest.
        """
        self.openapi_types = {
            'authentication_strategy': str,
            'engine_type': str,
            'engine_version': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'authentication_strategy': 'authenticationStrategy',
            'engine_type': 'engineType',
            'engine_version': 'engineVersion',
            'name': 'name',
            'tags': 'tags'
        }

        self._authentication_strategy = authentication_strategy
        self._engine_type = engine_type
        self._engine_version = engine_version
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguration_request of this CreateConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_strategy(self):
        """Gets the authentication_strategy of this CreateConfigurationRequest.

        Optional. The authentication strategy used to secure the broker. The default is SIMPLE.

        :return: The authentication_strategy of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._authentication_strategy

    @authentication_strategy.setter
    def authentication_strategy(self, authentication_strategy):
        """Sets the authentication_strategy of this CreateConfigurationRequest.

        Optional. The authentication strategy used to secure the broker. The default is SIMPLE.

        :param authentication_strategy: The authentication_strategy of this CreateConfigurationRequest.
        :type authentication_strategy: str
        """
        allowed_values = ["SIMPLE", "LDAP"]  # noqa: E501
        if authentication_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_strategy` ({0}), must be one of {1}"
                .format(authentication_strategy, allowed_values)
            )

        self._authentication_strategy = authentication_strategy

    @property
    def engine_type(self):
        """Gets the engine_type of this CreateConfigurationRequest.

        The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.

        :return: The engine_type of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this CreateConfigurationRequest.

        The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.

        :param engine_type: The engine_type of this CreateConfigurationRequest.
        :type engine_type: str
        """
        allowed_values = ["ACTIVEMQ", "RABBITMQ"]  # noqa: E501
        if engine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def engine_version(self):
        """Gets the engine_version of this CreateConfigurationRequest.

        Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.

        :return: The engine_version of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this CreateConfigurationRequest.

        Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.

        :param engine_version: The engine_version of this CreateConfigurationRequest.
        :type engine_version: str
        """
        if engine_version is None:
            raise ValueError("Invalid value for `engine_version`, must not be `None`")

        self._engine_version = engine_version

    @property
    def name(self):
        """Gets the name of this CreateConfigurationRequest.

        Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.

        :return: The name of this CreateConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfigurationRequest.

        Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.

        :param name: The name of this CreateConfigurationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateConfigurationRequest.

        Create tags when creating the configuration.

        :return: The tags of this CreateConfigurationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfigurationRequest.

        Create tags when creating the configuration.

        :param tags: The tags of this CreateConfigurationRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
