# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_broker_request_configuration import CreateBrokerRequestConfiguration
from openapi_server.models.create_broker_request_ldap_server_metadata import CreateBrokerRequestLdapServerMetadata
from openapi_server.models.create_broker_request_logs import CreateBrokerRequestLogs
from openapi_server.models.create_broker_request_maintenance_window_start_time import CreateBrokerRequestMaintenanceWindowStartTime
from openapi_server import util


class UpdateBrokerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_strategy: str=None, auto_minor_version_upgrade: bool=None, configuration: CreateBrokerRequestConfiguration=None, engine_version: str=None, host_instance_type: str=None, ldap_server_metadata: CreateBrokerRequestLdapServerMetadata=None, logs: CreateBrokerRequestLogs=None, maintenance_window_start_time: CreateBrokerRequestMaintenanceWindowStartTime=None, security_groups: List[str]=None, data_replication_mode: str=None):
        """UpdateBrokerRequest - a model defined in OpenAPI

        :param authentication_strategy: The authentication_strategy of this UpdateBrokerRequest.
        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this UpdateBrokerRequest.
        :param configuration: The configuration of this UpdateBrokerRequest.
        :param engine_version: The engine_version of this UpdateBrokerRequest.
        :param host_instance_type: The host_instance_type of this UpdateBrokerRequest.
        :param ldap_server_metadata: The ldap_server_metadata of this UpdateBrokerRequest.
        :param logs: The logs of this UpdateBrokerRequest.
        :param maintenance_window_start_time: The maintenance_window_start_time of this UpdateBrokerRequest.
        :param security_groups: The security_groups of this UpdateBrokerRequest.
        :param data_replication_mode: The data_replication_mode of this UpdateBrokerRequest.
        """
        self.openapi_types = {
            'authentication_strategy': str,
            'auto_minor_version_upgrade': bool,
            'configuration': CreateBrokerRequestConfiguration,
            'engine_version': str,
            'host_instance_type': str,
            'ldap_server_metadata': CreateBrokerRequestLdapServerMetadata,
            'logs': CreateBrokerRequestLogs,
            'maintenance_window_start_time': CreateBrokerRequestMaintenanceWindowStartTime,
            'security_groups': List[str],
            'data_replication_mode': str
        }

        self.attribute_map = {
            'authentication_strategy': 'authenticationStrategy',
            'auto_minor_version_upgrade': 'autoMinorVersionUpgrade',
            'configuration': 'configuration',
            'engine_version': 'engineVersion',
            'host_instance_type': 'hostInstanceType',
            'ldap_server_metadata': 'ldapServerMetadata',
            'logs': 'logs',
            'maintenance_window_start_time': 'maintenanceWindowStartTime',
            'security_groups': 'securityGroups',
            'data_replication_mode': 'dataReplicationMode'
        }

        self._authentication_strategy = authentication_strategy
        self._auto_minor_version_upgrade = auto_minor_version_upgrade
        self._configuration = configuration
        self._engine_version = engine_version
        self._host_instance_type = host_instance_type
        self._ldap_server_metadata = ldap_server_metadata
        self._logs = logs
        self._maintenance_window_start_time = maintenance_window_start_time
        self._security_groups = security_groups
        self._data_replication_mode = data_replication_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBrokerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBroker_request of this UpdateBrokerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_strategy(self):
        """Gets the authentication_strategy of this UpdateBrokerRequest.

        Optional. The authentication strategy used to secure the broker. The default is SIMPLE.

        :return: The authentication_strategy of this UpdateBrokerRequest.
        :rtype: str
        """
        return self._authentication_strategy

    @authentication_strategy.setter
    def authentication_strategy(self, authentication_strategy):
        """Sets the authentication_strategy of this UpdateBrokerRequest.

        Optional. The authentication strategy used to secure the broker. The default is SIMPLE.

        :param authentication_strategy: The authentication_strategy of this UpdateBrokerRequest.
        :type authentication_strategy: str
        """
        allowed_values = ["SIMPLE", "LDAP"]  # noqa: E501
        if authentication_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_strategy` ({0}), must be one of {1}"
                .format(authentication_strategy, allowed_values)
            )

        self._authentication_strategy = authentication_strategy

    @property
    def auto_minor_version_upgrade(self):
        """Gets the auto_minor_version_upgrade of this UpdateBrokerRequest.

        Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.

        :return: The auto_minor_version_upgrade of this UpdateBrokerRequest.
        :rtype: bool
        """
        return self._auto_minor_version_upgrade

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, auto_minor_version_upgrade):
        """Sets the auto_minor_version_upgrade of this UpdateBrokerRequest.

        Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.

        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this UpdateBrokerRequest.
        :type auto_minor_version_upgrade: bool
        """

        self._auto_minor_version_upgrade = auto_minor_version_upgrade

    @property
    def configuration(self):
        """Gets the configuration of this UpdateBrokerRequest.


        :return: The configuration of this UpdateBrokerRequest.
        :rtype: CreateBrokerRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UpdateBrokerRequest.


        :param configuration: The configuration of this UpdateBrokerRequest.
        :type configuration: CreateBrokerRequestConfiguration
        """

        self._configuration = configuration

    @property
    def engine_version(self):
        """Gets the engine_version of this UpdateBrokerRequest.

        The broker engine version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.

        :return: The engine_version of this UpdateBrokerRequest.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this UpdateBrokerRequest.

        The broker engine version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.

        :param engine_version: The engine_version of this UpdateBrokerRequest.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def host_instance_type(self):
        """Gets the host_instance_type of this UpdateBrokerRequest.

        The broker's host instance type to upgrade to. For a list of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\">Broker instance types</a>.

        :return: The host_instance_type of this UpdateBrokerRequest.
        :rtype: str
        """
        return self._host_instance_type

    @host_instance_type.setter
    def host_instance_type(self, host_instance_type):
        """Sets the host_instance_type of this UpdateBrokerRequest.

        The broker's host instance type to upgrade to. For a list of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\">Broker instance types</a>.

        :param host_instance_type: The host_instance_type of this UpdateBrokerRequest.
        :type host_instance_type: str
        """

        self._host_instance_type = host_instance_type

    @property
    def ldap_server_metadata(self):
        """Gets the ldap_server_metadata of this UpdateBrokerRequest.


        :return: The ldap_server_metadata of this UpdateBrokerRequest.
        :rtype: CreateBrokerRequestLdapServerMetadata
        """
        return self._ldap_server_metadata

    @ldap_server_metadata.setter
    def ldap_server_metadata(self, ldap_server_metadata):
        """Sets the ldap_server_metadata of this UpdateBrokerRequest.


        :param ldap_server_metadata: The ldap_server_metadata of this UpdateBrokerRequest.
        :type ldap_server_metadata: CreateBrokerRequestLdapServerMetadata
        """

        self._ldap_server_metadata = ldap_server_metadata

    @property
    def logs(self):
        """Gets the logs of this UpdateBrokerRequest.


        :return: The logs of this UpdateBrokerRequest.
        :rtype: CreateBrokerRequestLogs
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this UpdateBrokerRequest.


        :param logs: The logs of this UpdateBrokerRequest.
        :type logs: CreateBrokerRequestLogs
        """

        self._logs = logs

    @property
    def maintenance_window_start_time(self):
        """Gets the maintenance_window_start_time of this UpdateBrokerRequest.


        :return: The maintenance_window_start_time of this UpdateBrokerRequest.
        :rtype: CreateBrokerRequestMaintenanceWindowStartTime
        """
        return self._maintenance_window_start_time

    @maintenance_window_start_time.setter
    def maintenance_window_start_time(self, maintenance_window_start_time):
        """Sets the maintenance_window_start_time of this UpdateBrokerRequest.


        :param maintenance_window_start_time: The maintenance_window_start_time of this UpdateBrokerRequest.
        :type maintenance_window_start_time: CreateBrokerRequestMaintenanceWindowStartTime
        """

        self._maintenance_window_start_time = maintenance_window_start_time

    @property
    def security_groups(self):
        """Gets the security_groups of this UpdateBrokerRequest.

        The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.

        :return: The security_groups of this UpdateBrokerRequest.
        :rtype: List[str]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this UpdateBrokerRequest.

        The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.

        :param security_groups: The security_groups of this UpdateBrokerRequest.
        :type security_groups: List[str]
        """

        self._security_groups = security_groups

    @property
    def data_replication_mode(self):
        """Gets the data_replication_mode of this UpdateBrokerRequest.

        Specifies whether a broker is a part of a data replication pair.

        :return: The data_replication_mode of this UpdateBrokerRequest.
        :rtype: str
        """
        return self._data_replication_mode

    @data_replication_mode.setter
    def data_replication_mode(self, data_replication_mode):
        """Sets the data_replication_mode of this UpdateBrokerRequest.

        Specifies whether a broker is a part of a data replication pair.

        :param data_replication_mode: The data_replication_mode of this UpdateBrokerRequest.
        :type data_replication_mode: str
        """
        allowed_values = ["NONE", "CRDR"]  # noqa: E501
        if data_replication_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `data_replication_mode` ({0}), must be one of {1}"
                .format(data_replication_mode, allowed_values)
            )

        self._data_replication_mode = data_replication_mode
