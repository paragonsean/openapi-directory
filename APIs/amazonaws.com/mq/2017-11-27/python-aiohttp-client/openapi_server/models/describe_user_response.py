# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_user_response_pending import DescribeUserResponsePending
from openapi_server import util


class DescribeUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broker_id: str=None, console_access: bool=None, groups: List=None, pending: DescribeUserResponsePending=None, username: str=None, replication_user: bool=None):
        """DescribeUserResponse - a model defined in OpenAPI

        :param broker_id: The broker_id of this DescribeUserResponse.
        :param console_access: The console_access of this DescribeUserResponse.
        :param groups: The groups of this DescribeUserResponse.
        :param pending: The pending of this DescribeUserResponse.
        :param username: The username of this DescribeUserResponse.
        :param replication_user: The replication_user of this DescribeUserResponse.
        """
        self.openapi_types = {
            'broker_id': str,
            'console_access': bool,
            'groups': List,
            'pending': DescribeUserResponsePending,
            'username': str,
            'replication_user': bool
        }

        self.attribute_map = {
            'broker_id': 'BrokerId',
            'console_access': 'ConsoleAccess',
            'groups': 'Groups',
            'pending': 'Pending',
            'username': 'Username',
            'replication_user': 'ReplicationUser'
        }

        self._broker_id = broker_id
        self._console_access = console_access
        self._groups = groups
        self._pending = pending
        self._username = username
        self._replication_user = replication_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeUserResponse of this DescribeUserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broker_id(self):
        """Gets the broker_id of this DescribeUserResponse.


        :return: The broker_id of this DescribeUserResponse.
        :rtype: str
        """
        return self._broker_id

    @broker_id.setter
    def broker_id(self, broker_id):
        """Sets the broker_id of this DescribeUserResponse.


        :param broker_id: The broker_id of this DescribeUserResponse.
        :type broker_id: str
        """

        self._broker_id = broker_id

    @property
    def console_access(self):
        """Gets the console_access of this DescribeUserResponse.


        :return: The console_access of this DescribeUserResponse.
        :rtype: bool
        """
        return self._console_access

    @console_access.setter
    def console_access(self, console_access):
        """Sets the console_access of this DescribeUserResponse.


        :param console_access: The console_access of this DescribeUserResponse.
        :type console_access: bool
        """

        self._console_access = console_access

    @property
    def groups(self):
        """Gets the groups of this DescribeUserResponse.


        :return: The groups of this DescribeUserResponse.
        :rtype: List
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DescribeUserResponse.


        :param groups: The groups of this DescribeUserResponse.
        :type groups: List
        """

        self._groups = groups

    @property
    def pending(self):
        """Gets the pending of this DescribeUserResponse.


        :return: The pending of this DescribeUserResponse.
        :rtype: DescribeUserResponsePending
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this DescribeUserResponse.


        :param pending: The pending of this DescribeUserResponse.
        :type pending: DescribeUserResponsePending
        """

        self._pending = pending

    @property
    def username(self):
        """Gets the username of this DescribeUserResponse.


        :return: The username of this DescribeUserResponse.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DescribeUserResponse.


        :param username: The username of this DescribeUserResponse.
        :type username: str
        """

        self._username = username

    @property
    def replication_user(self):
        """Gets the replication_user of this DescribeUserResponse.


        :return: The replication_user of this DescribeUserResponse.
        :rtype: bool
        """
        return self._replication_user

    @replication_user.setter
    def replication_user(self, replication_user):
        """Sets the replication_user of this DescribeUserResponse.


        :param replication_user: The replication_user of this DescribeUserResponse.
        :type replication_user: bool
        """

        self._replication_user = replication_user
