# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LdapServerMetadataOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosts: List=None, role_base: str=None, role_name: str=None, role_search_matching: str=None, role_search_subtree: bool=None, service_account_username: str=None, user_base: str=None, user_role_name: str=None, user_search_matching: str=None, user_search_subtree: bool=None):
        """LdapServerMetadataOutput - a model defined in OpenAPI

        :param hosts: The hosts of this LdapServerMetadataOutput.
        :param role_base: The role_base of this LdapServerMetadataOutput.
        :param role_name: The role_name of this LdapServerMetadataOutput.
        :param role_search_matching: The role_search_matching of this LdapServerMetadataOutput.
        :param role_search_subtree: The role_search_subtree of this LdapServerMetadataOutput.
        :param service_account_username: The service_account_username of this LdapServerMetadataOutput.
        :param user_base: The user_base of this LdapServerMetadataOutput.
        :param user_role_name: The user_role_name of this LdapServerMetadataOutput.
        :param user_search_matching: The user_search_matching of this LdapServerMetadataOutput.
        :param user_search_subtree: The user_search_subtree of this LdapServerMetadataOutput.
        """
        self.openapi_types = {
            'hosts': List,
            'role_base': str,
            'role_name': str,
            'role_search_matching': str,
            'role_search_subtree': bool,
            'service_account_username': str,
            'user_base': str,
            'user_role_name': str,
            'user_search_matching': str,
            'user_search_subtree': bool
        }

        self.attribute_map = {
            'hosts': 'Hosts',
            'role_base': 'RoleBase',
            'role_name': 'RoleName',
            'role_search_matching': 'RoleSearchMatching',
            'role_search_subtree': 'RoleSearchSubtree',
            'service_account_username': 'ServiceAccountUsername',
            'user_base': 'UserBase',
            'user_role_name': 'UserRoleName',
            'user_search_matching': 'UserSearchMatching',
            'user_search_subtree': 'UserSearchSubtree'
        }

        self._hosts = hosts
        self._role_base = role_base
        self._role_name = role_name
        self._role_search_matching = role_search_matching
        self._role_search_subtree = role_search_subtree
        self._service_account_username = service_account_username
        self._user_base = user_base
        self._user_role_name = user_role_name
        self._user_search_matching = user_search_matching
        self._user_search_subtree = user_search_subtree

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LdapServerMetadataOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LdapServerMetadataOutput of this LdapServerMetadataOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosts(self):
        """Gets the hosts of this LdapServerMetadataOutput.


        :return: The hosts of this LdapServerMetadataOutput.
        :rtype: List
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this LdapServerMetadataOutput.


        :param hosts: The hosts of this LdapServerMetadataOutput.
        :type hosts: List
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")

        self._hosts = hosts

    @property
    def role_base(self):
        """Gets the role_base of this LdapServerMetadataOutput.


        :return: The role_base of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._role_base

    @role_base.setter
    def role_base(self, role_base):
        """Sets the role_base of this LdapServerMetadataOutput.


        :param role_base: The role_base of this LdapServerMetadataOutput.
        :type role_base: str
        """
        if role_base is None:
            raise ValueError("Invalid value for `role_base`, must not be `None`")

        self._role_base = role_base

    @property
    def role_name(self):
        """Gets the role_name of this LdapServerMetadataOutput.


        :return: The role_name of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this LdapServerMetadataOutput.


        :param role_name: The role_name of this LdapServerMetadataOutput.
        :type role_name: str
        """

        self._role_name = role_name

    @property
    def role_search_matching(self):
        """Gets the role_search_matching of this LdapServerMetadataOutput.


        :return: The role_search_matching of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._role_search_matching

    @role_search_matching.setter
    def role_search_matching(self, role_search_matching):
        """Sets the role_search_matching of this LdapServerMetadataOutput.


        :param role_search_matching: The role_search_matching of this LdapServerMetadataOutput.
        :type role_search_matching: str
        """
        if role_search_matching is None:
            raise ValueError("Invalid value for `role_search_matching`, must not be `None`")

        self._role_search_matching = role_search_matching

    @property
    def role_search_subtree(self):
        """Gets the role_search_subtree of this LdapServerMetadataOutput.


        :return: The role_search_subtree of this LdapServerMetadataOutput.
        :rtype: bool
        """
        return self._role_search_subtree

    @role_search_subtree.setter
    def role_search_subtree(self, role_search_subtree):
        """Sets the role_search_subtree of this LdapServerMetadataOutput.


        :param role_search_subtree: The role_search_subtree of this LdapServerMetadataOutput.
        :type role_search_subtree: bool
        """

        self._role_search_subtree = role_search_subtree

    @property
    def service_account_username(self):
        """Gets the service_account_username of this LdapServerMetadataOutput.


        :return: The service_account_username of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._service_account_username

    @service_account_username.setter
    def service_account_username(self, service_account_username):
        """Sets the service_account_username of this LdapServerMetadataOutput.


        :param service_account_username: The service_account_username of this LdapServerMetadataOutput.
        :type service_account_username: str
        """
        if service_account_username is None:
            raise ValueError("Invalid value for `service_account_username`, must not be `None`")

        self._service_account_username = service_account_username

    @property
    def user_base(self):
        """Gets the user_base of this LdapServerMetadataOutput.


        :return: The user_base of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._user_base

    @user_base.setter
    def user_base(self, user_base):
        """Sets the user_base of this LdapServerMetadataOutput.


        :param user_base: The user_base of this LdapServerMetadataOutput.
        :type user_base: str
        """
        if user_base is None:
            raise ValueError("Invalid value for `user_base`, must not be `None`")

        self._user_base = user_base

    @property
    def user_role_name(self):
        """Gets the user_role_name of this LdapServerMetadataOutput.


        :return: The user_role_name of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._user_role_name

    @user_role_name.setter
    def user_role_name(self, user_role_name):
        """Sets the user_role_name of this LdapServerMetadataOutput.


        :param user_role_name: The user_role_name of this LdapServerMetadataOutput.
        :type user_role_name: str
        """

        self._user_role_name = user_role_name

    @property
    def user_search_matching(self):
        """Gets the user_search_matching of this LdapServerMetadataOutput.


        :return: The user_search_matching of this LdapServerMetadataOutput.
        :rtype: str
        """
        return self._user_search_matching

    @user_search_matching.setter
    def user_search_matching(self, user_search_matching):
        """Sets the user_search_matching of this LdapServerMetadataOutput.


        :param user_search_matching: The user_search_matching of this LdapServerMetadataOutput.
        :type user_search_matching: str
        """
        if user_search_matching is None:
            raise ValueError("Invalid value for `user_search_matching`, must not be `None`")

        self._user_search_matching = user_search_matching

    @property
    def user_search_subtree(self):
        """Gets the user_search_subtree of this LdapServerMetadataOutput.


        :return: The user_search_subtree of this LdapServerMetadataOutput.
        :rtype: bool
        """
        return self._user_search_subtree

    @user_search_subtree.setter
    def user_search_subtree(self, user_search_subtree):
        """Sets the user_search_subtree of this LdapServerMetadataOutput.


        :param user_search_subtree: The user_search_subtree of this LdapServerMetadataOutput.
        :type user_search_subtree: bool
        """

        self._user_search_subtree = user_search_subtree
