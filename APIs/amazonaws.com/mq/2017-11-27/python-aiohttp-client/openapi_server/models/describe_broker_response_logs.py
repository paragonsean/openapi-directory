# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logs_summary_pending import LogsSummaryPending
from openapi_server import util


class DescribeBrokerResponseLogs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit: bool=None, audit_log_group: str=None, general: bool=None, general_log_group: str=None, pending: LogsSummaryPending=None):
        """DescribeBrokerResponseLogs - a model defined in OpenAPI

        :param audit: The audit of this DescribeBrokerResponseLogs.
        :param audit_log_group: The audit_log_group of this DescribeBrokerResponseLogs.
        :param general: The general of this DescribeBrokerResponseLogs.
        :param general_log_group: The general_log_group of this DescribeBrokerResponseLogs.
        :param pending: The pending of this DescribeBrokerResponseLogs.
        """
        self.openapi_types = {
            'audit': bool,
            'audit_log_group': str,
            'general': bool,
            'general_log_group': str,
            'pending': LogsSummaryPending
        }

        self.attribute_map = {
            'audit': 'Audit',
            'audit_log_group': 'AuditLogGroup',
            'general': 'General',
            'general_log_group': 'GeneralLogGroup',
            'pending': 'Pending'
        }

        self._audit = audit
        self._audit_log_group = audit_log_group
        self._general = general
        self._general_log_group = general_log_group
        self._pending = pending

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBrokerResponseLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBrokerResponse_Logs of this DescribeBrokerResponseLogs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit(self):
        """Gets the audit of this DescribeBrokerResponseLogs.


        :return: The audit of this DescribeBrokerResponseLogs.
        :rtype: bool
        """
        return self._audit

    @audit.setter
    def audit(self, audit):
        """Sets the audit of this DescribeBrokerResponseLogs.


        :param audit: The audit of this DescribeBrokerResponseLogs.
        :type audit: bool
        """

        self._audit = audit

    @property
    def audit_log_group(self):
        """Gets the audit_log_group of this DescribeBrokerResponseLogs.


        :return: The audit_log_group of this DescribeBrokerResponseLogs.
        :rtype: str
        """
        return self._audit_log_group

    @audit_log_group.setter
    def audit_log_group(self, audit_log_group):
        """Sets the audit_log_group of this DescribeBrokerResponseLogs.


        :param audit_log_group: The audit_log_group of this DescribeBrokerResponseLogs.
        :type audit_log_group: str
        """

        self._audit_log_group = audit_log_group

    @property
    def general(self):
        """Gets the general of this DescribeBrokerResponseLogs.


        :return: The general of this DescribeBrokerResponseLogs.
        :rtype: bool
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this DescribeBrokerResponseLogs.


        :param general: The general of this DescribeBrokerResponseLogs.
        :type general: bool
        """
        if general is None:
            raise ValueError("Invalid value for `general`, must not be `None`")

        self._general = general

    @property
    def general_log_group(self):
        """Gets the general_log_group of this DescribeBrokerResponseLogs.


        :return: The general_log_group of this DescribeBrokerResponseLogs.
        :rtype: str
        """
        return self._general_log_group

    @general_log_group.setter
    def general_log_group(self, general_log_group):
        """Sets the general_log_group of this DescribeBrokerResponseLogs.


        :param general_log_group: The general_log_group of this DescribeBrokerResponseLogs.
        :type general_log_group: str
        """
        if general_log_group is None:
            raise ValueError("Invalid value for `general_log_group`, must not be `None`")

        self._general_log_group = general_log_group

    @property
    def pending(self):
        """Gets the pending of this DescribeBrokerResponseLogs.


        :return: The pending of this DescribeBrokerResponseLogs.
        :rtype: LogsSummaryPending
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this DescribeBrokerResponseLogs.


        :param pending: The pending of this DescribeBrokerResponseLogs.
        :type pending: LogsSummaryPending
        """

        self._pending = pending
