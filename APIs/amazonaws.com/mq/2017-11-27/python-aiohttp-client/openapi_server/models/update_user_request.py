# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, console_access: bool=None, groups: List[str]=None, password: str=None, replication_user: bool=None):
        """UpdateUserRequest - a model defined in OpenAPI

        :param console_access: The console_access of this UpdateUserRequest.
        :param groups: The groups of this UpdateUserRequest.
        :param password: The password of this UpdateUserRequest.
        :param replication_user: The replication_user of this UpdateUserRequest.
        """
        self.openapi_types = {
            'console_access': bool,
            'groups': List[str],
            'password': str,
            'replication_user': bool
        }

        self.attribute_map = {
            'console_access': 'consoleAccess',
            'groups': 'groups',
            'password': 'password',
            'replication_user': 'replicationUser'
        }

        self._console_access = console_access
        self._groups = groups
        self._password = password
        self._replication_user = replication_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUser_request of this UpdateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def console_access(self):
        """Gets the console_access of this UpdateUserRequest.

        Enables access to the the ActiveMQ Web Console for the ActiveMQ user.

        :return: The console_access of this UpdateUserRequest.
        :rtype: bool
        """
        return self._console_access

    @console_access.setter
    def console_access(self, console_access):
        """Sets the console_access of this UpdateUserRequest.

        Enables access to the the ActiveMQ Web Console for the ActiveMQ user.

        :param console_access: The console_access of this UpdateUserRequest.
        :type console_access: bool
        """

        self._console_access = console_access

    @property
    def groups(self):
        """Gets the groups of this UpdateUserRequest.

        The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.

        :return: The groups of this UpdateUserRequest.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UpdateUserRequest.

        The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.

        :param groups: The groups of this UpdateUserRequest.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def password(self):
        """Gets the password of this UpdateUserRequest.

        The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).

        :return: The password of this UpdateUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateUserRequest.

        The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).

        :param password: The password of this UpdateUserRequest.
        :type password: str
        """

        self._password = password

    @property
    def replication_user(self):
        """Gets the replication_user of this UpdateUserRequest.

        Defines whether the user is intended for data replication.

        :return: The replication_user of this UpdateUserRequest.
        :rtype: bool
        """
        return self._replication_user

    @replication_user.setter
    def replication_user(self, replication_user):
        """Sets the replication_user of this UpdateUserRequest.

        Defines whether the user is intended for data replication.

        :param replication_user: The replication_user of this UpdateUserRequest.
        :type replication_user: bool
        """

        self._replication_user = replication_user
