# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.day_of_week import DayOfWeek
from openapi_server import util


class DescribeBrokerResponseMaintenanceWindowStartTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: DayOfWeek=None, time_of_day: str=None, time_zone: str=None):
        """DescribeBrokerResponseMaintenanceWindowStartTime - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :param time_of_day: The time_of_day of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :param time_zone: The time_zone of this DescribeBrokerResponseMaintenanceWindowStartTime.
        """
        self.openapi_types = {
            'day_of_week': DayOfWeek,
            'time_of_day': str,
            'time_zone': str
        }

        self.attribute_map = {
            'day_of_week': 'DayOfWeek',
            'time_of_day': 'TimeOfDay',
            'time_zone': 'TimeZone'
        }

        self._day_of_week = day_of_week
        self._time_of_day = time_of_day
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBrokerResponseMaintenanceWindowStartTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBrokerResponse_MaintenanceWindowStartTime of this DescribeBrokerResponseMaintenanceWindowStartTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this DescribeBrokerResponseMaintenanceWindowStartTime.


        :return: The day_of_week of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :rtype: DayOfWeek
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this DescribeBrokerResponseMaintenanceWindowStartTime.


        :param day_of_week: The day_of_week of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :type day_of_week: DayOfWeek
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")

        self._day_of_week = day_of_week

    @property
    def time_of_day(self):
        """Gets the time_of_day of this DescribeBrokerResponseMaintenanceWindowStartTime.


        :return: The time_of_day of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this DescribeBrokerResponseMaintenanceWindowStartTime.


        :param time_of_day: The time_of_day of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :type time_of_day: str
        """
        if time_of_day is None:
            raise ValueError("Invalid value for `time_of_day`, must not be `None`")

        self._time_of_day = time_of_day

    @property
    def time_zone(self):
        """Gets the time_zone of this DescribeBrokerResponseMaintenanceWindowStartTime.


        :return: The time_zone of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DescribeBrokerResponseMaintenanceWindowStartTime.


        :param time_zone: The time_zone of this DescribeBrokerResponseMaintenanceWindowStartTime.
        :type time_zone: str
        """

        self._time_zone = time_zone
