# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_broker_request_configuration import CreateBrokerRequestConfiguration
from openapi_server.models.create_broker_request_encryption_options import CreateBrokerRequestEncryptionOptions
from openapi_server.models.create_broker_request_ldap_server_metadata import CreateBrokerRequestLdapServerMetadata
from openapi_server.models.create_broker_request_logs import CreateBrokerRequestLogs
from openapi_server.models.create_broker_request_maintenance_window_start_time import CreateBrokerRequestMaintenanceWindowStartTime
from openapi_server.models.user import User
from openapi_server import util


class CreateBrokerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_strategy: str=None, auto_minor_version_upgrade: bool=None, broker_name: str=None, configuration: CreateBrokerRequestConfiguration=None, creator_request_id: str=None, deployment_mode: str=None, encryption_options: CreateBrokerRequestEncryptionOptions=None, engine_type: str=None, engine_version: str=None, host_instance_type: str=None, ldap_server_metadata: CreateBrokerRequestLdapServerMetadata=None, logs: CreateBrokerRequestLogs=None, maintenance_window_start_time: CreateBrokerRequestMaintenanceWindowStartTime=None, publicly_accessible: bool=None, security_groups: List[str]=None, storage_type: str=None, subnet_ids: List[str]=None, tags: Dict[str, str]=None, users: List[User]=None, data_replication_mode: str=None, data_replication_primary_broker_arn: str=None):
        """CreateBrokerRequest - a model defined in OpenAPI

        :param authentication_strategy: The authentication_strategy of this CreateBrokerRequest.
        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this CreateBrokerRequest.
        :param broker_name: The broker_name of this CreateBrokerRequest.
        :param configuration: The configuration of this CreateBrokerRequest.
        :param creator_request_id: The creator_request_id of this CreateBrokerRequest.
        :param deployment_mode: The deployment_mode of this CreateBrokerRequest.
        :param encryption_options: The encryption_options of this CreateBrokerRequest.
        :param engine_type: The engine_type of this CreateBrokerRequest.
        :param engine_version: The engine_version of this CreateBrokerRequest.
        :param host_instance_type: The host_instance_type of this CreateBrokerRequest.
        :param ldap_server_metadata: The ldap_server_metadata of this CreateBrokerRequest.
        :param logs: The logs of this CreateBrokerRequest.
        :param maintenance_window_start_time: The maintenance_window_start_time of this CreateBrokerRequest.
        :param publicly_accessible: The publicly_accessible of this CreateBrokerRequest.
        :param security_groups: The security_groups of this CreateBrokerRequest.
        :param storage_type: The storage_type of this CreateBrokerRequest.
        :param subnet_ids: The subnet_ids of this CreateBrokerRequest.
        :param tags: The tags of this CreateBrokerRequest.
        :param users: The users of this CreateBrokerRequest.
        :param data_replication_mode: The data_replication_mode of this CreateBrokerRequest.
        :param data_replication_primary_broker_arn: The data_replication_primary_broker_arn of this CreateBrokerRequest.
        """
        self.openapi_types = {
            'authentication_strategy': str,
            'auto_minor_version_upgrade': bool,
            'broker_name': str,
            'configuration': CreateBrokerRequestConfiguration,
            'creator_request_id': str,
            'deployment_mode': str,
            'encryption_options': CreateBrokerRequestEncryptionOptions,
            'engine_type': str,
            'engine_version': str,
            'host_instance_type': str,
            'ldap_server_metadata': CreateBrokerRequestLdapServerMetadata,
            'logs': CreateBrokerRequestLogs,
            'maintenance_window_start_time': CreateBrokerRequestMaintenanceWindowStartTime,
            'publicly_accessible': bool,
            'security_groups': List[str],
            'storage_type': str,
            'subnet_ids': List[str],
            'tags': Dict[str, str],
            'users': List[User],
            'data_replication_mode': str,
            'data_replication_primary_broker_arn': str
        }

        self.attribute_map = {
            'authentication_strategy': 'authenticationStrategy',
            'auto_minor_version_upgrade': 'autoMinorVersionUpgrade',
            'broker_name': 'brokerName',
            'configuration': 'configuration',
            'creator_request_id': 'creatorRequestId',
            'deployment_mode': 'deploymentMode',
            'encryption_options': 'encryptionOptions',
            'engine_type': 'engineType',
            'engine_version': 'engineVersion',
            'host_instance_type': 'hostInstanceType',
            'ldap_server_metadata': 'ldapServerMetadata',
            'logs': 'logs',
            'maintenance_window_start_time': 'maintenanceWindowStartTime',
            'publicly_accessible': 'publiclyAccessible',
            'security_groups': 'securityGroups',
            'storage_type': 'storageType',
            'subnet_ids': 'subnetIds',
            'tags': 'tags',
            'users': 'users',
            'data_replication_mode': 'dataReplicationMode',
            'data_replication_primary_broker_arn': 'dataReplicationPrimaryBrokerArn'
        }

        self._authentication_strategy = authentication_strategy
        self._auto_minor_version_upgrade = auto_minor_version_upgrade
        self._broker_name = broker_name
        self._configuration = configuration
        self._creator_request_id = creator_request_id
        self._deployment_mode = deployment_mode
        self._encryption_options = encryption_options
        self._engine_type = engine_type
        self._engine_version = engine_version
        self._host_instance_type = host_instance_type
        self._ldap_server_metadata = ldap_server_metadata
        self._logs = logs
        self._maintenance_window_start_time = maintenance_window_start_time
        self._publicly_accessible = publicly_accessible
        self._security_groups = security_groups
        self._storage_type = storage_type
        self._subnet_ids = subnet_ids
        self._tags = tags
        self._users = users
        self._data_replication_mode = data_replication_mode
        self._data_replication_primary_broker_arn = data_replication_primary_broker_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBrokerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBroker_request of this CreateBrokerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_strategy(self):
        """Gets the authentication_strategy of this CreateBrokerRequest.

        Optional. The authentication strategy used to secure the broker. The default is SIMPLE.

        :return: The authentication_strategy of this CreateBrokerRequest.
        :rtype: str
        """
        return self._authentication_strategy

    @authentication_strategy.setter
    def authentication_strategy(self, authentication_strategy):
        """Sets the authentication_strategy of this CreateBrokerRequest.

        Optional. The authentication strategy used to secure the broker. The default is SIMPLE.

        :param authentication_strategy: The authentication_strategy of this CreateBrokerRequest.
        :type authentication_strategy: str
        """
        allowed_values = ["SIMPLE", "LDAP"]  # noqa: E501
        if authentication_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_strategy` ({0}), must be one of {1}"
                .format(authentication_strategy, allowed_values)
            )

        self._authentication_strategy = authentication_strategy

    @property
    def auto_minor_version_upgrade(self):
        """Gets the auto_minor_version_upgrade of this CreateBrokerRequest.

        Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.

        :return: The auto_minor_version_upgrade of this CreateBrokerRequest.
        :rtype: bool
        """
        return self._auto_minor_version_upgrade

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, auto_minor_version_upgrade):
        """Sets the auto_minor_version_upgrade of this CreateBrokerRequest.

        Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.

        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this CreateBrokerRequest.
        :type auto_minor_version_upgrade: bool
        """
        if auto_minor_version_upgrade is None:
            raise ValueError("Invalid value for `auto_minor_version_upgrade`, must not be `None`")

        self._auto_minor_version_upgrade = auto_minor_version_upgrade

    @property
    def broker_name(self):
        """Gets the broker_name of this CreateBrokerRequest.

        <p>Required. The broker's name. This value must be unique in your Amazon Web Services account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker names are not intended to be used for private or sensitive data.</p></important>

        :return: The broker_name of this CreateBrokerRequest.
        :rtype: str
        """
        return self._broker_name

    @broker_name.setter
    def broker_name(self, broker_name):
        """Sets the broker_name of this CreateBrokerRequest.

        <p>Required. The broker's name. This value must be unique in your Amazon Web Services account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker names are not intended to be used for private or sensitive data.</p></important>

        :param broker_name: The broker_name of this CreateBrokerRequest.
        :type broker_name: str
        """
        if broker_name is None:
            raise ValueError("Invalid value for `broker_name`, must not be `None`")

        self._broker_name = broker_name

    @property
    def configuration(self):
        """Gets the configuration of this CreateBrokerRequest.


        :return: The configuration of this CreateBrokerRequest.
        :rtype: CreateBrokerRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateBrokerRequest.


        :param configuration: The configuration of this CreateBrokerRequest.
        :type configuration: CreateBrokerRequestConfiguration
        """

        self._configuration = configuration

    @property
    def creator_request_id(self):
        """Gets the creator_request_id of this CreateBrokerRequest.

        <p>The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action.</p> <note><p>We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.</p></note>

        :return: The creator_request_id of this CreateBrokerRequest.
        :rtype: str
        """
        return self._creator_request_id

    @creator_request_id.setter
    def creator_request_id(self, creator_request_id):
        """Sets the creator_request_id of this CreateBrokerRequest.

        <p>The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action.</p> <note><p>We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.</p></note>

        :param creator_request_id: The creator_request_id of this CreateBrokerRequest.
        :type creator_request_id: str
        """

        self._creator_request_id = creator_request_id

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this CreateBrokerRequest.

        The broker's deployment mode.

        :return: The deployment_mode of this CreateBrokerRequest.
        :rtype: str
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this CreateBrokerRequest.

        The broker's deployment mode.

        :param deployment_mode: The deployment_mode of this CreateBrokerRequest.
        :type deployment_mode: str
        """
        allowed_values = ["SINGLE_INSTANCE", "ACTIVE_STANDBY_MULTI_AZ", "CLUSTER_MULTI_AZ"]  # noqa: E501
        if deployment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def encryption_options(self):
        """Gets the encryption_options of this CreateBrokerRequest.


        :return: The encryption_options of this CreateBrokerRequest.
        :rtype: CreateBrokerRequestEncryptionOptions
        """
        return self._encryption_options

    @encryption_options.setter
    def encryption_options(self, encryption_options):
        """Sets the encryption_options of this CreateBrokerRequest.


        :param encryption_options: The encryption_options of this CreateBrokerRequest.
        :type encryption_options: CreateBrokerRequestEncryptionOptions
        """

        self._encryption_options = encryption_options

    @property
    def engine_type(self):
        """Gets the engine_type of this CreateBrokerRequest.

        The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.

        :return: The engine_type of this CreateBrokerRequest.
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this CreateBrokerRequest.

        The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.

        :param engine_type: The engine_type of this CreateBrokerRequest.
        :type engine_type: str
        """
        allowed_values = ["ACTIVEMQ", "RABBITMQ"]  # noqa: E501
        if engine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def engine_version(self):
        """Gets the engine_version of this CreateBrokerRequest.

        Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.

        :return: The engine_version of this CreateBrokerRequest.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this CreateBrokerRequest.

        Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.

        :param engine_version: The engine_version of this CreateBrokerRequest.
        :type engine_version: str
        """
        if engine_version is None:
            raise ValueError("Invalid value for `engine_version`, must not be `None`")

        self._engine_version = engine_version

    @property
    def host_instance_type(self):
        """Gets the host_instance_type of this CreateBrokerRequest.

        Required. The broker's instance type.

        :return: The host_instance_type of this CreateBrokerRequest.
        :rtype: str
        """
        return self._host_instance_type

    @host_instance_type.setter
    def host_instance_type(self, host_instance_type):
        """Sets the host_instance_type of this CreateBrokerRequest.

        Required. The broker's instance type.

        :param host_instance_type: The host_instance_type of this CreateBrokerRequest.
        :type host_instance_type: str
        """
        if host_instance_type is None:
            raise ValueError("Invalid value for `host_instance_type`, must not be `None`")

        self._host_instance_type = host_instance_type

    @property
    def ldap_server_metadata(self):
        """Gets the ldap_server_metadata of this CreateBrokerRequest.


        :return: The ldap_server_metadata of this CreateBrokerRequest.
        :rtype: CreateBrokerRequestLdapServerMetadata
        """
        return self._ldap_server_metadata

    @ldap_server_metadata.setter
    def ldap_server_metadata(self, ldap_server_metadata):
        """Sets the ldap_server_metadata of this CreateBrokerRequest.


        :param ldap_server_metadata: The ldap_server_metadata of this CreateBrokerRequest.
        :type ldap_server_metadata: CreateBrokerRequestLdapServerMetadata
        """

        self._ldap_server_metadata = ldap_server_metadata

    @property
    def logs(self):
        """Gets the logs of this CreateBrokerRequest.


        :return: The logs of this CreateBrokerRequest.
        :rtype: CreateBrokerRequestLogs
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this CreateBrokerRequest.


        :param logs: The logs of this CreateBrokerRequest.
        :type logs: CreateBrokerRequestLogs
        """

        self._logs = logs

    @property
    def maintenance_window_start_time(self):
        """Gets the maintenance_window_start_time of this CreateBrokerRequest.


        :return: The maintenance_window_start_time of this CreateBrokerRequest.
        :rtype: CreateBrokerRequestMaintenanceWindowStartTime
        """
        return self._maintenance_window_start_time

    @maintenance_window_start_time.setter
    def maintenance_window_start_time(self, maintenance_window_start_time):
        """Sets the maintenance_window_start_time of this CreateBrokerRequest.


        :param maintenance_window_start_time: The maintenance_window_start_time of this CreateBrokerRequest.
        :type maintenance_window_start_time: CreateBrokerRequestMaintenanceWindowStartTime
        """

        self._maintenance_window_start_time = maintenance_window_start_time

    @property
    def publicly_accessible(self):
        """Gets the publicly_accessible of this CreateBrokerRequest.

        Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.

        :return: The publicly_accessible of this CreateBrokerRequest.
        :rtype: bool
        """
        return self._publicly_accessible

    @publicly_accessible.setter
    def publicly_accessible(self, publicly_accessible):
        """Sets the publicly_accessible of this CreateBrokerRequest.

        Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.

        :param publicly_accessible: The publicly_accessible of this CreateBrokerRequest.
        :type publicly_accessible: bool
        """
        if publicly_accessible is None:
            raise ValueError("Invalid value for `publicly_accessible`, must not be `None`")

        self._publicly_accessible = publicly_accessible

    @property
    def security_groups(self):
        """Gets the security_groups of this CreateBrokerRequest.

        The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.

        :return: The security_groups of this CreateBrokerRequest.
        :rtype: List[str]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this CreateBrokerRequest.

        The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.

        :param security_groups: The security_groups of this CreateBrokerRequest.
        :type security_groups: List[str]
        """

        self._security_groups = security_groups

    @property
    def storage_type(self):
        """Gets the storage_type of this CreateBrokerRequest.

        <p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>

        :return: The storage_type of this CreateBrokerRequest.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this CreateBrokerRequest.

        <p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>

        :param storage_type: The storage_type of this CreateBrokerRequest.
        :type storage_type: str
        """
        allowed_values = ["EBS", "EFS"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this CreateBrokerRequest.

        <p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your Amazon Web Services account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your Amazon Web Services account.</p></important>

        :return: The subnet_ids of this CreateBrokerRequest.
        :rtype: List[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this CreateBrokerRequest.

        <p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your Amazon Web Services account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your Amazon Web Services account.</p></important>

        :param subnet_ids: The subnet_ids of this CreateBrokerRequest.
        :type subnet_ids: List[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def tags(self):
        """Gets the tags of this CreateBrokerRequest.

        Create tags when creating the broker.

        :return: The tags of this CreateBrokerRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateBrokerRequest.

        Create tags when creating the broker.

        :param tags: The tags of this CreateBrokerRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def users(self):
        """Gets the users of this CreateBrokerRequest.

        The list of broker users (persons or applications) who can access queues and topics. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.

        :return: The users of this CreateBrokerRequest.
        :rtype: List[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this CreateBrokerRequest.

        The list of broker users (persons or applications) who can access queues and topics. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.

        :param users: The users of this CreateBrokerRequest.
        :type users: List[User]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users

    @property
    def data_replication_mode(self):
        """Gets the data_replication_mode of this CreateBrokerRequest.

        Specifies whether a broker is a part of a data replication pair.

        :return: The data_replication_mode of this CreateBrokerRequest.
        :rtype: str
        """
        return self._data_replication_mode

    @data_replication_mode.setter
    def data_replication_mode(self, data_replication_mode):
        """Sets the data_replication_mode of this CreateBrokerRequest.

        Specifies whether a broker is a part of a data replication pair.

        :param data_replication_mode: The data_replication_mode of this CreateBrokerRequest.
        :type data_replication_mode: str
        """
        allowed_values = ["NONE", "CRDR"]  # noqa: E501
        if data_replication_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `data_replication_mode` ({0}), must be one of {1}"
                .format(data_replication_mode, allowed_values)
            )

        self._data_replication_mode = data_replication_mode

    @property
    def data_replication_primary_broker_arn(self):
        """Gets the data_replication_primary_broker_arn of this CreateBrokerRequest.

        The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when dataReplicationMode is set to CRDR.

        :return: The data_replication_primary_broker_arn of this CreateBrokerRequest.
        :rtype: str
        """
        return self._data_replication_primary_broker_arn

    @data_replication_primary_broker_arn.setter
    def data_replication_primary_broker_arn(self, data_replication_primary_broker_arn):
        """Sets the data_replication_primary_broker_arn of this CreateBrokerRequest.

        The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when dataReplicationMode is set to CRDR.

        :param data_replication_primary_broker_arn: The data_replication_primary_broker_arn of this CreateBrokerRequest.
        :type data_replication_primary_broker_arn: str
        """

        self._data_replication_primary_broker_arn = data_replication_primary_broker_arn
