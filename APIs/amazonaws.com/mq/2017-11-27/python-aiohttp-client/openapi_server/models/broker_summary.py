# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broker_state import BrokerState
from openapi_server.models.deployment_mode import DeploymentMode
from openapi_server.models.engine_type import EngineType
from openapi_server import util


class BrokerSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, broker_arn: str=None, broker_id: str=None, broker_name: str=None, broker_state: BrokerState=None, created: datetime=None, deployment_mode: DeploymentMode=None, engine_type: EngineType=None, host_instance_type: str=None):
        """BrokerSummary - a model defined in OpenAPI

        :param broker_arn: The broker_arn of this BrokerSummary.
        :param broker_id: The broker_id of this BrokerSummary.
        :param broker_name: The broker_name of this BrokerSummary.
        :param broker_state: The broker_state of this BrokerSummary.
        :param created: The created of this BrokerSummary.
        :param deployment_mode: The deployment_mode of this BrokerSummary.
        :param engine_type: The engine_type of this BrokerSummary.
        :param host_instance_type: The host_instance_type of this BrokerSummary.
        """
        self.openapi_types = {
            'broker_arn': str,
            'broker_id': str,
            'broker_name': str,
            'broker_state': BrokerState,
            'created': datetime,
            'deployment_mode': DeploymentMode,
            'engine_type': EngineType,
            'host_instance_type': str
        }

        self.attribute_map = {
            'broker_arn': 'BrokerArn',
            'broker_id': 'BrokerId',
            'broker_name': 'BrokerName',
            'broker_state': 'BrokerState',
            'created': 'Created',
            'deployment_mode': 'DeploymentMode',
            'engine_type': 'EngineType',
            'host_instance_type': 'HostInstanceType'
        }

        self._broker_arn = broker_arn
        self._broker_id = broker_id
        self._broker_name = broker_name
        self._broker_state = broker_state
        self._created = created
        self._deployment_mode = deployment_mode
        self._engine_type = engine_type
        self._host_instance_type = host_instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrokerSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrokerSummary of this BrokerSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def broker_arn(self):
        """Gets the broker_arn of this BrokerSummary.


        :return: The broker_arn of this BrokerSummary.
        :rtype: str
        """
        return self._broker_arn

    @broker_arn.setter
    def broker_arn(self, broker_arn):
        """Sets the broker_arn of this BrokerSummary.


        :param broker_arn: The broker_arn of this BrokerSummary.
        :type broker_arn: str
        """

        self._broker_arn = broker_arn

    @property
    def broker_id(self):
        """Gets the broker_id of this BrokerSummary.


        :return: The broker_id of this BrokerSummary.
        :rtype: str
        """
        return self._broker_id

    @broker_id.setter
    def broker_id(self, broker_id):
        """Sets the broker_id of this BrokerSummary.


        :param broker_id: The broker_id of this BrokerSummary.
        :type broker_id: str
        """

        self._broker_id = broker_id

    @property
    def broker_name(self):
        """Gets the broker_name of this BrokerSummary.


        :return: The broker_name of this BrokerSummary.
        :rtype: str
        """
        return self._broker_name

    @broker_name.setter
    def broker_name(self, broker_name):
        """Sets the broker_name of this BrokerSummary.


        :param broker_name: The broker_name of this BrokerSummary.
        :type broker_name: str
        """

        self._broker_name = broker_name

    @property
    def broker_state(self):
        """Gets the broker_state of this BrokerSummary.


        :return: The broker_state of this BrokerSummary.
        :rtype: BrokerState
        """
        return self._broker_state

    @broker_state.setter
    def broker_state(self, broker_state):
        """Sets the broker_state of this BrokerSummary.


        :param broker_state: The broker_state of this BrokerSummary.
        :type broker_state: BrokerState
        """

        self._broker_state = broker_state

    @property
    def created(self):
        """Gets the created of this BrokerSummary.


        :return: The created of this BrokerSummary.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BrokerSummary.


        :param created: The created of this BrokerSummary.
        :type created: datetime
        """

        self._created = created

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this BrokerSummary.


        :return: The deployment_mode of this BrokerSummary.
        :rtype: DeploymentMode
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this BrokerSummary.


        :param deployment_mode: The deployment_mode of this BrokerSummary.
        :type deployment_mode: DeploymentMode
        """
        if deployment_mode is None:
            raise ValueError("Invalid value for `deployment_mode`, must not be `None`")

        self._deployment_mode = deployment_mode

    @property
    def engine_type(self):
        """Gets the engine_type of this BrokerSummary.


        :return: The engine_type of this BrokerSummary.
        :rtype: EngineType
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this BrokerSummary.


        :param engine_type: The engine_type of this BrokerSummary.
        :type engine_type: EngineType
        """
        if engine_type is None:
            raise ValueError("Invalid value for `engine_type`, must not be `None`")

        self._engine_type = engine_type

    @property
    def host_instance_type(self):
        """Gets the host_instance_type of this BrokerSummary.


        :return: The host_instance_type of this BrokerSummary.
        :rtype: str
        """
        return self._host_instance_type

    @host_instance_type.setter
    def host_instance_type(self, host_instance_type):
        """Sets the host_instance_type of this BrokerSummary.


        :param host_instance_type: The host_instance_type of this BrokerSummary.
        :type host_instance_type: str
        """

        self._host_instance_type = host_instance_type
