openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "Amazon MQ is a managed message broker service for Apache ActiveMQ\
    \ and RabbitMQ that makes it easy to set up and operate message brokers in the\
    \ cloud. A message broker allows software applications and components to communicate\
    \ using various programming languages, operating systems, and formal messaging\
    \ protocols."
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AmazonMQ
  version: 2017-11-27
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: mq
  x-aws-signingName: mq
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mq-2017-11-27.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/mq/
servers:
- description: The AmazonMQ multi-region endpoint
  url: "http://mq.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AmazonMQ multi-region endpoint
  url: "https://mq.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AmazonMQ endpoint for China (Beijing) and China (Ningxia)
  url: "http://mq.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AmazonMQ endpoint for China (Beijing) and China (Ningxia)
  url: "https://mq.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /v1/broker-engine-types:
    get:
      description: Describe available engine types and versions.
      operationId: describe_broker_engine_types
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Filter response by engine type.
        explode: true
        in: query
        name: engineType
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of brokers that Amazon MQ can return per page
          (20 by default). This value must be an integer from 5 to 100.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "The token that specifies the next page of results Amazon MQ\
          \ should return. To request the first page, leave nextToken empty."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBrokerEngineTypesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /v1/broker-instance-options:
    get:
      description: Describe available broker instance options.
      operationId: describe_broker_instance_options
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Filter response by engine type.
        explode: true
        in: query
        name: engineType
        required: false
        schema:
          type: string
        style: form
      - description: Filter response by host instance type.
        explode: true
        in: query
        name: hostInstanceType
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of brokers that Amazon MQ can return per page
          (20 by default). This value must be an integer from 5 to 100.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "The token that specifies the next page of results Amazon MQ\
          \ should return. To request the first page, leave nextToken empty."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: Filter response by storage type.
        explode: true
        in: query
        name: storageType
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBrokerInstanceOptionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /v1/brokers:
    get:
      description: Returns a list of all brokers.
      operationId: list_brokers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of brokers that Amazon MQ can return per page
          (20 by default). This value must be an integer from 5 to 100.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "The token that specifies the next page of results Amazon MQ\
          \ should return. To request the first page, leave nextToken empty."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBrokersResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: "<p>Creates a broker. Note: This API is asynchronous.</p> <p>To\
        \ create a broker, you must either use the AmazonMQFullAccess IAM policy or\
        \ include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p>\
        \ <p>This permission is required to allow Amazon MQ to create an elastic network\
        \ interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p>\
        \ <p>This permission is required to attach the ENI to the broker instance.</p></li>\
        \ <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li>\
        \ <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li>\
        \ <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li>\
        \ <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li>\
        \ <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul>\
        \ <p>For more information, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user\"\
        >Create an IAM User and Get Your Amazon Web Services Credentials</a> and <a\
        \ href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface\"\
        >Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the\
        \ <i>Amazon MQ Developer Guide</i>.</p>"
      operationId: create_broker
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBroker_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBrokerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
          description: UnauthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/brokers/{broker-id}:
    delete:
      description: "Deletes a broker. Note: This API is asynchronous."
      operationId: delete_broker
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBrokerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns information about the specified broker.
      operationId: describe_broker
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeBrokerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Adds a pending configuration change to a broker.
      operationId: update_broker
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBroker_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBrokerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/brokers/{broker-id}/promote:
    post:
      description: Promotes a data replication replica broker to the primary broker
        role.
      operationId: promote
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promote_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/brokers/{broker-id}/reboot:
    post:
      description: "Reboots a broker. Note: This API is asynchronous."
      operationId: reboot_broker
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RebootBrokerResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /v1/brokers/{broker-id}/users:
    get:
      description: Returns a list of all ActiveMQ users.
      operationId: list_users
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of brokers that Amazon MQ can return per page
          (20 by default). This value must be an integer from 5 to 100.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "The token that specifies the next page of results Amazon MQ\
          \ should return. To request the first page, leave nextToken empty."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /v1/brokers/{broker-id}/users/{username}:
    delete:
      description: Deletes an ActiveMQ user.
      operationId: delete_user
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      - description: "The username of the ActiveMQ user. This value can contain only\
          \ alphanumeric characters, dashes, periods, underscores, and tildes (- .\
          \ _ ~). This value must be 2-100 characters long."
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Returns information about an ActiveMQ user.
      operationId: describe_user
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      - description: "The username of the ActiveMQ user. This value can contain only\
          \ alphanumeric characters, dashes, periods, underscores, and tildes (- .\
          \ _ ~). This value must be 2-100 characters long."
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: "<p>Creates an ActiveMQ user.</p> <important><p>Do not add personally\
        \ identifiable information (PII) or other confidential or sensitive information\
        \ in broker usernames. Broker usernames are accessible to other Amazon Web\
        \ Services services, including CloudWatch Logs. Broker usernames are not intended\
        \ to be used for private or sensitive data.</p></important>"
      operationId: create_user
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      - description: "The username of the ActiveMQ user. This value can contain only\
          \ alphanumeric characters, dashes, periods, underscores, and tildes (- .\
          \ _ ~). This value must be 2-100 characters long."
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
    put:
      description: Updates the information for an ActiveMQ user.
      operationId: update_user
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the broker.
        explode: false
        in: path
        name: broker-id
        required: true
        schema:
          type: string
        style: simple
      - description: "The username of the ActiveMQ user. This value can contain only\
          \ alphanumeric characters, dashes, periods, underscores, and tildes (- .\
          \ _ ~). This value must be 2-100 characters long."
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/configurations:
    get:
      description: Returns a list of all configurations.
      operationId: list_configurations
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of brokers that Amazon MQ can return per page
          (20 by default). This value must be an integer from 5 to 100.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "The token that specifies the next page of results Amazon MQ\
          \ should return. To request the first page, leave nextToken empty."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigurationsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates a new configuration for the specified configuration name.
        Amazon MQ uses the default configuration (the engine type and version).
      operationId: create_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfiguration_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/configurations/{configuration-id}:
    get:
      description: Returns information about the specified configuration.
      operationId: describe_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the configuration.
        explode: false
        in: path
        name: configuration-id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates the specified configuration.
      operationId: update_configuration
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the configuration.
        explode: false
        in: path
        name: configuration-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfiguration_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConfigurationResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/configurations/{configuration-id}/revisions:
    get:
      description: Returns a list of all revisions for the specified configuration.
      operationId: list_configuration_revisions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the configuration.
        explode: false
        in: path
        name: configuration-id
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of brokers that Amazon MQ can return per page
          (20 by default). This value must be an integer from 5 to 100.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "The token that specifies the next page of results Amazon MQ\
          \ should return. To request the first page, leave nextToken empty."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConfigurationRevisionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /v1/configurations/{configuration-id}/revisions/{configuration-revision}:
    get:
      description: Returns the specified configuration revision for the specified
        configuration.
      operationId: describe_configuration_revision
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique ID that Amazon MQ generates for the configuration.
        explode: false
        in: path
        name: configuration-id
        required: true
        schema:
          type: string
        style: simple
      - description: The revision of the configuration.
        explode: false
        in: path
        name: configuration-revision
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeConfigurationRevisionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /v1/tags/{resource-arn}:
    get:
      description: Lists tags for a resource.
      operationId: list_tags
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource tag.
        explode: false
        in: path
        name: resource-arn
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Add a tag to a resource.
      operationId: create_tags
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource tag.
        explode: false
        in: path
        name: resource-arn
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTags_request'
        required: true
        x-body-name: body
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/tags/{resource-arn}#tagKeys:
    delete:
      description: Removes a tag from a resource.
      operationId: delete_tags
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource tag.
        explode: false
        in: path
        name: resource-arn
        required: true
        schema:
          type: string
        style: simple
      - description: An array of tag keys to delete
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/__string'
          type: array
        style: form
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateBrokerResponse:
      example:
        BrokerId: ""
        BrokerArn: ""
      properties:
        BrokerArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The broker's Amazon Resource Name (ARN).
            xml:
              name: brokerArn
          title: BrokerArn
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
          title: BrokerId
      title: CreateBrokerResponse
      type: object
    __string:
      title: __string
      type: string
    __integer:
      type: integer
    __boolean:
      type: boolean
    __listOf__string:
      items:
        $ref: '#/components/schemas/__string'
      type: array
    DayOfWeek:
      enum:
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
      - SUNDAY
      title: DayOfWeek
      type: string
    User:
      description: "A user associated with the broker. For Amazon MQ for RabbitMQ\
        \ brokers, one and only one administrative user is accepted and created when\
        \ a broker is first provisioned. All subsequent broker users are created by\
        \ making RabbitMQ API calls directly to brokers or via the RabbitMQ web console."
      properties:
        ConsoleAccess:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables access to the ActiveMQ Web Console for the ActiveMQ
              user. Does not apply to RabbitMQ brokers.
            xml:
              name: consoleAccess
          title: ConsoleAccess
        Groups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of groups (20 maximum) to which the ActiveMQ user\
              \ belongs. This value can contain only alphanumeric characters, dashes,\
              \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
              \ characters long. Does not apply to RabbitMQ brokers."
            xml:
              name: groups
          title: Groups
        Password:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The password of the user. This value must be at\
              \ least 12 characters long, must contain at least 4 unique characters,\
              \ and must not contain commas, colons, or equal signs (,:=)."
            xml:
              name: password
          title: Password
        Username:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "<p>The username of the broker user. The following restrictions\
              \ apply to broker usernames:</p> <ul><li><p>For Amazon MQ for ActiveMQ\
              \ brokers, this value can contain only alphanumeric characters, dashes,\
              \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
              \ characters long.</p></li> <li><p>para>For Amazon MQ for RabbitMQ brokers,\
              \ this value can contain only alphanumeric characters, dashes, periods,\
              \ underscores (- . _). This value must not contain a tilde (~) character.\
              \ Amazon MQ prohibts using guest as a valid usename. This value must\
              \ be 2-100 characters long.</p></para></li></ul> <important><p>Do not\
              \ add personally identifiable information (PII) or other confidential\
              \ or sensitive information in broker usernames. Broker usernames are\
              \ accessible to other Amazon Web Services services, including CloudWatch\
              \ Logs. Broker usernames are not intended to be used for private or\
              \ sensitive data.</p></important>"
            xml:
              name: username
          title: Username
        ReplicationUser:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Defines if this user is intended for CRDR replication purposes.
            xml:
              name: replicationUser
          title: ReplicationUser
      required:
      - Password
      - Username
      title: User
      type: object
    BadRequestException: {}
    UnauthorizedException: {}
    InternalServerErrorException: {}
    ConflictException: {}
    ForbiddenException: {}
    CreateConfigurationResponse:
      example:
        LatestRevision:
          Description: ""
          Revision: ""
          Created: ""
        AuthenticationStrategy: ""
        Id: ""
        Arn: ""
        Created: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The Amazon Resource Name (ARN) of the configuration.
            xml:
              name: arn
          title: Arn
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
          title: AuthenticationStrategy
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: Required. The date and time of the configuration.
            xml:
              name: created
          title: Created
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
          title: Id
        LatestRevision:
          $ref: '#/components/schemas/CreateConfigurationResponse_LatestRevision'
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The name of the configuration. This value can\
              \ contain only alphanumeric characters, dashes, periods, underscores,\
              \ and tildes (- . _ ~). This value must be 1-150 characters long."
            xml:
              name: name
          title: Name
      title: CreateConfigurationResponse
      type: object
    NotFoundException: {}
    CreateUserResponse:
      properties: {}
      type: object
    DeleteBrokerResponse:
      example:
        BrokerId: ""
      properties:
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
          title: BrokerId
      title: DeleteBrokerResponse
      type: object
    DeleteUserResponse:
      properties: {}
      type: object
    DescribeBrokerResponse:
      example:
        SecurityGroups: ""
        BrokerState: ""
        DataReplicationMetadata:
          DataReplicationRole: ""
          DataReplicationCounterpart:
            BrokerId: ""
            Region: ""
        ActionsRequired: ""
        PendingSecurityGroups: ""
        AuthenticationStrategy: ""
        BrokerInstances: ""
        Users: ""
        SubnetIds: ""
        Created: ""
        PendingHostInstanceType: ""
        DeploymentMode: ""
        EngineType: ""
        Configurations:
          History: ""
          Current:
            Revision: ""
            Id: ""
          Pending:
            Revision: ""
            Id: ""
        EncryptionOptions:
          KmsKeyId: ""
          UseAwsOwnedKey: ""
        PendingEngineVersion: ""
        Tags: ""
        EngineVersion: ""
        StorageType: ""
        BrokerId: ""
        PendingAuthenticationStrategy: ""
        MaintenanceWindowStartTime:
          DayOfWeek: ""
          TimeOfDay: ""
          TimeZone: ""
        HostInstanceType: ""
        AutoMinorVersionUpgrade: ""
        Logs:
          Audit: ""
          GeneralLogGroup: ""
          General: ""
          AuditLogGroup: ""
          Pending:
            Audit: ""
            General: ""
        DataReplicationMode: ""
        BrokerName: ""
        PendingLdapServerMetadata:
          Hosts: ""
          RoleName: ""
          UserRoleName: ""
          UserSearchMatching: ""
          UserBase: ""
          UserSearchSubtree: ""
          RoleSearchMatching: ""
          ServiceAccountUsername: ""
          RoleBase: ""
          RoleSearchSubtree: ""
        LdapServerMetadata:
          Hosts: ""
          RoleName: ""
          UserRoleName: ""
          UserSearchMatching: ""
          UserBase: ""
          UserSearchSubtree: ""
          RoleSearchMatching: ""
          ServiceAccountUsername: ""
          RoleBase: ""
          RoleSearchSubtree: ""
        PendingDataReplicationMode: ""
        PendingDataReplicationMetadata:
          DataReplicationRole: ""
          DataReplicationCounterpart:
            BrokerId: ""
            Region: ""
        PubliclyAccessible: ""
        BrokerArn: ""
      properties:
        ActionsRequired:
          allOf:
          - $ref: '#/components/schemas/__listOfActionRequired'
          - description: Actions required for a broker.
            xml:
              name: actionsRequired
          title: ActionsRequired
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: The authentication strategy used to secure the broker. The
              default is SIMPLE.
            xml:
              name: authenticationStrategy
          title: AuthenticationStrategy
        AutoMinorVersionUpgrade:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Enables automatic upgrades to new minor versions for brokers,\
              \ as new versions are released and supported by Amazon MQ. Automatic\
              \ upgrades occur during the scheduled maintenance window of the broker\
              \ or after a manual broker reboot."
            xml:
              name: autoMinorVersionUpgrade
          title: AutoMinorVersionUpgrade
        BrokerArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The broker's Amazon Resource Name (ARN).
            xml:
              name: brokerArn
          title: BrokerArn
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
          title: BrokerId
        BrokerInstances:
          allOf:
          - $ref: '#/components/schemas/__listOfBrokerInstance'
          - description: A list of information about allocated brokers.
            xml:
              name: brokerInstances
          title: BrokerInstances
        BrokerName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker's name. This value must be unique in your Amazon\
              \ Web Services account account, 1-50 characters long, must contain only\
              \ letters, numbers, dashes, and underscores, and must not contain white\
              \ spaces, brackets, wildcard characters, or special characters."
            xml:
              name: brokerName
          title: BrokerName
        BrokerState:
          allOf:
          - $ref: '#/components/schemas/BrokerState'
          - description: The broker's status.
            xml:
              name: brokerState
          title: BrokerState
        Configurations:
          $ref: '#/components/schemas/DescribeBrokerResponse_Configurations'
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The time when the broker was created.
            xml:
              name: created
          title: Created
        DeploymentMode:
          allOf:
          - $ref: '#/components/schemas/DeploymentMode'
          - description: The broker's deployment mode.
            xml:
              name: deploymentMode
          title: DeploymentMode
        EncryptionOptions:
          $ref: '#/components/schemas/DescribeBrokerResponse_EncryptionOptions'
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: "The type of broker engine. Currently, Amazon MQ supports\
              \ ACTIVEMQ and RABBITMQ."
            xml:
              name: engineType
          title: EngineType
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker engine's version. For a list of supported engine\
              \ versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
          title: EngineVersion
        HostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The broker's instance type.
            xml:
              name: hostInstanceType
          title: HostInstanceType
        LdapServerMetadata:
          $ref: '#/components/schemas/DescribeBrokerResponse_LdapServerMetadata'
        Logs:
          $ref: '#/components/schemas/DescribeBrokerResponse_Logs'
        MaintenanceWindowStartTime:
          $ref: '#/components/schemas/DescribeBrokerResponse_MaintenanceWindowStartTime'
        PendingAuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: The authentication strategy that will be applied when the
              broker is rebooted. The default is SIMPLE.
            xml:
              name: pendingAuthenticationStrategy
          title: PendingAuthenticationStrategy
        PendingEngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker engine version to upgrade to. For a list of supported\
              \ engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: pendingEngineVersion
          title: PendingEngineVersion
        PendingHostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker's host instance type to upgrade to. For a list\
              \ of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\
              >Broker instance types</a>."
            xml:
              name: pendingHostInstanceType
          title: PendingHostInstanceType
        PendingLdapServerMetadata:
          $ref: '#/components/schemas/DescribeBrokerResponse_PendingLdapServerMetadata'
        PendingSecurityGroups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The list of pending security groups to authorize connections
              to brokers.
            xml:
              name: pendingSecurityGroups
          title: PendingSecurityGroups
        PubliclyAccessible:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables connections from applications outside of the VPC
              that hosts the broker's subnets.
            xml:
              name: publiclyAccessible
          title: PubliclyAccessible
        SecurityGroups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of rules (1 minimum, 125 maximum) that authorize\
              \ connections to brokers."
            xml:
              name: securityGroups
          title: SecurityGroups
        StorageType:
          allOf:
          - $ref: '#/components/schemas/BrokerStorageType'
          - description: The broker's storage type.
            xml:
              name: storageType
          title: StorageType
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The list of groups that define which subnets and IP ranges
              the broker can use from different Availability Zones.
            xml:
              name: subnetIds
          title: SubnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: The list of all tags associated with this broker.
            xml:
              name: tags
          title: Tags
        Users:
          allOf:
          - $ref: '#/components/schemas/__listOfUserSummary'
          - description: The list of all broker usernames for the specified broker.
            xml:
              name: users
          title: Users
        DataReplicationMetadata:
          $ref: '#/components/schemas/DescribeBrokerResponse_DataReplicationMetadata'
        DataReplicationMode:
          allOf:
          - $ref: '#/components/schemas/DataReplicationMode'
          - description: Describes whether this broker is a part of a data replication
              pair.
            xml:
              name: dataReplicationMode
          title: DataReplicationMode
        PendingDataReplicationMetadata:
          $ref: '#/components/schemas/DescribeBrokerResponse_PendingDataReplicationMetadata'
        PendingDataReplicationMode:
          allOf:
          - $ref: '#/components/schemas/DataReplicationMode'
          - description: Describes whether this broker will be a part of a data replication
              pair after reboot.
            xml:
              name: pendingDataReplicationMode
          title: PendingDataReplicationMode
      title: DescribeBrokerResponse
      type: object
    DescribeBrokerEngineTypesResponse:
      example:
        NextToken: ""
        BrokerEngineTypes: ""
        MaxResults: ""
      properties:
        BrokerEngineTypes:
          allOf:
          - $ref: '#/components/schemas/__listOfBrokerEngineType'
          - description: List of available engine types and versions.
            xml:
              name: brokerEngineTypes
          title: BrokerEngineTypes
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__integerMin5Max100'
          - description: Required. The maximum number of engine types that can be
              returned per page (20 by default). This value must be an integer from
              5 to 100.
            xml:
              name: maxResults
          title: MaxResults
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The token that specifies the next page of results Amazon\
              \ MQ should return. To request the first page, leave nextToken empty."
            xml:
              name: nextToken
          title: NextToken
      title: DescribeBrokerEngineTypesResponse
      type: object
    DescribeBrokerInstanceOptionsResponse:
      example:
        NextToken: ""
        MaxResults: ""
        BrokerInstanceOptions: ""
      properties:
        BrokerInstanceOptions:
          allOf:
          - $ref: '#/components/schemas/__listOfBrokerInstanceOption'
          - description: List of available broker instance options.
            xml:
              name: brokerInstanceOptions
          title: BrokerInstanceOptions
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__integerMin5Max100'
          - description: Required. The maximum number of instance options that can
              be returned per page (20 by default). This value must be an integer
              from 5 to 100.
            xml:
              name: maxResults
          title: MaxResults
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The token that specifies the next page of results Amazon\
              \ MQ should return. To request the first page, leave nextToken empty."
            xml:
              name: nextToken
          title: NextToken
      title: DescribeBrokerInstanceOptionsResponse
      type: object
    DescribeConfigurationResponse:
      example:
        Description: ""
        EngineVersion: ""
        LatestRevision:
          Description: ""
          Revision: ""
          Created: ""
        AuthenticationStrategy: ""
        EngineType: ""
        Id: ""
        Arn: ""
        Tags: ""
        Created: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The ARN of the configuration.
            xml:
              name: arn
          title: Arn
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
          title: AuthenticationStrategy
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: Required. The date and time of the configuration revision.
            xml:
              name: created
          title: Created
        Description:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The description of the configuration.
            xml:
              name: description
          title: Description
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: "Required. The type of broker engine. Currently, Amazon MQ\
              \ supports ACTIVEMQ and RABBITMQ."
            xml:
              name: engineType
          title: EngineType
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The broker engine's version. For a list of supported\
              \ engine versions, see, <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
          title: EngineVersion
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
          title: Id
        LatestRevision:
          $ref: '#/components/schemas/DescribeConfigurationResponse_LatestRevision'
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The name of the configuration. This value can\
              \ contain only alphanumeric characters, dashes, periods, underscores,\
              \ and tildes (- . _ ~). This value must be 1-150 characters long."
            xml:
              name: name
          title: Name
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: The list of all tags associated with this configuration.
            xml:
              name: tags
          title: Tags
      title: DescribeConfigurationResponse
      type: object
    DescribeConfigurationRevisionResponse:
      example:
        Description: ""
        Data: ""
        ConfigurationId: ""
        Created: ""
      properties:
        ConfigurationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: configurationId
          title: ConfigurationId
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: Required. The date and time of the configuration.
            xml:
              name: created
          title: Created
        Data:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Amazon MQ for ActiveMQ: the base64-encoded XML configuration.\
              \ Amazon MQ for RabbitMQ: base64-encoded Cuttlefish."
            xml:
              name: data
          title: Data
        Description:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The description of the configuration.
            xml:
              name: description
          title: Description
      title: DescribeConfigurationRevisionResponse
      type: object
    DescribeUserResponse:
      example:
        ReplicationUser: ""
        BrokerId: ""
        Username: ""
        Groups: ""
        ConsoleAccess: ""
        Pending:
          Groups: ""
          ConsoleAccess: ""
          PendingChange: ""
      properties:
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              broker.
            xml:
              name: brokerId
          title: BrokerId
        ConsoleAccess:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables access to the the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
          title: ConsoleAccess
        Groups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of groups (20 maximum) to which the ActiveMQ user\
              \ belongs. This value can contain only alphanumeric characters, dashes,\
              \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
              \ characters long."
            xml:
              name: groups
          title: Groups
        Pending:
          $ref: '#/components/schemas/DescribeUserResponse_Pending'
        Username:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The username of the ActiveMQ user. This value\
              \ can contain only alphanumeric characters, dashes, periods, underscores,\
              \ and tildes (- . _ ~). This value must be 2-100 characters long."
            xml:
              name: username
          title: Username
        ReplicationUser:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Describes whether the user is intended for data replication
            xml:
              name: replicationUser
          title: ReplicationUser
      title: DescribeUserResponse
      type: object
    ListBrokersResponse:
      example:
        NextToken: ""
        BrokerSummaries: ""
      properties:
        BrokerSummaries:
          allOf:
          - $ref: '#/components/schemas/__listOfBrokerSummary'
          - description: A list of information about all brokers.
            xml:
              name: brokerSummaries
          title: BrokerSummaries
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The token that specifies the next page of results Amazon\
              \ MQ should return. To request the first page, leave nextToken empty."
            xml:
              name: nextToken
          title: NextToken
      title: ListBrokersResponse
      type: object
    ListConfigurationRevisionsResponse:
      example:
        NextToken: ""
        MaxResults: ""
        Revisions: ""
        ConfigurationId: ""
      properties:
        ConfigurationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the configuration.
            xml:
              name: configurationId
          title: ConfigurationId
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: The maximum number of configuration revisions that can be
              returned per page (20 by default). This value must be an integer from
              5 to 100.
            xml:
              name: maxResults
          title: MaxResults
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The token that specifies the next page of results Amazon\
              \ MQ should return. To request the first page, leave nextToken empty."
            xml:
              name: nextToken
          title: NextToken
        Revisions:
          allOf:
          - $ref: '#/components/schemas/__listOfConfigurationRevision'
          - description: The list of all revisions for the specified configuration.
            xml:
              name: revisions
          title: Revisions
      title: ListConfigurationRevisionsResponse
      type: object
    ListConfigurationsResponse:
      example:
        NextToken: ""
        MaxResults: ""
        Configurations: ""
      properties:
        Configurations:
          allOf:
          - $ref: '#/components/schemas/__listOfConfiguration'
          - description: The list of all revisions for the specified configuration.
            xml:
              name: configurations
          title: Configurations
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: The maximum number of configurations that Amazon MQ can return
              per page (20 by default). This value must be an integer from 5 to 100.
            xml:
              name: maxResults
          title: MaxResults
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The token that specifies the next page of results Amazon\
              \ MQ should return. To request the first page, leave nextToken empty."
            xml:
              name: nextToken
          title: NextToken
      title: ListConfigurationsResponse
      type: object
    ListTagsResponse:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: The key-value pair for the resource tag.
            xml:
              name: tags
          title: Tags
      title: ListTagsResponse
      type: object
    ListUsersResponse:
      example:
        NextToken: ""
        BrokerId: ""
        MaxResults: ""
        Users: ""
      properties:
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              broker.
            xml:
              name: brokerId
          title: BrokerId
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__integerMin5Max100'
          - description: Required. The maximum number of ActiveMQ users that can be
              returned per page (20 by default). This value must be an integer from
              5 to 100.
            xml:
              name: maxResults
          title: MaxResults
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The token that specifies the next page of results Amazon\
              \ MQ should return. To request the first page, leave nextToken empty."
            xml:
              name: nextToken
          title: NextToken
        Users:
          allOf:
          - $ref: '#/components/schemas/__listOfUserSummary'
          - description: Required. The list of all ActiveMQ usernames for the specified
              broker. Does not apply to RabbitMQ brokers.
            xml:
              name: users
          title: Users
      title: ListUsersResponse
      type: object
    PromoteResponse:
      example:
        BrokerId: ""
      properties:
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
          title: BrokerId
      title: PromoteResponse
      type: object
    RebootBrokerResponse:
      properties: {}
      type: object
    UpdateBrokerResponse:
      example:
        SecurityGroups: ""
        DataReplicationMetadata:
          DataReplicationRole: ""
          DataReplicationCounterpart:
            BrokerId: ""
            Region: ""
        EngineVersion: ""
        Configuration:
          Revision: ""
          Id: ""
        BrokerId: ""
        AuthenticationStrategy: ""
        MaintenanceWindowStartTime:
          DayOfWeek: ""
          TimeOfDay: ""
          TimeZone: ""
        HostInstanceType: ""
        AutoMinorVersionUpgrade: ""
        Logs:
          Audit: ""
          General: ""
        DataReplicationMode: ""
        LdapServerMetadata:
          Hosts: ""
          RoleName: ""
          UserRoleName: ""
          UserSearchMatching: ""
          UserBase: ""
          UserSearchSubtree: ""
          RoleSearchMatching: ""
          ServiceAccountUsername: ""
          RoleBase: ""
          RoleSearchSubtree: ""
        PendingDataReplicationMode: ""
        PendingDataReplicationMetadata:
          DataReplicationRole: ""
          DataReplicationCounterpart:
            BrokerId: ""
            Region: ""
      properties:
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy used to secure the
              broker. The default is SIMPLE.
            xml:
              name: authenticationStrategy
          title: AuthenticationStrategy
        AutoMinorVersionUpgrade:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: The new boolean value that specifies whether broker engines
              automatically upgrade to new minor versions as new versions are released
              and supported by Amazon MQ.
            xml:
              name: autoMinorVersionUpgrade
          title: AutoMinorVersionUpgrade
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              broker.
            xml:
              name: brokerId
          title: BrokerId
        Configuration:
          $ref: '#/components/schemas/UpdateBrokerResponse_Configuration'
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker engine version to upgrade to. For a list of supported\
              \ engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
          title: EngineVersion
        HostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker's host instance type to upgrade to. For a list\
              \ of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\
              >Broker instance types</a>."
            xml:
              name: hostInstanceType
          title: HostInstanceType
        LdapServerMetadata:
          $ref: '#/components/schemas/UpdateBrokerResponse_LdapServerMetadata'
        Logs:
          $ref: '#/components/schemas/UpdateBrokerResponse_Logs'
        MaintenanceWindowStartTime:
          $ref: '#/components/schemas/DescribeBrokerResponse_MaintenanceWindowStartTime'
        SecurityGroups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of security groups (1 minimum, 5 maximum) that\
              \ authorizes connections to brokers."
            xml:
              name: securityGroups
          title: SecurityGroups
        DataReplicationMetadata:
          $ref: '#/components/schemas/DescribeBrokerResponse_DataReplicationMetadata'
        DataReplicationMode:
          allOf:
          - $ref: '#/components/schemas/DataReplicationMode'
          - description: Describes whether this broker is a part of a data replication
              pair.
            xml:
              name: dataReplicationMode
          title: DataReplicationMode
        PendingDataReplicationMetadata:
          $ref: '#/components/schemas/DescribeBrokerResponse_PendingDataReplicationMetadata'
        PendingDataReplicationMode:
          allOf:
          - $ref: '#/components/schemas/DataReplicationMode'
          - description: Describes whether this broker will be a part of a data replication
              pair after reboot.
            xml:
              name: pendingDataReplicationMode
          title: PendingDataReplicationMode
      title: UpdateBrokerResponse
      type: object
    UpdateConfigurationResponse:
      example:
        LatestRevision:
          Description: ""
          Revision: ""
          Created: ""
        Id: ""
        Arn: ""
        Warnings: ""
        Created: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon Resource Name (ARN) of the configuration.
            xml:
              name: arn
          title: Arn
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: Required. The date and time of the configuration.
            xml:
              name: created
          title: Created
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the configuration.
            xml:
              name: id
          title: Id
        LatestRevision:
          $ref: '#/components/schemas/CreateConfigurationResponse_LatestRevision'
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The name of the configuration. This value can contain only\
              \ alphanumeric characters, dashes, periods, underscores, and tildes\
              \ (- . _ ~). This value must be 1-150 characters long."
            xml:
              name: name
          title: Name
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOfSanitizationWarning'
          - description: The list of the first 20 warnings about the configuration
              elements or attributes that were sanitized.
            xml:
              name: warnings
          title: Warnings
      title: UpdateConfigurationResponse
      type: object
    UpdateUserResponse:
      properties: {}
      type: object
    ActionRequired:
      description: Action required for a broker.
      properties:
        ActionRequiredCode:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The code you can use to find instructions on the action required
              to resolve your broker issue.
            xml:
              name: actionRequiredCode
          title: ActionRequiredCode
        ActionRequiredInfo:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Information about the action required to resolve your broker
              issue.
            xml:
              name: actionRequiredInfo
          title: ActionRequiredInfo
      title: ActionRequired
      type: object
    AuthenticationStrategy:
      description: Optional. The authentication strategy used to secure the broker.
        The default is SIMPLE.
      enum:
      - SIMPLE
      - LDAP
      title: AuthenticationStrategy
      type: string
    AvailabilityZone:
      description: Name of the availability zone.
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Id for the availability zone.
            xml:
              name: name
          title: Name
      title: AvailabilityZone
      type: object
    EngineType:
      description: The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
      enum:
      - ACTIVEMQ
      - RABBITMQ
      title: EngineType
      type: string
    __listOfEngineVersion:
      items:
        $ref: '#/components/schemas/EngineVersion'
      type: array
    BrokerEngineType:
      description: Types of broker engines.
      properties:
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: The broker's engine type.
            xml:
              name: engineType
          title: EngineType
        EngineVersions:
          allOf:
          - $ref: '#/components/schemas/__listOfEngineVersion'
          - description: The list of engine versions.
            xml:
              name: engineVersions
          title: EngineVersions
      title: BrokerEngineType
      type: object
    BrokerInstance:
      description: Returns information about all brokers.
      properties:
        ConsoleURL:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The brokers web console URL.
            xml:
              name: consoleURL
          title: ConsoleURL
        Endpoints:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The broker's wire-level protocol endpoints.
            xml:
              name: endpoints
          title: Endpoints
        IpAddress:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The IP address of the Elastic Network Interface (ENI) attached
              to the broker. Does not apply to RabbitMQ brokers.
            xml:
              name: ipAddress
          title: IpAddress
      title: BrokerInstance
      type: object
    __listOfAvailabilityZone:
      items:
        $ref: '#/components/schemas/AvailabilityZone'
      type: array
    BrokerStorageType:
      description: <p>The broker's storage type.</p> <important><p>EFS is not supported
        for RabbitMQ engine type.</p></important>
      enum:
      - EBS
      - EFS
      title: BrokerStorageType
      type: string
    __listOfDeploymentMode:
      items:
        $ref: '#/components/schemas/DeploymentMode'
      type: array
    BrokerInstanceOption:
      description: Option for host instance type.
      properties:
        AvailabilityZones:
          allOf:
          - $ref: '#/components/schemas/__listOfAvailabilityZone'
          - description: The list of available az.
            xml:
              name: availabilityZones
          title: AvailabilityZones
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: The broker's engine type.
            xml:
              name: engineType
          title: EngineType
        HostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The broker's instance type.
            xml:
              name: hostInstanceType
          title: HostInstanceType
        StorageType:
          allOf:
          - $ref: '#/components/schemas/BrokerStorageType'
          - description: The broker's storage type.
            xml:
              name: storageType
          title: StorageType
        SupportedDeploymentModes:
          allOf:
          - $ref: '#/components/schemas/__listOfDeploymentMode'
          - description: The list of supported deployment modes.
            xml:
              name: supportedDeploymentModes
          title: SupportedDeploymentModes
        SupportedEngineVersions:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: The list of supported engine versions.
            xml:
              name: supportedEngineVersions
          title: SupportedEngineVersions
      title: BrokerInstanceOption
      type: object
    BrokerState:
      description: The broker's status.
      enum:
      - CREATION_IN_PROGRESS
      - CREATION_FAILED
      - DELETION_IN_PROGRESS
      - RUNNING
      - REBOOT_IN_PROGRESS
      - CRITICAL_ACTION_REQUIRED
      - REPLICA
      title: BrokerState
      type: string
    __timestampIso8601:
      format: date-time
      type: string
    DeploymentMode:
      description: The broker's deployment mode.
      enum:
      - SINGLE_INSTANCE
      - ACTIVE_STANDBY_MULTI_AZ
      - CLUSTER_MULTI_AZ
      title: DeploymentMode
      type: string
    BrokerSummary:
      description: Returns information about all brokers.
      properties:
        BrokerArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The broker's Amazon Resource Name (ARN).
            xml:
              name: brokerArn
          title: BrokerArn
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique ID that Amazon MQ generates for the broker.
            xml:
              name: brokerId
          title: BrokerId
        BrokerName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker's name. This value is unique in your Amazon Web\
              \ Services account, 1-50 characters long, and containing only letters,\
              \ numbers, dashes, and underscores, and must not contain white spaces,\
              \ brackets, wildcard characters, or special characters."
            xml:
              name: brokerName
          title: BrokerName
        BrokerState:
          allOf:
          - $ref: '#/components/schemas/BrokerState'
          - description: The broker's status.
            xml:
              name: brokerState
          title: BrokerState
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: The time when the broker was created.
            xml:
              name: created
          title: Created
        DeploymentMode:
          allOf:
          - $ref: '#/components/schemas/DeploymentMode'
          - description: The broker's deployment mode.
            xml:
              name: deploymentMode
          title: DeploymentMode
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: The type of broker engine.
            xml:
              name: engineType
          title: EngineType
        HostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The broker's instance type.
            xml:
              name: hostInstanceType
          title: HostInstanceType
      required:
      - DeploymentMode
      - EngineType
      title: BrokerSummary
      type: object
    ChangeType:
      description: The type of change pending for the ActiveMQ user.
      enum:
      - CREATE
      - UPDATE
      - DELETE
      title: ChangeType
      type: string
    ConfigurationRevision:
      description: Returns information about the specified configuration revision.
      properties:
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: Required. The date and time of the configuration revision.
            xml:
              name: created
          title: Created
        Description:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The description of the configuration revision.
            xml:
              name: description
          title: Description
        Revision:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: Required. The revision number of the configuration.
            xml:
              name: revision
          title: Revision
      required:
      - Created
      - Revision
      title: ConfigurationRevision
      type: object
    __mapOf__string:
      additionalProperties:
        $ref: '#/components/schemas/__string'
      type: object
    Configuration:
      description: Returns information about all configurations.
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The ARN of the configuration.
            xml:
              name: arn
          title: Arn
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
          title: AuthenticationStrategy
        Created:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          - description: Required. The date and time of the configuration revision.
            xml:
              name: created
          title: Created
        Description:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The description of the configuration.
            xml:
              name: description
          title: Description
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: "Required. The type of broker engine. Currently, Amazon MQ\
              \ supports ACTIVEMQ and RABBITMQ."
            xml:
              name: engineType
          title: EngineType
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The broker engine's version. For a list of supported\
              \ engine versions, see, <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
          title: EngineVersion
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
          title: Id
        LatestRevision:
          $ref: '#/components/schemas/DescribeConfigurationResponse_LatestRevision'
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The name of the configuration. This value can\
              \ contain only alphanumeric characters, dashes, periods, underscores,\
              \ and tildes (- . _ ~). This value must be 1-150 characters long."
            xml:
              name: name
          title: Name
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: The list of all tags associated with this configuration.
            xml:
              name: tags
          title: Tags
      required:
      - Arn
      - AuthenticationStrategy
      - Created
      - Description
      - EngineType
      - EngineVersion
      - Id
      - LatestRevision
      - Name
      title: Configuration
      type: object
    ConfigurationId:
      description: A list of information about the configuration.
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
          title: Id
        Revision:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: The revision number of the configuration.
            xml:
              name: revision
          title: Revision
      required:
      - Id
      title: ConfigurationId
      type: object
    __listOfConfigurationId:
      items:
        $ref: '#/components/schemas/ConfigurationId'
      type: array
    Configurations:
      description: Broker configuration information
      properties:
        Current:
          $ref: '#/components/schemas/Configurations_Current'
        History:
          allOf:
          - $ref: '#/components/schemas/__listOfConfigurationId'
          - description: The history of configurations applied to the broker.
            xml:
              name: history
          title: History
        Pending:
          $ref: '#/components/schemas/Configurations_Pending'
      title: Configurations
      type: object
    EncryptionOptions:
      description: Encryption options for the broker.
      properties:
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The customer master key (CMK) to use for the A KMS (KMS).\
              \ This key is used to encrypt your data at rest. If not provided, Amazon\
              \ MQ will use a default CMK to encrypt your data."
            xml:
              name: kmsKeyId
          title: KmsKeyId
        UseAwsOwnedKey:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Enables the use of an Amazon Web Services owned CMK using\
              \ KMS (KMS). Set to true by default, if no value is provided, for example,\
              \ for RabbitMQ brokers."
            xml:
              name: useAwsOwnedKey
          title: UseAwsOwnedKey
      required:
      - UseAwsOwnedKey
      title: EncryptionOptions
      type: object
    LdapServerMetadataInput:
      description: <p>Optional. The metadata of the LDAP server used to authenticate
        and authorize connections to the broker.</p> <important><p>Does not apply
        to RabbitMQ brokers.</p></important>
      properties:
        Hosts:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: Specifies the location of the LDAP server such as Directory
              Service for Microsoft Active Directory. Optional failover server.
            xml:
              name: hosts
          title: Hosts
        RoleBase:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                dc=example, dc=com.
            xml:
              name: roleBase
          title: RoleBase
        RoleName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Specifies the LDAP attribute that identifies the group name
              attribute in the object returned from the group membership query.
            xml:
              name: roleName
          title: RoleName
        RoleSearchMatching:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The LDAP search filter used to find roles within the roleBase.\
              \ The distinguished name of the user matched by userSearchMatching is\
              \ substituted into the {0} placeholder in the search filter. The client's\
              \ username is substituted into the {1} placeholder. For example, if\
              \ you set this option to (member=uid={1})for the user janedoe, the search\
              \ filter becomes (member=uid=janedoe) after string substitution. It\
              \ matches all role entries that have a member attribute equal to uid=janedoe\
              \ under the subtree selected by the roleBase."
            xml:
              name: roleSearchMatching
          title: RoleSearchMatching
        RoleSearchSubtree:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "The directory search scope for the role. If set to true,\
              \ scope is to search the entire subtree."
            xml:
              name: roleSearchSubtree
          title: RoleSearchSubtree
        ServiceAccountPassword:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountPassword
          title: ServiceAccountPassword
        ServiceAccountUsername:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountUsername
          title: ServiceAccountUsername
        UserBase:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
            xml:
              name: userBase
          title: UserBase
        UserRoleName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Specifies the name of the LDAP attribute for the user group
              membership.
            xml:
              name: userRoleName
          title: UserRoleName
        UserSearchMatching:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                                dc=com.
            xml:
              name: userSearchMatching
          title: UserSearchMatching
        UserSearchSubtree:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "The directory search scope for the user. If set to true,\
              \ scope is to search the entire subtree."
            xml:
              name: userSearchSubtree
          title: UserSearchSubtree
      required:
      - Hosts
      - RoleBase
      - RoleSearchMatching
      - ServiceAccountPassword
      - ServiceAccountUsername
      - UserBase
      - UserSearchMatching
      title: LdapServerMetadataInput
      type: object
    Logs:
      description: The list of information about logs to be enabled for the specified
        broker.
      properties:
        Audit:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables audit logging. Every user management action made
              using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
              brokers.
            xml:
              name: audit
          title: Audit
        General:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables general logging.
            xml:
              name: general
          title: General
      title: Logs
      type: object
    WeeklyStartTime:
      description: The scheduled time period relative to UTC during which Amazon MQ
        begins to apply pending updates or patches to the broker.
      properties:
        DayOfWeek:
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: Required. The day of the week.
            xml:
              name: dayOfWeek
          title: DayOfWeek
        TimeOfDay:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The time, in 24-hour format."
            xml:
              name: timeOfDay
          title: TimeOfDay
        TimeZone:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The time zone, UTC by default, in either the Country/City\
              \ format, or the UTC offset format."
            xml:
              name: timeZone
          title: TimeZone
      required:
      - DayOfWeek
      - TimeOfDay
      title: WeeklyStartTime
      type: object
    __listOfUser:
      items:
        $ref: '#/components/schemas/User'
      type: array
    DataReplicationMode:
      description: Specifies whether a broker is a part of a data replication pair.
      enum:
      - NONE
      - CRDR
      title: DataReplicationMode
      type: string
    CreateBrokerRequest:
      description: Creates a broker using the specified properties.
      example:
        SecurityGroups: ""
        DataReplicationPrimaryBrokerArn: ""
        EngineVersion: ""
        StorageType: ""
        Configuration:
          Revision: ""
          Id: ""
        AuthenticationStrategy: ""
        MaintenanceWindowStartTime:
          DayOfWeek: ""
          TimeOfDay: ""
          TimeZone: ""
        HostInstanceType: ""
        AutoMinorVersionUpgrade: ""
        Logs:
          Audit: ""
          General: ""
        Users: ""
        CreatorRequestId: ""
        SubnetIds: ""
        DataReplicationMode: ""
        BrokerName: ""
        LdapServerMetadata:
          Hosts: ""
          RoleName: ""
          UserRoleName: ""
          UserSearchMatching: ""
          UserBase: ""
          UserSearchSubtree: ""
          RoleSearchMatching: ""
          ServiceAccountUsername: ""
          RoleBase: ""
          ServiceAccountPassword: ""
          RoleSearchSubtree: ""
        DeploymentMode: ""
        EngineType: ""
        PubliclyAccessible: ""
        EncryptionOptions:
          KmsKeyId: ""
          UseAwsOwnedKey: ""
        Tags: ""
      properties:
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy used to secure the
              broker. The default is SIMPLE.
            xml:
              name: authenticationStrategy
        AutoMinorVersionUpgrade:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Enables automatic upgrades to new minor versions for brokers,\
              \ as new versions are released and supported by Amazon MQ. Automatic\
              \ upgrades occur during the scheduled maintenance window of the broker\
              \ or after a manual broker reboot. Set to true by default, if no value\
              \ is specified."
            xml:
              name: autoMinorVersionUpgrade
        BrokerName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "<p>Required. The broker's name. This value must be unique\
              \ in your Amazon Web Services account, 1-50 characters long, must contain\
              \ only letters, numbers, dashes, and underscores, and must not contain\
              \ white spaces, brackets, wildcard characters, or special characters.</p>\
              \ <important><p>Do not add personally identifiable information (PII)\
              \ or other confidential or sensitive information in broker names. Broker\
              \ names are accessible to other Amazon Web Services services, including\
              \ CloudWatch Logs. Broker names are not intended to be used for private\
              \ or sensitive data.</p></important>"
            xml:
              name: brokerName
        Configuration:
          $ref: '#/components/schemas/CreateBrokerRequest_Configuration'
        CreatorRequestId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: <p>The unique ID that the requester receives for the created
              broker. Amazon MQ passes your ID with the API action.</p> <note><p>We
              recommend using a Universally Unique Identifier (UUID) for the creatorRequestId.
              You may omit the creatorRequestId if your application doesn't require
              idempotency.</p></note>
            xml:
              name: creatorRequestId
        DeploymentMode:
          allOf:
          - $ref: '#/components/schemas/DeploymentMode'
          - description: Required. The broker's deployment mode.
            xml:
              name: deploymentMode
        EncryptionOptions:
          $ref: '#/components/schemas/DescribeBrokerResponse_EncryptionOptions'
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: "Required. The type of broker engine. Currently, Amazon MQ\
              \ supports ACTIVEMQ and RABBITMQ."
            xml:
              name: engineType
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The broker engine's version. For a list of supported\
              \ engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
        HostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The broker's instance type.
            xml:
              name: hostInstanceType
        LdapServerMetadata:
          $ref: '#/components/schemas/CreateBrokerRequest_LdapServerMetadata'
        Logs:
          $ref: '#/components/schemas/CreateBrokerRequest_Logs'
        MaintenanceWindowStartTime:
          $ref: '#/components/schemas/DescribeBrokerResponse_MaintenanceWindowStartTime'
        PubliclyAccessible:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Enables connections from applications outside of the VPC\
              \ that hosts the broker's subnets. Set to false by default, if no value\
              \ is provided."
            xml:
              name: publiclyAccessible
        SecurityGroups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of rules (1 minimum, 125 maximum) that authorize\
              \ connections to brokers."
            xml:
              name: securityGroups
        StorageType:
          allOf:
          - $ref: '#/components/schemas/BrokerStorageType'
          - description: The broker's storage type.
            xml:
              name: storageType
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "<p>The list of groups that define which subnets and IP ranges\
              \ the broker can use from different Availability Zones. If you specify\
              \ more than one subnet, the subnets must be in different Availability\
              \ Zones. Amazon MQ will not be able to create VPC endpoints for your\
              \ broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE\
              \ deployment requires one subnet (for example, the default subnet).\
              \ An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires\
              \ two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment\
              \ has no subnet requirements when deployed with public accessibility.\
              \ Deployment without public accessibility requires at least one subnet.</p>\
              \ <important><p>If you specify subnets in a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\"\
              >shared VPC</a> for a RabbitMQ broker, the associated VPC to which the\
              \ specified subnets belong must be owned by your Amazon Web Services\
              \ account. Amazon MQ will not be able to create VPC endpoints in VPCs\
              \ that are not owned by your Amazon Web Services account.</p></important>"
            xml:
              name: subnetIds
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: Create tags when creating the broker.
            xml:
              name: tags
        Users:
          allOf:
          - $ref: '#/components/schemas/__listOfUser'
          - description: "The list of broker users (persons or applications) who can\
              \ access queues and topics. For Amazon MQ for RabbitMQ brokers, one\
              \ and only one administrative user is accepted and created when a broker\
              \ is first provisioned. All subsequent broker users are created by making\
              \ RabbitMQ API calls directly to brokers or via the RabbitMQ web console."
            xml:
              name: users
        DataReplicationMode:
          allOf:
          - $ref: '#/components/schemas/DataReplicationMode'
          - description: Defines whether this broker is a part of a data replication
              pair.
            xml:
              name: dataReplicationMode
        DataReplicationPrimaryBrokerArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The Amazon Resource Name (ARN) of the primary broker that\
              \ is used to replicate data from in a data replication pair, and is\
              \ applied to the replica broker. Must be set when dataReplicationMode\
              \ is set to CRDR."
            xml:
              name: dataReplicationPrimaryBrokerArn
      required:
      - AutoMinorVersionUpgrade
      - BrokerName
      - DeploymentMode
      - EngineType
      - EngineVersion
      - HostInstanceType
      - PubliclyAccessible
      - Users
      title: CreateBrokerRequest
      type: object
    CreateConfigurationRequest:
      description: Creates a new configuration for the specified configuration name.
        Amazon MQ uses the default configuration (the engine type and version).
      example:
        EngineVersion: ""
        AuthenticationStrategy: ""
        EngineType: ""
        Tags: ""
        Name: ""
      properties:
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy associated with the
              configuration. The default is SIMPLE.
            xml:
              name: authenticationStrategy
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          - description: "Required. The type of broker engine. Currently, Amazon MQ\
              \ supports ACTIVEMQ and RABBITMQ."
            xml:
              name: engineType
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The broker engine's version. For a list of supported\
              \ engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The name of the configuration. This value can\
              \ contain only alphanumeric characters, dashes, periods, underscores,\
              \ and tildes (- . _ ~). This value must be 1-150 characters long."
            xml:
              name: name
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: Create tags when creating the configuration.
            xml:
              name: tags
      required:
      - EngineType
      - EngineVersion
      - Name
      title: CreateConfigurationRequest
      type: object
    CreateTagsRequest:
      description: A map of the key-value pairs for the resource tag.
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/__mapOf__string'
          - description: The key-value pair for the resource tag.
            xml:
              name: tags
      title: CreateTagsRequest
      type: object
    CreateUserRequest:
      description: Creates a new ActiveMQ user.
      example:
        ReplicationUser: ""
        Groups: ""
        ConsoleAccess: ""
        Password: ""
      properties:
        ConsoleAccess:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables access to the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
        Groups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of groups (20 maximum) to which the ActiveMQ user\
              \ belongs. This value can contain only alphanumeric characters, dashes,\
              \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
              \ characters long."
            xml:
              name: groups
        Password:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The password of the user. This value must be at\
              \ least 12 characters long, must contain at least 4 unique characters,\
              \ and must not contain commas, colons, or equal signs (,:=)."
            xml:
              name: password
        ReplicationUser:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Defines if this user is intended for CRDR replication purposes.
            xml:
              name: replicationUser
      required:
      - Password
      title: CreateUserRequest
      type: object
    DataReplicationCounterpart:
      description: Specifies a broker in a data replication pair.
      properties:
        BrokerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique broker id generated by Amazon MQ.
            xml:
              name: brokerId
          title: BrokerId
        Region:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The region of the broker.
            xml:
              name: region
          title: Region
      required:
      - BrokerId
      - Region
      title: DataReplicationCounterpart
      type: object
    DataReplicationMetadataOutput:
      description: The replication details of the data replication-enabled broker.
        Only returned if dataReplicationMode or pendingDataReplicationMode is set
        to CRDR.
      properties:
        DataReplicationCounterpart:
          $ref: '#/components/schemas/DataReplicationMetadataOutput_DataReplicationCounterpart'
        DataReplicationRole:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Defines the role of this broker in a data replication pair.\
              \ When a replica broker is promoted to primary, this role is interchanged."
            xml:
              name: dataReplicationRole
          title: DataReplicationRole
      required:
      - DataReplicationRole
      title: DataReplicationMetadataOutput
      type: object
    DeleteBrokerRequest:
      properties: {}
      title: DeleteBrokerRequest
      type: object
    DeleteTagsRequest:
      properties: {}
      title: DeleteTagsRequest
      type: object
    DeleteUserRequest:
      properties: {}
      title: DeleteUserRequest
      type: object
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    DescribeBrokerEngineTypesRequest:
      properties: {}
      title: DescribeBrokerEngineTypesRequest
      type: object
    __listOfBrokerEngineType:
      items:
        $ref: '#/components/schemas/BrokerEngineType'
      type: array
    __integerMin5Max100:
      maximum: 100
      minimum: 5
      type: integer
    DescribeBrokerInstanceOptionsRequest:
      properties: {}
      title: DescribeBrokerInstanceOptionsRequest
      type: object
    __listOfBrokerInstanceOption:
      items:
        $ref: '#/components/schemas/BrokerInstanceOption'
      type: array
    DescribeBrokerRequest:
      properties: {}
      title: DescribeBrokerRequest
      type: object
    __listOfActionRequired:
      items:
        $ref: '#/components/schemas/ActionRequired'
      type: array
    __listOfBrokerInstance:
      items:
        $ref: '#/components/schemas/BrokerInstance'
      type: array
    LdapServerMetadataOutput:
      description: Optional. The metadata of the LDAP server used to authenticate
        and authorize connections to the broker.
      properties:
        Hosts:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: Specifies the location of the LDAP server such as Directory
              Service for Microsoft Active Directory. Optional failover server.
            xml:
              name: hosts
          title: Hosts
        RoleBase:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                dc=example, dc=com.
            xml:
              name: roleBase
          title: RoleBase
        RoleName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Specifies the LDAP attribute that identifies the group name
              attribute in the object returned from the group membership query.
            xml:
              name: roleName
          title: RoleName
        RoleSearchMatching:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The LDAP search filter used to find roles within the roleBase.\
              \ The distinguished name of the user matched by userSearchMatching is\
              \ substituted into the {0} placeholder in the search filter. The client's\
              \ username is substituted into the {1} placeholder. For example, if\
              \ you set this option to (member=uid={1})for the user janedoe, the search\
              \ filter becomes (member=uid=janedoe) after string substitution. It\
              \ matches all role entries that have a member attribute equal to uid=janedoe\
              \ under the subtree selected by the roleBase."
            xml:
              name: roleSearchMatching
          title: RoleSearchMatching
        RoleSearchSubtree:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "The directory search scope for the role. If set to true,\
              \ scope is to search the entire subtree."
            xml:
              name: roleSearchSubtree
          title: RoleSearchSubtree
        ServiceAccountUsername:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountUsername
          title: ServiceAccountUsername
        UserBase:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
            xml:
              name: userBase
          title: UserBase
        UserRoleName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Specifies the name of the LDAP attribute for the user group
              membership.
            xml:
              name: userRoleName
          title: UserRoleName
        UserSearchMatching:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                             dc=com.
            xml:
              name: userSearchMatching
          title: UserSearchMatching
        UserSearchSubtree:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "The directory search scope for the user. If set to true,\
              \ scope is to search the entire subtree."
            xml:
              name: userSearchSubtree
          title: UserSearchSubtree
      required:
      - Hosts
      - RoleBase
      - RoleSearchMatching
      - ServiceAccountUsername
      - UserBase
      - UserSearchMatching
      title: LdapServerMetadataOutput
      type: object
    LogsSummary:
      description: The list of information about logs currently enabled and pending
        to be deployed for the specified broker.
      properties:
        Audit:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables audit logging. Every user management action made
              using JMX or the ActiveMQ Web Console is logged.
            xml:
              name: audit
          title: Audit
        AuditLogGroup:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The location of the CloudWatch Logs log group where audit
              logs are sent.
            xml:
              name: auditLogGroup
          title: AuditLogGroup
        General:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables general logging.
            xml:
              name: general
          title: General
        GeneralLogGroup:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The location of the CloudWatch Logs log group where general
              logs are sent.
            xml:
              name: generalLogGroup
          title: GeneralLogGroup
        Pending:
          $ref: '#/components/schemas/LogsSummary_Pending'
      required:
      - General
      - GeneralLogGroup
      title: LogsSummary
      type: object
    __listOfUserSummary:
      items:
        $ref: '#/components/schemas/UserSummary'
      type: array
    DescribeConfigurationRequest:
      properties: {}
      title: DescribeConfigurationRequest
      type: object
    DescribeConfigurationRevisionRequest:
      properties: {}
      title: DescribeConfigurationRevisionRequest
      type: object
    DescribeUserRequest:
      properties: {}
      title: DescribeUserRequest
      type: object
    UserPendingChanges:
      description: Returns information about the status of the changes pending for
        the ActiveMQ user.
      properties:
        ConsoleAccess:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables access to the the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
          title: ConsoleAccess
        Groups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of groups (20 maximum) to which the ActiveMQ user\
              \ belongs. This value can contain only alphanumeric characters, dashes,\
              \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
              \ characters long."
            xml:
              name: groups
          title: Groups
        PendingChange:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          - description: Required. The type of change pending for the ActiveMQ user.
            xml:
              name: pendingChange
          title: PendingChange
      required:
      - PendingChange
      title: UserPendingChanges
      type: object
    EngineVersion:
      description: Id of the engine version.
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Id for the version.
            xml:
              name: name
          title: Name
      title: EngineVersion
      type: object
    ListBrokersRequest:
      properties: {}
      title: ListBrokersRequest
      type: object
    __listOfBrokerSummary:
      items:
        $ref: '#/components/schemas/BrokerSummary'
      type: array
    ListConfigurationRevisionsRequest:
      properties: {}
      title: ListConfigurationRevisionsRequest
      type: object
    __listOfConfigurationRevision:
      items:
        $ref: '#/components/schemas/ConfigurationRevision'
      type: array
    ListConfigurationsRequest:
      properties: {}
      title: ListConfigurationsRequest
      type: object
    __listOfConfiguration:
      items:
        $ref: '#/components/schemas/Configuration'
      type: array
    ListTagsRequest:
      properties: {}
      title: ListTagsRequest
      type: object
    ListUsersRequest:
      properties: {}
      title: ListUsersRequest
      type: object
    PendingLogs:
      description: The list of information about logs to be enabled for the specified
        broker.
      properties:
        Audit:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables audit logging. Every user management action made
              using JMX or the ActiveMQ Web Console is logged.
            xml:
              name: audit
          title: Audit
        General:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables general logging.
            xml:
              name: general
          title: General
      title: PendingLogs
      type: object
    PromoteMode:
      description: The Promote mode requested.
      enum:
      - SWITCHOVER
      - FAILOVER
      title: PromoteMode
      type: string
    PromoteRequest:
      description: Promotes a data replication replica broker to the primary broker
        role.
      example:
        Mode: ""
      properties:
        Mode:
          allOf:
          - $ref: '#/components/schemas/PromoteMode'
          - description: "The Promote mode requested. Note: Valid values for the parameter\
              \ are SWITCHOVER, FAILOVER."
            xml:
              name: mode
      required:
      - Mode
      title: PromoteRequest
      type: object
    RebootBrokerRequest:
      properties: {}
      title: RebootBrokerRequest
      type: object
    SanitizationWarningReason:
      description: The reason for which the configuration elements or attributes were
        sanitized.
      enum:
      - DISALLOWED_ELEMENT_REMOVED
      - DISALLOWED_ATTRIBUTE_REMOVED
      - INVALID_ATTRIBUTE_VALUE_REMOVED
      title: SanitizationWarningReason
      type: string
    SanitizationWarning:
      description: Returns information about the configuration element or attribute
        that was sanitized in the configuration.
      properties:
        AttributeName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The name of the configuration attribute that has been sanitized.
            xml:
              name: attributeName
          title: AttributeName
        ElementName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The name of the configuration element that has been sanitized.
            xml:
              name: elementName
          title: ElementName
        Reason:
          allOf:
          - $ref: '#/components/schemas/SanitizationWarningReason'
          - description: The reason for which the configuration elements or attributes
              were sanitized.
            xml:
              name: reason
          title: Reason
      required:
      - Reason
      title: SanitizationWarning
      type: object
    UpdateBrokerRequest:
      description: Updates the broker using the specified properties.
      example:
        LdapServerMetadata:
          Hosts: ""
          RoleName: ""
          UserRoleName: ""
          UserSearchMatching: ""
          UserBase: ""
          UserSearchSubtree: ""
          RoleSearchMatching: ""
          ServiceAccountUsername: ""
          RoleBase: ""
          ServiceAccountPassword: ""
          RoleSearchSubtree: ""
        SecurityGroups: ""
        EngineVersion: ""
        Configuration:
          Revision: ""
          Id: ""
        AuthenticationStrategy: ""
        MaintenanceWindowStartTime:
          DayOfWeek: ""
          TimeOfDay: ""
          TimeZone: ""
        HostInstanceType: ""
        AutoMinorVersionUpgrade: ""
        Logs:
          Audit: ""
          General: ""
        DataReplicationMode: ""
      properties:
        AuthenticationStrategy:
          allOf:
          - $ref: '#/components/schemas/AuthenticationStrategy'
          - description: Optional. The authentication strategy used to secure the
              broker. The default is SIMPLE.
            xml:
              name: authenticationStrategy
        AutoMinorVersionUpgrade:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Enables automatic upgrades to new minor versions for brokers,\
              \ as new versions are released and supported by Amazon MQ. Automatic\
              \ upgrades occur during the scheduled maintenance window of the broker\
              \ or after a manual broker reboot."
            xml:
              name: autoMinorVersionUpgrade
        Configuration:
          $ref: '#/components/schemas/CreateBrokerRequest_Configuration'
        EngineVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker engine version. For a list of supported engine\
              \ versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
              >Supported engines</a>."
            xml:
              name: engineVersion
        HostInstanceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The broker's host instance type to upgrade to. For a list\
              \ of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\
              >Broker instance types</a>."
            xml:
              name: hostInstanceType
        LdapServerMetadata:
          $ref: '#/components/schemas/CreateBrokerRequest_LdapServerMetadata'
        Logs:
          $ref: '#/components/schemas/CreateBrokerRequest_Logs'
        MaintenanceWindowStartTime:
          $ref: '#/components/schemas/DescribeBrokerResponse_MaintenanceWindowStartTime'
        SecurityGroups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of security groups (1 minimum, 5 maximum) that\
              \ authorizes connections to brokers."
            xml:
              name: securityGroups
        DataReplicationMode:
          allOf:
          - $ref: '#/components/schemas/DataReplicationMode'
          - description: Defines whether this broker is a part of a data replication
              pair.
            xml:
              name: dataReplicationMode
      title: UpdateBrokerRequest
      type: object
    UpdateConfigurationRequest:
      description: Updates the specified configuration.
      example:
        Description: ""
        Data: ""
      properties:
        Data:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Amazon MQ for Active MQ: The base64-encoded XML configuration.\
              \ Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration."
            xml:
              name: data
        Description:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The description of the configuration.
            xml:
              name: description
      required:
      - Data
      title: UpdateConfigurationRequest
      type: object
    __listOfSanitizationWarning:
      items:
        $ref: '#/components/schemas/SanitizationWarning'
      type: array
    UpdateUserRequest:
      description: Updates the information for an ActiveMQ user.
      example:
        ReplicationUser: ""
        Groups: ""
        ConsoleAccess: ""
        Password: ""
      properties:
        ConsoleAccess:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables access to the the ActiveMQ Web Console for the ActiveMQ
              user.
            xml:
              name: consoleAccess
        Groups:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: "The list of groups (20 maximum) to which the ActiveMQ user\
              \ belongs. This value can contain only alphanumeric characters, dashes,\
              \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
              \ characters long."
            xml:
              name: groups
        Password:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The password of the user. This value must be at least 12\
              \ characters long, must contain at least 4 unique characters, and must\
              \ not contain commas, colons, or equal signs (,:=)."
            xml:
              name: password
        ReplicationUser:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Defines whether the user is intended for data replication.
            xml:
              name: replicationUser
      title: UpdateUserRequest
      type: object
    UserSummary:
      description: Returns a list of all broker users. Does not apply to RabbitMQ
        brokers.
      properties:
        PendingChange:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          - description: The type of change pending for the broker user.
            xml:
              name: pendingChange
          title: PendingChange
        Username:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The username of the broker user. This value can\
              \ contain only alphanumeric characters, dashes, periods, underscores,\
              \ and tildes (- . _ ~). This value must be 2-100 characters long."
            xml:
              name: username
          title: Username
      required:
      - Username
      title: UserSummary
      type: object
    CreateBroker_request_configuration:
      description: A list of information about the configuration.
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Required. The unique ID that Amazon MQ generates for the
              configuration.
            xml:
              name: id
          title: Id
        Revision:
          allOf:
          - $ref: '#/components/schemas/__integer'
          - description: The revision number of the configuration.
            xml:
              name: revision
          title: Revision
      title: CreateBroker_request_configuration
      type: object
    CreateBroker_request_encryptionOptions:
      description: Encryption options for the broker.
      properties:
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The customer master key (CMK) to use for the A KMS (KMS).\
              \ This key is used to encrypt your data at rest. If not provided, Amazon\
              \ MQ will use a default CMK to encrypt your data."
            xml:
              name: kmsKeyId
          title: KmsKeyId
        UseAwsOwnedKey:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Enables the use of an Amazon Web Services owned CMK using\
              \ KMS (KMS). Set to true by default, if no value is provided, for example,\
              \ for RabbitMQ brokers."
            xml:
              name: useAwsOwnedKey
          title: UseAwsOwnedKey
      title: CreateBroker_request_encryptionOptions
      type: object
    CreateBroker_request_ldapServerMetadata:
      description: <p>Optional. The metadata of the LDAP server used to authenticate
        and authorize connections to the broker.</p> <important><p>Does not apply
        to RabbitMQ brokers.</p></important>
      properties:
        Hosts:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          - description: Specifies the location of the LDAP server such as Directory
              Service for Microsoft Active Directory. Optional failover server.
            xml:
              name: hosts
          title: Hosts
        RoleBase:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                                dc=example, dc=com.
            xml:
              name: roleBase
          title: RoleBase
        RoleName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Specifies the LDAP attribute that identifies the group name
              attribute in the object returned from the group membership query.
            xml:
              name: roleName
          title: RoleName
        RoleSearchMatching:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The LDAP search filter used to find roles within the roleBase.\
              \ The distinguished name of the user matched by userSearchMatching is\
              \ substituted into the {0} placeholder in the search filter. The client's\
              \ username is substituted into the {1} placeholder. For example, if\
              \ you set this option to (member=uid={1})for the user janedoe, the search\
              \ filter becomes (member=uid=janedoe) after string substitution. It\
              \ matches all role entries that have a member attribute equal to uid=janedoe\
              \ under the subtree selected by the roleBase."
            xml:
              name: roleSearchMatching
          title: RoleSearchMatching
        RoleSearchSubtree:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "The directory search scope for the role. If set to true,\
              \ scope is to search the entire subtree."
            xml:
              name: roleSearchSubtree
          title: RoleSearchSubtree
        ServiceAccountPassword:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountPassword
          title: ServiceAccountPassword
        ServiceAccountUsername:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                                dc=com.
            xml:
              name: serviceAccountUsername
          title: ServiceAccountUsername
        UserBase:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                                dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.
            xml:
              name: userBase
          title: UserBase
        UserRoleName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: Specifies the name of the LDAP attribute for the user group
              membership.
            xml:
              name: userRoleName
          title: UserRoleName
        UserSearchMatching:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: |-
              The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                                dc=com.
            xml:
              name: userSearchMatching
          title: UserSearchMatching
        UserSearchSubtree:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "The directory search scope for the user. If set to true,\
              \ scope is to search the entire subtree."
            xml:
              name: userSearchSubtree
          title: UserSearchSubtree
      title: CreateBroker_request_ldapServerMetadata
      type: object
    CreateBroker_request_logs:
      description: The list of information about logs to be enabled for the specified
        broker.
      properties:
        Audit:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables audit logging. Every user management action made
              using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ
              brokers.
            xml:
              name: audit
          title: Audit
        General:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: Enables general logging.
            xml:
              name: general
          title: General
      title: CreateBroker_request_logs
      type: object
    CreateBroker_request_maintenanceWindowStartTime:
      description: The scheduled time period relative to UTC during which Amazon MQ
        begins to apply pending updates or patches to the broker.
      properties:
        DayOfWeek:
          allOf:
          - $ref: '#/components/schemas/DayOfWeek'
          - description: Required. The day of the week.
            xml:
              name: dayOfWeek
          title: DayOfWeek
        TimeOfDay:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "Required. The time, in 24-hour format."
            xml:
              name: timeOfDay
          title: TimeOfDay
        TimeZone:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "The time zone, UTC by default, in either the Country/City\
              \ format, or the UTC offset format."
            xml:
              name: timeZone
          title: TimeZone
      title: CreateBroker_request_maintenanceWindowStartTime
      type: object
    CreateBroker_request:
      properties:
        authenticationStrategy:
          description: Optional. The authentication strategy used to secure the broker.
            The default is SIMPLE.
          enum:
          - SIMPLE
          - LDAP
          title: authenticationStrategy
          type: string
        autoMinorVersionUpgrade:
          description: "Enables automatic upgrades to new minor versions for brokers,\
            \ as new versions are released and supported by Amazon MQ. Automatic upgrades\
            \ occur during the scheduled maintenance window of the broker or after\
            \ a manual broker reboot. Set to true by default, if no value is specified."
          title: autoMinorVersionUpgrade
          type: boolean
        brokerName:
          description: "<p>Required. The broker's name. This value must be unique\
            \ in your Amazon Web Services account, 1-50 characters long, must contain\
            \ only letters, numbers, dashes, and underscores, and must not contain\
            \ white spaces, brackets, wildcard characters, or special characters.</p>\
            \ <important><p>Do not add personally identifiable information (PII) or\
            \ other confidential or sensitive information in broker names. Broker\
            \ names are accessible to other Amazon Web Services services, including\
            \ CloudWatch Logs. Broker names are not intended to be used for private\
            \ or sensitive data.</p></important>"
          title: brokerName
          type: string
        configuration:
          $ref: '#/components/schemas/CreateBroker_request_configuration'
        creatorRequestId:
          description: <p>The unique ID that the requester receives for the created
            broker. Amazon MQ passes your ID with the API action.</p> <note><p>We
            recommend using a Universally Unique Identifier (UUID) for the creatorRequestId.
            You may omit the creatorRequestId if your application doesn't require
            idempotency.</p></note>
          title: creatorRequestId
          type: string
        deploymentMode:
          description: The broker's deployment mode.
          enum:
          - SINGLE_INSTANCE
          - ACTIVE_STANDBY_MULTI_AZ
          - CLUSTER_MULTI_AZ
          title: deploymentMode
          type: string
        encryptionOptions:
          $ref: '#/components/schemas/CreateBroker_request_encryptionOptions'
        engineType:
          description: The type of broker engine. Amazon MQ supports ActiveMQ and
            RabbitMQ.
          enum:
          - ACTIVEMQ
          - RABBITMQ
          title: engineType
          type: string
        engineVersion:
          description: "Required. The broker engine's version. For a list of supported\
            \ engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
            >Supported engines</a>."
          title: engineVersion
          type: string
        hostInstanceType:
          description: Required. The broker's instance type.
          title: hostInstanceType
          type: string
        ldapServerMetadata:
          $ref: '#/components/schemas/CreateBroker_request_ldapServerMetadata'
        logs:
          $ref: '#/components/schemas/CreateBroker_request_logs'
        maintenanceWindowStartTime:
          $ref: '#/components/schemas/CreateBroker_request_maintenanceWindowStartTime'
        publiclyAccessible:
          description: "Enables connections from applications outside of the VPC that\
            \ hosts the broker's subnets. Set to false by default, if no value is\
            \ provided."
          title: publiclyAccessible
          type: boolean
        securityGroups:
          description: "The list of rules (1 minimum, 125 maximum) that authorize\
            \ connections to brokers."
          items:
            $ref: '#/components/schemas/__string'
          title: securityGroups
          type: array
        storageType:
          description: <p>The broker's storage type.</p> <important><p>EFS is not
            supported for RabbitMQ engine type.</p></important>
          enum:
          - EBS
          - EFS
          title: storageType
          type: string
        subnetIds:
          description: "<p>The list of groups that define which subnets and IP ranges\
            \ the broker can use from different Availability Zones. If you specify\
            \ more than one subnet, the subnets must be in different Availability\
            \ Zones. Amazon MQ will not be able to create VPC endpoints for your broker\
            \ with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE\
            \ deployment requires one subnet (for example, the default subnet). An\
            \ ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two\
            \ subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no\
            \ subnet requirements when deployed with public accessibility. Deployment\
            \ without public accessibility requires at least one subnet.</p> <important><p>If\
            \ you specify subnets in a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\"\
            >shared VPC</a> for a RabbitMQ broker, the associated VPC to which the\
            \ specified subnets belong must be owned by your Amazon Web Services account.\
            \ Amazon MQ will not be able to create VPC endpoints in VPCs that are\
            \ not owned by your Amazon Web Services account.</p></important>"
          items:
            $ref: '#/components/schemas/__string'
          title: subnetIds
          type: array
        tags:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: Create tags when creating the broker.
          title: tags
          type: object
        users:
          description: "The list of broker users (persons or applications) who can\
            \ access queues and topics. For Amazon MQ for RabbitMQ brokers, one and\
            \ only one administrative user is accepted and created when a broker is\
            \ first provisioned. All subsequent broker users are created by making\
            \ RabbitMQ API calls directly to brokers or via the RabbitMQ web console."
          items:
            $ref: '#/components/schemas/User'
          title: users
          type: array
        dataReplicationMode:
          description: Specifies whether a broker is a part of a data replication
            pair.
          enum:
          - NONE
          - CRDR
          title: dataReplicationMode
          type: string
        dataReplicationPrimaryBrokerArn:
          description: "The Amazon Resource Name (ARN) of the primary broker that\
            \ is used to replicate data from in a data replication pair, and is applied\
            \ to the replica broker. Must be set when dataReplicationMode is set to\
            \ CRDR."
          title: dataReplicationPrimaryBrokerArn
          type: string
      required:
      - autoMinorVersionUpgrade
      - brokerName
      - deploymentMode
      - engineType
      - engineVersion
      - hostInstanceType
      - publiclyAccessible
      - users
      title: CreateBroker_request
      type: object
    CreateConfiguration_request:
      properties:
        authenticationStrategy:
          description: Optional. The authentication strategy used to secure the broker.
            The default is SIMPLE.
          enum:
          - SIMPLE
          - LDAP
          title: authenticationStrategy
          type: string
        engineType:
          description: The type of broker engine. Amazon MQ supports ActiveMQ and
            RabbitMQ.
          enum:
          - ACTIVEMQ
          - RABBITMQ
          title: engineType
          type: string
        engineVersion:
          description: "Required. The broker engine's version. For a list of supported\
            \ engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
            >Supported engines</a>."
          title: engineVersion
          type: string
        name:
          description: "Required. The name of the configuration. This value can contain\
            \ only alphanumeric characters, dashes, periods, underscores, and tildes\
            \ (- . _ ~). This value must be 1-150 characters long."
          title: name
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: Create tags when creating the configuration.
          title: tags
          type: object
      required:
      - engineType
      - engineVersion
      - name
      title: CreateConfiguration_request
      type: object
    CreateTags_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: The key-value pair for the resource tag.
          title: tags
          type: object
      title: CreateTags_request
      type: object
    UpdateUser_request:
      properties:
        consoleAccess:
          description: Enables access to the the ActiveMQ Web Console for the ActiveMQ
            user.
          title: consoleAccess
          type: boolean
        groups:
          description: "The list of groups (20 maximum) to which the ActiveMQ user\
            \ belongs. This value can contain only alphanumeric characters, dashes,\
            \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
            \ characters long."
          items:
            $ref: '#/components/schemas/__string'
          title: groups
          type: array
        password:
          description: "The password of the user. This value must be at least 12 characters\
            \ long, must contain at least 4 unique characters, and must not contain\
            \ commas, colons, or equal signs (,:=)."
          title: password
          type: string
        replicationUser:
          description: Defines whether the user is intended for data replication.
          title: replicationUser
          type: boolean
      title: UpdateUser_request
      type: object
    CreateUser_request:
      properties:
        consoleAccess:
          description: Enables access to the ActiveMQ Web Console for the ActiveMQ
            user.
          title: consoleAccess
          type: boolean
        groups:
          description: "The list of groups (20 maximum) to which the ActiveMQ user\
            \ belongs. This value can contain only alphanumeric characters, dashes,\
            \ periods, underscores, and tildes (- . _ ~). This value must be 2-100\
            \ characters long."
          items:
            $ref: '#/components/schemas/__string'
          title: groups
          type: array
        password:
          description: "Required. The password of the user. This value must be at\
            \ least 12 characters long, must contain at least 4 unique characters,\
            \ and must not contain commas, colons, or equal signs (,:=)."
          title: password
          type: string
        replicationUser:
          description: Defines if this user is intended for CRDR replication purposes.
          title: replicationUser
          type: boolean
      required:
      - password
      title: CreateUser_request
      type: object
    UpdateBroker_request:
      properties:
        authenticationStrategy:
          description: Optional. The authentication strategy used to secure the broker.
            The default is SIMPLE.
          enum:
          - SIMPLE
          - LDAP
          title: authenticationStrategy
          type: string
        autoMinorVersionUpgrade:
          description: "Enables automatic upgrades to new minor versions for brokers,\
            \ as new versions are released and supported by Amazon MQ. Automatic upgrades\
            \ occur during the scheduled maintenance window of the broker or after\
            \ a manual broker reboot."
          title: autoMinorVersionUpgrade
          type: boolean
        configuration:
          $ref: '#/components/schemas/CreateBroker_request_configuration'
        engineVersion:
          description: "The broker engine version. For a list of supported engine\
            \ versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\"\
            >Supported engines</a>."
          title: engineVersion
          type: string
        hostInstanceType:
          description: "The broker's host instance type to upgrade to. For a list\
            \ of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\"\
            >Broker instance types</a>."
          title: hostInstanceType
          type: string
        ldapServerMetadata:
          $ref: '#/components/schemas/CreateBroker_request_ldapServerMetadata'
        logs:
          $ref: '#/components/schemas/CreateBroker_request_logs'
        maintenanceWindowStartTime:
          $ref: '#/components/schemas/CreateBroker_request_maintenanceWindowStartTime'
        securityGroups:
          description: "The list of security groups (1 minimum, 5 maximum) that authorizes\
            \ connections to brokers."
          items:
            $ref: '#/components/schemas/__string'
          title: securityGroups
          type: array
        dataReplicationMode:
          description: Specifies whether a broker is a part of a data replication
            pair.
          enum:
          - NONE
          - CRDR
          title: dataReplicationMode
          type: string
      title: UpdateBroker_request
      type: object
    UpdateConfiguration_request:
      properties:
        data:
          description: "Amazon MQ for Active MQ: The base64-encoded XML configuration.\
            \ Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration."
          title: data
          type: string
        description:
          description: The description of the configuration.
          title: description
          type: string
      required:
      - data
      title: UpdateConfiguration_request
      type: object
    Promote_request:
      properties:
        mode:
          description: The Promote mode requested.
          enum:
          - SWITCHOVER
          - FAILOVER
          title: mode
          type: string
      required:
      - mode
      title: Promote_request
      type: object
    CreateConfigurationResponse_LatestRevision:
      allOf:
      - $ref: '#/components/schemas/ConfigurationRevision'
      - description: The latest revision of the configuration.
        xml:
          name: latestRevision
      example:
        Description: ""
        Revision: ""
        Created: ""
      title: CreateConfigurationResponse_LatestRevision
    DescribeBrokerResponse_Configurations:
      allOf:
      - $ref: '#/components/schemas/Configurations'
      - description: The list of all revisions for the specified configuration.
        xml:
          name: configurations
      example:
        History: ""
        Current:
          Revision: ""
          Id: ""
        Pending:
          Revision: ""
          Id: ""
      title: DescribeBrokerResponse_Configurations
    DescribeBrokerResponse_EncryptionOptions:
      allOf:
      - $ref: '#/components/schemas/EncryptionOptions'
      - description: Encryption options for the broker.
        xml:
          name: encryptionOptions
      example:
        KmsKeyId: ""
        UseAwsOwnedKey: ""
      title: DescribeBrokerResponse_EncryptionOptions
    DescribeBrokerResponse_LdapServerMetadata:
      allOf:
      - $ref: '#/components/schemas/LdapServerMetadataOutput'
      - description: The metadata of the LDAP server used to authenticate and authorize
          connections to the broker.
        xml:
          name: ldapServerMetadata
      example:
        Hosts: ""
        RoleName: ""
        UserRoleName: ""
        UserSearchMatching: ""
        UserBase: ""
        UserSearchSubtree: ""
        RoleSearchMatching: ""
        ServiceAccountUsername: ""
        RoleBase: ""
        RoleSearchSubtree: ""
      title: DescribeBrokerResponse_LdapServerMetadata
    DescribeBrokerResponse_Logs:
      allOf:
      - $ref: '#/components/schemas/LogsSummary'
      - description: The list of information about logs currently enabled and pending
          to be deployed for the specified broker.
        xml:
          name: logs
      example:
        Audit: ""
        GeneralLogGroup: ""
        General: ""
        AuditLogGroup: ""
        Pending:
          Audit: ""
          General: ""
      title: DescribeBrokerResponse_Logs
    DescribeBrokerResponse_MaintenanceWindowStartTime:
      allOf:
      - $ref: '#/components/schemas/WeeklyStartTime'
      - description: The parameters that determine the WeeklyStartTime.
        xml:
          name: maintenanceWindowStartTime
      example:
        DayOfWeek: ""
        TimeOfDay: ""
        TimeZone: ""
      title: DescribeBrokerResponse_MaintenanceWindowStartTime
    DescribeBrokerResponse_PendingLdapServerMetadata:
      allOf:
      - $ref: '#/components/schemas/LdapServerMetadataOutput'
      - description: The metadata of the LDAP server that will be used to authenticate
          and authorize connections to the broker after it is rebooted.
        xml:
          name: pendingLdapServerMetadata
      example:
        Hosts: ""
        RoleName: ""
        UserRoleName: ""
        UserSearchMatching: ""
        UserBase: ""
        UserSearchSubtree: ""
        RoleSearchMatching: ""
        ServiceAccountUsername: ""
        RoleBase: ""
        RoleSearchSubtree: ""
      title: DescribeBrokerResponse_PendingLdapServerMetadata
    DescribeBrokerResponse_DataReplicationMetadata:
      allOf:
      - $ref: '#/components/schemas/DataReplicationMetadataOutput'
      - description: The replication details of the data replication-enabled broker.
          Only returned if dataReplicationMode is set to CRDR.
        xml:
          name: dataReplicationMetadata
      example:
        DataReplicationRole: ""
        DataReplicationCounterpart:
          BrokerId: ""
          Region: ""
      title: DescribeBrokerResponse_DataReplicationMetadata
    DescribeBrokerResponse_PendingDataReplicationMetadata:
      allOf:
      - $ref: '#/components/schemas/DataReplicationMetadataOutput'
      - description: The pending replication details of the data replication-enabled
          broker. Only returned if pendingDataReplicationMode is set to CRDR.
        xml:
          name: pendingDataReplicationMetadata
      example:
        DataReplicationRole: ""
        DataReplicationCounterpart:
          BrokerId: ""
          Region: ""
      title: DescribeBrokerResponse_PendingDataReplicationMetadata
    DescribeConfigurationResponse_LatestRevision:
      allOf:
      - $ref: '#/components/schemas/ConfigurationRevision'
      - description: Required. The latest revision of the configuration.
        xml:
          name: latestRevision
      example:
        Description: ""
        Revision: ""
        Created: ""
      title: DescribeConfigurationResponse_LatestRevision
    DescribeUserResponse_Pending:
      allOf:
      - $ref: '#/components/schemas/UserPendingChanges'
      - description: The status of the changes pending for the ActiveMQ user.
        xml:
          name: pending
      example:
        Groups: ""
        ConsoleAccess: ""
        PendingChange: ""
      title: DescribeUserResponse_Pending
    UpdateBrokerResponse_Configuration:
      allOf:
      - $ref: '#/components/schemas/ConfigurationId'
      - description: The ID of the updated configuration.
        xml:
          name: configuration
      example:
        Revision: ""
        Id: ""
      title: UpdateBrokerResponse_Configuration
    UpdateBrokerResponse_LdapServerMetadata:
      allOf:
      - $ref: '#/components/schemas/LdapServerMetadataOutput'
      - description: Optional. The metadata of the LDAP server used to authenticate
          and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        xml:
          name: ldapServerMetadata
      example:
        Hosts: ""
        RoleName: ""
        UserRoleName: ""
        UserSearchMatching: ""
        UserBase: ""
        UserSearchSubtree: ""
        RoleSearchMatching: ""
        ServiceAccountUsername: ""
        RoleBase: ""
        RoleSearchSubtree: ""
      title: UpdateBrokerResponse_LdapServerMetadata
    UpdateBrokerResponse_Logs:
      allOf:
      - $ref: '#/components/schemas/Logs'
      - description: The list of information about logs to be enabled for the specified
          broker.
        xml:
          name: logs
      example:
        Audit: ""
        General: ""
      title: UpdateBrokerResponse_Logs
    Configurations_Current:
      allOf:
      - $ref: '#/components/schemas/ConfigurationId'
      - description: The broker's current configuration.
        xml:
          name: current
      example:
        Revision: ""
        Id: ""
      title: Configurations_Current
    Configurations_Pending:
      allOf:
      - $ref: '#/components/schemas/ConfigurationId'
      - description: The broker's pending configuration.
        xml:
          name: pending
      example:
        Revision: ""
        Id: ""
      title: Configurations_Pending
    CreateBrokerRequest_Configuration:
      allOf:
      - $ref: '#/components/schemas/ConfigurationId'
      - description: A list of information about the configuration.
        xml:
          name: configuration
      example:
        Revision: ""
        Id: ""
      title: CreateBrokerRequest_Configuration
    CreateBrokerRequest_LdapServerMetadata:
      allOf:
      - $ref: '#/components/schemas/LdapServerMetadataInput'
      - description: Optional. The metadata of the LDAP server used to authenticate
          and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        xml:
          name: ldapServerMetadata
      example:
        Hosts: ""
        RoleName: ""
        UserRoleName: ""
        UserSearchMatching: ""
        UserBase: ""
        UserSearchSubtree: ""
        RoleSearchMatching: ""
        ServiceAccountUsername: ""
        RoleBase: ""
        ServiceAccountPassword: ""
        RoleSearchSubtree: ""
      title: CreateBrokerRequest_LdapServerMetadata
    CreateBrokerRequest_Logs:
      allOf:
      - $ref: '#/components/schemas/Logs'
      - description: Enables Amazon CloudWatch logging for brokers.
        xml:
          name: logs
      example:
        Audit: ""
        General: ""
      title: CreateBrokerRequest_Logs
    DataReplicationMetadataOutput_DataReplicationCounterpart:
      allOf:
      - $ref: '#/components/schemas/DataReplicationCounterpart'
      - description: Describes the replica/primary broker. Only returned if this broker
          is currently set as a primary or replica in the broker's dataReplicationRole
          property.
        xml:
          name: dataReplicationCounterpart
      example:
        BrokerId: ""
        Region: ""
      title: DataReplicationMetadataOutput_DataReplicationCounterpart
    LogsSummary_Pending:
      allOf:
      - $ref: '#/components/schemas/PendingLogs'
      - description: The list of information about logs pending to be deployed for
          the specified broker.
        xml:
          name: pending
      example:
        Audit: ""
        General: ""
      title: LogsSummary_Pending
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
