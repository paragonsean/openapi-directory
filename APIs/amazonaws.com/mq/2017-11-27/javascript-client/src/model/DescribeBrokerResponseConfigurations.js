/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Configurations from './Configurations';
import ConfigurationsCurrent from './ConfigurationsCurrent';
import ConfigurationsPending from './ConfigurationsPending';

/**
 * The DescribeBrokerResponseConfigurations model module.
 * @module model/DescribeBrokerResponseConfigurations
 * @version 2017-11-27
 */
class DescribeBrokerResponseConfigurations {
    /**
     * Constructs a new <code>DescribeBrokerResponseConfigurations</code>.
     * @alias module:model/DescribeBrokerResponseConfigurations
     * @implements module:model/Configurations
     */
    constructor() { 
        Configurations.initialize(this);
        DescribeBrokerResponseConfigurations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeBrokerResponseConfigurations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeBrokerResponseConfigurations} obj Optional instance to populate.
     * @return {module:model/DescribeBrokerResponseConfigurations} The populated <code>DescribeBrokerResponseConfigurations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeBrokerResponseConfigurations();
            Configurations.constructFromObject(data, obj);

            if (data.hasOwnProperty('Current')) {
                obj['Current'] = ConfigurationsCurrent.constructFromObject(data['Current']);
            }
            if (data.hasOwnProperty('History')) {
                obj['History'] = ApiClient.convertToType(data['History'], Array);
            }
            if (data.hasOwnProperty('Pending')) {
                obj['Pending'] = ConfigurationsPending.constructFromObject(data['Pending']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeBrokerResponseConfigurations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeBrokerResponseConfigurations</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Current`
        if (data['Current']) { // data not null
          ConfigurationsCurrent.validateJSON(data['Current']);
        }
        // validate the optional field `History`
        if (data['History']) { // data not null
          Array.validateJSON(data['History']);
        }
        // validate the optional field `Pending`
        if (data['Pending']) { // data not null
          ConfigurationsPending.validateJSON(data['Pending']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigurationsCurrent} Current
 */
DescribeBrokerResponseConfigurations.prototype['Current'] = undefined;

/**
 * @member {Array} History
 */
DescribeBrokerResponseConfigurations.prototype['History'] = undefined;

/**
 * @member {module:model/ConfigurationsPending} Pending
 */
DescribeBrokerResponseConfigurations.prototype['Pending'] = undefined;


// Implement Configurations interface:
/**
 * @member {module:model/ConfigurationsCurrent} Current
 */
Configurations.prototype['Current'] = undefined;
/**
 * @member {Array} History
 */
Configurations.prototype['History'] = undefined;
/**
 * @member {module:model/ConfigurationsPending} Pending
 */
Configurations.prototype['Pending'] = undefined;




export default DescribeBrokerResponseConfigurations;

