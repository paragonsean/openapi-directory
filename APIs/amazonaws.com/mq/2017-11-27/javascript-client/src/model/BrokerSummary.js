/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BrokerState from './BrokerState';
import DeploymentMode from './DeploymentMode';
import EngineType from './EngineType';

/**
 * The BrokerSummary model module.
 * @module model/BrokerSummary
 * @version 2017-11-27
 */
class BrokerSummary {
    /**
     * Constructs a new <code>BrokerSummary</code>.
     * Returns information about all brokers.
     * @alias module:model/BrokerSummary
     * @param deploymentMode {module:model/DeploymentMode} 
     * @param engineType {module:model/EngineType} 
     */
    constructor(deploymentMode, engineType) { 
        
        BrokerSummary.initialize(this, deploymentMode, engineType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deploymentMode, engineType) { 
        obj['DeploymentMode'] = deploymentMode;
        obj['EngineType'] = engineType;
    }

    /**
     * Constructs a <code>BrokerSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrokerSummary} obj Optional instance to populate.
     * @return {module:model/BrokerSummary} The populated <code>BrokerSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrokerSummary();

            if (data.hasOwnProperty('BrokerArn')) {
                obj['BrokerArn'] = ApiClient.convertToType(data['BrokerArn'], 'String');
            }
            if (data.hasOwnProperty('BrokerId')) {
                obj['BrokerId'] = ApiClient.convertToType(data['BrokerId'], 'String');
            }
            if (data.hasOwnProperty('BrokerName')) {
                obj['BrokerName'] = ApiClient.convertToType(data['BrokerName'], 'String');
            }
            if (data.hasOwnProperty('BrokerState')) {
                obj['BrokerState'] = ApiClient.convertToType(data['BrokerState'], BrokerState);
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('DeploymentMode')) {
                obj['DeploymentMode'] = ApiClient.convertToType(data['DeploymentMode'], DeploymentMode);
            }
            if (data.hasOwnProperty('EngineType')) {
                obj['EngineType'] = ApiClient.convertToType(data['EngineType'], EngineType);
            }
            if (data.hasOwnProperty('HostInstanceType')) {
                obj['HostInstanceType'] = ApiClient.convertToType(data['HostInstanceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrokerSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrokerSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BrokerSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `BrokerArn`
        if (data['BrokerArn']) { // data not null
          String.validateJSON(data['BrokerArn']);
        }
        // validate the optional field `BrokerId`
        if (data['BrokerId']) { // data not null
          String.validateJSON(data['BrokerId']);
        }
        // validate the optional field `BrokerName`
        if (data['BrokerName']) { // data not null
          String.validateJSON(data['BrokerName']);
        }
        // validate the optional field `BrokerState`
        if (data['BrokerState']) { // data not null
          BrokerState.validateJSON(data['BrokerState']);
        }
        // validate the optional field `Created`
        if (data['Created']) { // data not null
          Date.validateJSON(data['Created']);
        }
        // validate the optional field `DeploymentMode`
        if (data['DeploymentMode']) { // data not null
          DeploymentMode.validateJSON(data['DeploymentMode']);
        }
        // validate the optional field `EngineType`
        if (data['EngineType']) { // data not null
          EngineType.validateJSON(data['EngineType']);
        }
        // validate the optional field `HostInstanceType`
        if (data['HostInstanceType']) { // data not null
          String.validateJSON(data['HostInstanceType']);
        }

        return true;
    }


}

BrokerSummary.RequiredProperties = ["DeploymentMode", "EngineType"];

/**
 * @member {String} BrokerArn
 */
BrokerSummary.prototype['BrokerArn'] = undefined;

/**
 * @member {String} BrokerId
 */
BrokerSummary.prototype['BrokerId'] = undefined;

/**
 * @member {String} BrokerName
 */
BrokerSummary.prototype['BrokerName'] = undefined;

/**
 * @member {module:model/BrokerState} BrokerState
 */
BrokerSummary.prototype['BrokerState'] = undefined;

/**
 * @member {Date} Created
 */
BrokerSummary.prototype['Created'] = undefined;

/**
 * @member {module:model/DeploymentMode} DeploymentMode
 */
BrokerSummary.prototype['DeploymentMode'] = undefined;

/**
 * @member {module:model/EngineType} EngineType
 */
BrokerSummary.prototype['EngineType'] = undefined;

/**
 * @member {String} HostInstanceType
 */
BrokerSummary.prototype['HostInstanceType'] = undefined;






export default BrokerSummary;

