/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigurationId from './ConfigurationId';

/**
 * The ConfigurationsPending model module.
 * @module model/ConfigurationsPending
 * @version 2017-11-27
 */
class ConfigurationsPending {
    /**
     * Constructs a new <code>ConfigurationsPending</code>.
     * @alias module:model/ConfigurationsPending
     * @implements module:model/ConfigurationId
     * @param id {String} 
     */
    constructor(id) { 
        ConfigurationId.initialize(this, id);
        ConfigurationsPending.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['Id'] = id;
    }

    /**
     * Constructs a <code>ConfigurationsPending</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigurationsPending} obj Optional instance to populate.
     * @return {module:model/ConfigurationsPending} The populated <code>ConfigurationsPending</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigurationsPending();
            ConfigurationId.constructFromObject(data, obj);

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Revision')) {
                obj['Revision'] = ApiClient.convertToType(data['Revision'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigurationsPending</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigurationsPending</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConfigurationsPending.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Revision`
        if (data['Revision']) { // data not null
          Number.validateJSON(data['Revision']);
        }

        return true;
    }


}

ConfigurationsPending.RequiredProperties = ["Id"];

/**
 * @member {String} Id
 */
ConfigurationsPending.prototype['Id'] = undefined;

/**
 * @member {Number} Revision
 */
ConfigurationsPending.prototype['Revision'] = undefined;


// Implement ConfigurationId interface:
/**
 * @member {String} Id
 */
ConfigurationId.prototype['Id'] = undefined;
/**
 * @member {Number} Revision
 */
ConfigurationId.prototype['Revision'] = undefined;




export default ConfigurationsPending;

