/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateBrokerRequestConfiguration from './CreateBrokerRequestConfiguration';
import CreateBrokerRequestLdapServerMetadata from './CreateBrokerRequestLdapServerMetadata';
import CreateBrokerRequestLogs from './CreateBrokerRequestLogs';
import CreateBrokerRequestMaintenanceWindowStartTime from './CreateBrokerRequestMaintenanceWindowStartTime';

/**
 * The UpdateBrokerRequest model module.
 * @module model/UpdateBrokerRequest
 * @version 2017-11-27
 */
class UpdateBrokerRequest {
    /**
     * Constructs a new <code>UpdateBrokerRequest</code>.
     * @alias module:model/UpdateBrokerRequest
     */
    constructor() { 
        
        UpdateBrokerRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateBrokerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateBrokerRequest} obj Optional instance to populate.
     * @return {module:model/UpdateBrokerRequest} The populated <code>UpdateBrokerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateBrokerRequest();

            if (data.hasOwnProperty('authenticationStrategy')) {
                obj['authenticationStrategy'] = ApiClient.convertToType(data['authenticationStrategy'], 'String');
            }
            if (data.hasOwnProperty('autoMinorVersionUpgrade')) {
                obj['autoMinorVersionUpgrade'] = ApiClient.convertToType(data['autoMinorVersionUpgrade'], 'Boolean');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = CreateBrokerRequestConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('engineVersion')) {
                obj['engineVersion'] = ApiClient.convertToType(data['engineVersion'], 'String');
            }
            if (data.hasOwnProperty('hostInstanceType')) {
                obj['hostInstanceType'] = ApiClient.convertToType(data['hostInstanceType'], 'String');
            }
            if (data.hasOwnProperty('ldapServerMetadata')) {
                obj['ldapServerMetadata'] = CreateBrokerRequestLdapServerMetadata.constructFromObject(data['ldapServerMetadata']);
            }
            if (data.hasOwnProperty('logs')) {
                obj['logs'] = CreateBrokerRequestLogs.constructFromObject(data['logs']);
            }
            if (data.hasOwnProperty('maintenanceWindowStartTime')) {
                obj['maintenanceWindowStartTime'] = CreateBrokerRequestMaintenanceWindowStartTime.constructFromObject(data['maintenanceWindowStartTime']);
            }
            if (data.hasOwnProperty('securityGroups')) {
                obj['securityGroups'] = ApiClient.convertToType(data['securityGroups'], ['String']);
            }
            if (data.hasOwnProperty('dataReplicationMode')) {
                obj['dataReplicationMode'] = ApiClient.convertToType(data['dataReplicationMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateBrokerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateBrokerRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authenticationStrategy'] && !(typeof data['authenticationStrategy'] === 'string' || data['authenticationStrategy'] instanceof String)) {
            throw new Error("Expected the field `authenticationStrategy` to be a primitive type in the JSON string but got " + data['authenticationStrategy']);
        }
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          CreateBrokerRequestConfiguration.validateJSON(data['configuration']);
        }
        // ensure the json data is a string
        if (data['engineVersion'] && !(typeof data['engineVersion'] === 'string' || data['engineVersion'] instanceof String)) {
            throw new Error("Expected the field `engineVersion` to be a primitive type in the JSON string but got " + data['engineVersion']);
        }
        // ensure the json data is a string
        if (data['hostInstanceType'] && !(typeof data['hostInstanceType'] === 'string' || data['hostInstanceType'] instanceof String)) {
            throw new Error("Expected the field `hostInstanceType` to be a primitive type in the JSON string but got " + data['hostInstanceType']);
        }
        // validate the optional field `ldapServerMetadata`
        if (data['ldapServerMetadata']) { // data not null
          CreateBrokerRequestLdapServerMetadata.validateJSON(data['ldapServerMetadata']);
        }
        // validate the optional field `logs`
        if (data['logs']) { // data not null
          CreateBrokerRequestLogs.validateJSON(data['logs']);
        }
        // validate the optional field `maintenanceWindowStartTime`
        if (data['maintenanceWindowStartTime']) { // data not null
          CreateBrokerRequestMaintenanceWindowStartTime.validateJSON(data['maintenanceWindowStartTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['securityGroups'])) {
            throw new Error("Expected the field `securityGroups` to be an array in the JSON data but got " + data['securityGroups']);
        }
        // ensure the json data is a string
        if (data['dataReplicationMode'] && !(typeof data['dataReplicationMode'] === 'string' || data['dataReplicationMode'] instanceof String)) {
            throw new Error("Expected the field `dataReplicationMode` to be a primitive type in the JSON string but got " + data['dataReplicationMode']);
        }

        return true;
    }


}



/**
 * Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
 * @member {module:model/UpdateBrokerRequest.AuthenticationStrategyEnum} authenticationStrategy
 */
UpdateBrokerRequest.prototype['authenticationStrategy'] = undefined;

/**
 * Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
 * @member {Boolean} autoMinorVersionUpgrade
 */
UpdateBrokerRequest.prototype['autoMinorVersionUpgrade'] = undefined;

/**
 * @member {module:model/CreateBrokerRequestConfiguration} configuration
 */
UpdateBrokerRequest.prototype['configuration'] = undefined;

/**
 * The broker engine version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.
 * @member {String} engineVersion
 */
UpdateBrokerRequest.prototype['engineVersion'] = undefined;

/**
 * The broker's host instance type to upgrade to. For a list of supported instance types, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types\">Broker instance types</a>.
 * @member {String} hostInstanceType
 */
UpdateBrokerRequest.prototype['hostInstanceType'] = undefined;

/**
 * @member {module:model/CreateBrokerRequestLdapServerMetadata} ldapServerMetadata
 */
UpdateBrokerRequest.prototype['ldapServerMetadata'] = undefined;

/**
 * @member {module:model/CreateBrokerRequestLogs} logs
 */
UpdateBrokerRequest.prototype['logs'] = undefined;

/**
 * @member {module:model/CreateBrokerRequestMaintenanceWindowStartTime} maintenanceWindowStartTime
 */
UpdateBrokerRequest.prototype['maintenanceWindowStartTime'] = undefined;

/**
 * The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.
 * @member {Array.<String>} securityGroups
 */
UpdateBrokerRequest.prototype['securityGroups'] = undefined;

/**
 * Specifies whether a broker is a part of a data replication pair.
 * @member {module:model/UpdateBrokerRequest.DataReplicationModeEnum} dataReplicationMode
 */
UpdateBrokerRequest.prototype['dataReplicationMode'] = undefined;





/**
 * Allowed values for the <code>authenticationStrategy</code> property.
 * @enum {String}
 * @readonly
 */
UpdateBrokerRequest['AuthenticationStrategyEnum'] = {

    /**
     * value: "SIMPLE"
     * @const
     */
    "SIMPLE": "SIMPLE",

    /**
     * value: "LDAP"
     * @const
     */
    "LDAP": "LDAP"
};


/**
 * Allowed values for the <code>dataReplicationMode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateBrokerRequest['DataReplicationModeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "CRDR"
     * @const
     */
    "CRDR": "CRDR"
};



export default UpdateBrokerRequest;

