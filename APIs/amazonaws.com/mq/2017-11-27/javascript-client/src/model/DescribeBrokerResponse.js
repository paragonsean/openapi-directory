/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationStrategy from './AuthenticationStrategy';
import BrokerState from './BrokerState';
import BrokerStorageType from './BrokerStorageType';
import DataReplicationMode from './DataReplicationMode';
import DeploymentMode from './DeploymentMode';
import DescribeBrokerResponseConfigurations from './DescribeBrokerResponseConfigurations';
import DescribeBrokerResponseDataReplicationMetadata from './DescribeBrokerResponseDataReplicationMetadata';
import DescribeBrokerResponseEncryptionOptions from './DescribeBrokerResponseEncryptionOptions';
import DescribeBrokerResponseLdapServerMetadata from './DescribeBrokerResponseLdapServerMetadata';
import DescribeBrokerResponseLogs from './DescribeBrokerResponseLogs';
import DescribeBrokerResponseMaintenanceWindowStartTime from './DescribeBrokerResponseMaintenanceWindowStartTime';
import DescribeBrokerResponsePendingDataReplicationMetadata from './DescribeBrokerResponsePendingDataReplicationMetadata';
import DescribeBrokerResponsePendingLdapServerMetadata from './DescribeBrokerResponsePendingLdapServerMetadata';
import EngineType from './EngineType';

/**
 * The DescribeBrokerResponse model module.
 * @module model/DescribeBrokerResponse
 * @version 2017-11-27
 */
class DescribeBrokerResponse {
    /**
     * Constructs a new <code>DescribeBrokerResponse</code>.
     * @alias module:model/DescribeBrokerResponse
     */
    constructor() { 
        
        DescribeBrokerResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeBrokerResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeBrokerResponse} obj Optional instance to populate.
     * @return {module:model/DescribeBrokerResponse} The populated <code>DescribeBrokerResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeBrokerResponse();

            if (data.hasOwnProperty('ActionsRequired')) {
                obj['ActionsRequired'] = ApiClient.convertToType(data['ActionsRequired'], Array);
            }
            if (data.hasOwnProperty('AuthenticationStrategy')) {
                obj['AuthenticationStrategy'] = ApiClient.convertToType(data['AuthenticationStrategy'], AuthenticationStrategy);
            }
            if (data.hasOwnProperty('AutoMinorVersionUpgrade')) {
                obj['AutoMinorVersionUpgrade'] = ApiClient.convertToType(data['AutoMinorVersionUpgrade'], 'Boolean');
            }
            if (data.hasOwnProperty('BrokerArn')) {
                obj['BrokerArn'] = ApiClient.convertToType(data['BrokerArn'], 'String');
            }
            if (data.hasOwnProperty('BrokerId')) {
                obj['BrokerId'] = ApiClient.convertToType(data['BrokerId'], 'String');
            }
            if (data.hasOwnProperty('BrokerInstances')) {
                obj['BrokerInstances'] = ApiClient.convertToType(data['BrokerInstances'], Array);
            }
            if (data.hasOwnProperty('BrokerName')) {
                obj['BrokerName'] = ApiClient.convertToType(data['BrokerName'], 'String');
            }
            if (data.hasOwnProperty('BrokerState')) {
                obj['BrokerState'] = ApiClient.convertToType(data['BrokerState'], BrokerState);
            }
            if (data.hasOwnProperty('Configurations')) {
                obj['Configurations'] = DescribeBrokerResponseConfigurations.constructFromObject(data['Configurations']);
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'Date');
            }
            if (data.hasOwnProperty('DeploymentMode')) {
                obj['DeploymentMode'] = ApiClient.convertToType(data['DeploymentMode'], DeploymentMode);
            }
            if (data.hasOwnProperty('EncryptionOptions')) {
                obj['EncryptionOptions'] = DescribeBrokerResponseEncryptionOptions.constructFromObject(data['EncryptionOptions']);
            }
            if (data.hasOwnProperty('EngineType')) {
                obj['EngineType'] = ApiClient.convertToType(data['EngineType'], EngineType);
            }
            if (data.hasOwnProperty('EngineVersion')) {
                obj['EngineVersion'] = ApiClient.convertToType(data['EngineVersion'], 'String');
            }
            if (data.hasOwnProperty('HostInstanceType')) {
                obj['HostInstanceType'] = ApiClient.convertToType(data['HostInstanceType'], 'String');
            }
            if (data.hasOwnProperty('LdapServerMetadata')) {
                obj['LdapServerMetadata'] = DescribeBrokerResponseLdapServerMetadata.constructFromObject(data['LdapServerMetadata']);
            }
            if (data.hasOwnProperty('Logs')) {
                obj['Logs'] = DescribeBrokerResponseLogs.constructFromObject(data['Logs']);
            }
            if (data.hasOwnProperty('MaintenanceWindowStartTime')) {
                obj['MaintenanceWindowStartTime'] = DescribeBrokerResponseMaintenanceWindowStartTime.constructFromObject(data['MaintenanceWindowStartTime']);
            }
            if (data.hasOwnProperty('PendingAuthenticationStrategy')) {
                obj['PendingAuthenticationStrategy'] = ApiClient.convertToType(data['PendingAuthenticationStrategy'], AuthenticationStrategy);
            }
            if (data.hasOwnProperty('PendingEngineVersion')) {
                obj['PendingEngineVersion'] = ApiClient.convertToType(data['PendingEngineVersion'], 'String');
            }
            if (data.hasOwnProperty('PendingHostInstanceType')) {
                obj['PendingHostInstanceType'] = ApiClient.convertToType(data['PendingHostInstanceType'], 'String');
            }
            if (data.hasOwnProperty('PendingLdapServerMetadata')) {
                obj['PendingLdapServerMetadata'] = DescribeBrokerResponsePendingLdapServerMetadata.constructFromObject(data['PendingLdapServerMetadata']);
            }
            if (data.hasOwnProperty('PendingSecurityGroups')) {
                obj['PendingSecurityGroups'] = ApiClient.convertToType(data['PendingSecurityGroups'], Array);
            }
            if (data.hasOwnProperty('PubliclyAccessible')) {
                obj['PubliclyAccessible'] = ApiClient.convertToType(data['PubliclyAccessible'], 'Boolean');
            }
            if (data.hasOwnProperty('SecurityGroups')) {
                obj['SecurityGroups'] = ApiClient.convertToType(data['SecurityGroups'], Array);
            }
            if (data.hasOwnProperty('StorageType')) {
                obj['StorageType'] = ApiClient.convertToType(data['StorageType'], BrokerStorageType);
            }
            if (data.hasOwnProperty('SubnetIds')) {
                obj['SubnetIds'] = ApiClient.convertToType(data['SubnetIds'], Array);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
            if (data.hasOwnProperty('Users')) {
                obj['Users'] = ApiClient.convertToType(data['Users'], Array);
            }
            if (data.hasOwnProperty('DataReplicationMetadata')) {
                obj['DataReplicationMetadata'] = DescribeBrokerResponseDataReplicationMetadata.constructFromObject(data['DataReplicationMetadata']);
            }
            if (data.hasOwnProperty('DataReplicationMode')) {
                obj['DataReplicationMode'] = ApiClient.convertToType(data['DataReplicationMode'], DataReplicationMode);
            }
            if (data.hasOwnProperty('PendingDataReplicationMetadata')) {
                obj['PendingDataReplicationMetadata'] = DescribeBrokerResponsePendingDataReplicationMetadata.constructFromObject(data['PendingDataReplicationMetadata']);
            }
            if (data.hasOwnProperty('PendingDataReplicationMode')) {
                obj['PendingDataReplicationMode'] = ApiClient.convertToType(data['PendingDataReplicationMode'], DataReplicationMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeBrokerResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeBrokerResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ActionsRequired`
        if (data['ActionsRequired']) { // data not null
          Array.validateJSON(data['ActionsRequired']);
        }
        // validate the optional field `AuthenticationStrategy`
        if (data['AuthenticationStrategy']) { // data not null
          AuthenticationStrategy.validateJSON(data['AuthenticationStrategy']);
        }
        // validate the optional field `AutoMinorVersionUpgrade`
        if (data['AutoMinorVersionUpgrade']) { // data not null
          Boolean.validateJSON(data['AutoMinorVersionUpgrade']);
        }
        // validate the optional field `BrokerArn`
        if (data['BrokerArn']) { // data not null
          String.validateJSON(data['BrokerArn']);
        }
        // validate the optional field `BrokerId`
        if (data['BrokerId']) { // data not null
          String.validateJSON(data['BrokerId']);
        }
        // validate the optional field `BrokerInstances`
        if (data['BrokerInstances']) { // data not null
          Array.validateJSON(data['BrokerInstances']);
        }
        // validate the optional field `BrokerName`
        if (data['BrokerName']) { // data not null
          String.validateJSON(data['BrokerName']);
        }
        // validate the optional field `BrokerState`
        if (data['BrokerState']) { // data not null
          BrokerState.validateJSON(data['BrokerState']);
        }
        // validate the optional field `Configurations`
        if (data['Configurations']) { // data not null
          DescribeBrokerResponseConfigurations.validateJSON(data['Configurations']);
        }
        // validate the optional field `Created`
        if (data['Created']) { // data not null
          Date.validateJSON(data['Created']);
        }
        // validate the optional field `DeploymentMode`
        if (data['DeploymentMode']) { // data not null
          DeploymentMode.validateJSON(data['DeploymentMode']);
        }
        // validate the optional field `EncryptionOptions`
        if (data['EncryptionOptions']) { // data not null
          DescribeBrokerResponseEncryptionOptions.validateJSON(data['EncryptionOptions']);
        }
        // validate the optional field `EngineType`
        if (data['EngineType']) { // data not null
          EngineType.validateJSON(data['EngineType']);
        }
        // validate the optional field `EngineVersion`
        if (data['EngineVersion']) { // data not null
          String.validateJSON(data['EngineVersion']);
        }
        // validate the optional field `HostInstanceType`
        if (data['HostInstanceType']) { // data not null
          String.validateJSON(data['HostInstanceType']);
        }
        // validate the optional field `LdapServerMetadata`
        if (data['LdapServerMetadata']) { // data not null
          DescribeBrokerResponseLdapServerMetadata.validateJSON(data['LdapServerMetadata']);
        }
        // validate the optional field `Logs`
        if (data['Logs']) { // data not null
          DescribeBrokerResponseLogs.validateJSON(data['Logs']);
        }
        // validate the optional field `MaintenanceWindowStartTime`
        if (data['MaintenanceWindowStartTime']) { // data not null
          DescribeBrokerResponseMaintenanceWindowStartTime.validateJSON(data['MaintenanceWindowStartTime']);
        }
        // validate the optional field `PendingAuthenticationStrategy`
        if (data['PendingAuthenticationStrategy']) { // data not null
          AuthenticationStrategy.validateJSON(data['PendingAuthenticationStrategy']);
        }
        // validate the optional field `PendingEngineVersion`
        if (data['PendingEngineVersion']) { // data not null
          String.validateJSON(data['PendingEngineVersion']);
        }
        // validate the optional field `PendingHostInstanceType`
        if (data['PendingHostInstanceType']) { // data not null
          String.validateJSON(data['PendingHostInstanceType']);
        }
        // validate the optional field `PendingLdapServerMetadata`
        if (data['PendingLdapServerMetadata']) { // data not null
          DescribeBrokerResponsePendingLdapServerMetadata.validateJSON(data['PendingLdapServerMetadata']);
        }
        // validate the optional field `PendingSecurityGroups`
        if (data['PendingSecurityGroups']) { // data not null
          Array.validateJSON(data['PendingSecurityGroups']);
        }
        // validate the optional field `PubliclyAccessible`
        if (data['PubliclyAccessible']) { // data not null
          Boolean.validateJSON(data['PubliclyAccessible']);
        }
        // validate the optional field `SecurityGroups`
        if (data['SecurityGroups']) { // data not null
          Array.validateJSON(data['SecurityGroups']);
        }
        // validate the optional field `StorageType`
        if (data['StorageType']) { // data not null
          BrokerStorageType.validateJSON(data['StorageType']);
        }
        // validate the optional field `SubnetIds`
        if (data['SubnetIds']) { // data not null
          Array.validateJSON(data['SubnetIds']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }
        // validate the optional field `Users`
        if (data['Users']) { // data not null
          Array.validateJSON(data['Users']);
        }
        // validate the optional field `DataReplicationMetadata`
        if (data['DataReplicationMetadata']) { // data not null
          DescribeBrokerResponseDataReplicationMetadata.validateJSON(data['DataReplicationMetadata']);
        }
        // validate the optional field `DataReplicationMode`
        if (data['DataReplicationMode']) { // data not null
          DataReplicationMode.validateJSON(data['DataReplicationMode']);
        }
        // validate the optional field `PendingDataReplicationMetadata`
        if (data['PendingDataReplicationMetadata']) { // data not null
          DescribeBrokerResponsePendingDataReplicationMetadata.validateJSON(data['PendingDataReplicationMetadata']);
        }
        // validate the optional field `PendingDataReplicationMode`
        if (data['PendingDataReplicationMode']) { // data not null
          DataReplicationMode.validateJSON(data['PendingDataReplicationMode']);
        }

        return true;
    }


}



/**
 * @member {Array} ActionsRequired
 */
DescribeBrokerResponse.prototype['ActionsRequired'] = undefined;

/**
 * @member {module:model/AuthenticationStrategy} AuthenticationStrategy
 */
DescribeBrokerResponse.prototype['AuthenticationStrategy'] = undefined;

/**
 * @member {Boolean} AutoMinorVersionUpgrade
 */
DescribeBrokerResponse.prototype['AutoMinorVersionUpgrade'] = undefined;

/**
 * @member {String} BrokerArn
 */
DescribeBrokerResponse.prototype['BrokerArn'] = undefined;

/**
 * @member {String} BrokerId
 */
DescribeBrokerResponse.prototype['BrokerId'] = undefined;

/**
 * @member {Array} BrokerInstances
 */
DescribeBrokerResponse.prototype['BrokerInstances'] = undefined;

/**
 * @member {String} BrokerName
 */
DescribeBrokerResponse.prototype['BrokerName'] = undefined;

/**
 * @member {module:model/BrokerState} BrokerState
 */
DescribeBrokerResponse.prototype['BrokerState'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseConfigurations} Configurations
 */
DescribeBrokerResponse.prototype['Configurations'] = undefined;

/**
 * @member {Date} Created
 */
DescribeBrokerResponse.prototype['Created'] = undefined;

/**
 * @member {module:model/DeploymentMode} DeploymentMode
 */
DescribeBrokerResponse.prototype['DeploymentMode'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseEncryptionOptions} EncryptionOptions
 */
DescribeBrokerResponse.prototype['EncryptionOptions'] = undefined;

/**
 * @member {module:model/EngineType} EngineType
 */
DescribeBrokerResponse.prototype['EngineType'] = undefined;

/**
 * @member {String} EngineVersion
 */
DescribeBrokerResponse.prototype['EngineVersion'] = undefined;

/**
 * @member {String} HostInstanceType
 */
DescribeBrokerResponse.prototype['HostInstanceType'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseLdapServerMetadata} LdapServerMetadata
 */
DescribeBrokerResponse.prototype['LdapServerMetadata'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseLogs} Logs
 */
DescribeBrokerResponse.prototype['Logs'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseMaintenanceWindowStartTime} MaintenanceWindowStartTime
 */
DescribeBrokerResponse.prototype['MaintenanceWindowStartTime'] = undefined;

/**
 * @member {module:model/AuthenticationStrategy} PendingAuthenticationStrategy
 */
DescribeBrokerResponse.prototype['PendingAuthenticationStrategy'] = undefined;

/**
 * @member {String} PendingEngineVersion
 */
DescribeBrokerResponse.prototype['PendingEngineVersion'] = undefined;

/**
 * @member {String} PendingHostInstanceType
 */
DescribeBrokerResponse.prototype['PendingHostInstanceType'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponsePendingLdapServerMetadata} PendingLdapServerMetadata
 */
DescribeBrokerResponse.prototype['PendingLdapServerMetadata'] = undefined;

/**
 * @member {Array} PendingSecurityGroups
 */
DescribeBrokerResponse.prototype['PendingSecurityGroups'] = undefined;

/**
 * @member {Boolean} PubliclyAccessible
 */
DescribeBrokerResponse.prototype['PubliclyAccessible'] = undefined;

/**
 * @member {Array} SecurityGroups
 */
DescribeBrokerResponse.prototype['SecurityGroups'] = undefined;

/**
 * @member {module:model/BrokerStorageType} StorageType
 */
DescribeBrokerResponse.prototype['StorageType'] = undefined;

/**
 * @member {Array} SubnetIds
 */
DescribeBrokerResponse.prototype['SubnetIds'] = undefined;

/**
 * @member {Object} Tags
 */
DescribeBrokerResponse.prototype['Tags'] = undefined;

/**
 * @member {Array} Users
 */
DescribeBrokerResponse.prototype['Users'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseDataReplicationMetadata} DataReplicationMetadata
 */
DescribeBrokerResponse.prototype['DataReplicationMetadata'] = undefined;

/**
 * @member {module:model/DataReplicationMode} DataReplicationMode
 */
DescribeBrokerResponse.prototype['DataReplicationMode'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponsePendingDataReplicationMetadata} PendingDataReplicationMetadata
 */
DescribeBrokerResponse.prototype['PendingDataReplicationMetadata'] = undefined;

/**
 * @member {module:model/DataReplicationMode} PendingDataReplicationMode
 */
DescribeBrokerResponse.prototype['PendingDataReplicationMode'] = undefined;






export default DescribeBrokerResponse;

