/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateConfigurationRequest model module.
 * @module model/CreateConfigurationRequest
 * @version 2017-11-27
 */
class CreateConfigurationRequest {
    /**
     * Constructs a new <code>CreateConfigurationRequest</code>.
     * @alias module:model/CreateConfigurationRequest
     * @param engineType {module:model/CreateConfigurationRequest.EngineTypeEnum} The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
     * @param engineVersion {String} Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.
     * @param name {String} Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.
     */
    constructor(engineType, engineVersion, name) { 
        
        CreateConfigurationRequest.initialize(this, engineType, engineVersion, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, engineType, engineVersion, name) { 
        obj['engineType'] = engineType;
        obj['engineVersion'] = engineVersion;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/CreateConfigurationRequest} The populated <code>CreateConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConfigurationRequest();

            if (data.hasOwnProperty('authenticationStrategy')) {
                obj['authenticationStrategy'] = ApiClient.convertToType(data['authenticationStrategy'], 'String');
            }
            if (data.hasOwnProperty('engineType')) {
                obj['engineType'] = ApiClient.convertToType(data['engineType'], 'String');
            }
            if (data.hasOwnProperty('engineVersion')) {
                obj['engineVersion'] = ApiClient.convertToType(data['engineVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authenticationStrategy'] && !(typeof data['authenticationStrategy'] === 'string' || data['authenticationStrategy'] instanceof String)) {
            throw new Error("Expected the field `authenticationStrategy` to be a primitive type in the JSON string but got " + data['authenticationStrategy']);
        }
        // ensure the json data is a string
        if (data['engineType'] && !(typeof data['engineType'] === 'string' || data['engineType'] instanceof String)) {
            throw new Error("Expected the field `engineType` to be a primitive type in the JSON string but got " + data['engineType']);
        }
        // ensure the json data is a string
        if (data['engineVersion'] && !(typeof data['engineVersion'] === 'string' || data['engineVersion'] instanceof String)) {
            throw new Error("Expected the field `engineVersion` to be a primitive type in the JSON string but got " + data['engineVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CreateConfigurationRequest.RequiredProperties = ["engineType", "engineVersion", "name"];

/**
 * Optional. The authentication strategy used to secure the broker. The default is SIMPLE.
 * @member {module:model/CreateConfigurationRequest.AuthenticationStrategyEnum} authenticationStrategy
 */
CreateConfigurationRequest.prototype['authenticationStrategy'] = undefined;

/**
 * The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.
 * @member {module:model/CreateConfigurationRequest.EngineTypeEnum} engineType
 */
CreateConfigurationRequest.prototype['engineType'] = undefined;

/**
 * Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.
 * @member {String} engineVersion
 */
CreateConfigurationRequest.prototype['engineVersion'] = undefined;

/**
 * Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.
 * @member {String} name
 */
CreateConfigurationRequest.prototype['name'] = undefined;

/**
 * Create tags when creating the configuration.
 * @member {Object.<String, String>} tags
 */
CreateConfigurationRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>authenticationStrategy</code> property.
 * @enum {String}
 * @readonly
 */
CreateConfigurationRequest['AuthenticationStrategyEnum'] = {

    /**
     * value: "SIMPLE"
     * @const
     */
    "SIMPLE": "SIMPLE",

    /**
     * value: "LDAP"
     * @const
     */
    "LDAP": "LDAP"
};


/**
 * Allowed values for the <code>engineType</code> property.
 * @enum {String}
 * @readonly
 */
CreateConfigurationRequest['EngineTypeEnum'] = {

    /**
     * value: "ACTIVEMQ"
     * @const
     */
    "ACTIVEMQ": "ACTIVEMQ",

    /**
     * value: "RABBITMQ"
     * @const
     */
    "RABBITMQ": "RABBITMQ"
};



export default CreateConfigurationRequest;

