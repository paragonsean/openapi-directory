/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationStrategy from './AuthenticationStrategy';
import DataReplicationMode from './DataReplicationMode';
import DescribeBrokerResponseDataReplicationMetadata from './DescribeBrokerResponseDataReplicationMetadata';
import DescribeBrokerResponseMaintenanceWindowStartTime from './DescribeBrokerResponseMaintenanceWindowStartTime';
import DescribeBrokerResponsePendingDataReplicationMetadata from './DescribeBrokerResponsePendingDataReplicationMetadata';
import UpdateBrokerResponseConfiguration from './UpdateBrokerResponseConfiguration';
import UpdateBrokerResponseLdapServerMetadata from './UpdateBrokerResponseLdapServerMetadata';
import UpdateBrokerResponseLogs from './UpdateBrokerResponseLogs';

/**
 * The UpdateBrokerResponse model module.
 * @module model/UpdateBrokerResponse
 * @version 2017-11-27
 */
class UpdateBrokerResponse {
    /**
     * Constructs a new <code>UpdateBrokerResponse</code>.
     * @alias module:model/UpdateBrokerResponse
     */
    constructor() { 
        
        UpdateBrokerResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateBrokerResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateBrokerResponse} obj Optional instance to populate.
     * @return {module:model/UpdateBrokerResponse} The populated <code>UpdateBrokerResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateBrokerResponse();

            if (data.hasOwnProperty('AuthenticationStrategy')) {
                obj['AuthenticationStrategy'] = ApiClient.convertToType(data['AuthenticationStrategy'], AuthenticationStrategy);
            }
            if (data.hasOwnProperty('AutoMinorVersionUpgrade')) {
                obj['AutoMinorVersionUpgrade'] = ApiClient.convertToType(data['AutoMinorVersionUpgrade'], 'Boolean');
            }
            if (data.hasOwnProperty('BrokerId')) {
                obj['BrokerId'] = ApiClient.convertToType(data['BrokerId'], 'String');
            }
            if (data.hasOwnProperty('Configuration')) {
                obj['Configuration'] = UpdateBrokerResponseConfiguration.constructFromObject(data['Configuration']);
            }
            if (data.hasOwnProperty('EngineVersion')) {
                obj['EngineVersion'] = ApiClient.convertToType(data['EngineVersion'], 'String');
            }
            if (data.hasOwnProperty('HostInstanceType')) {
                obj['HostInstanceType'] = ApiClient.convertToType(data['HostInstanceType'], 'String');
            }
            if (data.hasOwnProperty('LdapServerMetadata')) {
                obj['LdapServerMetadata'] = UpdateBrokerResponseLdapServerMetadata.constructFromObject(data['LdapServerMetadata']);
            }
            if (data.hasOwnProperty('Logs')) {
                obj['Logs'] = UpdateBrokerResponseLogs.constructFromObject(data['Logs']);
            }
            if (data.hasOwnProperty('MaintenanceWindowStartTime')) {
                obj['MaintenanceWindowStartTime'] = DescribeBrokerResponseMaintenanceWindowStartTime.constructFromObject(data['MaintenanceWindowStartTime']);
            }
            if (data.hasOwnProperty('SecurityGroups')) {
                obj['SecurityGroups'] = ApiClient.convertToType(data['SecurityGroups'], Array);
            }
            if (data.hasOwnProperty('DataReplicationMetadata')) {
                obj['DataReplicationMetadata'] = DescribeBrokerResponseDataReplicationMetadata.constructFromObject(data['DataReplicationMetadata']);
            }
            if (data.hasOwnProperty('DataReplicationMode')) {
                obj['DataReplicationMode'] = ApiClient.convertToType(data['DataReplicationMode'], DataReplicationMode);
            }
            if (data.hasOwnProperty('PendingDataReplicationMetadata')) {
                obj['PendingDataReplicationMetadata'] = DescribeBrokerResponsePendingDataReplicationMetadata.constructFromObject(data['PendingDataReplicationMetadata']);
            }
            if (data.hasOwnProperty('PendingDataReplicationMode')) {
                obj['PendingDataReplicationMode'] = ApiClient.convertToType(data['PendingDataReplicationMode'], DataReplicationMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateBrokerResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateBrokerResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AuthenticationStrategy`
        if (data['AuthenticationStrategy']) { // data not null
          AuthenticationStrategy.validateJSON(data['AuthenticationStrategy']);
        }
        // validate the optional field `AutoMinorVersionUpgrade`
        if (data['AutoMinorVersionUpgrade']) { // data not null
          Boolean.validateJSON(data['AutoMinorVersionUpgrade']);
        }
        // validate the optional field `BrokerId`
        if (data['BrokerId']) { // data not null
          String.validateJSON(data['BrokerId']);
        }
        // validate the optional field `Configuration`
        if (data['Configuration']) { // data not null
          UpdateBrokerResponseConfiguration.validateJSON(data['Configuration']);
        }
        // validate the optional field `EngineVersion`
        if (data['EngineVersion']) { // data not null
          String.validateJSON(data['EngineVersion']);
        }
        // validate the optional field `HostInstanceType`
        if (data['HostInstanceType']) { // data not null
          String.validateJSON(data['HostInstanceType']);
        }
        // validate the optional field `LdapServerMetadata`
        if (data['LdapServerMetadata']) { // data not null
          UpdateBrokerResponseLdapServerMetadata.validateJSON(data['LdapServerMetadata']);
        }
        // validate the optional field `Logs`
        if (data['Logs']) { // data not null
          UpdateBrokerResponseLogs.validateJSON(data['Logs']);
        }
        // validate the optional field `MaintenanceWindowStartTime`
        if (data['MaintenanceWindowStartTime']) { // data not null
          DescribeBrokerResponseMaintenanceWindowStartTime.validateJSON(data['MaintenanceWindowStartTime']);
        }
        // validate the optional field `SecurityGroups`
        if (data['SecurityGroups']) { // data not null
          Array.validateJSON(data['SecurityGroups']);
        }
        // validate the optional field `DataReplicationMetadata`
        if (data['DataReplicationMetadata']) { // data not null
          DescribeBrokerResponseDataReplicationMetadata.validateJSON(data['DataReplicationMetadata']);
        }
        // validate the optional field `DataReplicationMode`
        if (data['DataReplicationMode']) { // data not null
          DataReplicationMode.validateJSON(data['DataReplicationMode']);
        }
        // validate the optional field `PendingDataReplicationMetadata`
        if (data['PendingDataReplicationMetadata']) { // data not null
          DescribeBrokerResponsePendingDataReplicationMetadata.validateJSON(data['PendingDataReplicationMetadata']);
        }
        // validate the optional field `PendingDataReplicationMode`
        if (data['PendingDataReplicationMode']) { // data not null
          DataReplicationMode.validateJSON(data['PendingDataReplicationMode']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuthenticationStrategy} AuthenticationStrategy
 */
UpdateBrokerResponse.prototype['AuthenticationStrategy'] = undefined;

/**
 * @member {Boolean} AutoMinorVersionUpgrade
 */
UpdateBrokerResponse.prototype['AutoMinorVersionUpgrade'] = undefined;

/**
 * @member {String} BrokerId
 */
UpdateBrokerResponse.prototype['BrokerId'] = undefined;

/**
 * @member {module:model/UpdateBrokerResponseConfiguration} Configuration
 */
UpdateBrokerResponse.prototype['Configuration'] = undefined;

/**
 * @member {String} EngineVersion
 */
UpdateBrokerResponse.prototype['EngineVersion'] = undefined;

/**
 * @member {String} HostInstanceType
 */
UpdateBrokerResponse.prototype['HostInstanceType'] = undefined;

/**
 * @member {module:model/UpdateBrokerResponseLdapServerMetadata} LdapServerMetadata
 */
UpdateBrokerResponse.prototype['LdapServerMetadata'] = undefined;

/**
 * @member {module:model/UpdateBrokerResponseLogs} Logs
 */
UpdateBrokerResponse.prototype['Logs'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseMaintenanceWindowStartTime} MaintenanceWindowStartTime
 */
UpdateBrokerResponse.prototype['MaintenanceWindowStartTime'] = undefined;

/**
 * @member {Array} SecurityGroups
 */
UpdateBrokerResponse.prototype['SecurityGroups'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponseDataReplicationMetadata} DataReplicationMetadata
 */
UpdateBrokerResponse.prototype['DataReplicationMetadata'] = undefined;

/**
 * @member {module:model/DataReplicationMode} DataReplicationMode
 */
UpdateBrokerResponse.prototype['DataReplicationMode'] = undefined;

/**
 * @member {module:model/DescribeBrokerResponsePendingDataReplicationMetadata} PendingDataReplicationMetadata
 */
UpdateBrokerResponse.prototype['PendingDataReplicationMetadata'] = undefined;

/**
 * @member {module:model/DataReplicationMode} PendingDataReplicationMode
 */
UpdateBrokerResponse.prototype['PendingDataReplicationMode'] = undefined;






export default UpdateBrokerResponse;

