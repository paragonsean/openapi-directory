/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LdapServerMetadataOutput from './LdapServerMetadataOutput';

/**
 * The DescribeBrokerResponseLdapServerMetadata model module.
 * @module model/DescribeBrokerResponseLdapServerMetadata
 * @version 2017-11-27
 */
class DescribeBrokerResponseLdapServerMetadata {
    /**
     * Constructs a new <code>DescribeBrokerResponseLdapServerMetadata</code>.
     * @alias module:model/DescribeBrokerResponseLdapServerMetadata
     * @implements module:model/LdapServerMetadataOutput
     * @param hosts {Array} 
     * @param roleBase {String} 
     * @param roleSearchMatching {String} 
     * @param serviceAccountUsername {String} 
     * @param userBase {String} 
     * @param userSearchMatching {String} 
     */
    constructor(hosts, roleBase, roleSearchMatching, serviceAccountUsername, userBase, userSearchMatching) { 
        LdapServerMetadataOutput.initialize(this, hosts, roleBase, roleSearchMatching, serviceAccountUsername, userBase, userSearchMatching);
        DescribeBrokerResponseLdapServerMetadata.initialize(this, hosts, roleBase, roleSearchMatching, serviceAccountUsername, userBase, userSearchMatching);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hosts, roleBase, roleSearchMatching, serviceAccountUsername, userBase, userSearchMatching) { 
        obj['Hosts'] = hosts;
        obj['RoleBase'] = roleBase;
        obj['RoleSearchMatching'] = roleSearchMatching;
        obj['ServiceAccountUsername'] = serviceAccountUsername;
        obj['UserBase'] = userBase;
        obj['UserSearchMatching'] = userSearchMatching;
    }

    /**
     * Constructs a <code>DescribeBrokerResponseLdapServerMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeBrokerResponseLdapServerMetadata} obj Optional instance to populate.
     * @return {module:model/DescribeBrokerResponseLdapServerMetadata} The populated <code>DescribeBrokerResponseLdapServerMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeBrokerResponseLdapServerMetadata();
            LdapServerMetadataOutput.constructFromObject(data, obj);

            if (data.hasOwnProperty('Hosts')) {
                obj['Hosts'] = ApiClient.convertToType(data['Hosts'], Array);
            }
            if (data.hasOwnProperty('RoleBase')) {
                obj['RoleBase'] = ApiClient.convertToType(data['RoleBase'], 'String');
            }
            if (data.hasOwnProperty('RoleName')) {
                obj['RoleName'] = ApiClient.convertToType(data['RoleName'], 'String');
            }
            if (data.hasOwnProperty('RoleSearchMatching')) {
                obj['RoleSearchMatching'] = ApiClient.convertToType(data['RoleSearchMatching'], 'String');
            }
            if (data.hasOwnProperty('RoleSearchSubtree')) {
                obj['RoleSearchSubtree'] = ApiClient.convertToType(data['RoleSearchSubtree'], 'Boolean');
            }
            if (data.hasOwnProperty('ServiceAccountUsername')) {
                obj['ServiceAccountUsername'] = ApiClient.convertToType(data['ServiceAccountUsername'], 'String');
            }
            if (data.hasOwnProperty('UserBase')) {
                obj['UserBase'] = ApiClient.convertToType(data['UserBase'], 'String');
            }
            if (data.hasOwnProperty('UserRoleName')) {
                obj['UserRoleName'] = ApiClient.convertToType(data['UserRoleName'], 'String');
            }
            if (data.hasOwnProperty('UserSearchMatching')) {
                obj['UserSearchMatching'] = ApiClient.convertToType(data['UserSearchMatching'], 'String');
            }
            if (data.hasOwnProperty('UserSearchSubtree')) {
                obj['UserSearchSubtree'] = ApiClient.convertToType(data['UserSearchSubtree'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeBrokerResponseLdapServerMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeBrokerResponseLdapServerMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeBrokerResponseLdapServerMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Hosts`
        if (data['Hosts']) { // data not null
          Array.validateJSON(data['Hosts']);
        }
        // validate the optional field `RoleBase`
        if (data['RoleBase']) { // data not null
          String.validateJSON(data['RoleBase']);
        }
        // validate the optional field `RoleName`
        if (data['RoleName']) { // data not null
          String.validateJSON(data['RoleName']);
        }
        // validate the optional field `RoleSearchMatching`
        if (data['RoleSearchMatching']) { // data not null
          String.validateJSON(data['RoleSearchMatching']);
        }
        // validate the optional field `RoleSearchSubtree`
        if (data['RoleSearchSubtree']) { // data not null
          Boolean.validateJSON(data['RoleSearchSubtree']);
        }
        // validate the optional field `ServiceAccountUsername`
        if (data['ServiceAccountUsername']) { // data not null
          String.validateJSON(data['ServiceAccountUsername']);
        }
        // validate the optional field `UserBase`
        if (data['UserBase']) { // data not null
          String.validateJSON(data['UserBase']);
        }
        // validate the optional field `UserRoleName`
        if (data['UserRoleName']) { // data not null
          String.validateJSON(data['UserRoleName']);
        }
        // validate the optional field `UserSearchMatching`
        if (data['UserSearchMatching']) { // data not null
          String.validateJSON(data['UserSearchMatching']);
        }
        // validate the optional field `UserSearchSubtree`
        if (data['UserSearchSubtree']) { // data not null
          Boolean.validateJSON(data['UserSearchSubtree']);
        }

        return true;
    }


}

DescribeBrokerResponseLdapServerMetadata.RequiredProperties = ["Hosts", "RoleBase", "RoleSearchMatching", "ServiceAccountUsername", "UserBase", "UserSearchMatching"];

/**
 * @member {Array} Hosts
 */
DescribeBrokerResponseLdapServerMetadata.prototype['Hosts'] = undefined;

/**
 * @member {String} RoleBase
 */
DescribeBrokerResponseLdapServerMetadata.prototype['RoleBase'] = undefined;

/**
 * @member {String} RoleName
 */
DescribeBrokerResponseLdapServerMetadata.prototype['RoleName'] = undefined;

/**
 * @member {String} RoleSearchMatching
 */
DescribeBrokerResponseLdapServerMetadata.prototype['RoleSearchMatching'] = undefined;

/**
 * @member {Boolean} RoleSearchSubtree
 */
DescribeBrokerResponseLdapServerMetadata.prototype['RoleSearchSubtree'] = undefined;

/**
 * @member {String} ServiceAccountUsername
 */
DescribeBrokerResponseLdapServerMetadata.prototype['ServiceAccountUsername'] = undefined;

/**
 * @member {String} UserBase
 */
DescribeBrokerResponseLdapServerMetadata.prototype['UserBase'] = undefined;

/**
 * @member {String} UserRoleName
 */
DescribeBrokerResponseLdapServerMetadata.prototype['UserRoleName'] = undefined;

/**
 * @member {String} UserSearchMatching
 */
DescribeBrokerResponseLdapServerMetadata.prototype['UserSearchMatching'] = undefined;

/**
 * @member {Boolean} UserSearchSubtree
 */
DescribeBrokerResponseLdapServerMetadata.prototype['UserSearchSubtree'] = undefined;


// Implement LdapServerMetadataOutput interface:
/**
 * @member {Array} Hosts
 */
LdapServerMetadataOutput.prototype['Hosts'] = undefined;
/**
 * @member {String} RoleBase
 */
LdapServerMetadataOutput.prototype['RoleBase'] = undefined;
/**
 * @member {String} RoleName
 */
LdapServerMetadataOutput.prototype['RoleName'] = undefined;
/**
 * @member {String} RoleSearchMatching
 */
LdapServerMetadataOutput.prototype['RoleSearchMatching'] = undefined;
/**
 * @member {Boolean} RoleSearchSubtree
 */
LdapServerMetadataOutput.prototype['RoleSearchSubtree'] = undefined;
/**
 * @member {String} ServiceAccountUsername
 */
LdapServerMetadataOutput.prototype['ServiceAccountUsername'] = undefined;
/**
 * @member {String} UserBase
 */
LdapServerMetadataOutput.prototype['UserBase'] = undefined;
/**
 * @member {String} UserRoleName
 */
LdapServerMetadataOutput.prototype['UserRoleName'] = undefined;
/**
 * @member {String} UserSearchMatching
 */
LdapServerMetadataOutput.prototype['UserSearchMatching'] = undefined;
/**
 * @member {Boolean} UserSearchSubtree
 */
LdapServerMetadataOutput.prototype['UserSearchSubtree'] = undefined;




export default DescribeBrokerResponseLdapServerMetadata;

