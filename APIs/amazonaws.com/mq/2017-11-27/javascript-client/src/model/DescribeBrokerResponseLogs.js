/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogsSummary from './LogsSummary';
import LogsSummaryPending from './LogsSummaryPending';

/**
 * The DescribeBrokerResponseLogs model module.
 * @module model/DescribeBrokerResponseLogs
 * @version 2017-11-27
 */
class DescribeBrokerResponseLogs {
    /**
     * Constructs a new <code>DescribeBrokerResponseLogs</code>.
     * @alias module:model/DescribeBrokerResponseLogs
     * @implements module:model/LogsSummary
     * @param general {Boolean} 
     * @param generalLogGroup {String} 
     */
    constructor(general, generalLogGroup) { 
        LogsSummary.initialize(this, general, generalLogGroup);
        DescribeBrokerResponseLogs.initialize(this, general, generalLogGroup);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, general, generalLogGroup) { 
        obj['General'] = general;
        obj['GeneralLogGroup'] = generalLogGroup;
    }

    /**
     * Constructs a <code>DescribeBrokerResponseLogs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeBrokerResponseLogs} obj Optional instance to populate.
     * @return {module:model/DescribeBrokerResponseLogs} The populated <code>DescribeBrokerResponseLogs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeBrokerResponseLogs();
            LogsSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('Audit')) {
                obj['Audit'] = ApiClient.convertToType(data['Audit'], 'Boolean');
            }
            if (data.hasOwnProperty('AuditLogGroup')) {
                obj['AuditLogGroup'] = ApiClient.convertToType(data['AuditLogGroup'], 'String');
            }
            if (data.hasOwnProperty('General')) {
                obj['General'] = ApiClient.convertToType(data['General'], 'Boolean');
            }
            if (data.hasOwnProperty('GeneralLogGroup')) {
                obj['GeneralLogGroup'] = ApiClient.convertToType(data['GeneralLogGroup'], 'String');
            }
            if (data.hasOwnProperty('Pending')) {
                obj['Pending'] = LogsSummaryPending.constructFromObject(data['Pending']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeBrokerResponseLogs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeBrokerResponseLogs</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeBrokerResponseLogs.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Audit`
        if (data['Audit']) { // data not null
          Boolean.validateJSON(data['Audit']);
        }
        // validate the optional field `AuditLogGroup`
        if (data['AuditLogGroup']) { // data not null
          String.validateJSON(data['AuditLogGroup']);
        }
        // validate the optional field `General`
        if (data['General']) { // data not null
          Boolean.validateJSON(data['General']);
        }
        // validate the optional field `GeneralLogGroup`
        if (data['GeneralLogGroup']) { // data not null
          String.validateJSON(data['GeneralLogGroup']);
        }
        // validate the optional field `Pending`
        if (data['Pending']) { // data not null
          LogsSummaryPending.validateJSON(data['Pending']);
        }

        return true;
    }


}

DescribeBrokerResponseLogs.RequiredProperties = ["General", "GeneralLogGroup"];

/**
 * @member {Boolean} Audit
 */
DescribeBrokerResponseLogs.prototype['Audit'] = undefined;

/**
 * @member {String} AuditLogGroup
 */
DescribeBrokerResponseLogs.prototype['AuditLogGroup'] = undefined;

/**
 * @member {Boolean} General
 */
DescribeBrokerResponseLogs.prototype['General'] = undefined;

/**
 * @member {String} GeneralLogGroup
 */
DescribeBrokerResponseLogs.prototype['GeneralLogGroup'] = undefined;

/**
 * @member {module:model/LogsSummaryPending} Pending
 */
DescribeBrokerResponseLogs.prototype['Pending'] = undefined;


// Implement LogsSummary interface:
/**
 * @member {Boolean} Audit
 */
LogsSummary.prototype['Audit'] = undefined;
/**
 * @member {String} AuditLogGroup
 */
LogsSummary.prototype['AuditLogGroup'] = undefined;
/**
 * @member {Boolean} General
 */
LogsSummary.prototype['General'] = undefined;
/**
 * @member {String} GeneralLogGroup
 */
LogsSummary.prototype['GeneralLogGroup'] = undefined;
/**
 * @member {module:model/LogsSummaryPending} Pending
 */
LogsSummary.prototype['Pending'] = undefined;




export default DescribeBrokerResponseLogs;

