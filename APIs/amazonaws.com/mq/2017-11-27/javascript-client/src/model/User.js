/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 2017-11-27
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * A user associated with the broker. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.
     * @alias module:model/User
     * @param password {String} 
     * @param username {String} 
     */
    constructor(password, username) { 
        
        User.initialize(this, password, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, password, username) { 
        obj['Password'] = password;
        obj['Username'] = username;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('ConsoleAccess')) {
                obj['ConsoleAccess'] = ApiClient.convertToType(data['ConsoleAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('Groups')) {
                obj['Groups'] = ApiClient.convertToType(data['Groups'], Array);
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('ReplicationUser')) {
                obj['ReplicationUser'] = ApiClient.convertToType(data['ReplicationUser'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ConsoleAccess`
        if (data['ConsoleAccess']) { // data not null
          Boolean.validateJSON(data['ConsoleAccess']);
        }
        // validate the optional field `Groups`
        if (data['Groups']) { // data not null
          Array.validateJSON(data['Groups']);
        }
        // validate the optional field `Password`
        if (data['Password']) { // data not null
          String.validateJSON(data['Password']);
        }
        // validate the optional field `Username`
        if (data['Username']) { // data not null
          String.validateJSON(data['Username']);
        }
        // validate the optional field `ReplicationUser`
        if (data['ReplicationUser']) { // data not null
          Boolean.validateJSON(data['ReplicationUser']);
        }

        return true;
    }


}

User.RequiredProperties = ["Password", "Username"];

/**
 * @member {Boolean} ConsoleAccess
 */
User.prototype['ConsoleAccess'] = undefined;

/**
 * @member {Array} Groups
 */
User.prototype['Groups'] = undefined;

/**
 * @member {String} Password
 */
User.prototype['Password'] = undefined;

/**
 * @member {String} Username
 */
User.prototype['Username'] = undefined;

/**
 * @member {Boolean} ReplicationUser
 */
User.prototype['ReplicationUser'] = undefined;






export default User;

