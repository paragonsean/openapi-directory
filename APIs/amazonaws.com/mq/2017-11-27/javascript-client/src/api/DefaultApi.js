/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBrokerRequest from '../model/CreateBrokerRequest';
import CreateBrokerResponse from '../model/CreateBrokerResponse';
import CreateConfigurationRequest from '../model/CreateConfigurationRequest';
import CreateConfigurationResponse from '../model/CreateConfigurationResponse';
import CreateTagsRequest from '../model/CreateTagsRequest';
import CreateUserRequest from '../model/CreateUserRequest';
import DeleteBrokerResponse from '../model/DeleteBrokerResponse';
import DescribeBrokerEngineTypesResponse from '../model/DescribeBrokerEngineTypesResponse';
import DescribeBrokerInstanceOptionsResponse from '../model/DescribeBrokerInstanceOptionsResponse';
import DescribeBrokerResponse from '../model/DescribeBrokerResponse';
import DescribeConfigurationResponse from '../model/DescribeConfigurationResponse';
import DescribeConfigurationRevisionResponse from '../model/DescribeConfigurationRevisionResponse';
import DescribeUserResponse from '../model/DescribeUserResponse';
import ListBrokersResponse from '../model/ListBrokersResponse';
import ListConfigurationRevisionsResponse from '../model/ListConfigurationRevisionsResponse';
import ListConfigurationsResponse from '../model/ListConfigurationsResponse';
import ListTagsResponse from '../model/ListTagsResponse';
import ListUsersResponse from '../model/ListUsersResponse';
import PromoteRequest from '../model/PromoteRequest';
import PromoteResponse from '../model/PromoteResponse';
import UpdateBrokerRequest from '../model/UpdateBrokerRequest';
import UpdateBrokerResponse from '../model/UpdateBrokerResponse';
import UpdateConfigurationRequest from '../model/UpdateConfigurationRequest';
import UpdateConfigurationResponse from '../model/UpdateConfigurationResponse';
import UpdateUserRequest from '../model/UpdateUserRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-11-27
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBroker operation.
     * @callback module:api/DefaultApi~createBrokerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBrokerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is required to attach the ENI to the broker instance.</p></li> <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li> <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li> <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li> <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li> <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user\">Create an IAM User and Get Your Amazon Web Services Credentials</a> and <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface\">Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.</p>
     * @param {module:model/CreateBrokerRequest} createBrokerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBrokerResponse}
     */
    createBroker(createBrokerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBrokerRequest;
      // verify the required parameter 'createBrokerRequest' is set
      if (createBrokerRequest === undefined || createBrokerRequest === null) {
        throw new Error("Missing the required parameter 'createBrokerRequest' when calling createBroker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBrokerResponse;
      return this.apiClient.callApi(
        '/v1/brokers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfiguration operation.
     * @callback module:api/DefaultApi~createConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
     * @param {module:model/CreateConfigurationRequest} createConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConfigurationResponse}
     */
    createConfiguration(createConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfigurationRequest;
      // verify the required parameter 'createConfigurationRequest' is set
      if (createConfigurationRequest === undefined || createConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createConfigurationRequest' when calling createConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTags operation.
     * @callback module:api/DefaultApi~createTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource tag.
     * @param {module:model/CreateTagsRequest} createTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTags(resourceArn, createTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTagsRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling createTags");
      }
      // verify the required parameter 'createTagsRequest' is set
      if (createTagsRequest === undefined || createTagsRequest === null) {
        throw new Error("Missing the required parameter 'createTagsRequest' when calling createTags");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{resource-arn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an ActiveMQ user.</p> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker usernames are not intended to be used for private or sensitive data.</p></important>
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {String} username The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createUser(brokerId, username, createUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserRequest;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling createUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createUser");
      }
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
        'broker-id': brokerId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/users/{username}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBroker operation.
     * @callback module:api/DefaultApi~deleteBrokerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBrokerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a broker. Note: This API is asynchronous.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBrokerResponse}
     */
    deleteBroker(brokerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling deleteBroker");
      }

      let pathParams = {
        'broker-id': brokerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBrokerResponse;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTags operation.
     * @callback module:api/DefaultApi~deleteTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource tag.
     * @param {Array.<String>} tagKeys An array of tag keys to delete
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTags(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling deleteTags");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling deleteTags");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{resource-arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an ActiveMQ user.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {String} username The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUser(brokerId, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling deleteUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteUser");
      }

      let pathParams = {
        'broker-id': brokerId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBroker operation.
     * @callback module:api/DefaultApi~describeBrokerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBrokerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified broker.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBrokerResponse}
     */
    describeBroker(brokerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling describeBroker");
      }

      let pathParams = {
        'broker-id': brokerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBrokerResponse;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBrokerEngineTypes operation.
     * @callback module:api/DefaultApi~describeBrokerEngineTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBrokerEngineTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe available engine types and versions.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [engineType] Filter response by engine type.
     * @param {Number} [maxResults] The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
     * @param {String} [nextToken] The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.
     * @param {module:api/DefaultApi~describeBrokerEngineTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBrokerEngineTypesResponse}
     */
    describeBrokerEngineTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'engineType': opts['engineType'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBrokerEngineTypesResponse;
      return this.apiClient.callApi(
        '/v1/broker-engine-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBrokerInstanceOptions operation.
     * @callback module:api/DefaultApi~describeBrokerInstanceOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBrokerInstanceOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe available broker instance options.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [engineType] Filter response by engine type.
     * @param {String} [hostInstanceType] Filter response by host instance type.
     * @param {Number} [maxResults] The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
     * @param {String} [nextToken] The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.
     * @param {String} [storageType] Filter response by storage type.
     * @param {module:api/DefaultApi~describeBrokerInstanceOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBrokerInstanceOptionsResponse}
     */
    describeBrokerInstanceOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'engineType': opts['engineType'],
        'hostInstanceType': opts['hostInstanceType'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'storageType': opts['storageType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBrokerInstanceOptionsResponse;
      return this.apiClient.callApi(
        '/v1/broker-instance-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConfiguration operation.
     * @callback module:api/DefaultApi~describeConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified configuration.
     * @param {String} configurationId The unique ID that Amazon MQ generates for the configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConfigurationResponse}
     */
    describeConfiguration(configurationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling describeConfiguration");
      }

      let pathParams = {
        'configuration-id': configurationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{configuration-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConfigurationRevision operation.
     * @callback module:api/DefaultApi~describeConfigurationRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConfigurationRevisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the specified configuration revision for the specified configuration.
     * @param {String} configurationId The unique ID that Amazon MQ generates for the configuration.
     * @param {String} configurationRevision The revision of the configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConfigurationRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConfigurationRevisionResponse}
     */
    describeConfigurationRevision(configurationId, configurationRevision, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling describeConfigurationRevision");
      }
      // verify the required parameter 'configurationRevision' is set
      if (configurationRevision === undefined || configurationRevision === null) {
        throw new Error("Missing the required parameter 'configurationRevision' when calling describeConfigurationRevision");
      }

      let pathParams = {
        'configuration-id': configurationId,
        'configuration-revision': configurationRevision
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeConfigurationRevisionResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{configuration-id}/revisions/{configuration-revision}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUser operation.
     * @callback module:api/DefaultApi~describeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an ActiveMQ user.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {String} username The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserResponse}
     */
    describeUser(brokerId, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling describeUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling describeUser");
      }

      let pathParams = {
        'broker-id': brokerId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeUserResponse;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBrokers operation.
     * @callback module:api/DefaultApi~listBrokersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBrokersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all brokers.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
     * @param {String} [nextToken] The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBrokersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBrokersResponse}
     */
    listBrokers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBrokersResponse;
      return this.apiClient.callApi(
        '/v1/brokers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurationRevisions operation.
     * @callback module:api/DefaultApi~listConfigurationRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all revisions for the specified configuration.
     * @param {String} configurationId The unique ID that Amazon MQ generates for the configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
     * @param {String} [nextToken] The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.
     * @param {module:api/DefaultApi~listConfigurationRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationRevisionsResponse}
     */
    listConfigurationRevisions(configurationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling listConfigurationRevisions");
      }

      let pathParams = {
        'configuration-id': configurationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationRevisionsResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{configuration-id}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfigurations operation.
     * @callback module:api/DefaultApi~listConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all configurations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
     * @param {String} [nextToken] The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.
     * @param {module:api/DefaultApi~listConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfigurationsResponse}
     */
    listConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfigurationsResponse;
      return this.apiClient.callApi(
        '/v1/configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/DefaultApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists tags for a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource tag.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsResponse}
     */
    listTags(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTags");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsResponse;
      return this.apiClient.callApi(
        '/v1/tags/{resource-arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/DefaultApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all ActiveMQ users.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.
     * @param {String} [nextToken] The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.
     * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersResponse}
     */
    listUsers(brokerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling listUsers");
      }

      let pathParams = {
        'broker-id': brokerId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersResponse;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the promote operation.
     * @callback module:api/DefaultApi~promoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromoteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promotes a data replication replica broker to the primary broker role.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {module:model/PromoteRequest} promoteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~promoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromoteResponse}
     */
    promote(brokerId, promoteRequest, opts, callback) {
      opts = opts || {};
      let postBody = promoteRequest;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling promote");
      }
      // verify the required parameter 'promoteRequest' is set
      if (promoteRequest === undefined || promoteRequest === null) {
        throw new Error("Missing the required parameter 'promoteRequest' when calling promote");
      }

      let pathParams = {
        'broker-id': brokerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PromoteResponse;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/promote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebootBroker operation.
     * @callback module:api/DefaultApi~rebootBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboots a broker. Note: This API is asynchronous.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rebootBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    rebootBroker(brokerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling rebootBroker");
      }

      let pathParams = {
        'broker-id': brokerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBroker operation.
     * @callback module:api/DefaultApi~updateBrokerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBrokerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a pending configuration change to a broker.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {module:model/UpdateBrokerRequest} updateBrokerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBrokerResponse}
     */
    updateBroker(brokerId, updateBrokerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBrokerRequest;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling updateBroker");
      }
      // verify the required parameter 'updateBrokerRequest' is set
      if (updateBrokerRequest === undefined || updateBrokerRequest === null) {
        throw new Error("Missing the required parameter 'updateBrokerRequest' when calling updateBroker");
      }

      let pathParams = {
        'broker-id': brokerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBrokerResponse;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguration operation.
     * @callback module:api/DefaultApi~updateConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified configuration.
     * @param {String} configurationId The unique ID that Amazon MQ generates for the configuration.
     * @param {module:model/UpdateConfigurationRequest} updateConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConfigurationResponse}
     */
    updateConfiguration(configurationId, updateConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfigurationRequest;
      // verify the required parameter 'configurationId' is set
      if (configurationId === undefined || configurationId === null) {
        throw new Error("Missing the required parameter 'configurationId' when calling updateConfiguration");
      }
      // verify the required parameter 'updateConfigurationRequest' is set
      if (updateConfigurationRequest === undefined || updateConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigurationRequest' when calling updateConfiguration");
      }

      let pathParams = {
        'configuration-id': configurationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/configurations/{configuration-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the information for an ActiveMQ user.
     * @param {String} brokerId The unique ID that Amazon MQ generates for the broker.
     * @param {String} username The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
     * @param {module:model/UpdateUserRequest} updateUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateUser(brokerId, username, updateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserRequest;
      // verify the required parameter 'brokerId' is set
      if (brokerId === undefined || brokerId === null) {
        throw new Error("Missing the required parameter 'brokerId' when calling updateUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateUser");
      }
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }

      let pathParams = {
        'broker-id': brokerId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/brokers/{broker-id}/users/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
