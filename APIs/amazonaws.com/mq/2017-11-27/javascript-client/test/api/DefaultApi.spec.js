/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonMq);
  }
}(this, function(expect, AmazonMq) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonMq.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createBroker', function() {
      it('should call createBroker successfully', function(done) {
        //uncomment below and update the code to test createBroker
        //instance.createBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfiguration', function() {
      it('should call createConfiguration successfully', function(done) {
        //uncomment below and update the code to test createConfiguration
        //instance.createConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTags', function() {
      it('should call createTags successfully', function(done) {
        //uncomment below and update the code to test createTags
        //instance.createTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBroker', function() {
      it('should call deleteBroker successfully', function(done) {
        //uncomment below and update the code to test deleteBroker
        //instance.deleteBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTags', function() {
      it('should call deleteTags successfully', function(done) {
        //uncomment below and update the code to test deleteTags
        //instance.deleteTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBroker', function() {
      it('should call describeBroker successfully', function(done) {
        //uncomment below and update the code to test describeBroker
        //instance.describeBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBrokerEngineTypes', function() {
      it('should call describeBrokerEngineTypes successfully', function(done) {
        //uncomment below and update the code to test describeBrokerEngineTypes
        //instance.describeBrokerEngineTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBrokerInstanceOptions', function() {
      it('should call describeBrokerInstanceOptions successfully', function(done) {
        //uncomment below and update the code to test describeBrokerInstanceOptions
        //instance.describeBrokerInstanceOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConfiguration', function() {
      it('should call describeConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeConfiguration
        //instance.describeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConfigurationRevision', function() {
      it('should call describeConfigurationRevision successfully', function(done) {
        //uncomment below and update the code to test describeConfigurationRevision
        //instance.describeConfigurationRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUser', function() {
      it('should call describeUser successfully', function(done) {
        //uncomment below and update the code to test describeUser
        //instance.describeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBrokers', function() {
      it('should call listBrokers successfully', function(done) {
        //uncomment below and update the code to test listBrokers
        //instance.listBrokers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigurationRevisions', function() {
      it('should call listConfigurationRevisions successfully', function(done) {
        //uncomment below and update the code to test listConfigurationRevisions
        //instance.listConfigurationRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConfigurations', function() {
      it('should call listConfigurations successfully', function(done) {
        //uncomment below and update the code to test listConfigurations
        //instance.listConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTags', function() {
      it('should call listTags successfully', function(done) {
        //uncomment below and update the code to test listTags
        //instance.listTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('promote', function() {
      it('should call promote successfully', function(done) {
        //uncomment below and update the code to test promote
        //instance.promote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebootBroker', function() {
      it('should call rebootBroker successfully', function(done) {
        //uncomment below and update the code to test rebootBroker
        //instance.rebootBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBroker', function() {
      it('should call updateBroker successfully', function(done) {
        //uncomment below and update the code to test updateBroker
        //instance.updateBroker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConfiguration', function() {
      it('should call updateConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateConfiguration
        //instance.updateConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
