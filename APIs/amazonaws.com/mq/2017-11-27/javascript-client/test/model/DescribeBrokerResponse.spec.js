/**
 * AmazonMQ
 * Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.
 *
 * The version of the OpenAPI document: 2017-11-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonMq);
  }
}(this, function(expect, AmazonMq) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonMq.DescribeBrokerResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeBrokerResponse', function() {
    it('should create an instance of DescribeBrokerResponse', function() {
      // uncomment below and update the code to test DescribeBrokerResponse
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be.a(AmazonMq.DescribeBrokerResponse);
    });

    it('should have the property actionsRequired (base name: "ActionsRequired")', function() {
      // uncomment below and update the code to test the property actionsRequired
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property authenticationStrategy (base name: "AuthenticationStrategy")', function() {
      // uncomment below and update the code to test the property authenticationStrategy
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property autoMinorVersionUpgrade (base name: "AutoMinorVersionUpgrade")', function() {
      // uncomment below and update the code to test the property autoMinorVersionUpgrade
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property brokerArn (base name: "BrokerArn")', function() {
      // uncomment below and update the code to test the property brokerArn
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property brokerId (base name: "BrokerId")', function() {
      // uncomment below and update the code to test the property brokerId
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property brokerInstances (base name: "BrokerInstances")', function() {
      // uncomment below and update the code to test the property brokerInstances
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property brokerName (base name: "BrokerName")', function() {
      // uncomment below and update the code to test the property brokerName
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property brokerState (base name: "BrokerState")', function() {
      // uncomment below and update the code to test the property brokerState
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property configurations (base name: "Configurations")', function() {
      // uncomment below and update the code to test the property configurations
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property deploymentMode (base name: "DeploymentMode")', function() {
      // uncomment below and update the code to test the property deploymentMode
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property encryptionOptions (base name: "EncryptionOptions")', function() {
      // uncomment below and update the code to test the property encryptionOptions
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property engineType (base name: "EngineType")', function() {
      // uncomment below and update the code to test the property engineType
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property hostInstanceType (base name: "HostInstanceType")', function() {
      // uncomment below and update the code to test the property hostInstanceType
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property ldapServerMetadata (base name: "LdapServerMetadata")', function() {
      // uncomment below and update the code to test the property ldapServerMetadata
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property logs (base name: "Logs")', function() {
      // uncomment below and update the code to test the property logs
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceWindowStartTime (base name: "MaintenanceWindowStartTime")', function() {
      // uncomment below and update the code to test the property maintenanceWindowStartTime
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingAuthenticationStrategy (base name: "PendingAuthenticationStrategy")', function() {
      // uncomment below and update the code to test the property pendingAuthenticationStrategy
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingEngineVersion (base name: "PendingEngineVersion")', function() {
      // uncomment below and update the code to test the property pendingEngineVersion
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingHostInstanceType (base name: "PendingHostInstanceType")', function() {
      // uncomment below and update the code to test the property pendingHostInstanceType
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingLdapServerMetadata (base name: "PendingLdapServerMetadata")', function() {
      // uncomment below and update the code to test the property pendingLdapServerMetadata
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingSecurityGroups (base name: "PendingSecurityGroups")', function() {
      // uncomment below and update the code to test the property pendingSecurityGroups
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property publiclyAccessible (base name: "PubliclyAccessible")', function() {
      // uncomment below and update the code to test the property publiclyAccessible
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property securityGroups (base name: "SecurityGroups")', function() {
      // uncomment below and update the code to test the property securityGroups
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property storageType (base name: "StorageType")', function() {
      // uncomment below and update the code to test the property storageType
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property subnetIds (base name: "SubnetIds")', function() {
      // uncomment below and update the code to test the property subnetIds
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property users (base name: "Users")', function() {
      // uncomment below and update the code to test the property users
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property dataReplicationMetadata (base name: "DataReplicationMetadata")', function() {
      // uncomment below and update the code to test the property dataReplicationMetadata
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property dataReplicationMode (base name: "DataReplicationMode")', function() {
      // uncomment below and update the code to test the property dataReplicationMode
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingDataReplicationMetadata (base name: "PendingDataReplicationMetadata")', function() {
      // uncomment below and update the code to test the property pendingDataReplicationMetadata
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

    it('should have the property pendingDataReplicationMode (base name: "PendingDataReplicationMode")', function() {
      // uncomment below and update the code to test the property pendingDataReplicationMode
      //var instance = new AmazonMq.DescribeBrokerResponse();
      //expect(instance).to.be();
    });

  });

}));
