/**
 * AWS Single Sign-On
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) Portal is a web service that makes it easy for you to assign user access to IAM Identity Center resources such as the AWS access portal. Users can get AWS account applications and roles assigned to them and get federated into the application.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide describes the IAM Identity Center Portal operations that you can call programatically and includes detailed information on data types and errors.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms, such as Java, Ruby, .Net, iOS, or Android. The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccountInfo from './model/AccountInfo';
import GetRoleCredentialsResponse from './model/GetRoleCredentialsResponse';
import GetRoleCredentialsResponseRoleCredentials from './model/GetRoleCredentialsResponseRoleCredentials';
import ListAccountRolesResponse from './model/ListAccountRolesResponse';
import ListAccountsResponse from './model/ListAccountsResponse';
import RoleCredentials from './model/RoleCredentials';
import RoleInfo from './model/RoleInfo';
import DefaultApi from './api/DefaultApi';


/**
* &lt;p&gt;AWS IAM Identity Center (successor to AWS Single Sign-On) Portal is a web service that makes it easy for you to assign user access to IAM Identity Center resources such as the AWS access portal. Users can get AWS account applications and roles assigned to them and get federated into the application.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Although AWS Single Sign-On was renamed, the &lt;code&gt;sso&lt;/code&gt; and &lt;code&gt;identitystore&lt;/code&gt; API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\&quot;&gt;IAM Identity Center rename&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This reference guide describes the IAM Identity Center Portal operations that you can call programatically and includes detailed information on data types and errors.&lt;/p&gt; &lt;note&gt; &lt;p&gt;AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms, such as Java, Ruby, .Net, iOS, or Android. The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/tools/\&quot;&gt;Tools for Amazon Web Services&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AwsSingleSignOn = require('index'); // See note below*.
* var xxxSvc = new AwsSingleSignOn.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AwsSingleSignOn.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AwsSingleSignOn.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AwsSingleSignOn.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2019-06-10
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccountInfo model constructor.
     * @property {module:model/AccountInfo}
     */
    AccountInfo,

    /**
     * The GetRoleCredentialsResponse model constructor.
     * @property {module:model/GetRoleCredentialsResponse}
     */
    GetRoleCredentialsResponse,

    /**
     * The GetRoleCredentialsResponseRoleCredentials model constructor.
     * @property {module:model/GetRoleCredentialsResponseRoleCredentials}
     */
    GetRoleCredentialsResponseRoleCredentials,

    /**
     * The ListAccountRolesResponse model constructor.
     * @property {module:model/ListAccountRolesResponse}
     */
    ListAccountRolesResponse,

    /**
     * The ListAccountsResponse model constructor.
     * @property {module:model/ListAccountsResponse}
     */
    ListAccountsResponse,

    /**
     * The RoleCredentials model constructor.
     * @property {module:model/RoleCredentials}
     */
    RoleCredentials,

    /**
     * The RoleInfo model constructor.
     * @property {module:model/RoleInfo}
     */
    RoleInfo,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
