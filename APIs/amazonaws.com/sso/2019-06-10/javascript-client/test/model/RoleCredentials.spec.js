/**
 * AWS Single Sign-On
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) Portal is a web service that makes it easy for you to assign user access to IAM Identity Center resources such as the AWS access portal. Users can get AWS account applications and roles assigned to them and get federated into the application.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide describes the IAM Identity Center Portal operations that you can call programatically and includes detailed information on data types and errors.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms, such as Java, Ruby, .Net, iOS, or Android. The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSingleSignOn);
  }
}(this, function(expect, AwsSingleSignOn) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSingleSignOn.RoleCredentials();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RoleCredentials', function() {
    it('should create an instance of RoleCredentials', function() {
      // uncomment below and update the code to test RoleCredentials
      //var instance = new AwsSingleSignOn.RoleCredentials();
      //expect(instance).to.be.a(AwsSingleSignOn.RoleCredentials);
    });

    it('should have the property accessKeyId (base name: "accessKeyId")', function() {
      // uncomment below and update the code to test the property accessKeyId
      //var instance = new AwsSingleSignOn.RoleCredentials();
      //expect(instance).to.be();
    });

    it('should have the property secretAccessKey (base name: "secretAccessKey")', function() {
      // uncomment below and update the code to test the property secretAccessKey
      //var instance = new AwsSingleSignOn.RoleCredentials();
      //expect(instance).to.be();
    });

    it('should have the property sessionToken (base name: "sessionToken")', function() {
      // uncomment below and update the code to test the property sessionToken
      //var instance = new AwsSingleSignOn.RoleCredentials();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new AwsSingleSignOn.RoleCredentials();
      //expect(instance).to.be();
    });

  });

}));
