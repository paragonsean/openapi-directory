/*
 * AWS Single Sign-On
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) Portal is a web service that makes it easy for you to assign user access to IAM Identity Center resources such as the AWS access portal. Users can get AWS account applications and roles assigned to them and get federated into the application.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide describes the IAM Identity Center Portal operations that you can call programatically and includes detailed information on data types and errors.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms, such as Java, Ruby, .Net, iOS, or Android. The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetRoleCredentialsResponseRoleCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRoleCredentialsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:29.379266-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRoleCredentialsResponse {
  public static final String SERIALIZED_NAME_ROLE_CREDENTIALS = "roleCredentials";
  @SerializedName(SERIALIZED_NAME_ROLE_CREDENTIALS)
  private GetRoleCredentialsResponseRoleCredentials roleCredentials;

  public GetRoleCredentialsResponse() {
  }

  public GetRoleCredentialsResponse roleCredentials(GetRoleCredentialsResponseRoleCredentials roleCredentials) {
    this.roleCredentials = roleCredentials;
    return this;
  }

  /**
   * Get roleCredentials
   * @return roleCredentials
   */
  @javax.annotation.Nullable
  public GetRoleCredentialsResponseRoleCredentials getRoleCredentials() {
    return roleCredentials;
  }

  public void setRoleCredentials(GetRoleCredentialsResponseRoleCredentials roleCredentials) {
    this.roleCredentials = roleCredentials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRoleCredentialsResponse getRoleCredentialsResponse = (GetRoleCredentialsResponse) o;
    return Objects.equals(this.roleCredentials, getRoleCredentialsResponse.roleCredentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleCredentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRoleCredentialsResponse {\n");
    sb.append("    roleCredentials: ").append(toIndentedString(roleCredentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("roleCredentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRoleCredentialsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRoleCredentialsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRoleCredentialsResponse is not found in the empty JSON string", GetRoleCredentialsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRoleCredentialsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRoleCredentialsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `roleCredentials`
      if (jsonObj.get("roleCredentials") != null && !jsonObj.get("roleCredentials").isJsonNull()) {
        GetRoleCredentialsResponseRoleCredentials.validateJsonElement(jsonObj.get("roleCredentials"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRoleCredentialsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRoleCredentialsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRoleCredentialsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRoleCredentialsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRoleCredentialsResponse>() {
           @Override
           public void write(JsonWriter out, GetRoleCredentialsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRoleCredentialsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRoleCredentialsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRoleCredentialsResponse
   * @throws IOException if the JSON string is invalid with respect to GetRoleCredentialsResponse
   */
  public static GetRoleCredentialsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRoleCredentialsResponse.class);
  }

  /**
   * Convert an instance of GetRoleCredentialsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

