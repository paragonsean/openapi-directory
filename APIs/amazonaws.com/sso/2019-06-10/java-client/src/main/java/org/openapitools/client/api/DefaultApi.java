/*
 * AWS Single Sign-On
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) Portal is a web service that makes it easy for you to assign user access to IAM Identity Center resources such as the AWS access portal. Users can get AWS account applications and roles assigned to them and get federated into the application.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide describes the IAM Identity Center Portal operations that you can call programatically and includes detailed information on data types and errors.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms, such as Java, Ruby, .Net, iOS, or Android. The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2019-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetRoleCredentialsResponse;
import org.openapitools.client.model.ListAccountRolesResponse;
import org.openapitools.client.model.ListAccountsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRoleCredentials
     * @param roleName The friendly name of the role that is assigned to the user. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCredentialsCall(String roleName, String accountId, String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/federation/credentials#role_name&account_id&x-amz-sso_bearer_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (roleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_name", roleName));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzSsoBearerToken != null) {
            localVarHeaderParams.put("x-amz-sso_bearer_token", localVarApiClient.parameterToString(xAmzSsoBearerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleCredentialsValidateBeforeCall(String roleName, String accountId, String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleName' is set
        if (roleName == null) {
            throw new ApiException("Missing the required parameter 'roleName' when calling getRoleCredentials(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getRoleCredentials(Async)");
        }

        // verify the required parameter 'xAmzSsoBearerToken' is set
        if (xAmzSsoBearerToken == null) {
            throw new ApiException("Missing the required parameter 'xAmzSsoBearerToken' when calling getRoleCredentials(Async)");
        }

        return getRoleCredentialsCall(roleName, accountId, xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the STS short-term credentials for a given role name that is assigned to the user.
     * @param roleName The friendly name of the role that is assigned to the user. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRoleCredentialsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetRoleCredentialsResponse getRoleCredentials(String roleName, String accountId, String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRoleCredentialsResponse> localVarResp = getRoleCredentialsWithHttpInfo(roleName, accountId, xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the STS short-term credentials for a given role name that is assigned to the user.
     * @param roleName The friendly name of the role that is assigned to the user. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRoleCredentialsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRoleCredentialsResponse> getRoleCredentialsWithHttpInfo(String roleName, String accountId, String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRoleCredentialsValidateBeforeCall(roleName, accountId, xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRoleCredentialsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the STS short-term credentials for a given role name that is assigned to the user.
     * @param roleName The friendly name of the role that is assigned to the user. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCredentialsAsync(String roleName, String accountId, String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRoleCredentialsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleCredentialsValidateBeforeCall(roleName, accountId, xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRoleCredentialsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccountRoles
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The page token from the previous response output when you request subsequent pages. (optional)
     * @param maxResult The number of items that clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRolesCall(String xAmzSsoBearerToken, String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assignment/roles#x-amz-sso_bearer_token&account_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (maxResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_result", maxResult));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzSsoBearerToken != null) {
            localVarHeaderParams.put("x-amz-sso_bearer_token", localVarApiClient.parameterToString(xAmzSsoBearerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountRolesValidateBeforeCall(String xAmzSsoBearerToken, String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzSsoBearerToken' is set
        if (xAmzSsoBearerToken == null) {
            throw new ApiException("Missing the required parameter 'xAmzSsoBearerToken' when calling listAccountRoles(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountRoles(Async)");
        }

        return listAccountRolesCall(xAmzSsoBearerToken, accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2, _callback);

    }

    /**
     * 
     * Lists all roles that are assigned to the user for a given AWS account.
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The page token from the previous response output when you request subsequent pages. (optional)
     * @param maxResult The number of items that clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAccountRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountRolesResponse listAccountRoles(String xAmzSsoBearerToken, String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2) throws ApiException {
        ApiResponse<ListAccountRolesResponse> localVarResp = listAccountRolesWithHttpInfo(xAmzSsoBearerToken, accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all roles that are assigned to the user for a given AWS account.
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The page token from the previous response output when you request subsequent pages. (optional)
     * @param maxResult The number of items that clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAccountRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountRolesResponse> listAccountRolesWithHttpInfo(String xAmzSsoBearerToken, String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAccountRolesValidateBeforeCall(xAmzSsoBearerToken, accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAccountRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all roles that are assigned to the user for a given AWS account.
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param accountId The identifier for the AWS account that is assigned to the user. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The page token from the previous response output when you request subsequent pages. (optional)
     * @param maxResult The number of items that clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountRolesAsync(String xAmzSsoBearerToken, String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2, final ApiCallback<ListAccountRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountRolesValidateBeforeCall(xAmzSsoBearerToken, accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAccountRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccounts
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken (Optional) When requesting subsequent pages, this is the page token from the previous response output. (optional)
     * @param maxResult This is the number of items clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsCall(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assignment/accounts#x-amz-sso_bearer_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next_token", nextToken));
        }

        if (maxResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_result", maxResult));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzSsoBearerToken != null) {
            localVarHeaderParams.put("x-amz-sso_bearer_token", localVarApiClient.parameterToString(xAmzSsoBearerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsValidateBeforeCall(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzSsoBearerToken' is set
        if (xAmzSsoBearerToken == null) {
            throw new ApiException("Missing the required parameter 'xAmzSsoBearerToken' when calling listAccounts(Async)");
        }

        return listAccountsCall(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2, _callback);

    }

    /**
     * 
     * Lists all AWS accounts assigned to the user. These AWS accounts are assigned by the administrator of the account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/useraccess.html#assignusers\&quot;&gt;Assign User Access&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;. This operation returns a paginated response.
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken (Optional) When requesting subsequent pages, this is the page token from the previous response output. (optional)
     * @param maxResult This is the number of items clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountsResponse listAccounts(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2) throws ApiException {
        ApiResponse<ListAccountsResponse> localVarResp = listAccountsWithHttpInfo(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all AWS accounts assigned to the user. These AWS accounts are assigned by the administrator of the account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/useraccess.html#assignusers\&quot;&gt;Assign User Access&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;. This operation returns a paginated response.
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken (Optional) When requesting subsequent pages, this is the page token from the previous response output. (optional)
     * @param maxResult This is the number of items clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountsResponse> listAccountsWithHttpInfo(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all AWS accounts assigned to the user. These AWS accounts are assigned by the administrator of the account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/useraccess.html#assignusers\&quot;&gt;Assign User Access&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;. This operation returns a paginated response.
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken (Optional) When requesting subsequent pages, this is the page token from the previous response output. (optional)
     * @param maxResult This is the number of items clients can request per page. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsAsync(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResult, String maxResults, String nextToken2, final ApiCallback<ListAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResult, maxResults, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logout#x-amz-sso_bearer_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzSsoBearerToken != null) {
            localVarHeaderParams.put("x-amz-sso_bearer_token", localVarApiClient.parameterToString(xAmzSsoBearerToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzSsoBearerToken' is set
        if (xAmzSsoBearerToken == null) {
            throw new ApiException("Missing the required parameter 'xAmzSsoBearerToken' when calling logout(Async)");
        }

        return logoutCall(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the locally stored SSO tokens from the client-side cache and sends an API call to the IAM Identity Center service to invalidate the corresponding server-side IAM Identity Center sign in session.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a user uses IAM Identity Center to access the AWS CLI, the user’s IAM Identity Center sign in session is used to obtain an IAM session, as specified in the corresponding IAM Identity Center permission set. More specifically, IAM Identity Center assumes an IAM role in the target account on behalf of the user, and the corresponding temporary AWS credentials are returned to the client.&lt;/p&gt; &lt;p&gt;After user logout, any existing IAM role sessions that were created by using IAM Identity Center permission sets continue based on the duration configured in the permission set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/authconcept.html\&quot;&gt;User authentications&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public void logout(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        logoutWithHttpInfo(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes the locally stored SSO tokens from the client-side cache and sends an API call to the IAM Identity Center service to invalidate the corresponding server-side IAM Identity Center sign in session.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a user uses IAM Identity Center to access the AWS CLI, the user’s IAM Identity Center sign in session is used to obtain an IAM session, as specified in the corresponding IAM Identity Center permission set. More specifically, IAM Identity Center assumes an IAM role in the target account on behalf of the user, and the corresponding temporary AWS credentials are returned to the client.&lt;/p&gt; &lt;p&gt;After user logout, any existing IAM role sessions that were created by using IAM Identity Center permission sets continue based on the duration configured in the permission set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/authconcept.html\&quot;&gt;User authentications&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logoutWithHttpInfo(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the locally stored SSO tokens from the client-side cache and sends an API call to the IAM Identity Center service to invalidate the corresponding server-side IAM Identity Center sign in session.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If a user uses IAM Identity Center to access the AWS CLI, the user’s IAM Identity Center sign in session is used to obtain an IAM session, as specified in the corresponding IAM Identity Center permission set. More specifically, IAM Identity Center assumes an IAM role in the target account on behalf of the user, and the corresponding temporary AWS credentials are returned to the client.&lt;/p&gt; &lt;p&gt;After user logout, any existing IAM role sessions that were created by using IAM Identity Center permission sets continue based on the duration configured in the permission set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/authconcept.html\&quot;&gt;User authentications&lt;/a&gt; in the &lt;i&gt;IAM Identity Center User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzSsoBearerToken The token issued by the &lt;code&gt;CreateToken&lt;/code&gt; API call. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/API_CreateToken.html\&quot;&gt;CreateToken&lt;/a&gt; in the &lt;i&gt;IAM Identity Center OIDC API Reference Guide&lt;/i&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(String xAmzSsoBearerToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(xAmzSsoBearerToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
