/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutomaticTerminationMode from './AutomaticTerminationMode';
import CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration from './CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration';
import SessionBackupMode from './SessionBackupMode';
import SessionPersistenceMode from './SessionPersistenceMode';
import StreamingSession from './StreamingSession';
import StreamingSessionState from './StreamingSessionState';
import StreamingSessionStatusCode from './StreamingSessionStatusCode';
import VolumeRetentionMode from './VolumeRetentionMode';

/**
 * The CreateStreamingSessionResponseSession model module.
 * @module model/CreateStreamingSessionResponseSession
 * @version 2020-08-01
 */
class CreateStreamingSessionResponseSession {
    /**
     * Constructs a new <code>CreateStreamingSessionResponseSession</code>.
     * @alias module:model/CreateStreamingSessionResponseSession
     * @implements module:model/StreamingSession
     */
    constructor() { 
        StreamingSession.initialize(this);
        CreateStreamingSessionResponseSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateStreamingSessionResponseSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateStreamingSessionResponseSession} obj Optional instance to populate.
     * @return {module:model/CreateStreamingSessionResponseSession} The populated <code>CreateStreamingSessionResponseSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateStreamingSessionResponseSession();
            StreamingSession.constructFromObject(data, obj);

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('automaticTerminationMode')) {
                obj['automaticTerminationMode'] = ApiClient.convertToType(data['automaticTerminationMode'], AutomaticTerminationMode);
            }
            if (data.hasOwnProperty('backupMode')) {
                obj['backupMode'] = ApiClient.convertToType(data['backupMode'], SessionBackupMode);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('ec2InstanceType')) {
                obj['ec2InstanceType'] = ApiClient.convertToType(data['ec2InstanceType'], 'String');
            }
            if (data.hasOwnProperty('launchProfileId')) {
                obj['launchProfileId'] = ApiClient.convertToType(data['launchProfileId'], 'String');
            }
            if (data.hasOwnProperty('maxBackupsToRetain')) {
                obj['maxBackupsToRetain'] = ApiClient.convertToType(data['maxBackupsToRetain'], 'Number');
            }
            if (data.hasOwnProperty('ownedBy')) {
                obj['ownedBy'] = ApiClient.convertToType(data['ownedBy'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('sessionPersistenceMode')) {
                obj['sessionPersistenceMode'] = ApiClient.convertToType(data['sessionPersistenceMode'], SessionPersistenceMode);
            }
            if (data.hasOwnProperty('startedAt')) {
                obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');
            }
            if (data.hasOwnProperty('startedBy')) {
                obj['startedBy'] = ApiClient.convertToType(data['startedBy'], 'String');
            }
            if (data.hasOwnProperty('startedFromBackupId')) {
                obj['startedFromBackupId'] = ApiClient.convertToType(data['startedFromBackupId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], StreamingSessionState);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], StreamingSessionStatusCode);
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('stopAt')) {
                obj['stopAt'] = ApiClient.convertToType(data['stopAt'], 'Date');
            }
            if (data.hasOwnProperty('stoppedAt')) {
                obj['stoppedAt'] = ApiClient.convertToType(data['stoppedAt'], 'Date');
            }
            if (data.hasOwnProperty('stoppedBy')) {
                obj['stoppedBy'] = ApiClient.convertToType(data['stoppedBy'], 'String');
            }
            if (data.hasOwnProperty('streamingImageId')) {
                obj['streamingImageId'] = ApiClient.convertToType(data['streamingImageId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('terminateAt')) {
                obj['terminateAt'] = ApiClient.convertToType(data['terminateAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
            if (data.hasOwnProperty('volumeConfiguration')) {
                obj['volumeConfiguration'] = CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration.constructFromObject(data['volumeConfiguration']);
            }
            if (data.hasOwnProperty('volumeRetentionMode')) {
                obj['volumeRetentionMode'] = ApiClient.convertToType(data['volumeRetentionMode'], VolumeRetentionMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateStreamingSessionResponseSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateStreamingSessionResponseSession</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `automaticTerminationMode`
        if (data['automaticTerminationMode']) { // data not null
          AutomaticTerminationMode.validateJSON(data['automaticTerminationMode']);
        }
        // validate the optional field `backupMode`
        if (data['backupMode']) { // data not null
          SessionBackupMode.validateJSON(data['backupMode']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          String.validateJSON(data['createdBy']);
        }
        // validate the optional field `ec2InstanceType`
        if (data['ec2InstanceType']) { // data not null
          String.validateJSON(data['ec2InstanceType']);
        }
        // validate the optional field `launchProfileId`
        if (data['launchProfileId']) { // data not null
          String.validateJSON(data['launchProfileId']);
        }
        // validate the optional field `maxBackupsToRetain`
        if (data['maxBackupsToRetain']) { // data not null
          Number.validateJSON(data['maxBackupsToRetain']);
        }
        // validate the optional field `ownedBy`
        if (data['ownedBy']) { // data not null
          String.validateJSON(data['ownedBy']);
        }
        // validate the optional field `sessionId`
        if (data['sessionId']) { // data not null
          String.validateJSON(data['sessionId']);
        }
        // validate the optional field `sessionPersistenceMode`
        if (data['sessionPersistenceMode']) { // data not null
          SessionPersistenceMode.validateJSON(data['sessionPersistenceMode']);
        }
        // validate the optional field `startedAt`
        if (data['startedAt']) { // data not null
          Date.validateJSON(data['startedAt']);
        }
        // validate the optional field `startedBy`
        if (data['startedBy']) { // data not null
          String.validateJSON(data['startedBy']);
        }
        // validate the optional field `startedFromBackupId`
        if (data['startedFromBackupId']) { // data not null
          String.validateJSON(data['startedFromBackupId']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          StreamingSessionState.validateJSON(data['state']);
        }
        // validate the optional field `statusCode`
        if (data['statusCode']) { // data not null
          StreamingSessionStatusCode.validateJSON(data['statusCode']);
        }
        // validate the optional field `statusMessage`
        if (data['statusMessage']) { // data not null
          String.validateJSON(data['statusMessage']);
        }
        // validate the optional field `stopAt`
        if (data['stopAt']) { // data not null
          Date.validateJSON(data['stopAt']);
        }
        // validate the optional field `stoppedAt`
        if (data['stoppedAt']) { // data not null
          Date.validateJSON(data['stoppedAt']);
        }
        // validate the optional field `stoppedBy`
        if (data['stoppedBy']) { // data not null
          String.validateJSON(data['stoppedBy']);
        }
        // validate the optional field `streamingImageId`
        if (data['streamingImageId']) { // data not null
          String.validateJSON(data['streamingImageId']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `terminateAt`
        if (data['terminateAt']) { // data not null
          Date.validateJSON(data['terminateAt']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          String.validateJSON(data['updatedBy']);
        }
        // validate the optional field `volumeConfiguration`
        if (data['volumeConfiguration']) { // data not null
          CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration.validateJSON(data['volumeConfiguration']);
        }
        // validate the optional field `volumeRetentionMode`
        if (data['volumeRetentionMode']) { // data not null
          VolumeRetentionMode.validateJSON(data['volumeRetentionMode']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
CreateStreamingSessionResponseSession.prototype['arn'] = undefined;

/**
 * @member {module:model/AutomaticTerminationMode} automaticTerminationMode
 */
CreateStreamingSessionResponseSession.prototype['automaticTerminationMode'] = undefined;

/**
 * @member {module:model/SessionBackupMode} backupMode
 */
CreateStreamingSessionResponseSession.prototype['backupMode'] = undefined;

/**
 * @member {Date} createdAt
 */
CreateStreamingSessionResponseSession.prototype['createdAt'] = undefined;

/**
 * @member {String} createdBy
 */
CreateStreamingSessionResponseSession.prototype['createdBy'] = undefined;

/**
 * @member {String} ec2InstanceType
 */
CreateStreamingSessionResponseSession.prototype['ec2InstanceType'] = undefined;

/**
 * @member {String} launchProfileId
 */
CreateStreamingSessionResponseSession.prototype['launchProfileId'] = undefined;

/**
 * @member {Number} maxBackupsToRetain
 */
CreateStreamingSessionResponseSession.prototype['maxBackupsToRetain'] = undefined;

/**
 * @member {String} ownedBy
 */
CreateStreamingSessionResponseSession.prototype['ownedBy'] = undefined;

/**
 * @member {String} sessionId
 */
CreateStreamingSessionResponseSession.prototype['sessionId'] = undefined;

/**
 * @member {module:model/SessionPersistenceMode} sessionPersistenceMode
 */
CreateStreamingSessionResponseSession.prototype['sessionPersistenceMode'] = undefined;

/**
 * @member {Date} startedAt
 */
CreateStreamingSessionResponseSession.prototype['startedAt'] = undefined;

/**
 * @member {String} startedBy
 */
CreateStreamingSessionResponseSession.prototype['startedBy'] = undefined;

/**
 * @member {String} startedFromBackupId
 */
CreateStreamingSessionResponseSession.prototype['startedFromBackupId'] = undefined;

/**
 * @member {module:model/StreamingSessionState} state
 */
CreateStreamingSessionResponseSession.prototype['state'] = undefined;

/**
 * @member {module:model/StreamingSessionStatusCode} statusCode
 */
CreateStreamingSessionResponseSession.prototype['statusCode'] = undefined;

/**
 * @member {String} statusMessage
 */
CreateStreamingSessionResponseSession.prototype['statusMessage'] = undefined;

/**
 * @member {Date} stopAt
 */
CreateStreamingSessionResponseSession.prototype['stopAt'] = undefined;

/**
 * @member {Date} stoppedAt
 */
CreateStreamingSessionResponseSession.prototype['stoppedAt'] = undefined;

/**
 * @member {String} stoppedBy
 */
CreateStreamingSessionResponseSession.prototype['stoppedBy'] = undefined;

/**
 * @member {String} streamingImageId
 */
CreateStreamingSessionResponseSession.prototype['streamingImageId'] = undefined;

/**
 * @member {Object} tags
 */
CreateStreamingSessionResponseSession.prototype['tags'] = undefined;

/**
 * @member {Date} terminateAt
 */
CreateStreamingSessionResponseSession.prototype['terminateAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
CreateStreamingSessionResponseSession.prototype['updatedAt'] = undefined;

/**
 * @member {String} updatedBy
 */
CreateStreamingSessionResponseSession.prototype['updatedBy'] = undefined;

/**
 * @member {module:model/CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration} volumeConfiguration
 */
CreateStreamingSessionResponseSession.prototype['volumeConfiguration'] = undefined;

/**
 * @member {module:model/VolumeRetentionMode} volumeRetentionMode
 */
CreateStreamingSessionResponseSession.prototype['volumeRetentionMode'] = undefined;


// Implement StreamingSession interface:
/**
 * @member {String} arn
 */
StreamingSession.prototype['arn'] = undefined;
/**
 * @member {module:model/AutomaticTerminationMode} automaticTerminationMode
 */
StreamingSession.prototype['automaticTerminationMode'] = undefined;
/**
 * @member {module:model/SessionBackupMode} backupMode
 */
StreamingSession.prototype['backupMode'] = undefined;
/**
 * @member {Date} createdAt
 */
StreamingSession.prototype['createdAt'] = undefined;
/**
 * @member {String} createdBy
 */
StreamingSession.prototype['createdBy'] = undefined;
/**
 * @member {String} ec2InstanceType
 */
StreamingSession.prototype['ec2InstanceType'] = undefined;
/**
 * @member {String} launchProfileId
 */
StreamingSession.prototype['launchProfileId'] = undefined;
/**
 * @member {Number} maxBackupsToRetain
 */
StreamingSession.prototype['maxBackupsToRetain'] = undefined;
/**
 * @member {String} ownedBy
 */
StreamingSession.prototype['ownedBy'] = undefined;
/**
 * @member {String} sessionId
 */
StreamingSession.prototype['sessionId'] = undefined;
/**
 * @member {module:model/SessionPersistenceMode} sessionPersistenceMode
 */
StreamingSession.prototype['sessionPersistenceMode'] = undefined;
/**
 * @member {Date} startedAt
 */
StreamingSession.prototype['startedAt'] = undefined;
/**
 * @member {String} startedBy
 */
StreamingSession.prototype['startedBy'] = undefined;
/**
 * @member {String} startedFromBackupId
 */
StreamingSession.prototype['startedFromBackupId'] = undefined;
/**
 * @member {module:model/StreamingSessionState} state
 */
StreamingSession.prototype['state'] = undefined;
/**
 * @member {module:model/StreamingSessionStatusCode} statusCode
 */
StreamingSession.prototype['statusCode'] = undefined;
/**
 * @member {String} statusMessage
 */
StreamingSession.prototype['statusMessage'] = undefined;
/**
 * @member {Date} stopAt
 */
StreamingSession.prototype['stopAt'] = undefined;
/**
 * @member {Date} stoppedAt
 */
StreamingSession.prototype['stoppedAt'] = undefined;
/**
 * @member {String} stoppedBy
 */
StreamingSession.prototype['stoppedBy'] = undefined;
/**
 * @member {String} streamingImageId
 */
StreamingSession.prototype['streamingImageId'] = undefined;
/**
 * @member {Object} tags
 */
StreamingSession.prototype['tags'] = undefined;
/**
 * @member {Date} terminateAt
 */
StreamingSession.prototype['terminateAt'] = undefined;
/**
 * @member {Date} updatedAt
 */
StreamingSession.prototype['updatedAt'] = undefined;
/**
 * @member {String} updatedBy
 */
StreamingSession.prototype['updatedBy'] = undefined;
/**
 * @member {module:model/CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration} volumeConfiguration
 */
StreamingSession.prototype['volumeConfiguration'] = undefined;
/**
 * @member {module:model/VolumeRetentionMode} volumeRetentionMode
 */
StreamingSession.prototype['volumeRetentionMode'] = undefined;




export default CreateStreamingSessionResponseSession;

