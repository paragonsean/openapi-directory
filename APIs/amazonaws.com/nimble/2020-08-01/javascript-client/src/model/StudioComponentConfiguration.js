/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateStudioComponentRequestConfigurationActiveDirectoryConfiguration from './CreateStudioComponentRequestConfigurationActiveDirectoryConfiguration';
import CreateStudioComponentRequestConfigurationComputeFarmConfiguration from './CreateStudioComponentRequestConfigurationComputeFarmConfiguration';
import CreateStudioComponentRequestConfigurationLicenseServiceConfiguration from './CreateStudioComponentRequestConfigurationLicenseServiceConfiguration';
import CreateStudioComponentRequestConfigurationSharedFileSystemConfiguration from './CreateStudioComponentRequestConfigurationSharedFileSystemConfiguration';

/**
 * The StudioComponentConfiguration model module.
 * @module model/StudioComponentConfiguration
 * @version 2020-08-01
 */
class StudioComponentConfiguration {
    /**
     * Constructs a new <code>StudioComponentConfiguration</code>.
     * The configuration of the studio component, based on component type.
     * @alias module:model/StudioComponentConfiguration
     */
    constructor() { 
        
        StudioComponentConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StudioComponentConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StudioComponentConfiguration} obj Optional instance to populate.
     * @return {module:model/StudioComponentConfiguration} The populated <code>StudioComponentConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StudioComponentConfiguration();

            if (data.hasOwnProperty('activeDirectoryConfiguration')) {
                obj['activeDirectoryConfiguration'] = CreateStudioComponentRequestConfigurationActiveDirectoryConfiguration.constructFromObject(data['activeDirectoryConfiguration']);
            }
            if (data.hasOwnProperty('computeFarmConfiguration')) {
                obj['computeFarmConfiguration'] = CreateStudioComponentRequestConfigurationComputeFarmConfiguration.constructFromObject(data['computeFarmConfiguration']);
            }
            if (data.hasOwnProperty('licenseServiceConfiguration')) {
                obj['licenseServiceConfiguration'] = CreateStudioComponentRequestConfigurationLicenseServiceConfiguration.constructFromObject(data['licenseServiceConfiguration']);
            }
            if (data.hasOwnProperty('sharedFileSystemConfiguration')) {
                obj['sharedFileSystemConfiguration'] = CreateStudioComponentRequestConfigurationSharedFileSystemConfiguration.constructFromObject(data['sharedFileSystemConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StudioComponentConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StudioComponentConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activeDirectoryConfiguration`
        if (data['activeDirectoryConfiguration']) { // data not null
          CreateStudioComponentRequestConfigurationActiveDirectoryConfiguration.validateJSON(data['activeDirectoryConfiguration']);
        }
        // validate the optional field `computeFarmConfiguration`
        if (data['computeFarmConfiguration']) { // data not null
          CreateStudioComponentRequestConfigurationComputeFarmConfiguration.validateJSON(data['computeFarmConfiguration']);
        }
        // validate the optional field `licenseServiceConfiguration`
        if (data['licenseServiceConfiguration']) { // data not null
          CreateStudioComponentRequestConfigurationLicenseServiceConfiguration.validateJSON(data['licenseServiceConfiguration']);
        }
        // validate the optional field `sharedFileSystemConfiguration`
        if (data['sharedFileSystemConfiguration']) { // data not null
          CreateStudioComponentRequestConfigurationSharedFileSystemConfiguration.validateJSON(data['sharedFileSystemConfiguration']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateStudioComponentRequestConfigurationActiveDirectoryConfiguration} activeDirectoryConfiguration
 */
StudioComponentConfiguration.prototype['activeDirectoryConfiguration'] = undefined;

/**
 * @member {module:model/CreateStudioComponentRequestConfigurationComputeFarmConfiguration} computeFarmConfiguration
 */
StudioComponentConfiguration.prototype['computeFarmConfiguration'] = undefined;

/**
 * @member {module:model/CreateStudioComponentRequestConfigurationLicenseServiceConfiguration} licenseServiceConfiguration
 */
StudioComponentConfiguration.prototype['licenseServiceConfiguration'] = undefined;

/**
 * @member {module:model/CreateStudioComponentRequestConfigurationSharedFileSystemConfiguration} sharedFileSystemConfiguration
 */
StudioComponentConfiguration.prototype['sharedFileSystemConfiguration'] = undefined;






export default StudioComponentConfiguration;

