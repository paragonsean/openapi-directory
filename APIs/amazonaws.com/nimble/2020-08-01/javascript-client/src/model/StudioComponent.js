/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateStudioComponentRequestConfiguration from './CreateStudioComponentRequestConfiguration';
import StudioComponentState from './StudioComponentState';
import StudioComponentStatusCode from './StudioComponentStatusCode';
import StudioComponentSubtype from './StudioComponentSubtype';
import StudioComponentType from './StudioComponentType';

/**
 * The StudioComponent model module.
 * @module model/StudioComponent
 * @version 2020-08-01
 */
class StudioComponent {
    /**
     * Constructs a new <code>StudioComponent</code>.
     * &lt;p&gt;A studio component represents a network resource to be used by a studio&#39;s users and workflows. A typical studio contains studio components for each of the following: render farm, Active Directory, licensing, and file system.&lt;/p&gt; &lt;p&gt;Access to a studio component is managed by specifying security groups for the resource, as well as its endpoint.&lt;/p&gt; &lt;p&gt;A studio component also has a set of initialization scripts that are returned by &lt;code&gt;GetLaunchProfileInitialization&lt;/code&gt;. These initialization scripts run on streaming sessions when they start. They provide users with flexibility in controlling how the studio resources are configured on a streaming session.&lt;/p&gt;
     * @alias module:model/StudioComponent
     */
    constructor() { 
        
        StudioComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StudioComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StudioComponent} obj Optional instance to populate.
     * @return {module:model/StudioComponent} The populated <code>StudioComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StudioComponent();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = CreateStudioComponentRequestConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ec2SecurityGroupIds')) {
                obj['ec2SecurityGroupIds'] = ApiClient.convertToType(data['ec2SecurityGroupIds'], Array);
            }
            if (data.hasOwnProperty('initializationScripts')) {
                obj['initializationScripts'] = ApiClient.convertToType(data['initializationScripts'], Array);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runtimeRoleArn')) {
                obj['runtimeRoleArn'] = ApiClient.convertToType(data['runtimeRoleArn'], 'String');
            }
            if (data.hasOwnProperty('scriptParameters')) {
                obj['scriptParameters'] = ApiClient.convertToType(data['scriptParameters'], Array);
            }
            if (data.hasOwnProperty('secureInitializationRoleArn')) {
                obj['secureInitializationRoleArn'] = ApiClient.convertToType(data['secureInitializationRoleArn'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], StudioComponentState);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], StudioComponentStatusCode);
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('studioComponentId')) {
                obj['studioComponentId'] = ApiClient.convertToType(data['studioComponentId'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], StudioComponentSubtype);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], StudioComponentType);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StudioComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StudioComponent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          CreateStudioComponentRequestConfiguration.validateJSON(data['configuration']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          String.validateJSON(data['createdBy']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `ec2SecurityGroupIds`
        if (data['ec2SecurityGroupIds']) { // data not null
          Array.validateJSON(data['ec2SecurityGroupIds']);
        }
        // validate the optional field `initializationScripts`
        if (data['initializationScripts']) { // data not null
          Array.validateJSON(data['initializationScripts']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `runtimeRoleArn`
        if (data['runtimeRoleArn']) { // data not null
          String.validateJSON(data['runtimeRoleArn']);
        }
        // validate the optional field `scriptParameters`
        if (data['scriptParameters']) { // data not null
          Array.validateJSON(data['scriptParameters']);
        }
        // validate the optional field `secureInitializationRoleArn`
        if (data['secureInitializationRoleArn']) { // data not null
          String.validateJSON(data['secureInitializationRoleArn']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          StudioComponentState.validateJSON(data['state']);
        }
        // validate the optional field `statusCode`
        if (data['statusCode']) { // data not null
          StudioComponentStatusCode.validateJSON(data['statusCode']);
        }
        // validate the optional field `statusMessage`
        if (data['statusMessage']) { // data not null
          String.validateJSON(data['statusMessage']);
        }
        // validate the optional field `studioComponentId`
        if (data['studioComponentId']) { // data not null
          String.validateJSON(data['studioComponentId']);
        }
        // validate the optional field `subtype`
        if (data['subtype']) { // data not null
          StudioComponentSubtype.validateJSON(data['subtype']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          StudioComponentType.validateJSON(data['type']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          String.validateJSON(data['updatedBy']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
StudioComponent.prototype['arn'] = undefined;

/**
 * @member {module:model/CreateStudioComponentRequestConfiguration} configuration
 */
StudioComponent.prototype['configuration'] = undefined;

/**
 * @member {Date} createdAt
 */
StudioComponent.prototype['createdAt'] = undefined;

/**
 * @member {String} createdBy
 */
StudioComponent.prototype['createdBy'] = undefined;

/**
 * @member {String} description
 */
StudioComponent.prototype['description'] = undefined;

/**
 * @member {Array} ec2SecurityGroupIds
 */
StudioComponent.prototype['ec2SecurityGroupIds'] = undefined;

/**
 * @member {Array} initializationScripts
 */
StudioComponent.prototype['initializationScripts'] = undefined;

/**
 * @member {String} name
 */
StudioComponent.prototype['name'] = undefined;

/**
 * @member {String} runtimeRoleArn
 */
StudioComponent.prototype['runtimeRoleArn'] = undefined;

/**
 * @member {Array} scriptParameters
 */
StudioComponent.prototype['scriptParameters'] = undefined;

/**
 * @member {String} secureInitializationRoleArn
 */
StudioComponent.prototype['secureInitializationRoleArn'] = undefined;

/**
 * @member {module:model/StudioComponentState} state
 */
StudioComponent.prototype['state'] = undefined;

/**
 * @member {module:model/StudioComponentStatusCode} statusCode
 */
StudioComponent.prototype['statusCode'] = undefined;

/**
 * @member {String} statusMessage
 */
StudioComponent.prototype['statusMessage'] = undefined;

/**
 * @member {String} studioComponentId
 */
StudioComponent.prototype['studioComponentId'] = undefined;

/**
 * @member {module:model/StudioComponentSubtype} subtype
 */
StudioComponent.prototype['subtype'] = undefined;

/**
 * @member {Object} tags
 */
StudioComponent.prototype['tags'] = undefined;

/**
 * @member {module:model/StudioComponentType} type
 */
StudioComponent.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
StudioComponent.prototype['updatedAt'] = undefined;

/**
 * @member {String} updatedBy
 */
StudioComponent.prototype['updatedBy'] = undefined;






export default StudioComponent;

