/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LaunchProfileInitializationActiveDirectory from './LaunchProfileInitializationActiveDirectory';
import LaunchProfilePlatform from './LaunchProfilePlatform';

/**
 * The LaunchProfileInitialization model module.
 * @module model/LaunchProfileInitialization
 * @version 2020-08-01
 */
class LaunchProfileInitialization {
    /**
     * Constructs a new <code>LaunchProfileInitialization</code>.
     * &lt;p&gt;A launch profile initialization contains information required for a workstation or server to connect to a launch profile.&lt;/p&gt; &lt;p&gt;This includes scripts, endpoints, security groups, subnets, and other configuration.&lt;/p&gt;
     * @alias module:model/LaunchProfileInitialization
     */
    constructor() { 
        
        LaunchProfileInitialization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LaunchProfileInitialization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LaunchProfileInitialization} obj Optional instance to populate.
     * @return {module:model/LaunchProfileInitialization} The populated <code>LaunchProfileInitialization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LaunchProfileInitialization();

            if (data.hasOwnProperty('activeDirectory')) {
                obj['activeDirectory'] = LaunchProfileInitializationActiveDirectory.constructFromObject(data['activeDirectory']);
            }
            if (data.hasOwnProperty('ec2SecurityGroupIds')) {
                obj['ec2SecurityGroupIds'] = ApiClient.convertToType(data['ec2SecurityGroupIds'], Array);
            }
            if (data.hasOwnProperty('launchProfileId')) {
                obj['launchProfileId'] = ApiClient.convertToType(data['launchProfileId'], 'String');
            }
            if (data.hasOwnProperty('launchProfileProtocolVersion')) {
                obj['launchProfileProtocolVersion'] = ApiClient.convertToType(data['launchProfileProtocolVersion'], 'String');
            }
            if (data.hasOwnProperty('launchPurpose')) {
                obj['launchPurpose'] = ApiClient.convertToType(data['launchPurpose'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], LaunchProfilePlatform);
            }
            if (data.hasOwnProperty('systemInitializationScripts')) {
                obj['systemInitializationScripts'] = ApiClient.convertToType(data['systemInitializationScripts'], Array);
            }
            if (data.hasOwnProperty('userInitializationScripts')) {
                obj['userInitializationScripts'] = ApiClient.convertToType(data['userInitializationScripts'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LaunchProfileInitialization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LaunchProfileInitialization</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activeDirectory`
        if (data['activeDirectory']) { // data not null
          LaunchProfileInitializationActiveDirectory.validateJSON(data['activeDirectory']);
        }
        // validate the optional field `ec2SecurityGroupIds`
        if (data['ec2SecurityGroupIds']) { // data not null
          Array.validateJSON(data['ec2SecurityGroupIds']);
        }
        // validate the optional field `launchProfileId`
        if (data['launchProfileId']) { // data not null
          String.validateJSON(data['launchProfileId']);
        }
        // validate the optional field `launchProfileProtocolVersion`
        if (data['launchProfileProtocolVersion']) { // data not null
          String.validateJSON(data['launchProfileProtocolVersion']);
        }
        // validate the optional field `launchPurpose`
        if (data['launchPurpose']) { // data not null
          String.validateJSON(data['launchPurpose']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          LaunchProfilePlatform.validateJSON(data['platform']);
        }
        // validate the optional field `systemInitializationScripts`
        if (data['systemInitializationScripts']) { // data not null
          Array.validateJSON(data['systemInitializationScripts']);
        }
        // validate the optional field `userInitializationScripts`
        if (data['userInitializationScripts']) { // data not null
          Array.validateJSON(data['userInitializationScripts']);
        }

        return true;
    }


}



/**
 * @member {module:model/LaunchProfileInitializationActiveDirectory} activeDirectory
 */
LaunchProfileInitialization.prototype['activeDirectory'] = undefined;

/**
 * @member {Array} ec2SecurityGroupIds
 */
LaunchProfileInitialization.prototype['ec2SecurityGroupIds'] = undefined;

/**
 * @member {String} launchProfileId
 */
LaunchProfileInitialization.prototype['launchProfileId'] = undefined;

/**
 * @member {String} launchProfileProtocolVersion
 */
LaunchProfileInitialization.prototype['launchProfileProtocolVersion'] = undefined;

/**
 * @member {String} launchPurpose
 */
LaunchProfileInitialization.prototype['launchPurpose'] = undefined;

/**
 * @member {String} name
 */
LaunchProfileInitialization.prototype['name'] = undefined;

/**
 * @member {module:model/LaunchProfilePlatform} platform
 */
LaunchProfileInitialization.prototype['platform'] = undefined;

/**
 * @member {Array} systemInitializationScripts
 */
LaunchProfileInitialization.prototype['systemInitializationScripts'] = undefined;

/**
 * @member {Array} userInitializationScripts
 */
LaunchProfileInitialization.prototype['userInitializationScripts'] = undefined;






export default LaunchProfileInitialization;

