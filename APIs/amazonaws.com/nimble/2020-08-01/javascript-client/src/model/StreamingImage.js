/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamingImageEncryptionConfiguration from './StreamingImageEncryptionConfiguration';
import StreamingImageState from './StreamingImageState';
import StreamingImageStatusCode from './StreamingImageStatusCode';

/**
 * The StreamingImage model module.
 * @module model/StreamingImage
 * @version 2020-08-01
 */
class StreamingImage {
    /**
     * Constructs a new <code>StreamingImage</code>.
     * &lt;p&gt;Represents a streaming image resource.&lt;/p&gt; &lt;p&gt;Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.&lt;/p&gt; &lt;p&gt;Amazon provides a number of streaming images that include popular 3rd-party software.&lt;/p&gt; &lt;p&gt;You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.&lt;/p&gt;
     * @alias module:model/StreamingImage
     */
    constructor() { 
        
        StreamingImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamingImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingImage} obj Optional instance to populate.
     * @return {module:model/StreamingImage} The populated <code>StreamingImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingImage();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ec2ImageId')) {
                obj['ec2ImageId'] = ApiClient.convertToType(data['ec2ImageId'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfiguration')) {
                obj['encryptionConfiguration'] = StreamingImageEncryptionConfiguration.constructFromObject(data['encryptionConfiguration']);
            }
            if (data.hasOwnProperty('eulaIds')) {
                obj['eulaIds'] = ApiClient.convertToType(data['eulaIds'], Array);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], StreamingImageState);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], StreamingImageStatusCode);
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('streamingImageId')) {
                obj['streamingImageId'] = ApiClient.convertToType(data['streamingImageId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingImage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `ec2ImageId`
        if (data['ec2ImageId']) { // data not null
          String.validateJSON(data['ec2ImageId']);
        }
        // validate the optional field `encryptionConfiguration`
        if (data['encryptionConfiguration']) { // data not null
          StreamingImageEncryptionConfiguration.validateJSON(data['encryptionConfiguration']);
        }
        // validate the optional field `eulaIds`
        if (data['eulaIds']) { // data not null
          Array.validateJSON(data['eulaIds']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          String.validateJSON(data['owner']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          String.validateJSON(data['platform']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          StreamingImageState.validateJSON(data['state']);
        }
        // validate the optional field `statusCode`
        if (data['statusCode']) { // data not null
          StreamingImageStatusCode.validateJSON(data['statusCode']);
        }
        // validate the optional field `statusMessage`
        if (data['statusMessage']) { // data not null
          String.validateJSON(data['statusMessage']);
        }
        // validate the optional field `streamingImageId`
        if (data['streamingImageId']) { // data not null
          String.validateJSON(data['streamingImageId']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
StreamingImage.prototype['arn'] = undefined;

/**
 * @member {String} description
 */
StreamingImage.prototype['description'] = undefined;

/**
 * @member {String} ec2ImageId
 */
StreamingImage.prototype['ec2ImageId'] = undefined;

/**
 * @member {module:model/StreamingImageEncryptionConfiguration} encryptionConfiguration
 */
StreamingImage.prototype['encryptionConfiguration'] = undefined;

/**
 * @member {Array} eulaIds
 */
StreamingImage.prototype['eulaIds'] = undefined;

/**
 * @member {String} name
 */
StreamingImage.prototype['name'] = undefined;

/**
 * @member {String} owner
 */
StreamingImage.prototype['owner'] = undefined;

/**
 * @member {String} platform
 */
StreamingImage.prototype['platform'] = undefined;

/**
 * @member {module:model/StreamingImageState} state
 */
StreamingImage.prototype['state'] = undefined;

/**
 * @member {module:model/StreamingImageStatusCode} statusCode
 */
StreamingImage.prototype['statusCode'] = undefined;

/**
 * @member {String} statusMessage
 */
StreamingImage.prototype['statusMessage'] = undefined;

/**
 * @member {String} streamingImageId
 */
StreamingImage.prototype['streamingImageId'] = undefined;

/**
 * @member {Object} tags
 */
StreamingImage.prototype['tags'] = undefined;






export default StreamingImage;

