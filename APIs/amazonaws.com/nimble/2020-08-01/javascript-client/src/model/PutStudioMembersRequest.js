/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewStudioMember from './NewStudioMember';

/**
 * The PutStudioMembersRequest model module.
 * @module model/PutStudioMembersRequest
 * @version 2020-08-01
 */
class PutStudioMembersRequest {
    /**
     * Constructs a new <code>PutStudioMembersRequest</code>.
     * @alias module:model/PutStudioMembersRequest
     * @param identityStoreId {String} The ID of the identity store.
     * @param members {Array.<module:model/NewStudioMember>} A list of members.
     */
    constructor(identityStoreId, members) { 
        
        PutStudioMembersRequest.initialize(this, identityStoreId, members);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identityStoreId, members) { 
        obj['identityStoreId'] = identityStoreId;
        obj['members'] = members;
    }

    /**
     * Constructs a <code>PutStudioMembersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutStudioMembersRequest} obj Optional instance to populate.
     * @return {module:model/PutStudioMembersRequest} The populated <code>PutStudioMembersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutStudioMembersRequest();

            if (data.hasOwnProperty('identityStoreId')) {
                obj['identityStoreId'] = ApiClient.convertToType(data['identityStoreId'], 'String');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [NewStudioMember]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutStudioMembersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutStudioMembersRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutStudioMembersRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['identityStoreId'] && !(typeof data['identityStoreId'] === 'string' || data['identityStoreId'] instanceof String)) {
            throw new Error("Expected the field `identityStoreId` to be a primitive type in the JSON string but got " + data['identityStoreId']);
        }
        if (data['members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['members'])) {
                throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
            }
            // validate the optional field `members` (array)
            for (const item of data['members']) {
                NewStudioMember.validateJSON(item);
            };
        }

        return true;
    }


}

PutStudioMembersRequest.RequiredProperties = ["identityStoreId", "members"];

/**
 * The ID of the identity store.
 * @member {String} identityStoreId
 */
PutStudioMembersRequest.prototype['identityStoreId'] = undefined;

/**
 * A list of members.
 * @member {Array.<module:model/NewStudioMember>} members
 */
PutStudioMembersRequest.prototype['members'] = undefined;






export default PutStudioMembersRequest;

