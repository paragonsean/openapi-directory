/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamingSessionStreamState from './StreamingSessionStreamState';
import StreamingSessionStreamStatusCode from './StreamingSessionStreamStatusCode';

/**
 * The StreamingSessionStream model module.
 * @module model/StreamingSessionStream
 * @version 2020-08-01
 */
class StreamingSessionStream {
    /**
     * Constructs a new <code>StreamingSessionStream</code>.
     * A stream is an active connection to a streaming session, enabling a studio user to control the streaming session using a compatible client. Streaming session streams are compatible with the NICE DCV web client, included in the Nimble Studio portal, or the NICE DCV desktop client.
     * @alias module:model/StreamingSessionStream
     */
    constructor() { 
        
        StreamingSessionStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamingSessionStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamingSessionStream} obj Optional instance to populate.
     * @return {module:model/StreamingSessionStream} The populated <code>StreamingSessionStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamingSessionStream();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
            }
            if (data.hasOwnProperty('ownedBy')) {
                obj['ownedBy'] = ApiClient.convertToType(data['ownedBy'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], StreamingSessionStreamState);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], StreamingSessionStreamStatusCode);
            }
            if (data.hasOwnProperty('streamId')) {
                obj['streamId'] = ApiClient.convertToType(data['streamId'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamingSessionStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamingSessionStream</code>.
     */
    static validateJSON(data) {
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          String.validateJSON(data['createdBy']);
        }
        // validate the optional field `expiresAt`
        if (data['expiresAt']) { // data not null
          Date.validateJSON(data['expiresAt']);
        }
        // validate the optional field `ownedBy`
        if (data['ownedBy']) { // data not null
          String.validateJSON(data['ownedBy']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          StreamingSessionStreamState.validateJSON(data['state']);
        }
        // validate the optional field `statusCode`
        if (data['statusCode']) { // data not null
          StreamingSessionStreamStatusCode.validateJSON(data['statusCode']);
        }
        // validate the optional field `streamId`
        if (data['streamId']) { // data not null
          String.validateJSON(data['streamId']);
        }
        // validate the optional field `url`
        if (data['url']) { // data not null
          String.validateJSON(data['url']);
        }

        return true;
    }


}



/**
 * @member {Date} createdAt
 */
StreamingSessionStream.prototype['createdAt'] = undefined;

/**
 * @member {String} createdBy
 */
StreamingSessionStream.prototype['createdBy'] = undefined;

/**
 * @member {Date} expiresAt
 */
StreamingSessionStream.prototype['expiresAt'] = undefined;

/**
 * @member {String} ownedBy
 */
StreamingSessionStream.prototype['ownedBy'] = undefined;

/**
 * @member {module:model/StreamingSessionStreamState} state
 */
StreamingSessionStream.prototype['state'] = undefined;

/**
 * @member {module:model/StreamingSessionStreamStatusCode} statusCode
 */
StreamingSessionStream.prototype['statusCode'] = undefined;

/**
 * @member {String} streamId
 */
StreamingSessionStream.prototype['streamId'] = undefined;

/**
 * @member {String} url
 */
StreamingSessionStream.prototype['url'] = undefined;






export default StreamingSessionStream;

