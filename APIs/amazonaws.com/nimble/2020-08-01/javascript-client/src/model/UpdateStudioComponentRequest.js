/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateStudioComponentRequestConfiguration from './CreateStudioComponentRequestConfiguration';
import ScriptParameterKeyValue from './ScriptParameterKeyValue';
import StudioComponentInitializationScript from './StudioComponentInitializationScript';

/**
 * The UpdateStudioComponentRequest model module.
 * @module model/UpdateStudioComponentRequest
 * @version 2020-08-01
 */
class UpdateStudioComponentRequest {
    /**
     * Constructs a new <code>UpdateStudioComponentRequest</code>.
     * @alias module:model/UpdateStudioComponentRequest
     */
    constructor() { 
        
        UpdateStudioComponentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateStudioComponentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateStudioComponentRequest} obj Optional instance to populate.
     * @return {module:model/UpdateStudioComponentRequest} The populated <code>UpdateStudioComponentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateStudioComponentRequest();

            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = CreateStudioComponentRequestConfiguration.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ec2SecurityGroupIds')) {
                obj['ec2SecurityGroupIds'] = ApiClient.convertToType(data['ec2SecurityGroupIds'], ['String']);
            }
            if (data.hasOwnProperty('initializationScripts')) {
                obj['initializationScripts'] = ApiClient.convertToType(data['initializationScripts'], [StudioComponentInitializationScript]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runtimeRoleArn')) {
                obj['runtimeRoleArn'] = ApiClient.convertToType(data['runtimeRoleArn'], 'String');
            }
            if (data.hasOwnProperty('scriptParameters')) {
                obj['scriptParameters'] = ApiClient.convertToType(data['scriptParameters'], [ScriptParameterKeyValue]);
            }
            if (data.hasOwnProperty('secureInitializationRoleArn')) {
                obj['secureInitializationRoleArn'] = ApiClient.convertToType(data['secureInitializationRoleArn'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateStudioComponentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateStudioComponentRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          CreateStudioComponentRequestConfiguration.validateJSON(data['configuration']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ec2SecurityGroupIds'])) {
            throw new Error("Expected the field `ec2SecurityGroupIds` to be an array in the JSON data but got " + data['ec2SecurityGroupIds']);
        }
        if (data['initializationScripts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initializationScripts'])) {
                throw new Error("Expected the field `initializationScripts` to be an array in the JSON data but got " + data['initializationScripts']);
            }
            // validate the optional field `initializationScripts` (array)
            for (const item of data['initializationScripts']) {
                StudioComponentInitializationScript.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['runtimeRoleArn'] && !(typeof data['runtimeRoleArn'] === 'string' || data['runtimeRoleArn'] instanceof String)) {
            throw new Error("Expected the field `runtimeRoleArn` to be a primitive type in the JSON string but got " + data['runtimeRoleArn']);
        }
        if (data['scriptParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scriptParameters'])) {
                throw new Error("Expected the field `scriptParameters` to be an array in the JSON data but got " + data['scriptParameters']);
            }
            // validate the optional field `scriptParameters` (array)
            for (const item of data['scriptParameters']) {
                ScriptParameterKeyValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['secureInitializationRoleArn'] && !(typeof data['secureInitializationRoleArn'] === 'string' || data['secureInitializationRoleArn'] instanceof String)) {
            throw new Error("Expected the field `secureInitializationRoleArn` to be a primitive type in the JSON string but got " + data['secureInitializationRoleArn']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateStudioComponentRequestConfiguration} configuration
 */
UpdateStudioComponentRequest.prototype['configuration'] = undefined;

/**
 * The description.
 * @member {String} description
 */
UpdateStudioComponentRequest.prototype['description'] = undefined;

/**
 * The EC2 security groups that control access to the studio component.
 * @member {Array.<String>} ec2SecurityGroupIds
 */
UpdateStudioComponentRequest.prototype['ec2SecurityGroupIds'] = undefined;

/**
 * Initialization scripts for studio components.
 * @member {Array.<module:model/StudioComponentInitializationScript>} initializationScripts
 */
UpdateStudioComponentRequest.prototype['initializationScripts'] = undefined;

/**
 * The name for the studio component.
 * @member {String} name
 */
UpdateStudioComponentRequest.prototype['name'] = undefined;

/**
 * An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 
 * @member {String} runtimeRoleArn
 */
UpdateStudioComponentRequest.prototype['runtimeRoleArn'] = undefined;

/**
 * Parameters for the studio component scripts.
 * @member {Array.<module:model/ScriptParameterKeyValue>} scriptParameters
 */
UpdateStudioComponentRequest.prototype['scriptParameters'] = undefined;

/**
 * An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.
 * @member {String} secureInitializationRoleArn
 */
UpdateStudioComponentRequest.prototype['secureInitializationRoleArn'] = undefined;

/**
 * The specific subtype of a studio component.
 * @member {module:model/UpdateStudioComponentRequest.SubtypeEnum} subtype
 */
UpdateStudioComponentRequest.prototype['subtype'] = undefined;

/**
 * The type of the studio component.
 * @member {module:model/UpdateStudioComponentRequest.TypeEnum} type
 */
UpdateStudioComponentRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>subtype</code> property.
 * @enum {String}
 * @readonly
 */
UpdateStudioComponentRequest['SubtypeEnum'] = {

    /**
     * value: "AWS_MANAGED_MICROSOFT_AD"
     * @const
     */
    "AWS_MANAGED_MICROSOFT_AD": "AWS_MANAGED_MICROSOFT_AD",

    /**
     * value: "AMAZON_FSX_FOR_WINDOWS"
     * @const
     */
    "AMAZON_FSX_FOR_WINDOWS": "AMAZON_FSX_FOR_WINDOWS",

    /**
     * value: "AMAZON_FSX_FOR_LUSTRE"
     * @const
     */
    "AMAZON_FSX_FOR_LUSTRE": "AMAZON_FSX_FOR_LUSTRE",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
UpdateStudioComponentRequest['TypeEnum'] = {

    /**
     * value: "ACTIVE_DIRECTORY"
     * @const
     */
    "ACTIVE_DIRECTORY": "ACTIVE_DIRECTORY",

    /**
     * value: "SHARED_FILE_SYSTEM"
     * @const
     */
    "SHARED_FILE_SYSTEM": "SHARED_FILE_SYSTEM",

    /**
     * value: "COMPUTE_FARM"
     * @const
     */
    "COMPUTE_FARM": "COMPUTE_FARM",

    /**
     * value: "LICENSE_SERVICE"
     * @const
     */
    "LICENSE_SERVICE": "LICENSE_SERVICE",

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM"
};



export default UpdateStudioComponentRequest;

