/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SessionBackupMode from './SessionBackupMode';
import StreamConfigurationSessionBackup from './StreamConfigurationSessionBackup';

/**
 * The StreamConfigurationSessionBackup model module.
 * @module model/StreamConfigurationSessionBackup
 * @version 2020-08-01
 */
class StreamConfigurationSessionBackup {
    /**
     * Constructs a new <code>StreamConfigurationSessionBackup</code>.
     * @alias module:model/StreamConfigurationSessionBackup
     * @implements module:model/StreamConfigurationSessionBackup
     */
    constructor() { 
        StreamConfigurationSessionBackup.initialize(this);
        StreamConfigurationSessionBackup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamConfigurationSessionBackup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamConfigurationSessionBackup} obj Optional instance to populate.
     * @return {module:model/StreamConfigurationSessionBackup} The populated <code>StreamConfigurationSessionBackup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamConfigurationSessionBackup();
            StreamConfigurationSessionBackup.constructFromObject(data, obj);

            if (data.hasOwnProperty('maxBackupsToRetain')) {
                obj['maxBackupsToRetain'] = ApiClient.convertToType(data['maxBackupsToRetain'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], SessionBackupMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamConfigurationSessionBackup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamConfigurationSessionBackup</code>.
     */
    static validateJSON(data) {
        // validate the optional field `maxBackupsToRetain`
        if (data['maxBackupsToRetain']) { // data not null
          Number.validateJSON(data['maxBackupsToRetain']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          SessionBackupMode.validateJSON(data['mode']);
        }

        return true;
    }


}



/**
 * @member {Number} maxBackupsToRetain
 */
StreamConfigurationSessionBackup.prototype['maxBackupsToRetain'] = undefined;

/**
 * @member {module:model/SessionBackupMode} mode
 */
StreamConfigurationSessionBackup.prototype['mode'] = undefined;


// Implement StreamConfigurationSessionBackup interface:
/**
 * @member {Number} maxBackupsToRetain
 */
StreamConfigurationSessionBackup.prototype['maxBackupsToRetain'] = undefined;
/**
 * @member {module:model/SessionBackupMode} mode
 */
StreamConfigurationSessionBackup.prototype['mode'] = undefined;




export default StreamConfigurationSessionBackup;

