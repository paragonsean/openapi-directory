/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateStreamingSessionRequest model module.
 * @module model/CreateStreamingSessionRequest
 * @version 2020-08-01
 */
class CreateStreamingSessionRequest {
    /**
     * Constructs a new <code>CreateStreamingSessionRequest</code>.
     * @alias module:model/CreateStreamingSessionRequest
     * @param launchProfileId {String} The ID of the launch profile used to control access from the streaming session.
     */
    constructor(launchProfileId) { 
        
        CreateStreamingSessionRequest.initialize(this, launchProfileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, launchProfileId) { 
        obj['launchProfileId'] = launchProfileId;
    }

    /**
     * Constructs a <code>CreateStreamingSessionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateStreamingSessionRequest} obj Optional instance to populate.
     * @return {module:model/CreateStreamingSessionRequest} The populated <code>CreateStreamingSessionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateStreamingSessionRequest();

            if (data.hasOwnProperty('ec2InstanceType')) {
                obj['ec2InstanceType'] = ApiClient.convertToType(data['ec2InstanceType'], 'String');
            }
            if (data.hasOwnProperty('launchProfileId')) {
                obj['launchProfileId'] = ApiClient.convertToType(data['launchProfileId'], 'String');
            }
            if (data.hasOwnProperty('ownedBy')) {
                obj['ownedBy'] = ApiClient.convertToType(data['ownedBy'], 'String');
            }
            if (data.hasOwnProperty('streamingImageId')) {
                obj['streamingImageId'] = ApiClient.convertToType(data['streamingImageId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateStreamingSessionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateStreamingSessionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateStreamingSessionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ec2InstanceType'] && !(typeof data['ec2InstanceType'] === 'string' || data['ec2InstanceType'] instanceof String)) {
            throw new Error("Expected the field `ec2InstanceType` to be a primitive type in the JSON string but got " + data['ec2InstanceType']);
        }
        // ensure the json data is a string
        if (data['launchProfileId'] && !(typeof data['launchProfileId'] === 'string' || data['launchProfileId'] instanceof String)) {
            throw new Error("Expected the field `launchProfileId` to be a primitive type in the JSON string but got " + data['launchProfileId']);
        }
        // ensure the json data is a string
        if (data['ownedBy'] && !(typeof data['ownedBy'] === 'string' || data['ownedBy'] instanceof String)) {
            throw new Error("Expected the field `ownedBy` to be a primitive type in the JSON string but got " + data['ownedBy']);
        }
        // ensure the json data is a string
        if (data['streamingImageId'] && !(typeof data['streamingImageId'] === 'string' || data['streamingImageId'] instanceof String)) {
            throw new Error("Expected the field `streamingImageId` to be a primitive type in the JSON string but got " + data['streamingImageId']);
        }

        return true;
    }


}

CreateStreamingSessionRequest.RequiredProperties = ["launchProfileId"];

/**
 * The EC2 Instance type used for the streaming session.
 * @member {module:model/CreateStreamingSessionRequest.Ec2InstanceTypeEnum} ec2InstanceType
 */
CreateStreamingSessionRequest.prototype['ec2InstanceType'] = undefined;

/**
 * The ID of the launch profile used to control access from the streaming session.
 * @member {String} launchProfileId
 */
CreateStreamingSessionRequest.prototype['launchProfileId'] = undefined;

/**
 * The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.
 * @member {String} ownedBy
 */
CreateStreamingSessionRequest.prototype['ownedBy'] = undefined;

/**
 * The ID of the streaming image.
 * @member {String} streamingImageId
 */
CreateStreamingSessionRequest.prototype['streamingImageId'] = undefined;

/**
 * A collection of labels, in the form of key-value pairs, that apply to this resource.
 * @member {Object.<String, String>} tags
 */
CreateStreamingSessionRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>ec2InstanceType</code> property.
 * @enum {String}
 * @readonly
 */
CreateStreamingSessionRequest['Ec2InstanceTypeEnum'] = {

    /**
     * value: "g4dn.xlarge"
     * @const
     */
    "g4dn.xlarge": "g4dn.xlarge",

    /**
     * value: "g4dn.2xlarge"
     * @const
     */
    "g4dn.2xlarge": "g4dn.2xlarge",

    /**
     * value: "g4dn.4xlarge"
     * @const
     */
    "g4dn.4xlarge": "g4dn.4xlarge",

    /**
     * value: "g4dn.8xlarge"
     * @const
     */
    "g4dn.8xlarge": "g4dn.8xlarge",

    /**
     * value: "g4dn.12xlarge"
     * @const
     */
    "g4dn.12xlarge": "g4dn.12xlarge",

    /**
     * value: "g4dn.16xlarge"
     * @const
     */
    "g4dn.16xlarge": "g4dn.16xlarge",

    /**
     * value: "g3.4xlarge"
     * @const
     */
    "g3.4xlarge": "g3.4xlarge",

    /**
     * value: "g3s.xlarge"
     * @const
     */
    "g3s.xlarge": "g3s.xlarge",

    /**
     * value: "g5.xlarge"
     * @const
     */
    "g5.xlarge": "g5.xlarge",

    /**
     * value: "g5.2xlarge"
     * @const
     */
    "g5.2xlarge": "g5.2xlarge",

    /**
     * value: "g5.4xlarge"
     * @const
     */
    "g5.4xlarge": "g5.4xlarge",

    /**
     * value: "g5.8xlarge"
     * @const
     */
    "g5.8xlarge": "g5.8xlarge",

    /**
     * value: "g5.16xlarge"
     * @const
     */
    "g5.16xlarge": "g5.16xlarge"
};



export default CreateStreamingSessionRequest;

