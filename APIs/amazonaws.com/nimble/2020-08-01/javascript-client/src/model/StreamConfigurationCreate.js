/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutomaticTerminationMode from './AutomaticTerminationMode';
import CreateLaunchProfileRequestStreamConfigurationSessionBackup from './CreateLaunchProfileRequestStreamConfigurationSessionBackup';
import CreateLaunchProfileRequestStreamConfigurationSessionStorage from './CreateLaunchProfileRequestStreamConfigurationSessionStorage';
import CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration from './CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration';
import SessionPersistenceMode from './SessionPersistenceMode';
import StreamingClipboardMode from './StreamingClipboardMode';

/**
 * The StreamConfigurationCreate model module.
 * @module model/StreamConfigurationCreate
 * @version 2020-08-01
 */
class StreamConfigurationCreate {
    /**
     * Constructs a new <code>StreamConfigurationCreate</code>.
     * Configuration for streaming workstations created using this launch profile.
     * @alias module:model/StreamConfigurationCreate
     * @param clipboardMode {module:model/StreamingClipboardMode} 
     * @param ec2InstanceTypes {Array} 
     * @param streamingImageIds {Array} 
     */
    constructor(clipboardMode, ec2InstanceTypes, streamingImageIds) { 
        
        StreamConfigurationCreate.initialize(this, clipboardMode, ec2InstanceTypes, streamingImageIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clipboardMode, ec2InstanceTypes, streamingImageIds) { 
        obj['clipboardMode'] = clipboardMode;
        obj['ec2InstanceTypes'] = ec2InstanceTypes;
        obj['streamingImageIds'] = streamingImageIds;
    }

    /**
     * Constructs a <code>StreamConfigurationCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamConfigurationCreate} obj Optional instance to populate.
     * @return {module:model/StreamConfigurationCreate} The populated <code>StreamConfigurationCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamConfigurationCreate();

            if (data.hasOwnProperty('automaticTerminationMode')) {
                obj['automaticTerminationMode'] = ApiClient.convertToType(data['automaticTerminationMode'], AutomaticTerminationMode);
            }
            if (data.hasOwnProperty('clipboardMode')) {
                obj['clipboardMode'] = ApiClient.convertToType(data['clipboardMode'], StreamingClipboardMode);
            }
            if (data.hasOwnProperty('ec2InstanceTypes')) {
                obj['ec2InstanceTypes'] = ApiClient.convertToType(data['ec2InstanceTypes'], Array);
            }
            if (data.hasOwnProperty('maxSessionLengthInMinutes')) {
                obj['maxSessionLengthInMinutes'] = ApiClient.convertToType(data['maxSessionLengthInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('maxStoppedSessionLengthInMinutes')) {
                obj['maxStoppedSessionLengthInMinutes'] = ApiClient.convertToType(data['maxStoppedSessionLengthInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('sessionBackup')) {
                obj['sessionBackup'] = CreateLaunchProfileRequestStreamConfigurationSessionBackup.constructFromObject(data['sessionBackup']);
            }
            if (data.hasOwnProperty('sessionPersistenceMode')) {
                obj['sessionPersistenceMode'] = ApiClient.convertToType(data['sessionPersistenceMode'], SessionPersistenceMode);
            }
            if (data.hasOwnProperty('sessionStorage')) {
                obj['sessionStorage'] = CreateLaunchProfileRequestStreamConfigurationSessionStorage.constructFromObject(data['sessionStorage']);
            }
            if (data.hasOwnProperty('streamingImageIds')) {
                obj['streamingImageIds'] = ApiClient.convertToType(data['streamingImageIds'], Array);
            }
            if (data.hasOwnProperty('volumeConfiguration')) {
                obj['volumeConfiguration'] = CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration.constructFromObject(data['volumeConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamConfigurationCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamConfigurationCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StreamConfigurationCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `automaticTerminationMode`
        if (data['automaticTerminationMode']) { // data not null
          AutomaticTerminationMode.validateJSON(data['automaticTerminationMode']);
        }
        // validate the optional field `clipboardMode`
        if (data['clipboardMode']) { // data not null
          StreamingClipboardMode.validateJSON(data['clipboardMode']);
        }
        // validate the optional field `ec2InstanceTypes`
        if (data['ec2InstanceTypes']) { // data not null
          Array.validateJSON(data['ec2InstanceTypes']);
        }
        // validate the optional field `maxSessionLengthInMinutes`
        if (data['maxSessionLengthInMinutes']) { // data not null
          Number.validateJSON(data['maxSessionLengthInMinutes']);
        }
        // validate the optional field `maxStoppedSessionLengthInMinutes`
        if (data['maxStoppedSessionLengthInMinutes']) { // data not null
          Number.validateJSON(data['maxStoppedSessionLengthInMinutes']);
        }
        // validate the optional field `sessionBackup`
        if (data['sessionBackup']) { // data not null
          CreateLaunchProfileRequestStreamConfigurationSessionBackup.validateJSON(data['sessionBackup']);
        }
        // validate the optional field `sessionPersistenceMode`
        if (data['sessionPersistenceMode']) { // data not null
          SessionPersistenceMode.validateJSON(data['sessionPersistenceMode']);
        }
        // validate the optional field `sessionStorage`
        if (data['sessionStorage']) { // data not null
          CreateLaunchProfileRequestStreamConfigurationSessionStorage.validateJSON(data['sessionStorage']);
        }
        // validate the optional field `streamingImageIds`
        if (data['streamingImageIds']) { // data not null
          Array.validateJSON(data['streamingImageIds']);
        }
        // validate the optional field `volumeConfiguration`
        if (data['volumeConfiguration']) { // data not null
          CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration.validateJSON(data['volumeConfiguration']);
        }

        return true;
    }


}

StreamConfigurationCreate.RequiredProperties = ["clipboardMode", "ec2InstanceTypes", "streamingImageIds"];

/**
 * @member {module:model/AutomaticTerminationMode} automaticTerminationMode
 */
StreamConfigurationCreate.prototype['automaticTerminationMode'] = undefined;

/**
 * @member {module:model/StreamingClipboardMode} clipboardMode
 */
StreamConfigurationCreate.prototype['clipboardMode'] = undefined;

/**
 * @member {Array} ec2InstanceTypes
 */
StreamConfigurationCreate.prototype['ec2InstanceTypes'] = undefined;

/**
 * @member {Number} maxSessionLengthInMinutes
 */
StreamConfigurationCreate.prototype['maxSessionLengthInMinutes'] = undefined;

/**
 * @member {Number} maxStoppedSessionLengthInMinutes
 */
StreamConfigurationCreate.prototype['maxStoppedSessionLengthInMinutes'] = undefined;

/**
 * @member {module:model/CreateLaunchProfileRequestStreamConfigurationSessionBackup} sessionBackup
 */
StreamConfigurationCreate.prototype['sessionBackup'] = undefined;

/**
 * @member {module:model/SessionPersistenceMode} sessionPersistenceMode
 */
StreamConfigurationCreate.prototype['sessionPersistenceMode'] = undefined;

/**
 * @member {module:model/CreateLaunchProfileRequestStreamConfigurationSessionStorage} sessionStorage
 */
StreamConfigurationCreate.prototype['sessionStorage'] = undefined;

/**
 * @member {Array} streamingImageIds
 */
StreamConfigurationCreate.prototype['streamingImageIds'] = undefined;

/**
 * @member {module:model/CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration} volumeConfiguration
 */
StreamConfigurationCreate.prototype['volumeConfiguration'] = undefined;






export default StreamConfigurationCreate;

