/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptEulasRequest from '../model/AcceptEulasRequest';
import AcceptEulasResponse from '../model/AcceptEulasResponse';
import CreateLaunchProfileRequest from '../model/CreateLaunchProfileRequest';
import CreateLaunchProfileResponse from '../model/CreateLaunchProfileResponse';
import CreateStreamingImageRequest from '../model/CreateStreamingImageRequest';
import CreateStreamingImageResponse from '../model/CreateStreamingImageResponse';
import CreateStreamingSessionRequest from '../model/CreateStreamingSessionRequest';
import CreateStreamingSessionResponse from '../model/CreateStreamingSessionResponse';
import CreateStreamingSessionStreamRequest from '../model/CreateStreamingSessionStreamRequest';
import CreateStreamingSessionStreamResponse from '../model/CreateStreamingSessionStreamResponse';
import CreateStudioComponentRequest from '../model/CreateStudioComponentRequest';
import CreateStudioComponentResponse from '../model/CreateStudioComponentResponse';
import CreateStudioRequest from '../model/CreateStudioRequest';
import CreateStudioResponse from '../model/CreateStudioResponse';
import DeleteLaunchProfileResponse from '../model/DeleteLaunchProfileResponse';
import DeleteStreamingImageResponse from '../model/DeleteStreamingImageResponse';
import DeleteStreamingSessionResponse from '../model/DeleteStreamingSessionResponse';
import DeleteStudioComponentResponse from '../model/DeleteStudioComponentResponse';
import DeleteStudioResponse from '../model/DeleteStudioResponse';
import GetEulaResponse from '../model/GetEulaResponse';
import GetLaunchProfileDetailsResponse from '../model/GetLaunchProfileDetailsResponse';
import GetLaunchProfileInitializationResponse from '../model/GetLaunchProfileInitializationResponse';
import GetLaunchProfileMemberResponse from '../model/GetLaunchProfileMemberResponse';
import GetLaunchProfileResponse from '../model/GetLaunchProfileResponse';
import GetStreamingImageResponse from '../model/GetStreamingImageResponse';
import GetStreamingSessionBackupResponse from '../model/GetStreamingSessionBackupResponse';
import GetStreamingSessionResponse from '../model/GetStreamingSessionResponse';
import GetStreamingSessionStreamResponse from '../model/GetStreamingSessionStreamResponse';
import GetStudioComponentResponse from '../model/GetStudioComponentResponse';
import GetStudioMemberResponse from '../model/GetStudioMemberResponse';
import GetStudioResponse from '../model/GetStudioResponse';
import LaunchProfileState from '../model/LaunchProfileState';
import ListEulaAcceptancesResponse from '../model/ListEulaAcceptancesResponse';
import ListEulasResponse from '../model/ListEulasResponse';
import ListLaunchProfileMembersResponse from '../model/ListLaunchProfileMembersResponse';
import ListLaunchProfilesResponse from '../model/ListLaunchProfilesResponse';
import ListStreamingImagesResponse from '../model/ListStreamingImagesResponse';
import ListStreamingSessionBackupsResponse from '../model/ListStreamingSessionBackupsResponse';
import ListStreamingSessionsResponse from '../model/ListStreamingSessionsResponse';
import ListStudioComponentsResponse from '../model/ListStudioComponentsResponse';
import ListStudioMembersResponse from '../model/ListStudioMembersResponse';
import ListStudiosResponse from '../model/ListStudiosResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutLaunchProfileMembersRequest from '../model/PutLaunchProfileMembersRequest';
import PutStudioMembersRequest from '../model/PutStudioMembersRequest';
import StartStreamingSessionRequest from '../model/StartStreamingSessionRequest';
import StartStreamingSessionResponse from '../model/StartStreamingSessionResponse';
import StartStudioSSOConfigurationRepairResponse from '../model/StartStudioSSOConfigurationRepairResponse';
import StopStreamingSessionRequest from '../model/StopStreamingSessionRequest';
import StopStreamingSessionResponse from '../model/StopStreamingSessionResponse';
import StudioComponentState from '../model/StudioComponentState';
import StudioComponentType from '../model/StudioComponentType';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateLaunchProfileMemberRequest from '../model/UpdateLaunchProfileMemberRequest';
import UpdateLaunchProfileMemberResponse from '../model/UpdateLaunchProfileMemberResponse';
import UpdateLaunchProfileRequest from '../model/UpdateLaunchProfileRequest';
import UpdateLaunchProfileResponse from '../model/UpdateLaunchProfileResponse';
import UpdateStreamingImageRequest from '../model/UpdateStreamingImageRequest';
import UpdateStreamingImageResponse from '../model/UpdateStreamingImageResponse';
import UpdateStudioComponentRequest from '../model/UpdateStudioComponentRequest';
import UpdateStudioComponentResponse from '../model/UpdateStudioComponentResponse';
import UpdateStudioRequest from '../model/UpdateStudioRequest';
import UpdateStudioResponse from '../model/UpdateStudioResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-08-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptEulas operation.
     * @callback module:api/DefaultApi~acceptEulasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptEulasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept EULAs.
     * @param {String} studioId The studio ID.
     * @param {module:model/AcceptEulasRequest} acceptEulasRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~acceptEulasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptEulasResponse}
     */
    acceptEulas(studioId, acceptEulasRequest, opts, callback) {
      opts = opts || {};
      let postBody = acceptEulasRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling acceptEulas");
      }
      // verify the required parameter 'acceptEulasRequest' is set
      if (acceptEulasRequest === undefined || acceptEulasRequest === null) {
        throw new Error("Missing the required parameter 'acceptEulasRequest' when calling acceptEulas");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AcceptEulasResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/eula-acceptances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLaunchProfile operation.
     * @callback module:api/DefaultApi~createLaunchProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLaunchProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a launch profile.
     * @param {String} studioId The studio ID. 
     * @param {module:model/CreateLaunchProfileRequest} createLaunchProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~createLaunchProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLaunchProfileResponse}
     */
    createLaunchProfile(studioId, createLaunchProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLaunchProfileRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling createLaunchProfile");
      }
      // verify the required parameter 'createLaunchProfileRequest' is set
      if (createLaunchProfileRequest === undefined || createLaunchProfileRequest === null) {
        throw new Error("Missing the required parameter 'createLaunchProfileRequest' when calling createLaunchProfile");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLaunchProfileResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingImage operation.
     * @callback module:api/DefaultApi~createStreamingImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a streaming image resource in a studio.
     * @param {String} studioId The studio ID. 
     * @param {module:model/CreateStreamingImageRequest} createStreamingImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~createStreamingImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingImageResponse}
     */
    createStreamingImage(studioId, createStreamingImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingImageRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling createStreamingImage");
      }
      // verify the required parameter 'createStreamingImageRequest' is set
      if (createStreamingImageRequest === undefined || createStreamingImageRequest === null) {
        throw new Error("Missing the required parameter 'createStreamingImageRequest' when calling createStreamingImage");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamingImageResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingSession operation.
     * @callback module:api/DefaultApi~createStreamingSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a streaming session in a studio.</p> <p>After invoking this operation, you must poll GetStreamingSession until the streaming session is in the <code>READY</code> state.</p>
     * @param {String} studioId The studio ID. 
     * @param {module:model/CreateStreamingSessionRequest} createStreamingSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~createStreamingSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingSessionResponse}
     */
    createStreamingSession(studioId, createStreamingSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingSessionRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling createStreamingSession");
      }
      // verify the required parameter 'createStreamingSessionRequest' is set
      if (createStreamingSessionRequest === undefined || createStreamingSessionRequest === null) {
        throw new Error("Missing the required parameter 'createStreamingSessionRequest' when calling createStreamingSession");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamingSessionResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingSessionStream operation.
     * @callback module:api/DefaultApi~createStreamingSessionStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingSessionStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a streaming session stream for a streaming session.</p> <p>After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in the <code>READY</code> state.</p>
     * @param {String} sessionId The streaming session ID.
     * @param {String} studioId The studio ID. 
     * @param {module:model/CreateStreamingSessionStreamRequest} createStreamingSessionStreamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~createStreamingSessionStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingSessionStreamResponse}
     */
    createStreamingSessionStream(sessionId, studioId, createStreamingSessionStreamRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingSessionStreamRequest;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling createStreamingSessionStream");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling createStreamingSessionStream");
      }
      // verify the required parameter 'createStreamingSessionStreamRequest' is set
      if (createStreamingSessionStreamRequest === undefined || createStreamingSessionStreamRequest === null) {
        throw new Error("Missing the required parameter 'createStreamingSessionStreamRequest' when calling createStreamingSessionStream");
      }

      let pathParams = {
        'sessionId': sessionId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamingSessionStreamResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStudio operation.
     * @callback module:api/DefaultApi~createStudioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a new studio.</p> <p>When creating a studio, two IAM roles must be provided: the admin role and the user role. These roles are assumed by your users when they log in to the Nimble Studio portal.</p> <p>The user role must have the <code>AmazonNimbleStudio-StudioUser</code> managed policy attached for the portal to function properly.</p> <p>The admin role must have the <code>AmazonNimbleStudio-StudioAdmin</code> managed policy attached for the portal to function properly.</p> <p>You may optionally specify a KMS key in the <code>StudioEncryptionConfiguration</code>.</p> <p>In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an KMS key. By default, this key is owned by Amazon Web Services and managed on your behalf. You may provide your own KMS key when calling <code>CreateStudio</code> to encrypt this data using a key you own and manage.</p> <p>When providing an KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys.</p> <p>If you delete this grant, the studio will no longer be accessible to your portal users.</p> <p>If you delete the studio KMS key, your studio will no longer be accessible.</p>
     * @param {module:model/CreateStudioRequest} createStudioRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~createStudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStudioResponse}
     */
    createStudio(createStudioRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStudioRequest;
      // verify the required parameter 'createStudioRequest' is set
      if (createStudioRequest === undefined || createStudioRequest === null) {
        throw new Error("Missing the required parameter 'createStudioRequest' when calling createStudio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStudioResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStudioComponent operation.
     * @callback module:api/DefaultApi~createStudioComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStudioComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a studio component resource.
     * @param {String} studioId The studio ID. 
     * @param {module:model/CreateStudioComponentRequest} createStudioComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~createStudioComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStudioComponentResponse}
     */
    createStudioComponent(studioId, createStudioComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStudioComponentRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling createStudioComponent");
      }
      // verify the required parameter 'createStudioComponentRequest' is set
      if (createStudioComponentRequest === undefined || createStudioComponentRequest === null) {
        throw new Error("Missing the required parameter 'createStudioComponentRequest' when calling createStudioComponent");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStudioComponentResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/studio-components', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLaunchProfile operation.
     * @callback module:api/DefaultApi~deleteLaunchProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteLaunchProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently delete a launch profile.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteLaunchProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteLaunchProfileResponse}
     */
    deleteLaunchProfile(launchProfileId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling deleteLaunchProfile");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteLaunchProfile");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteLaunchProfileResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLaunchProfileMember operation.
     * @callback module:api/DefaultApi~deleteLaunchProfileMemberCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user from launch profile membership.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} principalId The principal ID. This currently supports a IAM Identity Center UserId. 
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteLaunchProfileMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLaunchProfileMember(launchProfileId, principalId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling deleteLaunchProfileMember");
      }
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling deleteLaunchProfileMember");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteLaunchProfileMember");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'principalId': principalId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStreamingImage operation.
     * @callback module:api/DefaultApi~deleteStreamingImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteStreamingImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete streaming image.
     * @param {String} streamingImageId The streaming image ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteStreamingImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteStreamingImageResponse}
     */
    deleteStreamingImage(streamingImageId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamingImageId' is set
      if (streamingImageId === undefined || streamingImageId === null) {
        throw new Error("Missing the required parameter 'streamingImageId' when calling deleteStreamingImage");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteStreamingImage");
      }

      let pathParams = {
        'streamingImageId': streamingImageId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStreamingImageResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStreamingSession operation.
     * @callback module:api/DefaultApi~deleteStreamingSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteStreamingSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes streaming session resource.</p> <p>After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a <code>DELETED</code> state.</p> <p>A streaming session will count against your streaming session quota until it is marked <code>DELETED</code>.</p>
     * @param {String} sessionId The streaming session ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteStreamingSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteStreamingSessionResponse}
     */
    deleteStreamingSession(sessionId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling deleteStreamingSession");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteStreamingSession");
      }

      let pathParams = {
        'sessionId': sessionId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStreamingSessionResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudio operation.
     * @callback module:api/DefaultApi~deleteStudioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteStudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a studio resource.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteStudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteStudioResponse}
     */
    deleteStudio(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteStudio");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStudioResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudioComponent operation.
     * @callback module:api/DefaultApi~deleteStudioComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteStudioComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a studio component resource.
     * @param {String} studioComponentId The studio component ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteStudioComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteStudioComponentResponse}
     */
    deleteStudioComponent(studioComponentId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioComponentId' is set
      if (studioComponentId === undefined || studioComponentId === null) {
        throw new Error("Missing the required parameter 'studioComponentId' when calling deleteStudioComponent");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteStudioComponent");
      }

      let pathParams = {
        'studioComponentId': studioComponentId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStudioComponentResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudioMember operation.
     * @callback module:api/DefaultApi~deleteStudioMemberCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user from studio membership.
     * @param {String} principalId The principal ID. This currently supports a IAM Identity Center UserId. 
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~deleteStudioMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteStudioMember(principalId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling deleteStudioMember");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling deleteStudioMember");
      }

      let pathParams = {
        'principalId': principalId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/membership/{principalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEula operation.
     * @callback module:api/DefaultApi~getEulaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEulaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get EULA.
     * @param {String} eulaId The EULA ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEulaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEulaResponse}
     */
    getEula(eulaId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eulaId' is set
      if (eulaId === undefined || eulaId === null) {
        throw new Error("Missing the required parameter 'eulaId' when calling getEula");
      }

      let pathParams = {
        'eulaId': eulaId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEulaResponse;
      return this.apiClient.callApi(
        '/2020-08-01/eulas/{eulaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLaunchProfile operation.
     * @callback module:api/DefaultApi~getLaunchProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLaunchProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a launch profile.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLaunchProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLaunchProfileResponse}
     */
    getLaunchProfile(launchProfileId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling getLaunchProfile");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getLaunchProfile");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLaunchProfileResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLaunchProfileDetails operation.
     * @callback module:api/DefaultApi~getLaunchProfileDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLaunchProfileDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLaunchProfileDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLaunchProfileDetailsResponse}
     */
    getLaunchProfileDetails(launchProfileId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling getLaunchProfileDetails");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getLaunchProfileDetails");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLaunchProfileDetailsResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLaunchProfileInitialization operation.
     * @callback module:api/DefaultApi~getLaunchProfileInitializationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLaunchProfileInitializationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a launch profile initialization.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {Array.<String>} launchProfileProtocolVersions The launch profile protocol versions supported by the client.
     * @param {String} launchPurpose The launch purpose.
     * @param {String} platform The platform where this Launch Profile will be used, either Windows or Linux.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLaunchProfileInitializationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLaunchProfileInitializationResponse}
     */
    getLaunchProfileInitialization(launchProfileId, launchProfileProtocolVersions, launchPurpose, platform, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling getLaunchProfileInitialization");
      }
      // verify the required parameter 'launchProfileProtocolVersions' is set
      if (launchProfileProtocolVersions === undefined || launchProfileProtocolVersions === null) {
        throw new Error("Missing the required parameter 'launchProfileProtocolVersions' when calling getLaunchProfileInitialization");
      }
      // verify the required parameter 'launchPurpose' is set
      if (launchPurpose === undefined || launchPurpose === null) {
        throw new Error("Missing the required parameter 'launchPurpose' when calling getLaunchProfileInitialization");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling getLaunchProfileInitialization");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getLaunchProfileInitialization");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
        'launchProfileProtocolVersions': this.apiClient.buildCollectionParam(launchProfileProtocolVersions, 'multi'),
        'launchPurpose': launchPurpose,
        'platform': platform
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLaunchProfileInitializationResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/init#launchProfileProtocolVersions&launchPurpose&platform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLaunchProfileMember operation.
     * @callback module:api/DefaultApi~getLaunchProfileMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLaunchProfileMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user persona in launch profile membership.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} principalId The principal ID. This currently supports a IAM Identity Center UserId. 
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLaunchProfileMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLaunchProfileMemberResponse}
     */
    getLaunchProfileMember(launchProfileId, principalId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling getLaunchProfileMember");
      }
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling getLaunchProfileMember");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getLaunchProfileMember");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'principalId': principalId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLaunchProfileMemberResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingImage operation.
     * @callback module:api/DefaultApi~getStreamingImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get streaming image.
     * @param {String} streamingImageId The streaming image ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingImageResponse}
     */
    getStreamingImage(streamingImageId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'streamingImageId' is set
      if (streamingImageId === undefined || streamingImageId === null) {
        throw new Error("Missing the required parameter 'streamingImageId' when calling getStreamingImage");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStreamingImage");
      }

      let pathParams = {
        'streamingImageId': streamingImageId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStreamingImageResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingSession operation.
     * @callback module:api/DefaultApi~getStreamingSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets StreamingSession resource.</p> <p>Invoke this operation to poll for a streaming session state while creating or deleting a session.</p>
     * @param {String} sessionId The streaming session ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingSessionResponse}
     */
    getStreamingSession(sessionId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getStreamingSession");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStreamingSession");
      }

      let pathParams = {
        'sessionId': sessionId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStreamingSessionResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingSessionBackup operation.
     * @callback module:api/DefaultApi~getStreamingSessionBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingSessionBackupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets <code>StreamingSessionBackup</code> resource.</p> <p>Invoke this operation to poll for a streaming session backup while stopping a streaming session.</p>
     * @param {String} backupId The ID of the backup.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingSessionBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingSessionBackupResponse}
     */
    getStreamingSessionBackup(backupId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling getStreamingSessionBackup");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStreamingSessionBackup");
      }

      let pathParams = {
        'backupId': backupId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStreamingSessionBackupResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-session-backups/{backupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingSessionStream operation.
     * @callback module:api/DefaultApi~getStreamingSessionStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingSessionStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a StreamingSessionStream for a streaming session.</p> <p>Invoke this operation to poll the resource after invoking <code>CreateStreamingSessionStream</code>.</p> <p>After the <code>StreamingSessionStream</code> changes to the <code>READY</code> state, the url property will contain a stream to be used with the DCV streaming client.</p>
     * @param {String} sessionId The streaming session ID.
     * @param {String} streamId The streaming session stream ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingSessionStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingSessionStreamResponse}
     */
    getStreamingSessionStream(sessionId, streamId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getStreamingSessionStream");
      }
      // verify the required parameter 'streamId' is set
      if (streamId === undefined || streamId === null) {
        throw new Error("Missing the required parameter 'streamId' when calling getStreamingSessionStream");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStreamingSessionStream");
      }

      let pathParams = {
        'sessionId': sessionId,
        'streamId': streamId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStreamingSessionStreamResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams/{streamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudio operation.
     * @callback module:api/DefaultApi~getStudioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a studio resource.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStudioResponse}
     */
    getStudio(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStudio");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStudioResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudioComponent operation.
     * @callback module:api/DefaultApi~getStudioComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStudioComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a studio component resource.
     * @param {String} studioComponentId The studio component ID.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStudioComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStudioComponentResponse}
     */
    getStudioComponent(studioComponentId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioComponentId' is set
      if (studioComponentId === undefined || studioComponentId === null) {
        throw new Error("Missing the required parameter 'studioComponentId' when calling getStudioComponent");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStudioComponent");
      }

      let pathParams = {
        'studioComponentId': studioComponentId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStudioComponentResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudioMember operation.
     * @callback module:api/DefaultApi~getStudioMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStudioMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's membership in a studio.
     * @param {String} principalId The principal ID. This currently supports a IAM Identity Center UserId. 
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStudioMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStudioMemberResponse}
     */
    getStudioMember(principalId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling getStudioMember");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling getStudioMember");
      }

      let pathParams = {
        'principalId': principalId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStudioMemberResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/membership/{principalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEulaAcceptances operation.
     * @callback module:api/DefaultApi~listEulaAcceptancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEulaAcceptancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List EULA acceptances.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [eulaIds] The list of EULA IDs that have been previously accepted.
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {module:api/DefaultApi~listEulaAcceptancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEulaAcceptancesResponse}
     */
    listEulaAcceptances(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listEulaAcceptances");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'eulaIds': this.apiClient.buildCollectionParam(opts['eulaIds'], 'multi'),
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEulaAcceptancesResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/eula-acceptances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEulas operation.
     * @callback module:api/DefaultApi~listEulasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEulasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List EULAs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [eulaIds] The list of EULA IDs that should be returned
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {module:api/DefaultApi~listEulasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEulasResponse}
     */
    listEulas(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eulaIds': this.apiClient.buildCollectionParam(opts['eulaIds'], 'multi'),
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEulasResponse;
      return this.apiClient.callApi(
        '/2020-08-01/eulas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLaunchProfileMembers operation.
     * @callback module:api/DefaultApi~listLaunchProfileMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLaunchProfileMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users in a given launch profile membership.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The max number of results to return in the response.
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {module:api/DefaultApi~listLaunchProfileMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLaunchProfileMembersResponse}
     */
    listLaunchProfileMembers(launchProfileId, studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling listLaunchProfileMembers");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listLaunchProfileMembers");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLaunchProfileMembersResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLaunchProfiles operation.
     * @callback module:api/DefaultApi~listLaunchProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLaunchProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the launch profiles a studio.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The max number of results to return in the response.
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {String} [principalId] The principal ID. This currently supports a IAM Identity Center UserId. 
     * @param {Array.<module:model/LaunchProfileState>} [states] Filter this request to launch profiles in any of the given states.
     * @param {module:api/DefaultApi~listLaunchProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLaunchProfilesResponse}
     */
    listLaunchProfiles(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listLaunchProfiles");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'principalId': opts['principalId'],
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLaunchProfilesResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamingImages operation.
     * @callback module:api/DefaultApi~listStreamingImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStreamingImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List the streaming image resources available to this studio.</p> <p>This list will contain both images provided by Amazon Web Services, as well as streaming images that you have created in your studio.</p>
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {String} [owner] Filter this request to streaming images with the given owner
     * @param {module:api/DefaultApi~listStreamingImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStreamingImagesResponse}
     */
    listStreamingImages(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listStreamingImages");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'owner': opts['owner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStreamingImagesResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamingSessionBackups operation.
     * @callback module:api/DefaultApi~listStreamingSessionBackupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStreamingSessionBackupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the backups of a streaming session in a studio.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {String} [ownedBy] The user ID of the user that owns the streaming session.
     * @param {module:api/DefaultApi~listStreamingSessionBackupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStreamingSessionBackupsResponse}
     */
    listStreamingSessionBackups(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listStreamingSessionBackups");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'ownedBy': opts['ownedBy']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStreamingSessionBackupsResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-session-backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamingSessions operation.
     * @callback module:api/DefaultApi~listStreamingSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStreamingSessionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the streaming sessions in a studio.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [createdBy] Filters the request to streaming sessions created by the given user.
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {String} [ownedBy] Filters the request to streaming session owned by the given user
     * @param {String} [sessionIds] Filters the request to only the provided session IDs.
     * @param {module:api/DefaultApi~listStreamingSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStreamingSessionsResponse}
     */
    listStreamingSessions(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listStreamingSessions");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'createdBy': opts['createdBy'],
        'nextToken': opts['nextToken'],
        'ownedBy': opts['ownedBy'],
        'sessionIds': opts['sessionIds']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStreamingSessionsResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStudioComponents operation.
     * @callback module:api/DefaultApi~listStudioComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStudioComponentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the <code>StudioComponents</code> in a studio.
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The max number of results to return in the response.
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {Array.<module:model/StudioComponentState>} [states] Filters the request to studio components that are in one of the given states. 
     * @param {Array.<module:model/StudioComponentType>} [types] Filters the request to studio components that are of one of the given types.
     * @param {module:api/DefaultApi~listStudioComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStudioComponentsResponse}
     */
    listStudioComponents(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listStudioComponents");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'states': this.apiClient.buildCollectionParam(opts['states'], 'multi'),
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStudioComponentsResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/studio-components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStudioMembers operation.
     * @callback module:api/DefaultApi~listStudioMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStudioMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get all users in a given studio membership.</p> <note> <p> <code>ListStudioMembers</code> only returns admin members.</p> </note>
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The max number of results to return in the response.
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {module:api/DefaultApi~listStudioMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStudioMembersResponse}
     */
    listStudioMembers(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling listStudioMembers");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStudioMembersResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/membership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStudios operation.
     * @callback module:api/DefaultApi~listStudiosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStudiosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List studios in your Amazon Web Services accounts in the requested Amazon Web Services Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results, or null if there are no more results.
     * @param {module:api/DefaultApi~listStudiosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStudiosResponse}
     */
    listStudios(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStudiosResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the tags for a resource, given its Amazon Resource Names (ARN).</p> <p>This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.</p>
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource for which you want to list tags.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/2020-08-01/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putLaunchProfileMembers operation.
     * @callback module:api/DefaultApi~putLaunchProfileMembersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add/update users with given persona to launch profile membership.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} studioId The studio ID. 
     * @param {module:model/PutLaunchProfileMembersRequest} putLaunchProfileMembersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~putLaunchProfileMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putLaunchProfileMembers(launchProfileId, studioId, putLaunchProfileMembersRequest, opts, callback) {
      opts = opts || {};
      let postBody = putLaunchProfileMembersRequest;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling putLaunchProfileMembers");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling putLaunchProfileMembers");
      }
      // verify the required parameter 'putLaunchProfileMembersRequest' is set
      if (putLaunchProfileMembersRequest === undefined || putLaunchProfileMembersRequest === null) {
        throw new Error("Missing the required parameter 'putLaunchProfileMembersRequest' when calling putLaunchProfileMembers");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putStudioMembers operation.
     * @callback module:api/DefaultApi~putStudioMembersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add/update users with given persona to studio membership.
     * @param {String} studioId The studio ID. 
     * @param {module:model/PutStudioMembersRequest} putStudioMembersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~putStudioMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putStudioMembers(studioId, putStudioMembersRequest, opts, callback) {
      opts = opts || {};
      let postBody = putStudioMembersRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling putStudioMembers");
      }
      // verify the required parameter 'putStudioMembersRequest' is set
      if (putStudioMembersRequest === undefined || putStudioMembersRequest === null) {
        throw new Error("Missing the required parameter 'putStudioMembersRequest' when calling putStudioMembers");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/membership', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startStreamingSession operation.
     * @callback module:api/DefaultApi~startStreamingSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartStreamingSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transitions sessions from the <code>STOPPED</code> state into the <code>READY</code> state. The <code>START_IN_PROGRESS</code> state is the intermediate state between the <code>STOPPED</code> and <code>READY</code> states.
     * @param {String} sessionId The streaming session ID for the <code>StartStreamingSessionRequest</code>.
     * @param {String} studioId The studio ID for the StartStreamingSessionRequest.
     * @param {module:model/StartStreamingSessionRequest} startStreamingSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~startStreamingSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartStreamingSessionResponse}
     */
    startStreamingSession(sessionId, studioId, startStreamingSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startStreamingSessionRequest;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling startStreamingSession");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling startStreamingSession");
      }
      // verify the required parameter 'startStreamingSessionRequest' is set
      if (startStreamingSessionRequest === undefined || startStreamingSessionRequest === null) {
        throw new Error("Missing the required parameter 'startStreamingSessionRequest' when calling startStreamingSession");
      }

      let pathParams = {
        'sessionId': sessionId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartStreamingSessionResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startStudioSSOConfigurationRepair operation.
     * @callback module:api/DefaultApi~startStudioSSOConfigurationRepairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartStudioSSOConfigurationRepairResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Repairs the IAM Identity Center configuration for a given studio.</p> <p>If the studio has a valid IAM Identity Center configuration currently associated with it, this operation will fail with a validation error.</p> <p>If the studio does not have a valid IAM Identity Center configuration currently associated with it, then a new IAM Identity Center application is created for the studio and the studio is changed to the <code>READY</code> state.</p> <p>After the IAM Identity Center application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.</p>
     * @param {String} studioId The studio ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~startStudioSSOConfigurationRepairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartStudioSSOConfigurationRepairResponse}
     */
    startStudioSSOConfigurationRepair(studioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling startStudioSSOConfigurationRepair");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartStudioSSOConfigurationRepairResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/sso-configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopStreamingSession operation.
     * @callback module:api/DefaultApi~stopStreamingSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopStreamingSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transitions sessions from the <code>READY</code> state into the <code>STOPPED</code> state. The <code>STOP_IN_PROGRESS</code> state is the intermediate state between the <code>READY</code> and <code>STOPPED</code> states.
     * @param {String} sessionId The streaming session ID for the <code>StopStreamingSessionRequest</code>.
     * @param {String} studioId The studioId for the StopStreamingSessionRequest.
     * @param {module:model/StopStreamingSessionRequest} stopStreamingSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~stopStreamingSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopStreamingSessionResponse}
     */
    stopStreamingSession(sessionId, studioId, stopStreamingSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopStreamingSessionRequest;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling stopStreamingSession");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling stopStreamingSession");
      }
      // verify the required parameter 'stopStreamingSessionRequest' is set
      if (stopStreamingSessionRequest === undefined || stopStreamingSessionRequest === null) {
        throw new Error("Missing the required parameter 'stopStreamingSessionRequest' when calling stopStreamingSession");
      }

      let pathParams = {
        'sessionId': sessionId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopStreamingSessionResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates tags for a resource, given its ARN.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource you want to add tags to. 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-08-01/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the tags for a resource.
     * @param {String} resourceArn Identifies the Amazon Resource Name(ARN) key from which you are removing tags. 
     * @param {Array.<String>} tagKeys One or more tag keys. Specify only the tag keys, not the tag values.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2020-08-01/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLaunchProfile operation.
     * @callback module:api/DefaultApi~updateLaunchProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLaunchProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a launch profile.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} studioId The studio ID. 
     * @param {module:model/UpdateLaunchProfileRequest} updateLaunchProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~updateLaunchProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLaunchProfileResponse}
     */
    updateLaunchProfile(launchProfileId, studioId, updateLaunchProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLaunchProfileRequest;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling updateLaunchProfile");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling updateLaunchProfile");
      }
      // verify the required parameter 'updateLaunchProfileRequest' is set
      if (updateLaunchProfileRequest === undefined || updateLaunchProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateLaunchProfileRequest' when calling updateLaunchProfile");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLaunchProfileResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLaunchProfileMember operation.
     * @callback module:api/DefaultApi~updateLaunchProfileMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLaunchProfileMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user persona in launch profile membership.
     * @param {String} launchProfileId The ID of the launch profile used to control access from the streaming session.
     * @param {String} principalId The principal ID. This currently supports a IAM Identity Center UserId. 
     * @param {String} studioId The studio ID. 
     * @param {module:model/UpdateLaunchProfileMemberRequest} updateLaunchProfileMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~updateLaunchProfileMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLaunchProfileMemberResponse}
     */
    updateLaunchProfileMember(launchProfileId, principalId, studioId, updateLaunchProfileMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLaunchProfileMemberRequest;
      // verify the required parameter 'launchProfileId' is set
      if (launchProfileId === undefined || launchProfileId === null) {
        throw new Error("Missing the required parameter 'launchProfileId' when calling updateLaunchProfileMember");
      }
      // verify the required parameter 'principalId' is set
      if (principalId === undefined || principalId === null) {
        throw new Error("Missing the required parameter 'principalId' when calling updateLaunchProfileMember");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling updateLaunchProfileMember");
      }
      // verify the required parameter 'updateLaunchProfileMemberRequest' is set
      if (updateLaunchProfileMemberRequest === undefined || updateLaunchProfileMemberRequest === null) {
        throw new Error("Missing the required parameter 'updateLaunchProfileMemberRequest' when calling updateLaunchProfileMember");
      }

      let pathParams = {
        'launchProfileId': launchProfileId,
        'principalId': principalId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLaunchProfileMemberResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamingImage operation.
     * @callback module:api/DefaultApi~updateStreamingImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStreamingImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update streaming image.
     * @param {String} streamingImageId The streaming image ID.
     * @param {String} studioId The studio ID. 
     * @param {module:model/UpdateStreamingImageRequest} updateStreamingImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~updateStreamingImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStreamingImageResponse}
     */
    updateStreamingImage(streamingImageId, studioId, updateStreamingImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStreamingImageRequest;
      // verify the required parameter 'streamingImageId' is set
      if (streamingImageId === undefined || streamingImageId === null) {
        throw new Error("Missing the required parameter 'streamingImageId' when calling updateStreamingImage");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling updateStreamingImage");
      }
      // verify the required parameter 'updateStreamingImageRequest' is set
      if (updateStreamingImageRequest === undefined || updateStreamingImageRequest === null) {
        throw new Error("Missing the required parameter 'updateStreamingImageRequest' when calling updateStreamingImage");
      }

      let pathParams = {
        'streamingImageId': streamingImageId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStreamingImageResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStudio operation.
     * @callback module:api/DefaultApi~updateStudioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update a Studio resource.</p> <p>Currently, this operation only supports updating the displayName of your studio.</p>
     * @param {String} studioId The studio ID. 
     * @param {module:model/UpdateStudioRequest} updateStudioRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~updateStudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStudioResponse}
     */
    updateStudio(studioId, updateStudioRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStudioRequest;
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling updateStudio");
      }
      // verify the required parameter 'updateStudioRequest' is set
      if (updateStudioRequest === undefined || updateStudioRequest === null) {
        throw new Error("Missing the required parameter 'updateStudioRequest' when calling updateStudio");
      }

      let pathParams = {
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStudioResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStudioComponent operation.
     * @callback module:api/DefaultApi~updateStudioComponentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStudioComponentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a studio component resource.
     * @param {String} studioComponentId The studio component ID.
     * @param {String} studioId The studio ID. 
     * @param {module:model/UpdateStudioComponentRequest} updateStudioComponentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
     * @param {module:api/DefaultApi~updateStudioComponentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStudioComponentResponse}
     */
    updateStudioComponent(studioComponentId, studioId, updateStudioComponentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStudioComponentRequest;
      // verify the required parameter 'studioComponentId' is set
      if (studioComponentId === undefined || studioComponentId === null) {
        throw new Error("Missing the required parameter 'studioComponentId' when calling updateStudioComponent");
      }
      // verify the required parameter 'studioId' is set
      if (studioId === undefined || studioId === null) {
        throw new Error("Missing the required parameter 'studioId' when calling updateStudioComponent");
      }
      // verify the required parameter 'updateStudioComponentRequest' is set
      if (updateStudioComponentRequest === undefined || updateStudioComponentRequest === null) {
        throw new Error("Missing the required parameter 'updateStudioComponentRequest' when calling updateStudioComponent");
      }

      let pathParams = {
        'studioComponentId': studioComponentId,
        'studioId': studioId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Client-Token': opts['xAmzClientToken']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStudioComponentResponse;
      return this.apiClient.callApi(
        '/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
