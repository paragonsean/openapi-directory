/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptEulasRequest;
import org.openapitools.client.model.AcceptEulasResponse;
import org.openapitools.client.model.CreateLaunchProfileRequest;
import org.openapitools.client.model.CreateLaunchProfileResponse;
import org.openapitools.client.model.CreateStreamingImageRequest;
import org.openapitools.client.model.CreateStreamingImageResponse;
import org.openapitools.client.model.CreateStreamingSessionRequest;
import org.openapitools.client.model.CreateStreamingSessionResponse;
import org.openapitools.client.model.CreateStreamingSessionStreamRequest;
import org.openapitools.client.model.CreateStreamingSessionStreamResponse;
import org.openapitools.client.model.CreateStudioComponentRequest;
import org.openapitools.client.model.CreateStudioComponentResponse;
import org.openapitools.client.model.CreateStudioRequest;
import org.openapitools.client.model.CreateStudioResponse;
import org.openapitools.client.model.DeleteLaunchProfileResponse;
import org.openapitools.client.model.DeleteStreamingImageResponse;
import org.openapitools.client.model.DeleteStreamingSessionResponse;
import org.openapitools.client.model.DeleteStudioComponentResponse;
import org.openapitools.client.model.DeleteStudioResponse;
import org.openapitools.client.model.GetEulaResponse;
import org.openapitools.client.model.GetLaunchProfileDetailsResponse;
import org.openapitools.client.model.GetLaunchProfileInitializationResponse;
import org.openapitools.client.model.GetLaunchProfileMemberResponse;
import org.openapitools.client.model.GetLaunchProfileResponse;
import org.openapitools.client.model.GetStreamingImageResponse;
import org.openapitools.client.model.GetStreamingSessionBackupResponse;
import org.openapitools.client.model.GetStreamingSessionResponse;
import org.openapitools.client.model.GetStreamingSessionStreamResponse;
import org.openapitools.client.model.GetStudioComponentResponse;
import org.openapitools.client.model.GetStudioMemberResponse;
import org.openapitools.client.model.GetStudioResponse;
import org.openapitools.client.model.LaunchProfileState;
import org.openapitools.client.model.ListEulaAcceptancesResponse;
import org.openapitools.client.model.ListEulasResponse;
import org.openapitools.client.model.ListLaunchProfileMembersResponse;
import org.openapitools.client.model.ListLaunchProfilesResponse;
import org.openapitools.client.model.ListStreamingImagesResponse;
import org.openapitools.client.model.ListStreamingSessionBackupsResponse;
import org.openapitools.client.model.ListStreamingSessionsResponse;
import org.openapitools.client.model.ListStudioComponentsResponse;
import org.openapitools.client.model.ListStudioMembersResponse;
import org.openapitools.client.model.ListStudiosResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutLaunchProfileMembersRequest;
import org.openapitools.client.model.PutStudioMembersRequest;
import org.openapitools.client.model.StartStreamingSessionRequest;
import org.openapitools.client.model.StartStreamingSessionResponse;
import org.openapitools.client.model.StartStudioSSOConfigurationRepairResponse;
import org.openapitools.client.model.StopStreamingSessionRequest;
import org.openapitools.client.model.StopStreamingSessionResponse;
import org.openapitools.client.model.StudioComponentState;
import org.openapitools.client.model.StudioComponentType;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateLaunchProfileMemberRequest;
import org.openapitools.client.model.UpdateLaunchProfileMemberResponse;
import org.openapitools.client.model.UpdateLaunchProfileRequest;
import org.openapitools.client.model.UpdateLaunchProfileResponse;
import org.openapitools.client.model.UpdateStreamingImageRequest;
import org.openapitools.client.model.UpdateStreamingImageResponse;
import org.openapitools.client.model.UpdateStudioComponentRequest;
import org.openapitools.client.model.UpdateStudioComponentResponse;
import org.openapitools.client.model.UpdateStudioRequest;
import org.openapitools.client.model.UpdateStudioResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Accept EULAs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptEulasTest() throws ApiException {
        String studioId = null;
        AcceptEulasRequest acceptEulasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        AcceptEulasResponse response = api.acceptEulas(studioId, acceptEulasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Create a launch profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLaunchProfileTest() throws ApiException {
        String studioId = null;
        CreateLaunchProfileRequest createLaunchProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        CreateLaunchProfileResponse response = api.createLaunchProfile(studioId, createLaunchProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Creates a streaming image resource in a studio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingImageTest() throws ApiException {
        String studioId = null;
        CreateStreamingImageRequest createStreamingImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        CreateStreamingImageResponse response = api.createStreamingImage(studioId, createStreamingImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a streaming session in a studio.&lt;/p&gt; &lt;p&gt;After invoking this operation, you must poll GetStreamingSession until the streaming session is in the &lt;code&gt;READY&lt;/code&gt; state.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingSessionTest() throws ApiException {
        String studioId = null;
        CreateStreamingSessionRequest createStreamingSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        CreateStreamingSessionResponse response = api.createStreamingSession(studioId, createStreamingSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a streaming session stream for a streaming session.&lt;/p&gt; &lt;p&gt;After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in the &lt;code&gt;READY&lt;/code&gt; state.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingSessionStreamTest() throws ApiException {
        String sessionId = null;
        String studioId = null;
        CreateStreamingSessionStreamRequest createStreamingSessionStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        CreateStreamingSessionStreamResponse response = api.createStreamingSessionStream(sessionId, studioId, createStreamingSessionStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a new studio.&lt;/p&gt; &lt;p&gt;When creating a studio, two IAM roles must be provided: the admin role and the user role. These roles are assumed by your users when they log in to the Nimble Studio portal.&lt;/p&gt; &lt;p&gt;The user role must have the &lt;code&gt;AmazonNimbleStudio-StudioUser&lt;/code&gt; managed policy attached for the portal to function properly.&lt;/p&gt; &lt;p&gt;The admin role must have the &lt;code&gt;AmazonNimbleStudio-StudioAdmin&lt;/code&gt; managed policy attached for the portal to function properly.&lt;/p&gt; &lt;p&gt;You may optionally specify a KMS key in the &lt;code&gt;StudioEncryptionConfiguration&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an KMS key. By default, this key is owned by Amazon Web Services and managed on your behalf. You may provide your own KMS key when calling &lt;code&gt;CreateStudio&lt;/code&gt; to encrypt this data using a key you own and manage.&lt;/p&gt; &lt;p&gt;When providing an KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys.&lt;/p&gt; &lt;p&gt;If you delete this grant, the studio will no longer be accessible to your portal users.&lt;/p&gt; &lt;p&gt;If you delete the studio KMS key, your studio will no longer be accessible.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStudioTest() throws ApiException {
        CreateStudioRequest createStudioRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        CreateStudioResponse response = api.createStudio(createStudioRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Creates a studio component resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStudioComponentTest() throws ApiException {
        String studioId = null;
        CreateStudioComponentRequest createStudioComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        CreateStudioComponentResponse response = api.createStudioComponent(studioId, createStudioComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Permanently delete a launch profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLaunchProfileTest() throws ApiException {
        String launchProfileId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        DeleteLaunchProfileResponse response = api.deleteLaunchProfile(launchProfileId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Delete a user from launch profile membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLaunchProfileMemberTest() throws ApiException {
        String launchProfileId = null;
        String principalId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        Object response = api.deleteLaunchProfileMember(launchProfileId, principalId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Delete streaming image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamingImageTest() throws ApiException {
        String streamingImageId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        DeleteStreamingImageResponse response = api.deleteStreamingImage(streamingImageId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes streaming session resource.&lt;/p&gt; &lt;p&gt;After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a &lt;code&gt;DELETED&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;A streaming session will count against your streaming session quota until it is marked &lt;code&gt;DELETED&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamingSessionTest() throws ApiException {
        String sessionId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        DeleteStreamingSessionResponse response = api.deleteStreamingSession(sessionId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Delete a studio resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStudioTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        DeleteStudioResponse response = api.deleteStudio(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Deletes a studio component resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStudioComponentTest() throws ApiException {
        String studioComponentId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        DeleteStudioComponentResponse response = api.deleteStudioComponent(studioComponentId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Delete a user from studio membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStudioMemberTest() throws ApiException {
        String principalId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        Object response = api.deleteStudioMember(principalId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Get EULA.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEulaTest() throws ApiException {
        String eulaId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEulaResponse response = api.getEula(eulaId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a launch profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaunchProfileTest() throws ApiException {
        String launchProfileId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLaunchProfileResponse response = api.getLaunchProfile(launchProfileId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaunchProfileDetailsTest() throws ApiException {
        String launchProfileId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLaunchProfileDetailsResponse response = api.getLaunchProfileDetails(launchProfileId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a launch profile initialization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaunchProfileInitializationTest() throws ApiException {
        String launchProfileId = null;
        List<String> launchProfileProtocolVersions = null;
        String launchPurpose = null;
        String platform = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLaunchProfileInitializationResponse response = api.getLaunchProfileInitialization(launchProfileId, launchProfileProtocolVersions, launchPurpose, platform, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a user persona in launch profile membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaunchProfileMemberTest() throws ApiException {
        String launchProfileId = null;
        String principalId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLaunchProfileMemberResponse response = api.getLaunchProfileMember(launchProfileId, principalId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get streaming image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingImageTest() throws ApiException {
        String streamingImageId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingImageResponse response = api.getStreamingImage(streamingImageId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets StreamingSession resource.&lt;/p&gt; &lt;p&gt;Invoke this operation to poll for a streaming session state while creating or deleting a session.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingSessionTest() throws ApiException {
        String sessionId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingSessionResponse response = api.getStreamingSession(sessionId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets &lt;code&gt;StreamingSessionBackup&lt;/code&gt; resource.&lt;/p&gt; &lt;p&gt;Invoke this operation to poll for a streaming session backup while stopping a streaming session.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingSessionBackupTest() throws ApiException {
        String backupId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingSessionBackupResponse response = api.getStreamingSessionBackup(backupId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a StreamingSessionStream for a streaming session.&lt;/p&gt; &lt;p&gt;Invoke this operation to poll the resource after invoking &lt;code&gt;CreateStreamingSessionStream&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After the &lt;code&gt;StreamingSessionStream&lt;/code&gt; changes to the &lt;code&gt;READY&lt;/code&gt; state, the url property will contain a stream to be used with the DCV streaming client.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingSessionStreamTest() throws ApiException {
        String sessionId = null;
        String streamId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingSessionStreamResponse response = api.getStreamingSessionStream(sessionId, streamId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a studio resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStudioTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStudioResponse response = api.getStudio(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a studio component resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStudioComponentTest() throws ApiException {
        String studioComponentId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStudioComponentResponse response = api.getStudioComponent(studioComponentId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get a user&#39;s membership in a studio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStudioMemberTest() throws ApiException {
        String principalId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStudioMemberResponse response = api.getStudioMember(principalId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List EULA acceptances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEulaAcceptancesTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> eulaIds = null;
        String nextToken = null;
        ListEulaAcceptancesResponse response = api.listEulaAcceptances(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, eulaIds, nextToken);
        // TODO: test validations
    }

    /**
     * List EULAs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEulasTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> eulaIds = null;
        String nextToken = null;
        ListEulasResponse response = api.listEulas(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, eulaIds, nextToken);
        // TODO: test validations
    }

    /**
     * Get all users in a given launch profile membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLaunchProfileMembersTest() throws ApiException {
        String launchProfileId = null;
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListLaunchProfileMembersResponse response = api.listLaunchProfileMembers(launchProfileId, studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List all the launch profiles a studio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLaunchProfilesTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String principalId = null;
        List<LaunchProfileState> states = null;
        ListLaunchProfilesResponse response = api.listLaunchProfiles(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, principalId, states);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List the streaming image resources available to this studio.&lt;/p&gt; &lt;p&gt;This list will contain both images provided by Amazon Web Services, as well as streaming images that you have created in your studio.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamingImagesTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String owner = null;
        ListStreamingImagesResponse response = api.listStreamingImages(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, owner);
        // TODO: test validations
    }

    /**
     * Lists the backups of a streaming session in a studio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamingSessionBackupsTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String ownedBy = null;
        ListStreamingSessionBackupsResponse response = api.listStreamingSessionBackups(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, ownedBy);
        // TODO: test validations
    }

    /**
     * Lists the streaming sessions in a studio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamingSessionsTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String createdBy = null;
        String nextToken = null;
        String ownedBy = null;
        String sessionIds = null;
        ListStreamingSessionsResponse response = api.listStreamingSessions(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createdBy, nextToken, ownedBy, sessionIds);
        // TODO: test validations
    }

    /**
     * Lists the &lt;code&gt;StudioComponents&lt;/code&gt; in a studio.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStudioComponentsTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        List<StudioComponentState> states = null;
        List<StudioComponentType> types = null;
        ListStudioComponentsResponse response = api.listStudioComponents(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, states, types);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Get all users in a given studio membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStudioMembers&lt;/code&gt; only returns admin members.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStudioMembersTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListStudioMembersResponse response = api.listStudioMembers(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List studios in your Amazon Web Services accounts in the requested Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStudiosTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListStudiosResponse response = api.listStudios(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the tags for a resource, given its Amazon Resource Names (ARN).&lt;/p&gt; &lt;p&gt;This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add/update users with given persona to launch profile membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putLaunchProfileMembersTest() throws ApiException {
        String launchProfileId = null;
        String studioId = null;
        PutLaunchProfileMembersRequest putLaunchProfileMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        Object response = api.putLaunchProfileMembers(launchProfileId, studioId, putLaunchProfileMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Add/update users with given persona to studio membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putStudioMembersTest() throws ApiException {
        String studioId = null;
        PutStudioMembersRequest putStudioMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        Object response = api.putStudioMembers(studioId, putStudioMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Transitions sessions from the &lt;code&gt;STOPPED&lt;/code&gt; state into the &lt;code&gt;READY&lt;/code&gt; state. The &lt;code&gt;START_IN_PROGRESS&lt;/code&gt; state is the intermediate state between the &lt;code&gt;STOPPED&lt;/code&gt; and &lt;code&gt;READY&lt;/code&gt; states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startStreamingSessionTest() throws ApiException {
        String sessionId = null;
        String studioId = null;
        StartStreamingSessionRequest startStreamingSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        StartStreamingSessionResponse response = api.startStreamingSession(sessionId, studioId, startStreamingSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Repairs the IAM Identity Center configuration for a given studio.&lt;/p&gt; &lt;p&gt;If the studio has a valid IAM Identity Center configuration currently associated with it, this operation will fail with a validation error.&lt;/p&gt; &lt;p&gt;If the studio does not have a valid IAM Identity Center configuration currently associated with it, then a new IAM Identity Center application is created for the studio and the studio is changed to the &lt;code&gt;READY&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;After the IAM Identity Center application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startStudioSSOConfigurationRepairTest() throws ApiException {
        String studioId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        StartStudioSSOConfigurationRepairResponse response = api.startStudioSSOConfigurationRepair(studioId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Transitions sessions from the &lt;code&gt;READY&lt;/code&gt; state into the &lt;code&gt;STOPPED&lt;/code&gt; state. The &lt;code&gt;STOP_IN_PROGRESS&lt;/code&gt; state is the intermediate state between the &lt;code&gt;READY&lt;/code&gt; and &lt;code&gt;STOPPED&lt;/code&gt; states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopStreamingSessionTest() throws ApiException {
        String sessionId = null;
        String studioId = null;
        StopStreamingSessionRequest stopStreamingSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        StopStreamingSessionResponse response = api.stopStreamingSession(sessionId, studioId, stopStreamingSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Creates tags for a resource, given its ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the tags for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a launch profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLaunchProfileTest() throws ApiException {
        String launchProfileId = null;
        String studioId = null;
        UpdateLaunchProfileRequest updateLaunchProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        UpdateLaunchProfileResponse response = api.updateLaunchProfile(launchProfileId, studioId, updateLaunchProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Update a user persona in launch profile membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLaunchProfileMemberTest() throws ApiException {
        String launchProfileId = null;
        String principalId = null;
        String studioId = null;
        UpdateLaunchProfileMemberRequest updateLaunchProfileMemberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        UpdateLaunchProfileMemberResponse response = api.updateLaunchProfileMember(launchProfileId, principalId, studioId, updateLaunchProfileMemberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Update streaming image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamingImageTest() throws ApiException {
        String streamingImageId = null;
        String studioId = null;
        UpdateStreamingImageRequest updateStreamingImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        UpdateStreamingImageResponse response = api.updateStreamingImage(streamingImageId, studioId, updateStreamingImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update a Studio resource.&lt;/p&gt; &lt;p&gt;Currently, this operation only supports updating the displayName of your studio.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStudioTest() throws ApiException {
        String studioId = null;
        UpdateStudioRequest updateStudioRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        UpdateStudioResponse response = api.updateStudio(studioId, updateStudioRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

    /**
     * Updates a studio component resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStudioComponentTest() throws ApiException {
        String studioComponentId = null;
        String studioId = null;
        UpdateStudioComponentRequest updateStudioComponentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzClientToken = null;
        UpdateStudioComponentResponse response = api.updateStudioComponent(studioComponentId, studioId, updateStudioComponentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzClientToken);
        // TODO: test validations
    }

}
