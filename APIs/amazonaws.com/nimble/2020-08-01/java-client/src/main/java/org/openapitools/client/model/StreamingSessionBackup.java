/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.StreamingSessionState;
import org.openapitools.client.model.StreamingSessionStatusCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the streaming session backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingSessionBackup {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_BACKUP_ID = "backupId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private String backupId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_ID = "launchProfileId";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_ID)
  private String launchProfileId;

  public static final String SERIALIZED_NAME_OWNED_BY = "ownedBy";
  @SerializedName(SERIALIZED_NAME_OWNED_BY)
  private String ownedBy;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StreamingSessionState state;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StreamingSessionStatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public StreamingSessionBackup() {
  }

  public StreamingSessionBackup arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public StreamingSessionBackup backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * Get backupId
   * @return backupId
   */
  @javax.annotation.Nullable
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }


  public StreamingSessionBackup createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public StreamingSessionBackup launchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
    return this;
  }

  /**
   * Get launchProfileId
   * @return launchProfileId
   */
  @javax.annotation.Nullable
  public String getLaunchProfileId() {
    return launchProfileId;
  }

  public void setLaunchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
  }


  public StreamingSessionBackup ownedBy(String ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

  /**
   * Get ownedBy
   * @return ownedBy
   */
  @javax.annotation.Nullable
  public String getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(String ownedBy) {
    this.ownedBy = ownedBy;
  }


  public StreamingSessionBackup sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public StreamingSessionBackup state(StreamingSessionState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StreamingSessionState getState() {
    return state;
  }

  public void setState(StreamingSessionState state) {
    this.state = state;
  }


  public StreamingSessionBackup statusCode(StreamingSessionStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StreamingSessionStatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StreamingSessionStatusCode statusCode) {
    this.statusCode = statusCode;
  }


  public StreamingSessionBackup statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public StreamingSessionBackup tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingSessionBackup streamingSessionBackup = (StreamingSessionBackup) o;
    return Objects.equals(this.arn, streamingSessionBackup.arn) &&
        Objects.equals(this.backupId, streamingSessionBackup.backupId) &&
        Objects.equals(this.createdAt, streamingSessionBackup.createdAt) &&
        Objects.equals(this.launchProfileId, streamingSessionBackup.launchProfileId) &&
        Objects.equals(this.ownedBy, streamingSessionBackup.ownedBy) &&
        Objects.equals(this.sessionId, streamingSessionBackup.sessionId) &&
        Objects.equals(this.state, streamingSessionBackup.state) &&
        Objects.equals(this.statusCode, streamingSessionBackup.statusCode) &&
        Objects.equals(this.statusMessage, streamingSessionBackup.statusMessage) &&
        Objects.equals(this.tags, streamingSessionBackup.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, backupId, createdAt, launchProfileId, ownedBy, sessionId, state, statusCode, statusMessage, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingSessionBackup {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    launchProfileId: ").append(toIndentedString(launchProfileId)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("backupId");
    openapiFields.add("createdAt");
    openapiFields.add("launchProfileId");
    openapiFields.add("ownedBy");
    openapiFields.add("sessionId");
    openapiFields.add("state");
    openapiFields.add("statusCode");
    openapiFields.add("statusMessage");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingSessionBackup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingSessionBackup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingSessionBackup is not found in the empty JSON string", StreamingSessionBackup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingSessionBackup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingSessionBackup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `backupId`
      if (jsonObj.get("backupId") != null && !jsonObj.get("backupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("backupId"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `launchProfileId`
      if (jsonObj.get("launchProfileId") != null && !jsonObj.get("launchProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("launchProfileId"));
      }
      // validate the optional field `ownedBy`
      if (jsonObj.get("ownedBy") != null && !jsonObj.get("ownedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ownedBy"));
      }
      // validate the optional field `sessionId`
      if (jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sessionId"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StreamingSessionState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        StreamingSessionStatusCode.validateJsonElement(jsonObj.get("statusCode"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingSessionBackup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingSessionBackup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingSessionBackup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingSessionBackup.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingSessionBackup>() {
           @Override
           public void write(JsonWriter out, StreamingSessionBackup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingSessionBackup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingSessionBackup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingSessionBackup
   * @throws IOException if the JSON string is invalid with respect to StreamingSessionBackup
   */
  public static StreamingSessionBackup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingSessionBackup.class);
  }

  /**
   * Convert an instance of StreamingSessionBackup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

