/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateStudioRequestStudioEncryptionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateStudioRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStudioRequest {
  public static final String SERIALIZED_NAME_ADMIN_ROLE_ARN = "adminRoleArn";
  @SerializedName(SERIALIZED_NAME_ADMIN_ROLE_ARN)
  private String adminRoleArn;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_STUDIO_ENCRYPTION_CONFIGURATION = "studioEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_STUDIO_ENCRYPTION_CONFIGURATION)
  private CreateStudioRequestStudioEncryptionConfiguration studioEncryptionConfiguration;

  public static final String SERIALIZED_NAME_STUDIO_NAME = "studioName";
  @SerializedName(SERIALIZED_NAME_STUDIO_NAME)
  private String studioName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_ROLE_ARN = "userRoleArn";
  @SerializedName(SERIALIZED_NAME_USER_ROLE_ARN)
  private String userRoleArn;

  public CreateStudioRequest() {
  }

  public CreateStudioRequest adminRoleArn(String adminRoleArn) {
    this.adminRoleArn = adminRoleArn;
    return this;
  }

  /**
   * The IAM role that studio admins will assume when logging in to the Nimble Studio portal.
   * @return adminRoleArn
   */
  @javax.annotation.Nonnull
  public String getAdminRoleArn() {
    return adminRoleArn;
  }

  public void setAdminRoleArn(String adminRoleArn) {
    this.adminRoleArn = adminRoleArn;
  }


  public CreateStudioRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A friendly name for the studio.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateStudioRequest studioEncryptionConfiguration(CreateStudioRequestStudioEncryptionConfiguration studioEncryptionConfiguration) {
    this.studioEncryptionConfiguration = studioEncryptionConfiguration;
    return this;
  }

  /**
   * Get studioEncryptionConfiguration
   * @return studioEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public CreateStudioRequestStudioEncryptionConfiguration getStudioEncryptionConfiguration() {
    return studioEncryptionConfiguration;
  }

  public void setStudioEncryptionConfiguration(CreateStudioRequestStudioEncryptionConfiguration studioEncryptionConfiguration) {
    this.studioEncryptionConfiguration = studioEncryptionConfiguration;
  }


  public CreateStudioRequest studioName(String studioName) {
    this.studioName = studioName;
    return this;
  }

  /**
   * The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.
   * @return studioName
   */
  @javax.annotation.Nonnull
  public String getStudioName() {
    return studioName;
  }

  public void setStudioName(String studioName) {
    this.studioName = studioName;
  }


  public CreateStudioRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateStudioRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of labels, in the form of key-value pairs, that apply to this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateStudioRequest userRoleArn(String userRoleArn) {
    this.userRoleArn = userRoleArn;
    return this;
  }

  /**
   * The IAM role that studio users will assume when logging in to the Nimble Studio portal.
   * @return userRoleArn
   */
  @javax.annotation.Nonnull
  public String getUserRoleArn() {
    return userRoleArn;
  }

  public void setUserRoleArn(String userRoleArn) {
    this.userRoleArn = userRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStudioRequest createStudioRequest = (CreateStudioRequest) o;
    return Objects.equals(this.adminRoleArn, createStudioRequest.adminRoleArn) &&
        Objects.equals(this.displayName, createStudioRequest.displayName) &&
        Objects.equals(this.studioEncryptionConfiguration, createStudioRequest.studioEncryptionConfiguration) &&
        Objects.equals(this.studioName, createStudioRequest.studioName) &&
        Objects.equals(this.tags, createStudioRequest.tags) &&
        Objects.equals(this.userRoleArn, createStudioRequest.userRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminRoleArn, displayName, studioEncryptionConfiguration, studioName, tags, userRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStudioRequest {\n");
    sb.append("    adminRoleArn: ").append(toIndentedString(adminRoleArn)).append("\n");
    sb.append("    displayName: ").append("*").append("\n");
    sb.append("    studioEncryptionConfiguration: ").append(toIndentedString(studioEncryptionConfiguration)).append("\n");
    sb.append("    studioName: ").append(toIndentedString(studioName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    userRoleArn: ").append(toIndentedString(userRoleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminRoleArn");
    openapiFields.add("displayName");
    openapiFields.add("studioEncryptionConfiguration");
    openapiFields.add("studioName");
    openapiFields.add("tags");
    openapiFields.add("userRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adminRoleArn");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("studioName");
    openapiRequiredFields.add("userRoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStudioRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStudioRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStudioRequest is not found in the empty JSON string", CreateStudioRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStudioRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStudioRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateStudioRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("adminRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminRoleArn").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `studioEncryptionConfiguration`
      if (jsonObj.get("studioEncryptionConfiguration") != null && !jsonObj.get("studioEncryptionConfiguration").isJsonNull()) {
        CreateStudioRequestStudioEncryptionConfiguration.validateJsonElement(jsonObj.get("studioEncryptionConfiguration"));
      }
      if (!jsonObj.get("studioName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studioName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studioName").toString()));
      }
      if (!jsonObj.get("userRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userRoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStudioRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStudioRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStudioRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStudioRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStudioRequest>() {
           @Override
           public void write(JsonWriter out, CreateStudioRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStudioRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStudioRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStudioRequest
   * @throws IOException if the JSON string is invalid with respect to CreateStudioRequest
   */
  public static CreateStudioRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStudioRequest.class);
  }

  /**
   * Convert an instance of CreateStudioRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

