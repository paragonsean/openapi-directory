/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateStreamingSessionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStreamingSessionRequest {
  /**
   * The EC2 Instance type used for the streaming session.
   */
  @JsonAdapter(Ec2InstanceTypeEnum.Adapter.class)
  public enum Ec2InstanceTypeEnum {
    G4DN_XLARGE("g4dn.xlarge"),
    
    G4DN_2XLARGE("g4dn.2xlarge"),
    
    G4DN_4XLARGE("g4dn.4xlarge"),
    
    G4DN_8XLARGE("g4dn.8xlarge"),
    
    G4DN_12XLARGE("g4dn.12xlarge"),
    
    G4DN_16XLARGE("g4dn.16xlarge"),
    
    G3_4XLARGE("g3.4xlarge"),
    
    G3S_XLARGE("g3s.xlarge"),
    
    G5_XLARGE("g5.xlarge"),
    
    G5_2XLARGE("g5.2xlarge"),
    
    G5_4XLARGE("g5.4xlarge"),
    
    G5_8XLARGE("g5.8xlarge"),
    
    G5_16XLARGE("g5.16xlarge");

    private String value;

    Ec2InstanceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Ec2InstanceTypeEnum fromValue(String value) {
      for (Ec2InstanceTypeEnum b : Ec2InstanceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Ec2InstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Ec2InstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Ec2InstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Ec2InstanceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Ec2InstanceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EC2_INSTANCE_TYPE = "ec2InstanceType";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_TYPE)
  private Ec2InstanceTypeEnum ec2InstanceType;

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_ID = "launchProfileId";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_ID)
  private String launchProfileId;

  public static final String SERIALIZED_NAME_OWNED_BY = "ownedBy";
  @SerializedName(SERIALIZED_NAME_OWNED_BY)
  private String ownedBy;

  public static final String SERIALIZED_NAME_STREAMING_IMAGE_ID = "streamingImageId";
  @SerializedName(SERIALIZED_NAME_STREAMING_IMAGE_ID)
  private String streamingImageId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateStreamingSessionRequest() {
  }

  public CreateStreamingSessionRequest ec2InstanceType(Ec2InstanceTypeEnum ec2InstanceType) {
    this.ec2InstanceType = ec2InstanceType;
    return this;
  }

  /**
   * The EC2 Instance type used for the streaming session.
   * @return ec2InstanceType
   */
  @javax.annotation.Nullable
  public Ec2InstanceTypeEnum getEc2InstanceType() {
    return ec2InstanceType;
  }

  public void setEc2InstanceType(Ec2InstanceTypeEnum ec2InstanceType) {
    this.ec2InstanceType = ec2InstanceType;
  }


  public CreateStreamingSessionRequest launchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
    return this;
  }

  /**
   * The ID of the launch profile used to control access from the streaming session.
   * @return launchProfileId
   */
  @javax.annotation.Nonnull
  public String getLaunchProfileId() {
    return launchProfileId;
  }

  public void setLaunchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
  }


  public CreateStreamingSessionRequest ownedBy(String ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

  /**
   * The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.
   * @return ownedBy
   */
  @javax.annotation.Nullable
  public String getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(String ownedBy) {
    this.ownedBy = ownedBy;
  }


  public CreateStreamingSessionRequest streamingImageId(String streamingImageId) {
    this.streamingImageId = streamingImageId;
    return this;
  }

  /**
   * The ID of the streaming image.
   * @return streamingImageId
   */
  @javax.annotation.Nullable
  public String getStreamingImageId() {
    return streamingImageId;
  }

  public void setStreamingImageId(String streamingImageId) {
    this.streamingImageId = streamingImageId;
  }


  public CreateStreamingSessionRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateStreamingSessionRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of labels, in the form of key-value pairs, that apply to this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStreamingSessionRequest createStreamingSessionRequest = (CreateStreamingSessionRequest) o;
    return Objects.equals(this.ec2InstanceType, createStreamingSessionRequest.ec2InstanceType) &&
        Objects.equals(this.launchProfileId, createStreamingSessionRequest.launchProfileId) &&
        Objects.equals(this.ownedBy, createStreamingSessionRequest.ownedBy) &&
        Objects.equals(this.streamingImageId, createStreamingSessionRequest.streamingImageId) &&
        Objects.equals(this.tags, createStreamingSessionRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ec2InstanceType, launchProfileId, ownedBy, streamingImageId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStreamingSessionRequest {\n");
    sb.append("    ec2InstanceType: ").append(toIndentedString(ec2InstanceType)).append("\n");
    sb.append("    launchProfileId: ").append(toIndentedString(launchProfileId)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    streamingImageId: ").append(toIndentedString(streamingImageId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ec2InstanceType");
    openapiFields.add("launchProfileId");
    openapiFields.add("ownedBy");
    openapiFields.add("streamingImageId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("launchProfileId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStreamingSessionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStreamingSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStreamingSessionRequest is not found in the empty JSON string", CreateStreamingSessionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStreamingSessionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStreamingSessionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateStreamingSessionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ec2InstanceType") != null && !jsonObj.get("ec2InstanceType").isJsonNull()) && !jsonObj.get("ec2InstanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ec2InstanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ec2InstanceType").toString()));
      }
      // validate the optional field `ec2InstanceType`
      if (jsonObj.get("ec2InstanceType") != null && !jsonObj.get("ec2InstanceType").isJsonNull()) {
        Ec2InstanceTypeEnum.validateJsonElement(jsonObj.get("ec2InstanceType"));
      }
      if (!jsonObj.get("launchProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchProfileId").toString()));
      }
      if ((jsonObj.get("ownedBy") != null && !jsonObj.get("ownedBy").isJsonNull()) && !jsonObj.get("ownedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownedBy").toString()));
      }
      if ((jsonObj.get("streamingImageId") != null && !jsonObj.get("streamingImageId").isJsonNull()) && !jsonObj.get("streamingImageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingImageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingImageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStreamingSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStreamingSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStreamingSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStreamingSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStreamingSessionRequest>() {
           @Override
           public void write(JsonWriter out, CreateStreamingSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStreamingSessionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStreamingSessionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStreamingSessionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateStreamingSessionRequest
   */
  public static CreateStreamingSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStreamingSessionRequest.class);
  }

  /**
   * Convert an instance of CreateStreamingSessionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

