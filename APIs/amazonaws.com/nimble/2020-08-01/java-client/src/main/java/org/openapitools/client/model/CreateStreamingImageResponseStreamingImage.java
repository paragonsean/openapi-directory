/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StreamingImageEncryptionConfiguration;
import org.openapitools.client.model.StreamingImageState;
import org.openapitools.client.model.StreamingImageStatusCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateStreamingImageResponseStreamingImage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStreamingImageResponseStreamingImage {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EC2_IMAGE_ID = "ec2ImageId";
  @SerializedName(SERIALIZED_NAME_EC2_IMAGE_ID)
  private String ec2ImageId;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIGURATION = "encryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIGURATION)
  private StreamingImageEncryptionConfiguration encryptionConfiguration;

  public static final String SERIALIZED_NAME_EULA_IDS = "eulaIds";
  @SerializedName(SERIALIZED_NAME_EULA_IDS)
  private List eulaIds;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StreamingImageState state;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StreamingImageStatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_STREAMING_IMAGE_ID = "streamingImageId";
  @SerializedName(SERIALIZED_NAME_STREAMING_IMAGE_ID)
  private String streamingImageId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public CreateStreamingImageResponseStreamingImage() {
  }

  public CreateStreamingImageResponseStreamingImage arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateStreamingImageResponseStreamingImage description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateStreamingImageResponseStreamingImage ec2ImageId(String ec2ImageId) {
    this.ec2ImageId = ec2ImageId;
    return this;
  }

  /**
   * Get ec2ImageId
   * @return ec2ImageId
   */
  @javax.annotation.Nullable
  public String getEc2ImageId() {
    return ec2ImageId;
  }

  public void setEc2ImageId(String ec2ImageId) {
    this.ec2ImageId = ec2ImageId;
  }


  public CreateStreamingImageResponseStreamingImage encryptionConfiguration(StreamingImageEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
    return this;
  }

  /**
   * Get encryptionConfiguration
   * @return encryptionConfiguration
   */
  @javax.annotation.Nullable
  public StreamingImageEncryptionConfiguration getEncryptionConfiguration() {
    return encryptionConfiguration;
  }

  public void setEncryptionConfiguration(StreamingImageEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
  }


  public CreateStreamingImageResponseStreamingImage eulaIds(List eulaIds) {
    this.eulaIds = eulaIds;
    return this;
  }

  /**
   * Get eulaIds
   * @return eulaIds
   */
  @javax.annotation.Nullable
  public List getEulaIds() {
    return eulaIds;
  }

  public void setEulaIds(List eulaIds) {
    this.eulaIds = eulaIds;
  }


  public CreateStreamingImageResponseStreamingImage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateStreamingImageResponseStreamingImage owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public CreateStreamingImageResponseStreamingImage platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public CreateStreamingImageResponseStreamingImage state(StreamingImageState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StreamingImageState getState() {
    return state;
  }

  public void setState(StreamingImageState state) {
    this.state = state;
  }


  public CreateStreamingImageResponseStreamingImage statusCode(StreamingImageStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StreamingImageStatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StreamingImageStatusCode statusCode) {
    this.statusCode = statusCode;
  }


  public CreateStreamingImageResponseStreamingImage statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public CreateStreamingImageResponseStreamingImage streamingImageId(String streamingImageId) {
    this.streamingImageId = streamingImageId;
    return this;
  }

  /**
   * Get streamingImageId
   * @return streamingImageId
   */
  @javax.annotation.Nullable
  public String getStreamingImageId() {
    return streamingImageId;
  }

  public void setStreamingImageId(String streamingImageId) {
    this.streamingImageId = streamingImageId;
  }


  public CreateStreamingImageResponseStreamingImage tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStreamingImageResponseStreamingImage createStreamingImageResponseStreamingImage = (CreateStreamingImageResponseStreamingImage) o;
    return Objects.equals(this.arn, createStreamingImageResponseStreamingImage.arn) &&
        Objects.equals(this.description, createStreamingImageResponseStreamingImage.description) &&
        Objects.equals(this.ec2ImageId, createStreamingImageResponseStreamingImage.ec2ImageId) &&
        Objects.equals(this.encryptionConfiguration, createStreamingImageResponseStreamingImage.encryptionConfiguration) &&
        Objects.equals(this.eulaIds, createStreamingImageResponseStreamingImage.eulaIds) &&
        Objects.equals(this.name, createStreamingImageResponseStreamingImage.name) &&
        Objects.equals(this.owner, createStreamingImageResponseStreamingImage.owner) &&
        Objects.equals(this.platform, createStreamingImageResponseStreamingImage.platform) &&
        Objects.equals(this.state, createStreamingImageResponseStreamingImage.state) &&
        Objects.equals(this.statusCode, createStreamingImageResponseStreamingImage.statusCode) &&
        Objects.equals(this.statusMessage, createStreamingImageResponseStreamingImage.statusMessage) &&
        Objects.equals(this.streamingImageId, createStreamingImageResponseStreamingImage.streamingImageId) &&
        Objects.equals(this.tags, createStreamingImageResponseStreamingImage.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, description, ec2ImageId, encryptionConfiguration, eulaIds, name, owner, platform, state, statusCode, statusMessage, streamingImageId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStreamingImageResponseStreamingImage {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ec2ImageId: ").append(toIndentedString(ec2ImageId)).append("\n");
    sb.append("    encryptionConfiguration: ").append(toIndentedString(encryptionConfiguration)).append("\n");
    sb.append("    eulaIds: ").append(toIndentedString(eulaIds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    streamingImageId: ").append(toIndentedString(streamingImageId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("description");
    openapiFields.add("ec2ImageId");
    openapiFields.add("encryptionConfiguration");
    openapiFields.add("eulaIds");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("platform");
    openapiFields.add("state");
    openapiFields.add("statusCode");
    openapiFields.add("statusMessage");
    openapiFields.add("streamingImageId");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStreamingImageResponseStreamingImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStreamingImageResponseStreamingImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStreamingImageResponseStreamingImage is not found in the empty JSON string", CreateStreamingImageResponseStreamingImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStreamingImageResponseStreamingImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStreamingImageResponseStreamingImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `ec2ImageId`
      if (jsonObj.get("ec2ImageId") != null && !jsonObj.get("ec2ImageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2ImageId"));
      }
      // validate the optional field `encryptionConfiguration`
      if (jsonObj.get("encryptionConfiguration") != null && !jsonObj.get("encryptionConfiguration").isJsonNull()) {
        StreamingImageEncryptionConfiguration.validateJsonElement(jsonObj.get("encryptionConfiguration"));
      }
      // validate the optional field `eulaIds`
      if (jsonObj.get("eulaIds") != null && !jsonObj.get("eulaIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("eulaIds"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StreamingImageState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        StreamingImageStatusCode.validateJsonElement(jsonObj.get("statusCode"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `streamingImageId`
      if (jsonObj.get("streamingImageId") != null && !jsonObj.get("streamingImageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("streamingImageId"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStreamingImageResponseStreamingImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStreamingImageResponseStreamingImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStreamingImageResponseStreamingImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStreamingImageResponseStreamingImage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStreamingImageResponseStreamingImage>() {
           @Override
           public void write(JsonWriter out, CreateStreamingImageResponseStreamingImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStreamingImageResponseStreamingImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStreamingImageResponseStreamingImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStreamingImageResponseStreamingImage
   * @throws IOException if the JSON string is invalid with respect to CreateStreamingImageResponseStreamingImage
   */
  public static CreateStreamingImageResponseStreamingImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStreamingImageResponseStreamingImage.class);
  }

  /**
   * Convert an instance of CreateStreamingImageResponseStreamingImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

