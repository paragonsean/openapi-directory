/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutomaticTerminationMode;
import org.openapitools.client.model.CreateLaunchProfileRequestStreamConfigurationSessionBackup;
import org.openapitools.client.model.CreateLaunchProfileRequestStreamConfigurationSessionStorage;
import org.openapitools.client.model.CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration;
import org.openapitools.client.model.SessionPersistenceMode;
import org.openapitools.client.model.StreamingClipboardMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for streaming workstations created using this launch profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamConfigurationCreate {
  public static final String SERIALIZED_NAME_AUTOMATIC_TERMINATION_MODE = "automaticTerminationMode";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_TERMINATION_MODE)
  private AutomaticTerminationMode automaticTerminationMode;

  public static final String SERIALIZED_NAME_CLIPBOARD_MODE = "clipboardMode";
  @SerializedName(SERIALIZED_NAME_CLIPBOARD_MODE)
  private StreamingClipboardMode clipboardMode;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_TYPES = "ec2InstanceTypes";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_TYPES)
  private List ec2InstanceTypes;

  public static final String SERIALIZED_NAME_MAX_SESSION_LENGTH_IN_MINUTES = "maxSessionLengthInMinutes";
  @SerializedName(SERIALIZED_NAME_MAX_SESSION_LENGTH_IN_MINUTES)
  private Integer maxSessionLengthInMinutes;

  public static final String SERIALIZED_NAME_MAX_STOPPED_SESSION_LENGTH_IN_MINUTES = "maxStoppedSessionLengthInMinutes";
  @SerializedName(SERIALIZED_NAME_MAX_STOPPED_SESSION_LENGTH_IN_MINUTES)
  private Integer maxStoppedSessionLengthInMinutes;

  public static final String SERIALIZED_NAME_SESSION_BACKUP = "sessionBackup";
  @SerializedName(SERIALIZED_NAME_SESSION_BACKUP)
  private CreateLaunchProfileRequestStreamConfigurationSessionBackup sessionBackup;

  public static final String SERIALIZED_NAME_SESSION_PERSISTENCE_MODE = "sessionPersistenceMode";
  @SerializedName(SERIALIZED_NAME_SESSION_PERSISTENCE_MODE)
  private SessionPersistenceMode sessionPersistenceMode;

  public static final String SERIALIZED_NAME_SESSION_STORAGE = "sessionStorage";
  @SerializedName(SERIALIZED_NAME_SESSION_STORAGE)
  private CreateLaunchProfileRequestStreamConfigurationSessionStorage sessionStorage;

  public static final String SERIALIZED_NAME_STREAMING_IMAGE_IDS = "streamingImageIds";
  @SerializedName(SERIALIZED_NAME_STREAMING_IMAGE_IDS)
  private List streamingImageIds;

  public static final String SERIALIZED_NAME_VOLUME_CONFIGURATION = "volumeConfiguration";
  @SerializedName(SERIALIZED_NAME_VOLUME_CONFIGURATION)
  private CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration volumeConfiguration;

  public StreamConfigurationCreate() {
  }

  public StreamConfigurationCreate automaticTerminationMode(AutomaticTerminationMode automaticTerminationMode) {
    this.automaticTerminationMode = automaticTerminationMode;
    return this;
  }

  /**
   * Get automaticTerminationMode
   * @return automaticTerminationMode
   */
  @javax.annotation.Nullable
  public AutomaticTerminationMode getAutomaticTerminationMode() {
    return automaticTerminationMode;
  }

  public void setAutomaticTerminationMode(AutomaticTerminationMode automaticTerminationMode) {
    this.automaticTerminationMode = automaticTerminationMode;
  }


  public StreamConfigurationCreate clipboardMode(StreamingClipboardMode clipboardMode) {
    this.clipboardMode = clipboardMode;
    return this;
  }

  /**
   * Get clipboardMode
   * @return clipboardMode
   */
  @javax.annotation.Nonnull
  public StreamingClipboardMode getClipboardMode() {
    return clipboardMode;
  }

  public void setClipboardMode(StreamingClipboardMode clipboardMode) {
    this.clipboardMode = clipboardMode;
  }


  public StreamConfigurationCreate ec2InstanceTypes(List ec2InstanceTypes) {
    this.ec2InstanceTypes = ec2InstanceTypes;
    return this;
  }

  /**
   * Get ec2InstanceTypes
   * @return ec2InstanceTypes
   */
  @javax.annotation.Nonnull
  public List getEc2InstanceTypes() {
    return ec2InstanceTypes;
  }

  public void setEc2InstanceTypes(List ec2InstanceTypes) {
    this.ec2InstanceTypes = ec2InstanceTypes;
  }


  public StreamConfigurationCreate maxSessionLengthInMinutes(Integer maxSessionLengthInMinutes) {
    this.maxSessionLengthInMinutes = maxSessionLengthInMinutes;
    return this;
  }

  /**
   * Get maxSessionLengthInMinutes
   * @return maxSessionLengthInMinutes
   */
  @javax.annotation.Nullable
  public Integer getMaxSessionLengthInMinutes() {
    return maxSessionLengthInMinutes;
  }

  public void setMaxSessionLengthInMinutes(Integer maxSessionLengthInMinutes) {
    this.maxSessionLengthInMinutes = maxSessionLengthInMinutes;
  }


  public StreamConfigurationCreate maxStoppedSessionLengthInMinutes(Integer maxStoppedSessionLengthInMinutes) {
    this.maxStoppedSessionLengthInMinutes = maxStoppedSessionLengthInMinutes;
    return this;
  }

  /**
   * Get maxStoppedSessionLengthInMinutes
   * @return maxStoppedSessionLengthInMinutes
   */
  @javax.annotation.Nullable
  public Integer getMaxStoppedSessionLengthInMinutes() {
    return maxStoppedSessionLengthInMinutes;
  }

  public void setMaxStoppedSessionLengthInMinutes(Integer maxStoppedSessionLengthInMinutes) {
    this.maxStoppedSessionLengthInMinutes = maxStoppedSessionLengthInMinutes;
  }


  public StreamConfigurationCreate sessionBackup(CreateLaunchProfileRequestStreamConfigurationSessionBackup sessionBackup) {
    this.sessionBackup = sessionBackup;
    return this;
  }

  /**
   * Get sessionBackup
   * @return sessionBackup
   */
  @javax.annotation.Nullable
  public CreateLaunchProfileRequestStreamConfigurationSessionBackup getSessionBackup() {
    return sessionBackup;
  }

  public void setSessionBackup(CreateLaunchProfileRequestStreamConfigurationSessionBackup sessionBackup) {
    this.sessionBackup = sessionBackup;
  }


  public StreamConfigurationCreate sessionPersistenceMode(SessionPersistenceMode sessionPersistenceMode) {
    this.sessionPersistenceMode = sessionPersistenceMode;
    return this;
  }

  /**
   * Get sessionPersistenceMode
   * @return sessionPersistenceMode
   */
  @javax.annotation.Nullable
  public SessionPersistenceMode getSessionPersistenceMode() {
    return sessionPersistenceMode;
  }

  public void setSessionPersistenceMode(SessionPersistenceMode sessionPersistenceMode) {
    this.sessionPersistenceMode = sessionPersistenceMode;
  }


  public StreamConfigurationCreate sessionStorage(CreateLaunchProfileRequestStreamConfigurationSessionStorage sessionStorage) {
    this.sessionStorage = sessionStorage;
    return this;
  }

  /**
   * Get sessionStorage
   * @return sessionStorage
   */
  @javax.annotation.Nullable
  public CreateLaunchProfileRequestStreamConfigurationSessionStorage getSessionStorage() {
    return sessionStorage;
  }

  public void setSessionStorage(CreateLaunchProfileRequestStreamConfigurationSessionStorage sessionStorage) {
    this.sessionStorage = sessionStorage;
  }


  public StreamConfigurationCreate streamingImageIds(List streamingImageIds) {
    this.streamingImageIds = streamingImageIds;
    return this;
  }

  /**
   * Get streamingImageIds
   * @return streamingImageIds
   */
  @javax.annotation.Nonnull
  public List getStreamingImageIds() {
    return streamingImageIds;
  }

  public void setStreamingImageIds(List streamingImageIds) {
    this.streamingImageIds = streamingImageIds;
  }


  public StreamConfigurationCreate volumeConfiguration(CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration volumeConfiguration) {
    this.volumeConfiguration = volumeConfiguration;
    return this;
  }

  /**
   * Get volumeConfiguration
   * @return volumeConfiguration
   */
  @javax.annotation.Nullable
  public CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration getVolumeConfiguration() {
    return volumeConfiguration;
  }

  public void setVolumeConfiguration(CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration volumeConfiguration) {
    this.volumeConfiguration = volumeConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamConfigurationCreate streamConfigurationCreate = (StreamConfigurationCreate) o;
    return Objects.equals(this.automaticTerminationMode, streamConfigurationCreate.automaticTerminationMode) &&
        Objects.equals(this.clipboardMode, streamConfigurationCreate.clipboardMode) &&
        Objects.equals(this.ec2InstanceTypes, streamConfigurationCreate.ec2InstanceTypes) &&
        Objects.equals(this.maxSessionLengthInMinutes, streamConfigurationCreate.maxSessionLengthInMinutes) &&
        Objects.equals(this.maxStoppedSessionLengthInMinutes, streamConfigurationCreate.maxStoppedSessionLengthInMinutes) &&
        Objects.equals(this.sessionBackup, streamConfigurationCreate.sessionBackup) &&
        Objects.equals(this.sessionPersistenceMode, streamConfigurationCreate.sessionPersistenceMode) &&
        Objects.equals(this.sessionStorage, streamConfigurationCreate.sessionStorage) &&
        Objects.equals(this.streamingImageIds, streamConfigurationCreate.streamingImageIds) &&
        Objects.equals(this.volumeConfiguration, streamConfigurationCreate.volumeConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticTerminationMode, clipboardMode, ec2InstanceTypes, maxSessionLengthInMinutes, maxStoppedSessionLengthInMinutes, sessionBackup, sessionPersistenceMode, sessionStorage, streamingImageIds, volumeConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamConfigurationCreate {\n");
    sb.append("    automaticTerminationMode: ").append(toIndentedString(automaticTerminationMode)).append("\n");
    sb.append("    clipboardMode: ").append(toIndentedString(clipboardMode)).append("\n");
    sb.append("    ec2InstanceTypes: ").append(toIndentedString(ec2InstanceTypes)).append("\n");
    sb.append("    maxSessionLengthInMinutes: ").append(toIndentedString(maxSessionLengthInMinutes)).append("\n");
    sb.append("    maxStoppedSessionLengthInMinutes: ").append(toIndentedString(maxStoppedSessionLengthInMinutes)).append("\n");
    sb.append("    sessionBackup: ").append(toIndentedString(sessionBackup)).append("\n");
    sb.append("    sessionPersistenceMode: ").append(toIndentedString(sessionPersistenceMode)).append("\n");
    sb.append("    sessionStorage: ").append(toIndentedString(sessionStorage)).append("\n");
    sb.append("    streamingImageIds: ").append(toIndentedString(streamingImageIds)).append("\n");
    sb.append("    volumeConfiguration: ").append(toIndentedString(volumeConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automaticTerminationMode");
    openapiFields.add("clipboardMode");
    openapiFields.add("ec2InstanceTypes");
    openapiFields.add("maxSessionLengthInMinutes");
    openapiFields.add("maxStoppedSessionLengthInMinutes");
    openapiFields.add("sessionBackup");
    openapiFields.add("sessionPersistenceMode");
    openapiFields.add("sessionStorage");
    openapiFields.add("streamingImageIds");
    openapiFields.add("volumeConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clipboardMode");
    openapiRequiredFields.add("ec2InstanceTypes");
    openapiRequiredFields.add("streamingImageIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamConfigurationCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamConfigurationCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamConfigurationCreate is not found in the empty JSON string", StreamConfigurationCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamConfigurationCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamConfigurationCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamConfigurationCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `automaticTerminationMode`
      if (jsonObj.get("automaticTerminationMode") != null && !jsonObj.get("automaticTerminationMode").isJsonNull()) {
        AutomaticTerminationMode.validateJsonElement(jsonObj.get("automaticTerminationMode"));
      }
      // validate the required field `clipboardMode`
      StreamingClipboardMode.validateJsonElement(jsonObj.get("clipboardMode"));
      // validate the required field `ec2InstanceTypes`
      List.validateJsonElement(jsonObj.get("ec2InstanceTypes"));
      // validate the optional field `maxSessionLengthInMinutes`
      if (jsonObj.get("maxSessionLengthInMinutes") != null && !jsonObj.get("maxSessionLengthInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxSessionLengthInMinutes"));
      }
      // validate the optional field `maxStoppedSessionLengthInMinutes`
      if (jsonObj.get("maxStoppedSessionLengthInMinutes") != null && !jsonObj.get("maxStoppedSessionLengthInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxStoppedSessionLengthInMinutes"));
      }
      // validate the optional field `sessionBackup`
      if (jsonObj.get("sessionBackup") != null && !jsonObj.get("sessionBackup").isJsonNull()) {
        CreateLaunchProfileRequestStreamConfigurationSessionBackup.validateJsonElement(jsonObj.get("sessionBackup"));
      }
      // validate the optional field `sessionPersistenceMode`
      if (jsonObj.get("sessionPersistenceMode") != null && !jsonObj.get("sessionPersistenceMode").isJsonNull()) {
        SessionPersistenceMode.validateJsonElement(jsonObj.get("sessionPersistenceMode"));
      }
      // validate the optional field `sessionStorage`
      if (jsonObj.get("sessionStorage") != null && !jsonObj.get("sessionStorage").isJsonNull()) {
        CreateLaunchProfileRequestStreamConfigurationSessionStorage.validateJsonElement(jsonObj.get("sessionStorage"));
      }
      // validate the required field `streamingImageIds`
      List.validateJsonElement(jsonObj.get("streamingImageIds"));
      // validate the optional field `volumeConfiguration`
      if (jsonObj.get("volumeConfiguration") != null && !jsonObj.get("volumeConfiguration").isJsonNull()) {
        CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration.validateJsonElement(jsonObj.get("volumeConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamConfigurationCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamConfigurationCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamConfigurationCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamConfigurationCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamConfigurationCreate>() {
           @Override
           public void write(JsonWriter out, StreamConfigurationCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamConfigurationCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamConfigurationCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamConfigurationCreate
   * @throws IOException if the JSON string is invalid with respect to StreamConfigurationCreate
   */
  public static StreamConfigurationCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamConfigurationCreate.class);
  }

  /**
   * Convert an instance of StreamConfigurationCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

