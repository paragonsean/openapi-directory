/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AutomaticTerminationMode;
import org.openapitools.client.model.CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration;
import org.openapitools.client.model.SessionBackupMode;
import org.openapitools.client.model.SessionPersistenceMode;
import org.openapitools.client.model.StreamingSessionState;
import org.openapitools.client.model.StreamingSessionStatusCode;
import org.openapitools.client.model.VolumeRetentionMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A streaming session is a virtual workstation created using a particular launch profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamingSession {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_AUTOMATIC_TERMINATION_MODE = "automaticTerminationMode";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_TERMINATION_MODE)
  private AutomaticTerminationMode automaticTerminationMode;

  public static final String SERIALIZED_NAME_BACKUP_MODE = "backupMode";
  @SerializedName(SERIALIZED_NAME_BACKUP_MODE)
  private SessionBackupMode backupMode;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_EC2_INSTANCE_TYPE = "ec2InstanceType";
  @SerializedName(SERIALIZED_NAME_EC2_INSTANCE_TYPE)
  private String ec2InstanceType;

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_ID = "launchProfileId";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_ID)
  private String launchProfileId;

  public static final String SERIALIZED_NAME_MAX_BACKUPS_TO_RETAIN = "maxBackupsToRetain";
  @SerializedName(SERIALIZED_NAME_MAX_BACKUPS_TO_RETAIN)
  private Integer maxBackupsToRetain;

  public static final String SERIALIZED_NAME_OWNED_BY = "ownedBy";
  @SerializedName(SERIALIZED_NAME_OWNED_BY)
  private String ownedBy;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SESSION_PERSISTENCE_MODE = "sessionPersistenceMode";
  @SerializedName(SERIALIZED_NAME_SESSION_PERSISTENCE_MODE)
  private SessionPersistenceMode sessionPersistenceMode;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_STARTED_BY = "startedBy";
  @SerializedName(SERIALIZED_NAME_STARTED_BY)
  private String startedBy;

  public static final String SERIALIZED_NAME_STARTED_FROM_BACKUP_ID = "startedFromBackupId";
  @SerializedName(SERIALIZED_NAME_STARTED_FROM_BACKUP_ID)
  private String startedFromBackupId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StreamingSessionState state;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StreamingSessionStatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_STOP_AT = "stopAt";
  @SerializedName(SERIALIZED_NAME_STOP_AT)
  private OffsetDateTime stopAt;

  public static final String SERIALIZED_NAME_STOPPED_AT = "stoppedAt";
  @SerializedName(SERIALIZED_NAME_STOPPED_AT)
  private OffsetDateTime stoppedAt;

  public static final String SERIALIZED_NAME_STOPPED_BY = "stoppedBy";
  @SerializedName(SERIALIZED_NAME_STOPPED_BY)
  private String stoppedBy;

  public static final String SERIALIZED_NAME_STREAMING_IMAGE_ID = "streamingImageId";
  @SerializedName(SERIALIZED_NAME_STREAMING_IMAGE_ID)
  private String streamingImageId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TERMINATE_AT = "terminateAt";
  @SerializedName(SERIALIZED_NAME_TERMINATE_AT)
  private OffsetDateTime terminateAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_VOLUME_CONFIGURATION = "volumeConfiguration";
  @SerializedName(SERIALIZED_NAME_VOLUME_CONFIGURATION)
  private CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration volumeConfiguration;

  public static final String SERIALIZED_NAME_VOLUME_RETENTION_MODE = "volumeRetentionMode";
  @SerializedName(SERIALIZED_NAME_VOLUME_RETENTION_MODE)
  private VolumeRetentionMode volumeRetentionMode;

  public StreamingSession() {
  }

  public StreamingSession arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public StreamingSession automaticTerminationMode(AutomaticTerminationMode automaticTerminationMode) {
    this.automaticTerminationMode = automaticTerminationMode;
    return this;
  }

  /**
   * Get automaticTerminationMode
   * @return automaticTerminationMode
   */
  @javax.annotation.Nullable
  public AutomaticTerminationMode getAutomaticTerminationMode() {
    return automaticTerminationMode;
  }

  public void setAutomaticTerminationMode(AutomaticTerminationMode automaticTerminationMode) {
    this.automaticTerminationMode = automaticTerminationMode;
  }


  public StreamingSession backupMode(SessionBackupMode backupMode) {
    this.backupMode = backupMode;
    return this;
  }

  /**
   * Get backupMode
   * @return backupMode
   */
  @javax.annotation.Nullable
  public SessionBackupMode getBackupMode() {
    return backupMode;
  }

  public void setBackupMode(SessionBackupMode backupMode) {
    this.backupMode = backupMode;
  }


  public StreamingSession createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public StreamingSession createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public StreamingSession ec2InstanceType(String ec2InstanceType) {
    this.ec2InstanceType = ec2InstanceType;
    return this;
  }

  /**
   * Get ec2InstanceType
   * @return ec2InstanceType
   */
  @javax.annotation.Nullable
  public String getEc2InstanceType() {
    return ec2InstanceType;
  }

  public void setEc2InstanceType(String ec2InstanceType) {
    this.ec2InstanceType = ec2InstanceType;
  }


  public StreamingSession launchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
    return this;
  }

  /**
   * Get launchProfileId
   * @return launchProfileId
   */
  @javax.annotation.Nullable
  public String getLaunchProfileId() {
    return launchProfileId;
  }

  public void setLaunchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
  }


  public StreamingSession maxBackupsToRetain(Integer maxBackupsToRetain) {
    this.maxBackupsToRetain = maxBackupsToRetain;
    return this;
  }

  /**
   * Get maxBackupsToRetain
   * @return maxBackupsToRetain
   */
  @javax.annotation.Nullable
  public Integer getMaxBackupsToRetain() {
    return maxBackupsToRetain;
  }

  public void setMaxBackupsToRetain(Integer maxBackupsToRetain) {
    this.maxBackupsToRetain = maxBackupsToRetain;
  }


  public StreamingSession ownedBy(String ownedBy) {
    this.ownedBy = ownedBy;
    return this;
  }

  /**
   * Get ownedBy
   * @return ownedBy
   */
  @javax.annotation.Nullable
  public String getOwnedBy() {
    return ownedBy;
  }

  public void setOwnedBy(String ownedBy) {
    this.ownedBy = ownedBy;
  }


  public StreamingSession sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public StreamingSession sessionPersistenceMode(SessionPersistenceMode sessionPersistenceMode) {
    this.sessionPersistenceMode = sessionPersistenceMode;
    return this;
  }

  /**
   * Get sessionPersistenceMode
   * @return sessionPersistenceMode
   */
  @javax.annotation.Nullable
  public SessionPersistenceMode getSessionPersistenceMode() {
    return sessionPersistenceMode;
  }

  public void setSessionPersistenceMode(SessionPersistenceMode sessionPersistenceMode) {
    this.sessionPersistenceMode = sessionPersistenceMode;
  }


  public StreamingSession startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Get startedAt
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public StreamingSession startedBy(String startedBy) {
    this.startedBy = startedBy;
    return this;
  }

  /**
   * Get startedBy
   * @return startedBy
   */
  @javax.annotation.Nullable
  public String getStartedBy() {
    return startedBy;
  }

  public void setStartedBy(String startedBy) {
    this.startedBy = startedBy;
  }


  public StreamingSession startedFromBackupId(String startedFromBackupId) {
    this.startedFromBackupId = startedFromBackupId;
    return this;
  }

  /**
   * Get startedFromBackupId
   * @return startedFromBackupId
   */
  @javax.annotation.Nullable
  public String getStartedFromBackupId() {
    return startedFromBackupId;
  }

  public void setStartedFromBackupId(String startedFromBackupId) {
    this.startedFromBackupId = startedFromBackupId;
  }


  public StreamingSession state(StreamingSessionState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StreamingSessionState getState() {
    return state;
  }

  public void setState(StreamingSessionState state) {
    this.state = state;
  }


  public StreamingSession statusCode(StreamingSessionStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StreamingSessionStatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StreamingSessionStatusCode statusCode) {
    this.statusCode = statusCode;
  }


  public StreamingSession statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public StreamingSession stopAt(OffsetDateTime stopAt) {
    this.stopAt = stopAt;
    return this;
  }

  /**
   * Get stopAt
   * @return stopAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopAt() {
    return stopAt;
  }

  public void setStopAt(OffsetDateTime stopAt) {
    this.stopAt = stopAt;
  }


  public StreamingSession stoppedAt(OffsetDateTime stoppedAt) {
    this.stoppedAt = stoppedAt;
    return this;
  }

  /**
   * Get stoppedAt
   * @return stoppedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStoppedAt() {
    return stoppedAt;
  }

  public void setStoppedAt(OffsetDateTime stoppedAt) {
    this.stoppedAt = stoppedAt;
  }


  public StreamingSession stoppedBy(String stoppedBy) {
    this.stoppedBy = stoppedBy;
    return this;
  }

  /**
   * Get stoppedBy
   * @return stoppedBy
   */
  @javax.annotation.Nullable
  public String getStoppedBy() {
    return stoppedBy;
  }

  public void setStoppedBy(String stoppedBy) {
    this.stoppedBy = stoppedBy;
  }


  public StreamingSession streamingImageId(String streamingImageId) {
    this.streamingImageId = streamingImageId;
    return this;
  }

  /**
   * Get streamingImageId
   * @return streamingImageId
   */
  @javax.annotation.Nullable
  public String getStreamingImageId() {
    return streamingImageId;
  }

  public void setStreamingImageId(String streamingImageId) {
    this.streamingImageId = streamingImageId;
  }


  public StreamingSession tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public StreamingSession terminateAt(OffsetDateTime terminateAt) {
    this.terminateAt = terminateAt;
    return this;
  }

  /**
   * Get terminateAt
   * @return terminateAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTerminateAt() {
    return terminateAt;
  }

  public void setTerminateAt(OffsetDateTime terminateAt) {
    this.terminateAt = terminateAt;
  }


  public StreamingSession updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public StreamingSession updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public StreamingSession volumeConfiguration(CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration volumeConfiguration) {
    this.volumeConfiguration = volumeConfiguration;
    return this;
  }

  /**
   * Get volumeConfiguration
   * @return volumeConfiguration
   */
  @javax.annotation.Nullable
  public CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration getVolumeConfiguration() {
    return volumeConfiguration;
  }

  public void setVolumeConfiguration(CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration volumeConfiguration) {
    this.volumeConfiguration = volumeConfiguration;
  }


  public StreamingSession volumeRetentionMode(VolumeRetentionMode volumeRetentionMode) {
    this.volumeRetentionMode = volumeRetentionMode;
    return this;
  }

  /**
   * Get volumeRetentionMode
   * @return volumeRetentionMode
   */
  @javax.annotation.Nullable
  public VolumeRetentionMode getVolumeRetentionMode() {
    return volumeRetentionMode;
  }

  public void setVolumeRetentionMode(VolumeRetentionMode volumeRetentionMode) {
    this.volumeRetentionMode = volumeRetentionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamingSession streamingSession = (StreamingSession) o;
    return Objects.equals(this.arn, streamingSession.arn) &&
        Objects.equals(this.automaticTerminationMode, streamingSession.automaticTerminationMode) &&
        Objects.equals(this.backupMode, streamingSession.backupMode) &&
        Objects.equals(this.createdAt, streamingSession.createdAt) &&
        Objects.equals(this.createdBy, streamingSession.createdBy) &&
        Objects.equals(this.ec2InstanceType, streamingSession.ec2InstanceType) &&
        Objects.equals(this.launchProfileId, streamingSession.launchProfileId) &&
        Objects.equals(this.maxBackupsToRetain, streamingSession.maxBackupsToRetain) &&
        Objects.equals(this.ownedBy, streamingSession.ownedBy) &&
        Objects.equals(this.sessionId, streamingSession.sessionId) &&
        Objects.equals(this.sessionPersistenceMode, streamingSession.sessionPersistenceMode) &&
        Objects.equals(this.startedAt, streamingSession.startedAt) &&
        Objects.equals(this.startedBy, streamingSession.startedBy) &&
        Objects.equals(this.startedFromBackupId, streamingSession.startedFromBackupId) &&
        Objects.equals(this.state, streamingSession.state) &&
        Objects.equals(this.statusCode, streamingSession.statusCode) &&
        Objects.equals(this.statusMessage, streamingSession.statusMessage) &&
        Objects.equals(this.stopAt, streamingSession.stopAt) &&
        Objects.equals(this.stoppedAt, streamingSession.stoppedAt) &&
        Objects.equals(this.stoppedBy, streamingSession.stoppedBy) &&
        Objects.equals(this.streamingImageId, streamingSession.streamingImageId) &&
        Objects.equals(this.tags, streamingSession.tags) &&
        Objects.equals(this.terminateAt, streamingSession.terminateAt) &&
        Objects.equals(this.updatedAt, streamingSession.updatedAt) &&
        Objects.equals(this.updatedBy, streamingSession.updatedBy) &&
        Objects.equals(this.volumeConfiguration, streamingSession.volumeConfiguration) &&
        Objects.equals(this.volumeRetentionMode, streamingSession.volumeRetentionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, automaticTerminationMode, backupMode, createdAt, createdBy, ec2InstanceType, launchProfileId, maxBackupsToRetain, ownedBy, sessionId, sessionPersistenceMode, startedAt, startedBy, startedFromBackupId, state, statusCode, statusMessage, stopAt, stoppedAt, stoppedBy, streamingImageId, tags, terminateAt, updatedAt, updatedBy, volumeConfiguration, volumeRetentionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamingSession {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    automaticTerminationMode: ").append(toIndentedString(automaticTerminationMode)).append("\n");
    sb.append("    backupMode: ").append(toIndentedString(backupMode)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    ec2InstanceType: ").append(toIndentedString(ec2InstanceType)).append("\n");
    sb.append("    launchProfileId: ").append(toIndentedString(launchProfileId)).append("\n");
    sb.append("    maxBackupsToRetain: ").append(toIndentedString(maxBackupsToRetain)).append("\n");
    sb.append("    ownedBy: ").append(toIndentedString(ownedBy)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    sessionPersistenceMode: ").append(toIndentedString(sessionPersistenceMode)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    startedBy: ").append(toIndentedString(startedBy)).append("\n");
    sb.append("    startedFromBackupId: ").append(toIndentedString(startedFromBackupId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    stopAt: ").append(toIndentedString(stopAt)).append("\n");
    sb.append("    stoppedAt: ").append(toIndentedString(stoppedAt)).append("\n");
    sb.append("    stoppedBy: ").append(toIndentedString(stoppedBy)).append("\n");
    sb.append("    streamingImageId: ").append(toIndentedString(streamingImageId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    terminateAt: ").append(toIndentedString(terminateAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    volumeConfiguration: ").append(toIndentedString(volumeConfiguration)).append("\n");
    sb.append("    volumeRetentionMode: ").append(toIndentedString(volumeRetentionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("automaticTerminationMode");
    openapiFields.add("backupMode");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("ec2InstanceType");
    openapiFields.add("launchProfileId");
    openapiFields.add("maxBackupsToRetain");
    openapiFields.add("ownedBy");
    openapiFields.add("sessionId");
    openapiFields.add("sessionPersistenceMode");
    openapiFields.add("startedAt");
    openapiFields.add("startedBy");
    openapiFields.add("startedFromBackupId");
    openapiFields.add("state");
    openapiFields.add("statusCode");
    openapiFields.add("statusMessage");
    openapiFields.add("stopAt");
    openapiFields.add("stoppedAt");
    openapiFields.add("stoppedBy");
    openapiFields.add("streamingImageId");
    openapiFields.add("tags");
    openapiFields.add("terminateAt");
    openapiFields.add("updatedAt");
    openapiFields.add("updatedBy");
    openapiFields.add("volumeConfiguration");
    openapiFields.add("volumeRetentionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamingSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamingSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamingSession is not found in the empty JSON string", StreamingSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamingSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamingSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `automaticTerminationMode`
      if (jsonObj.get("automaticTerminationMode") != null && !jsonObj.get("automaticTerminationMode").isJsonNull()) {
        AutomaticTerminationMode.validateJsonElement(jsonObj.get("automaticTerminationMode"));
      }
      // validate the optional field `backupMode`
      if (jsonObj.get("backupMode") != null && !jsonObj.get("backupMode").isJsonNull()) {
        SessionBackupMode.validateJsonElement(jsonObj.get("backupMode"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `ec2InstanceType`
      if (jsonObj.get("ec2InstanceType") != null && !jsonObj.get("ec2InstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2InstanceType"));
      }
      // validate the optional field `launchProfileId`
      if (jsonObj.get("launchProfileId") != null && !jsonObj.get("launchProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("launchProfileId"));
      }
      // validate the optional field `maxBackupsToRetain`
      if (jsonObj.get("maxBackupsToRetain") != null && !jsonObj.get("maxBackupsToRetain").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxBackupsToRetain"));
      }
      // validate the optional field `ownedBy`
      if (jsonObj.get("ownedBy") != null && !jsonObj.get("ownedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ownedBy"));
      }
      // validate the optional field `sessionId`
      if (jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sessionId"));
      }
      // validate the optional field `sessionPersistenceMode`
      if (jsonObj.get("sessionPersistenceMode") != null && !jsonObj.get("sessionPersistenceMode").isJsonNull()) {
        SessionPersistenceMode.validateJsonElement(jsonObj.get("sessionPersistenceMode"));
      }
      // validate the optional field `startedAt`
      if (jsonObj.get("startedAt") != null && !jsonObj.get("startedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startedAt"));
      }
      // validate the optional field `startedBy`
      if (jsonObj.get("startedBy") != null && !jsonObj.get("startedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("startedBy"));
      }
      // validate the optional field `startedFromBackupId`
      if (jsonObj.get("startedFromBackupId") != null && !jsonObj.get("startedFromBackupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("startedFromBackupId"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StreamingSessionState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        StreamingSessionStatusCode.validateJsonElement(jsonObj.get("statusCode"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `stopAt`
      if (jsonObj.get("stopAt") != null && !jsonObj.get("stopAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopAt"));
      }
      // validate the optional field `stoppedAt`
      if (jsonObj.get("stoppedAt") != null && !jsonObj.get("stoppedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stoppedAt"));
      }
      // validate the optional field `stoppedBy`
      if (jsonObj.get("stoppedBy") != null && !jsonObj.get("stoppedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stoppedBy"));
      }
      // validate the optional field `streamingImageId`
      if (jsonObj.get("streamingImageId") != null && !jsonObj.get("streamingImageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("streamingImageId"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `terminateAt`
      if (jsonObj.get("terminateAt") != null && !jsonObj.get("terminateAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("terminateAt"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
      // validate the optional field `updatedBy`
      if (jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("updatedBy"));
      }
      // validate the optional field `volumeConfiguration`
      if (jsonObj.get("volumeConfiguration") != null && !jsonObj.get("volumeConfiguration").isJsonNull()) {
        CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration.validateJsonElement(jsonObj.get("volumeConfiguration"));
      }
      // validate the optional field `volumeRetentionMode`
      if (jsonObj.get("volumeRetentionMode") != null && !jsonObj.get("volumeRetentionMode").isJsonNull()) {
        VolumeRetentionMode.validateJsonElement(jsonObj.get("volumeRetentionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamingSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamingSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamingSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamingSession.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamingSession>() {
           @Override
           public void write(JsonWriter out, StreamingSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamingSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamingSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamingSession
   * @throws IOException if the JSON string is invalid with respect to StreamingSession
   */
  public static StreamingSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamingSession.class);
  }

  /**
   * Convert an instance of StreamingSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

