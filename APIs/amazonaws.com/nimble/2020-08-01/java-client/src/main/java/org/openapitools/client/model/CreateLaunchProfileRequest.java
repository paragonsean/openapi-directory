/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateLaunchProfileRequestStreamConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLaunchProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLaunchProfileRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EC2_SUBNET_IDS = "ec2SubnetIds";
  @SerializedName(SERIALIZED_NAME_EC2_SUBNET_IDS)
  private List<String> ec2SubnetIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_PROTOCOL_VERSIONS = "launchProfileProtocolVersions";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_PROTOCOL_VERSIONS)
  private List<String> launchProfileProtocolVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STREAM_CONFIGURATION = "streamConfiguration";
  @SerializedName(SERIALIZED_NAME_STREAM_CONFIGURATION)
  private CreateLaunchProfileRequestStreamConfiguration streamConfiguration;

  public static final String SERIALIZED_NAME_STUDIO_COMPONENT_IDS = "studioComponentIds";
  @SerializedName(SERIALIZED_NAME_STUDIO_COMPONENT_IDS)
  private List<String> studioComponentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateLaunchProfileRequest() {
  }

  public CreateLaunchProfileRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human-readable description of the launch profile.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateLaunchProfileRequest ec2SubnetIds(List<String> ec2SubnetIds) {
    this.ec2SubnetIds = ec2SubnetIds;
    return this;
  }

  public CreateLaunchProfileRequest addEc2SubnetIdsItem(String ec2SubnetIdsItem) {
    if (this.ec2SubnetIds == null) {
      this.ec2SubnetIds = new ArrayList<>();
    }
    this.ec2SubnetIds.add(ec2SubnetIdsItem);
    return this;
  }

  /**
   * Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. 
   * @return ec2SubnetIds
   */
  @javax.annotation.Nonnull
  public List<String> getEc2SubnetIds() {
    return ec2SubnetIds;
  }

  public void setEc2SubnetIds(List<String> ec2SubnetIds) {
    this.ec2SubnetIds = ec2SubnetIds;
  }


  public CreateLaunchProfileRequest launchProfileProtocolVersions(List<String> launchProfileProtocolVersions) {
    this.launchProfileProtocolVersions = launchProfileProtocolVersions;
    return this;
  }

  public CreateLaunchProfileRequest addLaunchProfileProtocolVersionsItem(String launchProfileProtocolVersionsItem) {
    if (this.launchProfileProtocolVersions == null) {
      this.launchProfileProtocolVersions = new ArrayList<>();
    }
    this.launchProfileProtocolVersions.add(launchProfileProtocolVersionsItem);
    return this;
  }

  /**
   * The version number of the protocol that is used by the launch profile. The only valid version is \&quot;2021-03-31\&quot;.
   * @return launchProfileProtocolVersions
   */
  @javax.annotation.Nonnull
  public List<String> getLaunchProfileProtocolVersions() {
    return launchProfileProtocolVersions;
  }

  public void setLaunchProfileProtocolVersions(List<String> launchProfileProtocolVersions) {
    this.launchProfileProtocolVersions = launchProfileProtocolVersions;
  }


  public CreateLaunchProfileRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the launch profile.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateLaunchProfileRequest streamConfiguration(CreateLaunchProfileRequestStreamConfiguration streamConfiguration) {
    this.streamConfiguration = streamConfiguration;
    return this;
  }

  /**
   * Get streamConfiguration
   * @return streamConfiguration
   */
  @javax.annotation.Nonnull
  public CreateLaunchProfileRequestStreamConfiguration getStreamConfiguration() {
    return streamConfiguration;
  }

  public void setStreamConfiguration(CreateLaunchProfileRequestStreamConfiguration streamConfiguration) {
    this.streamConfiguration = streamConfiguration;
  }


  public CreateLaunchProfileRequest studioComponentIds(List<String> studioComponentIds) {
    this.studioComponentIds = studioComponentIds;
    return this;
  }

  public CreateLaunchProfileRequest addStudioComponentIdsItem(String studioComponentIdsItem) {
    if (this.studioComponentIds == null) {
      this.studioComponentIds = new ArrayList<>();
    }
    this.studioComponentIds.add(studioComponentIdsItem);
    return this;
  }

  /**
   * Unique identifiers for a collection of studio components that can be used with this launch profile.
   * @return studioComponentIds
   */
  @javax.annotation.Nonnull
  public List<String> getStudioComponentIds() {
    return studioComponentIds;
  }

  public void setStudioComponentIds(List<String> studioComponentIds) {
    this.studioComponentIds = studioComponentIds;
  }


  public CreateLaunchProfileRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateLaunchProfileRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of labels, in the form of key-value pairs, that apply to this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLaunchProfileRequest createLaunchProfileRequest = (CreateLaunchProfileRequest) o;
    return Objects.equals(this.description, createLaunchProfileRequest.description) &&
        Objects.equals(this.ec2SubnetIds, createLaunchProfileRequest.ec2SubnetIds) &&
        Objects.equals(this.launchProfileProtocolVersions, createLaunchProfileRequest.launchProfileProtocolVersions) &&
        Objects.equals(this.name, createLaunchProfileRequest.name) &&
        Objects.equals(this.streamConfiguration, createLaunchProfileRequest.streamConfiguration) &&
        Objects.equals(this.studioComponentIds, createLaunchProfileRequest.studioComponentIds) &&
        Objects.equals(this.tags, createLaunchProfileRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, ec2SubnetIds, launchProfileProtocolVersions, name, streamConfiguration, studioComponentIds, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLaunchProfileRequest {\n");
    sb.append("    description: ").append("*").append("\n");
    sb.append("    ec2SubnetIds: ").append(toIndentedString(ec2SubnetIds)).append("\n");
    sb.append("    launchProfileProtocolVersions: ").append(toIndentedString(launchProfileProtocolVersions)).append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    streamConfiguration: ").append(toIndentedString(streamConfiguration)).append("\n");
    sb.append("    studioComponentIds: ").append(toIndentedString(studioComponentIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("ec2SubnetIds");
    openapiFields.add("launchProfileProtocolVersions");
    openapiFields.add("name");
    openapiFields.add("streamConfiguration");
    openapiFields.add("studioComponentIds");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ec2SubnetIds");
    openapiRequiredFields.add("launchProfileProtocolVersions");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("streamConfiguration");
    openapiRequiredFields.add("studioComponentIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLaunchProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLaunchProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLaunchProfileRequest is not found in the empty JSON string", CreateLaunchProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLaunchProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLaunchProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLaunchProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ec2SubnetIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ec2SubnetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ec2SubnetIds` to be an array in the JSON string but got `%s`", jsonObj.get("ec2SubnetIds").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("launchProfileProtocolVersions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("launchProfileProtocolVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchProfileProtocolVersions` to be an array in the JSON string but got `%s`", jsonObj.get("launchProfileProtocolVersions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `streamConfiguration`
      CreateLaunchProfileRequestStreamConfiguration.validateJsonElement(jsonObj.get("streamConfiguration"));
      // ensure the required json array is present
      if (jsonObj.get("studioComponentIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("studioComponentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `studioComponentIds` to be an array in the JSON string but got `%s`", jsonObj.get("studioComponentIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLaunchProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLaunchProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLaunchProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLaunchProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLaunchProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateLaunchProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLaunchProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLaunchProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLaunchProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLaunchProfileRequest
   */
  public static CreateLaunchProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLaunchProfileRequest.class);
  }

  /**
   * Convert an instance of CreateLaunchProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

