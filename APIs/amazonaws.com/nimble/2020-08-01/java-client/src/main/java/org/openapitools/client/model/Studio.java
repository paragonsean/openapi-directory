/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.StudioState;
import org.openapitools.client.model.StudioStatusCode;
import org.openapitools.client.model.StudioStudioEncryptionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Represents a studio resource.&lt;/p&gt; &lt;p&gt;A studio is the core resource used with Nimble Studio. You must create a studio first, before any other resource type can be created. All other resources you create and manage in Nimble Studio are contained within a studio.&lt;/p&gt; &lt;p&gt;When creating a studio, you must provides two IAM roles for use with the Nimble Studio portal. These roles are assumed by your users when they log in to the Nimble Studio portal via IAM Identity Center and your identity source.&lt;/p&gt; &lt;p&gt;The user role must have the &lt;code&gt;AmazonNimbleStudio-StudioUser&lt;/code&gt; managed policy attached for the portal to function properly.&lt;/p&gt; &lt;p&gt;The admin role must have the &lt;code&gt;AmazonNimbleStudio-StudioAdmin&lt;/code&gt; managed policy attached for the portal to function properly.&lt;/p&gt; &lt;p&gt;Your studio roles must trust the &lt;code&gt;identity.nimble.amazonaws.com&lt;/code&gt; service principal to function properly.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Studio {
  public static final String SERIALIZED_NAME_ADMIN_ROLE_ARN = "adminRoleArn";
  @SerializedName(SERIALIZED_NAME_ADMIN_ROLE_ARN)
  private String adminRoleArn;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HOME_REGION = "homeRegion";
  @SerializedName(SERIALIZED_NAME_HOME_REGION)
  private String homeRegion;

  public static final String SERIALIZED_NAME_SSO_CLIENT_ID = "ssoClientId";
  @SerializedName(SERIALIZED_NAME_SSO_CLIENT_ID)
  private String ssoClientId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StudioState state;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StudioStatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_STUDIO_ENCRYPTION_CONFIGURATION = "studioEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_STUDIO_ENCRYPTION_CONFIGURATION)
  private StudioStudioEncryptionConfiguration studioEncryptionConfiguration;

  public static final String SERIALIZED_NAME_STUDIO_ID = "studioId";
  @SerializedName(SERIALIZED_NAME_STUDIO_ID)
  private String studioId;

  public static final String SERIALIZED_NAME_STUDIO_NAME = "studioName";
  @SerializedName(SERIALIZED_NAME_STUDIO_NAME)
  private String studioName;

  public static final String SERIALIZED_NAME_STUDIO_URL = "studioUrl";
  @SerializedName(SERIALIZED_NAME_STUDIO_URL)
  private String studioUrl;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_ROLE_ARN = "userRoleArn";
  @SerializedName(SERIALIZED_NAME_USER_ROLE_ARN)
  private String userRoleArn;

  public Studio() {
  }

  public Studio adminRoleArn(String adminRoleArn) {
    this.adminRoleArn = adminRoleArn;
    return this;
  }

  /**
   * Get adminRoleArn
   * @return adminRoleArn
   */
  @javax.annotation.Nullable
  public String getAdminRoleArn() {
    return adminRoleArn;
  }

  public void setAdminRoleArn(String adminRoleArn) {
    this.adminRoleArn = adminRoleArn;
  }


  public Studio arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Studio createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Studio displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Studio homeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
    return this;
  }

  /**
   * Get homeRegion
   * @return homeRegion
   */
  @javax.annotation.Nullable
  public String getHomeRegion() {
    return homeRegion;
  }

  public void setHomeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
  }


  public Studio ssoClientId(String ssoClientId) {
    this.ssoClientId = ssoClientId;
    return this;
  }

  /**
   * Get ssoClientId
   * @return ssoClientId
   */
  @javax.annotation.Nullable
  public String getSsoClientId() {
    return ssoClientId;
  }

  public void setSsoClientId(String ssoClientId) {
    this.ssoClientId = ssoClientId;
  }


  public Studio state(StudioState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StudioState getState() {
    return state;
  }

  public void setState(StudioState state) {
    this.state = state;
  }


  public Studio statusCode(StudioStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StudioStatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StudioStatusCode statusCode) {
    this.statusCode = statusCode;
  }


  public Studio statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public Studio studioEncryptionConfiguration(StudioStudioEncryptionConfiguration studioEncryptionConfiguration) {
    this.studioEncryptionConfiguration = studioEncryptionConfiguration;
    return this;
  }

  /**
   * Get studioEncryptionConfiguration
   * @return studioEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public StudioStudioEncryptionConfiguration getStudioEncryptionConfiguration() {
    return studioEncryptionConfiguration;
  }

  public void setStudioEncryptionConfiguration(StudioStudioEncryptionConfiguration studioEncryptionConfiguration) {
    this.studioEncryptionConfiguration = studioEncryptionConfiguration;
  }


  public Studio studioId(String studioId) {
    this.studioId = studioId;
    return this;
  }

  /**
   * Get studioId
   * @return studioId
   */
  @javax.annotation.Nullable
  public String getStudioId() {
    return studioId;
  }

  public void setStudioId(String studioId) {
    this.studioId = studioId;
  }


  public Studio studioName(String studioName) {
    this.studioName = studioName;
    return this;
  }

  /**
   * Get studioName
   * @return studioName
   */
  @javax.annotation.Nullable
  public String getStudioName() {
    return studioName;
  }

  public void setStudioName(String studioName) {
    this.studioName = studioName;
  }


  public Studio studioUrl(String studioUrl) {
    this.studioUrl = studioUrl;
    return this;
  }

  /**
   * Get studioUrl
   * @return studioUrl
   */
  @javax.annotation.Nullable
  public String getStudioUrl() {
    return studioUrl;
  }

  public void setStudioUrl(String studioUrl) {
    this.studioUrl = studioUrl;
  }


  public Studio tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public Studio updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Studio userRoleArn(String userRoleArn) {
    this.userRoleArn = userRoleArn;
    return this;
  }

  /**
   * Get userRoleArn
   * @return userRoleArn
   */
  @javax.annotation.Nullable
  public String getUserRoleArn() {
    return userRoleArn;
  }

  public void setUserRoleArn(String userRoleArn) {
    this.userRoleArn = userRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Studio studio = (Studio) o;
    return Objects.equals(this.adminRoleArn, studio.adminRoleArn) &&
        Objects.equals(this.arn, studio.arn) &&
        Objects.equals(this.createdAt, studio.createdAt) &&
        Objects.equals(this.displayName, studio.displayName) &&
        Objects.equals(this.homeRegion, studio.homeRegion) &&
        Objects.equals(this.ssoClientId, studio.ssoClientId) &&
        Objects.equals(this.state, studio.state) &&
        Objects.equals(this.statusCode, studio.statusCode) &&
        Objects.equals(this.statusMessage, studio.statusMessage) &&
        Objects.equals(this.studioEncryptionConfiguration, studio.studioEncryptionConfiguration) &&
        Objects.equals(this.studioId, studio.studioId) &&
        Objects.equals(this.studioName, studio.studioName) &&
        Objects.equals(this.studioUrl, studio.studioUrl) &&
        Objects.equals(this.tags, studio.tags) &&
        Objects.equals(this.updatedAt, studio.updatedAt) &&
        Objects.equals(this.userRoleArn, studio.userRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminRoleArn, arn, createdAt, displayName, homeRegion, ssoClientId, state, statusCode, statusMessage, studioEncryptionConfiguration, studioId, studioName, studioUrl, tags, updatedAt, userRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Studio {\n");
    sb.append("    adminRoleArn: ").append(toIndentedString(adminRoleArn)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    homeRegion: ").append(toIndentedString(homeRegion)).append("\n");
    sb.append("    ssoClientId: ").append(toIndentedString(ssoClientId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    studioEncryptionConfiguration: ").append(toIndentedString(studioEncryptionConfiguration)).append("\n");
    sb.append("    studioId: ").append(toIndentedString(studioId)).append("\n");
    sb.append("    studioName: ").append(toIndentedString(studioName)).append("\n");
    sb.append("    studioUrl: ").append(toIndentedString(studioUrl)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userRoleArn: ").append(toIndentedString(userRoleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminRoleArn");
    openapiFields.add("arn");
    openapiFields.add("createdAt");
    openapiFields.add("displayName");
    openapiFields.add("homeRegion");
    openapiFields.add("ssoClientId");
    openapiFields.add("state");
    openapiFields.add("statusCode");
    openapiFields.add("statusMessage");
    openapiFields.add("studioEncryptionConfiguration");
    openapiFields.add("studioId");
    openapiFields.add("studioName");
    openapiFields.add("studioUrl");
    openapiFields.add("tags");
    openapiFields.add("updatedAt");
    openapiFields.add("userRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Studio
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Studio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Studio is not found in the empty JSON string", Studio.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Studio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Studio` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adminRoleArn`
      if (jsonObj.get("adminRoleArn") != null && !jsonObj.get("adminRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("adminRoleArn"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `displayName`
      if (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("displayName"));
      }
      // validate the optional field `homeRegion`
      if (jsonObj.get("homeRegion") != null && !jsonObj.get("homeRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("homeRegion"));
      }
      // validate the optional field `ssoClientId`
      if (jsonObj.get("ssoClientId") != null && !jsonObj.get("ssoClientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ssoClientId"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StudioState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        StudioStatusCode.validateJsonElement(jsonObj.get("statusCode"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `studioEncryptionConfiguration`
      if (jsonObj.get("studioEncryptionConfiguration") != null && !jsonObj.get("studioEncryptionConfiguration").isJsonNull()) {
        StudioStudioEncryptionConfiguration.validateJsonElement(jsonObj.get("studioEncryptionConfiguration"));
      }
      // validate the optional field `studioId`
      if (jsonObj.get("studioId") != null && !jsonObj.get("studioId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("studioId"));
      }
      // validate the optional field `studioName`
      if (jsonObj.get("studioName") != null && !jsonObj.get("studioName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("studioName"));
      }
      // validate the optional field `studioUrl`
      if (jsonObj.get("studioUrl") != null && !jsonObj.get("studioUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("studioUrl"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
      // validate the optional field `userRoleArn`
      if (jsonObj.get("userRoleArn") != null && !jsonObj.get("userRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userRoleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Studio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Studio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Studio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Studio.class));

       return (TypeAdapter<T>) new TypeAdapter<Studio>() {
           @Override
           public void write(JsonWriter out, Studio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Studio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Studio given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Studio
   * @throws IOException if the JSON string is invalid with respect to Studio
   */
  public static Studio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Studio.class);
  }

  /**
   * Convert an instance of Studio to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

