/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateStudioComponentRequestConfiguration;
import org.openapitools.client.model.ScriptParameterKeyValue;
import org.openapitools.client.model.StudioComponentInitializationScript;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateStudioComponentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateStudioComponentRequest {
  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private CreateStudioComponentRequestConfiguration _configuration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EC2_SECURITY_GROUP_IDS = "ec2SecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_EC2_SECURITY_GROUP_IDS)
  private List<String> ec2SecurityGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INITIALIZATION_SCRIPTS = "initializationScripts";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_SCRIPTS)
  private List<StudioComponentInitializationScript> initializationScripts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNTIME_ROLE_ARN = "runtimeRoleArn";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ROLE_ARN)
  private String runtimeRoleArn;

  public static final String SERIALIZED_NAME_SCRIPT_PARAMETERS = "scriptParameters";
  @SerializedName(SERIALIZED_NAME_SCRIPT_PARAMETERS)
  private List<ScriptParameterKeyValue> scriptParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURE_INITIALIZATION_ROLE_ARN = "secureInitializationRoleArn";
  @SerializedName(SERIALIZED_NAME_SECURE_INITIALIZATION_ROLE_ARN)
  private String secureInitializationRoleArn;

  /**
   * The specific subtype of a studio component.
   */
  @JsonAdapter(SubtypeEnum.Adapter.class)
  public enum SubtypeEnum {
    AWS_MANAGED_MICROSOFT_AD("AWS_MANAGED_MICROSOFT_AD"),
    
    AMAZON_FSX_FOR_WINDOWS("AMAZON_FSX_FOR_WINDOWS"),
    
    AMAZON_FSX_FOR_LUSTRE("AMAZON_FSX_FOR_LUSTRE"),
    
    CUSTOM("CUSTOM");

    private String value;

    SubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubtypeEnum fromValue(String value) {
      for (SubtypeEnum b : SubtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private SubtypeEnum subtype;

  /**
   * The type of the studio component.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACTIVE_DIRECTORY("ACTIVE_DIRECTORY"),
    
    SHARED_FILE_SYSTEM("SHARED_FILE_SYSTEM"),
    
    COMPUTE_FARM("COMPUTE_FARM"),
    
    LICENSE_SERVICE("LICENSE_SERVICE"),
    
    CUSTOM("CUSTOM");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public UpdateStudioComponentRequest() {
  }

  public UpdateStudioComponentRequest _configuration(CreateStudioComponentRequestConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public CreateStudioComponentRequestConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(CreateStudioComponentRequestConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public UpdateStudioComponentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateStudioComponentRequest ec2SecurityGroupIds(List<String> ec2SecurityGroupIds) {
    this.ec2SecurityGroupIds = ec2SecurityGroupIds;
    return this;
  }

  public UpdateStudioComponentRequest addEc2SecurityGroupIdsItem(String ec2SecurityGroupIdsItem) {
    if (this.ec2SecurityGroupIds == null) {
      this.ec2SecurityGroupIds = new ArrayList<>();
    }
    this.ec2SecurityGroupIds.add(ec2SecurityGroupIdsItem);
    return this;
  }

  /**
   * The EC2 security groups that control access to the studio component.
   * @return ec2SecurityGroupIds
   */
  @javax.annotation.Nullable
  public List<String> getEc2SecurityGroupIds() {
    return ec2SecurityGroupIds;
  }

  public void setEc2SecurityGroupIds(List<String> ec2SecurityGroupIds) {
    this.ec2SecurityGroupIds = ec2SecurityGroupIds;
  }


  public UpdateStudioComponentRequest initializationScripts(List<StudioComponentInitializationScript> initializationScripts) {
    this.initializationScripts = initializationScripts;
    return this;
  }

  public UpdateStudioComponentRequest addInitializationScriptsItem(StudioComponentInitializationScript initializationScriptsItem) {
    if (this.initializationScripts == null) {
      this.initializationScripts = new ArrayList<>();
    }
    this.initializationScripts.add(initializationScriptsItem);
    return this;
  }

  /**
   * Initialization scripts for studio components.
   * @return initializationScripts
   */
  @javax.annotation.Nullable
  public List<StudioComponentInitializationScript> getInitializationScripts() {
    return initializationScripts;
  }

  public void setInitializationScripts(List<StudioComponentInitializationScript> initializationScripts) {
    this.initializationScripts = initializationScripts;
  }


  public UpdateStudioComponentRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the studio component.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateStudioComponentRequest runtimeRoleArn(String runtimeRoleArn) {
    this.runtimeRoleArn = runtimeRoleArn;
    return this;
  }

  /**
   * An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 
   * @return runtimeRoleArn
   */
  @javax.annotation.Nullable
  public String getRuntimeRoleArn() {
    return runtimeRoleArn;
  }

  public void setRuntimeRoleArn(String runtimeRoleArn) {
    this.runtimeRoleArn = runtimeRoleArn;
  }


  public UpdateStudioComponentRequest scriptParameters(List<ScriptParameterKeyValue> scriptParameters) {
    this.scriptParameters = scriptParameters;
    return this;
  }

  public UpdateStudioComponentRequest addScriptParametersItem(ScriptParameterKeyValue scriptParametersItem) {
    if (this.scriptParameters == null) {
      this.scriptParameters = new ArrayList<>();
    }
    this.scriptParameters.add(scriptParametersItem);
    return this;
  }

  /**
   * Parameters for the studio component scripts.
   * @return scriptParameters
   */
  @javax.annotation.Nullable
  public List<ScriptParameterKeyValue> getScriptParameters() {
    return scriptParameters;
  }

  public void setScriptParameters(List<ScriptParameterKeyValue> scriptParameters) {
    this.scriptParameters = scriptParameters;
  }


  public UpdateStudioComponentRequest secureInitializationRoleArn(String secureInitializationRoleArn) {
    this.secureInitializationRoleArn = secureInitializationRoleArn;
    return this;
  }

  /**
   * An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.
   * @return secureInitializationRoleArn
   */
  @javax.annotation.Nullable
  public String getSecureInitializationRoleArn() {
    return secureInitializationRoleArn;
  }

  public void setSecureInitializationRoleArn(String secureInitializationRoleArn) {
    this.secureInitializationRoleArn = secureInitializationRoleArn;
  }


  public UpdateStudioComponentRequest subtype(SubtypeEnum subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * The specific subtype of a studio component.
   * @return subtype
   */
  @javax.annotation.Nullable
  public SubtypeEnum getSubtype() {
    return subtype;
  }

  public void setSubtype(SubtypeEnum subtype) {
    this.subtype = subtype;
  }


  public UpdateStudioComponentRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the studio component.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateStudioComponentRequest updateStudioComponentRequest = (UpdateStudioComponentRequest) o;
    return Objects.equals(this._configuration, updateStudioComponentRequest._configuration) &&
        Objects.equals(this.description, updateStudioComponentRequest.description) &&
        Objects.equals(this.ec2SecurityGroupIds, updateStudioComponentRequest.ec2SecurityGroupIds) &&
        Objects.equals(this.initializationScripts, updateStudioComponentRequest.initializationScripts) &&
        Objects.equals(this.name, updateStudioComponentRequest.name) &&
        Objects.equals(this.runtimeRoleArn, updateStudioComponentRequest.runtimeRoleArn) &&
        Objects.equals(this.scriptParameters, updateStudioComponentRequest.scriptParameters) &&
        Objects.equals(this.secureInitializationRoleArn, updateStudioComponentRequest.secureInitializationRoleArn) &&
        Objects.equals(this.subtype, updateStudioComponentRequest.subtype) &&
        Objects.equals(this.type, updateStudioComponentRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, description, ec2SecurityGroupIds, initializationScripts, name, runtimeRoleArn, scriptParameters, secureInitializationRoleArn, subtype, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateStudioComponentRequest {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    description: ").append("*").append("\n");
    sb.append("    ec2SecurityGroupIds: ").append(toIndentedString(ec2SecurityGroupIds)).append("\n");
    sb.append("    initializationScripts: ").append(toIndentedString(initializationScripts)).append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    runtimeRoleArn: ").append(toIndentedString(runtimeRoleArn)).append("\n");
    sb.append("    scriptParameters: ").append(toIndentedString(scriptParameters)).append("\n");
    sb.append("    secureInitializationRoleArn: ").append(toIndentedString(secureInitializationRoleArn)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration");
    openapiFields.add("description");
    openapiFields.add("ec2SecurityGroupIds");
    openapiFields.add("initializationScripts");
    openapiFields.add("name");
    openapiFields.add("runtimeRoleArn");
    openapiFields.add("scriptParameters");
    openapiFields.add("secureInitializationRoleArn");
    openapiFields.add("subtype");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateStudioComponentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateStudioComponentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateStudioComponentRequest is not found in the empty JSON string", UpdateStudioComponentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateStudioComponentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateStudioComponentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        CreateStudioComponentRequestConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ec2SecurityGroupIds") != null && !jsonObj.get("ec2SecurityGroupIds").isJsonNull() && !jsonObj.get("ec2SecurityGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ec2SecurityGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("ec2SecurityGroupIds").toString()));
      }
      if (jsonObj.get("initializationScripts") != null && !jsonObj.get("initializationScripts").isJsonNull()) {
        JsonArray jsonArrayinitializationScripts = jsonObj.getAsJsonArray("initializationScripts");
        if (jsonArrayinitializationScripts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initializationScripts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initializationScripts` to be an array in the JSON string but got `%s`", jsonObj.get("initializationScripts").toString()));
          }

          // validate the optional field `initializationScripts` (array)
          for (int i = 0; i < jsonArrayinitializationScripts.size(); i++) {
            StudioComponentInitializationScript.validateJsonElement(jsonArrayinitializationScripts.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("runtimeRoleArn") != null && !jsonObj.get("runtimeRoleArn").isJsonNull()) && !jsonObj.get("runtimeRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeRoleArn").toString()));
      }
      if (jsonObj.get("scriptParameters") != null && !jsonObj.get("scriptParameters").isJsonNull()) {
        JsonArray jsonArrayscriptParameters = jsonObj.getAsJsonArray("scriptParameters");
        if (jsonArrayscriptParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scriptParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scriptParameters` to be an array in the JSON string but got `%s`", jsonObj.get("scriptParameters").toString()));
          }

          // validate the optional field `scriptParameters` (array)
          for (int i = 0; i < jsonArrayscriptParameters.size(); i++) {
            ScriptParameterKeyValue.validateJsonElement(jsonArrayscriptParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("secureInitializationRoleArn") != null && !jsonObj.get("secureInitializationRoleArn").isJsonNull()) && !jsonObj.get("secureInitializationRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureInitializationRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureInitializationRoleArn").toString()));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      // validate the optional field `subtype`
      if (jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) {
        SubtypeEnum.validateJsonElement(jsonObj.get("subtype"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateStudioComponentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateStudioComponentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateStudioComponentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateStudioComponentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateStudioComponentRequest>() {
           @Override
           public void write(JsonWriter out, UpdateStudioComponentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateStudioComponentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateStudioComponentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateStudioComponentRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateStudioComponentRequest
   */
  public static UpdateStudioComponentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateStudioComponentRequest.class);
  }

  /**
   * Convert an instance of UpdateStudioComponentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

