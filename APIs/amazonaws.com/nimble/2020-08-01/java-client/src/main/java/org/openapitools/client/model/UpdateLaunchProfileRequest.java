/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLaunchProfileRequestStreamConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLaunchProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLaunchProfileRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_PROTOCOL_VERSIONS = "launchProfileProtocolVersions";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_PROTOCOL_VERSIONS)
  private List<String> launchProfileProtocolVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STREAM_CONFIGURATION = "streamConfiguration";
  @SerializedName(SERIALIZED_NAME_STREAM_CONFIGURATION)
  private CreateLaunchProfileRequestStreamConfiguration streamConfiguration;

  public static final String SERIALIZED_NAME_STUDIO_COMPONENT_IDS = "studioComponentIds";
  @SerializedName(SERIALIZED_NAME_STUDIO_COMPONENT_IDS)
  private List<String> studioComponentIds = new ArrayList<>();

  public UpdateLaunchProfileRequest() {
  }

  public UpdateLaunchProfileRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human-readable description of the launch profile.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateLaunchProfileRequest launchProfileProtocolVersions(List<String> launchProfileProtocolVersions) {
    this.launchProfileProtocolVersions = launchProfileProtocolVersions;
    return this;
  }

  public UpdateLaunchProfileRequest addLaunchProfileProtocolVersionsItem(String launchProfileProtocolVersionsItem) {
    if (this.launchProfileProtocolVersions == null) {
      this.launchProfileProtocolVersions = new ArrayList<>();
    }
    this.launchProfileProtocolVersions.add(launchProfileProtocolVersionsItem);
    return this;
  }

  /**
   * The version number of the protocol that is used by the launch profile. The only valid version is \&quot;2021-03-31\&quot;.
   * @return launchProfileProtocolVersions
   */
  @javax.annotation.Nullable
  public List<String> getLaunchProfileProtocolVersions() {
    return launchProfileProtocolVersions;
  }

  public void setLaunchProfileProtocolVersions(List<String> launchProfileProtocolVersions) {
    this.launchProfileProtocolVersions = launchProfileProtocolVersions;
  }


  public UpdateLaunchProfileRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the launch profile.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateLaunchProfileRequest streamConfiguration(CreateLaunchProfileRequestStreamConfiguration streamConfiguration) {
    this.streamConfiguration = streamConfiguration;
    return this;
  }

  /**
   * Get streamConfiguration
   * @return streamConfiguration
   */
  @javax.annotation.Nullable
  public CreateLaunchProfileRequestStreamConfiguration getStreamConfiguration() {
    return streamConfiguration;
  }

  public void setStreamConfiguration(CreateLaunchProfileRequestStreamConfiguration streamConfiguration) {
    this.streamConfiguration = streamConfiguration;
  }


  public UpdateLaunchProfileRequest studioComponentIds(List<String> studioComponentIds) {
    this.studioComponentIds = studioComponentIds;
    return this;
  }

  public UpdateLaunchProfileRequest addStudioComponentIdsItem(String studioComponentIdsItem) {
    if (this.studioComponentIds == null) {
      this.studioComponentIds = new ArrayList<>();
    }
    this.studioComponentIds.add(studioComponentIdsItem);
    return this;
  }

  /**
   * Unique identifiers for a collection of studio components that can be used with this launch profile.
   * @return studioComponentIds
   */
  @javax.annotation.Nullable
  public List<String> getStudioComponentIds() {
    return studioComponentIds;
  }

  public void setStudioComponentIds(List<String> studioComponentIds) {
    this.studioComponentIds = studioComponentIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLaunchProfileRequest updateLaunchProfileRequest = (UpdateLaunchProfileRequest) o;
    return Objects.equals(this.description, updateLaunchProfileRequest.description) &&
        Objects.equals(this.launchProfileProtocolVersions, updateLaunchProfileRequest.launchProfileProtocolVersions) &&
        Objects.equals(this.name, updateLaunchProfileRequest.name) &&
        Objects.equals(this.streamConfiguration, updateLaunchProfileRequest.streamConfiguration) &&
        Objects.equals(this.studioComponentIds, updateLaunchProfileRequest.studioComponentIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, launchProfileProtocolVersions, name, streamConfiguration, studioComponentIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLaunchProfileRequest {\n");
    sb.append("    description: ").append("*").append("\n");
    sb.append("    launchProfileProtocolVersions: ").append(toIndentedString(launchProfileProtocolVersions)).append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    streamConfiguration: ").append(toIndentedString(streamConfiguration)).append("\n");
    sb.append("    studioComponentIds: ").append(toIndentedString(studioComponentIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("launchProfileProtocolVersions");
    openapiFields.add("name");
    openapiFields.add("streamConfiguration");
    openapiFields.add("studioComponentIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLaunchProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLaunchProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLaunchProfileRequest is not found in the empty JSON string", UpdateLaunchProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLaunchProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLaunchProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("launchProfileProtocolVersions") != null && !jsonObj.get("launchProfileProtocolVersions").isJsonNull() && !jsonObj.get("launchProfileProtocolVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchProfileProtocolVersions` to be an array in the JSON string but got `%s`", jsonObj.get("launchProfileProtocolVersions").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `streamConfiguration`
      if (jsonObj.get("streamConfiguration") != null && !jsonObj.get("streamConfiguration").isJsonNull()) {
        CreateLaunchProfileRequestStreamConfiguration.validateJsonElement(jsonObj.get("streamConfiguration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("studioComponentIds") != null && !jsonObj.get("studioComponentIds").isJsonNull() && !jsonObj.get("studioComponentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `studioComponentIds` to be an array in the JSON string but got `%s`", jsonObj.get("studioComponentIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLaunchProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLaunchProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLaunchProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLaunchProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLaunchProfileRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLaunchProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLaunchProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLaunchProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLaunchProfileRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLaunchProfileRequest
   */
  public static UpdateLaunchProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLaunchProfileRequest.class);
  }

  /**
   * Convert an instance of UpdateLaunchProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

