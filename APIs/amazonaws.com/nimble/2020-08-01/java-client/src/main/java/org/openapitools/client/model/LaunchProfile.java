/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LaunchProfileState;
import org.openapitools.client.model.LaunchProfileStatusCode;
import org.openapitools.client.model.LaunchProfileStreamConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A launch profile controls your artist workforce’s access to studio components, like compute farms, shared file systems, managed file systems, and license server configurations, as well as instance types and Amazon Machine Images (AMIs). &lt;/p&gt; &lt;p&gt;Studio administrators create launch profiles in the Nimble Studio console. Artists can use their launch profiles to launch an instance from the Nimble Studio portal. Each user’s launch profile defines how they can launch a streaming session. By default, studio admins can use all launch profiles.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LaunchProfile {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EC2_SUBNET_IDS = "ec2SubnetIds";
  @SerializedName(SERIALIZED_NAME_EC2_SUBNET_IDS)
  private List ec2SubnetIds;

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_ID = "launchProfileId";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_ID)
  private String launchProfileId;

  public static final String SERIALIZED_NAME_LAUNCH_PROFILE_PROTOCOL_VERSIONS = "launchProfileProtocolVersions";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PROFILE_PROTOCOL_VERSIONS)
  private List launchProfileProtocolVersions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private LaunchProfileState state;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private LaunchProfileStatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_STREAM_CONFIGURATION = "streamConfiguration";
  @SerializedName(SERIALIZED_NAME_STREAM_CONFIGURATION)
  private LaunchProfileStreamConfiguration streamConfiguration;

  public static final String SERIALIZED_NAME_STUDIO_COMPONENT_IDS = "studioComponentIds";
  @SerializedName(SERIALIZED_NAME_STUDIO_COMPONENT_IDS)
  private List studioComponentIds;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_VALIDATION_RESULTS = "validationResults";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RESULTS)
  private List validationResults;

  public LaunchProfile() {
  }

  public LaunchProfile arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public LaunchProfile createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public LaunchProfile createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public LaunchProfile description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LaunchProfile ec2SubnetIds(List ec2SubnetIds) {
    this.ec2SubnetIds = ec2SubnetIds;
    return this;
  }

  /**
   * Get ec2SubnetIds
   * @return ec2SubnetIds
   */
  @javax.annotation.Nullable
  public List getEc2SubnetIds() {
    return ec2SubnetIds;
  }

  public void setEc2SubnetIds(List ec2SubnetIds) {
    this.ec2SubnetIds = ec2SubnetIds;
  }


  public LaunchProfile launchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
    return this;
  }

  /**
   * Get launchProfileId
   * @return launchProfileId
   */
  @javax.annotation.Nullable
  public String getLaunchProfileId() {
    return launchProfileId;
  }

  public void setLaunchProfileId(String launchProfileId) {
    this.launchProfileId = launchProfileId;
  }


  public LaunchProfile launchProfileProtocolVersions(List launchProfileProtocolVersions) {
    this.launchProfileProtocolVersions = launchProfileProtocolVersions;
    return this;
  }

  /**
   * Get launchProfileProtocolVersions
   * @return launchProfileProtocolVersions
   */
  @javax.annotation.Nullable
  public List getLaunchProfileProtocolVersions() {
    return launchProfileProtocolVersions;
  }

  public void setLaunchProfileProtocolVersions(List launchProfileProtocolVersions) {
    this.launchProfileProtocolVersions = launchProfileProtocolVersions;
  }


  public LaunchProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LaunchProfile state(LaunchProfileState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public LaunchProfileState getState() {
    return state;
  }

  public void setState(LaunchProfileState state) {
    this.state = state;
  }


  public LaunchProfile statusCode(LaunchProfileStatusCode statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public LaunchProfileStatusCode getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(LaunchProfileStatusCode statusCode) {
    this.statusCode = statusCode;
  }


  public LaunchProfile statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public LaunchProfile streamConfiguration(LaunchProfileStreamConfiguration streamConfiguration) {
    this.streamConfiguration = streamConfiguration;
    return this;
  }

  /**
   * Get streamConfiguration
   * @return streamConfiguration
   */
  @javax.annotation.Nullable
  public LaunchProfileStreamConfiguration getStreamConfiguration() {
    return streamConfiguration;
  }

  public void setStreamConfiguration(LaunchProfileStreamConfiguration streamConfiguration) {
    this.streamConfiguration = streamConfiguration;
  }


  public LaunchProfile studioComponentIds(List studioComponentIds) {
    this.studioComponentIds = studioComponentIds;
    return this;
  }

  /**
   * Get studioComponentIds
   * @return studioComponentIds
   */
  @javax.annotation.Nullable
  public List getStudioComponentIds() {
    return studioComponentIds;
  }

  public void setStudioComponentIds(List studioComponentIds) {
    this.studioComponentIds = studioComponentIds;
  }


  public LaunchProfile tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public LaunchProfile updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public LaunchProfile updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public LaunchProfile validationResults(List validationResults) {
    this.validationResults = validationResults;
    return this;
  }

  /**
   * Get validationResults
   * @return validationResults
   */
  @javax.annotation.Nullable
  public List getValidationResults() {
    return validationResults;
  }

  public void setValidationResults(List validationResults) {
    this.validationResults = validationResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaunchProfile launchProfile = (LaunchProfile) o;
    return Objects.equals(this.arn, launchProfile.arn) &&
        Objects.equals(this.createdAt, launchProfile.createdAt) &&
        Objects.equals(this.createdBy, launchProfile.createdBy) &&
        Objects.equals(this.description, launchProfile.description) &&
        Objects.equals(this.ec2SubnetIds, launchProfile.ec2SubnetIds) &&
        Objects.equals(this.launchProfileId, launchProfile.launchProfileId) &&
        Objects.equals(this.launchProfileProtocolVersions, launchProfile.launchProfileProtocolVersions) &&
        Objects.equals(this.name, launchProfile.name) &&
        Objects.equals(this.state, launchProfile.state) &&
        Objects.equals(this.statusCode, launchProfile.statusCode) &&
        Objects.equals(this.statusMessage, launchProfile.statusMessage) &&
        Objects.equals(this.streamConfiguration, launchProfile.streamConfiguration) &&
        Objects.equals(this.studioComponentIds, launchProfile.studioComponentIds) &&
        Objects.equals(this.tags, launchProfile.tags) &&
        Objects.equals(this.updatedAt, launchProfile.updatedAt) &&
        Objects.equals(this.updatedBy, launchProfile.updatedBy) &&
        Objects.equals(this.validationResults, launchProfile.validationResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, createdAt, createdBy, description, ec2SubnetIds, launchProfileId, launchProfileProtocolVersions, name, state, statusCode, statusMessage, streamConfiguration, studioComponentIds, tags, updatedAt, updatedBy, validationResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaunchProfile {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ec2SubnetIds: ").append(toIndentedString(ec2SubnetIds)).append("\n");
    sb.append("    launchProfileId: ").append(toIndentedString(launchProfileId)).append("\n");
    sb.append("    launchProfileProtocolVersions: ").append(toIndentedString(launchProfileProtocolVersions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    streamConfiguration: ").append(toIndentedString(streamConfiguration)).append("\n");
    sb.append("    studioComponentIds: ").append(toIndentedString(studioComponentIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    validationResults: ").append(toIndentedString(validationResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("description");
    openapiFields.add("ec2SubnetIds");
    openapiFields.add("launchProfileId");
    openapiFields.add("launchProfileProtocolVersions");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("statusCode");
    openapiFields.add("statusMessage");
    openapiFields.add("streamConfiguration");
    openapiFields.add("studioComponentIds");
    openapiFields.add("tags");
    openapiFields.add("updatedAt");
    openapiFields.add("updatedBy");
    openapiFields.add("validationResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LaunchProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LaunchProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LaunchProfile is not found in the empty JSON string", LaunchProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LaunchProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LaunchProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("createdBy"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `ec2SubnetIds`
      if (jsonObj.get("ec2SubnetIds") != null && !jsonObj.get("ec2SubnetIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ec2SubnetIds"));
      }
      // validate the optional field `launchProfileId`
      if (jsonObj.get("launchProfileId") != null && !jsonObj.get("launchProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("launchProfileId"));
      }
      // validate the optional field `launchProfileProtocolVersions`
      if (jsonObj.get("launchProfileProtocolVersions") != null && !jsonObj.get("launchProfileProtocolVersions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("launchProfileProtocolVersions"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        LaunchProfileState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        LaunchProfileStatusCode.validateJsonElement(jsonObj.get("statusCode"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `streamConfiguration`
      if (jsonObj.get("streamConfiguration") != null && !jsonObj.get("streamConfiguration").isJsonNull()) {
        LaunchProfileStreamConfiguration.validateJsonElement(jsonObj.get("streamConfiguration"));
      }
      // validate the optional field `studioComponentIds`
      if (jsonObj.get("studioComponentIds") != null && !jsonObj.get("studioComponentIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("studioComponentIds"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
      // validate the optional field `updatedBy`
      if (jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("updatedBy"));
      }
      // validate the optional field `validationResults`
      if (jsonObj.get("validationResults") != null && !jsonObj.get("validationResults").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("validationResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LaunchProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LaunchProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LaunchProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LaunchProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<LaunchProfile>() {
           @Override
           public void write(JsonWriter out, LaunchProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LaunchProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LaunchProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LaunchProfile
   * @throws IOException if the JSON string is invalid with respect to LaunchProfile
   */
  public static LaunchProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LaunchProfile.class);
  }

  /**
   * Convert an instance of LaunchProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

