/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LaunchProfileInitializationActiveDirectory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:48.375411-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LaunchProfileInitializationActiveDirectory {
  public static final String SERIALIZED_NAME_COMPUTER_ATTRIBUTES = "computerAttributes";
  @SerializedName(SERIALIZED_NAME_COMPUTER_ATTRIBUTES)
  private List computerAttributes;

  public static final String SERIALIZED_NAME_DIRECTORY_ID = "directoryId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ID)
  private String directoryId;

  public static final String SERIALIZED_NAME_DIRECTORY_NAME = "directoryName";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_NAME)
  private String directoryName;

  public static final String SERIALIZED_NAME_DNS_IP_ADDRESSES = "dnsIpAddresses";
  @SerializedName(SERIALIZED_NAME_DNS_IP_ADDRESSES)
  private List dnsIpAddresses;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT_DISTINGUISHED_NAME = "organizationalUnitDistinguishedName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT_DISTINGUISHED_NAME)
  private String organizationalUnitDistinguishedName;

  public static final String SERIALIZED_NAME_STUDIO_COMPONENT_ID = "studioComponentId";
  @SerializedName(SERIALIZED_NAME_STUDIO_COMPONENT_ID)
  private String studioComponentId;

  public static final String SERIALIZED_NAME_STUDIO_COMPONENT_NAME = "studioComponentName";
  @SerializedName(SERIALIZED_NAME_STUDIO_COMPONENT_NAME)
  private String studioComponentName;

  public LaunchProfileInitializationActiveDirectory() {
  }

  public LaunchProfileInitializationActiveDirectory computerAttributes(List computerAttributes) {
    this.computerAttributes = computerAttributes;
    return this;
  }

  /**
   * Get computerAttributes
   * @return computerAttributes
   */
  @javax.annotation.Nullable
  public List getComputerAttributes() {
    return computerAttributes;
  }

  public void setComputerAttributes(List computerAttributes) {
    this.computerAttributes = computerAttributes;
  }


  public LaunchProfileInitializationActiveDirectory directoryId(String directoryId) {
    this.directoryId = directoryId;
    return this;
  }

  /**
   * Get directoryId
   * @return directoryId
   */
  @javax.annotation.Nullable
  public String getDirectoryId() {
    return directoryId;
  }

  public void setDirectoryId(String directoryId) {
    this.directoryId = directoryId;
  }


  public LaunchProfileInitializationActiveDirectory directoryName(String directoryName) {
    this.directoryName = directoryName;
    return this;
  }

  /**
   * Get directoryName
   * @return directoryName
   */
  @javax.annotation.Nullable
  public String getDirectoryName() {
    return directoryName;
  }

  public void setDirectoryName(String directoryName) {
    this.directoryName = directoryName;
  }


  public LaunchProfileInitializationActiveDirectory dnsIpAddresses(List dnsIpAddresses) {
    this.dnsIpAddresses = dnsIpAddresses;
    return this;
  }

  /**
   * Get dnsIpAddresses
   * @return dnsIpAddresses
   */
  @javax.annotation.Nullable
  public List getDnsIpAddresses() {
    return dnsIpAddresses;
  }

  public void setDnsIpAddresses(List dnsIpAddresses) {
    this.dnsIpAddresses = dnsIpAddresses;
  }


  public LaunchProfileInitializationActiveDirectory organizationalUnitDistinguishedName(String organizationalUnitDistinguishedName) {
    this.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName;
    return this;
  }

  /**
   * Get organizationalUnitDistinguishedName
   * @return organizationalUnitDistinguishedName
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnitDistinguishedName() {
    return organizationalUnitDistinguishedName;
  }

  public void setOrganizationalUnitDistinguishedName(String organizationalUnitDistinguishedName) {
    this.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName;
  }


  public LaunchProfileInitializationActiveDirectory studioComponentId(String studioComponentId) {
    this.studioComponentId = studioComponentId;
    return this;
  }

  /**
   * Get studioComponentId
   * @return studioComponentId
   */
  @javax.annotation.Nullable
  public String getStudioComponentId() {
    return studioComponentId;
  }

  public void setStudioComponentId(String studioComponentId) {
    this.studioComponentId = studioComponentId;
  }


  public LaunchProfileInitializationActiveDirectory studioComponentName(String studioComponentName) {
    this.studioComponentName = studioComponentName;
    return this;
  }

  /**
   * Get studioComponentName
   * @return studioComponentName
   */
  @javax.annotation.Nullable
  public String getStudioComponentName() {
    return studioComponentName;
  }

  public void setStudioComponentName(String studioComponentName) {
    this.studioComponentName = studioComponentName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaunchProfileInitializationActiveDirectory launchProfileInitializationActiveDirectory = (LaunchProfileInitializationActiveDirectory) o;
    return Objects.equals(this.computerAttributes, launchProfileInitializationActiveDirectory.computerAttributes) &&
        Objects.equals(this.directoryId, launchProfileInitializationActiveDirectory.directoryId) &&
        Objects.equals(this.directoryName, launchProfileInitializationActiveDirectory.directoryName) &&
        Objects.equals(this.dnsIpAddresses, launchProfileInitializationActiveDirectory.dnsIpAddresses) &&
        Objects.equals(this.organizationalUnitDistinguishedName, launchProfileInitializationActiveDirectory.organizationalUnitDistinguishedName) &&
        Objects.equals(this.studioComponentId, launchProfileInitializationActiveDirectory.studioComponentId) &&
        Objects.equals(this.studioComponentName, launchProfileInitializationActiveDirectory.studioComponentName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computerAttributes, directoryId, directoryName, dnsIpAddresses, organizationalUnitDistinguishedName, studioComponentId, studioComponentName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaunchProfileInitializationActiveDirectory {\n");
    sb.append("    computerAttributes: ").append(toIndentedString(computerAttributes)).append("\n");
    sb.append("    directoryId: ").append(toIndentedString(directoryId)).append("\n");
    sb.append("    directoryName: ").append(toIndentedString(directoryName)).append("\n");
    sb.append("    dnsIpAddresses: ").append(toIndentedString(dnsIpAddresses)).append("\n");
    sb.append("    organizationalUnitDistinguishedName: ").append(toIndentedString(organizationalUnitDistinguishedName)).append("\n");
    sb.append("    studioComponentId: ").append(toIndentedString(studioComponentId)).append("\n");
    sb.append("    studioComponentName: ").append(toIndentedString(studioComponentName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computerAttributes");
    openapiFields.add("directoryId");
    openapiFields.add("directoryName");
    openapiFields.add("dnsIpAddresses");
    openapiFields.add("organizationalUnitDistinguishedName");
    openapiFields.add("studioComponentId");
    openapiFields.add("studioComponentName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LaunchProfileInitializationActiveDirectory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LaunchProfileInitializationActiveDirectory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LaunchProfileInitializationActiveDirectory is not found in the empty JSON string", LaunchProfileInitializationActiveDirectory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LaunchProfileInitializationActiveDirectory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LaunchProfileInitializationActiveDirectory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `computerAttributes`
      if (jsonObj.get("computerAttributes") != null && !jsonObj.get("computerAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("computerAttributes"));
      }
      // validate the optional field `directoryId`
      if (jsonObj.get("directoryId") != null && !jsonObj.get("directoryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("directoryId"));
      }
      // validate the optional field `directoryName`
      if (jsonObj.get("directoryName") != null && !jsonObj.get("directoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("directoryName"));
      }
      // validate the optional field `dnsIpAddresses`
      if (jsonObj.get("dnsIpAddresses") != null && !jsonObj.get("dnsIpAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dnsIpAddresses"));
      }
      // validate the optional field `organizationalUnitDistinguishedName`
      if (jsonObj.get("organizationalUnitDistinguishedName") != null && !jsonObj.get("organizationalUnitDistinguishedName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("organizationalUnitDistinguishedName"));
      }
      // validate the optional field `studioComponentId`
      if (jsonObj.get("studioComponentId") != null && !jsonObj.get("studioComponentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("studioComponentId"));
      }
      // validate the optional field `studioComponentName`
      if (jsonObj.get("studioComponentName") != null && !jsonObj.get("studioComponentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("studioComponentName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LaunchProfileInitializationActiveDirectory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LaunchProfileInitializationActiveDirectory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LaunchProfileInitializationActiveDirectory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LaunchProfileInitializationActiveDirectory.class));

       return (TypeAdapter<T>) new TypeAdapter<LaunchProfileInitializationActiveDirectory>() {
           @Override
           public void write(JsonWriter out, LaunchProfileInitializationActiveDirectory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LaunchProfileInitializationActiveDirectory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LaunchProfileInitializationActiveDirectory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LaunchProfileInitializationActiveDirectory
   * @throws IOException if the JSON string is invalid with respect to LaunchProfileInitializationActiveDirectory
   */
  public static LaunchProfileInitializationActiveDirectory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LaunchProfileInitializationActiveDirectory.class);
  }

  /**
   * Convert an instance of LaunchProfileInitializationActiveDirectory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

