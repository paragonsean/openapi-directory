/*
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &lt;p&gt;The current state of the studio component resource.&lt;/p&gt; &lt;p&gt;While a studio component is being created, modified, or deleted, its state will be &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt;, &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt;, or &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;These are called &lt;i&gt;transition states&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;No modifications may be made to the studio component while it is in a transition state.&lt;/p&gt; &lt;p&gt;If creation of the resource fails, the state will change to &lt;code&gt;CREATE_FAILED&lt;/code&gt;. The resource &lt;code&gt;StatusCode&lt;/code&gt; and &lt;code&gt;StatusMessage&lt;/code&gt; will provide more information of why creation failed. The resource in this state will automatically be deleted from your account after a period of time.&lt;/p&gt; &lt;p&gt;If updating the resource fails, the state will change to &lt;code&gt;UPDATE_FAILED&lt;/code&gt;. The resource &lt;code&gt;StatusCode&lt;/code&gt; and &lt;code&gt;StatusMessage&lt;/code&gt; will provide more information of why the update failed. The resource will be returned to the state it was in when the update request was invoked.&lt;/p&gt; &lt;p&gt;If deleting the resource fails, the state will change to &lt;code&gt;DELETE_FAILED&lt;/code&gt;. The resource &lt;code&gt;StatusCode&lt;/code&gt; and &lt;code&gt;StatusMessage&lt;/code&gt; will provide more information of why the update failed. The resource will be returned to the state it was in when the update request was invoked. After the resource is deleted successfully, it will change to the &lt;code&gt;DELETED&lt;/code&gt; state. The resource will no longer count against service quotas and cannot be used or acted upon any futher. It will be removed from your account after a period of time.&lt;/p&gt;
 */
@JsonAdapter(StudioComponentState.Adapter.class)
public enum StudioComponentState {
  
  CREATE_IN_PROGRESS("CREATE_IN_PROGRESS"),
  
  READY("READY"),
  
  UPDATE_IN_PROGRESS("UPDATE_IN_PROGRESS"),
  
  DELETE_IN_PROGRESS("DELETE_IN_PROGRESS"),
  
  DELETED("DELETED"),
  
  DELETE_FAILED("DELETE_FAILED"),
  
  CREATE_FAILED("CREATE_FAILED"),
  
  UPDATE_FAILED("UPDATE_FAILED");

  private String value;

  StudioComponentState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static StudioComponentState fromValue(String value) {
    for (StudioComponentState b : StudioComponentState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<StudioComponentState> {
    @Override
    public void write(final JsonWriter jsonWriter, final StudioComponentState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public StudioComponentState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return StudioComponentState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    StudioComponentState.fromValue(value);
  }
}

