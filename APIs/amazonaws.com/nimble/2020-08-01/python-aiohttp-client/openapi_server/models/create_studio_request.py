# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_studio_request_studio_encryption_configuration import CreateStudioRequestStudioEncryptionConfiguration
import re
from openapi_server import util


class CreateStudioRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_role_arn: str=None, display_name: str=None, studio_encryption_configuration: CreateStudioRequestStudioEncryptionConfiguration=None, studio_name: str=None, tags: Dict[str, str]=None, user_role_arn: str=None):
        """CreateStudioRequest - a model defined in OpenAPI

        :param admin_role_arn: The admin_role_arn of this CreateStudioRequest.
        :param display_name: The display_name of this CreateStudioRequest.
        :param studio_encryption_configuration: The studio_encryption_configuration of this CreateStudioRequest.
        :param studio_name: The studio_name of this CreateStudioRequest.
        :param tags: The tags of this CreateStudioRequest.
        :param user_role_arn: The user_role_arn of this CreateStudioRequest.
        """
        self.openapi_types = {
            'admin_role_arn': str,
            'display_name': str,
            'studio_encryption_configuration': CreateStudioRequestStudioEncryptionConfiguration,
            'studio_name': str,
            'tags': Dict[str, str],
            'user_role_arn': str
        }

        self.attribute_map = {
            'admin_role_arn': 'adminRoleArn',
            'display_name': 'displayName',
            'studio_encryption_configuration': 'studioEncryptionConfiguration',
            'studio_name': 'studioName',
            'tags': 'tags',
            'user_role_arn': 'userRoleArn'
        }

        self._admin_role_arn = admin_role_arn
        self._display_name = display_name
        self._studio_encryption_configuration = studio_encryption_configuration
        self._studio_name = studio_name
        self._tags = tags
        self._user_role_arn = user_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStudioRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStudio_request of this CreateStudioRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_role_arn(self):
        """Gets the admin_role_arn of this CreateStudioRequest.

        The IAM role that studio admins will assume when logging in to the Nimble Studio portal.

        :return: The admin_role_arn of this CreateStudioRequest.
        :rtype: str
        """
        return self._admin_role_arn

    @admin_role_arn.setter
    def admin_role_arn(self, admin_role_arn):
        """Sets the admin_role_arn of this CreateStudioRequest.

        The IAM role that studio admins will assume when logging in to the Nimble Studio portal.

        :param admin_role_arn: The admin_role_arn of this CreateStudioRequest.
        :type admin_role_arn: str
        """
        if admin_role_arn is None:
            raise ValueError("Invalid value for `admin_role_arn`, must not be `None`")
        if admin_role_arn is not None and len(admin_role_arn) > 2048:
            raise ValueError("Invalid value for `admin_role_arn`, length must be less than or equal to `2048`")
        if admin_role_arn is not None and len(admin_role_arn) < 0:
            raise ValueError("Invalid value for `admin_role_arn`, length must be greater than or equal to `0`")

        self._admin_role_arn = admin_role_arn

    @property
    def display_name(self):
        """Gets the display_name of this CreateStudioRequest.

        A friendly name for the studio.

        :return: The display_name of this CreateStudioRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateStudioRequest.

        A friendly name for the studio.

        :param display_name: The display_name of this CreateStudioRequest.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        if display_name is not None and len(display_name) > 64:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `64`")
        if display_name is not None and len(display_name) < 0:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")

        self._display_name = display_name

    @property
    def studio_encryption_configuration(self):
        """Gets the studio_encryption_configuration of this CreateStudioRequest.


        :return: The studio_encryption_configuration of this CreateStudioRequest.
        :rtype: CreateStudioRequestStudioEncryptionConfiguration
        """
        return self._studio_encryption_configuration

    @studio_encryption_configuration.setter
    def studio_encryption_configuration(self, studio_encryption_configuration):
        """Sets the studio_encryption_configuration of this CreateStudioRequest.


        :param studio_encryption_configuration: The studio_encryption_configuration of this CreateStudioRequest.
        :type studio_encryption_configuration: CreateStudioRequestStudioEncryptionConfiguration
        """

        self._studio_encryption_configuration = studio_encryption_configuration

    @property
    def studio_name(self):
        """Gets the studio_name of this CreateStudioRequest.

        The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.

        :return: The studio_name of this CreateStudioRequest.
        :rtype: str
        """
        return self._studio_name

    @studio_name.setter
    def studio_name(self, studio_name):
        """Sets the studio_name of this CreateStudioRequest.

        The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.

        :param studio_name: The studio_name of this CreateStudioRequest.
        :type studio_name: str
        """
        if studio_name is None:
            raise ValueError("Invalid value for `studio_name`, must not be `None`")
        if studio_name is not None and len(studio_name) > 64:
            raise ValueError("Invalid value for `studio_name`, length must be less than or equal to `64`")
        if studio_name is not None and len(studio_name) < 3:
            raise ValueError("Invalid value for `studio_name`, length must be greater than or equal to `3`")
        if studio_name is not None and not re.search(r'^[a-z0-9]*$', studio_name):
            raise ValueError("Invalid value for `studio_name`, must be a follow pattern or equal to `/^[a-z0-9]*$/`")

        self._studio_name = studio_name

    @property
    def tags(self):
        """Gets the tags of this CreateStudioRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :return: The tags of this CreateStudioRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStudioRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :param tags: The tags of this CreateStudioRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def user_role_arn(self):
        """Gets the user_role_arn of this CreateStudioRequest.

        The IAM role that studio users will assume when logging in to the Nimble Studio portal.

        :return: The user_role_arn of this CreateStudioRequest.
        :rtype: str
        """
        return self._user_role_arn

    @user_role_arn.setter
    def user_role_arn(self, user_role_arn):
        """Sets the user_role_arn of this CreateStudioRequest.

        The IAM role that studio users will assume when logging in to the Nimble Studio portal.

        :param user_role_arn: The user_role_arn of this CreateStudioRequest.
        :type user_role_arn: str
        """
        if user_role_arn is None:
            raise ValueError("Invalid value for `user_role_arn`, must not be `None`")
        if user_role_arn is not None and len(user_role_arn) > 2048:
            raise ValueError("Invalid value for `user_role_arn`, length must be less than or equal to `2048`")
        if user_role_arn is not None and len(user_role_arn) < 0:
            raise ValueError("Invalid value for `user_role_arn`, length must be greater than or equal to `0`")

        self._user_role_arn = user_role_arn
