# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_image_encryption_configuration_key_type import StreamingImageEncryptionConfigurationKeyType
from openapi_server import util


class StreamingImageEncryptionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_arn: str=None, key_type: StreamingImageEncryptionConfigurationKeyType=None):
        """StreamingImageEncryptionConfiguration - a model defined in OpenAPI

        :param key_arn: The key_arn of this StreamingImageEncryptionConfiguration.
        :param key_type: The key_type of this StreamingImageEncryptionConfiguration.
        """
        self.openapi_types = {
            'key_arn': str,
            'key_type': StreamingImageEncryptionConfigurationKeyType
        }

        self.attribute_map = {
            'key_arn': 'keyArn',
            'key_type': 'keyType'
        }

        self._key_arn = key_arn
        self._key_type = key_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingImageEncryptionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingImage_encryptionConfiguration of this StreamingImageEncryptionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_arn(self):
        """Gets the key_arn of this StreamingImageEncryptionConfiguration.


        :return: The key_arn of this StreamingImageEncryptionConfiguration.
        :rtype: str
        """
        return self._key_arn

    @key_arn.setter
    def key_arn(self, key_arn):
        """Sets the key_arn of this StreamingImageEncryptionConfiguration.


        :param key_arn: The key_arn of this StreamingImageEncryptionConfiguration.
        :type key_arn: str
        """

        self._key_arn = key_arn

    @property
    def key_type(self):
        """Gets the key_type of this StreamingImageEncryptionConfiguration.


        :return: The key_type of this StreamingImageEncryptionConfiguration.
        :rtype: StreamingImageEncryptionConfigurationKeyType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this StreamingImageEncryptionConfiguration.


        :param key_type: The key_type of this StreamingImageEncryptionConfiguration.
        :type key_type: StreamingImageEncryptionConfigurationKeyType
        """
        if key_type is None:
            raise ValueError("Invalid value for `key_type`, must not be `None`")

        self._key_type = key_type
