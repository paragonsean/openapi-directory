# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateStreamingSessionStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_in_seconds: int=None):
        """CreateStreamingSessionStreamRequest - a model defined in OpenAPI

        :param expiration_in_seconds: The expiration_in_seconds of this CreateStreamingSessionStreamRequest.
        """
        self.openapi_types = {
            'expiration_in_seconds': int
        }

        self.attribute_map = {
            'expiration_in_seconds': 'expirationInSeconds'
        }

        self._expiration_in_seconds = expiration_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStreamingSessionStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStreamingSessionStream_request of this CreateStreamingSessionStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_in_seconds(self):
        """Gets the expiration_in_seconds of this CreateStreamingSessionStreamRequest.

        The expiration time in seconds.

        :return: The expiration_in_seconds of this CreateStreamingSessionStreamRequest.
        :rtype: int
        """
        return self._expiration_in_seconds

    @expiration_in_seconds.setter
    def expiration_in_seconds(self, expiration_in_seconds):
        """Sets the expiration_in_seconds of this CreateStreamingSessionStreamRequest.

        The expiration time in seconds.

        :param expiration_in_seconds: The expiration_in_seconds of this CreateStreamingSessionStreamRequest.
        :type expiration_in_seconds: int
        """
        if expiration_in_seconds is not None and expiration_in_seconds > 3600:
            raise ValueError("Invalid value for `expiration_in_seconds`, must be a value less than or equal to `3600`")
        if expiration_in_seconds is not None and expiration_in_seconds < 60:
            raise ValueError("Invalid value for `expiration_in_seconds`, must be a value greater than or equal to `60`")

        self._expiration_in_seconds = expiration_in_seconds
