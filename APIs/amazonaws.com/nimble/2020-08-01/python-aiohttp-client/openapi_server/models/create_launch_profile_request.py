# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_launch_profile_request_stream_configuration import CreateLaunchProfileRequestStreamConfiguration
from openapi_server import util


class CreateLaunchProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, ec2_subnet_ids: List[str]=None, launch_profile_protocol_versions: List[str]=None, name: str=None, stream_configuration: CreateLaunchProfileRequestStreamConfiguration=None, studio_component_ids: List[str]=None, tags: Dict[str, str]=None):
        """CreateLaunchProfileRequest - a model defined in OpenAPI

        :param description: The description of this CreateLaunchProfileRequest.
        :param ec2_subnet_ids: The ec2_subnet_ids of this CreateLaunchProfileRequest.
        :param launch_profile_protocol_versions: The launch_profile_protocol_versions of this CreateLaunchProfileRequest.
        :param name: The name of this CreateLaunchProfileRequest.
        :param stream_configuration: The stream_configuration of this CreateLaunchProfileRequest.
        :param studio_component_ids: The studio_component_ids of this CreateLaunchProfileRequest.
        :param tags: The tags of this CreateLaunchProfileRequest.
        """
        self.openapi_types = {
            'description': str,
            'ec2_subnet_ids': List[str],
            'launch_profile_protocol_versions': List[str],
            'name': str,
            'stream_configuration': CreateLaunchProfileRequestStreamConfiguration,
            'studio_component_ids': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'ec2_subnet_ids': 'ec2SubnetIds',
            'launch_profile_protocol_versions': 'launchProfileProtocolVersions',
            'name': 'name',
            'stream_configuration': 'streamConfiguration',
            'studio_component_ids': 'studioComponentIds',
            'tags': 'tags'
        }

        self._description = description
        self._ec2_subnet_ids = ec2_subnet_ids
        self._launch_profile_protocol_versions = launch_profile_protocol_versions
        self._name = name
        self._stream_configuration = stream_configuration
        self._studio_component_ids = studio_component_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLaunchProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLaunchProfile_request of this CreateLaunchProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateLaunchProfileRequest.

        A human-readable description of the launch profile.

        :return: The description of this CreateLaunchProfileRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLaunchProfileRequest.

        A human-readable description of the launch profile.

        :param description: The description of this CreateLaunchProfileRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def ec2_subnet_ids(self):
        """Gets the ec2_subnet_ids of this CreateLaunchProfileRequest.

        Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. 

        :return: The ec2_subnet_ids of this CreateLaunchProfileRequest.
        :rtype: List[str]
        """
        return self._ec2_subnet_ids

    @ec2_subnet_ids.setter
    def ec2_subnet_ids(self, ec2_subnet_ids):
        """Sets the ec2_subnet_ids of this CreateLaunchProfileRequest.

        Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. 

        :param ec2_subnet_ids: The ec2_subnet_ids of this CreateLaunchProfileRequest.
        :type ec2_subnet_ids: List[str]
        """
        if ec2_subnet_ids is None:
            raise ValueError("Invalid value for `ec2_subnet_ids`, must not be `None`")
        if ec2_subnet_ids is not None and len(ec2_subnet_ids) > 6:
            raise ValueError("Invalid value for `ec2_subnet_ids`, number of items must be less than or equal to `6`")
        if ec2_subnet_ids is not None and len(ec2_subnet_ids) < 0:
            raise ValueError("Invalid value for `ec2_subnet_ids`, number of items must be greater than or equal to `0`")

        self._ec2_subnet_ids = ec2_subnet_ids

    @property
    def launch_profile_protocol_versions(self):
        """Gets the launch_profile_protocol_versions of this CreateLaunchProfileRequest.

        The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".

        :return: The launch_profile_protocol_versions of this CreateLaunchProfileRequest.
        :rtype: List[str]
        """
        return self._launch_profile_protocol_versions

    @launch_profile_protocol_versions.setter
    def launch_profile_protocol_versions(self, launch_profile_protocol_versions):
        """Sets the launch_profile_protocol_versions of this CreateLaunchProfileRequest.

        The version number of the protocol that is used by the launch profile. The only valid version is \"2021-03-31\".

        :param launch_profile_protocol_versions: The launch_profile_protocol_versions of this CreateLaunchProfileRequest.
        :type launch_profile_protocol_versions: List[str]
        """
        if launch_profile_protocol_versions is None:
            raise ValueError("Invalid value for `launch_profile_protocol_versions`, must not be `None`")

        self._launch_profile_protocol_versions = launch_profile_protocol_versions

    @property
    def name(self):
        """Gets the name of this CreateLaunchProfileRequest.

        The name for the launch profile.

        :return: The name of this CreateLaunchProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLaunchProfileRequest.

        The name for the launch profile.

        :param name: The name of this CreateLaunchProfileRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def stream_configuration(self):
        """Gets the stream_configuration of this CreateLaunchProfileRequest.


        :return: The stream_configuration of this CreateLaunchProfileRequest.
        :rtype: CreateLaunchProfileRequestStreamConfiguration
        """
        return self._stream_configuration

    @stream_configuration.setter
    def stream_configuration(self, stream_configuration):
        """Sets the stream_configuration of this CreateLaunchProfileRequest.


        :param stream_configuration: The stream_configuration of this CreateLaunchProfileRequest.
        :type stream_configuration: CreateLaunchProfileRequestStreamConfiguration
        """
        if stream_configuration is None:
            raise ValueError("Invalid value for `stream_configuration`, must not be `None`")

        self._stream_configuration = stream_configuration

    @property
    def studio_component_ids(self):
        """Gets the studio_component_ids of this CreateLaunchProfileRequest.

        Unique identifiers for a collection of studio components that can be used with this launch profile.

        :return: The studio_component_ids of this CreateLaunchProfileRequest.
        :rtype: List[str]
        """
        return self._studio_component_ids

    @studio_component_ids.setter
    def studio_component_ids(self, studio_component_ids):
        """Sets the studio_component_ids of this CreateLaunchProfileRequest.

        Unique identifiers for a collection of studio components that can be used with this launch profile.

        :param studio_component_ids: The studio_component_ids of this CreateLaunchProfileRequest.
        :type studio_component_ids: List[str]
        """
        if studio_component_ids is None:
            raise ValueError("Invalid value for `studio_component_ids`, must not be `None`")
        if studio_component_ids is not None and len(studio_component_ids) > 100:
            raise ValueError("Invalid value for `studio_component_ids`, number of items must be less than or equal to `100`")
        if studio_component_ids is not None and len(studio_component_ids) < 1:
            raise ValueError("Invalid value for `studio_component_ids`, number of items must be greater than or equal to `1`")

        self._studio_component_ids = studio_component_ids

    @property
    def tags(self):
        """Gets the tags of this CreateLaunchProfileRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :return: The tags of this CreateLaunchProfileRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLaunchProfileRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :param tags: The tags of this CreateLaunchProfileRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
