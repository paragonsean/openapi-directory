# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_studio_component_request_configuration import CreateStudioComponentRequestConfiguration
from openapi_server.models.script_parameter_key_value import ScriptParameterKeyValue
from openapi_server.models.studio_component_initialization_script import StudioComponentInitializationScript
from openapi_server import util


class UpdateStudioComponentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: CreateStudioComponentRequestConfiguration=None, description: str=None, ec2_security_group_ids: List[str]=None, initialization_scripts: List[StudioComponentInitializationScript]=None, name: str=None, runtime_role_arn: str=None, script_parameters: List[ScriptParameterKeyValue]=None, secure_initialization_role_arn: str=None, subtype: str=None, type: str=None):
        """UpdateStudioComponentRequest - a model defined in OpenAPI

        :param configuration: The configuration of this UpdateStudioComponentRequest.
        :param description: The description of this UpdateStudioComponentRequest.
        :param ec2_security_group_ids: The ec2_security_group_ids of this UpdateStudioComponentRequest.
        :param initialization_scripts: The initialization_scripts of this UpdateStudioComponentRequest.
        :param name: The name of this UpdateStudioComponentRequest.
        :param runtime_role_arn: The runtime_role_arn of this UpdateStudioComponentRequest.
        :param script_parameters: The script_parameters of this UpdateStudioComponentRequest.
        :param secure_initialization_role_arn: The secure_initialization_role_arn of this UpdateStudioComponentRequest.
        :param subtype: The subtype of this UpdateStudioComponentRequest.
        :param type: The type of this UpdateStudioComponentRequest.
        """
        self.openapi_types = {
            'configuration': CreateStudioComponentRequestConfiguration,
            'description': str,
            'ec2_security_group_ids': List[str],
            'initialization_scripts': List[StudioComponentInitializationScript],
            'name': str,
            'runtime_role_arn': str,
            'script_parameters': List[ScriptParameterKeyValue],
            'secure_initialization_role_arn': str,
            'subtype': str,
            'type': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'description': 'description',
            'ec2_security_group_ids': 'ec2SecurityGroupIds',
            'initialization_scripts': 'initializationScripts',
            'name': 'name',
            'runtime_role_arn': 'runtimeRoleArn',
            'script_parameters': 'scriptParameters',
            'secure_initialization_role_arn': 'secureInitializationRoleArn',
            'subtype': 'subtype',
            'type': 'type'
        }

        self._configuration = configuration
        self._description = description
        self._ec2_security_group_ids = ec2_security_group_ids
        self._initialization_scripts = initialization_scripts
        self._name = name
        self._runtime_role_arn = runtime_role_arn
        self._script_parameters = script_parameters
        self._secure_initialization_role_arn = secure_initialization_role_arn
        self._subtype = subtype
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStudioComponentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStudioComponent_request of this UpdateStudioComponentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this UpdateStudioComponentRequest.


        :return: The configuration of this UpdateStudioComponentRequest.
        :rtype: CreateStudioComponentRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UpdateStudioComponentRequest.


        :param configuration: The configuration of this UpdateStudioComponentRequest.
        :type configuration: CreateStudioComponentRequestConfiguration
        """

        self._configuration = configuration

    @property
    def description(self):
        """Gets the description of this UpdateStudioComponentRequest.

        The description.

        :return: The description of this UpdateStudioComponentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateStudioComponentRequest.

        The description.

        :param description: The description of this UpdateStudioComponentRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def ec2_security_group_ids(self):
        """Gets the ec2_security_group_ids of this UpdateStudioComponentRequest.

        The EC2 security groups that control access to the studio component.

        :return: The ec2_security_group_ids of this UpdateStudioComponentRequest.
        :rtype: List[str]
        """
        return self._ec2_security_group_ids

    @ec2_security_group_ids.setter
    def ec2_security_group_ids(self, ec2_security_group_ids):
        """Sets the ec2_security_group_ids of this UpdateStudioComponentRequest.

        The EC2 security groups that control access to the studio component.

        :param ec2_security_group_ids: The ec2_security_group_ids of this UpdateStudioComponentRequest.
        :type ec2_security_group_ids: List[str]
        """
        if ec2_security_group_ids is not None and len(ec2_security_group_ids) > 30:
            raise ValueError("Invalid value for `ec2_security_group_ids`, number of items must be less than or equal to `30`")
        if ec2_security_group_ids is not None and len(ec2_security_group_ids) < 0:
            raise ValueError("Invalid value for `ec2_security_group_ids`, number of items must be greater than or equal to `0`")

        self._ec2_security_group_ids = ec2_security_group_ids

    @property
    def initialization_scripts(self):
        """Gets the initialization_scripts of this UpdateStudioComponentRequest.

        Initialization scripts for studio components.

        :return: The initialization_scripts of this UpdateStudioComponentRequest.
        :rtype: List[StudioComponentInitializationScript]
        """
        return self._initialization_scripts

    @initialization_scripts.setter
    def initialization_scripts(self, initialization_scripts):
        """Sets the initialization_scripts of this UpdateStudioComponentRequest.

        Initialization scripts for studio components.

        :param initialization_scripts: The initialization_scripts of this UpdateStudioComponentRequest.
        :type initialization_scripts: List[StudioComponentInitializationScript]
        """

        self._initialization_scripts = initialization_scripts

    @property
    def name(self):
        """Gets the name of this UpdateStudioComponentRequest.

        The name for the studio component.

        :return: The name of this UpdateStudioComponentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateStudioComponentRequest.

        The name for the studio component.

        :param name: The name of this UpdateStudioComponentRequest.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def runtime_role_arn(self):
        """Gets the runtime_role_arn of this UpdateStudioComponentRequest.

        An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 

        :return: The runtime_role_arn of this UpdateStudioComponentRequest.
        :rtype: str
        """
        return self._runtime_role_arn

    @runtime_role_arn.setter
    def runtime_role_arn(self, runtime_role_arn):
        """Sets the runtime_role_arn of this UpdateStudioComponentRequest.

        An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 

        :param runtime_role_arn: The runtime_role_arn of this UpdateStudioComponentRequest.
        :type runtime_role_arn: str
        """
        if runtime_role_arn is not None and len(runtime_role_arn) > 2048:
            raise ValueError("Invalid value for `runtime_role_arn`, length must be less than or equal to `2048`")
        if runtime_role_arn is not None and len(runtime_role_arn) < 0:
            raise ValueError("Invalid value for `runtime_role_arn`, length must be greater than or equal to `0`")

        self._runtime_role_arn = runtime_role_arn

    @property
    def script_parameters(self):
        """Gets the script_parameters of this UpdateStudioComponentRequest.

        Parameters for the studio component scripts.

        :return: The script_parameters of this UpdateStudioComponentRequest.
        :rtype: List[ScriptParameterKeyValue]
        """
        return self._script_parameters

    @script_parameters.setter
    def script_parameters(self, script_parameters):
        """Sets the script_parameters of this UpdateStudioComponentRequest.

        Parameters for the studio component scripts.

        :param script_parameters: The script_parameters of this UpdateStudioComponentRequest.
        :type script_parameters: List[ScriptParameterKeyValue]
        """
        if script_parameters is not None and len(script_parameters) > 30:
            raise ValueError("Invalid value for `script_parameters`, number of items must be less than or equal to `30`")
        if script_parameters is not None and len(script_parameters) < 0:
            raise ValueError("Invalid value for `script_parameters`, number of items must be greater than or equal to `0`")

        self._script_parameters = script_parameters

    @property
    def secure_initialization_role_arn(self):
        """Gets the secure_initialization_role_arn of this UpdateStudioComponentRequest.

        An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.

        :return: The secure_initialization_role_arn of this UpdateStudioComponentRequest.
        :rtype: str
        """
        return self._secure_initialization_role_arn

    @secure_initialization_role_arn.setter
    def secure_initialization_role_arn(self, secure_initialization_role_arn):
        """Sets the secure_initialization_role_arn of this UpdateStudioComponentRequest.

        An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.

        :param secure_initialization_role_arn: The secure_initialization_role_arn of this UpdateStudioComponentRequest.
        :type secure_initialization_role_arn: str
        """
        if secure_initialization_role_arn is not None and len(secure_initialization_role_arn) > 2048:
            raise ValueError("Invalid value for `secure_initialization_role_arn`, length must be less than or equal to `2048`")
        if secure_initialization_role_arn is not None and len(secure_initialization_role_arn) < 0:
            raise ValueError("Invalid value for `secure_initialization_role_arn`, length must be greater than or equal to `0`")

        self._secure_initialization_role_arn = secure_initialization_role_arn

    @property
    def subtype(self):
        """Gets the subtype of this UpdateStudioComponentRequest.

        The specific subtype of a studio component.

        :return: The subtype of this UpdateStudioComponentRequest.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this UpdateStudioComponentRequest.

        The specific subtype of a studio component.

        :param subtype: The subtype of this UpdateStudioComponentRequest.
        :type subtype: str
        """
        allowed_values = ["AWS_MANAGED_MICROSOFT_AD", "AMAZON_FSX_FOR_WINDOWS", "AMAZON_FSX_FOR_LUSTRE", "CUSTOM"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype

    @property
    def type(self):
        """Gets the type of this UpdateStudioComponentRequest.

        The type of the studio component.

        :return: The type of this UpdateStudioComponentRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateStudioComponentRequest.

        The type of the studio component.

        :param type: The type of this UpdateStudioComponentRequest.
        :type type: str
        """
        allowed_values = ["ACTIVE_DIRECTORY", "SHARED_FILE_SYSTEM", "COMPUTE_FARM", "LICENSE_SERVICE", "CUSTOM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
