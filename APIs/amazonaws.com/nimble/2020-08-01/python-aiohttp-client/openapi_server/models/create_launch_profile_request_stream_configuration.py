# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automatic_termination_mode import AutomaticTerminationMode
from openapi_server.models.create_launch_profile_request_stream_configuration_session_backup import CreateLaunchProfileRequestStreamConfigurationSessionBackup
from openapi_server.models.create_launch_profile_request_stream_configuration_session_storage import CreateLaunchProfileRequestStreamConfigurationSessionStorage
from openapi_server.models.create_launch_profile_request_stream_configuration_volume_configuration import CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration
from openapi_server.models.session_persistence_mode import SessionPersistenceMode
from openapi_server.models.streaming_clipboard_mode import StreamingClipboardMode
from openapi_server import util


class CreateLaunchProfileRequestStreamConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_termination_mode: AutomaticTerminationMode=None, clipboard_mode: StreamingClipboardMode=None, ec2_instance_types: List=None, max_session_length_in_minutes: int=None, max_stopped_session_length_in_minutes: int=None, session_backup: CreateLaunchProfileRequestStreamConfigurationSessionBackup=None, session_persistence_mode: SessionPersistenceMode=None, session_storage: CreateLaunchProfileRequestStreamConfigurationSessionStorage=None, streaming_image_ids: List=None, volume_configuration: CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration=None):
        """CreateLaunchProfileRequestStreamConfiguration - a model defined in OpenAPI

        :param automatic_termination_mode: The automatic_termination_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :param clipboard_mode: The clipboard_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :param ec2_instance_types: The ec2_instance_types of this CreateLaunchProfileRequestStreamConfiguration.
        :param max_session_length_in_minutes: The max_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.
        :param max_stopped_session_length_in_minutes: The max_stopped_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.
        :param session_backup: The session_backup of this CreateLaunchProfileRequestStreamConfiguration.
        :param session_persistence_mode: The session_persistence_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :param session_storage: The session_storage of this CreateLaunchProfileRequestStreamConfiguration.
        :param streaming_image_ids: The streaming_image_ids of this CreateLaunchProfileRequestStreamConfiguration.
        :param volume_configuration: The volume_configuration of this CreateLaunchProfileRequestStreamConfiguration.
        """
        self.openapi_types = {
            'automatic_termination_mode': AutomaticTerminationMode,
            'clipboard_mode': StreamingClipboardMode,
            'ec2_instance_types': List,
            'max_session_length_in_minutes': int,
            'max_stopped_session_length_in_minutes': int,
            'session_backup': CreateLaunchProfileRequestStreamConfigurationSessionBackup,
            'session_persistence_mode': SessionPersistenceMode,
            'session_storage': CreateLaunchProfileRequestStreamConfigurationSessionStorage,
            'streaming_image_ids': List,
            'volume_configuration': CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration
        }

        self.attribute_map = {
            'automatic_termination_mode': 'automaticTerminationMode',
            'clipboard_mode': 'clipboardMode',
            'ec2_instance_types': 'ec2InstanceTypes',
            'max_session_length_in_minutes': 'maxSessionLengthInMinutes',
            'max_stopped_session_length_in_minutes': 'maxStoppedSessionLengthInMinutes',
            'session_backup': 'sessionBackup',
            'session_persistence_mode': 'sessionPersistenceMode',
            'session_storage': 'sessionStorage',
            'streaming_image_ids': 'streamingImageIds',
            'volume_configuration': 'volumeConfiguration'
        }

        self._automatic_termination_mode = automatic_termination_mode
        self._clipboard_mode = clipboard_mode
        self._ec2_instance_types = ec2_instance_types
        self._max_session_length_in_minutes = max_session_length_in_minutes
        self._max_stopped_session_length_in_minutes = max_stopped_session_length_in_minutes
        self._session_backup = session_backup
        self._session_persistence_mode = session_persistence_mode
        self._session_storage = session_storage
        self._streaming_image_ids = streaming_image_ids
        self._volume_configuration = volume_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLaunchProfileRequestStreamConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLaunchProfileRequest_streamConfiguration of this CreateLaunchProfileRequestStreamConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_termination_mode(self):
        """Gets the automatic_termination_mode of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The automatic_termination_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: AutomaticTerminationMode
        """
        return self._automatic_termination_mode

    @automatic_termination_mode.setter
    def automatic_termination_mode(self, automatic_termination_mode):
        """Sets the automatic_termination_mode of this CreateLaunchProfileRequestStreamConfiguration.


        :param automatic_termination_mode: The automatic_termination_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :type automatic_termination_mode: AutomaticTerminationMode
        """

        self._automatic_termination_mode = automatic_termination_mode

    @property
    def clipboard_mode(self):
        """Gets the clipboard_mode of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The clipboard_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: StreamingClipboardMode
        """
        return self._clipboard_mode

    @clipboard_mode.setter
    def clipboard_mode(self, clipboard_mode):
        """Sets the clipboard_mode of this CreateLaunchProfileRequestStreamConfiguration.


        :param clipboard_mode: The clipboard_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :type clipboard_mode: StreamingClipboardMode
        """
        if clipboard_mode is None:
            raise ValueError("Invalid value for `clipboard_mode`, must not be `None`")

        self._clipboard_mode = clipboard_mode

    @property
    def ec2_instance_types(self):
        """Gets the ec2_instance_types of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The ec2_instance_types of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: List
        """
        return self._ec2_instance_types

    @ec2_instance_types.setter
    def ec2_instance_types(self, ec2_instance_types):
        """Sets the ec2_instance_types of this CreateLaunchProfileRequestStreamConfiguration.


        :param ec2_instance_types: The ec2_instance_types of this CreateLaunchProfileRequestStreamConfiguration.
        :type ec2_instance_types: List
        """
        if ec2_instance_types is None:
            raise ValueError("Invalid value for `ec2_instance_types`, must not be `None`")

        self._ec2_instance_types = ec2_instance_types

    @property
    def max_session_length_in_minutes(self):
        """Gets the max_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The max_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: int
        """
        return self._max_session_length_in_minutes

    @max_session_length_in_minutes.setter
    def max_session_length_in_minutes(self, max_session_length_in_minutes):
        """Sets the max_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.


        :param max_session_length_in_minutes: The max_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.
        :type max_session_length_in_minutes: int
        """

        self._max_session_length_in_minutes = max_session_length_in_minutes

    @property
    def max_stopped_session_length_in_minutes(self):
        """Gets the max_stopped_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The max_stopped_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: int
        """
        return self._max_stopped_session_length_in_minutes

    @max_stopped_session_length_in_minutes.setter
    def max_stopped_session_length_in_minutes(self, max_stopped_session_length_in_minutes):
        """Sets the max_stopped_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.


        :param max_stopped_session_length_in_minutes: The max_stopped_session_length_in_minutes of this CreateLaunchProfileRequestStreamConfiguration.
        :type max_stopped_session_length_in_minutes: int
        """

        self._max_stopped_session_length_in_minutes = max_stopped_session_length_in_minutes

    @property
    def session_backup(self):
        """Gets the session_backup of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The session_backup of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: CreateLaunchProfileRequestStreamConfigurationSessionBackup
        """
        return self._session_backup

    @session_backup.setter
    def session_backup(self, session_backup):
        """Sets the session_backup of this CreateLaunchProfileRequestStreamConfiguration.


        :param session_backup: The session_backup of this CreateLaunchProfileRequestStreamConfiguration.
        :type session_backup: CreateLaunchProfileRequestStreamConfigurationSessionBackup
        """

        self._session_backup = session_backup

    @property
    def session_persistence_mode(self):
        """Gets the session_persistence_mode of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The session_persistence_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: SessionPersistenceMode
        """
        return self._session_persistence_mode

    @session_persistence_mode.setter
    def session_persistence_mode(self, session_persistence_mode):
        """Sets the session_persistence_mode of this CreateLaunchProfileRequestStreamConfiguration.


        :param session_persistence_mode: The session_persistence_mode of this CreateLaunchProfileRequestStreamConfiguration.
        :type session_persistence_mode: SessionPersistenceMode
        """

        self._session_persistence_mode = session_persistence_mode

    @property
    def session_storage(self):
        """Gets the session_storage of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The session_storage of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: CreateLaunchProfileRequestStreamConfigurationSessionStorage
        """
        return self._session_storage

    @session_storage.setter
    def session_storage(self, session_storage):
        """Sets the session_storage of this CreateLaunchProfileRequestStreamConfiguration.


        :param session_storage: The session_storage of this CreateLaunchProfileRequestStreamConfiguration.
        :type session_storage: CreateLaunchProfileRequestStreamConfigurationSessionStorage
        """

        self._session_storage = session_storage

    @property
    def streaming_image_ids(self):
        """Gets the streaming_image_ids of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The streaming_image_ids of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: List
        """
        return self._streaming_image_ids

    @streaming_image_ids.setter
    def streaming_image_ids(self, streaming_image_ids):
        """Sets the streaming_image_ids of this CreateLaunchProfileRequestStreamConfiguration.


        :param streaming_image_ids: The streaming_image_ids of this CreateLaunchProfileRequestStreamConfiguration.
        :type streaming_image_ids: List
        """
        if streaming_image_ids is None:
            raise ValueError("Invalid value for `streaming_image_ids`, must not be `None`")

        self._streaming_image_ids = streaming_image_ids

    @property
    def volume_configuration(self):
        """Gets the volume_configuration of this CreateLaunchProfileRequestStreamConfiguration.


        :return: The volume_configuration of this CreateLaunchProfileRequestStreamConfiguration.
        :rtype: CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration
        """
        return self._volume_configuration

    @volume_configuration.setter
    def volume_configuration(self, volume_configuration):
        """Sets the volume_configuration of this CreateLaunchProfileRequestStreamConfiguration.


        :param volume_configuration: The volume_configuration of this CreateLaunchProfileRequestStreamConfiguration.
        :type volume_configuration: CreateLaunchProfileRequestStreamConfigurationVolumeConfiguration
        """

        self._volume_configuration = volume_configuration
