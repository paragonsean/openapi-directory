# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StopStreamingSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volume_retention_mode: str=None):
        """StopStreamingSessionRequest - a model defined in OpenAPI

        :param volume_retention_mode: The volume_retention_mode of this StopStreamingSessionRequest.
        """
        self.openapi_types = {
            'volume_retention_mode': str
        }

        self.attribute_map = {
            'volume_retention_mode': 'volumeRetentionMode'
        }

        self._volume_retention_mode = volume_retention_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopStreamingSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopStreamingSession_request of this StopStreamingSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_retention_mode(self):
        """Gets the volume_retention_mode of this StopStreamingSessionRequest.

        Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.

        :return: The volume_retention_mode of this StopStreamingSessionRequest.
        :rtype: str
        """
        return self._volume_retention_mode

    @volume_retention_mode.setter
    def volume_retention_mode(self, volume_retention_mode):
        """Sets the volume_retention_mode of this StopStreamingSessionRequest.

        Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.

        :param volume_retention_mode: The volume_retention_mode of this StopStreamingSessionRequest.
        :type volume_retention_mode: str
        """
        allowed_values = ["RETAIN", "DELETE"]  # noqa: E501
        if volume_retention_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_retention_mode` ({0}), must be one of {1}"
                .format(volume_retention_mode, allowed_values)
            )

        self._volume_retention_mode = volume_retention_mode
