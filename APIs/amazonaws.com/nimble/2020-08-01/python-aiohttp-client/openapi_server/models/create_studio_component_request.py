# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_studio_component_request_configuration import CreateStudioComponentRequestConfiguration
from openapi_server.models.script_parameter_key_value import ScriptParameterKeyValue
from openapi_server.models.studio_component_initialization_script import StudioComponentInitializationScript
from openapi_server import util


class CreateStudioComponentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: CreateStudioComponentRequestConfiguration=None, description: str=None, ec2_security_group_ids: List[str]=None, initialization_scripts: List[StudioComponentInitializationScript]=None, name: str=None, runtime_role_arn: str=None, script_parameters: List[ScriptParameterKeyValue]=None, secure_initialization_role_arn: str=None, subtype: str=None, tags: Dict[str, str]=None, type: str=None):
        """CreateStudioComponentRequest - a model defined in OpenAPI

        :param configuration: The configuration of this CreateStudioComponentRequest.
        :param description: The description of this CreateStudioComponentRequest.
        :param ec2_security_group_ids: The ec2_security_group_ids of this CreateStudioComponentRequest.
        :param initialization_scripts: The initialization_scripts of this CreateStudioComponentRequest.
        :param name: The name of this CreateStudioComponentRequest.
        :param runtime_role_arn: The runtime_role_arn of this CreateStudioComponentRequest.
        :param script_parameters: The script_parameters of this CreateStudioComponentRequest.
        :param secure_initialization_role_arn: The secure_initialization_role_arn of this CreateStudioComponentRequest.
        :param subtype: The subtype of this CreateStudioComponentRequest.
        :param tags: The tags of this CreateStudioComponentRequest.
        :param type: The type of this CreateStudioComponentRequest.
        """
        self.openapi_types = {
            'configuration': CreateStudioComponentRequestConfiguration,
            'description': str,
            'ec2_security_group_ids': List[str],
            'initialization_scripts': List[StudioComponentInitializationScript],
            'name': str,
            'runtime_role_arn': str,
            'script_parameters': List[ScriptParameterKeyValue],
            'secure_initialization_role_arn': str,
            'subtype': str,
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'description': 'description',
            'ec2_security_group_ids': 'ec2SecurityGroupIds',
            'initialization_scripts': 'initializationScripts',
            'name': 'name',
            'runtime_role_arn': 'runtimeRoleArn',
            'script_parameters': 'scriptParameters',
            'secure_initialization_role_arn': 'secureInitializationRoleArn',
            'subtype': 'subtype',
            'tags': 'tags',
            'type': 'type'
        }

        self._configuration = configuration
        self._description = description
        self._ec2_security_group_ids = ec2_security_group_ids
        self._initialization_scripts = initialization_scripts
        self._name = name
        self._runtime_role_arn = runtime_role_arn
        self._script_parameters = script_parameters
        self._secure_initialization_role_arn = secure_initialization_role_arn
        self._subtype = subtype
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStudioComponentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStudioComponent_request of this CreateStudioComponentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this CreateStudioComponentRequest.


        :return: The configuration of this CreateStudioComponentRequest.
        :rtype: CreateStudioComponentRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateStudioComponentRequest.


        :param configuration: The configuration of this CreateStudioComponentRequest.
        :type configuration: CreateStudioComponentRequestConfiguration
        """

        self._configuration = configuration

    @property
    def description(self):
        """Gets the description of this CreateStudioComponentRequest.

        The description.

        :return: The description of this CreateStudioComponentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateStudioComponentRequest.

        The description.

        :param description: The description of this CreateStudioComponentRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def ec2_security_group_ids(self):
        """Gets the ec2_security_group_ids of this CreateStudioComponentRequest.

        The EC2 security groups that control access to the studio component.

        :return: The ec2_security_group_ids of this CreateStudioComponentRequest.
        :rtype: List[str]
        """
        return self._ec2_security_group_ids

    @ec2_security_group_ids.setter
    def ec2_security_group_ids(self, ec2_security_group_ids):
        """Sets the ec2_security_group_ids of this CreateStudioComponentRequest.

        The EC2 security groups that control access to the studio component.

        :param ec2_security_group_ids: The ec2_security_group_ids of this CreateStudioComponentRequest.
        :type ec2_security_group_ids: List[str]
        """
        if ec2_security_group_ids is not None and len(ec2_security_group_ids) > 30:
            raise ValueError("Invalid value for `ec2_security_group_ids`, number of items must be less than or equal to `30`")
        if ec2_security_group_ids is not None and len(ec2_security_group_ids) < 0:
            raise ValueError("Invalid value for `ec2_security_group_ids`, number of items must be greater than or equal to `0`")

        self._ec2_security_group_ids = ec2_security_group_ids

    @property
    def initialization_scripts(self):
        """Gets the initialization_scripts of this CreateStudioComponentRequest.

        Initialization scripts for studio components.

        :return: The initialization_scripts of this CreateStudioComponentRequest.
        :rtype: List[StudioComponentInitializationScript]
        """
        return self._initialization_scripts

    @initialization_scripts.setter
    def initialization_scripts(self, initialization_scripts):
        """Sets the initialization_scripts of this CreateStudioComponentRequest.

        Initialization scripts for studio components.

        :param initialization_scripts: The initialization_scripts of this CreateStudioComponentRequest.
        :type initialization_scripts: List[StudioComponentInitializationScript]
        """

        self._initialization_scripts = initialization_scripts

    @property
    def name(self):
        """Gets the name of this CreateStudioComponentRequest.

        The name for the studio component.

        :return: The name of this CreateStudioComponentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStudioComponentRequest.

        The name for the studio component.

        :param name: The name of this CreateStudioComponentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def runtime_role_arn(self):
        """Gets the runtime_role_arn of this CreateStudioComponentRequest.

        An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 

        :return: The runtime_role_arn of this CreateStudioComponentRequest.
        :rtype: str
        """
        return self._runtime_role_arn

    @runtime_role_arn.setter
    def runtime_role_arn(self, runtime_role_arn):
        """Sets the runtime_role_arn of this CreateStudioComponentRequest.

        An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 

        :param runtime_role_arn: The runtime_role_arn of this CreateStudioComponentRequest.
        :type runtime_role_arn: str
        """
        if runtime_role_arn is not None and len(runtime_role_arn) > 2048:
            raise ValueError("Invalid value for `runtime_role_arn`, length must be less than or equal to `2048`")
        if runtime_role_arn is not None and len(runtime_role_arn) < 0:
            raise ValueError("Invalid value for `runtime_role_arn`, length must be greater than or equal to `0`")

        self._runtime_role_arn = runtime_role_arn

    @property
    def script_parameters(self):
        """Gets the script_parameters of this CreateStudioComponentRequest.

        Parameters for the studio component scripts.

        :return: The script_parameters of this CreateStudioComponentRequest.
        :rtype: List[ScriptParameterKeyValue]
        """
        return self._script_parameters

    @script_parameters.setter
    def script_parameters(self, script_parameters):
        """Sets the script_parameters of this CreateStudioComponentRequest.

        Parameters for the studio component scripts.

        :param script_parameters: The script_parameters of this CreateStudioComponentRequest.
        :type script_parameters: List[ScriptParameterKeyValue]
        """
        if script_parameters is not None and len(script_parameters) > 30:
            raise ValueError("Invalid value for `script_parameters`, number of items must be less than or equal to `30`")
        if script_parameters is not None and len(script_parameters) < 0:
            raise ValueError("Invalid value for `script_parameters`, number of items must be greater than or equal to `0`")

        self._script_parameters = script_parameters

    @property
    def secure_initialization_role_arn(self):
        """Gets the secure_initialization_role_arn of this CreateStudioComponentRequest.

        An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.

        :return: The secure_initialization_role_arn of this CreateStudioComponentRequest.
        :rtype: str
        """
        return self._secure_initialization_role_arn

    @secure_initialization_role_arn.setter
    def secure_initialization_role_arn(self, secure_initialization_role_arn):
        """Sets the secure_initialization_role_arn of this CreateStudioComponentRequest.

        An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.

        :param secure_initialization_role_arn: The secure_initialization_role_arn of this CreateStudioComponentRequest.
        :type secure_initialization_role_arn: str
        """
        if secure_initialization_role_arn is not None and len(secure_initialization_role_arn) > 2048:
            raise ValueError("Invalid value for `secure_initialization_role_arn`, length must be less than or equal to `2048`")
        if secure_initialization_role_arn is not None and len(secure_initialization_role_arn) < 0:
            raise ValueError("Invalid value for `secure_initialization_role_arn`, length must be greater than or equal to `0`")

        self._secure_initialization_role_arn = secure_initialization_role_arn

    @property
    def subtype(self):
        """Gets the subtype of this CreateStudioComponentRequest.

        The specific subtype of a studio component.

        :return: The subtype of this CreateStudioComponentRequest.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this CreateStudioComponentRequest.

        The specific subtype of a studio component.

        :param subtype: The subtype of this CreateStudioComponentRequest.
        :type subtype: str
        """
        allowed_values = ["AWS_MANAGED_MICROSOFT_AD", "AMAZON_FSX_FOR_WINDOWS", "AMAZON_FSX_FOR_LUSTRE", "CUSTOM"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype

    @property
    def tags(self):
        """Gets the tags of this CreateStudioComponentRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :return: The tags of this CreateStudioComponentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStudioComponentRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :param tags: The tags of this CreateStudioComponentRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this CreateStudioComponentRequest.

        The type of the studio component.

        :return: The type of this CreateStudioComponentRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateStudioComponentRequest.

        The type of the studio component.

        :param type: The type of this CreateStudioComponentRequest.
        :type type: str
        """
        allowed_values = ["ACTIVE_DIRECTORY", "SHARED_FILE_SYSTEM", "COMPUTE_FARM", "LICENSE_SERVICE", "CUSTOM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
