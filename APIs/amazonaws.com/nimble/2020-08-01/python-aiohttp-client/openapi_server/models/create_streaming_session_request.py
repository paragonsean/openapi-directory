# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateStreamingSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ec2_instance_type: str=None, launch_profile_id: str=None, owned_by: str=None, streaming_image_id: str=None, tags: Dict[str, str]=None):
        """CreateStreamingSessionRequest - a model defined in OpenAPI

        :param ec2_instance_type: The ec2_instance_type of this CreateStreamingSessionRequest.
        :param launch_profile_id: The launch_profile_id of this CreateStreamingSessionRequest.
        :param owned_by: The owned_by of this CreateStreamingSessionRequest.
        :param streaming_image_id: The streaming_image_id of this CreateStreamingSessionRequest.
        :param tags: The tags of this CreateStreamingSessionRequest.
        """
        self.openapi_types = {
            'ec2_instance_type': str,
            'launch_profile_id': str,
            'owned_by': str,
            'streaming_image_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'ec2_instance_type': 'ec2InstanceType',
            'launch_profile_id': 'launchProfileId',
            'owned_by': 'ownedBy',
            'streaming_image_id': 'streamingImageId',
            'tags': 'tags'
        }

        self._ec2_instance_type = ec2_instance_type
        self._launch_profile_id = launch_profile_id
        self._owned_by = owned_by
        self._streaming_image_id = streaming_image_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStreamingSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStreamingSession_request of this CreateStreamingSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ec2_instance_type(self):
        """Gets the ec2_instance_type of this CreateStreamingSessionRequest.

        The EC2 Instance type used for the streaming session.

        :return: The ec2_instance_type of this CreateStreamingSessionRequest.
        :rtype: str
        """
        return self._ec2_instance_type

    @ec2_instance_type.setter
    def ec2_instance_type(self, ec2_instance_type):
        """Sets the ec2_instance_type of this CreateStreamingSessionRequest.

        The EC2 Instance type used for the streaming session.

        :param ec2_instance_type: The ec2_instance_type of this CreateStreamingSessionRequest.
        :type ec2_instance_type: str
        """
        allowed_values = ["g4dn.xlarge", "g4dn.2xlarge", "g4dn.4xlarge", "g4dn.8xlarge", "g4dn.12xlarge", "g4dn.16xlarge", "g3.4xlarge", "g3s.xlarge", "g5.xlarge", "g5.2xlarge", "g5.4xlarge", "g5.8xlarge", "g5.16xlarge"]  # noqa: E501
        if ec2_instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ec2_instance_type` ({0}), must be one of {1}"
                .format(ec2_instance_type, allowed_values)
            )

        self._ec2_instance_type = ec2_instance_type

    @property
    def launch_profile_id(self):
        """Gets the launch_profile_id of this CreateStreamingSessionRequest.

        The ID of the launch profile used to control access from the streaming session.

        :return: The launch_profile_id of this CreateStreamingSessionRequest.
        :rtype: str
        """
        return self._launch_profile_id

    @launch_profile_id.setter
    def launch_profile_id(self, launch_profile_id):
        """Sets the launch_profile_id of this CreateStreamingSessionRequest.

        The ID of the launch profile used to control access from the streaming session.

        :param launch_profile_id: The launch_profile_id of this CreateStreamingSessionRequest.
        :type launch_profile_id: str
        """
        if launch_profile_id is None:
            raise ValueError("Invalid value for `launch_profile_id`, must not be `None`")

        self._launch_profile_id = launch_profile_id

    @property
    def owned_by(self):
        """Gets the owned_by of this CreateStreamingSessionRequest.

        The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.

        :return: The owned_by of this CreateStreamingSessionRequest.
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this CreateStreamingSessionRequest.

        The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.

        :param owned_by: The owned_by of this CreateStreamingSessionRequest.
        :type owned_by: str
        """

        self._owned_by = owned_by

    @property
    def streaming_image_id(self):
        """Gets the streaming_image_id of this CreateStreamingSessionRequest.

        The ID of the streaming image.

        :return: The streaming_image_id of this CreateStreamingSessionRequest.
        :rtype: str
        """
        return self._streaming_image_id

    @streaming_image_id.setter
    def streaming_image_id(self, streaming_image_id):
        """Sets the streaming_image_id of this CreateStreamingSessionRequest.

        The ID of the streaming image.

        :param streaming_image_id: The streaming_image_id of this CreateStreamingSessionRequest.
        :type streaming_image_id: str
        """
        if streaming_image_id is not None and len(streaming_image_id) > 22:
            raise ValueError("Invalid value for `streaming_image_id`, length must be less than or equal to `22`")
        if streaming_image_id is not None and len(streaming_image_id) < 0:
            raise ValueError("Invalid value for `streaming_image_id`, length must be greater than or equal to `0`")
        if streaming_image_id is not None and not re.search(r'^[a-zA-Z0-9-_]*$', streaming_image_id):
            raise ValueError("Invalid value for `streaming_image_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._streaming_image_id = streaming_image_id

    @property
    def tags(self):
        """Gets the tags of this CreateStreamingSessionRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :return: The tags of this CreateStreamingSessionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStreamingSessionRequest.

        A collection of labels, in the form of key-value pairs, that apply to this resource.

        :param tags: The tags of this CreateStreamingSessionRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
