# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_session_state import StreamingSessionState
from openapi_server.models.streaming_session_status_code import StreamingSessionStatusCode
from openapi_server import util


class StreamingSessionBackup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, backup_id: str=None, created_at: datetime=None, launch_profile_id: str=None, owned_by: str=None, session_id: str=None, state: StreamingSessionState=None, status_code: StreamingSessionStatusCode=None, status_message: str=None, tags: Dict=None):
        """StreamingSessionBackup - a model defined in OpenAPI

        :param arn: The arn of this StreamingSessionBackup.
        :param backup_id: The backup_id of this StreamingSessionBackup.
        :param created_at: The created_at of this StreamingSessionBackup.
        :param launch_profile_id: The launch_profile_id of this StreamingSessionBackup.
        :param owned_by: The owned_by of this StreamingSessionBackup.
        :param session_id: The session_id of this StreamingSessionBackup.
        :param state: The state of this StreamingSessionBackup.
        :param status_code: The status_code of this StreamingSessionBackup.
        :param status_message: The status_message of this StreamingSessionBackup.
        :param tags: The tags of this StreamingSessionBackup.
        """
        self.openapi_types = {
            'arn': str,
            'backup_id': str,
            'created_at': datetime,
            'launch_profile_id': str,
            'owned_by': str,
            'session_id': str,
            'state': StreamingSessionState,
            'status_code': StreamingSessionStatusCode,
            'status_message': str,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'backup_id': 'backupId',
            'created_at': 'createdAt',
            'launch_profile_id': 'launchProfileId',
            'owned_by': 'ownedBy',
            'session_id': 'sessionId',
            'state': 'state',
            'status_code': 'statusCode',
            'status_message': 'statusMessage',
            'tags': 'tags'
        }

        self._arn = arn
        self._backup_id = backup_id
        self._created_at = created_at
        self._launch_profile_id = launch_profile_id
        self._owned_by = owned_by
        self._session_id = session_id
        self._state = state
        self._status_code = status_code
        self._status_message = status_message
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingSessionBackup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingSessionBackup of this StreamingSessionBackup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this StreamingSessionBackup.


        :return: The arn of this StreamingSessionBackup.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StreamingSessionBackup.


        :param arn: The arn of this StreamingSessionBackup.
        :type arn: str
        """

        self._arn = arn

    @property
    def backup_id(self):
        """Gets the backup_id of this StreamingSessionBackup.


        :return: The backup_id of this StreamingSessionBackup.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this StreamingSessionBackup.


        :param backup_id: The backup_id of this StreamingSessionBackup.
        :type backup_id: str
        """

        self._backup_id = backup_id

    @property
    def created_at(self):
        """Gets the created_at of this StreamingSessionBackup.


        :return: The created_at of this StreamingSessionBackup.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StreamingSessionBackup.


        :param created_at: The created_at of this StreamingSessionBackup.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def launch_profile_id(self):
        """Gets the launch_profile_id of this StreamingSessionBackup.


        :return: The launch_profile_id of this StreamingSessionBackup.
        :rtype: str
        """
        return self._launch_profile_id

    @launch_profile_id.setter
    def launch_profile_id(self, launch_profile_id):
        """Sets the launch_profile_id of this StreamingSessionBackup.


        :param launch_profile_id: The launch_profile_id of this StreamingSessionBackup.
        :type launch_profile_id: str
        """

        self._launch_profile_id = launch_profile_id

    @property
    def owned_by(self):
        """Gets the owned_by of this StreamingSessionBackup.


        :return: The owned_by of this StreamingSessionBackup.
        :rtype: str
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this StreamingSessionBackup.


        :param owned_by: The owned_by of this StreamingSessionBackup.
        :type owned_by: str
        """

        self._owned_by = owned_by

    @property
    def session_id(self):
        """Gets the session_id of this StreamingSessionBackup.


        :return: The session_id of this StreamingSessionBackup.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this StreamingSessionBackup.


        :param session_id: The session_id of this StreamingSessionBackup.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def state(self):
        """Gets the state of this StreamingSessionBackup.


        :return: The state of this StreamingSessionBackup.
        :rtype: StreamingSessionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StreamingSessionBackup.


        :param state: The state of this StreamingSessionBackup.
        :type state: StreamingSessionState
        """

        self._state = state

    @property
    def status_code(self):
        """Gets the status_code of this StreamingSessionBackup.


        :return: The status_code of this StreamingSessionBackup.
        :rtype: StreamingSessionStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this StreamingSessionBackup.


        :param status_code: The status_code of this StreamingSessionBackup.
        :type status_code: StreamingSessionStatusCode
        """

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this StreamingSessionBackup.


        :return: The status_message of this StreamingSessionBackup.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this StreamingSessionBackup.


        :param status_message: The status_message of this StreamingSessionBackup.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def tags(self):
        """Gets the tags of this StreamingSessionBackup.


        :return: The tags of this StreamingSessionBackup.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StreamingSessionBackup.


        :param tags: The tags of this StreamingSessionBackup.
        :type tags: Dict
        """

        self._tags = tags
