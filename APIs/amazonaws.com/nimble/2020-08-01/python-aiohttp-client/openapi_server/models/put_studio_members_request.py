# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_studio_member import NewStudioMember
from openapi_server import util


class PutStudioMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_store_id: str=None, members: List[NewStudioMember]=None):
        """PutStudioMembersRequest - a model defined in OpenAPI

        :param identity_store_id: The identity_store_id of this PutStudioMembersRequest.
        :param members: The members of this PutStudioMembersRequest.
        """
        self.openapi_types = {
            'identity_store_id': str,
            'members': List[NewStudioMember]
        }

        self.attribute_map = {
            'identity_store_id': 'identityStoreId',
            'members': 'members'
        }

        self._identity_store_id = identity_store_id
        self._members = members

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutStudioMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutStudioMembers_request of this PutStudioMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_store_id(self):
        """Gets the identity_store_id of this PutStudioMembersRequest.

        The ID of the identity store.

        :return: The identity_store_id of this PutStudioMembersRequest.
        :rtype: str
        """
        return self._identity_store_id

    @identity_store_id.setter
    def identity_store_id(self, identity_store_id):
        """Sets the identity_store_id of this PutStudioMembersRequest.

        The ID of the identity store.

        :param identity_store_id: The identity_store_id of this PutStudioMembersRequest.
        :type identity_store_id: str
        """
        if identity_store_id is None:
            raise ValueError("Invalid value for `identity_store_id`, must not be `None`")

        self._identity_store_id = identity_store_id

    @property
    def members(self):
        """Gets the members of this PutStudioMembersRequest.

        A list of members.

        :return: The members of this PutStudioMembersRequest.
        :rtype: List[NewStudioMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this PutStudioMembersRequest.

        A list of members.

        :param members: The members of this PutStudioMembersRequest.
        :type members: List[NewStudioMember]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")
        if members is not None and len(members) > 20:
            raise ValueError("Invalid value for `members`, number of items must be less than or equal to `20`")
        if members is not None and len(members) < 1:
            raise ValueError("Invalid value for `members`, number of items must be greater than or equal to `1`")

        self._members = members
