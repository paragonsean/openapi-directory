# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.launch_profile_persona import LaunchProfilePersona
from openapi_server import util


class NewLaunchProfileMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, persona: LaunchProfilePersona=None, principal_id: str=None):
        """NewLaunchProfileMember - a model defined in OpenAPI

        :param persona: The persona of this NewLaunchProfileMember.
        :param principal_id: The principal_id of this NewLaunchProfileMember.
        """
        self.openapi_types = {
            'persona': LaunchProfilePersona,
            'principal_id': str
        }

        self.attribute_map = {
            'persona': 'persona',
            'principal_id': 'principalId'
        }

        self._persona = persona
        self._principal_id = principal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewLaunchProfileMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewLaunchProfileMember of this NewLaunchProfileMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def persona(self):
        """Gets the persona of this NewLaunchProfileMember.


        :return: The persona of this NewLaunchProfileMember.
        :rtype: LaunchProfilePersona
        """
        return self._persona

    @persona.setter
    def persona(self, persona):
        """Sets the persona of this NewLaunchProfileMember.


        :param persona: The persona of this NewLaunchProfileMember.
        :type persona: LaunchProfilePersona
        """
        if persona is None:
            raise ValueError("Invalid value for `persona`, must not be `None`")

        self._persona = persona

    @property
    def principal_id(self):
        """Gets the principal_id of this NewLaunchProfileMember.


        :return: The principal_id of this NewLaunchProfileMember.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this NewLaunchProfileMember.


        :param principal_id: The principal_id of this NewLaunchProfileMember.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id
