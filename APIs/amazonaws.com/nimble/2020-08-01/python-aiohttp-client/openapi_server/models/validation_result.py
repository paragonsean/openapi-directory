# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.launch_profile_validation_state import LaunchProfileValidationState
from openapi_server.models.launch_profile_validation_status_code import LaunchProfileValidationStatusCode
from openapi_server.models.launch_profile_validation_type import LaunchProfileValidationType
from openapi_server import util


class ValidationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: LaunchProfileValidationState=None, status_code: LaunchProfileValidationStatusCode=None, status_message: str=None, type: LaunchProfileValidationType=None):
        """ValidationResult - a model defined in OpenAPI

        :param state: The state of this ValidationResult.
        :param status_code: The status_code of this ValidationResult.
        :param status_message: The status_message of this ValidationResult.
        :param type: The type of this ValidationResult.
        """
        self.openapi_types = {
            'state': LaunchProfileValidationState,
            'status_code': LaunchProfileValidationStatusCode,
            'status_message': str,
            'type': LaunchProfileValidationType
        }

        self.attribute_map = {
            'state': 'state',
            'status_code': 'statusCode',
            'status_message': 'statusMessage',
            'type': 'type'
        }

        self._state = state
        self._status_code = status_code
        self._status_message = status_message
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationResult of this ValidationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this ValidationResult.


        :return: The state of this ValidationResult.
        :rtype: LaunchProfileValidationState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ValidationResult.


        :param state: The state of this ValidationResult.
        :type state: LaunchProfileValidationState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def status_code(self):
        """Gets the status_code of this ValidationResult.


        :return: The status_code of this ValidationResult.
        :rtype: LaunchProfileValidationStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ValidationResult.


        :param status_code: The status_code of this ValidationResult.
        :type status_code: LaunchProfileValidationStatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this ValidationResult.


        :return: The status_message of this ValidationResult.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ValidationResult.


        :param status_message: The status_message of this ValidationResult.
        :type status_message: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")

        self._status_message = status_message

    @property
    def type(self):
        """Gets the type of this ValidationResult.


        :return: The type of this ValidationResult.
        :rtype: LaunchProfileValidationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ValidationResult.


        :param type: The type of this ValidationResult.
        :type type: LaunchProfileValidationType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
