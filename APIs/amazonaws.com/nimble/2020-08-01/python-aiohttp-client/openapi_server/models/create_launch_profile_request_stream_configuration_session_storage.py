# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_configuration_session_storage_root import StreamConfigurationSessionStorageRoot
from openapi_server import util


class CreateLaunchProfileRequestStreamConfigurationSessionStorage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: List=None, root: StreamConfigurationSessionStorageRoot=None):
        """CreateLaunchProfileRequestStreamConfigurationSessionStorage - a model defined in OpenAPI

        :param mode: The mode of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        :param root: The root of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        """
        self.openapi_types = {
            'mode': List,
            'root': StreamConfigurationSessionStorageRoot
        }

        self.attribute_map = {
            'mode': 'mode',
            'root': 'root'
        }

        self._mode = mode
        self._root = root

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLaunchProfileRequestStreamConfigurationSessionStorage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLaunchProfile_request_streamConfiguration_sessionStorage of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.


        :return: The mode of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        :rtype: List
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.


        :param mode: The mode of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        :type mode: List
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def root(self):
        """Gets the root of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.


        :return: The root of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        :rtype: StreamConfigurationSessionStorageRoot
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.


        :param root: The root of this CreateLaunchProfileRequestStreamConfigurationSessionStorage.
        :type root: StreamConfigurationSessionStorageRoot
        """

        self._root = root
