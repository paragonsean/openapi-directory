# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iops: int=None, size: int=None, throughput: int=None):
        """VolumeConfiguration - a model defined in OpenAPI

        :param iops: The iops of this VolumeConfiguration.
        :param size: The size of this VolumeConfiguration.
        :param throughput: The throughput of this VolumeConfiguration.
        """
        self.openapi_types = {
            'iops': int,
            'size': int,
            'throughput': int
        }

        self.attribute_map = {
            'iops': 'iops',
            'size': 'size',
            'throughput': 'throughput'
        }

        self._iops = iops
        self._size = size
        self._throughput = throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeConfiguration of this VolumeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iops(self):
        """Gets the iops of this VolumeConfiguration.


        :return: The iops of this VolumeConfiguration.
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this VolumeConfiguration.


        :param iops: The iops of this VolumeConfiguration.
        :type iops: int
        """

        self._iops = iops

    @property
    def size(self):
        """Gets the size of this VolumeConfiguration.


        :return: The size of this VolumeConfiguration.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeConfiguration.


        :param size: The size of this VolumeConfiguration.
        :type size: int
        """

        self._size = size

    @property
    def throughput(self):
        """Gets the throughput of this VolumeConfiguration.


        :return: The throughput of this VolumeConfiguration.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this VolumeConfiguration.


        :param throughput: The throughput of this VolumeConfiguration.
        :type throughput: int
        """

        self._throughput = throughput
