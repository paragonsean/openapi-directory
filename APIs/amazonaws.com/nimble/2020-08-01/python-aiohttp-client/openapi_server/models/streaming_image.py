# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_image_encryption_configuration import StreamingImageEncryptionConfiguration
from openapi_server.models.streaming_image_state import StreamingImageState
from openapi_server.models.streaming_image_status_code import StreamingImageStatusCode
from openapi_server import util


class StreamingImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, description: str=None, ec2_image_id: str=None, encryption_configuration: StreamingImageEncryptionConfiguration=None, eula_ids: List=None, name: str=None, owner: str=None, platform: str=None, state: StreamingImageState=None, status_code: StreamingImageStatusCode=None, status_message: str=None, streaming_image_id: str=None, tags: Dict=None):
        """StreamingImage - a model defined in OpenAPI

        :param arn: The arn of this StreamingImage.
        :param description: The description of this StreamingImage.
        :param ec2_image_id: The ec2_image_id of this StreamingImage.
        :param encryption_configuration: The encryption_configuration of this StreamingImage.
        :param eula_ids: The eula_ids of this StreamingImage.
        :param name: The name of this StreamingImage.
        :param owner: The owner of this StreamingImage.
        :param platform: The platform of this StreamingImage.
        :param state: The state of this StreamingImage.
        :param status_code: The status_code of this StreamingImage.
        :param status_message: The status_message of this StreamingImage.
        :param streaming_image_id: The streaming_image_id of this StreamingImage.
        :param tags: The tags of this StreamingImage.
        """
        self.openapi_types = {
            'arn': str,
            'description': str,
            'ec2_image_id': str,
            'encryption_configuration': StreamingImageEncryptionConfiguration,
            'eula_ids': List,
            'name': str,
            'owner': str,
            'platform': str,
            'state': StreamingImageState,
            'status_code': StreamingImageStatusCode,
            'status_message': str,
            'streaming_image_id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'description': 'description',
            'ec2_image_id': 'ec2ImageId',
            'encryption_configuration': 'encryptionConfiguration',
            'eula_ids': 'eulaIds',
            'name': 'name',
            'owner': 'owner',
            'platform': 'platform',
            'state': 'state',
            'status_code': 'statusCode',
            'status_message': 'statusMessage',
            'streaming_image_id': 'streamingImageId',
            'tags': 'tags'
        }

        self._arn = arn
        self._description = description
        self._ec2_image_id = ec2_image_id
        self._encryption_configuration = encryption_configuration
        self._eula_ids = eula_ids
        self._name = name
        self._owner = owner
        self._platform = platform
        self._state = state
        self._status_code = status_code
        self._status_message = status_message
        self._streaming_image_id = streaming_image_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingImage of this StreamingImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this StreamingImage.


        :return: The arn of this StreamingImage.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StreamingImage.


        :param arn: The arn of this StreamingImage.
        :type arn: str
        """

        self._arn = arn

    @property
    def description(self):
        """Gets the description of this StreamingImage.


        :return: The description of this StreamingImage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StreamingImage.


        :param description: The description of this StreamingImage.
        :type description: str
        """

        self._description = description

    @property
    def ec2_image_id(self):
        """Gets the ec2_image_id of this StreamingImage.


        :return: The ec2_image_id of this StreamingImage.
        :rtype: str
        """
        return self._ec2_image_id

    @ec2_image_id.setter
    def ec2_image_id(self, ec2_image_id):
        """Sets the ec2_image_id of this StreamingImage.


        :param ec2_image_id: The ec2_image_id of this StreamingImage.
        :type ec2_image_id: str
        """

        self._ec2_image_id = ec2_image_id

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this StreamingImage.


        :return: The encryption_configuration of this StreamingImage.
        :rtype: StreamingImageEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this StreamingImage.


        :param encryption_configuration: The encryption_configuration of this StreamingImage.
        :type encryption_configuration: StreamingImageEncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def eula_ids(self):
        """Gets the eula_ids of this StreamingImage.


        :return: The eula_ids of this StreamingImage.
        :rtype: List
        """
        return self._eula_ids

    @eula_ids.setter
    def eula_ids(self, eula_ids):
        """Sets the eula_ids of this StreamingImage.


        :param eula_ids: The eula_ids of this StreamingImage.
        :type eula_ids: List
        """

        self._eula_ids = eula_ids

    @property
    def name(self):
        """Gets the name of this StreamingImage.


        :return: The name of this StreamingImage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StreamingImage.


        :param name: The name of this StreamingImage.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this StreamingImage.


        :return: The owner of this StreamingImage.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this StreamingImage.


        :param owner: The owner of this StreamingImage.
        :type owner: str
        """

        self._owner = owner

    @property
    def platform(self):
        """Gets the platform of this StreamingImage.


        :return: The platform of this StreamingImage.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this StreamingImage.


        :param platform: The platform of this StreamingImage.
        :type platform: str
        """

        self._platform = platform

    @property
    def state(self):
        """Gets the state of this StreamingImage.


        :return: The state of this StreamingImage.
        :rtype: StreamingImageState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StreamingImage.


        :param state: The state of this StreamingImage.
        :type state: StreamingImageState
        """

        self._state = state

    @property
    def status_code(self):
        """Gets the status_code of this StreamingImage.


        :return: The status_code of this StreamingImage.
        :rtype: StreamingImageStatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this StreamingImage.


        :param status_code: The status_code of this StreamingImage.
        :type status_code: StreamingImageStatusCode
        """

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this StreamingImage.


        :return: The status_message of this StreamingImage.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this StreamingImage.


        :param status_message: The status_message of this StreamingImage.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def streaming_image_id(self):
        """Gets the streaming_image_id of this StreamingImage.


        :return: The streaming_image_id of this StreamingImage.
        :rtype: str
        """
        return self._streaming_image_id

    @streaming_image_id.setter
    def streaming_image_id(self, streaming_image_id):
        """Sets the streaming_image_id of this StreamingImage.


        :param streaming_image_id: The streaming_image_id of this StreamingImage.
        :type streaming_image_id: str
        """

        self._streaming_image_id = streaming_image_id

    @property
    def tags(self):
        """Gets the tags of this StreamingImage.


        :return: The tags of this StreamingImage.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StreamingImage.


        :param tags: The tags of this StreamingImage.
        :type tags: Dict
        """

        self._tags = tags
