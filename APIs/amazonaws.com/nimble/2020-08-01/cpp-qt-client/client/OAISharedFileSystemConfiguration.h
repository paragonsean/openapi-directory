/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISharedFileSystemConfiguration.h
 *
 * The configuration for a shared file storage system that is associated with a studio resource.
 */

#ifndef OAISharedFileSystemConfiguration_H
#define OAISharedFileSystemConfiguration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISharedFileSystemConfiguration : public OAIObject {
public:
    OAISharedFileSystemConfiguration();
    OAISharedFileSystemConfiguration(QString json);
    ~OAISharedFileSystemConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    QString getLinuxMountPoint() const;
    void setLinuxMountPoint(const QString &linux_mount_point);
    bool is_linux_mount_point_Set() const;
    bool is_linux_mount_point_Valid() const;

    QString getShareName() const;
    void setShareName(const QString &share_name);
    bool is_share_name_Set() const;
    bool is_share_name_Valid() const;

    QString getWindowsMountDrive() const;
    void setWindowsMountDrive(const QString &windows_mount_drive);
    bool is_windows_mount_drive_Set() const;
    bool is_windows_mount_drive_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    QString m_linux_mount_point;
    bool m_linux_mount_point_isSet;
    bool m_linux_mount_point_isValid;

    QString m_share_name;
    bool m_share_name_isSet;
    bool m_share_name_isValid;

    QString m_windows_mount_drive;
    bool m_windows_mount_drive_isSet;
    bool m_windows_mount_drive_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISharedFileSystemConfiguration)

#endif // OAISharedFileSystemConfiguration_H
