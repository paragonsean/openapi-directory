/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchProfileInitialization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchProfileInitialization::OAILaunchProfileInitialization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchProfileInitialization::OAILaunchProfileInitialization() {
    this->initializeModel();
}

OAILaunchProfileInitialization::~OAILaunchProfileInitialization() {}

void OAILaunchProfileInitialization::initializeModel() {

    m_active_directory_isSet = false;
    m_active_directory_isValid = false;

    m_ec2_security_group_ids_isSet = false;
    m_ec2_security_group_ids_isValid = false;

    m_launch_profile_id_isSet = false;
    m_launch_profile_id_isValid = false;

    m_launch_profile_protocol_version_isSet = false;
    m_launch_profile_protocol_version_isValid = false;

    m_launch_purpose_isSet = false;
    m_launch_purpose_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_system_initialization_scripts_isSet = false;
    m_system_initialization_scripts_isValid = false;

    m_user_initialization_scripts_isSet = false;
    m_user_initialization_scripts_isValid = false;
}

void OAILaunchProfileInitialization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchProfileInitialization::fromJsonObject(QJsonObject json) {

    m_active_directory_isValid = ::OpenAPI::fromJsonValue(m_active_directory, json[QString("activeDirectory")]);
    m_active_directory_isSet = !json[QString("activeDirectory")].isNull() && m_active_directory_isValid;

    m_ec2_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_ec2_security_group_ids, json[QString("ec2SecurityGroupIds")]);
    m_ec2_security_group_ids_isSet = !json[QString("ec2SecurityGroupIds")].isNull() && m_ec2_security_group_ids_isValid;

    m_launch_profile_id_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_id, json[QString("launchProfileId")]);
    m_launch_profile_id_isSet = !json[QString("launchProfileId")].isNull() && m_launch_profile_id_isValid;

    m_launch_profile_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_protocol_version, json[QString("launchProfileProtocolVersion")]);
    m_launch_profile_protocol_version_isSet = !json[QString("launchProfileProtocolVersion")].isNull() && m_launch_profile_protocol_version_isValid;

    m_launch_purpose_isValid = ::OpenAPI::fromJsonValue(m_launch_purpose, json[QString("launchPurpose")]);
    m_launch_purpose_isSet = !json[QString("launchPurpose")].isNull() && m_launch_purpose_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_system_initialization_scripts_isValid = ::OpenAPI::fromJsonValue(m_system_initialization_scripts, json[QString("systemInitializationScripts")]);
    m_system_initialization_scripts_isSet = !json[QString("systemInitializationScripts")].isNull() && m_system_initialization_scripts_isValid;

    m_user_initialization_scripts_isValid = ::OpenAPI::fromJsonValue(m_user_initialization_scripts, json[QString("userInitializationScripts")]);
    m_user_initialization_scripts_isSet = !json[QString("userInitializationScripts")].isNull() && m_user_initialization_scripts_isValid;
}

QString OAILaunchProfileInitialization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchProfileInitialization::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory.isSet()) {
        obj.insert(QString("activeDirectory"), ::OpenAPI::toJsonValue(m_active_directory));
    }
    if (m_ec2_security_group_ids.isSet()) {
        obj.insert(QString("ec2SecurityGroupIds"), ::OpenAPI::toJsonValue(m_ec2_security_group_ids));
    }
    if (m_launch_profile_id_isSet) {
        obj.insert(QString("launchProfileId"), ::OpenAPI::toJsonValue(m_launch_profile_id));
    }
    if (m_launch_profile_protocol_version_isSet) {
        obj.insert(QString("launchProfileProtocolVersion"), ::OpenAPI::toJsonValue(m_launch_profile_protocol_version));
    }
    if (m_launch_purpose_isSet) {
        obj.insert(QString("launchPurpose"), ::OpenAPI::toJsonValue(m_launch_purpose));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_system_initialization_scripts.isSet()) {
        obj.insert(QString("systemInitializationScripts"), ::OpenAPI::toJsonValue(m_system_initialization_scripts));
    }
    if (m_user_initialization_scripts.isSet()) {
        obj.insert(QString("userInitializationScripts"), ::OpenAPI::toJsonValue(m_user_initialization_scripts));
    }
    return obj;
}

OAILaunchProfileInitialization_activeDirectory OAILaunchProfileInitialization::getActiveDirectory() const {
    return m_active_directory;
}
void OAILaunchProfileInitialization::setActiveDirectory(const OAILaunchProfileInitialization_activeDirectory &active_directory) {
    m_active_directory = active_directory;
    m_active_directory_isSet = true;
}

bool OAILaunchProfileInitialization::is_active_directory_Set() const{
    return m_active_directory_isSet;
}

bool OAILaunchProfileInitialization::is_active_directory_Valid() const{
    return m_active_directory_isValid;
}

QList OAILaunchProfileInitialization::getEc2SecurityGroupIds() const {
    return m_ec2_security_group_ids;
}
void OAILaunchProfileInitialization::setEc2SecurityGroupIds(const QList &ec2_security_group_ids) {
    m_ec2_security_group_ids = ec2_security_group_ids;
    m_ec2_security_group_ids_isSet = true;
}

bool OAILaunchProfileInitialization::is_ec2_security_group_ids_Set() const{
    return m_ec2_security_group_ids_isSet;
}

bool OAILaunchProfileInitialization::is_ec2_security_group_ids_Valid() const{
    return m_ec2_security_group_ids_isValid;
}

QString OAILaunchProfileInitialization::getLaunchProfileId() const {
    return m_launch_profile_id;
}
void OAILaunchProfileInitialization::setLaunchProfileId(const QString &launch_profile_id) {
    m_launch_profile_id = launch_profile_id;
    m_launch_profile_id_isSet = true;
}

bool OAILaunchProfileInitialization::is_launch_profile_id_Set() const{
    return m_launch_profile_id_isSet;
}

bool OAILaunchProfileInitialization::is_launch_profile_id_Valid() const{
    return m_launch_profile_id_isValid;
}

QString OAILaunchProfileInitialization::getLaunchProfileProtocolVersion() const {
    return m_launch_profile_protocol_version;
}
void OAILaunchProfileInitialization::setLaunchProfileProtocolVersion(const QString &launch_profile_protocol_version) {
    m_launch_profile_protocol_version = launch_profile_protocol_version;
    m_launch_profile_protocol_version_isSet = true;
}

bool OAILaunchProfileInitialization::is_launch_profile_protocol_version_Set() const{
    return m_launch_profile_protocol_version_isSet;
}

bool OAILaunchProfileInitialization::is_launch_profile_protocol_version_Valid() const{
    return m_launch_profile_protocol_version_isValid;
}

QString OAILaunchProfileInitialization::getLaunchPurpose() const {
    return m_launch_purpose;
}
void OAILaunchProfileInitialization::setLaunchPurpose(const QString &launch_purpose) {
    m_launch_purpose = launch_purpose;
    m_launch_purpose_isSet = true;
}

bool OAILaunchProfileInitialization::is_launch_purpose_Set() const{
    return m_launch_purpose_isSet;
}

bool OAILaunchProfileInitialization::is_launch_purpose_Valid() const{
    return m_launch_purpose_isValid;
}

QString OAILaunchProfileInitialization::getName() const {
    return m_name;
}
void OAILaunchProfileInitialization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILaunchProfileInitialization::is_name_Set() const{
    return m_name_isSet;
}

bool OAILaunchProfileInitialization::is_name_Valid() const{
    return m_name_isValid;
}

OAILaunchProfilePlatform OAILaunchProfileInitialization::getPlatform() const {
    return m_platform;
}
void OAILaunchProfileInitialization::setPlatform(const OAILaunchProfilePlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAILaunchProfileInitialization::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAILaunchProfileInitialization::is_platform_Valid() const{
    return m_platform_isValid;
}

QList OAILaunchProfileInitialization::getSystemInitializationScripts() const {
    return m_system_initialization_scripts;
}
void OAILaunchProfileInitialization::setSystemInitializationScripts(const QList &system_initialization_scripts) {
    m_system_initialization_scripts = system_initialization_scripts;
    m_system_initialization_scripts_isSet = true;
}

bool OAILaunchProfileInitialization::is_system_initialization_scripts_Set() const{
    return m_system_initialization_scripts_isSet;
}

bool OAILaunchProfileInitialization::is_system_initialization_scripts_Valid() const{
    return m_system_initialization_scripts_isValid;
}

QList OAILaunchProfileInitialization::getUserInitializationScripts() const {
    return m_user_initialization_scripts;
}
void OAILaunchProfileInitialization::setUserInitializationScripts(const QList &user_initialization_scripts) {
    m_user_initialization_scripts = user_initialization_scripts;
    m_user_initialization_scripts_isSet = true;
}

bool OAILaunchProfileInitialization::is_user_initialization_scripts_Set() const{
    return m_user_initialization_scripts_isSet;
}

bool OAILaunchProfileInitialization::is_user_initialization_scripts_Valid() const{
    return m_user_initialization_scripts_isValid;
}

bool OAILaunchProfileInitialization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_profile_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_initialization_scripts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_initialization_scripts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchProfileInitialization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
