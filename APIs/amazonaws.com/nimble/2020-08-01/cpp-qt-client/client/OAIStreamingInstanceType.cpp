/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingInstanceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingInstanceType::OAIStreamingInstanceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingInstanceType::OAIStreamingInstanceType() {
    this->initializeModel();
}

OAIStreamingInstanceType::~OAIStreamingInstanceType() {}

void OAIStreamingInstanceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStreamingInstanceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStreamingInstanceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("g4dn.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G4DN_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g4dn.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G4DN_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g4dn.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G4DN_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g4dn.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G4DN_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g4dn.12xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G4DN_12XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g4dn.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G4DN_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g3.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G3_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g3s.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G3S_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g5.xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G5_XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g5.2xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G5_2XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g5.4xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G5_4XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g5.8xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G5_8XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("g5.16xlarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingInstanceType::G5_16XLARGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStreamingInstanceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStreamingInstanceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStreamingInstanceType::G4DN_XLARGE:
            val = "g4dn.xlarge";
            break;
        case eOAIStreamingInstanceType::G4DN_2XLARGE:
            val = "g4dn.2xlarge";
            break;
        case eOAIStreamingInstanceType::G4DN_4XLARGE:
            val = "g4dn.4xlarge";
            break;
        case eOAIStreamingInstanceType::G4DN_8XLARGE:
            val = "g4dn.8xlarge";
            break;
        case eOAIStreamingInstanceType::G4DN_12XLARGE:
            val = "g4dn.12xlarge";
            break;
        case eOAIStreamingInstanceType::G4DN_16XLARGE:
            val = "g4dn.16xlarge";
            break;
        case eOAIStreamingInstanceType::G3_4XLARGE:
            val = "g3.4xlarge";
            break;
        case eOAIStreamingInstanceType::G3S_XLARGE:
            val = "g3s.xlarge";
            break;
        case eOAIStreamingInstanceType::G5_XLARGE:
            val = "g5.xlarge";
            break;
        case eOAIStreamingInstanceType::G5_2XLARGE:
            val = "g5.2xlarge";
            break;
        case eOAIStreamingInstanceType::G5_4XLARGE:
            val = "g5.4xlarge";
            break;
        case eOAIStreamingInstanceType::G5_8XLARGE:
            val = "g5.8xlarge";
            break;
        case eOAIStreamingInstanceType::G5_16XLARGE:
            val = "g5.16xlarge";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStreamingInstanceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStreamingInstanceType::eOAIStreamingInstanceType OAIStreamingInstanceType::getValue() const {
    return m_value;
}

void OAIStreamingInstanceType::setValue(const OAIStreamingInstanceType::eOAIStreamingInstanceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStreamingInstanceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIStreamingInstanceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
