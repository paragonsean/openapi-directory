/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedFileSystemConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedFileSystemConfiguration::OAISharedFileSystemConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedFileSystemConfiguration::OAISharedFileSystemConfiguration() {
    this->initializeModel();
}

OAISharedFileSystemConfiguration::~OAISharedFileSystemConfiguration() {}

void OAISharedFileSystemConfiguration::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_linux_mount_point_isSet = false;
    m_linux_mount_point_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_windows_mount_drive_isSet = false;
    m_windows_mount_drive_isValid = false;
}

void OAISharedFileSystemConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedFileSystemConfiguration::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_linux_mount_point_isValid = ::OpenAPI::fromJsonValue(m_linux_mount_point, json[QString("linuxMountPoint")]);
    m_linux_mount_point_isSet = !json[QString("linuxMountPoint")].isNull() && m_linux_mount_point_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_windows_mount_drive_isValid = ::OpenAPI::fromJsonValue(m_windows_mount_drive, json[QString("windowsMountDrive")]);
    m_windows_mount_drive_isSet = !json[QString("windowsMountDrive")].isNull() && m_windows_mount_drive_isValid;
}

QString OAISharedFileSystemConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedFileSystemConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_linux_mount_point_isSet) {
        obj.insert(QString("linuxMountPoint"), ::OpenAPI::toJsonValue(m_linux_mount_point));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_windows_mount_drive_isSet) {
        obj.insert(QString("windowsMountDrive"), ::OpenAPI::toJsonValue(m_windows_mount_drive));
    }
    return obj;
}

QString OAISharedFileSystemConfiguration::getEndpoint() const {
    return m_endpoint;
}
void OAISharedFileSystemConfiguration::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAISharedFileSystemConfiguration::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAISharedFileSystemConfiguration::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAISharedFileSystemConfiguration::getFileSystemId() const {
    return m_file_system_id;
}
void OAISharedFileSystemConfiguration::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAISharedFileSystemConfiguration::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAISharedFileSystemConfiguration::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAISharedFileSystemConfiguration::getLinuxMountPoint() const {
    return m_linux_mount_point;
}
void OAISharedFileSystemConfiguration::setLinuxMountPoint(const QString &linux_mount_point) {
    m_linux_mount_point = linux_mount_point;
    m_linux_mount_point_isSet = true;
}

bool OAISharedFileSystemConfiguration::is_linux_mount_point_Set() const{
    return m_linux_mount_point_isSet;
}

bool OAISharedFileSystemConfiguration::is_linux_mount_point_Valid() const{
    return m_linux_mount_point_isValid;
}

QString OAISharedFileSystemConfiguration::getShareName() const {
    return m_share_name;
}
void OAISharedFileSystemConfiguration::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAISharedFileSystemConfiguration::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAISharedFileSystemConfiguration::is_share_name_Valid() const{
    return m_share_name_isValid;
}

QString OAISharedFileSystemConfiguration::getWindowsMountDrive() const {
    return m_windows_mount_drive;
}
void OAISharedFileSystemConfiguration::setWindowsMountDrive(const QString &windows_mount_drive) {
    m_windows_mount_drive = windows_mount_drive;
    m_windows_mount_drive_isSet = true;
}

bool OAISharedFileSystemConfiguration::is_windows_mount_drive_Set() const{
    return m_windows_mount_drive_isSet;
}

bool OAISharedFileSystemConfiguration::is_windows_mount_drive_Valid() const{
    return m_windows_mount_drive_isValid;
}

bool OAISharedFileSystemConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_mount_drive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedFileSystemConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
