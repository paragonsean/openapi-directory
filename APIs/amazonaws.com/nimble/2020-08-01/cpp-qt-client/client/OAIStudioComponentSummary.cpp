/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudioComponentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudioComponentSummary::OAIStudioComponentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudioComponentSummary::OAIStudioComponentSummary() {
    this->initializeModel();
}

OAIStudioComponentSummary::~OAIStudioComponentSummary() {}

void OAIStudioComponentSummary::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_studio_component_id_isSet = false;
    m_studio_component_id_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIStudioComponentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStudioComponentSummary::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_studio_component_id_isValid = ::OpenAPI::fromJsonValue(m_studio_component_id, json[QString("studioComponentId")]);
    m_studio_component_id_isSet = !json[QString("studioComponentId")].isNull() && m_studio_component_id_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIStudioComponentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStudioComponentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_studio_component_id_isSet) {
        obj.insert(QString("studioComponentId"), ::OpenAPI::toJsonValue(m_studio_component_id));
    }
    if (m_subtype.isSet()) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QDateTime OAIStudioComponentSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIStudioComponentSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStudioComponentSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStudioComponentSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStudioComponentSummary::getCreatedBy() const {
    return m_created_by;
}
void OAIStudioComponentSummary::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStudioComponentSummary::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStudioComponentSummary::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIStudioComponentSummary::getDescription() const {
    return m_description;
}
void OAIStudioComponentSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStudioComponentSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStudioComponentSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStudioComponentSummary::getName() const {
    return m_name;
}
void OAIStudioComponentSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStudioComponentSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStudioComponentSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStudioComponentSummary::getStudioComponentId() const {
    return m_studio_component_id;
}
void OAIStudioComponentSummary::setStudioComponentId(const QString &studio_component_id) {
    m_studio_component_id = studio_component_id;
    m_studio_component_id_isSet = true;
}

bool OAIStudioComponentSummary::is_studio_component_id_Set() const{
    return m_studio_component_id_isSet;
}

bool OAIStudioComponentSummary::is_studio_component_id_Valid() const{
    return m_studio_component_id_isValid;
}

OAIStudioComponentSubtype OAIStudioComponentSummary::getSubtype() const {
    return m_subtype;
}
void OAIStudioComponentSummary::setSubtype(const OAIStudioComponentSubtype &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIStudioComponentSummary::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIStudioComponentSummary::is_subtype_Valid() const{
    return m_subtype_isValid;
}

OAIStudioComponentType OAIStudioComponentSummary::getType() const {
    return m_type;
}
void OAIStudioComponentSummary::setType(const OAIStudioComponentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStudioComponentSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStudioComponentSummary::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIStudioComponentSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStudioComponentSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStudioComponentSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStudioComponentSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIStudioComponentSummary::getUpdatedBy() const {
    return m_updated_by;
}
void OAIStudioComponentSummary::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIStudioComponentSummary::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIStudioComponentSummary::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIStudioComponentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStudioComponentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
