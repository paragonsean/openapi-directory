/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateStreamingSession_request.h
 *
 * 
 */

#ifndef OAICreateStreamingSession_request_H
#define OAICreateStreamingSession_request_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateStreamingSession_request : public OAIObject {
public:
    OAICreateStreamingSession_request();
    OAICreateStreamingSession_request(QString json);
    ~OAICreateStreamingSession_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEc2InstanceType() const;
    void setEc2InstanceType(const QString &ec2_instance_type);
    bool is_ec2_instance_type_Set() const;
    bool is_ec2_instance_type_Valid() const;

    QString getLaunchProfileId() const;
    void setLaunchProfileId(const QString &launch_profile_id);
    bool is_launch_profile_id_Set() const;
    bool is_launch_profile_id_Valid() const;

    QString getOwnedBy() const;
    void setOwnedBy(const QString &owned_by);
    bool is_owned_by_Set() const;
    bool is_owned_by_Valid() const;

    QString getStreamingImageId() const;
    void setStreamingImageId(const QString &streaming_image_id);
    bool is_streaming_image_id_Set() const;
    bool is_streaming_image_id_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ec2_instance_type;
    bool m_ec2_instance_type_isSet;
    bool m_ec2_instance_type_isValid;

    QString m_launch_profile_id;
    bool m_launch_profile_id_isSet;
    bool m_launch_profile_id_isValid;

    QString m_owned_by;
    bool m_owned_by_isSet;
    bool m_owned_by_isValid;

    QString m_streaming_image_id;
    bool m_streaming_image_id_isSet;
    bool m_streaming_image_id_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateStreamingSession_request)

#endif // OAICreateStreamingSession_request_H
