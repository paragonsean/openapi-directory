/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEulaResponse_eula.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEulaResponse_eula::OAIGetEulaResponse_eula(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEulaResponse_eula::OAIGetEulaResponse_eula() {
    this->initializeModel();
}

OAIGetEulaResponse_eula::~OAIGetEulaResponse_eula() {}

void OAIGetEulaResponse_eula::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_eula_id_isSet = false;
    m_eula_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetEulaResponse_eula::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEulaResponse_eula::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_eula_id_isValid = ::OpenAPI::fromJsonValue(m_eula_id, json[QString("eulaId")]);
    m_eula_id_isSet = !json[QString("eulaId")].isNull() && m_eula_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIGetEulaResponse_eula::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEulaResponse_eula::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_eula_id_isSet) {
        obj.insert(QString("eulaId"), ::OpenAPI::toJsonValue(m_eula_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIGetEulaResponse_eula::getContent() const {
    return m_content;
}
void OAIGetEulaResponse_eula::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGetEulaResponse_eula::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGetEulaResponse_eula::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIGetEulaResponse_eula::getCreatedAt() const {
    return m_created_at;
}
void OAIGetEulaResponse_eula::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetEulaResponse_eula::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetEulaResponse_eula::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGetEulaResponse_eula::getEulaId() const {
    return m_eula_id;
}
void OAIGetEulaResponse_eula::setEulaId(const QString &eula_id) {
    m_eula_id = eula_id;
    m_eula_id_isSet = true;
}

bool OAIGetEulaResponse_eula::is_eula_id_Set() const{
    return m_eula_id_isSet;
}

bool OAIGetEulaResponse_eula::is_eula_id_Valid() const{
    return m_eula_id_isValid;
}

QString OAIGetEulaResponse_eula::getName() const {
    return m_name;
}
void OAIGetEulaResponse_eula::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetEulaResponse_eula::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetEulaResponse_eula::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIGetEulaResponse_eula::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetEulaResponse_eula::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetEulaResponse_eula::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetEulaResponse_eula::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetEulaResponse_eula::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEulaResponse_eula::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
