/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListStreamingImagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListStreamingImagesResponse::OAIListStreamingImagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListStreamingImagesResponse::OAIListStreamingImagesResponse() {
    this->initializeModel();
}

OAIListStreamingImagesResponse::~OAIListStreamingImagesResponse() {}

void OAIListStreamingImagesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_streaming_images_isSet = false;
    m_streaming_images_isValid = false;
}

void OAIListStreamingImagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListStreamingImagesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_streaming_images_isValid = ::OpenAPI::fromJsonValue(m_streaming_images, json[QString("streamingImages")]);
    m_streaming_images_isSet = !json[QString("streamingImages")].isNull() && m_streaming_images_isValid;
}

QString OAIListStreamingImagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListStreamingImagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_streaming_images.isSet()) {
        obj.insert(QString("streamingImages"), ::OpenAPI::toJsonValue(m_streaming_images));
    }
    return obj;
}

QString OAIListStreamingImagesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListStreamingImagesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListStreamingImagesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListStreamingImagesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListStreamingImagesResponse::getStreamingImages() const {
    return m_streaming_images;
}
void OAIListStreamingImagesResponse::setStreamingImages(const QList &streaming_images) {
    m_streaming_images = streaming_images;
    m_streaming_images_isSet = true;
}

bool OAIListStreamingImagesResponse::is_streaming_images_Set() const{
    return m_streaming_images_isSet;
}

bool OAIListStreamingImagesResponse::is_streaming_images_Valid() const{
    return m_streaming_images_isValid;
}

bool OAIListStreamingImagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_images.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListStreamingImagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
