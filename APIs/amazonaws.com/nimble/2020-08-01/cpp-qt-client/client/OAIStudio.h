/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStudio.h
 *
 * &lt;p&gt;Represents a studio resource.&lt;/p&gt; &lt;p&gt;A studio is the core resource used with Nimble Studio. You must create a studio first, before any other resource type can be created. All other resources you create and manage in Nimble Studio are contained within a studio.&lt;/p&gt; &lt;p&gt;When creating a studio, you must provides two IAM roles for use with the Nimble Studio portal. These roles are assumed by your users when they log in to the Nimble Studio portal via IAM Identity Center and your identity source.&lt;/p&gt; &lt;p&gt;The user role must have the &lt;code&gt;AmazonNimbleStudio-StudioUser&lt;/code&gt; managed policy attached for the portal to function properly.&lt;/p&gt; &lt;p&gt;The admin role must have the &lt;code&gt;AmazonNimbleStudio-StudioAdmin&lt;/code&gt; managed policy attached for the portal to function properly.&lt;/p&gt; &lt;p&gt;Your studio roles must trust the &lt;code&gt;identity.nimble.amazonaws.com&lt;/code&gt; service principal to function properly.&lt;/p&gt;
 */

#ifndef OAIStudio_H
#define OAIStudio_H

#include <QJsonObject>

#include "OAIStudioState.h"
#include "OAIStudioStatusCode.h"
#include "OAIStudio_studioEncryptionConfiguration.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStudio_studioEncryptionConfiguration;

class OAIStudio : public OAIObject {
public:
    OAIStudio();
    OAIStudio(QString json);
    ~OAIStudio() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdminRoleArn() const;
    void setAdminRoleArn(const QString &admin_role_arn);
    bool is_admin_role_arn_Set() const;
    bool is_admin_role_arn_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getHomeRegion() const;
    void setHomeRegion(const QString &home_region);
    bool is_home_region_Set() const;
    bool is_home_region_Valid() const;

    QString getSsoClientId() const;
    void setSsoClientId(const QString &sso_client_id);
    bool is_sso_client_id_Set() const;
    bool is_sso_client_id_Valid() const;

    OAIStudioState getState() const;
    void setState(const OAIStudioState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIStudioStatusCode getStatusCode() const;
    void setStatusCode(const OAIStudioStatusCode &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    OAIStudio_studioEncryptionConfiguration getStudioEncryptionConfiguration() const;
    void setStudioEncryptionConfiguration(const OAIStudio_studioEncryptionConfiguration &studio_encryption_configuration);
    bool is_studio_encryption_configuration_Set() const;
    bool is_studio_encryption_configuration_Valid() const;

    QString getStudioId() const;
    void setStudioId(const QString &studio_id);
    bool is_studio_id_Set() const;
    bool is_studio_id_Valid() const;

    QString getStudioName() const;
    void setStudioName(const QString &studio_name);
    bool is_studio_name_Set() const;
    bool is_studio_name_Valid() const;

    QString getStudioUrl() const;
    void setStudioUrl(const QString &studio_url);
    bool is_studio_url_Set() const;
    bool is_studio_url_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUserRoleArn() const;
    void setUserRoleArn(const QString &user_role_arn);
    bool is_user_role_arn_Set() const;
    bool is_user_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_admin_role_arn;
    bool m_admin_role_arn_isSet;
    bool m_admin_role_arn_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_home_region;
    bool m_home_region_isSet;
    bool m_home_region_isValid;

    QString m_sso_client_id;
    bool m_sso_client_id_isSet;
    bool m_sso_client_id_isValid;

    OAIStudioState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIStudioStatusCode m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    OAIStudio_studioEncryptionConfiguration m_studio_encryption_configuration;
    bool m_studio_encryption_configuration_isSet;
    bool m_studio_encryption_configuration_isValid;

    QString m_studio_id;
    bool m_studio_id_isSet;
    bool m_studio_id_isValid;

    QString m_studio_name;
    bool m_studio_name_isSet;
    bool m_studio_name_isValid;

    QString m_studio_url;
    bool m_studio_url_isSet;
    bool m_studio_url_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_user_role_arn;
    bool m_user_role_arn_isSet;
    bool m_user_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStudio)

#endif // OAIStudio_H
