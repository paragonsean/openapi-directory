/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEulaAcceptance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEulaAcceptance::OAIEulaAcceptance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEulaAcceptance::OAIEulaAcceptance() {
    this->initializeModel();
}

OAIEulaAcceptance::~OAIEulaAcceptance() {}

void OAIEulaAcceptance::initializeModel() {

    m_accepted_at_isSet = false;
    m_accepted_at_isValid = false;

    m_accepted_by_isSet = false;
    m_accepted_by_isValid = false;

    m_acceptee_id_isSet = false;
    m_acceptee_id_isValid = false;

    m_eula_acceptance_id_isSet = false;
    m_eula_acceptance_id_isValid = false;

    m_eula_id_isSet = false;
    m_eula_id_isValid = false;
}

void OAIEulaAcceptance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEulaAcceptance::fromJsonObject(QJsonObject json) {

    m_accepted_at_isValid = ::OpenAPI::fromJsonValue(m_accepted_at, json[QString("acceptedAt")]);
    m_accepted_at_isSet = !json[QString("acceptedAt")].isNull() && m_accepted_at_isValid;

    m_accepted_by_isValid = ::OpenAPI::fromJsonValue(m_accepted_by, json[QString("acceptedBy")]);
    m_accepted_by_isSet = !json[QString("acceptedBy")].isNull() && m_accepted_by_isValid;

    m_acceptee_id_isValid = ::OpenAPI::fromJsonValue(m_acceptee_id, json[QString("accepteeId")]);
    m_acceptee_id_isSet = !json[QString("accepteeId")].isNull() && m_acceptee_id_isValid;

    m_eula_acceptance_id_isValid = ::OpenAPI::fromJsonValue(m_eula_acceptance_id, json[QString("eulaAcceptanceId")]);
    m_eula_acceptance_id_isSet = !json[QString("eulaAcceptanceId")].isNull() && m_eula_acceptance_id_isValid;

    m_eula_id_isValid = ::OpenAPI::fromJsonValue(m_eula_id, json[QString("eulaId")]);
    m_eula_id_isSet = !json[QString("eulaId")].isNull() && m_eula_id_isValid;
}

QString OAIEulaAcceptance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEulaAcceptance::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_at_isSet) {
        obj.insert(QString("acceptedAt"), ::OpenAPI::toJsonValue(m_accepted_at));
    }
    if (m_accepted_by_isSet) {
        obj.insert(QString("acceptedBy"), ::OpenAPI::toJsonValue(m_accepted_by));
    }
    if (m_acceptee_id_isSet) {
        obj.insert(QString("accepteeId"), ::OpenAPI::toJsonValue(m_acceptee_id));
    }
    if (m_eula_acceptance_id_isSet) {
        obj.insert(QString("eulaAcceptanceId"), ::OpenAPI::toJsonValue(m_eula_acceptance_id));
    }
    if (m_eula_id_isSet) {
        obj.insert(QString("eulaId"), ::OpenAPI::toJsonValue(m_eula_id));
    }
    return obj;
}

QDateTime OAIEulaAcceptance::getAcceptedAt() const {
    return m_accepted_at;
}
void OAIEulaAcceptance::setAcceptedAt(const QDateTime &accepted_at) {
    m_accepted_at = accepted_at;
    m_accepted_at_isSet = true;
}

bool OAIEulaAcceptance::is_accepted_at_Set() const{
    return m_accepted_at_isSet;
}

bool OAIEulaAcceptance::is_accepted_at_Valid() const{
    return m_accepted_at_isValid;
}

QString OAIEulaAcceptance::getAcceptedBy() const {
    return m_accepted_by;
}
void OAIEulaAcceptance::setAcceptedBy(const QString &accepted_by) {
    m_accepted_by = accepted_by;
    m_accepted_by_isSet = true;
}

bool OAIEulaAcceptance::is_accepted_by_Set() const{
    return m_accepted_by_isSet;
}

bool OAIEulaAcceptance::is_accepted_by_Valid() const{
    return m_accepted_by_isValid;
}

QString OAIEulaAcceptance::getAccepteeId() const {
    return m_acceptee_id;
}
void OAIEulaAcceptance::setAccepteeId(const QString &acceptee_id) {
    m_acceptee_id = acceptee_id;
    m_acceptee_id_isSet = true;
}

bool OAIEulaAcceptance::is_acceptee_id_Set() const{
    return m_acceptee_id_isSet;
}

bool OAIEulaAcceptance::is_acceptee_id_Valid() const{
    return m_acceptee_id_isValid;
}

QString OAIEulaAcceptance::getEulaAcceptanceId() const {
    return m_eula_acceptance_id;
}
void OAIEulaAcceptance::setEulaAcceptanceId(const QString &eula_acceptance_id) {
    m_eula_acceptance_id = eula_acceptance_id;
    m_eula_acceptance_id_isSet = true;
}

bool OAIEulaAcceptance::is_eula_acceptance_id_Set() const{
    return m_eula_acceptance_id_isSet;
}

bool OAIEulaAcceptance::is_eula_acceptance_id_Valid() const{
    return m_eula_acceptance_id_isValid;
}

QString OAIEulaAcceptance::getEulaId() const {
    return m_eula_id;
}
void OAIEulaAcceptance::setEulaId(const QString &eula_id) {
    m_eula_id = eula_id;
    m_eula_id_isSet = true;
}

bool OAIEulaAcceptance::is_eula_id_Set() const{
    return m_eula_id_isSet;
}

bool OAIEulaAcceptance::is_eula_id_Valid() const{
    return m_eula_id_isValid;
}

bool OAIEulaAcceptance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acceptee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_acceptance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEulaAcceptance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
