/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILaunchProfileInitialization.h
 *
 * &lt;p&gt;A launch profile initialization contains information required for a workstation or server to connect to a launch profile.&lt;/p&gt; &lt;p&gt;This includes scripts, endpoints, security groups, subnets, and other configuration.&lt;/p&gt;
 */

#ifndef OAILaunchProfileInitialization_H
#define OAILaunchProfileInitialization_H

#include <QJsonObject>

#include "OAILaunchProfileInitialization_activeDirectory.h"
#include "OAILaunchProfilePlatform.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILaunchProfileInitialization_activeDirectory;

class OAILaunchProfileInitialization : public OAIObject {
public:
    OAILaunchProfileInitialization();
    OAILaunchProfileInitialization(QString json);
    ~OAILaunchProfileInitialization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILaunchProfileInitialization_activeDirectory getActiveDirectory() const;
    void setActiveDirectory(const OAILaunchProfileInitialization_activeDirectory &active_directory);
    bool is_active_directory_Set() const;
    bool is_active_directory_Valid() const;

    QList getEc2SecurityGroupIds() const;
    void setEc2SecurityGroupIds(const QList &ec2_security_group_ids);
    bool is_ec2_security_group_ids_Set() const;
    bool is_ec2_security_group_ids_Valid() const;

    QString getLaunchProfileId() const;
    void setLaunchProfileId(const QString &launch_profile_id);
    bool is_launch_profile_id_Set() const;
    bool is_launch_profile_id_Valid() const;

    QString getLaunchProfileProtocolVersion() const;
    void setLaunchProfileProtocolVersion(const QString &launch_profile_protocol_version);
    bool is_launch_profile_protocol_version_Set() const;
    bool is_launch_profile_protocol_version_Valid() const;

    QString getLaunchPurpose() const;
    void setLaunchPurpose(const QString &launch_purpose);
    bool is_launch_purpose_Set() const;
    bool is_launch_purpose_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAILaunchProfilePlatform getPlatform() const;
    void setPlatform(const OAILaunchProfilePlatform &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QList getSystemInitializationScripts() const;
    void setSystemInitializationScripts(const QList &system_initialization_scripts);
    bool is_system_initialization_scripts_Set() const;
    bool is_system_initialization_scripts_Valid() const;

    QList getUserInitializationScripts() const;
    void setUserInitializationScripts(const QList &user_initialization_scripts);
    bool is_user_initialization_scripts_Set() const;
    bool is_user_initialization_scripts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILaunchProfileInitialization_activeDirectory m_active_directory;
    bool m_active_directory_isSet;
    bool m_active_directory_isValid;

    QList m_ec2_security_group_ids;
    bool m_ec2_security_group_ids_isSet;
    bool m_ec2_security_group_ids_isValid;

    QString m_launch_profile_id;
    bool m_launch_profile_id_isSet;
    bool m_launch_profile_id_isValid;

    QString m_launch_profile_protocol_version;
    bool m_launch_profile_protocol_version_isSet;
    bool m_launch_profile_protocol_version_isValid;

    QString m_launch_purpose;
    bool m_launch_purpose_isSet;
    bool m_launch_purpose_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAILaunchProfilePlatform m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QList m_system_initialization_scripts;
    bool m_system_initialization_scripts_isSet;
    bool m_system_initialization_scripts_isValid;

    QList m_user_initialization_scripts;
    bool m_user_initialization_scripts_isSet;
    bool m_user_initialization_scripts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILaunchProfileInitialization)

#endif // OAILaunchProfileInitialization_H
