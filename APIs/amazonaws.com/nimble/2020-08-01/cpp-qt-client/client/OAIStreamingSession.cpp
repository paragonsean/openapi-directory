/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingSession::OAIStreamingSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingSession::OAIStreamingSession() {
    this->initializeModel();
}

OAIStreamingSession::~OAIStreamingSession() {}

void OAIStreamingSession::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_automatic_termination_mode_isSet = false;
    m_automatic_termination_mode_isValid = false;

    m_backup_mode_isSet = false;
    m_backup_mode_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_ec2_instance_type_isSet = false;
    m_ec2_instance_type_isValid = false;

    m_launch_profile_id_isSet = false;
    m_launch_profile_id_isValid = false;

    m_max_backups_to_retain_isSet = false;
    m_max_backups_to_retain_isValid = false;

    m_owned_by_isSet = false;
    m_owned_by_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_session_persistence_mode_isSet = false;
    m_session_persistence_mode_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_started_by_isSet = false;
    m_started_by_isValid = false;

    m_started_from_backup_id_isSet = false;
    m_started_from_backup_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_stop_at_isSet = false;
    m_stop_at_isValid = false;

    m_stopped_at_isSet = false;
    m_stopped_at_isValid = false;

    m_stopped_by_isSet = false;
    m_stopped_by_isValid = false;

    m_streaming_image_id_isSet = false;
    m_streaming_image_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_terminate_at_isSet = false;
    m_terminate_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_volume_configuration_isSet = false;
    m_volume_configuration_isValid = false;

    m_volume_retention_mode_isSet = false;
    m_volume_retention_mode_isValid = false;
}

void OAIStreamingSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingSession::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_automatic_termination_mode_isValid = ::OpenAPI::fromJsonValue(m_automatic_termination_mode, json[QString("automaticTerminationMode")]);
    m_automatic_termination_mode_isSet = !json[QString("automaticTerminationMode")].isNull() && m_automatic_termination_mode_isValid;

    m_backup_mode_isValid = ::OpenAPI::fromJsonValue(m_backup_mode, json[QString("backupMode")]);
    m_backup_mode_isSet = !json[QString("backupMode")].isNull() && m_backup_mode_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_ec2_instance_type_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_type, json[QString("ec2InstanceType")]);
    m_ec2_instance_type_isSet = !json[QString("ec2InstanceType")].isNull() && m_ec2_instance_type_isValid;

    m_launch_profile_id_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_id, json[QString("launchProfileId")]);
    m_launch_profile_id_isSet = !json[QString("launchProfileId")].isNull() && m_launch_profile_id_isValid;

    m_max_backups_to_retain_isValid = ::OpenAPI::fromJsonValue(m_max_backups_to_retain, json[QString("maxBackupsToRetain")]);
    m_max_backups_to_retain_isSet = !json[QString("maxBackupsToRetain")].isNull() && m_max_backups_to_retain_isValid;

    m_owned_by_isValid = ::OpenAPI::fromJsonValue(m_owned_by, json[QString("ownedBy")]);
    m_owned_by_isSet = !json[QString("ownedBy")].isNull() && m_owned_by_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_session_persistence_mode_isValid = ::OpenAPI::fromJsonValue(m_session_persistence_mode, json[QString("sessionPersistenceMode")]);
    m_session_persistence_mode_isSet = !json[QString("sessionPersistenceMode")].isNull() && m_session_persistence_mode_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_started_by_isValid = ::OpenAPI::fromJsonValue(m_started_by, json[QString("startedBy")]);
    m_started_by_isSet = !json[QString("startedBy")].isNull() && m_started_by_isValid;

    m_started_from_backup_id_isValid = ::OpenAPI::fromJsonValue(m_started_from_backup_id, json[QString("startedFromBackupId")]);
    m_started_from_backup_id_isSet = !json[QString("startedFromBackupId")].isNull() && m_started_from_backup_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_stop_at_isValid = ::OpenAPI::fromJsonValue(m_stop_at, json[QString("stopAt")]);
    m_stop_at_isSet = !json[QString("stopAt")].isNull() && m_stop_at_isValid;

    m_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_stopped_at, json[QString("stoppedAt")]);
    m_stopped_at_isSet = !json[QString("stoppedAt")].isNull() && m_stopped_at_isValid;

    m_stopped_by_isValid = ::OpenAPI::fromJsonValue(m_stopped_by, json[QString("stoppedBy")]);
    m_stopped_by_isSet = !json[QString("stoppedBy")].isNull() && m_stopped_by_isValid;

    m_streaming_image_id_isValid = ::OpenAPI::fromJsonValue(m_streaming_image_id, json[QString("streamingImageId")]);
    m_streaming_image_id_isSet = !json[QString("streamingImageId")].isNull() && m_streaming_image_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_terminate_at_isValid = ::OpenAPI::fromJsonValue(m_terminate_at, json[QString("terminateAt")]);
    m_terminate_at_isSet = !json[QString("terminateAt")].isNull() && m_terminate_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_volume_configuration_isValid = ::OpenAPI::fromJsonValue(m_volume_configuration, json[QString("volumeConfiguration")]);
    m_volume_configuration_isSet = !json[QString("volumeConfiguration")].isNull() && m_volume_configuration_isValid;

    m_volume_retention_mode_isValid = ::OpenAPI::fromJsonValue(m_volume_retention_mode, json[QString("volumeRetentionMode")]);
    m_volume_retention_mode_isSet = !json[QString("volumeRetentionMode")].isNull() && m_volume_retention_mode_isValid;
}

QString OAIStreamingSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingSession::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_automatic_termination_mode.isSet()) {
        obj.insert(QString("automaticTerminationMode"), ::OpenAPI::toJsonValue(m_automatic_termination_mode));
    }
    if (m_backup_mode.isSet()) {
        obj.insert(QString("backupMode"), ::OpenAPI::toJsonValue(m_backup_mode));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_ec2_instance_type_isSet) {
        obj.insert(QString("ec2InstanceType"), ::OpenAPI::toJsonValue(m_ec2_instance_type));
    }
    if (m_launch_profile_id_isSet) {
        obj.insert(QString("launchProfileId"), ::OpenAPI::toJsonValue(m_launch_profile_id));
    }
    if (m_max_backups_to_retain_isSet) {
        obj.insert(QString("maxBackupsToRetain"), ::OpenAPI::toJsonValue(m_max_backups_to_retain));
    }
    if (m_owned_by_isSet) {
        obj.insert(QString("ownedBy"), ::OpenAPI::toJsonValue(m_owned_by));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_session_persistence_mode.isSet()) {
        obj.insert(QString("sessionPersistenceMode"), ::OpenAPI::toJsonValue(m_session_persistence_mode));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_started_by_isSet) {
        obj.insert(QString("startedBy"), ::OpenAPI::toJsonValue(m_started_by));
    }
    if (m_started_from_backup_id_isSet) {
        obj.insert(QString("startedFromBackupId"), ::OpenAPI::toJsonValue(m_started_from_backup_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_stop_at_isSet) {
        obj.insert(QString("stopAt"), ::OpenAPI::toJsonValue(m_stop_at));
    }
    if (m_stopped_at_isSet) {
        obj.insert(QString("stoppedAt"), ::OpenAPI::toJsonValue(m_stopped_at));
    }
    if (m_stopped_by_isSet) {
        obj.insert(QString("stoppedBy"), ::OpenAPI::toJsonValue(m_stopped_by));
    }
    if (m_streaming_image_id_isSet) {
        obj.insert(QString("streamingImageId"), ::OpenAPI::toJsonValue(m_streaming_image_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_terminate_at_isSet) {
        obj.insert(QString("terminateAt"), ::OpenAPI::toJsonValue(m_terminate_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_volume_configuration.isSet()) {
        obj.insert(QString("volumeConfiguration"), ::OpenAPI::toJsonValue(m_volume_configuration));
    }
    if (m_volume_retention_mode.isSet()) {
        obj.insert(QString("volumeRetentionMode"), ::OpenAPI::toJsonValue(m_volume_retention_mode));
    }
    return obj;
}

QString OAIStreamingSession::getArn() const {
    return m_arn;
}
void OAIStreamingSession::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStreamingSession::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStreamingSession::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAutomaticTerminationMode OAIStreamingSession::getAutomaticTerminationMode() const {
    return m_automatic_termination_mode;
}
void OAIStreamingSession::setAutomaticTerminationMode(const OAIAutomaticTerminationMode &automatic_termination_mode) {
    m_automatic_termination_mode = automatic_termination_mode;
    m_automatic_termination_mode_isSet = true;
}

bool OAIStreamingSession::is_automatic_termination_mode_Set() const{
    return m_automatic_termination_mode_isSet;
}

bool OAIStreamingSession::is_automatic_termination_mode_Valid() const{
    return m_automatic_termination_mode_isValid;
}

OAISessionBackupMode OAIStreamingSession::getBackupMode() const {
    return m_backup_mode;
}
void OAIStreamingSession::setBackupMode(const OAISessionBackupMode &backup_mode) {
    m_backup_mode = backup_mode;
    m_backup_mode_isSet = true;
}

bool OAIStreamingSession::is_backup_mode_Set() const{
    return m_backup_mode_isSet;
}

bool OAIStreamingSession::is_backup_mode_Valid() const{
    return m_backup_mode_isValid;
}

QDateTime OAIStreamingSession::getCreatedAt() const {
    return m_created_at;
}
void OAIStreamingSession::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStreamingSession::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStreamingSession::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStreamingSession::getCreatedBy() const {
    return m_created_by;
}
void OAIStreamingSession::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStreamingSession::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStreamingSession::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIStreamingSession::getEc2InstanceType() const {
    return m_ec2_instance_type;
}
void OAIStreamingSession::setEc2InstanceType(const QString &ec2_instance_type) {
    m_ec2_instance_type = ec2_instance_type;
    m_ec2_instance_type_isSet = true;
}

bool OAIStreamingSession::is_ec2_instance_type_Set() const{
    return m_ec2_instance_type_isSet;
}

bool OAIStreamingSession::is_ec2_instance_type_Valid() const{
    return m_ec2_instance_type_isValid;
}

QString OAIStreamingSession::getLaunchProfileId() const {
    return m_launch_profile_id;
}
void OAIStreamingSession::setLaunchProfileId(const QString &launch_profile_id) {
    m_launch_profile_id = launch_profile_id;
    m_launch_profile_id_isSet = true;
}

bool OAIStreamingSession::is_launch_profile_id_Set() const{
    return m_launch_profile_id_isSet;
}

bool OAIStreamingSession::is_launch_profile_id_Valid() const{
    return m_launch_profile_id_isValid;
}

qint32 OAIStreamingSession::getMaxBackupsToRetain() const {
    return m_max_backups_to_retain;
}
void OAIStreamingSession::setMaxBackupsToRetain(const qint32 &max_backups_to_retain) {
    m_max_backups_to_retain = max_backups_to_retain;
    m_max_backups_to_retain_isSet = true;
}

bool OAIStreamingSession::is_max_backups_to_retain_Set() const{
    return m_max_backups_to_retain_isSet;
}

bool OAIStreamingSession::is_max_backups_to_retain_Valid() const{
    return m_max_backups_to_retain_isValid;
}

QString OAIStreamingSession::getOwnedBy() const {
    return m_owned_by;
}
void OAIStreamingSession::setOwnedBy(const QString &owned_by) {
    m_owned_by = owned_by;
    m_owned_by_isSet = true;
}

bool OAIStreamingSession::is_owned_by_Set() const{
    return m_owned_by_isSet;
}

bool OAIStreamingSession::is_owned_by_Valid() const{
    return m_owned_by_isValid;
}

QString OAIStreamingSession::getSessionId() const {
    return m_session_id;
}
void OAIStreamingSession::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIStreamingSession::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIStreamingSession::is_session_id_Valid() const{
    return m_session_id_isValid;
}

OAISessionPersistenceMode OAIStreamingSession::getSessionPersistenceMode() const {
    return m_session_persistence_mode;
}
void OAIStreamingSession::setSessionPersistenceMode(const OAISessionPersistenceMode &session_persistence_mode) {
    m_session_persistence_mode = session_persistence_mode;
    m_session_persistence_mode_isSet = true;
}

bool OAIStreamingSession::is_session_persistence_mode_Set() const{
    return m_session_persistence_mode_isSet;
}

bool OAIStreamingSession::is_session_persistence_mode_Valid() const{
    return m_session_persistence_mode_isValid;
}

QDateTime OAIStreamingSession::getStartedAt() const {
    return m_started_at;
}
void OAIStreamingSession::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIStreamingSession::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIStreamingSession::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIStreamingSession::getStartedBy() const {
    return m_started_by;
}
void OAIStreamingSession::setStartedBy(const QString &started_by) {
    m_started_by = started_by;
    m_started_by_isSet = true;
}

bool OAIStreamingSession::is_started_by_Set() const{
    return m_started_by_isSet;
}

bool OAIStreamingSession::is_started_by_Valid() const{
    return m_started_by_isValid;
}

QString OAIStreamingSession::getStartedFromBackupId() const {
    return m_started_from_backup_id;
}
void OAIStreamingSession::setStartedFromBackupId(const QString &started_from_backup_id) {
    m_started_from_backup_id = started_from_backup_id;
    m_started_from_backup_id_isSet = true;
}

bool OAIStreamingSession::is_started_from_backup_id_Set() const{
    return m_started_from_backup_id_isSet;
}

bool OAIStreamingSession::is_started_from_backup_id_Valid() const{
    return m_started_from_backup_id_isValid;
}

OAIStreamingSessionState OAIStreamingSession::getState() const {
    return m_state;
}
void OAIStreamingSession::setState(const OAIStreamingSessionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStreamingSession::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStreamingSession::is_state_Valid() const{
    return m_state_isValid;
}

OAIStreamingSessionStatusCode OAIStreamingSession::getStatusCode() const {
    return m_status_code;
}
void OAIStreamingSession::setStatusCode(const OAIStreamingSessionStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIStreamingSession::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIStreamingSession::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIStreamingSession::getStatusMessage() const {
    return m_status_message;
}
void OAIStreamingSession::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIStreamingSession::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIStreamingSession::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIStreamingSession::getStopAt() const {
    return m_stop_at;
}
void OAIStreamingSession::setStopAt(const QDateTime &stop_at) {
    m_stop_at = stop_at;
    m_stop_at_isSet = true;
}

bool OAIStreamingSession::is_stop_at_Set() const{
    return m_stop_at_isSet;
}

bool OAIStreamingSession::is_stop_at_Valid() const{
    return m_stop_at_isValid;
}

QDateTime OAIStreamingSession::getStoppedAt() const {
    return m_stopped_at;
}
void OAIStreamingSession::setStoppedAt(const QDateTime &stopped_at) {
    m_stopped_at = stopped_at;
    m_stopped_at_isSet = true;
}

bool OAIStreamingSession::is_stopped_at_Set() const{
    return m_stopped_at_isSet;
}

bool OAIStreamingSession::is_stopped_at_Valid() const{
    return m_stopped_at_isValid;
}

QString OAIStreamingSession::getStoppedBy() const {
    return m_stopped_by;
}
void OAIStreamingSession::setStoppedBy(const QString &stopped_by) {
    m_stopped_by = stopped_by;
    m_stopped_by_isSet = true;
}

bool OAIStreamingSession::is_stopped_by_Set() const{
    return m_stopped_by_isSet;
}

bool OAIStreamingSession::is_stopped_by_Valid() const{
    return m_stopped_by_isValid;
}

QString OAIStreamingSession::getStreamingImageId() const {
    return m_streaming_image_id;
}
void OAIStreamingSession::setStreamingImageId(const QString &streaming_image_id) {
    m_streaming_image_id = streaming_image_id;
    m_streaming_image_id_isSet = true;
}

bool OAIStreamingSession::is_streaming_image_id_Set() const{
    return m_streaming_image_id_isSet;
}

bool OAIStreamingSession::is_streaming_image_id_Valid() const{
    return m_streaming_image_id_isValid;
}

QMap OAIStreamingSession::getTags() const {
    return m_tags;
}
void OAIStreamingSession::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStreamingSession::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStreamingSession::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIStreamingSession::getTerminateAt() const {
    return m_terminate_at;
}
void OAIStreamingSession::setTerminateAt(const QDateTime &terminate_at) {
    m_terminate_at = terminate_at;
    m_terminate_at_isSet = true;
}

bool OAIStreamingSession::is_terminate_at_Set() const{
    return m_terminate_at_isSet;
}

bool OAIStreamingSession::is_terminate_at_Valid() const{
    return m_terminate_at_isValid;
}

QDateTime OAIStreamingSession::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStreamingSession::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStreamingSession::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStreamingSession::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIStreamingSession::getUpdatedBy() const {
    return m_updated_by;
}
void OAIStreamingSession::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIStreamingSession::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIStreamingSession::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration OAIStreamingSession::getVolumeConfiguration() const {
    return m_volume_configuration;
}
void OAIStreamingSession::setVolumeConfiguration(const OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration &volume_configuration) {
    m_volume_configuration = volume_configuration;
    m_volume_configuration_isSet = true;
}

bool OAIStreamingSession::is_volume_configuration_Set() const{
    return m_volume_configuration_isSet;
}

bool OAIStreamingSession::is_volume_configuration_Valid() const{
    return m_volume_configuration_isValid;
}

OAIVolumeRetentionMode OAIStreamingSession::getVolumeRetentionMode() const {
    return m_volume_retention_mode;
}
void OAIStreamingSession::setVolumeRetentionMode(const OAIVolumeRetentionMode &volume_retention_mode) {
    m_volume_retention_mode = volume_retention_mode;
    m_volume_retention_mode_isSet = true;
}

bool OAIStreamingSession::is_volume_retention_mode_Set() const{
    return m_volume_retention_mode_isSet;
}

bool OAIStreamingSession::is_volume_retention_mode_Valid() const{
    return m_volume_retention_mode_isValid;
}

bool OAIStreamingSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_termination_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_backups_to_retain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_persistence_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_from_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminate_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_retention_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
