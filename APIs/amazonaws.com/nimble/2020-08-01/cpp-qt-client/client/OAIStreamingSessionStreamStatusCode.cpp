/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingSessionStreamStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingSessionStreamStatusCode::OAIStreamingSessionStreamStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingSessionStreamStatusCode::OAIStreamingSessionStreamStatusCode() {
    this->initializeModel();
}

OAIStreamingSessionStreamStatusCode::~OAIStreamingSessionStreamStatusCode() {}

void OAIStreamingSessionStreamStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStreamingSessionStreamStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStreamingSessionStreamStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STREAM_CREATE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingSessionStreamStatusCode::STREAM_CREATE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STREAM_READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingSessionStreamStatusCode::STREAM_READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STREAM_DELETE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingSessionStreamStatusCode::STREAM_DELETE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STREAM_DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingSessionStreamStatusCode::STREAM_DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingSessionStreamStatusCode::INTERNAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NETWORK_CONNECTION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStreamingSessionStreamStatusCode::NETWORK_CONNECTION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStreamingSessionStreamStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStreamingSessionStreamStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStreamingSessionStreamStatusCode::STREAM_CREATE_IN_PROGRESS:
            val = "STREAM_CREATE_IN_PROGRESS";
            break;
        case eOAIStreamingSessionStreamStatusCode::STREAM_READY:
            val = "STREAM_READY";
            break;
        case eOAIStreamingSessionStreamStatusCode::STREAM_DELETE_IN_PROGRESS:
            val = "STREAM_DELETE_IN_PROGRESS";
            break;
        case eOAIStreamingSessionStreamStatusCode::STREAM_DELETED:
            val = "STREAM_DELETED";
            break;
        case eOAIStreamingSessionStreamStatusCode::INTERNAL_ERROR:
            val = "INTERNAL_ERROR";
            break;
        case eOAIStreamingSessionStreamStatusCode::NETWORK_CONNECTION_ERROR:
            val = "NETWORK_CONNECTION_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStreamingSessionStreamStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStreamingSessionStreamStatusCode::eOAIStreamingSessionStreamStatusCode OAIStreamingSessionStreamStatusCode::getValue() const {
    return m_value;
}

void OAIStreamingSessionStreamStatusCode::setValue(const OAIStreamingSessionStreamStatusCode::eOAIStreamingSessionStreamStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStreamingSessionStreamStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIStreamingSessionStreamStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
