/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeConfiguration::OAIVolumeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeConfiguration::OAIVolumeConfiguration() {
    this->initializeModel();
}

OAIVolumeConfiguration::~OAIVolumeConfiguration() {}

void OAIVolumeConfiguration::initializeModel() {

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;
}

void OAIVolumeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeConfiguration::fromJsonObject(QJsonObject json) {

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("iops")]);
    m_iops_isSet = !json[QString("iops")].isNull() && m_iops_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("throughput")]);
    m_throughput_isSet = !json[QString("throughput")].isNull() && m_throughput_isValid;
}

QString OAIVolumeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_iops_isSet) {
        obj.insert(QString("iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    return obj;
}

qint32 OAIVolumeConfiguration::getIops() const {
    return m_iops;
}
void OAIVolumeConfiguration::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIVolumeConfiguration::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIVolumeConfiguration::is_iops_Valid() const{
    return m_iops_isValid;
}

qint32 OAIVolumeConfiguration::getSize() const {
    return m_size;
}
void OAIVolumeConfiguration::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIVolumeConfiguration::is_size_Set() const{
    return m_size_isSet;
}

bool OAIVolumeConfiguration::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIVolumeConfiguration::getThroughput() const {
    return m_throughput;
}
void OAIVolumeConfiguration::setThroughput(const qint32 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIVolumeConfiguration::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIVolumeConfiguration::is_throughput_Valid() const{
    return m_throughput_isValid;
}

bool OAIVolumeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
