/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetStreamingSessionBackupResponse_streamingSessionBackup.h
 *
 * 
 */

#ifndef OAIGetStreamingSessionBackupResponse_streamingSessionBackup_H
#define OAIGetStreamingSessionBackupResponse_streamingSessionBackup_H

#include <QJsonObject>

#include "OAIStreamingSessionState.h"
#include "OAIStreamingSessionStatusCode.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetStreamingSessionBackupResponse_streamingSessionBackup : public OAIObject {
public:
    OAIGetStreamingSessionBackupResponse_streamingSessionBackup();
    OAIGetStreamingSessionBackupResponse_streamingSessionBackup(QString json);
    ~OAIGetStreamingSessionBackupResponse_streamingSessionBackup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getBackupId() const;
    void setBackupId(const QString &backup_id);
    bool is_backup_id_Set() const;
    bool is_backup_id_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getLaunchProfileId() const;
    void setLaunchProfileId(const QString &launch_profile_id);
    bool is_launch_profile_id_Set() const;
    bool is_launch_profile_id_Valid() const;

    QString getOwnedBy() const;
    void setOwnedBy(const QString &owned_by);
    bool is_owned_by_Set() const;
    bool is_owned_by_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    OAIStreamingSessionState getState() const;
    void setState(const OAIStreamingSessionState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIStreamingSessionStatusCode getStatusCode() const;
    void setStatusCode(const OAIStreamingSessionStatusCode &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_backup_id;
    bool m_backup_id_isSet;
    bool m_backup_id_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_launch_profile_id;
    bool m_launch_profile_id_isSet;
    bool m_launch_profile_id_isValid;

    QString m_owned_by;
    bool m_owned_by_isSet;
    bool m_owned_by_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    OAIStreamingSessionState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIStreamingSessionStatusCode m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetStreamingSessionBackupResponse_streamingSessionBackup)

#endif // OAIGetStreamingSessionBackupResponse_streamingSessionBackup_H
