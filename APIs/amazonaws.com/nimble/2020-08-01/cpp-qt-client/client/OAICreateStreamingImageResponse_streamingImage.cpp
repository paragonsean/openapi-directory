/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStreamingImageResponse_streamingImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStreamingImageResponse_streamingImage::OAICreateStreamingImageResponse_streamingImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStreamingImageResponse_streamingImage::OAICreateStreamingImageResponse_streamingImage() {
    this->initializeModel();
}

OAICreateStreamingImageResponse_streamingImage::~OAICreateStreamingImageResponse_streamingImage() {}

void OAICreateStreamingImageResponse_streamingImage::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ec2_image_id_isSet = false;
    m_ec2_image_id_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_eula_ids_isSet = false;
    m_eula_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_streaming_image_id_isSet = false;
    m_streaming_image_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateStreamingImageResponse_streamingImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStreamingImageResponse_streamingImage::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ec2_image_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_image_id, json[QString("ec2ImageId")]);
    m_ec2_image_id_isSet = !json[QString("ec2ImageId")].isNull() && m_ec2_image_id_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("encryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("encryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_eula_ids_isValid = ::OpenAPI::fromJsonValue(m_eula_ids, json[QString("eulaIds")]);
    m_eula_ids_isSet = !json[QString("eulaIds")].isNull() && m_eula_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_streaming_image_id_isValid = ::OpenAPI::fromJsonValue(m_streaming_image_id, json[QString("streamingImageId")]);
    m_streaming_image_id_isSet = !json[QString("streamingImageId")].isNull() && m_streaming_image_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStreamingImageResponse_streamingImage::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ec2_image_id_isSet) {
        obj.insert(QString("ec2ImageId"), ::OpenAPI::toJsonValue(m_ec2_image_id));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("encryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_eula_ids.isSet()) {
        obj.insert(QString("eulaIds"), ::OpenAPI::toJsonValue(m_eula_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_streaming_image_id_isSet) {
        obj.insert(QString("streamingImageId"), ::OpenAPI::toJsonValue(m_streaming_image_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateStreamingImageResponse_streamingImage::getArn() const {
    return m_arn;
}
void OAICreateStreamingImageResponse_streamingImage::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getDescription() const {
    return m_description;
}
void OAICreateStreamingImageResponse_streamingImage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getEc2ImageId() const {
    return m_ec2_image_id;
}
void OAICreateStreamingImageResponse_streamingImage::setEc2ImageId(const QString &ec2_image_id) {
    m_ec2_image_id = ec2_image_id;
    m_ec2_image_id_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_ec2_image_id_Set() const{
    return m_ec2_image_id_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_ec2_image_id_Valid() const{
    return m_ec2_image_id_isValid;
}

OAIStreamingImage_encryptionConfiguration OAICreateStreamingImageResponse_streamingImage::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAICreateStreamingImageResponse_streamingImage::setEncryptionConfiguration(const OAIStreamingImage_encryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

QList OAICreateStreamingImageResponse_streamingImage::getEulaIds() const {
    return m_eula_ids;
}
void OAICreateStreamingImageResponse_streamingImage::setEulaIds(const QList &eula_ids) {
    m_eula_ids = eula_ids;
    m_eula_ids_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_eula_ids_Set() const{
    return m_eula_ids_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_eula_ids_Valid() const{
    return m_eula_ids_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getName() const {
    return m_name;
}
void OAICreateStreamingImageResponse_streamingImage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getOwner() const {
    return m_owner;
}
void OAICreateStreamingImageResponse_streamingImage::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getPlatform() const {
    return m_platform;
}
void OAICreateStreamingImageResponse_streamingImage::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_platform_Valid() const{
    return m_platform_isValid;
}

OAIStreamingImageState OAICreateStreamingImageResponse_streamingImage::getState() const {
    return m_state;
}
void OAICreateStreamingImageResponse_streamingImage::setState(const OAIStreamingImageState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_state_Valid() const{
    return m_state_isValid;
}

OAIStreamingImageStatusCode OAICreateStreamingImageResponse_streamingImage::getStatusCode() const {
    return m_status_code;
}
void OAICreateStreamingImageResponse_streamingImage::setStatusCode(const OAIStreamingImageStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getStatusMessage() const {
    return m_status_message;
}
void OAICreateStreamingImageResponse_streamingImage::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAICreateStreamingImageResponse_streamingImage::getStreamingImageId() const {
    return m_streaming_image_id;
}
void OAICreateStreamingImageResponse_streamingImage::setStreamingImageId(const QString &streaming_image_id) {
    m_streaming_image_id = streaming_image_id;
    m_streaming_image_id_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_streaming_image_id_Set() const{
    return m_streaming_image_id_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_streaming_image_id_Valid() const{
    return m_streaming_image_id_isValid;
}

QMap OAICreateStreamingImageResponse_streamingImage::getTags() const {
    return m_tags;
}
void OAICreateStreamingImageResponse_streamingImage::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStreamingImageResponse_streamingImage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStreamingImageResponse_streamingImage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateStreamingImageResponse_streamingImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStreamingImageResponse_streamingImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
