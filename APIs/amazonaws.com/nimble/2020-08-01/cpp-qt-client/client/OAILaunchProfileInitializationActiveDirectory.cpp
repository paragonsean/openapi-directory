/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchProfileInitializationActiveDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchProfileInitializationActiveDirectory::OAILaunchProfileInitializationActiveDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchProfileInitializationActiveDirectory::OAILaunchProfileInitializationActiveDirectory() {
    this->initializeModel();
}

OAILaunchProfileInitializationActiveDirectory::~OAILaunchProfileInitializationActiveDirectory() {}

void OAILaunchProfileInitializationActiveDirectory::initializeModel() {

    m_computer_attributes_isSet = false;
    m_computer_attributes_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_directory_name_isSet = false;
    m_directory_name_isValid = false;

    m_dns_ip_addresses_isSet = false;
    m_dns_ip_addresses_isValid = false;

    m_organizational_unit_distinguished_name_isSet = false;
    m_organizational_unit_distinguished_name_isValid = false;

    m_studio_component_id_isSet = false;
    m_studio_component_id_isValid = false;

    m_studio_component_name_isSet = false;
    m_studio_component_name_isValid = false;
}

void OAILaunchProfileInitializationActiveDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchProfileInitializationActiveDirectory::fromJsonObject(QJsonObject json) {

    m_computer_attributes_isValid = ::OpenAPI::fromJsonValue(m_computer_attributes, json[QString("computerAttributes")]);
    m_computer_attributes_isSet = !json[QString("computerAttributes")].isNull() && m_computer_attributes_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("directoryId")]);
    m_directory_id_isSet = !json[QString("directoryId")].isNull() && m_directory_id_isValid;

    m_directory_name_isValid = ::OpenAPI::fromJsonValue(m_directory_name, json[QString("directoryName")]);
    m_directory_name_isSet = !json[QString("directoryName")].isNull() && m_directory_name_isValid;

    m_dns_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_dns_ip_addresses, json[QString("dnsIpAddresses")]);
    m_dns_ip_addresses_isSet = !json[QString("dnsIpAddresses")].isNull() && m_dns_ip_addresses_isValid;

    m_organizational_unit_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_distinguished_name, json[QString("organizationalUnitDistinguishedName")]);
    m_organizational_unit_distinguished_name_isSet = !json[QString("organizationalUnitDistinguishedName")].isNull() && m_organizational_unit_distinguished_name_isValid;

    m_studio_component_id_isValid = ::OpenAPI::fromJsonValue(m_studio_component_id, json[QString("studioComponentId")]);
    m_studio_component_id_isSet = !json[QString("studioComponentId")].isNull() && m_studio_component_id_isValid;

    m_studio_component_name_isValid = ::OpenAPI::fromJsonValue(m_studio_component_name, json[QString("studioComponentName")]);
    m_studio_component_name_isSet = !json[QString("studioComponentName")].isNull() && m_studio_component_name_isValid;
}

QString OAILaunchProfileInitializationActiveDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchProfileInitializationActiveDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_computer_attributes.isSet()) {
        obj.insert(QString("computerAttributes"), ::OpenAPI::toJsonValue(m_computer_attributes));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("directoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_directory_name_isSet) {
        obj.insert(QString("directoryName"), ::OpenAPI::toJsonValue(m_directory_name));
    }
    if (m_dns_ip_addresses.isSet()) {
        obj.insert(QString("dnsIpAddresses"), ::OpenAPI::toJsonValue(m_dns_ip_addresses));
    }
    if (m_organizational_unit_distinguished_name_isSet) {
        obj.insert(QString("organizationalUnitDistinguishedName"), ::OpenAPI::toJsonValue(m_organizational_unit_distinguished_name));
    }
    if (m_studio_component_id_isSet) {
        obj.insert(QString("studioComponentId"), ::OpenAPI::toJsonValue(m_studio_component_id));
    }
    if (m_studio_component_name_isSet) {
        obj.insert(QString("studioComponentName"), ::OpenAPI::toJsonValue(m_studio_component_name));
    }
    return obj;
}

QList OAILaunchProfileInitializationActiveDirectory::getComputerAttributes() const {
    return m_computer_attributes;
}
void OAILaunchProfileInitializationActiveDirectory::setComputerAttributes(const QList &computer_attributes) {
    m_computer_attributes = computer_attributes;
    m_computer_attributes_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_computer_attributes_Set() const{
    return m_computer_attributes_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_computer_attributes_Valid() const{
    return m_computer_attributes_isValid;
}

QString OAILaunchProfileInitializationActiveDirectory::getDirectoryId() const {
    return m_directory_id;
}
void OAILaunchProfileInitializationActiveDirectory::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

QString OAILaunchProfileInitializationActiveDirectory::getDirectoryName() const {
    return m_directory_name;
}
void OAILaunchProfileInitializationActiveDirectory::setDirectoryName(const QString &directory_name) {
    m_directory_name = directory_name;
    m_directory_name_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_directory_name_Set() const{
    return m_directory_name_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_directory_name_Valid() const{
    return m_directory_name_isValid;
}

QList OAILaunchProfileInitializationActiveDirectory::getDnsIpAddresses() const {
    return m_dns_ip_addresses;
}
void OAILaunchProfileInitializationActiveDirectory::setDnsIpAddresses(const QList &dns_ip_addresses) {
    m_dns_ip_addresses = dns_ip_addresses;
    m_dns_ip_addresses_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_dns_ip_addresses_Set() const{
    return m_dns_ip_addresses_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_dns_ip_addresses_Valid() const{
    return m_dns_ip_addresses_isValid;
}

QString OAILaunchProfileInitializationActiveDirectory::getOrganizationalUnitDistinguishedName() const {
    return m_organizational_unit_distinguished_name;
}
void OAILaunchProfileInitializationActiveDirectory::setOrganizationalUnitDistinguishedName(const QString &organizational_unit_distinguished_name) {
    m_organizational_unit_distinguished_name = organizational_unit_distinguished_name;
    m_organizational_unit_distinguished_name_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_organizational_unit_distinguished_name_Set() const{
    return m_organizational_unit_distinguished_name_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_organizational_unit_distinguished_name_Valid() const{
    return m_organizational_unit_distinguished_name_isValid;
}

QString OAILaunchProfileInitializationActiveDirectory::getStudioComponentId() const {
    return m_studio_component_id;
}
void OAILaunchProfileInitializationActiveDirectory::setStudioComponentId(const QString &studio_component_id) {
    m_studio_component_id = studio_component_id;
    m_studio_component_id_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_studio_component_id_Set() const{
    return m_studio_component_id_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_studio_component_id_Valid() const{
    return m_studio_component_id_isValid;
}

QString OAILaunchProfileInitializationActiveDirectory::getStudioComponentName() const {
    return m_studio_component_name;
}
void OAILaunchProfileInitializationActiveDirectory::setStudioComponentName(const QString &studio_component_name) {
    m_studio_component_name = studio_component_name;
    m_studio_component_name_isSet = true;
}

bool OAILaunchProfileInitializationActiveDirectory::is_studio_component_name_Set() const{
    return m_studio_component_name_isSet;
}

bool OAILaunchProfileInitializationActiveDirectory::is_studio_component_name_Valid() const{
    return m_studio_component_name_isValid;
}

bool OAILaunchProfileInitializationActiveDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computer_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_ip_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchProfileInitializationActiveDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
