/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchProfileStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchProfileStatusCode::OAILaunchProfileStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchProfileStatusCode::OAILaunchProfileStatusCode() {
    this->initializeModel();
}

OAILaunchProfileStatusCode::~OAILaunchProfileStatusCode() {}

void OAILaunchProfileStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILaunchProfileStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILaunchProfileStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LAUNCH_PROFILE_CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PROFILE_UPDATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_UPDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PROFILE_DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PROFILE_CREATE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_CREATE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PROFILE_UPDATE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_UPDATE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PROFILE_DELETE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_DELETE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::INTERNAL_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STREAMING_IMAGE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::STREAMING_IMAGE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STREAMING_IMAGE_NOT_READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::STREAMING_IMAGE_NOT_READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCRYPTION_KEY_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::ENCRYPTION_KEY_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENCRYPTION_KEY_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::ENCRYPTION_KEY_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SUBNETS_PROVIDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::INVALID_SUBNETS_PROVIDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_INSTANCE_TYPES_PROVIDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::INVALID_INSTANCE_TYPES_PROVIDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SUBNETS_COMBINATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileStatusCode::INVALID_SUBNETS_COMBINATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILaunchProfileStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILaunchProfileStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_CREATED:
            val = "LAUNCH_PROFILE_CREATED";
            break;
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_UPDATED:
            val = "LAUNCH_PROFILE_UPDATED";
            break;
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_DELETED:
            val = "LAUNCH_PROFILE_DELETED";
            break;
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_CREATE_IN_PROGRESS:
            val = "LAUNCH_PROFILE_CREATE_IN_PROGRESS";
            break;
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_UPDATE_IN_PROGRESS:
            val = "LAUNCH_PROFILE_UPDATE_IN_PROGRESS";
            break;
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_DELETE_IN_PROGRESS:
            val = "LAUNCH_PROFILE_DELETE_IN_PROGRESS";
            break;
        case eOAILaunchProfileStatusCode::INTERNAL_ERROR:
            val = "INTERNAL_ERROR";
            break;
        case eOAILaunchProfileStatusCode::STREAMING_IMAGE_NOT_FOUND:
            val = "STREAMING_IMAGE_NOT_FOUND";
            break;
        case eOAILaunchProfileStatusCode::STREAMING_IMAGE_NOT_READY:
            val = "STREAMING_IMAGE_NOT_READY";
            break;
        case eOAILaunchProfileStatusCode::LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED:
            val = "LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED";
            break;
        case eOAILaunchProfileStatusCode::ENCRYPTION_KEY_ACCESS_DENIED:
            val = "ENCRYPTION_KEY_ACCESS_DENIED";
            break;
        case eOAILaunchProfileStatusCode::ENCRYPTION_KEY_NOT_FOUND:
            val = "ENCRYPTION_KEY_NOT_FOUND";
            break;
        case eOAILaunchProfileStatusCode::INVALID_SUBNETS_PROVIDED:
            val = "INVALID_SUBNETS_PROVIDED";
            break;
        case eOAILaunchProfileStatusCode::INVALID_INSTANCE_TYPES_PROVIDED:
            val = "INVALID_INSTANCE_TYPES_PROVIDED";
            break;
        case eOAILaunchProfileStatusCode::INVALID_SUBNETS_COMBINATION:
            val = "INVALID_SUBNETS_COMBINATION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILaunchProfileStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILaunchProfileStatusCode::eOAILaunchProfileStatusCode OAILaunchProfileStatusCode::getValue() const {
    return m_value;
}

void OAILaunchProfileStatusCode::setValue(const OAILaunchProfileStatusCode::eOAILaunchProfileStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILaunchProfileStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAILaunchProfileStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
