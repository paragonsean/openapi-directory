/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStudioComponent_request_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStudioComponent_request_configuration::OAICreateStudioComponent_request_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStudioComponent_request_configuration::OAICreateStudioComponent_request_configuration() {
    this->initializeModel();
}

OAICreateStudioComponent_request_configuration::~OAICreateStudioComponent_request_configuration() {}

void OAICreateStudioComponent_request_configuration::initializeModel() {

    m_active_directory_configuration_isSet = false;
    m_active_directory_configuration_isValid = false;

    m_compute_farm_configuration_isSet = false;
    m_compute_farm_configuration_isValid = false;

    m_license_service_configuration_isSet = false;
    m_license_service_configuration_isValid = false;

    m_shared_file_system_configuration_isSet = false;
    m_shared_file_system_configuration_isValid = false;
}

void OAICreateStudioComponent_request_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStudioComponent_request_configuration::fromJsonObject(QJsonObject json) {

    m_active_directory_configuration_isValid = ::OpenAPI::fromJsonValue(m_active_directory_configuration, json[QString("activeDirectoryConfiguration")]);
    m_active_directory_configuration_isSet = !json[QString("activeDirectoryConfiguration")].isNull() && m_active_directory_configuration_isValid;

    m_compute_farm_configuration_isValid = ::OpenAPI::fromJsonValue(m_compute_farm_configuration, json[QString("computeFarmConfiguration")]);
    m_compute_farm_configuration_isSet = !json[QString("computeFarmConfiguration")].isNull() && m_compute_farm_configuration_isValid;

    m_license_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_license_service_configuration, json[QString("licenseServiceConfiguration")]);
    m_license_service_configuration_isSet = !json[QString("licenseServiceConfiguration")].isNull() && m_license_service_configuration_isValid;

    m_shared_file_system_configuration_isValid = ::OpenAPI::fromJsonValue(m_shared_file_system_configuration, json[QString("sharedFileSystemConfiguration")]);
    m_shared_file_system_configuration_isSet = !json[QString("sharedFileSystemConfiguration")].isNull() && m_shared_file_system_configuration_isValid;
}

QString OAICreateStudioComponent_request_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStudioComponent_request_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_configuration.isSet()) {
        obj.insert(QString("activeDirectoryConfiguration"), ::OpenAPI::toJsonValue(m_active_directory_configuration));
    }
    if (m_compute_farm_configuration.isSet()) {
        obj.insert(QString("computeFarmConfiguration"), ::OpenAPI::toJsonValue(m_compute_farm_configuration));
    }
    if (m_license_service_configuration.isSet()) {
        obj.insert(QString("licenseServiceConfiguration"), ::OpenAPI::toJsonValue(m_license_service_configuration));
    }
    if (m_shared_file_system_configuration.isSet()) {
        obj.insert(QString("sharedFileSystemConfiguration"), ::OpenAPI::toJsonValue(m_shared_file_system_configuration));
    }
    return obj;
}

OAICreateStudioComponent_request_configuration_activeDirectoryConfiguration OAICreateStudioComponent_request_configuration::getActiveDirectoryConfiguration() const {
    return m_active_directory_configuration;
}
void OAICreateStudioComponent_request_configuration::setActiveDirectoryConfiguration(const OAICreateStudioComponent_request_configuration_activeDirectoryConfiguration &active_directory_configuration) {
    m_active_directory_configuration = active_directory_configuration;
    m_active_directory_configuration_isSet = true;
}

bool OAICreateStudioComponent_request_configuration::is_active_directory_configuration_Set() const{
    return m_active_directory_configuration_isSet;
}

bool OAICreateStudioComponent_request_configuration::is_active_directory_configuration_Valid() const{
    return m_active_directory_configuration_isValid;
}

OAICreateStudioComponent_request_configuration_computeFarmConfiguration OAICreateStudioComponent_request_configuration::getComputeFarmConfiguration() const {
    return m_compute_farm_configuration;
}
void OAICreateStudioComponent_request_configuration::setComputeFarmConfiguration(const OAICreateStudioComponent_request_configuration_computeFarmConfiguration &compute_farm_configuration) {
    m_compute_farm_configuration = compute_farm_configuration;
    m_compute_farm_configuration_isSet = true;
}

bool OAICreateStudioComponent_request_configuration::is_compute_farm_configuration_Set() const{
    return m_compute_farm_configuration_isSet;
}

bool OAICreateStudioComponent_request_configuration::is_compute_farm_configuration_Valid() const{
    return m_compute_farm_configuration_isValid;
}

OAICreateStudioComponent_request_configuration_licenseServiceConfiguration OAICreateStudioComponent_request_configuration::getLicenseServiceConfiguration() const {
    return m_license_service_configuration;
}
void OAICreateStudioComponent_request_configuration::setLicenseServiceConfiguration(const OAICreateStudioComponent_request_configuration_licenseServiceConfiguration &license_service_configuration) {
    m_license_service_configuration = license_service_configuration;
    m_license_service_configuration_isSet = true;
}

bool OAICreateStudioComponent_request_configuration::is_license_service_configuration_Set() const{
    return m_license_service_configuration_isSet;
}

bool OAICreateStudioComponent_request_configuration::is_license_service_configuration_Valid() const{
    return m_license_service_configuration_isValid;
}

OAICreateStudioComponent_request_configuration_sharedFileSystemConfiguration OAICreateStudioComponent_request_configuration::getSharedFileSystemConfiguration() const {
    return m_shared_file_system_configuration;
}
void OAICreateStudioComponent_request_configuration::setSharedFileSystemConfiguration(const OAICreateStudioComponent_request_configuration_sharedFileSystemConfiguration &shared_file_system_configuration) {
    m_shared_file_system_configuration = shared_file_system_configuration;
    m_shared_file_system_configuration_isSet = true;
}

bool OAICreateStudioComponent_request_configuration::is_shared_file_system_configuration_Set() const{
    return m_shared_file_system_configuration_isSet;
}

bool OAICreateStudioComponent_request_configuration::is_shared_file_system_configuration_Valid() const{
    return m_shared_file_system_configuration_isValid;
}

bool OAICreateStudioComponent_request_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_farm_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_file_system_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStudioComponent_request_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
