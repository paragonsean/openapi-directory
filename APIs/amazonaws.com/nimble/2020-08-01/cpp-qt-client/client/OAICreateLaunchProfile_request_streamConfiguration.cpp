/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchProfile_request_streamConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchProfile_request_streamConfiguration::OAICreateLaunchProfile_request_streamConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchProfile_request_streamConfiguration::OAICreateLaunchProfile_request_streamConfiguration() {
    this->initializeModel();
}

OAICreateLaunchProfile_request_streamConfiguration::~OAICreateLaunchProfile_request_streamConfiguration() {}

void OAICreateLaunchProfile_request_streamConfiguration::initializeModel() {

    m_automatic_termination_mode_isSet = false;
    m_automatic_termination_mode_isValid = false;

    m_clipboard_mode_isSet = false;
    m_clipboard_mode_isValid = false;

    m_ec2_instance_types_isSet = false;
    m_ec2_instance_types_isValid = false;

    m_max_session_length_in_minutes_isSet = false;
    m_max_session_length_in_minutes_isValid = false;

    m_max_stopped_session_length_in_minutes_isSet = false;
    m_max_stopped_session_length_in_minutes_isValid = false;

    m_session_backup_isSet = false;
    m_session_backup_isValid = false;

    m_session_persistence_mode_isSet = false;
    m_session_persistence_mode_isValid = false;

    m_session_storage_isSet = false;
    m_session_storage_isValid = false;

    m_streaming_image_ids_isSet = false;
    m_streaming_image_ids_isValid = false;

    m_volume_configuration_isSet = false;
    m_volume_configuration_isValid = false;
}

void OAICreateLaunchProfile_request_streamConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchProfile_request_streamConfiguration::fromJsonObject(QJsonObject json) {

    m_automatic_termination_mode_isValid = ::OpenAPI::fromJsonValue(m_automatic_termination_mode, json[QString("automaticTerminationMode")]);
    m_automatic_termination_mode_isSet = !json[QString("automaticTerminationMode")].isNull() && m_automatic_termination_mode_isValid;

    m_clipboard_mode_isValid = ::OpenAPI::fromJsonValue(m_clipboard_mode, json[QString("clipboardMode")]);
    m_clipboard_mode_isSet = !json[QString("clipboardMode")].isNull() && m_clipboard_mode_isValid;

    m_ec2_instance_types_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_types, json[QString("ec2InstanceTypes")]);
    m_ec2_instance_types_isSet = !json[QString("ec2InstanceTypes")].isNull() && m_ec2_instance_types_isValid;

    m_max_session_length_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_max_session_length_in_minutes, json[QString("maxSessionLengthInMinutes")]);
    m_max_session_length_in_minutes_isSet = !json[QString("maxSessionLengthInMinutes")].isNull() && m_max_session_length_in_minutes_isValid;

    m_max_stopped_session_length_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_max_stopped_session_length_in_minutes, json[QString("maxStoppedSessionLengthInMinutes")]);
    m_max_stopped_session_length_in_minutes_isSet = !json[QString("maxStoppedSessionLengthInMinutes")].isNull() && m_max_stopped_session_length_in_minutes_isValid;

    m_session_backup_isValid = ::OpenAPI::fromJsonValue(m_session_backup, json[QString("sessionBackup")]);
    m_session_backup_isSet = !json[QString("sessionBackup")].isNull() && m_session_backup_isValid;

    m_session_persistence_mode_isValid = ::OpenAPI::fromJsonValue(m_session_persistence_mode, json[QString("sessionPersistenceMode")]);
    m_session_persistence_mode_isSet = !json[QString("sessionPersistenceMode")].isNull() && m_session_persistence_mode_isValid;

    m_session_storage_isValid = ::OpenAPI::fromJsonValue(m_session_storage, json[QString("sessionStorage")]);
    m_session_storage_isSet = !json[QString("sessionStorage")].isNull() && m_session_storage_isValid;

    m_streaming_image_ids_isValid = ::OpenAPI::fromJsonValue(m_streaming_image_ids, json[QString("streamingImageIds")]);
    m_streaming_image_ids_isSet = !json[QString("streamingImageIds")].isNull() && m_streaming_image_ids_isValid;

    m_volume_configuration_isValid = ::OpenAPI::fromJsonValue(m_volume_configuration, json[QString("volumeConfiguration")]);
    m_volume_configuration_isSet = !json[QString("volumeConfiguration")].isNull() && m_volume_configuration_isValid;
}

QString OAICreateLaunchProfile_request_streamConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchProfile_request_streamConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_termination_mode.isSet()) {
        obj.insert(QString("automaticTerminationMode"), ::OpenAPI::toJsonValue(m_automatic_termination_mode));
    }
    if (m_clipboard_mode.isSet()) {
        obj.insert(QString("clipboardMode"), ::OpenAPI::toJsonValue(m_clipboard_mode));
    }
    if (m_ec2_instance_types.isSet()) {
        obj.insert(QString("ec2InstanceTypes"), ::OpenAPI::toJsonValue(m_ec2_instance_types));
    }
    if (m_max_session_length_in_minutes_isSet) {
        obj.insert(QString("maxSessionLengthInMinutes"), ::OpenAPI::toJsonValue(m_max_session_length_in_minutes));
    }
    if (m_max_stopped_session_length_in_minutes_isSet) {
        obj.insert(QString("maxStoppedSessionLengthInMinutes"), ::OpenAPI::toJsonValue(m_max_stopped_session_length_in_minutes));
    }
    if (m_session_backup.isSet()) {
        obj.insert(QString("sessionBackup"), ::OpenAPI::toJsonValue(m_session_backup));
    }
    if (m_session_persistence_mode.isSet()) {
        obj.insert(QString("sessionPersistenceMode"), ::OpenAPI::toJsonValue(m_session_persistence_mode));
    }
    if (m_session_storage.isSet()) {
        obj.insert(QString("sessionStorage"), ::OpenAPI::toJsonValue(m_session_storage));
    }
    if (m_streaming_image_ids.isSet()) {
        obj.insert(QString("streamingImageIds"), ::OpenAPI::toJsonValue(m_streaming_image_ids));
    }
    if (m_volume_configuration.isSet()) {
        obj.insert(QString("volumeConfiguration"), ::OpenAPI::toJsonValue(m_volume_configuration));
    }
    return obj;
}

OAIAutomaticTerminationMode OAICreateLaunchProfile_request_streamConfiguration::getAutomaticTerminationMode() const {
    return m_automatic_termination_mode;
}
void OAICreateLaunchProfile_request_streamConfiguration::setAutomaticTerminationMode(const OAIAutomaticTerminationMode &automatic_termination_mode) {
    m_automatic_termination_mode = automatic_termination_mode;
    m_automatic_termination_mode_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_automatic_termination_mode_Set() const{
    return m_automatic_termination_mode_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_automatic_termination_mode_Valid() const{
    return m_automatic_termination_mode_isValid;
}

OAIStreamingClipboardMode OAICreateLaunchProfile_request_streamConfiguration::getClipboardMode() const {
    return m_clipboard_mode;
}
void OAICreateLaunchProfile_request_streamConfiguration::setClipboardMode(const OAIStreamingClipboardMode &clipboard_mode) {
    m_clipboard_mode = clipboard_mode;
    m_clipboard_mode_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_clipboard_mode_Set() const{
    return m_clipboard_mode_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_clipboard_mode_Valid() const{
    return m_clipboard_mode_isValid;
}

QList OAICreateLaunchProfile_request_streamConfiguration::getEc2InstanceTypes() const {
    return m_ec2_instance_types;
}
void OAICreateLaunchProfile_request_streamConfiguration::setEc2InstanceTypes(const QList &ec2_instance_types) {
    m_ec2_instance_types = ec2_instance_types;
    m_ec2_instance_types_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_ec2_instance_types_Set() const{
    return m_ec2_instance_types_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_ec2_instance_types_Valid() const{
    return m_ec2_instance_types_isValid;
}

qint32 OAICreateLaunchProfile_request_streamConfiguration::getMaxSessionLengthInMinutes() const {
    return m_max_session_length_in_minutes;
}
void OAICreateLaunchProfile_request_streamConfiguration::setMaxSessionLengthInMinutes(const qint32 &max_session_length_in_minutes) {
    m_max_session_length_in_minutes = max_session_length_in_minutes;
    m_max_session_length_in_minutes_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_max_session_length_in_minutes_Set() const{
    return m_max_session_length_in_minutes_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_max_session_length_in_minutes_Valid() const{
    return m_max_session_length_in_minutes_isValid;
}

qint32 OAICreateLaunchProfile_request_streamConfiguration::getMaxStoppedSessionLengthInMinutes() const {
    return m_max_stopped_session_length_in_minutes;
}
void OAICreateLaunchProfile_request_streamConfiguration::setMaxStoppedSessionLengthInMinutes(const qint32 &max_stopped_session_length_in_minutes) {
    m_max_stopped_session_length_in_minutes = max_stopped_session_length_in_minutes;
    m_max_stopped_session_length_in_minutes_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_max_stopped_session_length_in_minutes_Set() const{
    return m_max_stopped_session_length_in_minutes_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_max_stopped_session_length_in_minutes_Valid() const{
    return m_max_stopped_session_length_in_minutes_isValid;
}

OAICreateLaunchProfile_request_streamConfiguration_sessionBackup OAICreateLaunchProfile_request_streamConfiguration::getSessionBackup() const {
    return m_session_backup;
}
void OAICreateLaunchProfile_request_streamConfiguration::setSessionBackup(const OAICreateLaunchProfile_request_streamConfiguration_sessionBackup &session_backup) {
    m_session_backup = session_backup;
    m_session_backup_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_session_backup_Set() const{
    return m_session_backup_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_session_backup_Valid() const{
    return m_session_backup_isValid;
}

OAISessionPersistenceMode OAICreateLaunchProfile_request_streamConfiguration::getSessionPersistenceMode() const {
    return m_session_persistence_mode;
}
void OAICreateLaunchProfile_request_streamConfiguration::setSessionPersistenceMode(const OAISessionPersistenceMode &session_persistence_mode) {
    m_session_persistence_mode = session_persistence_mode;
    m_session_persistence_mode_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_session_persistence_mode_Set() const{
    return m_session_persistence_mode_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_session_persistence_mode_Valid() const{
    return m_session_persistence_mode_isValid;
}

OAICreateLaunchProfile_request_streamConfiguration_sessionStorage OAICreateLaunchProfile_request_streamConfiguration::getSessionStorage() const {
    return m_session_storage;
}
void OAICreateLaunchProfile_request_streamConfiguration::setSessionStorage(const OAICreateLaunchProfile_request_streamConfiguration_sessionStorage &session_storage) {
    m_session_storage = session_storage;
    m_session_storage_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_session_storage_Set() const{
    return m_session_storage_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_session_storage_Valid() const{
    return m_session_storage_isValid;
}

QList OAICreateLaunchProfile_request_streamConfiguration::getStreamingImageIds() const {
    return m_streaming_image_ids;
}
void OAICreateLaunchProfile_request_streamConfiguration::setStreamingImageIds(const QList &streaming_image_ids) {
    m_streaming_image_ids = streaming_image_ids;
    m_streaming_image_ids_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_streaming_image_ids_Set() const{
    return m_streaming_image_ids_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_streaming_image_ids_Valid() const{
    return m_streaming_image_ids_isValid;
}

OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration OAICreateLaunchProfile_request_streamConfiguration::getVolumeConfiguration() const {
    return m_volume_configuration;
}
void OAICreateLaunchProfile_request_streamConfiguration::setVolumeConfiguration(const OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration &volume_configuration) {
    m_volume_configuration = volume_configuration;
    m_volume_configuration_isSet = true;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_volume_configuration_Set() const{
    return m_volume_configuration_isSet;
}

bool OAICreateLaunchProfile_request_streamConfiguration::is_volume_configuration_Valid() const{
    return m_volume_configuration_isValid;
}

bool OAICreateLaunchProfile_request_streamConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_termination_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clipboard_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_session_length_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_stopped_session_length_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_backup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_persistence_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_image_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchProfile_request_streamConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
