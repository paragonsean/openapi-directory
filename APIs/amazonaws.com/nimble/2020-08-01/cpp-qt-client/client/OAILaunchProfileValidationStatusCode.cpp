/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchProfileValidationStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchProfileValidationStatusCode::OAILaunchProfileValidationStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchProfileValidationStatusCode::OAILaunchProfileValidationStatusCode() {
    this->initializeModel();
}

OAILaunchProfileValidationStatusCode::~OAILaunchProfileValidationStatusCode() {}

void OAILaunchProfileValidationStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILaunchProfileValidationStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILaunchProfileValidationStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VALIDATION_NOT_STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::NOT_STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED_SUBNET_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::FAILED_SUBNET_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::FAILED_INVALID_SECURITY_GROUP_ASSOCIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::FAILED_INVALID_ACTIVE_DIRECTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED_UNAUTHORIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::FAILED_UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED_INTERNAL_SERVER_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchProfileValidationStatusCode::FAILED_INTERNAL_SERVER_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILaunchProfileValidationStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILaunchProfileValidationStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILaunchProfileValidationStatusCode::NOT_STARTED:
            val = "VALIDATION_NOT_STARTED";
            break;
        case eOAILaunchProfileValidationStatusCode::IN_PROGRESS:
            val = "VALIDATION_IN_PROGRESS";
            break;
        case eOAILaunchProfileValidationStatusCode::SUCCESS:
            val = "VALIDATION_SUCCESS";
            break;
        case eOAILaunchProfileValidationStatusCode::FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION:
            val = "VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION";
            break;
        case eOAILaunchProfileValidationStatusCode::FAILED_SUBNET_NOT_FOUND:
            val = "VALIDATION_FAILED_SUBNET_NOT_FOUND";
            break;
        case eOAILaunchProfileValidationStatusCode::FAILED_INVALID_SECURITY_GROUP_ASSOCIATION:
            val = "VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION";
            break;
        case eOAILaunchProfileValidationStatusCode::FAILED_INVALID_ACTIVE_DIRECTORY:
            val = "VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY";
            break;
        case eOAILaunchProfileValidationStatusCode::FAILED_UNAUTHORIZED:
            val = "VALIDATION_FAILED_UNAUTHORIZED";
            break;
        case eOAILaunchProfileValidationStatusCode::FAILED_INTERNAL_SERVER_ERROR:
            val = "VALIDATION_FAILED_INTERNAL_SERVER_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILaunchProfileValidationStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILaunchProfileValidationStatusCode::eOAILaunchProfileValidationStatusCode OAILaunchProfileValidationStatusCode::getValue() const {
    return m_value;
}

void OAILaunchProfileValidationStatusCode::setValue(const OAILaunchProfileValidationStatusCode::eOAILaunchProfileValidationStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILaunchProfileValidationStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAILaunchProfileValidationStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
