/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStudioComponentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStudioComponentRequest::OAICreateStudioComponentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStudioComponentRequest::OAICreateStudioComponentRequest() {
    this->initializeModel();
}

OAICreateStudioComponentRequest::~OAICreateStudioComponentRequest() {}

void OAICreateStudioComponentRequest::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ec2_security_group_ids_isSet = false;
    m_ec2_security_group_ids_isValid = false;

    m_initialization_scripts_isSet = false;
    m_initialization_scripts_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_role_arn_isSet = false;
    m_runtime_role_arn_isValid = false;

    m_script_parameters_isSet = false;
    m_script_parameters_isValid = false;

    m_secure_initialization_role_arn_isSet = false;
    m_secure_initialization_role_arn_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateStudioComponentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStudioComponentRequest::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ec2_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_ec2_security_group_ids, json[QString("ec2SecurityGroupIds")]);
    m_ec2_security_group_ids_isSet = !json[QString("ec2SecurityGroupIds")].isNull() && m_ec2_security_group_ids_isValid;

    m_initialization_scripts_isValid = ::OpenAPI::fromJsonValue(m_initialization_scripts, json[QString("initializationScripts")]);
    m_initialization_scripts_isSet = !json[QString("initializationScripts")].isNull() && m_initialization_scripts_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_role_arn_isValid = ::OpenAPI::fromJsonValue(m_runtime_role_arn, json[QString("runtimeRoleArn")]);
    m_runtime_role_arn_isSet = !json[QString("runtimeRoleArn")].isNull() && m_runtime_role_arn_isValid;

    m_script_parameters_isValid = ::OpenAPI::fromJsonValue(m_script_parameters, json[QString("scriptParameters")]);
    m_script_parameters_isSet = !json[QString("scriptParameters")].isNull() && m_script_parameters_isValid;

    m_secure_initialization_role_arn_isValid = ::OpenAPI::fromJsonValue(m_secure_initialization_role_arn, json[QString("secureInitializationRoleArn")]);
    m_secure_initialization_role_arn_isSet = !json[QString("secureInitializationRoleArn")].isNull() && m_secure_initialization_role_arn_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateStudioComponentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStudioComponentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ec2_security_group_ids.isSet()) {
        obj.insert(QString("ec2SecurityGroupIds"), ::OpenAPI::toJsonValue(m_ec2_security_group_ids));
    }
    if (m_initialization_scripts.isSet()) {
        obj.insert(QString("initializationScripts"), ::OpenAPI::toJsonValue(m_initialization_scripts));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_role_arn_isSet) {
        obj.insert(QString("runtimeRoleArn"), ::OpenAPI::toJsonValue(m_runtime_role_arn));
    }
    if (m_script_parameters.isSet()) {
        obj.insert(QString("scriptParameters"), ::OpenAPI::toJsonValue(m_script_parameters));
    }
    if (m_secure_initialization_role_arn_isSet) {
        obj.insert(QString("secureInitializationRoleArn"), ::OpenAPI::toJsonValue(m_secure_initialization_role_arn));
    }
    if (m_subtype.isSet()) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAICreateStudioComponentRequest_configuration OAICreateStudioComponentRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateStudioComponentRequest::setConfiguration(const OAICreateStudioComponentRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateStudioComponentRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateStudioComponentRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICreateStudioComponentRequest::getDescription() const {
    return m_description;
}
void OAICreateStudioComponentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateStudioComponentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateStudioComponentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateStudioComponentRequest::getEc2SecurityGroupIds() const {
    return m_ec2_security_group_ids;
}
void OAICreateStudioComponentRequest::setEc2SecurityGroupIds(const QList &ec2_security_group_ids) {
    m_ec2_security_group_ids = ec2_security_group_ids;
    m_ec2_security_group_ids_isSet = true;
}

bool OAICreateStudioComponentRequest::is_ec2_security_group_ids_Set() const{
    return m_ec2_security_group_ids_isSet;
}

bool OAICreateStudioComponentRequest::is_ec2_security_group_ids_Valid() const{
    return m_ec2_security_group_ids_isValid;
}

QList OAICreateStudioComponentRequest::getInitializationScripts() const {
    return m_initialization_scripts;
}
void OAICreateStudioComponentRequest::setInitializationScripts(const QList &initialization_scripts) {
    m_initialization_scripts = initialization_scripts;
    m_initialization_scripts_isSet = true;
}

bool OAICreateStudioComponentRequest::is_initialization_scripts_Set() const{
    return m_initialization_scripts_isSet;
}

bool OAICreateStudioComponentRequest::is_initialization_scripts_Valid() const{
    return m_initialization_scripts_isValid;
}

QString OAICreateStudioComponentRequest::getName() const {
    return m_name;
}
void OAICreateStudioComponentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateStudioComponentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateStudioComponentRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateStudioComponentRequest::getRuntimeRoleArn() const {
    return m_runtime_role_arn;
}
void OAICreateStudioComponentRequest::setRuntimeRoleArn(const QString &runtime_role_arn) {
    m_runtime_role_arn = runtime_role_arn;
    m_runtime_role_arn_isSet = true;
}

bool OAICreateStudioComponentRequest::is_runtime_role_arn_Set() const{
    return m_runtime_role_arn_isSet;
}

bool OAICreateStudioComponentRequest::is_runtime_role_arn_Valid() const{
    return m_runtime_role_arn_isValid;
}

QList OAICreateStudioComponentRequest::getScriptParameters() const {
    return m_script_parameters;
}
void OAICreateStudioComponentRequest::setScriptParameters(const QList &script_parameters) {
    m_script_parameters = script_parameters;
    m_script_parameters_isSet = true;
}

bool OAICreateStudioComponentRequest::is_script_parameters_Set() const{
    return m_script_parameters_isSet;
}

bool OAICreateStudioComponentRequest::is_script_parameters_Valid() const{
    return m_script_parameters_isValid;
}

QString OAICreateStudioComponentRequest::getSecureInitializationRoleArn() const {
    return m_secure_initialization_role_arn;
}
void OAICreateStudioComponentRequest::setSecureInitializationRoleArn(const QString &secure_initialization_role_arn) {
    m_secure_initialization_role_arn = secure_initialization_role_arn;
    m_secure_initialization_role_arn_isSet = true;
}

bool OAICreateStudioComponentRequest::is_secure_initialization_role_arn_Set() const{
    return m_secure_initialization_role_arn_isSet;
}

bool OAICreateStudioComponentRequest::is_secure_initialization_role_arn_Valid() const{
    return m_secure_initialization_role_arn_isValid;
}

OAIStudioComponentSubtype OAICreateStudioComponentRequest::getSubtype() const {
    return m_subtype;
}
void OAICreateStudioComponentRequest::setSubtype(const OAIStudioComponentSubtype &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAICreateStudioComponentRequest::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAICreateStudioComponentRequest::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QMap OAICreateStudioComponentRequest::getTags() const {
    return m_tags;
}
void OAICreateStudioComponentRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStudioComponentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStudioComponentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIStudioComponentType OAICreateStudioComponentRequest::getType() const {
    return m_type;
}
void OAICreateStudioComponentRequest::setType(const OAIStudioComponentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateStudioComponentRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateStudioComponentRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateStudioComponentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_scripts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_initialization_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStudioComponentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
