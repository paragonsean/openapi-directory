/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStreamingSessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStreamingSessionRequest::OAICreateStreamingSessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStreamingSessionRequest::OAICreateStreamingSessionRequest() {
    this->initializeModel();
}

OAICreateStreamingSessionRequest::~OAICreateStreamingSessionRequest() {}

void OAICreateStreamingSessionRequest::initializeModel() {

    m_ec2_instance_type_isSet = false;
    m_ec2_instance_type_isValid = false;

    m_launch_profile_id_isSet = false;
    m_launch_profile_id_isValid = false;

    m_owned_by_isSet = false;
    m_owned_by_isValid = false;

    m_streaming_image_id_isSet = false;
    m_streaming_image_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateStreamingSessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStreamingSessionRequest::fromJsonObject(QJsonObject json) {

    m_ec2_instance_type_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_type, json[QString("ec2InstanceType")]);
    m_ec2_instance_type_isSet = !json[QString("ec2InstanceType")].isNull() && m_ec2_instance_type_isValid;

    m_launch_profile_id_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_id, json[QString("launchProfileId")]);
    m_launch_profile_id_isSet = !json[QString("launchProfileId")].isNull() && m_launch_profile_id_isValid;

    m_owned_by_isValid = ::OpenAPI::fromJsonValue(m_owned_by, json[QString("ownedBy")]);
    m_owned_by_isSet = !json[QString("ownedBy")].isNull() && m_owned_by_isValid;

    m_streaming_image_id_isValid = ::OpenAPI::fromJsonValue(m_streaming_image_id, json[QString("streamingImageId")]);
    m_streaming_image_id_isSet = !json[QString("streamingImageId")].isNull() && m_streaming_image_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateStreamingSessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStreamingSessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_instance_type.isSet()) {
        obj.insert(QString("ec2InstanceType"), ::OpenAPI::toJsonValue(m_ec2_instance_type));
    }
    if (m_launch_profile_id_isSet) {
        obj.insert(QString("launchProfileId"), ::OpenAPI::toJsonValue(m_launch_profile_id));
    }
    if (m_owned_by_isSet) {
        obj.insert(QString("ownedBy"), ::OpenAPI::toJsonValue(m_owned_by));
    }
    if (m_streaming_image_id_isSet) {
        obj.insert(QString("streamingImageId"), ::OpenAPI::toJsonValue(m_streaming_image_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIStreamingInstanceType OAICreateStreamingSessionRequest::getEc2InstanceType() const {
    return m_ec2_instance_type;
}
void OAICreateStreamingSessionRequest::setEc2InstanceType(const OAIStreamingInstanceType &ec2_instance_type) {
    m_ec2_instance_type = ec2_instance_type;
    m_ec2_instance_type_isSet = true;
}

bool OAICreateStreamingSessionRequest::is_ec2_instance_type_Set() const{
    return m_ec2_instance_type_isSet;
}

bool OAICreateStreamingSessionRequest::is_ec2_instance_type_Valid() const{
    return m_ec2_instance_type_isValid;
}

QString OAICreateStreamingSessionRequest::getLaunchProfileId() const {
    return m_launch_profile_id;
}
void OAICreateStreamingSessionRequest::setLaunchProfileId(const QString &launch_profile_id) {
    m_launch_profile_id = launch_profile_id;
    m_launch_profile_id_isSet = true;
}

bool OAICreateStreamingSessionRequest::is_launch_profile_id_Set() const{
    return m_launch_profile_id_isSet;
}

bool OAICreateStreamingSessionRequest::is_launch_profile_id_Valid() const{
    return m_launch_profile_id_isValid;
}

QString OAICreateStreamingSessionRequest::getOwnedBy() const {
    return m_owned_by;
}
void OAICreateStreamingSessionRequest::setOwnedBy(const QString &owned_by) {
    m_owned_by = owned_by;
    m_owned_by_isSet = true;
}

bool OAICreateStreamingSessionRequest::is_owned_by_Set() const{
    return m_owned_by_isSet;
}

bool OAICreateStreamingSessionRequest::is_owned_by_Valid() const{
    return m_owned_by_isValid;
}

QString OAICreateStreamingSessionRequest::getStreamingImageId() const {
    return m_streaming_image_id;
}
void OAICreateStreamingSessionRequest::setStreamingImageId(const QString &streaming_image_id) {
    m_streaming_image_id = streaming_image_id;
    m_streaming_image_id_isSet = true;
}

bool OAICreateStreamingSessionRequest::is_streaming_image_id_Set() const{
    return m_streaming_image_id_isSet;
}

bool OAICreateStreamingSessionRequest::is_streaming_image_id_Valid() const{
    return m_streaming_image_id_isValid;
}

QMap OAICreateStreamingSessionRequest::getTags() const {
    return m_tags;
}
void OAICreateStreamingSessionRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStreamingSessionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStreamingSessionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateStreamingSessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStreamingSessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_launch_profile_id_isValid && true;
}

} // namespace OpenAPI
