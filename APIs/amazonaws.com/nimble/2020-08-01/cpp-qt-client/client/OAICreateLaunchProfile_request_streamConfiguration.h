/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLaunchProfile_request_streamConfiguration.h
 *
 * Configuration for streaming workstations created using this launch profile.
 */

#ifndef OAICreateLaunchProfile_request_streamConfiguration_H
#define OAICreateLaunchProfile_request_streamConfiguration_H

#include <QJsonObject>

#include "OAIAutomaticTerminationMode.h"
#include "OAICreateLaunchProfile_request_streamConfiguration_sessionBackup.h"
#include "OAICreateLaunchProfile_request_streamConfiguration_sessionStorage.h"
#include "OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration.h"
#include "OAISessionPersistenceMode.h"
#include "OAIStreamingClipboardMode.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLaunchProfile_request_streamConfiguration_sessionBackup;
class OAICreateLaunchProfile_request_streamConfiguration_sessionStorage;
class OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration;

class OAICreateLaunchProfile_request_streamConfiguration : public OAIObject {
public:
    OAICreateLaunchProfile_request_streamConfiguration();
    OAICreateLaunchProfile_request_streamConfiguration(QString json);
    ~OAICreateLaunchProfile_request_streamConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAutomaticTerminationMode getAutomaticTerminationMode() const;
    void setAutomaticTerminationMode(const OAIAutomaticTerminationMode &automatic_termination_mode);
    bool is_automatic_termination_mode_Set() const;
    bool is_automatic_termination_mode_Valid() const;

    OAIStreamingClipboardMode getClipboardMode() const;
    void setClipboardMode(const OAIStreamingClipboardMode &clipboard_mode);
    bool is_clipboard_mode_Set() const;
    bool is_clipboard_mode_Valid() const;

    QList getEc2InstanceTypes() const;
    void setEc2InstanceTypes(const QList &ec2_instance_types);
    bool is_ec2_instance_types_Set() const;
    bool is_ec2_instance_types_Valid() const;

    qint32 getMaxSessionLengthInMinutes() const;
    void setMaxSessionLengthInMinutes(const qint32 &max_session_length_in_minutes);
    bool is_max_session_length_in_minutes_Set() const;
    bool is_max_session_length_in_minutes_Valid() const;

    qint32 getMaxStoppedSessionLengthInMinutes() const;
    void setMaxStoppedSessionLengthInMinutes(const qint32 &max_stopped_session_length_in_minutes);
    bool is_max_stopped_session_length_in_minutes_Set() const;
    bool is_max_stopped_session_length_in_minutes_Valid() const;

    OAICreateLaunchProfile_request_streamConfiguration_sessionBackup getSessionBackup() const;
    void setSessionBackup(const OAICreateLaunchProfile_request_streamConfiguration_sessionBackup &session_backup);
    bool is_session_backup_Set() const;
    bool is_session_backup_Valid() const;

    OAISessionPersistenceMode getSessionPersistenceMode() const;
    void setSessionPersistenceMode(const OAISessionPersistenceMode &session_persistence_mode);
    bool is_session_persistence_mode_Set() const;
    bool is_session_persistence_mode_Valid() const;

    OAICreateLaunchProfile_request_streamConfiguration_sessionStorage getSessionStorage() const;
    void setSessionStorage(const OAICreateLaunchProfile_request_streamConfiguration_sessionStorage &session_storage);
    bool is_session_storage_Set() const;
    bool is_session_storage_Valid() const;

    QList getStreamingImageIds() const;
    void setStreamingImageIds(const QList &streaming_image_ids);
    bool is_streaming_image_ids_Set() const;
    bool is_streaming_image_ids_Valid() const;

    OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration getVolumeConfiguration() const;
    void setVolumeConfiguration(const OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration &volume_configuration);
    bool is_volume_configuration_Set() const;
    bool is_volume_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAutomaticTerminationMode m_automatic_termination_mode;
    bool m_automatic_termination_mode_isSet;
    bool m_automatic_termination_mode_isValid;

    OAIStreamingClipboardMode m_clipboard_mode;
    bool m_clipboard_mode_isSet;
    bool m_clipboard_mode_isValid;

    QList m_ec2_instance_types;
    bool m_ec2_instance_types_isSet;
    bool m_ec2_instance_types_isValid;

    qint32 m_max_session_length_in_minutes;
    bool m_max_session_length_in_minutes_isSet;
    bool m_max_session_length_in_minutes_isValid;

    qint32 m_max_stopped_session_length_in_minutes;
    bool m_max_stopped_session_length_in_minutes_isSet;
    bool m_max_stopped_session_length_in_minutes_isValid;

    OAICreateLaunchProfile_request_streamConfiguration_sessionBackup m_session_backup;
    bool m_session_backup_isSet;
    bool m_session_backup_isValid;

    OAISessionPersistenceMode m_session_persistence_mode;
    bool m_session_persistence_mode_isSet;
    bool m_session_persistence_mode_isValid;

    OAICreateLaunchProfile_request_streamConfiguration_sessionStorage m_session_storage;
    bool m_session_storage_isSet;
    bool m_session_storage_isValid;

    QList m_streaming_image_ids;
    bool m_streaming_image_ids_isSet;
    bool m_streaming_image_ids_isValid;

    OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration m_volume_configuration;
    bool m_volume_configuration_isSet;
    bool m_volume_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLaunchProfile_request_streamConfiguration)

#endif // OAICreateLaunchProfile_request_streamConfiguration_H
