/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptEulasResponse.h"
#include "OAIAcceptEulas_request.h"
#include "OAICreateLaunchProfileResponse.h"
#include "OAICreateLaunchProfile_request.h"
#include "OAICreateStreamingImageResponse.h"
#include "OAICreateStreamingImage_request.h"
#include "OAICreateStreamingSessionResponse.h"
#include "OAICreateStreamingSessionStreamResponse.h"
#include "OAICreateStreamingSessionStream_request.h"
#include "OAICreateStreamingSession_request.h"
#include "OAICreateStudioComponentResponse.h"
#include "OAICreateStudioComponent_request.h"
#include "OAICreateStudioResponse.h"
#include "OAICreateStudio_request.h"
#include "OAIDeleteLaunchProfileResponse.h"
#include "OAIDeleteStreamingImageResponse.h"
#include "OAIDeleteStreamingSessionResponse.h"
#include "OAIDeleteStudioComponentResponse.h"
#include "OAIDeleteStudioResponse.h"
#include "OAIGetEulaResponse.h"
#include "OAIGetLaunchProfileDetailsResponse.h"
#include "OAIGetLaunchProfileInitializationResponse.h"
#include "OAIGetLaunchProfileMemberResponse.h"
#include "OAIGetLaunchProfileResponse.h"
#include "OAIGetStreamingImageResponse.h"
#include "OAIGetStreamingSessionBackupResponse.h"
#include "OAIGetStreamingSessionResponse.h"
#include "OAIGetStreamingSessionStreamResponse.h"
#include "OAIGetStudioComponentResponse.h"
#include "OAIGetStudioMemberResponse.h"
#include "OAIGetStudioResponse.h"
#include "OAILaunchProfileState.h"
#include "OAIListEulaAcceptancesResponse.h"
#include "OAIListEulasResponse.h"
#include "OAIListLaunchProfileMembersResponse.h"
#include "OAIListLaunchProfilesResponse.h"
#include "OAIListStreamingImagesResponse.h"
#include "OAIListStreamingSessionBackupsResponse.h"
#include "OAIListStreamingSessionsResponse.h"
#include "OAIListStudioComponentsResponse.h"
#include "OAIListStudioMembersResponse.h"
#include "OAIListStudiosResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIObject.h"
#include "OAIPutLaunchProfileMembers_request.h"
#include "OAIPutStudioMembers_request.h"
#include "OAIStartStreamingSessionResponse.h"
#include "OAIStartStreamingSession_request.h"
#include "OAIStartStudioSSOConfigurationRepairResponse.h"
#include "OAIStopStreamingSessionResponse.h"
#include "OAIStopStreamingSession_request.h"
#include "OAIStudioComponentState.h"
#include "OAIStudioComponentType.h"
#include "OAITagResource_request.h"
#include "OAIUpdateLaunchProfileMemberResponse.h"
#include "OAIUpdateLaunchProfileMember_request.h"
#include "OAIUpdateLaunchProfileResponse.h"
#include "OAIUpdateLaunchProfile_request.h"
#include "OAIUpdateStreamingImageResponse.h"
#include "OAIUpdateStreamingImage_request.h"
#include "OAIUpdateStudioComponentResponse.h"
#include "OAIUpdateStudioComponent_request.h"
#include "OAIUpdateStudioResponse.h"
#include "OAIUpdateStudio_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_accept_eulas_request OAIAcceptEulas_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void acceptEulas(const QString &studio_id, const OAIAcceptEulas_request &oai_accept_eulas_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_create_launch_profile_request OAICreateLaunchProfile_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void createLaunchProfile(const QString &studio_id, const OAICreateLaunchProfile_request &oai_create_launch_profile_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_create_streaming_image_request OAICreateStreamingImage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void createStreamingImage(const QString &studio_id, const OAICreateStreamingImage_request &oai_create_streaming_image_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_create_streaming_session_request OAICreateStreamingSession_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void createStreamingSession(const QString &studio_id, const OAICreateStreamingSession_request &oai_create_streaming_session_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_create_streaming_session_stream_request OAICreateStreamingSessionStream_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void createStreamingSessionStream(const QString &session_id, const QString &studio_id, const OAICreateStreamingSessionStream_request &oai_create_streaming_session_stream_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_studio_request OAICreateStudio_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void createStudio(const OAICreateStudio_request &oai_create_studio_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_create_studio_component_request OAICreateStudioComponent_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void createStudioComponent(const QString &studio_id, const OAICreateStudioComponent_request &oai_create_studio_component_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteLaunchProfile(const QString &launch_profile_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  principal_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteLaunchProfileMember(const QString &launch_profile_id, const QString &principal_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  streaming_image_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteStreamingImage(const QString &streaming_image_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteStreamingSession(const QString &session_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteStudio(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_component_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteStudioComponent(const QString &studio_component_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  principal_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void deleteStudioMember(const QString &principal_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  eula_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEula(const QString &eula_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLaunchProfile(const QString &launch_profile_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLaunchProfileDetails(const QString &launch_profile_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  launch_profile_protocol_versions QList<QString> [required]
    * @param[in]  launch_purpose QString [required]
    * @param[in]  platform QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLaunchProfileInitialization(const QString &launch_profile_id, const QList<QString> &launch_profile_protocol_versions, const QString &launch_purpose, const QString &platform, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  principal_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLaunchProfileMember(const QString &launch_profile_id, const QString &principal_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  streaming_image_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingImage(const QString &streaming_image_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingSession(const QString &session_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  backup_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingSessionBackup(const QString &backup_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  stream_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingSessionStream(const QString &session_id, const QString &stream_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStudio(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_component_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStudioComponent(const QString &studio_component_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  principal_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStudioMember(const QString &principal_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  eula_ids QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listEulaAcceptances(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &eula_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  eula_ids QList<QString> [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listEulas(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &eula_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listLaunchProfileMembers(const QString &launch_profile_id, const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  principal_id QString [optional]
    * @param[in]  states QList<OAILaunchProfileState> [optional]
    */
    virtual void listLaunchProfiles(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &principal_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAILaunchProfileState>> &states = ::OpenAPI::OptionalParam<QList<OAILaunchProfileState>>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  owner QString [optional]
    */
    virtual void listStreamingImages(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  owned_by QString [optional]
    */
    virtual void listStreamingSessionBackups(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  created_by QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  owned_by QString [optional]
    * @param[in]  session_ids QString [optional]
    */
    virtual void listStreamingSessions(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owned_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &session_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  states QList<OAIStudioComponentState> [optional]
    * @param[in]  types QList<OAIStudioComponentType> [optional]
    */
    virtual void listStudioComponents(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIStudioComponentState>> &states = ::OpenAPI::OptionalParam<QList<OAIStudioComponentState>>(), const ::OpenAPI::OptionalParam<QList<OAIStudioComponentType>> &types = ::OpenAPI::OptionalParam<QList<OAIStudioComponentType>>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listStudioMembers(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listStudios(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_put_launch_profile_members_request OAIPutLaunchProfileMembers_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void putLaunchProfileMembers(const QString &launch_profile_id, const QString &studio_id, const OAIPutLaunchProfileMembers_request &oai_put_launch_profile_members_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_put_studio_members_request OAIPutStudioMembers_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void putStudioMembers(const QString &studio_id, const OAIPutStudioMembers_request &oai_put_studio_members_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_start_streaming_session_request OAIStartStreamingSession_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void startStreamingSession(const QString &session_id, const QString &studio_id, const OAIStartStreamingSession_request &oai_start_streaming_session_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void startStudioSSOConfigurationRepair(const QString &studio_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_stop_streaming_session_request OAIStopStreamingSession_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void stopStreamingSession(const QString &session_id, const QString &studio_id, const OAIStopStreamingSession_request &oai_stop_streaming_session_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &resource_arn, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &resource_arn, const QList<QString> &tag_keys, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_update_launch_profile_request OAIUpdateLaunchProfile_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void updateLaunchProfile(const QString &launch_profile_id, const QString &studio_id, const OAIUpdateLaunchProfile_request &oai_update_launch_profile_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  launch_profile_id QString [required]
    * @param[in]  principal_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_update_launch_profile_member_request OAIUpdateLaunchProfileMember_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void updateLaunchProfileMember(const QString &launch_profile_id, const QString &principal_id, const QString &studio_id, const OAIUpdateLaunchProfileMember_request &oai_update_launch_profile_member_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  streaming_image_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_update_streaming_image_request OAIUpdateStreamingImage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void updateStreamingImage(const QString &streaming_image_id, const QString &studio_id, const OAIUpdateStreamingImage_request &oai_update_streaming_image_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_update_studio_request OAIUpdateStudio_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void updateStudio(const QString &studio_id, const OAIUpdateStudio_request &oai_update_studio_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  studio_component_id QString [required]
    * @param[in]  studio_id QString [required]
    * @param[in]  oai_update_studio_component_request OAIUpdateStudioComponent_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_client_token QString [optional]
    */
    virtual void updateStudioComponent(const QString &studio_component_id, const QString &studio_id, const OAIUpdateStudioComponent_request &oai_update_studio_component_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_client_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptEulasCallback(OAIHttpRequestWorker *worker);
    void createLaunchProfileCallback(OAIHttpRequestWorker *worker);
    void createStreamingImageCallback(OAIHttpRequestWorker *worker);
    void createStreamingSessionCallback(OAIHttpRequestWorker *worker);
    void createStreamingSessionStreamCallback(OAIHttpRequestWorker *worker);
    void createStudioCallback(OAIHttpRequestWorker *worker);
    void createStudioComponentCallback(OAIHttpRequestWorker *worker);
    void deleteLaunchProfileCallback(OAIHttpRequestWorker *worker);
    void deleteLaunchProfileMemberCallback(OAIHttpRequestWorker *worker);
    void deleteStreamingImageCallback(OAIHttpRequestWorker *worker);
    void deleteStreamingSessionCallback(OAIHttpRequestWorker *worker);
    void deleteStudioCallback(OAIHttpRequestWorker *worker);
    void deleteStudioComponentCallback(OAIHttpRequestWorker *worker);
    void deleteStudioMemberCallback(OAIHttpRequestWorker *worker);
    void getEulaCallback(OAIHttpRequestWorker *worker);
    void getLaunchProfileCallback(OAIHttpRequestWorker *worker);
    void getLaunchProfileDetailsCallback(OAIHttpRequestWorker *worker);
    void getLaunchProfileInitializationCallback(OAIHttpRequestWorker *worker);
    void getLaunchProfileMemberCallback(OAIHttpRequestWorker *worker);
    void getStreamingImageCallback(OAIHttpRequestWorker *worker);
    void getStreamingSessionCallback(OAIHttpRequestWorker *worker);
    void getStreamingSessionBackupCallback(OAIHttpRequestWorker *worker);
    void getStreamingSessionStreamCallback(OAIHttpRequestWorker *worker);
    void getStudioCallback(OAIHttpRequestWorker *worker);
    void getStudioComponentCallback(OAIHttpRequestWorker *worker);
    void getStudioMemberCallback(OAIHttpRequestWorker *worker);
    void listEulaAcceptancesCallback(OAIHttpRequestWorker *worker);
    void listEulasCallback(OAIHttpRequestWorker *worker);
    void listLaunchProfileMembersCallback(OAIHttpRequestWorker *worker);
    void listLaunchProfilesCallback(OAIHttpRequestWorker *worker);
    void listStreamingImagesCallback(OAIHttpRequestWorker *worker);
    void listStreamingSessionBackupsCallback(OAIHttpRequestWorker *worker);
    void listStreamingSessionsCallback(OAIHttpRequestWorker *worker);
    void listStudioComponentsCallback(OAIHttpRequestWorker *worker);
    void listStudioMembersCallback(OAIHttpRequestWorker *worker);
    void listStudiosCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void putLaunchProfileMembersCallback(OAIHttpRequestWorker *worker);
    void putStudioMembersCallback(OAIHttpRequestWorker *worker);
    void startStreamingSessionCallback(OAIHttpRequestWorker *worker);
    void startStudioSSOConfigurationRepairCallback(OAIHttpRequestWorker *worker);
    void stopStreamingSessionCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateLaunchProfileCallback(OAIHttpRequestWorker *worker);
    void updateLaunchProfileMemberCallback(OAIHttpRequestWorker *worker);
    void updateStreamingImageCallback(OAIHttpRequestWorker *worker);
    void updateStudioCallback(OAIHttpRequestWorker *worker);
    void updateStudioComponentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptEulasSignal(OAIAcceptEulasResponse summary);
    void createLaunchProfileSignal(OAICreateLaunchProfileResponse summary);
    void createStreamingImageSignal(OAICreateStreamingImageResponse summary);
    void createStreamingSessionSignal(OAICreateStreamingSessionResponse summary);
    void createStreamingSessionStreamSignal(OAICreateStreamingSessionStreamResponse summary);
    void createStudioSignal(OAICreateStudioResponse summary);
    void createStudioComponentSignal(OAICreateStudioComponentResponse summary);
    void deleteLaunchProfileSignal(OAIDeleteLaunchProfileResponse summary);
    void deleteLaunchProfileMemberSignal(OAIObject summary);
    void deleteStreamingImageSignal(OAIDeleteStreamingImageResponse summary);
    void deleteStreamingSessionSignal(OAIDeleteStreamingSessionResponse summary);
    void deleteStudioSignal(OAIDeleteStudioResponse summary);
    void deleteStudioComponentSignal(OAIDeleteStudioComponentResponse summary);
    void deleteStudioMemberSignal(OAIObject summary);
    void getEulaSignal(OAIGetEulaResponse summary);
    void getLaunchProfileSignal(OAIGetLaunchProfileResponse summary);
    void getLaunchProfileDetailsSignal(OAIGetLaunchProfileDetailsResponse summary);
    void getLaunchProfileInitializationSignal(OAIGetLaunchProfileInitializationResponse summary);
    void getLaunchProfileMemberSignal(OAIGetLaunchProfileMemberResponse summary);
    void getStreamingImageSignal(OAIGetStreamingImageResponse summary);
    void getStreamingSessionSignal(OAIGetStreamingSessionResponse summary);
    void getStreamingSessionBackupSignal(OAIGetStreamingSessionBackupResponse summary);
    void getStreamingSessionStreamSignal(OAIGetStreamingSessionStreamResponse summary);
    void getStudioSignal(OAIGetStudioResponse summary);
    void getStudioComponentSignal(OAIGetStudioComponentResponse summary);
    void getStudioMemberSignal(OAIGetStudioMemberResponse summary);
    void listEulaAcceptancesSignal(OAIListEulaAcceptancesResponse summary);
    void listEulasSignal(OAIListEulasResponse summary);
    void listLaunchProfileMembersSignal(OAIListLaunchProfileMembersResponse summary);
    void listLaunchProfilesSignal(OAIListLaunchProfilesResponse summary);
    void listStreamingImagesSignal(OAIListStreamingImagesResponse summary);
    void listStreamingSessionBackupsSignal(OAIListStreamingSessionBackupsResponse summary);
    void listStreamingSessionsSignal(OAIListStreamingSessionsResponse summary);
    void listStudioComponentsSignal(OAIListStudioComponentsResponse summary);
    void listStudioMembersSignal(OAIListStudioMembersResponse summary);
    void listStudiosSignal(OAIListStudiosResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void putLaunchProfileMembersSignal(OAIObject summary);
    void putStudioMembersSignal(OAIObject summary);
    void startStreamingSessionSignal(OAIStartStreamingSessionResponse summary);
    void startStudioSSOConfigurationRepairSignal(OAIStartStudioSSOConfigurationRepairResponse summary);
    void stopStreamingSessionSignal(OAIStopStreamingSessionResponse summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateLaunchProfileSignal(OAIUpdateLaunchProfileResponse summary);
    void updateLaunchProfileMemberSignal(OAIUpdateLaunchProfileMemberResponse summary);
    void updateStreamingImageSignal(OAIUpdateStreamingImageResponse summary);
    void updateStudioSignal(OAIUpdateStudioResponse summary);
    void updateStudioComponentSignal(OAIUpdateStudioComponentResponse summary);


    void acceptEulasSignalFull(OAIHttpRequestWorker *worker, OAIAcceptEulasResponse summary);
    void createLaunchProfileSignalFull(OAIHttpRequestWorker *worker, OAICreateLaunchProfileResponse summary);
    void createStreamingImageSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingImageResponse summary);
    void createStreamingSessionSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingSessionResponse summary);
    void createStreamingSessionStreamSignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingSessionStreamResponse summary);
    void createStudioSignalFull(OAIHttpRequestWorker *worker, OAICreateStudioResponse summary);
    void createStudioComponentSignalFull(OAIHttpRequestWorker *worker, OAICreateStudioComponentResponse summary);
    void deleteLaunchProfileSignalFull(OAIHttpRequestWorker *worker, OAIDeleteLaunchProfileResponse summary);
    void deleteLaunchProfileMemberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteStreamingImageSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStreamingImageResponse summary);
    void deleteStreamingSessionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStreamingSessionResponse summary);
    void deleteStudioSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStudioResponse summary);
    void deleteStudioComponentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStudioComponentResponse summary);
    void deleteStudioMemberSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getEulaSignalFull(OAIHttpRequestWorker *worker, OAIGetEulaResponse summary);
    void getLaunchProfileSignalFull(OAIHttpRequestWorker *worker, OAIGetLaunchProfileResponse summary);
    void getLaunchProfileDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGetLaunchProfileDetailsResponse summary);
    void getLaunchProfileInitializationSignalFull(OAIHttpRequestWorker *worker, OAIGetLaunchProfileInitializationResponse summary);
    void getLaunchProfileMemberSignalFull(OAIHttpRequestWorker *worker, OAIGetLaunchProfileMemberResponse summary);
    void getStreamingImageSignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingImageResponse summary);
    void getStreamingSessionSignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingSessionResponse summary);
    void getStreamingSessionBackupSignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingSessionBackupResponse summary);
    void getStreamingSessionStreamSignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingSessionStreamResponse summary);
    void getStudioSignalFull(OAIHttpRequestWorker *worker, OAIGetStudioResponse summary);
    void getStudioComponentSignalFull(OAIHttpRequestWorker *worker, OAIGetStudioComponentResponse summary);
    void getStudioMemberSignalFull(OAIHttpRequestWorker *worker, OAIGetStudioMemberResponse summary);
    void listEulaAcceptancesSignalFull(OAIHttpRequestWorker *worker, OAIListEulaAcceptancesResponse summary);
    void listEulasSignalFull(OAIHttpRequestWorker *worker, OAIListEulasResponse summary);
    void listLaunchProfileMembersSignalFull(OAIHttpRequestWorker *worker, OAIListLaunchProfileMembersResponse summary);
    void listLaunchProfilesSignalFull(OAIHttpRequestWorker *worker, OAIListLaunchProfilesResponse summary);
    void listStreamingImagesSignalFull(OAIHttpRequestWorker *worker, OAIListStreamingImagesResponse summary);
    void listStreamingSessionBackupsSignalFull(OAIHttpRequestWorker *worker, OAIListStreamingSessionBackupsResponse summary);
    void listStreamingSessionsSignalFull(OAIHttpRequestWorker *worker, OAIListStreamingSessionsResponse summary);
    void listStudioComponentsSignalFull(OAIHttpRequestWorker *worker, OAIListStudioComponentsResponse summary);
    void listStudioMembersSignalFull(OAIHttpRequestWorker *worker, OAIListStudioMembersResponse summary);
    void listStudiosSignalFull(OAIHttpRequestWorker *worker, OAIListStudiosResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void putLaunchProfileMembersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void putStudioMembersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void startStreamingSessionSignalFull(OAIHttpRequestWorker *worker, OAIStartStreamingSessionResponse summary);
    void startStudioSSOConfigurationRepairSignalFull(OAIHttpRequestWorker *worker, OAIStartStudioSSOConfigurationRepairResponse summary);
    void stopStreamingSessionSignalFull(OAIHttpRequestWorker *worker, OAIStopStreamingSessionResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateLaunchProfileSignalFull(OAIHttpRequestWorker *worker, OAIUpdateLaunchProfileResponse summary);
    void updateLaunchProfileMemberSignalFull(OAIHttpRequestWorker *worker, OAIUpdateLaunchProfileMemberResponse summary);
    void updateStreamingImageSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStreamingImageResponse summary);
    void updateStudioSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStudioResponse summary);
    void updateStudioComponentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStudioComponentResponse summary);

    Q_DECL_DEPRECATED_X("Use acceptEulasSignalError() instead")
    void acceptEulasSignalE(OAIAcceptEulasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptEulasSignalError(OAIAcceptEulasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLaunchProfileSignalError() instead")
    void createLaunchProfileSignalE(OAICreateLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLaunchProfileSignalError(OAICreateLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingImageSignalError() instead")
    void createStreamingImageSignalE(OAICreateStreamingImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingImageSignalError(OAICreateStreamingImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingSessionSignalError() instead")
    void createStreamingSessionSignalE(OAICreateStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingSessionSignalError(OAICreateStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingSessionStreamSignalError() instead")
    void createStreamingSessionStreamSignalE(OAICreateStreamingSessionStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingSessionStreamSignalError(OAICreateStreamingSessionStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStudioSignalError() instead")
    void createStudioSignalE(OAICreateStudioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStudioSignalError(OAICreateStudioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStudioComponentSignalError() instead")
    void createStudioComponentSignalE(OAICreateStudioComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStudioComponentSignalError(OAICreateStudioComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLaunchProfileSignalError() instead")
    void deleteLaunchProfileSignalE(OAIDeleteLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLaunchProfileSignalError(OAIDeleteLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLaunchProfileMemberSignalError() instead")
    void deleteLaunchProfileMemberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLaunchProfileMemberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingImageSignalError() instead")
    void deleteStreamingImageSignalE(OAIDeleteStreamingImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingImageSignalError(OAIDeleteStreamingImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingSessionSignalError() instead")
    void deleteStreamingSessionSignalE(OAIDeleteStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingSessionSignalError(OAIDeleteStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStudioSignalError() instead")
    void deleteStudioSignalE(OAIDeleteStudioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStudioSignalError(OAIDeleteStudioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStudioComponentSignalError() instead")
    void deleteStudioComponentSignalE(OAIDeleteStudioComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStudioComponentSignalError(OAIDeleteStudioComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStudioMemberSignalError() instead")
    void deleteStudioMemberSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStudioMemberSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEulaSignalError() instead")
    void getEulaSignalE(OAIGetEulaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEulaSignalError(OAIGetEulaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileSignalError() instead")
    void getLaunchProfileSignalE(OAIGetLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileSignalError(OAIGetLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileDetailsSignalError() instead")
    void getLaunchProfileDetailsSignalE(OAIGetLaunchProfileDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileDetailsSignalError(OAIGetLaunchProfileDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileInitializationSignalError() instead")
    void getLaunchProfileInitializationSignalE(OAIGetLaunchProfileInitializationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileInitializationSignalError(OAIGetLaunchProfileInitializationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileMemberSignalError() instead")
    void getLaunchProfileMemberSignalE(OAIGetLaunchProfileMemberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileMemberSignalError(OAIGetLaunchProfileMemberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingImageSignalError() instead")
    void getStreamingImageSignalE(OAIGetStreamingImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingImageSignalError(OAIGetStreamingImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingSessionSignalError() instead")
    void getStreamingSessionSignalE(OAIGetStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingSessionSignalError(OAIGetStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingSessionBackupSignalError() instead")
    void getStreamingSessionBackupSignalE(OAIGetStreamingSessionBackupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingSessionBackupSignalError(OAIGetStreamingSessionBackupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingSessionStreamSignalError() instead")
    void getStreamingSessionStreamSignalE(OAIGetStreamingSessionStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingSessionStreamSignalError(OAIGetStreamingSessionStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioSignalError() instead")
    void getStudioSignalE(OAIGetStudioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioSignalError(OAIGetStudioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioComponentSignalError() instead")
    void getStudioComponentSignalE(OAIGetStudioComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioComponentSignalError(OAIGetStudioComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioMemberSignalError() instead")
    void getStudioMemberSignalE(OAIGetStudioMemberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioMemberSignalError(OAIGetStudioMemberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEulaAcceptancesSignalError() instead")
    void listEulaAcceptancesSignalE(OAIListEulaAcceptancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEulaAcceptancesSignalError(OAIListEulaAcceptancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEulasSignalError() instead")
    void listEulasSignalE(OAIListEulasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEulasSignalError(OAIListEulasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLaunchProfileMembersSignalError() instead")
    void listLaunchProfileMembersSignalE(OAIListLaunchProfileMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLaunchProfileMembersSignalError(OAIListLaunchProfileMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLaunchProfilesSignalError() instead")
    void listLaunchProfilesSignalE(OAIListLaunchProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLaunchProfilesSignalError(OAIListLaunchProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingImagesSignalError() instead")
    void listStreamingImagesSignalE(OAIListStreamingImagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingImagesSignalError(OAIListStreamingImagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingSessionBackupsSignalError() instead")
    void listStreamingSessionBackupsSignalE(OAIListStreamingSessionBackupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingSessionBackupsSignalError(OAIListStreamingSessionBackupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingSessionsSignalError() instead")
    void listStreamingSessionsSignalE(OAIListStreamingSessionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingSessionsSignalError(OAIListStreamingSessionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStudioComponentsSignalError() instead")
    void listStudioComponentsSignalE(OAIListStudioComponentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStudioComponentsSignalError(OAIListStudioComponentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStudioMembersSignalError() instead")
    void listStudioMembersSignalE(OAIListStudioMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStudioMembersSignalError(OAIListStudioMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStudiosSignalError() instead")
    void listStudiosSignalE(OAIListStudiosResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStudiosSignalError(OAIListStudiosResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putLaunchProfileMembersSignalError() instead")
    void putLaunchProfileMembersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putLaunchProfileMembersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putStudioMembersSignalError() instead")
    void putStudioMembersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putStudioMembersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startStreamingSessionSignalError() instead")
    void startStreamingSessionSignalE(OAIStartStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startStreamingSessionSignalError(OAIStartStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startStudioSSOConfigurationRepairSignalError() instead")
    void startStudioSSOConfigurationRepairSignalE(OAIStartStudioSSOConfigurationRepairResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startStudioSSOConfigurationRepairSignalError(OAIStartStudioSSOConfigurationRepairResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopStreamingSessionSignalError() instead")
    void stopStreamingSessionSignalE(OAIStopStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopStreamingSessionSignalError(OAIStopStreamingSessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLaunchProfileSignalError() instead")
    void updateLaunchProfileSignalE(OAIUpdateLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLaunchProfileSignalError(OAIUpdateLaunchProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLaunchProfileMemberSignalError() instead")
    void updateLaunchProfileMemberSignalE(OAIUpdateLaunchProfileMemberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLaunchProfileMemberSignalError(OAIUpdateLaunchProfileMemberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingImageSignalError() instead")
    void updateStreamingImageSignalE(OAIUpdateStreamingImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingImageSignalError(OAIUpdateStreamingImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStudioSignalError() instead")
    void updateStudioSignalE(OAIUpdateStudioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStudioSignalError(OAIUpdateStudioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStudioComponentSignalError() instead")
    void updateStudioComponentSignalE(OAIUpdateStudioComponentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStudioComponentSignalError(OAIUpdateStudioComponentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptEulasSignalErrorFull() instead")
    void acceptEulasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptEulasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLaunchProfileSignalErrorFull() instead")
    void createLaunchProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLaunchProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingImageSignalErrorFull() instead")
    void createStreamingImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingSessionSignalErrorFull() instead")
    void createStreamingSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingSessionStreamSignalErrorFull() instead")
    void createStreamingSessionStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingSessionStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStudioSignalErrorFull() instead")
    void createStudioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStudioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStudioComponentSignalErrorFull() instead")
    void createStudioComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStudioComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLaunchProfileSignalErrorFull() instead")
    void deleteLaunchProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLaunchProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLaunchProfileMemberSignalErrorFull() instead")
    void deleteLaunchProfileMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLaunchProfileMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingImageSignalErrorFull() instead")
    void deleteStreamingImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingSessionSignalErrorFull() instead")
    void deleteStreamingSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStudioSignalErrorFull() instead")
    void deleteStudioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStudioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStudioComponentSignalErrorFull() instead")
    void deleteStudioComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStudioComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStudioMemberSignalErrorFull() instead")
    void deleteStudioMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStudioMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEulaSignalErrorFull() instead")
    void getEulaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEulaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileSignalErrorFull() instead")
    void getLaunchProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileDetailsSignalErrorFull() instead")
    void getLaunchProfileDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileInitializationSignalErrorFull() instead")
    void getLaunchProfileInitializationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileInitializationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLaunchProfileMemberSignalErrorFull() instead")
    void getLaunchProfileMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLaunchProfileMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingImageSignalErrorFull() instead")
    void getStreamingImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingSessionSignalErrorFull() instead")
    void getStreamingSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingSessionBackupSignalErrorFull() instead")
    void getStreamingSessionBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingSessionBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingSessionStreamSignalErrorFull() instead")
    void getStreamingSessionStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingSessionStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioSignalErrorFull() instead")
    void getStudioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioComponentSignalErrorFull() instead")
    void getStudioComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStudioMemberSignalErrorFull() instead")
    void getStudioMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStudioMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEulaAcceptancesSignalErrorFull() instead")
    void listEulaAcceptancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEulaAcceptancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEulasSignalErrorFull() instead")
    void listEulasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEulasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLaunchProfileMembersSignalErrorFull() instead")
    void listLaunchProfileMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLaunchProfileMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLaunchProfilesSignalErrorFull() instead")
    void listLaunchProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLaunchProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingImagesSignalErrorFull() instead")
    void listStreamingImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingSessionBackupsSignalErrorFull() instead")
    void listStreamingSessionBackupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingSessionBackupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingSessionsSignalErrorFull() instead")
    void listStreamingSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStudioComponentsSignalErrorFull() instead")
    void listStudioComponentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStudioComponentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStudioMembersSignalErrorFull() instead")
    void listStudioMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStudioMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStudiosSignalErrorFull() instead")
    void listStudiosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStudiosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putLaunchProfileMembersSignalErrorFull() instead")
    void putLaunchProfileMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putLaunchProfileMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putStudioMembersSignalErrorFull() instead")
    void putStudioMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putStudioMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startStreamingSessionSignalErrorFull() instead")
    void startStreamingSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startStreamingSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startStudioSSOConfigurationRepairSignalErrorFull() instead")
    void startStudioSSOConfigurationRepairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startStudioSSOConfigurationRepairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopStreamingSessionSignalErrorFull() instead")
    void stopStreamingSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopStreamingSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLaunchProfileSignalErrorFull() instead")
    void updateLaunchProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLaunchProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLaunchProfileMemberSignalErrorFull() instead")
    void updateLaunchProfileMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLaunchProfileMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingImageSignalErrorFull() instead")
    void updateStreamingImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStudioSignalErrorFull() instead")
    void updateStudioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStudioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStudioComponentSignalErrorFull() instead")
    void updateStudioComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStudioComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
