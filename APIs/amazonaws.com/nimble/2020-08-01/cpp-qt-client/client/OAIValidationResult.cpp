/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationResult::OAIValidationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationResult::OAIValidationResult() {
    this->initializeModel();
}

OAIValidationResult::~OAIValidationResult() {}

void OAIValidationResult::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIValidationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationResult::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIValidationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAILaunchProfileValidationState OAIValidationResult::getState() const {
    return m_state;
}
void OAIValidationResult::setState(const OAILaunchProfileValidationState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIValidationResult::is_state_Set() const{
    return m_state_isSet;
}

bool OAIValidationResult::is_state_Valid() const{
    return m_state_isValid;
}

OAILaunchProfileValidationStatusCode OAIValidationResult::getStatusCode() const {
    return m_status_code;
}
void OAIValidationResult::setStatusCode(const OAILaunchProfileValidationStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIValidationResult::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIValidationResult::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIValidationResult::getStatusMessage() const {
    return m_status_message;
}
void OAIValidationResult::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIValidationResult::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIValidationResult::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAILaunchProfileValidationType OAIValidationResult::getType() const {
    return m_type;
}
void OAIValidationResult::setType(const OAILaunchProfileValidationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIValidationResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIValidationResult::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIValidationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && m_status_code_isValid && m_status_message_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
