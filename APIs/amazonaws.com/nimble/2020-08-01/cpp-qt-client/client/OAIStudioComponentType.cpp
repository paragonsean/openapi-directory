/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudioComponentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudioComponentType::OAIStudioComponentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudioComponentType::OAIStudioComponentType() {
    this->initializeModel();
}

OAIStudioComponentType::~OAIStudioComponentType() {}

void OAIStudioComponentType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStudioComponentType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStudioComponentType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVE_DIRECTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStudioComponentType::ACTIVE_DIRECTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHARED_FILE_SYSTEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStudioComponentType::SHARED_FILE_SYSTEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPUTE_FARM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStudioComponentType::COMPUTE_FARM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LICENSE_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStudioComponentType::LICENSE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStudioComponentType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStudioComponentType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStudioComponentType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStudioComponentType::ACTIVE_DIRECTORY:
            val = "ACTIVE_DIRECTORY";
            break;
        case eOAIStudioComponentType::SHARED_FILE_SYSTEM:
            val = "SHARED_FILE_SYSTEM";
            break;
        case eOAIStudioComponentType::COMPUTE_FARM:
            val = "COMPUTE_FARM";
            break;
        case eOAIStudioComponentType::LICENSE_SERVICE:
            val = "LICENSE_SERVICE";
            break;
        case eOAIStudioComponentType::CUSTOM:
            val = "CUSTOM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStudioComponentType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStudioComponentType::eOAIStudioComponentType OAIStudioComponentType::getValue() const {
    return m_value;
}

void OAIStudioComponentType::setValue(const OAIStudioComponentType::eOAIStudioComponentType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStudioComponentType::isSet() const {
    
    return m_value_isSet;
}

bool OAIStudioComponentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
