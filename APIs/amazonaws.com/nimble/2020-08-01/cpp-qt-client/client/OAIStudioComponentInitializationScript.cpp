/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudioComponentInitializationScript.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudioComponentInitializationScript::OAIStudioComponentInitializationScript(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudioComponentInitializationScript::OAIStudioComponentInitializationScript() {
    this->initializeModel();
}

OAIStudioComponentInitializationScript::~OAIStudioComponentInitializationScript() {}

void OAIStudioComponentInitializationScript::initializeModel() {

    m_launch_profile_protocol_version_isSet = false;
    m_launch_profile_protocol_version_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_run_context_isSet = false;
    m_run_context_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;
}

void OAIStudioComponentInitializationScript::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStudioComponentInitializationScript::fromJsonObject(QJsonObject json) {

    m_launch_profile_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_protocol_version, json[QString("launchProfileProtocolVersion")]);
    m_launch_profile_protocol_version_isSet = !json[QString("launchProfileProtocolVersion")].isNull() && m_launch_profile_protocol_version_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_run_context_isValid = ::OpenAPI::fromJsonValue(m_run_context, json[QString("runContext")]);
    m_run_context_isSet = !json[QString("runContext")].isNull() && m_run_context_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;
}

QString OAIStudioComponentInitializationScript::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStudioComponentInitializationScript::asJsonObject() const {
    QJsonObject obj;
    if (m_launch_profile_protocol_version_isSet) {
        obj.insert(QString("launchProfileProtocolVersion"), ::OpenAPI::toJsonValue(m_launch_profile_protocol_version));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_run_context.isSet()) {
        obj.insert(QString("runContext"), ::OpenAPI::toJsonValue(m_run_context));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    return obj;
}

QString OAIStudioComponentInitializationScript::getLaunchProfileProtocolVersion() const {
    return m_launch_profile_protocol_version;
}
void OAIStudioComponentInitializationScript::setLaunchProfileProtocolVersion(const QString &launch_profile_protocol_version) {
    m_launch_profile_protocol_version = launch_profile_protocol_version;
    m_launch_profile_protocol_version_isSet = true;
}

bool OAIStudioComponentInitializationScript::is_launch_profile_protocol_version_Set() const{
    return m_launch_profile_protocol_version_isSet;
}

bool OAIStudioComponentInitializationScript::is_launch_profile_protocol_version_Valid() const{
    return m_launch_profile_protocol_version_isValid;
}

OAILaunchProfilePlatform OAIStudioComponentInitializationScript::getPlatform() const {
    return m_platform;
}
void OAIStudioComponentInitializationScript::setPlatform(const OAILaunchProfilePlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIStudioComponentInitializationScript::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIStudioComponentInitializationScript::is_platform_Valid() const{
    return m_platform_isValid;
}

OAIStudioComponentInitializationScriptRunContext OAIStudioComponentInitializationScript::getRunContext() const {
    return m_run_context;
}
void OAIStudioComponentInitializationScript::setRunContext(const OAIStudioComponentInitializationScriptRunContext &run_context) {
    m_run_context = run_context;
    m_run_context_isSet = true;
}

bool OAIStudioComponentInitializationScript::is_run_context_Set() const{
    return m_run_context_isSet;
}

bool OAIStudioComponentInitializationScript::is_run_context_Valid() const{
    return m_run_context_isValid;
}

QString OAIStudioComponentInitializationScript::getScript() const {
    return m_script;
}
void OAIStudioComponentInitializationScript::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIStudioComponentInitializationScript::is_script_Set() const{
    return m_script_isSet;
}

bool OAIStudioComponentInitializationScript::is_script_Valid() const{
    return m_script_isValid;
}

bool OAIStudioComponentInitializationScript::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_launch_profile_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStudioComponentInitializationScript::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
