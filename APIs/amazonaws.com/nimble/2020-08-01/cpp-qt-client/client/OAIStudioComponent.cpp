/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudioComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudioComponent::OAIStudioComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudioComponent::OAIStudioComponent() {
    this->initializeModel();
}

OAIStudioComponent::~OAIStudioComponent() {}

void OAIStudioComponent::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ec2_security_group_ids_isSet = false;
    m_ec2_security_group_ids_isValid = false;

    m_initialization_scripts_isSet = false;
    m_initialization_scripts_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_role_arn_isSet = false;
    m_runtime_role_arn_isValid = false;

    m_script_parameters_isSet = false;
    m_script_parameters_isValid = false;

    m_secure_initialization_role_arn_isSet = false;
    m_secure_initialization_role_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_studio_component_id_isSet = false;
    m_studio_component_id_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIStudioComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStudioComponent::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ec2_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_ec2_security_group_ids, json[QString("ec2SecurityGroupIds")]);
    m_ec2_security_group_ids_isSet = !json[QString("ec2SecurityGroupIds")].isNull() && m_ec2_security_group_ids_isValid;

    m_initialization_scripts_isValid = ::OpenAPI::fromJsonValue(m_initialization_scripts, json[QString("initializationScripts")]);
    m_initialization_scripts_isSet = !json[QString("initializationScripts")].isNull() && m_initialization_scripts_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_role_arn_isValid = ::OpenAPI::fromJsonValue(m_runtime_role_arn, json[QString("runtimeRoleArn")]);
    m_runtime_role_arn_isSet = !json[QString("runtimeRoleArn")].isNull() && m_runtime_role_arn_isValid;

    m_script_parameters_isValid = ::OpenAPI::fromJsonValue(m_script_parameters, json[QString("scriptParameters")]);
    m_script_parameters_isSet = !json[QString("scriptParameters")].isNull() && m_script_parameters_isValid;

    m_secure_initialization_role_arn_isValid = ::OpenAPI::fromJsonValue(m_secure_initialization_role_arn, json[QString("secureInitializationRoleArn")]);
    m_secure_initialization_role_arn_isSet = !json[QString("secureInitializationRoleArn")].isNull() && m_secure_initialization_role_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_studio_component_id_isValid = ::OpenAPI::fromJsonValue(m_studio_component_id, json[QString("studioComponentId")]);
    m_studio_component_id_isSet = !json[QString("studioComponentId")].isNull() && m_studio_component_id_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIStudioComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStudioComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ec2_security_group_ids.isSet()) {
        obj.insert(QString("ec2SecurityGroupIds"), ::OpenAPI::toJsonValue(m_ec2_security_group_ids));
    }
    if (m_initialization_scripts.isSet()) {
        obj.insert(QString("initializationScripts"), ::OpenAPI::toJsonValue(m_initialization_scripts));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_role_arn_isSet) {
        obj.insert(QString("runtimeRoleArn"), ::OpenAPI::toJsonValue(m_runtime_role_arn));
    }
    if (m_script_parameters.isSet()) {
        obj.insert(QString("scriptParameters"), ::OpenAPI::toJsonValue(m_script_parameters));
    }
    if (m_secure_initialization_role_arn_isSet) {
        obj.insert(QString("secureInitializationRoleArn"), ::OpenAPI::toJsonValue(m_secure_initialization_role_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_studio_component_id_isSet) {
        obj.insert(QString("studioComponentId"), ::OpenAPI::toJsonValue(m_studio_component_id));
    }
    if (m_subtype.isSet()) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QString OAIStudioComponent::getArn() const {
    return m_arn;
}
void OAIStudioComponent::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStudioComponent::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStudioComponent::is_arn_Valid() const{
    return m_arn_isValid;
}

OAICreateStudioComponentRequest_configuration OAIStudioComponent::getConfiguration() const {
    return m_configuration;
}
void OAIStudioComponent::setConfiguration(const OAICreateStudioComponentRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIStudioComponent::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIStudioComponent::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QDateTime OAIStudioComponent::getCreatedAt() const {
    return m_created_at;
}
void OAIStudioComponent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStudioComponent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStudioComponent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStudioComponent::getCreatedBy() const {
    return m_created_by;
}
void OAIStudioComponent::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIStudioComponent::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIStudioComponent::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIStudioComponent::getDescription() const {
    return m_description;
}
void OAIStudioComponent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStudioComponent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStudioComponent::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIStudioComponent::getEc2SecurityGroupIds() const {
    return m_ec2_security_group_ids;
}
void OAIStudioComponent::setEc2SecurityGroupIds(const QList &ec2_security_group_ids) {
    m_ec2_security_group_ids = ec2_security_group_ids;
    m_ec2_security_group_ids_isSet = true;
}

bool OAIStudioComponent::is_ec2_security_group_ids_Set() const{
    return m_ec2_security_group_ids_isSet;
}

bool OAIStudioComponent::is_ec2_security_group_ids_Valid() const{
    return m_ec2_security_group_ids_isValid;
}

QList OAIStudioComponent::getInitializationScripts() const {
    return m_initialization_scripts;
}
void OAIStudioComponent::setInitializationScripts(const QList &initialization_scripts) {
    m_initialization_scripts = initialization_scripts;
    m_initialization_scripts_isSet = true;
}

bool OAIStudioComponent::is_initialization_scripts_Set() const{
    return m_initialization_scripts_isSet;
}

bool OAIStudioComponent::is_initialization_scripts_Valid() const{
    return m_initialization_scripts_isValid;
}

QString OAIStudioComponent::getName() const {
    return m_name;
}
void OAIStudioComponent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStudioComponent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStudioComponent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStudioComponent::getRuntimeRoleArn() const {
    return m_runtime_role_arn;
}
void OAIStudioComponent::setRuntimeRoleArn(const QString &runtime_role_arn) {
    m_runtime_role_arn = runtime_role_arn;
    m_runtime_role_arn_isSet = true;
}

bool OAIStudioComponent::is_runtime_role_arn_Set() const{
    return m_runtime_role_arn_isSet;
}

bool OAIStudioComponent::is_runtime_role_arn_Valid() const{
    return m_runtime_role_arn_isValid;
}

QList OAIStudioComponent::getScriptParameters() const {
    return m_script_parameters;
}
void OAIStudioComponent::setScriptParameters(const QList &script_parameters) {
    m_script_parameters = script_parameters;
    m_script_parameters_isSet = true;
}

bool OAIStudioComponent::is_script_parameters_Set() const{
    return m_script_parameters_isSet;
}

bool OAIStudioComponent::is_script_parameters_Valid() const{
    return m_script_parameters_isValid;
}

QString OAIStudioComponent::getSecureInitializationRoleArn() const {
    return m_secure_initialization_role_arn;
}
void OAIStudioComponent::setSecureInitializationRoleArn(const QString &secure_initialization_role_arn) {
    m_secure_initialization_role_arn = secure_initialization_role_arn;
    m_secure_initialization_role_arn_isSet = true;
}

bool OAIStudioComponent::is_secure_initialization_role_arn_Set() const{
    return m_secure_initialization_role_arn_isSet;
}

bool OAIStudioComponent::is_secure_initialization_role_arn_Valid() const{
    return m_secure_initialization_role_arn_isValid;
}

OAIStudioComponentState OAIStudioComponent::getState() const {
    return m_state;
}
void OAIStudioComponent::setState(const OAIStudioComponentState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStudioComponent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStudioComponent::is_state_Valid() const{
    return m_state_isValid;
}

OAIStudioComponentStatusCode OAIStudioComponent::getStatusCode() const {
    return m_status_code;
}
void OAIStudioComponent::setStatusCode(const OAIStudioComponentStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIStudioComponent::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIStudioComponent::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIStudioComponent::getStatusMessage() const {
    return m_status_message;
}
void OAIStudioComponent::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIStudioComponent::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIStudioComponent::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIStudioComponent::getStudioComponentId() const {
    return m_studio_component_id;
}
void OAIStudioComponent::setStudioComponentId(const QString &studio_component_id) {
    m_studio_component_id = studio_component_id;
    m_studio_component_id_isSet = true;
}

bool OAIStudioComponent::is_studio_component_id_Set() const{
    return m_studio_component_id_isSet;
}

bool OAIStudioComponent::is_studio_component_id_Valid() const{
    return m_studio_component_id_isValid;
}

OAIStudioComponentSubtype OAIStudioComponent::getSubtype() const {
    return m_subtype;
}
void OAIStudioComponent::setSubtype(const OAIStudioComponentSubtype &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIStudioComponent::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIStudioComponent::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QMap OAIStudioComponent::getTags() const {
    return m_tags;
}
void OAIStudioComponent::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStudioComponent::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStudioComponent::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIStudioComponentType OAIStudioComponent::getType() const {
    return m_type;
}
void OAIStudioComponent::setType(const OAIStudioComponentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStudioComponent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStudioComponent::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIStudioComponent::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStudioComponent::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStudioComponent::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStudioComponent::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIStudioComponent::getUpdatedBy() const {
    return m_updated_by;
}
void OAIStudioComponent::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIStudioComponent::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIStudioComponent::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIStudioComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_scripts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_initialization_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStudioComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
