/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingSessionBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingSessionBackup::OAIStreamingSessionBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingSessionBackup::OAIStreamingSessionBackup() {
    this->initializeModel();
}

OAIStreamingSessionBackup::~OAIStreamingSessionBackup() {}

void OAIStreamingSessionBackup::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_launch_profile_id_isSet = false;
    m_launch_profile_id_isValid = false;

    m_owned_by_isSet = false;
    m_owned_by_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStreamingSessionBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingSessionBackup::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("backupId")]);
    m_backup_id_isSet = !json[QString("backupId")].isNull() && m_backup_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_launch_profile_id_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_id, json[QString("launchProfileId")]);
    m_launch_profile_id_isSet = !json[QString("launchProfileId")].isNull() && m_launch_profile_id_isValid;

    m_owned_by_isValid = ::OpenAPI::fromJsonValue(m_owned_by, json[QString("ownedBy")]);
    m_owned_by_isSet = !json[QString("ownedBy")].isNull() && m_owned_by_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStreamingSessionBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingSessionBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_backup_id_isSet) {
        obj.insert(QString("backupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_launch_profile_id_isSet) {
        obj.insert(QString("launchProfileId"), ::OpenAPI::toJsonValue(m_launch_profile_id));
    }
    if (m_owned_by_isSet) {
        obj.insert(QString("ownedBy"), ::OpenAPI::toJsonValue(m_owned_by));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStreamingSessionBackup::getArn() const {
    return m_arn;
}
void OAIStreamingSessionBackup::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStreamingSessionBackup::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStreamingSessionBackup::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIStreamingSessionBackup::getBackupId() const {
    return m_backup_id;
}
void OAIStreamingSessionBackup::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAIStreamingSessionBackup::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAIStreamingSessionBackup::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

QDateTime OAIStreamingSessionBackup::getCreatedAt() const {
    return m_created_at;
}
void OAIStreamingSessionBackup::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStreamingSessionBackup::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStreamingSessionBackup::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIStreamingSessionBackup::getLaunchProfileId() const {
    return m_launch_profile_id;
}
void OAIStreamingSessionBackup::setLaunchProfileId(const QString &launch_profile_id) {
    m_launch_profile_id = launch_profile_id;
    m_launch_profile_id_isSet = true;
}

bool OAIStreamingSessionBackup::is_launch_profile_id_Set() const{
    return m_launch_profile_id_isSet;
}

bool OAIStreamingSessionBackup::is_launch_profile_id_Valid() const{
    return m_launch_profile_id_isValid;
}

QString OAIStreamingSessionBackup::getOwnedBy() const {
    return m_owned_by;
}
void OAIStreamingSessionBackup::setOwnedBy(const QString &owned_by) {
    m_owned_by = owned_by;
    m_owned_by_isSet = true;
}

bool OAIStreamingSessionBackup::is_owned_by_Set() const{
    return m_owned_by_isSet;
}

bool OAIStreamingSessionBackup::is_owned_by_Valid() const{
    return m_owned_by_isValid;
}

QString OAIStreamingSessionBackup::getSessionId() const {
    return m_session_id;
}
void OAIStreamingSessionBackup::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIStreamingSessionBackup::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIStreamingSessionBackup::is_session_id_Valid() const{
    return m_session_id_isValid;
}

OAIStreamingSessionState OAIStreamingSessionBackup::getState() const {
    return m_state;
}
void OAIStreamingSessionBackup::setState(const OAIStreamingSessionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStreamingSessionBackup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStreamingSessionBackup::is_state_Valid() const{
    return m_state_isValid;
}

OAIStreamingSessionStatusCode OAIStreamingSessionBackup::getStatusCode() const {
    return m_status_code;
}
void OAIStreamingSessionBackup::setStatusCode(const OAIStreamingSessionStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIStreamingSessionBackup::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIStreamingSessionBackup::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIStreamingSessionBackup::getStatusMessage() const {
    return m_status_message;
}
void OAIStreamingSessionBackup::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIStreamingSessionBackup::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIStreamingSessionBackup::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QMap OAIStreamingSessionBackup::getTags() const {
    return m_tags;
}
void OAIStreamingSessionBackup::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStreamingSessionBackup::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStreamingSessionBackup::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStreamingSessionBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingSessionBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
