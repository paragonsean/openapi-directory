/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStreamingSessionStreamResponse_stream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStreamingSessionStreamResponse_stream::OAICreateStreamingSessionStreamResponse_stream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStreamingSessionStreamResponse_stream::OAICreateStreamingSessionStreamResponse_stream() {
    this->initializeModel();
}

OAICreateStreamingSessionStreamResponse_stream::~OAICreateStreamingSessionStreamResponse_stream() {}

void OAICreateStreamingSessionStreamResponse_stream::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_owned_by_isSet = false;
    m_owned_by_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreateStreamingSessionStreamResponse_stream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStreamingSessionStreamResponse_stream::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_owned_by_isValid = ::OpenAPI::fromJsonValue(m_owned_by, json[QString("ownedBy")]);
    m_owned_by_isSet = !json[QString("ownedBy")].isNull() && m_owned_by_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("streamId")]);
    m_stream_id_isSet = !json[QString("streamId")].isNull() && m_stream_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICreateStreamingSessionStreamResponse_stream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStreamingSessionStreamResponse_stream::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_owned_by_isSet) {
        obj.insert(QString("ownedBy"), ::OpenAPI::toJsonValue(m_owned_by));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("streamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAICreateStreamingSessionStreamResponse_stream::getCreatedAt() const {
    return m_created_at;
}
void OAICreateStreamingSessionStreamResponse_stream::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreateStreamingSessionStreamResponse_stream::getCreatedBy() const {
    return m_created_by;
}
void OAICreateStreamingSessionStreamResponse_stream::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAICreateStreamingSessionStreamResponse_stream::getExpiresAt() const {
    return m_expires_at;
}
void OAICreateStreamingSessionStreamResponse_stream::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAICreateStreamingSessionStreamResponse_stream::getOwnedBy() const {
    return m_owned_by;
}
void OAICreateStreamingSessionStreamResponse_stream::setOwnedBy(const QString &owned_by) {
    m_owned_by = owned_by;
    m_owned_by_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_owned_by_Set() const{
    return m_owned_by_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_owned_by_Valid() const{
    return m_owned_by_isValid;
}

OAIStreamingSessionStreamState OAICreateStreamingSessionStreamResponse_stream::getState() const {
    return m_state;
}
void OAICreateStreamingSessionStreamResponse_stream::setState(const OAIStreamingSessionStreamState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_state_Valid() const{
    return m_state_isValid;
}

OAIStreamingSessionStreamStatusCode OAICreateStreamingSessionStreamResponse_stream::getStatusCode() const {
    return m_status_code;
}
void OAICreateStreamingSessionStreamResponse_stream::setStatusCode(const OAIStreamingSessionStreamStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAICreateStreamingSessionStreamResponse_stream::getStreamId() const {
    return m_stream_id;
}
void OAICreateStreamingSessionStreamResponse_stream::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

QString OAICreateStreamingSessionStreamResponse_stream::getUrl() const {
    return m_url;
}
void OAICreateStreamingSessionStreamResponse_stream::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateStreamingSessionStreamResponse_stream::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreateStreamingSessionStreamResponse_stream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStreamingSessionStreamResponse_stream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
