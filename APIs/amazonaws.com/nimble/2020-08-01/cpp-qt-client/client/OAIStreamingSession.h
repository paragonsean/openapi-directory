/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStreamingSession.h
 *
 * A streaming session is a virtual workstation created using a particular launch profile.
 */

#ifndef OAIStreamingSession_H
#define OAIStreamingSession_H

#include <QJsonObject>

#include "OAIAutomaticTerminationMode.h"
#include "OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration.h"
#include "OAISessionBackupMode.h"
#include "OAISessionPersistenceMode.h"
#include "OAIStreamingSessionState.h"
#include "OAIStreamingSessionStatusCode.h"
#include "OAIVolumeRetentionMode.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration;

class OAIStreamingSession : public OAIObject {
public:
    OAIStreamingSession();
    OAIStreamingSession(QString json);
    ~OAIStreamingSession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAIAutomaticTerminationMode getAutomaticTerminationMode() const;
    void setAutomaticTerminationMode(const OAIAutomaticTerminationMode &automatic_termination_mode);
    bool is_automatic_termination_mode_Set() const;
    bool is_automatic_termination_mode_Valid() const;

    OAISessionBackupMode getBackupMode() const;
    void setBackupMode(const OAISessionBackupMode &backup_mode);
    bool is_backup_mode_Set() const;
    bool is_backup_mode_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QString getEc2InstanceType() const;
    void setEc2InstanceType(const QString &ec2_instance_type);
    bool is_ec2_instance_type_Set() const;
    bool is_ec2_instance_type_Valid() const;

    QString getLaunchProfileId() const;
    void setLaunchProfileId(const QString &launch_profile_id);
    bool is_launch_profile_id_Set() const;
    bool is_launch_profile_id_Valid() const;

    qint32 getMaxBackupsToRetain() const;
    void setMaxBackupsToRetain(const qint32 &max_backups_to_retain);
    bool is_max_backups_to_retain_Set() const;
    bool is_max_backups_to_retain_Valid() const;

    QString getOwnedBy() const;
    void setOwnedBy(const QString &owned_by);
    bool is_owned_by_Set() const;
    bool is_owned_by_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    OAISessionPersistenceMode getSessionPersistenceMode() const;
    void setSessionPersistenceMode(const OAISessionPersistenceMode &session_persistence_mode);
    bool is_session_persistence_mode_Set() const;
    bool is_session_persistence_mode_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    QString getStartedBy() const;
    void setStartedBy(const QString &started_by);
    bool is_started_by_Set() const;
    bool is_started_by_Valid() const;

    QString getStartedFromBackupId() const;
    void setStartedFromBackupId(const QString &started_from_backup_id);
    bool is_started_from_backup_id_Set() const;
    bool is_started_from_backup_id_Valid() const;

    OAIStreamingSessionState getState() const;
    void setState(const OAIStreamingSessionState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIStreamingSessionStatusCode getStatusCode() const;
    void setStatusCode(const OAIStreamingSessionStatusCode &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QDateTime getStopAt() const;
    void setStopAt(const QDateTime &stop_at);
    bool is_stop_at_Set() const;
    bool is_stop_at_Valid() const;

    QDateTime getStoppedAt() const;
    void setStoppedAt(const QDateTime &stopped_at);
    bool is_stopped_at_Set() const;
    bool is_stopped_at_Valid() const;

    QString getStoppedBy() const;
    void setStoppedBy(const QString &stopped_by);
    bool is_stopped_by_Set() const;
    bool is_stopped_by_Valid() const;

    QString getStreamingImageId() const;
    void setStreamingImageId(const QString &streaming_image_id);
    bool is_streaming_image_id_Set() const;
    bool is_streaming_image_id_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QDateTime getTerminateAt() const;
    void setTerminateAt(const QDateTime &terminate_at);
    bool is_terminate_at_Set() const;
    bool is_terminate_at_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUpdatedBy() const;
    void setUpdatedBy(const QString &updated_by);
    bool is_updated_by_Set() const;
    bool is_updated_by_Valid() const;

    OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration getVolumeConfiguration() const;
    void setVolumeConfiguration(const OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration &volume_configuration);
    bool is_volume_configuration_Set() const;
    bool is_volume_configuration_Valid() const;

    OAIVolumeRetentionMode getVolumeRetentionMode() const;
    void setVolumeRetentionMode(const OAIVolumeRetentionMode &volume_retention_mode);
    bool is_volume_retention_mode_Set() const;
    bool is_volume_retention_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAIAutomaticTerminationMode m_automatic_termination_mode;
    bool m_automatic_termination_mode_isSet;
    bool m_automatic_termination_mode_isValid;

    OAISessionBackupMode m_backup_mode;
    bool m_backup_mode_isSet;
    bool m_backup_mode_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QString m_ec2_instance_type;
    bool m_ec2_instance_type_isSet;
    bool m_ec2_instance_type_isValid;

    QString m_launch_profile_id;
    bool m_launch_profile_id_isSet;
    bool m_launch_profile_id_isValid;

    qint32 m_max_backups_to_retain;
    bool m_max_backups_to_retain_isSet;
    bool m_max_backups_to_retain_isValid;

    QString m_owned_by;
    bool m_owned_by_isSet;
    bool m_owned_by_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    OAISessionPersistenceMode m_session_persistence_mode;
    bool m_session_persistence_mode_isSet;
    bool m_session_persistence_mode_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    QString m_started_by;
    bool m_started_by_isSet;
    bool m_started_by_isValid;

    QString m_started_from_backup_id;
    bool m_started_from_backup_id_isSet;
    bool m_started_from_backup_id_isValid;

    OAIStreamingSessionState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIStreamingSessionStatusCode m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QDateTime m_stop_at;
    bool m_stop_at_isSet;
    bool m_stop_at_isValid;

    QDateTime m_stopped_at;
    bool m_stopped_at_isSet;
    bool m_stopped_at_isValid;

    QString m_stopped_by;
    bool m_stopped_by_isSet;
    bool m_stopped_by_isValid;

    QString m_streaming_image_id;
    bool m_streaming_image_id_isSet;
    bool m_streaming_image_id_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QDateTime m_terminate_at;
    bool m_terminate_at_isSet;
    bool m_terminate_at_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_updated_by;
    bool m_updated_by_isSet;
    bool m_updated_by_isValid;

    OAICreateLaunchProfile_request_streamConfiguration_volumeConfiguration m_volume_configuration;
    bool m_volume_configuration_isSet;
    bool m_volume_configuration_isValid;

    OAIVolumeRetentionMode m_volume_retention_mode;
    bool m_volume_retention_mode_isSet;
    bool m_volume_retention_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStreamingSession)

#endif // OAIStreamingSession_H
