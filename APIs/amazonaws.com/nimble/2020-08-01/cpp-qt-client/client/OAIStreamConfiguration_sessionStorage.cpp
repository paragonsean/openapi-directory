/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamConfiguration_sessionStorage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamConfiguration_sessionStorage::OAIStreamConfiguration_sessionStorage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamConfiguration_sessionStorage::OAIStreamConfiguration_sessionStorage() {
    this->initializeModel();
}

OAIStreamConfiguration_sessionStorage::~OAIStreamConfiguration_sessionStorage() {}

void OAIStreamConfiguration_sessionStorage::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIStreamConfiguration_sessionStorage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamConfiguration_sessionStorage::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIStreamConfiguration_sessionStorage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamConfiguration_sessionStorage::asJsonObject() const {
    QJsonObject obj;
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_root.isSet()) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QList OAIStreamConfiguration_sessionStorage::getMode() const {
    return m_mode;
}
void OAIStreamConfiguration_sessionStorage::setMode(const QList &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIStreamConfiguration_sessionStorage::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIStreamConfiguration_sessionStorage::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIStreamConfigurationSessionStorage_root OAIStreamConfiguration_sessionStorage::getRoot() const {
    return m_root;
}
void OAIStreamConfiguration_sessionStorage::setRoot(const OAIStreamConfigurationSessionStorage_root &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIStreamConfiguration_sessionStorage::is_root_Set() const{
    return m_root_isSet;
}

bool OAIStreamConfiguration_sessionStorage::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIStreamConfiguration_sessionStorage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamConfiguration_sessionStorage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mode_isValid && true;
}

} // namespace OpenAPI
