/**
 * AmazonNimbleStudio
 * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides methods, schema, resources, parameters, and more to help you get the most out of Nimble Studio.</p> <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and interactive content teams to create content securely within a scalable, private cloud service.</p>
 *
 * The version of the OpenAPI document: 2020-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchProfile_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchProfile_request::OAICreateLaunchProfile_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchProfile_request::OAICreateLaunchProfile_request() {
    this->initializeModel();
}

OAICreateLaunchProfile_request::~OAICreateLaunchProfile_request() {}

void OAICreateLaunchProfile_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_ec2_subnet_ids_isSet = false;
    m_ec2_subnet_ids_isValid = false;

    m_launch_profile_protocol_versions_isSet = false;
    m_launch_profile_protocol_versions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_stream_configuration_isSet = false;
    m_stream_configuration_isValid = false;

    m_studio_component_ids_isSet = false;
    m_studio_component_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLaunchProfile_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchProfile_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ec2_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_ec2_subnet_ids, json[QString("ec2SubnetIds")]);
    m_ec2_subnet_ids_isSet = !json[QString("ec2SubnetIds")].isNull() && m_ec2_subnet_ids_isValid;

    m_launch_profile_protocol_versions_isValid = ::OpenAPI::fromJsonValue(m_launch_profile_protocol_versions, json[QString("launchProfileProtocolVersions")]);
    m_launch_profile_protocol_versions_isSet = !json[QString("launchProfileProtocolVersions")].isNull() && m_launch_profile_protocol_versions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_stream_configuration_isValid = ::OpenAPI::fromJsonValue(m_stream_configuration, json[QString("streamConfiguration")]);
    m_stream_configuration_isSet = !json[QString("streamConfiguration")].isNull() && m_stream_configuration_isValid;

    m_studio_component_ids_isValid = ::OpenAPI::fromJsonValue(m_studio_component_ids, json[QString("studioComponentIds")]);
    m_studio_component_ids_isSet = !json[QString("studioComponentIds")].isNull() && m_studio_component_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateLaunchProfile_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchProfile_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ec2_subnet_ids.size() > 0) {
        obj.insert(QString("ec2SubnetIds"), ::OpenAPI::toJsonValue(m_ec2_subnet_ids));
    }
    if (m_launch_profile_protocol_versions.size() > 0) {
        obj.insert(QString("launchProfileProtocolVersions"), ::OpenAPI::toJsonValue(m_launch_profile_protocol_versions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stream_configuration.isSet()) {
        obj.insert(QString("streamConfiguration"), ::OpenAPI::toJsonValue(m_stream_configuration));
    }
    if (m_studio_component_ids.size() > 0) {
        obj.insert(QString("studioComponentIds"), ::OpenAPI::toJsonValue(m_studio_component_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLaunchProfile_request::getDescription() const {
    return m_description;
}
void OAICreateLaunchProfile_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateLaunchProfile_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateLaunchProfile_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAICreateLaunchProfile_request::getEc2SubnetIds() const {
    return m_ec2_subnet_ids;
}
void OAICreateLaunchProfile_request::setEc2SubnetIds(const QList<QString> &ec2_subnet_ids) {
    m_ec2_subnet_ids = ec2_subnet_ids;
    m_ec2_subnet_ids_isSet = true;
}

bool OAICreateLaunchProfile_request::is_ec2_subnet_ids_Set() const{
    return m_ec2_subnet_ids_isSet;
}

bool OAICreateLaunchProfile_request::is_ec2_subnet_ids_Valid() const{
    return m_ec2_subnet_ids_isValid;
}

QList<QString> OAICreateLaunchProfile_request::getLaunchProfileProtocolVersions() const {
    return m_launch_profile_protocol_versions;
}
void OAICreateLaunchProfile_request::setLaunchProfileProtocolVersions(const QList<QString> &launch_profile_protocol_versions) {
    m_launch_profile_protocol_versions = launch_profile_protocol_versions;
    m_launch_profile_protocol_versions_isSet = true;
}

bool OAICreateLaunchProfile_request::is_launch_profile_protocol_versions_Set() const{
    return m_launch_profile_protocol_versions_isSet;
}

bool OAICreateLaunchProfile_request::is_launch_profile_protocol_versions_Valid() const{
    return m_launch_profile_protocol_versions_isValid;
}

QString OAICreateLaunchProfile_request::getName() const {
    return m_name;
}
void OAICreateLaunchProfile_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateLaunchProfile_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateLaunchProfile_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateLaunchProfile_request_streamConfiguration OAICreateLaunchProfile_request::getStreamConfiguration() const {
    return m_stream_configuration;
}
void OAICreateLaunchProfile_request::setStreamConfiguration(const OAICreateLaunchProfile_request_streamConfiguration &stream_configuration) {
    m_stream_configuration = stream_configuration;
    m_stream_configuration_isSet = true;
}

bool OAICreateLaunchProfile_request::is_stream_configuration_Set() const{
    return m_stream_configuration_isSet;
}

bool OAICreateLaunchProfile_request::is_stream_configuration_Valid() const{
    return m_stream_configuration_isValid;
}

QList<QString> OAICreateLaunchProfile_request::getStudioComponentIds() const {
    return m_studio_component_ids;
}
void OAICreateLaunchProfile_request::setStudioComponentIds(const QList<QString> &studio_component_ids) {
    m_studio_component_ids = studio_component_ids;
    m_studio_component_ids_isSet = true;
}

bool OAICreateLaunchProfile_request::is_studio_component_ids_Set() const{
    return m_studio_component_ids_isSet;
}

bool OAICreateLaunchProfile_request::is_studio_component_ids_Valid() const{
    return m_studio_component_ids_isValid;
}

QMap<QString, QString> OAICreateLaunchProfile_request::getTags() const {
    return m_tags;
}
void OAICreateLaunchProfile_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLaunchProfile_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLaunchProfile_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLaunchProfile_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_subnet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_profile_protocol_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_studio_component_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchProfile_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ec2_subnet_ids_isValid && m_launch_profile_protocol_versions_isValid && m_name_isValid && m_stream_configuration_isValid && m_studio_component_ids_isValid && true;
}

} // namespace OpenAPI
