/**
 * AWS IoT Data Plane
 * <fullname>IoT data</fullname> <p>IoT data enables secure, bi-directional communication between Internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the Amazon Web Services cloud. It implements a broker for applications and things to publish messages over HTTP (Publish) and retrieve, update, and delete shadows. A shadow is a persistent representation of your things and their state in the Amazon Web Services cloud.</p> <p>Find the endpoint address for actions in IoT data by running this CLI command:</p> <p> <code>aws iot describe-endpoint --endpoint-type iot:Data-ATS</code> </p> <p>The service name used by <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Amazon Web ServicesSignature Version 4</a> to sign requests is: <i>iotdevicegateway</i>.</p>
 *
 * The version of the OpenAPI document: 2015-05-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayloadFormatIndicator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayloadFormatIndicator::OAIPayloadFormatIndicator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayloadFormatIndicator::OAIPayloadFormatIndicator() {
    this->initializeModel();
}

OAIPayloadFormatIndicator::~OAIPayloadFormatIndicator() {}

void OAIPayloadFormatIndicator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPayloadFormatIndicator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPayloadFormatIndicator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNSPECIFIED_BYTES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPayloadFormatIndicator::UNSPECIFIED_BYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTF8_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPayloadFormatIndicator::UTF8_DATA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPayloadFormatIndicator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPayloadFormatIndicator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPayloadFormatIndicator::UNSPECIFIED_BYTES:
            val = "UNSPECIFIED_BYTES";
            break;
        case eOAIPayloadFormatIndicator::UTF8_DATA:
            val = "UTF8_DATA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPayloadFormatIndicator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPayloadFormatIndicator::eOAIPayloadFormatIndicator OAIPayloadFormatIndicator::getValue() const {
    return m_value;
}

void OAIPayloadFormatIndicator::setValue(const OAIPayloadFormatIndicator::eOAIPayloadFormatIndicator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPayloadFormatIndicator::isSet() const {
    
    return m_value_isSet;
}

bool OAIPayloadFormatIndicator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
