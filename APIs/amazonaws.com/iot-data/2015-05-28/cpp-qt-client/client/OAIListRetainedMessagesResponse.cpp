/**
 * AWS IoT Data Plane
 * <fullname>IoT data</fullname> <p>IoT data enables secure, bi-directional communication between Internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the Amazon Web Services cloud. It implements a broker for applications and things to publish messages over HTTP (Publish) and retrieve, update, and delete shadows. A shadow is a persistent representation of your things and their state in the Amazon Web Services cloud.</p> <p>Find the endpoint address for actions in IoT data by running this CLI command:</p> <p> <code>aws iot describe-endpoint --endpoint-type iot:Data-ATS</code> </p> <p>The service name used by <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Amazon Web ServicesSignature Version 4</a> to sign requests is: <i>iotdevicegateway</i>.</p>
 *
 * The version of the OpenAPI document: 2015-05-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRetainedMessagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRetainedMessagesResponse::OAIListRetainedMessagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRetainedMessagesResponse::OAIListRetainedMessagesResponse() {
    this->initializeModel();
}

OAIListRetainedMessagesResponse::~OAIListRetainedMessagesResponse() {}

void OAIListRetainedMessagesResponse::initializeModel() {

    m_retained_topics_isSet = false;
    m_retained_topics_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListRetainedMessagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRetainedMessagesResponse::fromJsonObject(QJsonObject json) {

    m_retained_topics_isValid = ::OpenAPI::fromJsonValue(m_retained_topics, json[QString("retainedTopics")]);
    m_retained_topics_isSet = !json[QString("retainedTopics")].isNull() && m_retained_topics_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListRetainedMessagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRetainedMessagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_retained_topics.isSet()) {
        obj.insert(QString("retainedTopics"), ::OpenAPI::toJsonValue(m_retained_topics));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListRetainedMessagesResponse::getRetainedTopics() const {
    return m_retained_topics;
}
void OAIListRetainedMessagesResponse::setRetainedTopics(const QList &retained_topics) {
    m_retained_topics = retained_topics;
    m_retained_topics_isSet = true;
}

bool OAIListRetainedMessagesResponse::is_retained_topics_Set() const{
    return m_retained_topics_isSet;
}

bool OAIListRetainedMessagesResponse::is_retained_topics_Valid() const{
    return m_retained_topics_isValid;
}

QString OAIListRetainedMessagesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListRetainedMessagesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRetainedMessagesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRetainedMessagesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListRetainedMessagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retained_topics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRetainedMessagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
