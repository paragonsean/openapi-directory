/*
 * AWS IoT Data Plane
 * <fullname>IoT data</fullname> <p>IoT data enables secure, bi-directional communication between Internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the Amazon Web Services cloud. It implements a broker for applications and things to publish messages over HTTP (Publish) and retrieve, update, and delete shadows. A shadow is a persistent representation of your things and their state in the Amazon Web Services cloud.</p> <p>Find the endpoint address for actions in IoT data by running this CLI command:</p> <p> <code>aws iot describe-endpoint --endpoint-type iot:Data-ATS</code> </p> <p>The service name used by <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Amazon Web ServicesSignature Version 4</a> to sign requests is: <i>iotdevicegateway</i>.</p>
 *
 * The version of the OpenAPI document: 2015-05-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteThingShadowResponse;
import org.openapitools.client.model.GetRetainedMessageResponse;
import org.openapitools.client.model.GetThingShadowResponse;
import org.openapitools.client.model.ListNamedShadowsForThingResponse;
import org.openapitools.client.model.ListRetainedMessagesResponse;
import org.openapitools.client.model.PublishRequest;
import org.openapitools.client.model.UpdateThingShadowRequest;
import org.openapitools.client.model.UpdateThingShadowResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Deletes the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;DeleteThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_DeleteThingShadow.html\&quot;&gt;DeleteThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThingShadowTest() throws ApiException {
        String thingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        DeleteThingShadowResponse response = api.deleteThingShadow(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the details of a single retained message for the specified topic.&lt;/p&gt; &lt;p&gt;This action returns the message payload of the retained message, which can incur messaging costs. To list only the topic names of the retained messages, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_ListRetainedMessages.html\&quot;&gt;ListRetainedMessages&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;GetRetainedMessage&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRetainedMessageTest() throws ApiException {
        String topic = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRetainedMessageResponse response = api.getRetainedMessage(topic, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;GetThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html\&quot;&gt;GetThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThingShadowTest() throws ApiException {
        String thingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        GetThingShadowResponse response = api.getThingShadow(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the shadows for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;ListNamedShadowsForThing&lt;/a&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNamedShadowsForThingTest() throws ApiException {
        String thingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer pageSize = null;
        ListNamedShadowsForThingResponse response = api.listNamedShadowsForThing(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists summary information about the retained messages stored for the account.&lt;/p&gt; &lt;p&gt;This action returns only the topic names of the retained messages. It doesn&#39;t return any message payloads. Although this action doesn&#39;t return a message payload, it can still incur messaging costs.&lt;/p&gt; &lt;p&gt;To get the message payload of a retained message, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_GetRetainedMessage.html\&quot;&gt;GetRetainedMessage&lt;/a&gt; with the topic name of the retained message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;ListRetainedMessages&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRetainedMessagesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListRetainedMessagesResponse response = api.listRetainedMessages(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Publishes an MQTT message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;Publish&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about MQTT messages, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html\&quot;&gt;MQTT Protocol&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishTest() throws ApiException {
        String topic = null;
        PublishRequest publishRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer qos = null;
        Boolean retain = null;
        String xAmzMqtt5UserProperties = null;
        String xAmzMqtt5PayloadFormatIndicator = null;
        String contentType = null;
        String responseTopic = null;
        String xAmzMqtt5CorrelationData = null;
        Integer messageExpiry = null;
        api.publish(topic, publishRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, qos, retain, xAmzMqtt5UserProperties, xAmzMqtt5PayloadFormatIndicator, contentType, responseTopic, xAmzMqtt5CorrelationData, messageExpiry);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;UpdateThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_UpdateThingShadow.html\&quot;&gt;UpdateThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateThingShadowTest() throws ApiException {
        String thingName = null;
        UpdateThingShadowRequest updateThingShadowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        UpdateThingShadowResponse response = api.updateThingShadow(thingName, updateThingShadowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name);
        // TODO: test validations
    }

}
