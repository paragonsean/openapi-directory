/*
 * AWS IoT Data Plane
 * <fullname>IoT data</fullname> <p>IoT data enables secure, bi-directional communication between Internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the Amazon Web Services cloud. It implements a broker for applications and things to publish messages over HTTP (Publish) and retrieve, update, and delete shadows. A shadow is a persistent representation of your things and their state in the Amazon Web Services cloud.</p> <p>Find the endpoint address for actions in IoT data by running this CLI command:</p> <p> <code>aws iot describe-endpoint --endpoint-type iot:Data-ATS</code> </p> <p>The service name used by <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Amazon Web ServicesSignature Version 4</a> to sign requests is: <i>iotdevicegateway</i>.</p>
 *
 * The version of the OpenAPI document: 2015-05-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteThingShadowResponse;
import org.openapitools.client.model.GetRetainedMessageResponse;
import org.openapitools.client.model.GetThingShadowResponse;
import org.openapitools.client.model.ListNamedShadowsForThingResponse;
import org.openapitools.client.model.ListRetainedMessagesResponse;
import org.openapitools.client.model.PublishRequest;
import org.openapitools.client.model.UpdateThingShadowRequest;
import org.openapitools.client.model.UpdateThingShadowResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteThingShadow
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThingShadowCall(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/things/{thingName}/shadow"
            .replace("{" + "thingName" + "}", localVarApiClient.escapeString(thingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThingShadowValidateBeforeCall(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thingName' is set
        if (thingName == null) {
            throw new ApiException("Missing the required parameter 'thingName' when calling deleteThingShadow(Async)");
        }

        return deleteThingShadowCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;DeleteThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_DeleteThingShadow.html\&quot;&gt;DeleteThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @return DeleteThingShadowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteThingShadowResponse deleteThingShadow(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name) throws ApiException {
        ApiResponse<DeleteThingShadowResponse> localVarResp = deleteThingShadowWithHttpInfo(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;DeleteThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_DeleteThingShadow.html\&quot;&gt;DeleteThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @return ApiResponse&lt;DeleteThingShadowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteThingShadowResponse> deleteThingShadowWithHttpInfo(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteThingShadowValidateBeforeCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, null);
        Type localVarReturnType = new TypeToken<DeleteThingShadowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;DeleteThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_DeleteThingShadow.html\&quot;&gt;DeleteThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThingShadowAsync(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback<DeleteThingShadowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThingShadowValidateBeforeCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, _callback);
        Type localVarReturnType = new TypeToken<DeleteThingShadowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetainedMessage
     * @param topic The topic name of the retained message to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetainedMessageCall(String topic, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retainedMessage/{topic}"
            .replace("{" + "topic" + "}", localVarApiClient.escapeString(topic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetainedMessageValidateBeforeCall(String topic, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling getRetainedMessage(Async)");
        }

        return getRetainedMessageCall(topic, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the details of a single retained message for the specified topic.&lt;/p&gt; &lt;p&gt;This action returns the message payload of the retained message, which can incur messaging costs. To list only the topic names of the retained messages, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_ListRetainedMessages.html\&quot;&gt;ListRetainedMessages&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;GetRetainedMessage&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param topic The topic name of the retained message to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRetainedMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public GetRetainedMessageResponse getRetainedMessage(String topic, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRetainedMessageResponse> localVarResp = getRetainedMessageWithHttpInfo(topic, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the details of a single retained message for the specified topic.&lt;/p&gt; &lt;p&gt;This action returns the message payload of the retained message, which can incur messaging costs. To list only the topic names of the retained messages, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_ListRetainedMessages.html\&quot;&gt;ListRetainedMessages&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;GetRetainedMessage&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param topic The topic name of the retained message to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRetainedMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRetainedMessageResponse> getRetainedMessageWithHttpInfo(String topic, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRetainedMessageValidateBeforeCall(topic, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRetainedMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the details of a single retained message for the specified topic.&lt;/p&gt; &lt;p&gt;This action returns the message payload of the retained message, which can incur messaging costs. To list only the topic names of the retained messages, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_ListRetainedMessages.html\&quot;&gt;ListRetainedMessages&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;GetRetainedMessage&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param topic The topic name of the retained message to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetainedMessageAsync(String topic, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRetainedMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetainedMessageValidateBeforeCall(topic, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRetainedMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThingShadow
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThingShadowCall(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/things/{thingName}/shadow"
            .replace("{" + "thingName" + "}", localVarApiClient.escapeString(thingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThingShadowValidateBeforeCall(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thingName' is set
        if (thingName == null) {
            throw new ApiException("Missing the required parameter 'thingName' when calling getThingShadow(Async)");
        }

        return getThingShadowCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;GetThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html\&quot;&gt;GetThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @return GetThingShadowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public GetThingShadowResponse getThingShadow(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name) throws ApiException {
        ApiResponse<GetThingShadowResponse> localVarResp = getThingShadowWithHttpInfo(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;GetThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html\&quot;&gt;GetThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @return ApiResponse&lt;GetThingShadowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetThingShadowResponse> getThingShadowWithHttpInfo(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name) throws ApiException {
        okhttp3.Call localVarCall = getThingShadowValidateBeforeCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, null);
        Type localVarReturnType = new TypeToken<GetThingShadowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;GetThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_GetThingShadow.html\&quot;&gt;GetThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThingShadowAsync(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback<GetThingShadowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThingShadowValidateBeforeCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, _callback);
        Type localVarReturnType = new TypeToken<GetThingShadowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNamedShadowsForThing
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to retrieve the next set of results. (optional)
     * @param pageSize The result page size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNamedShadowsForThingCall(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/things/shadow/ListNamedShadowsForThing/{thingName}"
            .replace("{" + "thingName" + "}", localVarApiClient.escapeString(thingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNamedShadowsForThingValidateBeforeCall(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thingName' is set
        if (thingName == null) {
            throw new ApiException("Missing the required parameter 'thingName' when calling listNamedShadowsForThing(Async)");
        }

        return listNamedShadowsForThingCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the shadows for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;ListNamedShadowsForThing&lt;/a&gt; action.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to retrieve the next set of results. (optional)
     * @param pageSize The result page size. (optional)
     * @return ListNamedShadowsForThingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public ListNamedShadowsForThingResponse listNamedShadowsForThing(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer pageSize) throws ApiException {
        ApiResponse<ListNamedShadowsForThingResponse> localVarResp = listNamedShadowsForThingWithHttpInfo(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the shadows for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;ListNamedShadowsForThing&lt;/a&gt; action.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to retrieve the next set of results. (optional)
     * @param pageSize The result page size. (optional)
     * @return ApiResponse&lt;ListNamedShadowsForThingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNamedShadowsForThingResponse> listNamedShadowsForThingWithHttpInfo(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listNamedShadowsForThingValidateBeforeCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<ListNamedShadowsForThingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the shadows for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;ListNamedShadowsForThing&lt;/a&gt; action.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to retrieve the next set of results. (optional)
     * @param pageSize The result page size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNamedShadowsForThingAsync(String thingName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer pageSize, final ApiCallback<ListNamedShadowsForThingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNamedShadowsForThingValidateBeforeCall(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListNamedShadowsForThingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRetainedMessages
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken To retrieve the next set of results, the &lt;code&gt;nextToken&lt;/code&gt; value from a previous response; otherwise &lt;b&gt;null&lt;/b&gt; to receive the first set of results. (optional)
     * @param maxResults The maximum number of results to return at one time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRetainedMessagesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retainedMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRetainedMessagesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        return listRetainedMessagesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists summary information about the retained messages stored for the account.&lt;/p&gt; &lt;p&gt;This action returns only the topic names of the retained messages. It doesn&#39;t return any message payloads. Although this action doesn&#39;t return a message payload, it can still incur messaging costs.&lt;/p&gt; &lt;p&gt;To get the message payload of a retained message, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_GetRetainedMessage.html\&quot;&gt;GetRetainedMessage&lt;/a&gt; with the topic name of the retained message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;ListRetainedMessages&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken To retrieve the next set of results, the &lt;code&gt;nextToken&lt;/code&gt; value from a previous response; otherwise &lt;b&gt;null&lt;/b&gt; to receive the first set of results. (optional)
     * @param maxResults The maximum number of results to return at one time. (optional)
     * @return ListRetainedMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public ListRetainedMessagesResponse listRetainedMessages(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListRetainedMessagesResponse> localVarResp = listRetainedMessagesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists summary information about the retained messages stored for the account.&lt;/p&gt; &lt;p&gt;This action returns only the topic names of the retained messages. It doesn&#39;t return any message payloads. Although this action doesn&#39;t return a message payload, it can still incur messaging costs.&lt;/p&gt; &lt;p&gt;To get the message payload of a retained message, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_GetRetainedMessage.html\&quot;&gt;GetRetainedMessage&lt;/a&gt; with the topic name of the retained message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;ListRetainedMessages&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken To retrieve the next set of results, the &lt;code&gt;nextToken&lt;/code&gt; value from a previous response; otherwise &lt;b&gt;null&lt;/b&gt; to receive the first set of results. (optional)
     * @param maxResults The maximum number of results to return at one time. (optional)
     * @return ApiResponse&lt;ListRetainedMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRetainedMessagesResponse> listRetainedMessagesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = listRetainedMessagesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListRetainedMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists summary information about the retained messages stored for the account.&lt;/p&gt; &lt;p&gt;This action returns only the topic names of the retained messages. It doesn&#39;t return any message payloads. Although this action doesn&#39;t return a message payload, it can still incur messaging costs.&lt;/p&gt; &lt;p&gt;To get the message payload of a retained message, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_iotdata_GetRetainedMessage.html\&quot;&gt;GetRetainedMessage&lt;/a&gt; with the topic name of the retained message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiotfleethubfordevicemanagement.html#awsiotfleethubfordevicemanagement-actions-as-permissions\&quot;&gt;ListRetainedMessages&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken To retrieve the next set of results, the &lt;code&gt;nextToken&lt;/code&gt; value from a previous response; otherwise &lt;b&gt;null&lt;/b&gt; to receive the first set of results. (optional)
     * @param maxResults The maximum number of results to return at one time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRetainedMessagesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<ListRetainedMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRetainedMessagesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListRetainedMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publish
     * @param topic The name of the MQTT topic. (required)
     * @param publishRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param qos The Quality of Service (QoS) level. The default QoS level is 0. (optional)
     * @param retain &lt;p&gt;A Boolean value that determines whether to set the RETAIN flag when the message is published.&lt;/p&gt; &lt;p&gt;Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default value: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5UserProperties &lt;p&gt;A JSON string that contains an array of JSON objects. If you don’t use Amazon Web Services SDK or CLI, you must encode the JSON string to base64 format before adding it to the HTTP header. &lt;code&gt;userProperties&lt;/code&gt; is an HTTP header value in the API.&lt;/p&gt; &lt;p&gt;The following example &lt;code&gt;userProperties&lt;/code&gt; parameter is a JSON string which represents two User Properties. Note that it needs to be base64-encoded:&lt;/p&gt; &lt;p&gt; &lt;code&gt;[{\&quot;deviceName\&quot;: \&quot;alpha\&quot;}, {\&quot;deviceCnt\&quot;: \&quot;45\&quot;}]&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5PayloadFormatIndicator An &lt;code&gt;Enum&lt;/code&gt; string value that indicates whether the payload is formatted as UTF-8. &lt;code&gt;payloadFormatIndicator&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param contentType A UTF-8 encoded string that describes the content of the publishing message. (optional)
     * @param responseTopic A UTF-8 encoded string that&#39;s used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters. (optional)
     * @param xAmzMqtt5CorrelationData The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it&#39;s received. &lt;code&gt;correlationData&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param messageExpiry A user-defined integer value that represents the message expiry interval in seconds. If absent, the message doesn&#39;t expire. For more information about the limits of &lt;code&gt;messageExpiry&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/iot-core.html#message-broker-limits\&quot;&gt;Amazon Web Services IoT Core message broker and protocol limits and quotas &lt;/a&gt; from the Amazon Web Services Reference Guide. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishCall(String topic, PublishRequest publishRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer qos, Boolean retain, String xAmzMqtt5UserProperties, String xAmzMqtt5PayloadFormatIndicator, String contentType, String responseTopic, String xAmzMqtt5CorrelationData, Integer messageExpiry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishRequest;

        // create path and map variables
        String localVarPath = "/topics/{topic}"
            .replace("{" + "topic" + "}", localVarApiClient.escapeString(topic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (qos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qos", qos));
        }

        if (retain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retain", retain));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentType", contentType));
        }

        if (responseTopic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseTopic", responseTopic));
        }

        if (messageExpiry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("messageExpiry", messageExpiry));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzMqtt5UserProperties != null) {
            localVarHeaderParams.put("x-amz-mqtt5-user-properties", localVarApiClient.parameterToString(xAmzMqtt5UserProperties));
        }

        if (xAmzMqtt5PayloadFormatIndicator != null) {
            localVarHeaderParams.put("x-amz-mqtt5-payload-format-indicator", localVarApiClient.parameterToString(xAmzMqtt5PayloadFormatIndicator));
        }

        if (xAmzMqtt5CorrelationData != null) {
            localVarHeaderParams.put("x-amz-mqtt5-correlation-data", localVarApiClient.parameterToString(xAmzMqtt5CorrelationData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishValidateBeforeCall(String topic, PublishRequest publishRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer qos, Boolean retain, String xAmzMqtt5UserProperties, String xAmzMqtt5PayloadFormatIndicator, String contentType, String responseTopic, String xAmzMqtt5CorrelationData, Integer messageExpiry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling publish(Async)");
        }

        // verify the required parameter 'publishRequest' is set
        if (publishRequest == null) {
            throw new ApiException("Missing the required parameter 'publishRequest' when calling publish(Async)");
        }

        return publishCall(topic, publishRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, qos, retain, xAmzMqtt5UserProperties, xAmzMqtt5PayloadFormatIndicator, contentType, responseTopic, xAmzMqtt5CorrelationData, messageExpiry, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes an MQTT message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;Publish&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about MQTT messages, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html\&quot;&gt;MQTT Protocol&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param topic The name of the MQTT topic. (required)
     * @param publishRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param qos The Quality of Service (QoS) level. The default QoS level is 0. (optional)
     * @param retain &lt;p&gt;A Boolean value that determines whether to set the RETAIN flag when the message is published.&lt;/p&gt; &lt;p&gt;Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default value: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5UserProperties &lt;p&gt;A JSON string that contains an array of JSON objects. If you don’t use Amazon Web Services SDK or CLI, you must encode the JSON string to base64 format before adding it to the HTTP header. &lt;code&gt;userProperties&lt;/code&gt; is an HTTP header value in the API.&lt;/p&gt; &lt;p&gt;The following example &lt;code&gt;userProperties&lt;/code&gt; parameter is a JSON string which represents two User Properties. Note that it needs to be base64-encoded:&lt;/p&gt; &lt;p&gt; &lt;code&gt;[{\&quot;deviceName\&quot;: \&quot;alpha\&quot;}, {\&quot;deviceCnt\&quot;: \&quot;45\&quot;}]&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5PayloadFormatIndicator An &lt;code&gt;Enum&lt;/code&gt; string value that indicates whether the payload is formatted as UTF-8. &lt;code&gt;payloadFormatIndicator&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param contentType A UTF-8 encoded string that describes the content of the publishing message. (optional)
     * @param responseTopic A UTF-8 encoded string that&#39;s used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters. (optional)
     * @param xAmzMqtt5CorrelationData The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it&#39;s received. &lt;code&gt;correlationData&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param messageExpiry A user-defined integer value that represents the message expiry interval in seconds. If absent, the message doesn&#39;t expire. For more information about the limits of &lt;code&gt;messageExpiry&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/iot-core.html#message-broker-limits\&quot;&gt;Amazon Web Services IoT Core message broker and protocol limits and quotas &lt;/a&gt; from the Amazon Web Services Reference Guide. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public void publish(String topic, PublishRequest publishRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer qos, Boolean retain, String xAmzMqtt5UserProperties, String xAmzMqtt5PayloadFormatIndicator, String contentType, String responseTopic, String xAmzMqtt5CorrelationData, Integer messageExpiry) throws ApiException {
        publishWithHttpInfo(topic, publishRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, qos, retain, xAmzMqtt5UserProperties, xAmzMqtt5PayloadFormatIndicator, contentType, responseTopic, xAmzMqtt5CorrelationData, messageExpiry);
    }

    /**
     * 
     * &lt;p&gt;Publishes an MQTT message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;Publish&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about MQTT messages, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html\&quot;&gt;MQTT Protocol&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param topic The name of the MQTT topic. (required)
     * @param publishRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param qos The Quality of Service (QoS) level. The default QoS level is 0. (optional)
     * @param retain &lt;p&gt;A Boolean value that determines whether to set the RETAIN flag when the message is published.&lt;/p&gt; &lt;p&gt;Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default value: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5UserProperties &lt;p&gt;A JSON string that contains an array of JSON objects. If you don’t use Amazon Web Services SDK or CLI, you must encode the JSON string to base64 format before adding it to the HTTP header. &lt;code&gt;userProperties&lt;/code&gt; is an HTTP header value in the API.&lt;/p&gt; &lt;p&gt;The following example &lt;code&gt;userProperties&lt;/code&gt; parameter is a JSON string which represents two User Properties. Note that it needs to be base64-encoded:&lt;/p&gt; &lt;p&gt; &lt;code&gt;[{\&quot;deviceName\&quot;: \&quot;alpha\&quot;}, {\&quot;deviceCnt\&quot;: \&quot;45\&quot;}]&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5PayloadFormatIndicator An &lt;code&gt;Enum&lt;/code&gt; string value that indicates whether the payload is formatted as UTF-8. &lt;code&gt;payloadFormatIndicator&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param contentType A UTF-8 encoded string that describes the content of the publishing message. (optional)
     * @param responseTopic A UTF-8 encoded string that&#39;s used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters. (optional)
     * @param xAmzMqtt5CorrelationData The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it&#39;s received. &lt;code&gt;correlationData&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param messageExpiry A user-defined integer value that represents the message expiry interval in seconds. If absent, the message doesn&#39;t expire. For more information about the limits of &lt;code&gt;messageExpiry&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/iot-core.html#message-broker-limits\&quot;&gt;Amazon Web Services IoT Core message broker and protocol limits and quotas &lt;/a&gt; from the Amazon Web Services Reference Guide. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> publishWithHttpInfo(String topic, PublishRequest publishRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer qos, Boolean retain, String xAmzMqtt5UserProperties, String xAmzMqtt5PayloadFormatIndicator, String contentType, String responseTopic, String xAmzMqtt5CorrelationData, Integer messageExpiry) throws ApiException {
        okhttp3.Call localVarCall = publishValidateBeforeCall(topic, publishRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, qos, retain, xAmzMqtt5UserProperties, xAmzMqtt5PayloadFormatIndicator, contentType, responseTopic, xAmzMqtt5CorrelationData, messageExpiry, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes an MQTT message.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;Publish&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about MQTT messages, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html\&quot;&gt;MQTT Protocol&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt; &lt;p&gt;For more information about messaging costs, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/iot-core/pricing/#Messaging\&quot;&gt;Amazon Web Services IoT Core pricing - Messaging&lt;/a&gt;.&lt;/p&gt;
     * @param topic The name of the MQTT topic. (required)
     * @param publishRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param qos The Quality of Service (QoS) level. The default QoS level is 0. (optional)
     * @param retain &lt;p&gt;A Boolean value that determines whether to set the RETAIN flag when the message is published.&lt;/p&gt; &lt;p&gt;Setting the RETAIN flag causes the message to be retained and sent to new subscribers to the topic.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default value: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5UserProperties &lt;p&gt;A JSON string that contains an array of JSON objects. If you don’t use Amazon Web Services SDK or CLI, you must encode the JSON string to base64 format before adding it to the HTTP header. &lt;code&gt;userProperties&lt;/code&gt; is an HTTP header value in the API.&lt;/p&gt; &lt;p&gt;The following example &lt;code&gt;userProperties&lt;/code&gt; parameter is a JSON string which represents two User Properties. Note that it needs to be base64-encoded:&lt;/p&gt; &lt;p&gt; &lt;code&gt;[{\&quot;deviceName\&quot;: \&quot;alpha\&quot;}, {\&quot;deviceCnt\&quot;: \&quot;45\&quot;}]&lt;/code&gt; &lt;/p&gt; (optional)
     * @param xAmzMqtt5PayloadFormatIndicator An &lt;code&gt;Enum&lt;/code&gt; string value that indicates whether the payload is formatted as UTF-8. &lt;code&gt;payloadFormatIndicator&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param contentType A UTF-8 encoded string that describes the content of the publishing message. (optional)
     * @param responseTopic A UTF-8 encoded string that&#39;s used as the topic name for a response message. The response topic is used to describe the topic which the receiver should publish to as part of the request-response flow. The topic must not contain wildcard characters. (optional)
     * @param xAmzMqtt5CorrelationData The base64-encoded binary data used by the sender of the request message to identify which request the response message is for when it&#39;s received. &lt;code&gt;correlationData&lt;/code&gt; is an HTTP header value in the API. (optional)
     * @param messageExpiry A user-defined integer value that represents the message expiry interval in seconds. If absent, the message doesn&#39;t expire. For more information about the limits of &lt;code&gt;messageExpiry&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/iot-core.html#message-broker-limits\&quot;&gt;Amazon Web Services IoT Core message broker and protocol limits and quotas &lt;/a&gt; from the Amazon Web Services Reference Guide. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAsync(String topic, PublishRequest publishRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer qos, Boolean retain, String xAmzMqtt5UserProperties, String xAmzMqtt5PayloadFormatIndicator, String contentType, String responseTopic, String xAmzMqtt5CorrelationData, Integer messageExpiry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishValidateBeforeCall(topic, publishRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, qos, retain, xAmzMqtt5UserProperties, xAmzMqtt5PayloadFormatIndicator, contentType, responseTopic, xAmzMqtt5CorrelationData, messageExpiry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateThingShadow
     * @param thingName The name of the thing. (required)
     * @param updateThingShadowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestEntityTooLargeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateThingShadowCall(String thingName, UpdateThingShadowRequest updateThingShadowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateThingShadowRequest;

        // create path and map variables
        String localVarPath = "/things/{thingName}/shadow"
            .replace("{" + "thingName" + "}", localVarApiClient.escapeString(thingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThingShadowValidateBeforeCall(String thingName, UpdateThingShadowRequest updateThingShadowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thingName' is set
        if (thingName == null) {
            throw new ApiException("Missing the required parameter 'thingName' when calling updateThingShadow(Async)");
        }

        // verify the required parameter 'updateThingShadowRequest' is set
        if (updateThingShadowRequest == null) {
            throw new ApiException("Missing the required parameter 'updateThingShadowRequest' when calling updateThingShadow(Async)");
        }

        return updateThingShadowCall(thingName, updateThingShadowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;UpdateThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_UpdateThingShadow.html\&quot;&gt;UpdateThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param updateThingShadowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @return UpdateThingShadowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestEntityTooLargeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateThingShadowResponse updateThingShadow(String thingName, UpdateThingShadowRequest updateThingShadowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name) throws ApiException {
        ApiResponse<UpdateThingShadowResponse> localVarResp = updateThingShadowWithHttpInfo(thingName, updateThingShadowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;UpdateThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_UpdateThingShadow.html\&quot;&gt;UpdateThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param updateThingShadowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @return ApiResponse&lt;UpdateThingShadowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestEntityTooLargeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateThingShadowResponse> updateThingShadowWithHttpInfo(String thingName, UpdateThingShadowRequest updateThingShadowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name) throws ApiException {
        okhttp3.Call localVarCall = updateThingShadowValidateBeforeCall(thingName, updateThingShadowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, null);
        Type localVarReturnType = new TypeToken<UpdateThingShadowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the shadow for the specified thing.&lt;/p&gt; &lt;p&gt;Requires permission to access the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\&quot;&gt;UpdateThingShadow&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/iot/latest/developerguide/API_UpdateThingShadow.html\&quot;&gt;UpdateThingShadow&lt;/a&gt; in the IoT Developer Guide.&lt;/p&gt;
     * @param thingName The name of the thing. (required)
     * @param updateThingShadowRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name The name of the shadow. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestEntityTooLargeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MethodNotAllowedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedDocumentEncodingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateThingShadowAsync(String thingName, UpdateThingShadowRequest updateThingShadowRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, final ApiCallback<UpdateThingShadowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThingShadowValidateBeforeCall(thingName, updateThingShadowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, _callback);
        Type localVarReturnType = new TypeToken<UpdateThingShadowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
