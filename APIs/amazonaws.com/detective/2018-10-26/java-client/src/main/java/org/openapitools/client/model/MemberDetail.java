/*
 * Amazon Detective
 * <p>Detective uses machine learning and purpose-built visualizations to help you to analyze and investigate security issues across your Amazon Web Services (Amazon Web Services) workloads. Detective automatically extracts time-based events such as login attempts, API calls, and network traffic from CloudTrail and Amazon Virtual Private Cloud (Amazon VPC) flow logs. It also extracts findings detected by Amazon GuardDuty.</p> <p>The Detective API primarily supports the creation and management of behavior graphs. A behavior graph contains the extracted data from a set of member accounts, and is created and managed by an administrator account.</p> <p>To add a member account to the behavior graph, the administrator account sends an invitation to the account. When the account accepts the invitation, it becomes a member account in the behavior graph.</p> <p>Detective is also integrated with Organizations. The organization management account designates the Detective administrator account for the organization. That account becomes the administrator account for the organization behavior graph. The Detective administrator account is also the delegated administrator account for Detective in Organizations.</p> <p>The Detective administrator account can enable any organization account as a member account in the organization behavior graph. The organization accounts do not receive invitations. The Detective administrator account can also invite other accounts to the organization behavior graph.</p> <p>Every behavior graph is specific to a Region. You can only use the API to manage behavior graphs that belong to the Region that is associated with the currently selected endpoint.</p> <p>The administrator account for a behavior graph can use the Detective API to do the following:</p> <ul> <li> <p>Enable and disable Detective. Enabling Detective creates a new behavior graph.</p> </li> <li> <p>View the list of member accounts in a behavior graph.</p> </li> <li> <p>Add member accounts to a behavior graph.</p> </li> <li> <p>Remove member accounts from a behavior graph.</p> </li> <li> <p>Apply tags to a behavior graph.</p> </li> </ul> <p>The organization management account can use the Detective API to select the delegated administrator for Detective.</p> <p>The Detective administrator account for an organization can use the Detective API to do the following:</p> <ul> <li> <p>Perform all of the functions of an administrator account.</p> </li> <li> <p>Determine whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p> </li> </ul> <p>An invited member account can use the Detective API to do the following:</p> <ul> <li> <p>View the list of behavior graphs that they are invited to.</p> </li> <li> <p>Accept an invitation to contribute to a behavior graph.</p> </li> <li> <p>Decline an invitation to contribute to a behavior graph.</p> </li> <li> <p>Remove their account from a behavior graph.</p> </li> </ul> <p>All API actions are logged as CloudTrail events. See <a href=\"https://docs.aws.amazon.com/detective/latest/adminguide/logging-using-cloudtrail.html\">Logging Detective API Calls with CloudTrail</a>.</p> <note> <p>We replaced the term \"master account\" with the term \"administrator account.\" An administrator account is used to centrally manage multiple accounts. In the case of Detective, the administrator account manages the accounts in their behavior graph.</p> </note>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.InvitationType;
import org.openapitools.client.model.MemberDisabledReason;
import org.openapitools.client.model.MemberStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about a member account in a behavior graph.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:51.669781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_GRAPH_ARN = "GraphArn";
  @SerializedName(SERIALIZED_NAME_GRAPH_ARN)
  private String graphArn;

  public static final String SERIALIZED_NAME_MASTER_ID = "MasterId";
  @SerializedName(SERIALIZED_NAME_MASTER_ID)
  private String masterId;

  public static final String SERIALIZED_NAME_ADMINISTRATOR_ID = "AdministratorId";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_ID)
  private String administratorId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MemberStatus status;

  public static final String SERIALIZED_NAME_DISABLED_REASON = "DisabledReason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private MemberDisabledReason disabledReason;

  public static final String SERIALIZED_NAME_INVITED_TIME = "InvitedTime";
  @SerializedName(SERIALIZED_NAME_INVITED_TIME)
  private OffsetDateTime invitedTime;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "UpdatedTime";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_VOLUME_USAGE_IN_BYTES = "VolumeUsageInBytes";
  @SerializedName(SERIALIZED_NAME_VOLUME_USAGE_IN_BYTES)
  private Integer volumeUsageInBytes;

  public static final String SERIALIZED_NAME_VOLUME_USAGE_UPDATED_TIME = "VolumeUsageUpdatedTime";
  @SerializedName(SERIALIZED_NAME_VOLUME_USAGE_UPDATED_TIME)
  private OffsetDateTime volumeUsageUpdatedTime;

  public static final String SERIALIZED_NAME_PERCENT_OF_GRAPH_UTILIZATION = "PercentOfGraphUtilization";
  @SerializedName(SERIALIZED_NAME_PERCENT_OF_GRAPH_UTILIZATION)
  private Double percentOfGraphUtilization;

  public static final String SERIALIZED_NAME_PERCENT_OF_GRAPH_UTILIZATION_UPDATED_TIME = "PercentOfGraphUtilizationUpdatedTime";
  @SerializedName(SERIALIZED_NAME_PERCENT_OF_GRAPH_UTILIZATION_UPDATED_TIME)
  private OffsetDateTime percentOfGraphUtilizationUpdatedTime;

  public static final String SERIALIZED_NAME_INVITATION_TYPE = "InvitationType";
  @SerializedName(SERIALIZED_NAME_INVITATION_TYPE)
  private InvitationType invitationType;

  public static final String SERIALIZED_NAME_VOLUME_USAGE_BY_DATASOURCE_PACKAGE = "VolumeUsageByDatasourcePackage";
  @SerializedName(SERIALIZED_NAME_VOLUME_USAGE_BY_DATASOURCE_PACKAGE)
  private Map volumeUsageByDatasourcePackage;

  public static final String SERIALIZED_NAME_DATASOURCE_PACKAGE_INGEST_STATES = "DatasourcePackageIngestStates";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_PACKAGE_INGEST_STATES)
  private Map datasourcePackageIngestStates;

  public MemberDetail() {
  }

  public MemberDetail accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public MemberDetail emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public MemberDetail graphArn(String graphArn) {
    this.graphArn = graphArn;
    return this;
  }

  /**
   * Get graphArn
   * @return graphArn
   */
  @javax.annotation.Nullable
  public String getGraphArn() {
    return graphArn;
  }

  public void setGraphArn(String graphArn) {
    this.graphArn = graphArn;
  }


  public MemberDetail masterId(String masterId) {
    this.masterId = masterId;
    return this;
  }

  /**
   * Get masterId
   * @return masterId
   */
  @javax.annotation.Nullable
  public String getMasterId() {
    return masterId;
  }

  public void setMasterId(String masterId) {
    this.masterId = masterId;
  }


  public MemberDetail administratorId(String administratorId) {
    this.administratorId = administratorId;
    return this;
  }

  /**
   * Get administratorId
   * @return administratorId
   */
  @javax.annotation.Nullable
  public String getAdministratorId() {
    return administratorId;
  }

  public void setAdministratorId(String administratorId) {
    this.administratorId = administratorId;
  }


  public MemberDetail status(MemberStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public MemberStatus getStatus() {
    return status;
  }

  public void setStatus(MemberStatus status) {
    this.status = status;
  }


  public MemberDetail disabledReason(MemberDisabledReason disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

  /**
   * Get disabledReason
   * @return disabledReason
   */
  @javax.annotation.Nullable
  public MemberDisabledReason getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(MemberDisabledReason disabledReason) {
    this.disabledReason = disabledReason;
  }


  public MemberDetail invitedTime(OffsetDateTime invitedTime) {
    this.invitedTime = invitedTime;
    return this;
  }

  /**
   * Get invitedTime
   * @return invitedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInvitedTime() {
    return invitedTime;
  }

  public void setInvitedTime(OffsetDateTime invitedTime) {
    this.invitedTime = invitedTime;
  }


  public MemberDetail updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public MemberDetail volumeUsageInBytes(Integer volumeUsageInBytes) {
    this.volumeUsageInBytes = volumeUsageInBytes;
    return this;
  }

  /**
   * Get volumeUsageInBytes
   * @return volumeUsageInBytes
   */
  @javax.annotation.Nullable
  public Integer getVolumeUsageInBytes() {
    return volumeUsageInBytes;
  }

  public void setVolumeUsageInBytes(Integer volumeUsageInBytes) {
    this.volumeUsageInBytes = volumeUsageInBytes;
  }


  public MemberDetail volumeUsageUpdatedTime(OffsetDateTime volumeUsageUpdatedTime) {
    this.volumeUsageUpdatedTime = volumeUsageUpdatedTime;
    return this;
  }

  /**
   * Get volumeUsageUpdatedTime
   * @return volumeUsageUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVolumeUsageUpdatedTime() {
    return volumeUsageUpdatedTime;
  }

  public void setVolumeUsageUpdatedTime(OffsetDateTime volumeUsageUpdatedTime) {
    this.volumeUsageUpdatedTime = volumeUsageUpdatedTime;
  }


  public MemberDetail percentOfGraphUtilization(Double percentOfGraphUtilization) {
    this.percentOfGraphUtilization = percentOfGraphUtilization;
    return this;
  }

  /**
   * Get percentOfGraphUtilization
   * @return percentOfGraphUtilization
   */
  @javax.annotation.Nullable
  public Double getPercentOfGraphUtilization() {
    return percentOfGraphUtilization;
  }

  public void setPercentOfGraphUtilization(Double percentOfGraphUtilization) {
    this.percentOfGraphUtilization = percentOfGraphUtilization;
  }


  public MemberDetail percentOfGraphUtilizationUpdatedTime(OffsetDateTime percentOfGraphUtilizationUpdatedTime) {
    this.percentOfGraphUtilizationUpdatedTime = percentOfGraphUtilizationUpdatedTime;
    return this;
  }

  /**
   * Get percentOfGraphUtilizationUpdatedTime
   * @return percentOfGraphUtilizationUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPercentOfGraphUtilizationUpdatedTime() {
    return percentOfGraphUtilizationUpdatedTime;
  }

  public void setPercentOfGraphUtilizationUpdatedTime(OffsetDateTime percentOfGraphUtilizationUpdatedTime) {
    this.percentOfGraphUtilizationUpdatedTime = percentOfGraphUtilizationUpdatedTime;
  }


  public MemberDetail invitationType(InvitationType invitationType) {
    this.invitationType = invitationType;
    return this;
  }

  /**
   * Get invitationType
   * @return invitationType
   */
  @javax.annotation.Nullable
  public InvitationType getInvitationType() {
    return invitationType;
  }

  public void setInvitationType(InvitationType invitationType) {
    this.invitationType = invitationType;
  }


  public MemberDetail volumeUsageByDatasourcePackage(Map volumeUsageByDatasourcePackage) {
    this.volumeUsageByDatasourcePackage = volumeUsageByDatasourcePackage;
    return this;
  }

  /**
   * Get volumeUsageByDatasourcePackage
   * @return volumeUsageByDatasourcePackage
   */
  @javax.annotation.Nullable
  public Map getVolumeUsageByDatasourcePackage() {
    return volumeUsageByDatasourcePackage;
  }

  public void setVolumeUsageByDatasourcePackage(Map volumeUsageByDatasourcePackage) {
    this.volumeUsageByDatasourcePackage = volumeUsageByDatasourcePackage;
  }


  public MemberDetail datasourcePackageIngestStates(Map datasourcePackageIngestStates) {
    this.datasourcePackageIngestStates = datasourcePackageIngestStates;
    return this;
  }

  /**
   * Get datasourcePackageIngestStates
   * @return datasourcePackageIngestStates
   */
  @javax.annotation.Nullable
  public Map getDatasourcePackageIngestStates() {
    return datasourcePackageIngestStates;
  }

  public void setDatasourcePackageIngestStates(Map datasourcePackageIngestStates) {
    this.datasourcePackageIngestStates = datasourcePackageIngestStates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberDetail memberDetail = (MemberDetail) o;
    return Objects.equals(this.accountId, memberDetail.accountId) &&
        Objects.equals(this.emailAddress, memberDetail.emailAddress) &&
        Objects.equals(this.graphArn, memberDetail.graphArn) &&
        Objects.equals(this.masterId, memberDetail.masterId) &&
        Objects.equals(this.administratorId, memberDetail.administratorId) &&
        Objects.equals(this.status, memberDetail.status) &&
        Objects.equals(this.disabledReason, memberDetail.disabledReason) &&
        Objects.equals(this.invitedTime, memberDetail.invitedTime) &&
        Objects.equals(this.updatedTime, memberDetail.updatedTime) &&
        Objects.equals(this.volumeUsageInBytes, memberDetail.volumeUsageInBytes) &&
        Objects.equals(this.volumeUsageUpdatedTime, memberDetail.volumeUsageUpdatedTime) &&
        Objects.equals(this.percentOfGraphUtilization, memberDetail.percentOfGraphUtilization) &&
        Objects.equals(this.percentOfGraphUtilizationUpdatedTime, memberDetail.percentOfGraphUtilizationUpdatedTime) &&
        Objects.equals(this.invitationType, memberDetail.invitationType) &&
        Objects.equals(this.volumeUsageByDatasourcePackage, memberDetail.volumeUsageByDatasourcePackage) &&
        Objects.equals(this.datasourcePackageIngestStates, memberDetail.datasourcePackageIngestStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, emailAddress, graphArn, masterId, administratorId, status, disabledReason, invitedTime, updatedTime, volumeUsageInBytes, volumeUsageUpdatedTime, percentOfGraphUtilization, percentOfGraphUtilizationUpdatedTime, invitationType, volumeUsageByDatasourcePackage, datasourcePackageIngestStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberDetail {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    graphArn: ").append(toIndentedString(graphArn)).append("\n");
    sb.append("    masterId: ").append(toIndentedString(masterId)).append("\n");
    sb.append("    administratorId: ").append(toIndentedString(administratorId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    invitedTime: ").append(toIndentedString(invitedTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    volumeUsageInBytes: ").append(toIndentedString(volumeUsageInBytes)).append("\n");
    sb.append("    volumeUsageUpdatedTime: ").append(toIndentedString(volumeUsageUpdatedTime)).append("\n");
    sb.append("    percentOfGraphUtilization: ").append(toIndentedString(percentOfGraphUtilization)).append("\n");
    sb.append("    percentOfGraphUtilizationUpdatedTime: ").append(toIndentedString(percentOfGraphUtilizationUpdatedTime)).append("\n");
    sb.append("    invitationType: ").append(toIndentedString(invitationType)).append("\n");
    sb.append("    volumeUsageByDatasourcePackage: ").append(toIndentedString(volumeUsageByDatasourcePackage)).append("\n");
    sb.append("    datasourcePackageIngestStates: ").append(toIndentedString(datasourcePackageIngestStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("EmailAddress");
    openapiFields.add("GraphArn");
    openapiFields.add("MasterId");
    openapiFields.add("AdministratorId");
    openapiFields.add("Status");
    openapiFields.add("DisabledReason");
    openapiFields.add("InvitedTime");
    openapiFields.add("UpdatedTime");
    openapiFields.add("VolumeUsageInBytes");
    openapiFields.add("VolumeUsageUpdatedTime");
    openapiFields.add("PercentOfGraphUtilization");
    openapiFields.add("PercentOfGraphUtilizationUpdatedTime");
    openapiFields.add("InvitationType");
    openapiFields.add("VolumeUsageByDatasourcePackage");
    openapiFields.add("DatasourcePackageIngestStates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberDetail is not found in the empty JSON string", MemberDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountId`
      if (jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountId"));
      }
      // validate the optional field `EmailAddress`
      if (jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EmailAddress"));
      }
      // validate the optional field `GraphArn`
      if (jsonObj.get("GraphArn") != null && !jsonObj.get("GraphArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GraphArn"));
      }
      // validate the optional field `MasterId`
      if (jsonObj.get("MasterId") != null && !jsonObj.get("MasterId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterId"));
      }
      // validate the optional field `AdministratorId`
      if (jsonObj.get("AdministratorId") != null && !jsonObj.get("AdministratorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AdministratorId"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        MemberStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `DisabledReason`
      if (jsonObj.get("DisabledReason") != null && !jsonObj.get("DisabledReason").isJsonNull()) {
        MemberDisabledReason.validateJsonElement(jsonObj.get("DisabledReason"));
      }
      // validate the optional field `InvitedTime`
      if (jsonObj.get("InvitedTime") != null && !jsonObj.get("InvitedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("InvitedTime"));
      }
      // validate the optional field `UpdatedTime`
      if (jsonObj.get("UpdatedTime") != null && !jsonObj.get("UpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedTime"));
      }
      // validate the optional field `VolumeUsageInBytes`
      if (jsonObj.get("VolumeUsageInBytes") != null && !jsonObj.get("VolumeUsageInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VolumeUsageInBytes"));
      }
      // validate the optional field `VolumeUsageUpdatedTime`
      if (jsonObj.get("VolumeUsageUpdatedTime") != null && !jsonObj.get("VolumeUsageUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("VolumeUsageUpdatedTime"));
      }
      // validate the optional field `PercentOfGraphUtilization`
      if (jsonObj.get("PercentOfGraphUtilization") != null && !jsonObj.get("PercentOfGraphUtilization").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("PercentOfGraphUtilization"));
      }
      // validate the optional field `PercentOfGraphUtilizationUpdatedTime`
      if (jsonObj.get("PercentOfGraphUtilizationUpdatedTime") != null && !jsonObj.get("PercentOfGraphUtilizationUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("PercentOfGraphUtilizationUpdatedTime"));
      }
      // validate the optional field `InvitationType`
      if (jsonObj.get("InvitationType") != null && !jsonObj.get("InvitationType").isJsonNull()) {
        InvitationType.validateJsonElement(jsonObj.get("InvitationType"));
      }
      // validate the optional field `VolumeUsageByDatasourcePackage`
      if (jsonObj.get("VolumeUsageByDatasourcePackage") != null && !jsonObj.get("VolumeUsageByDatasourcePackage").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("VolumeUsageByDatasourcePackage"));
      }
      // validate the optional field `DatasourcePackageIngestStates`
      if (jsonObj.get("DatasourcePackageIngestStates") != null && !jsonObj.get("DatasourcePackageIngestStates").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("DatasourcePackageIngestStates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberDetail>() {
           @Override
           public void write(JsonWriter out, MemberDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberDetail
   * @throws IOException if the JSON string is invalid with respect to MemberDetail
   */
  public static MemberDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberDetail.class);
  }

  /**
   * Convert an instance of MemberDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

