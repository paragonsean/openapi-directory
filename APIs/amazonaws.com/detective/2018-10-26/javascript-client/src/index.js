/**
 * Amazon Detective
 * <p>Detective uses machine learning and purpose-built visualizations to help you to analyze and investigate security issues across your Amazon Web Services (Amazon Web Services) workloads. Detective automatically extracts time-based events such as login attempts, API calls, and network traffic from CloudTrail and Amazon Virtual Private Cloud (Amazon VPC) flow logs. It also extracts findings detected by Amazon GuardDuty.</p> <p>The Detective API primarily supports the creation and management of behavior graphs. A behavior graph contains the extracted data from a set of member accounts, and is created and managed by an administrator account.</p> <p>To add a member account to the behavior graph, the administrator account sends an invitation to the account. When the account accepts the invitation, it becomes a member account in the behavior graph.</p> <p>Detective is also integrated with Organizations. The organization management account designates the Detective administrator account for the organization. That account becomes the administrator account for the organization behavior graph. The Detective administrator account is also the delegated administrator account for Detective in Organizations.</p> <p>The Detective administrator account can enable any organization account as a member account in the organization behavior graph. The organization accounts do not receive invitations. The Detective administrator account can also invite other accounts to the organization behavior graph.</p> <p>Every behavior graph is specific to a Region. You can only use the API to manage behavior graphs that belong to the Region that is associated with the currently selected endpoint.</p> <p>The administrator account for a behavior graph can use the Detective API to do the following:</p> <ul> <li> <p>Enable and disable Detective. Enabling Detective creates a new behavior graph.</p> </li> <li> <p>View the list of member accounts in a behavior graph.</p> </li> <li> <p>Add member accounts to a behavior graph.</p> </li> <li> <p>Remove member accounts from a behavior graph.</p> </li> <li> <p>Apply tags to a behavior graph.</p> </li> </ul> <p>The organization management account can use the Detective API to select the delegated administrator for Detective.</p> <p>The Detective administrator account for an organization can use the Detective API to do the following:</p> <ul> <li> <p>Perform all of the functions of an administrator account.</p> </li> <li> <p>Determine whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p> </li> </ul> <p>An invited member account can use the Detective API to do the following:</p> <ul> <li> <p>View the list of behavior graphs that they are invited to.</p> </li> <li> <p>Accept an invitation to contribute to a behavior graph.</p> </li> <li> <p>Decline an invitation to contribute to a behavior graph.</p> </li> <li> <p>Remove their account from a behavior graph.</p> </li> </ul> <p>All API actions are logged as CloudTrail events. See <a href=\"https://docs.aws.amazon.com/detective/latest/adminguide/logging-using-cloudtrail.html\">Logging Detective API Calls with CloudTrail</a>.</p> <note> <p>We replaced the term \"master account\" with the term \"administrator account.\" An administrator account is used to centrally manage multiple accounts. In the case of Detective, the administrator account manages the accounts in their behavior graph.</p> </note>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AcceptInvitationRequest from './model/AcceptInvitationRequest';
import Account from './model/Account';
import Administrator from './model/Administrator';
import BatchGetGraphMemberDatasourcesRequest from './model/BatchGetGraphMemberDatasourcesRequest';
import BatchGetGraphMemberDatasourcesResponse from './model/BatchGetGraphMemberDatasourcesResponse';
import BatchGetMembershipDatasourcesRequest from './model/BatchGetMembershipDatasourcesRequest';
import BatchGetMembershipDatasourcesResponse from './model/BatchGetMembershipDatasourcesResponse';
import CreateGraphRequest from './model/CreateGraphRequest';
import CreateGraphResponse from './model/CreateGraphResponse';
import CreateMembersRequest from './model/CreateMembersRequest';
import CreateMembersResponse from './model/CreateMembersResponse';
import DatasourcePackage from './model/DatasourcePackage';
import DatasourcePackageIngestDetail from './model/DatasourcePackageIngestDetail';
import DatasourcePackageIngestState from './model/DatasourcePackageIngestState';
import DatasourcePackageUsageInfo from './model/DatasourcePackageUsageInfo';
import DeleteGraphRequest from './model/DeleteGraphRequest';
import DeleteMembersRequest from './model/DeleteMembersRequest';
import DeleteMembersResponse from './model/DeleteMembersResponse';
import DescribeOrganizationConfigurationRequest from './model/DescribeOrganizationConfigurationRequest';
import DescribeOrganizationConfigurationResponse from './model/DescribeOrganizationConfigurationResponse';
import DisassociateMembershipRequest from './model/DisassociateMembershipRequest';
import EnableOrganizationAdminAccountRequest from './model/EnableOrganizationAdminAccountRequest';
import GetMembersRequest from './model/GetMembersRequest';
import GetMembersResponse from './model/GetMembersResponse';
import Graph from './model/Graph';
import InvitationType from './model/InvitationType';
import ListDatasourcePackagesRequest from './model/ListDatasourcePackagesRequest';
import ListDatasourcePackagesResponse from './model/ListDatasourcePackagesResponse';
import ListGraphsRequest from './model/ListGraphsRequest';
import ListGraphsResponse from './model/ListGraphsResponse';
import ListInvitationsRequest from './model/ListInvitationsRequest';
import ListInvitationsResponse from './model/ListInvitationsResponse';
import ListMembersRequest from './model/ListMembersRequest';
import ListMembersResponse from './model/ListMembersResponse';
import ListOrganizationAdminAccountsRequest from './model/ListOrganizationAdminAccountsRequest';
import ListOrganizationAdminAccountsResponse from './model/ListOrganizationAdminAccountsResponse';
import ListTagsForResourceResponse from './model/ListTagsForResourceResponse';
import MemberDetail from './model/MemberDetail';
import MemberDisabledReason from './model/MemberDisabledReason';
import MemberStatus from './model/MemberStatus';
import MembershipDatasources from './model/MembershipDatasources';
import RejectInvitationRequest from './model/RejectInvitationRequest';
import StartMonitoringMemberRequest from './model/StartMonitoringMemberRequest';
import TagResourceRequest from './model/TagResourceRequest';
import TimestampForCollection from './model/TimestampForCollection';
import UnprocessedAccount from './model/UnprocessedAccount';
import UnprocessedGraph from './model/UnprocessedGraph';
import UpdateDatasourcePackagesRequest from './model/UpdateDatasourcePackagesRequest';
import UpdateOrganizationConfigurationRequest from './model/UpdateOrganizationConfigurationRequest';
import DefaultApi from './api/DefaultApi';


/**
* &lt;p&gt;Detective uses machine learning and purpose-built visualizations to help you to analyze and investigate security issues across your Amazon Web Services (Amazon Web Services) workloads. Detective automatically extracts time-based events such as login attempts, API calls, and network traffic from CloudTrail and Amazon Virtual Private Cloud (Amazon VPC) flow logs. It also extracts findings detected by Amazon GuardDuty.&lt;/p&gt; &lt;p&gt;The Detective API primarily supports the creation and management of behavior graphs. A behavior graph contains the extracted data from a set of member accounts, and is created and managed by an administrator account.&lt;/p&gt; &lt;p&gt;To add a member account to the behavior graph, the administrator account sends an invitation to the account. When the account accepts the invitation, it becomes a member account in the behavior graph.&lt;/p&gt; &lt;p&gt;Detective is also integrated with Organizations. The organization management account designates the Detective administrator account for the organization. That account becomes the administrator account for the organization behavior graph. The Detective administrator account is also the delegated administrator account for Detective in Organizations.&lt;/p&gt; &lt;p&gt;The Detective administrator account can enable any organization account as a member account in the organization behavior graph. The organization accounts do not receive invitations. The Detective administrator account can also invite other accounts to the organization behavior graph.&lt;/p&gt; &lt;p&gt;Every behavior graph is specific to a Region. You can only use the API to manage behavior graphs that belong to the Region that is associated with the currently selected endpoint.&lt;/p&gt; &lt;p&gt;The administrator account for a behavior graph can use the Detective API to do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Enable and disable Detective. Enabling Detective creates a new behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;View the list of member accounts in a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add member accounts to a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Remove member accounts from a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Apply tags to a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The organization management account can use the Detective API to select the delegated administrator for Detective.&lt;/p&gt; &lt;p&gt;The Detective administrator account for an organization can use the Detective API to do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Perform all of the functions of an administrator account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determine whether to automatically enable new organization accounts as member accounts in the organization behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;An invited member account can use the Detective API to do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;View the list of behavior graphs that they are invited to.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Accept an invitation to contribute to a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Decline an invitation to contribute to a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Remove their account from a behavior graph.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All API actions are logged as CloudTrail events. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/detective/latest/adminguide/logging-using-cloudtrail.html\&quot;&gt;Logging Detective API Calls with CloudTrail&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We replaced the term \&quot;master account\&quot; with the term \&quot;administrator account.\&quot; An administrator account is used to centrally manage multiple accounts. In the case of Detective, the administrator account manages the accounts in their behavior graph.&lt;/p&gt; &lt;/note&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AmazonDetective = require('index'); // See note below*.
* var xxxSvc = new AmazonDetective.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AmazonDetective.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AmazonDetective.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AmazonDetective.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-10-26
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AcceptInvitationRequest model constructor.
     * @property {module:model/AcceptInvitationRequest}
     */
    AcceptInvitationRequest,

    /**
     * The Account model constructor.
     * @property {module:model/Account}
     */
    Account,

    /**
     * The Administrator model constructor.
     * @property {module:model/Administrator}
     */
    Administrator,

    /**
     * The BatchGetGraphMemberDatasourcesRequest model constructor.
     * @property {module:model/BatchGetGraphMemberDatasourcesRequest}
     */
    BatchGetGraphMemberDatasourcesRequest,

    /**
     * The BatchGetGraphMemberDatasourcesResponse model constructor.
     * @property {module:model/BatchGetGraphMemberDatasourcesResponse}
     */
    BatchGetGraphMemberDatasourcesResponse,

    /**
     * The BatchGetMembershipDatasourcesRequest model constructor.
     * @property {module:model/BatchGetMembershipDatasourcesRequest}
     */
    BatchGetMembershipDatasourcesRequest,

    /**
     * The BatchGetMembershipDatasourcesResponse model constructor.
     * @property {module:model/BatchGetMembershipDatasourcesResponse}
     */
    BatchGetMembershipDatasourcesResponse,

    /**
     * The CreateGraphRequest model constructor.
     * @property {module:model/CreateGraphRequest}
     */
    CreateGraphRequest,

    /**
     * The CreateGraphResponse model constructor.
     * @property {module:model/CreateGraphResponse}
     */
    CreateGraphResponse,

    /**
     * The CreateMembersRequest model constructor.
     * @property {module:model/CreateMembersRequest}
     */
    CreateMembersRequest,

    /**
     * The CreateMembersResponse model constructor.
     * @property {module:model/CreateMembersResponse}
     */
    CreateMembersResponse,

    /**
     * The DatasourcePackage model constructor.
     * @property {module:model/DatasourcePackage}
     */
    DatasourcePackage,

    /**
     * The DatasourcePackageIngestDetail model constructor.
     * @property {module:model/DatasourcePackageIngestDetail}
     */
    DatasourcePackageIngestDetail,

    /**
     * The DatasourcePackageIngestState model constructor.
     * @property {module:model/DatasourcePackageIngestState}
     */
    DatasourcePackageIngestState,

    /**
     * The DatasourcePackageUsageInfo model constructor.
     * @property {module:model/DatasourcePackageUsageInfo}
     */
    DatasourcePackageUsageInfo,

    /**
     * The DeleteGraphRequest model constructor.
     * @property {module:model/DeleteGraphRequest}
     */
    DeleteGraphRequest,

    /**
     * The DeleteMembersRequest model constructor.
     * @property {module:model/DeleteMembersRequest}
     */
    DeleteMembersRequest,

    /**
     * The DeleteMembersResponse model constructor.
     * @property {module:model/DeleteMembersResponse}
     */
    DeleteMembersResponse,

    /**
     * The DescribeOrganizationConfigurationRequest model constructor.
     * @property {module:model/DescribeOrganizationConfigurationRequest}
     */
    DescribeOrganizationConfigurationRequest,

    /**
     * The DescribeOrganizationConfigurationResponse model constructor.
     * @property {module:model/DescribeOrganizationConfigurationResponse}
     */
    DescribeOrganizationConfigurationResponse,

    /**
     * The DisassociateMembershipRequest model constructor.
     * @property {module:model/DisassociateMembershipRequest}
     */
    DisassociateMembershipRequest,

    /**
     * The EnableOrganizationAdminAccountRequest model constructor.
     * @property {module:model/EnableOrganizationAdminAccountRequest}
     */
    EnableOrganizationAdminAccountRequest,

    /**
     * The GetMembersRequest model constructor.
     * @property {module:model/GetMembersRequest}
     */
    GetMembersRequest,

    /**
     * The GetMembersResponse model constructor.
     * @property {module:model/GetMembersResponse}
     */
    GetMembersResponse,

    /**
     * The Graph model constructor.
     * @property {module:model/Graph}
     */
    Graph,

    /**
     * The InvitationType model constructor.
     * @property {module:model/InvitationType}
     */
    InvitationType,

    /**
     * The ListDatasourcePackagesRequest model constructor.
     * @property {module:model/ListDatasourcePackagesRequest}
     */
    ListDatasourcePackagesRequest,

    /**
     * The ListDatasourcePackagesResponse model constructor.
     * @property {module:model/ListDatasourcePackagesResponse}
     */
    ListDatasourcePackagesResponse,

    /**
     * The ListGraphsRequest model constructor.
     * @property {module:model/ListGraphsRequest}
     */
    ListGraphsRequest,

    /**
     * The ListGraphsResponse model constructor.
     * @property {module:model/ListGraphsResponse}
     */
    ListGraphsResponse,

    /**
     * The ListInvitationsRequest model constructor.
     * @property {module:model/ListInvitationsRequest}
     */
    ListInvitationsRequest,

    /**
     * The ListInvitationsResponse model constructor.
     * @property {module:model/ListInvitationsResponse}
     */
    ListInvitationsResponse,

    /**
     * The ListMembersRequest model constructor.
     * @property {module:model/ListMembersRequest}
     */
    ListMembersRequest,

    /**
     * The ListMembersResponse model constructor.
     * @property {module:model/ListMembersResponse}
     */
    ListMembersResponse,

    /**
     * The ListOrganizationAdminAccountsRequest model constructor.
     * @property {module:model/ListOrganizationAdminAccountsRequest}
     */
    ListOrganizationAdminAccountsRequest,

    /**
     * The ListOrganizationAdminAccountsResponse model constructor.
     * @property {module:model/ListOrganizationAdminAccountsResponse}
     */
    ListOrganizationAdminAccountsResponse,

    /**
     * The ListTagsForResourceResponse model constructor.
     * @property {module:model/ListTagsForResourceResponse}
     */
    ListTagsForResourceResponse,

    /**
     * The MemberDetail model constructor.
     * @property {module:model/MemberDetail}
     */
    MemberDetail,

    /**
     * The MemberDisabledReason model constructor.
     * @property {module:model/MemberDisabledReason}
     */
    MemberDisabledReason,

    /**
     * The MemberStatus model constructor.
     * @property {module:model/MemberStatus}
     */
    MemberStatus,

    /**
     * The MembershipDatasources model constructor.
     * @property {module:model/MembershipDatasources}
     */
    MembershipDatasources,

    /**
     * The RejectInvitationRequest model constructor.
     * @property {module:model/RejectInvitationRequest}
     */
    RejectInvitationRequest,

    /**
     * The StartMonitoringMemberRequest model constructor.
     * @property {module:model/StartMonitoringMemberRequest}
     */
    StartMonitoringMemberRequest,

    /**
     * The TagResourceRequest model constructor.
     * @property {module:model/TagResourceRequest}
     */
    TagResourceRequest,

    /**
     * The TimestampForCollection model constructor.
     * @property {module:model/TimestampForCollection}
     */
    TimestampForCollection,

    /**
     * The UnprocessedAccount model constructor.
     * @property {module:model/UnprocessedAccount}
     */
    UnprocessedAccount,

    /**
     * The UnprocessedGraph model constructor.
     * @property {module:model/UnprocessedGraph}
     */
    UnprocessedGraph,

    /**
     * The UpdateDatasourcePackagesRequest model constructor.
     * @property {module:model/UpdateDatasourcePackagesRequest}
     */
    UpdateDatasourcePackagesRequest,

    /**
     * The UpdateOrganizationConfigurationRequest model constructor.
     * @property {module:model/UpdateOrganizationConfigurationRequest}
     */
    UpdateOrganizationConfigurationRequest,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
