# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invitation_type import InvitationType
from openapi_server.models.member_disabled_reason import MemberDisabledReason
from openapi_server.models.member_status import MemberStatus
from openapi_server import util


class MemberDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, email_address: str=None, graph_arn: str=None, master_id: str=None, administrator_id: str=None, status: MemberStatus=None, disabled_reason: MemberDisabledReason=None, invited_time: datetime=None, updated_time: datetime=None, volume_usage_in_bytes: int=None, volume_usage_updated_time: datetime=None, percent_of_graph_utilization: float=None, percent_of_graph_utilization_updated_time: datetime=None, invitation_type: InvitationType=None, volume_usage_by_datasource_package: Dict=None, datasource_package_ingest_states: Dict=None):
        """MemberDetail - a model defined in OpenAPI

        :param account_id: The account_id of this MemberDetail.
        :param email_address: The email_address of this MemberDetail.
        :param graph_arn: The graph_arn of this MemberDetail.
        :param master_id: The master_id of this MemberDetail.
        :param administrator_id: The administrator_id of this MemberDetail.
        :param status: The status of this MemberDetail.
        :param disabled_reason: The disabled_reason of this MemberDetail.
        :param invited_time: The invited_time of this MemberDetail.
        :param updated_time: The updated_time of this MemberDetail.
        :param volume_usage_in_bytes: The volume_usage_in_bytes of this MemberDetail.
        :param volume_usage_updated_time: The volume_usage_updated_time of this MemberDetail.
        :param percent_of_graph_utilization: The percent_of_graph_utilization of this MemberDetail.
        :param percent_of_graph_utilization_updated_time: The percent_of_graph_utilization_updated_time of this MemberDetail.
        :param invitation_type: The invitation_type of this MemberDetail.
        :param volume_usage_by_datasource_package: The volume_usage_by_datasource_package of this MemberDetail.
        :param datasource_package_ingest_states: The datasource_package_ingest_states of this MemberDetail.
        """
        self.openapi_types = {
            'account_id': str,
            'email_address': str,
            'graph_arn': str,
            'master_id': str,
            'administrator_id': str,
            'status': MemberStatus,
            'disabled_reason': MemberDisabledReason,
            'invited_time': datetime,
            'updated_time': datetime,
            'volume_usage_in_bytes': int,
            'volume_usage_updated_time': datetime,
            'percent_of_graph_utilization': float,
            'percent_of_graph_utilization_updated_time': datetime,
            'invitation_type': InvitationType,
            'volume_usage_by_datasource_package': Dict,
            'datasource_package_ingest_states': Dict
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'email_address': 'EmailAddress',
            'graph_arn': 'GraphArn',
            'master_id': 'MasterId',
            'administrator_id': 'AdministratorId',
            'status': 'Status',
            'disabled_reason': 'DisabledReason',
            'invited_time': 'InvitedTime',
            'updated_time': 'UpdatedTime',
            'volume_usage_in_bytes': 'VolumeUsageInBytes',
            'volume_usage_updated_time': 'VolumeUsageUpdatedTime',
            'percent_of_graph_utilization': 'PercentOfGraphUtilization',
            'percent_of_graph_utilization_updated_time': 'PercentOfGraphUtilizationUpdatedTime',
            'invitation_type': 'InvitationType',
            'volume_usage_by_datasource_package': 'VolumeUsageByDatasourcePackage',
            'datasource_package_ingest_states': 'DatasourcePackageIngestStates'
        }

        self._account_id = account_id
        self._email_address = email_address
        self._graph_arn = graph_arn
        self._master_id = master_id
        self._administrator_id = administrator_id
        self._status = status
        self._disabled_reason = disabled_reason
        self._invited_time = invited_time
        self._updated_time = updated_time
        self._volume_usage_in_bytes = volume_usage_in_bytes
        self._volume_usage_updated_time = volume_usage_updated_time
        self._percent_of_graph_utilization = percent_of_graph_utilization
        self._percent_of_graph_utilization_updated_time = percent_of_graph_utilization_updated_time
        self._invitation_type = invitation_type
        self._volume_usage_by_datasource_package = volume_usage_by_datasource_package
        self._datasource_package_ingest_states = datasource_package_ingest_states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberDetail of this MemberDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MemberDetail.


        :return: The account_id of this MemberDetail.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MemberDetail.


        :param account_id: The account_id of this MemberDetail.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def email_address(self):
        """Gets the email_address of this MemberDetail.


        :return: The email_address of this MemberDetail.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this MemberDetail.


        :param email_address: The email_address of this MemberDetail.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def graph_arn(self):
        """Gets the graph_arn of this MemberDetail.


        :return: The graph_arn of this MemberDetail.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this MemberDetail.


        :param graph_arn: The graph_arn of this MemberDetail.
        :type graph_arn: str
        """

        self._graph_arn = graph_arn

    @property
    def master_id(self):
        """Gets the master_id of this MemberDetail.


        :return: The master_id of this MemberDetail.
        :rtype: str
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id):
        """Sets the master_id of this MemberDetail.


        :param master_id: The master_id of this MemberDetail.
        :type master_id: str
        """

        self._master_id = master_id

    @property
    def administrator_id(self):
        """Gets the administrator_id of this MemberDetail.


        :return: The administrator_id of this MemberDetail.
        :rtype: str
        """
        return self._administrator_id

    @administrator_id.setter
    def administrator_id(self, administrator_id):
        """Sets the administrator_id of this MemberDetail.


        :param administrator_id: The administrator_id of this MemberDetail.
        :type administrator_id: str
        """

        self._administrator_id = administrator_id

    @property
    def status(self):
        """Gets the status of this MemberDetail.


        :return: The status of this MemberDetail.
        :rtype: MemberStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MemberDetail.


        :param status: The status of this MemberDetail.
        :type status: MemberStatus
        """

        self._status = status

    @property
    def disabled_reason(self):
        """Gets the disabled_reason of this MemberDetail.


        :return: The disabled_reason of this MemberDetail.
        :rtype: MemberDisabledReason
        """
        return self._disabled_reason

    @disabled_reason.setter
    def disabled_reason(self, disabled_reason):
        """Sets the disabled_reason of this MemberDetail.


        :param disabled_reason: The disabled_reason of this MemberDetail.
        :type disabled_reason: MemberDisabledReason
        """

        self._disabled_reason = disabled_reason

    @property
    def invited_time(self):
        """Gets the invited_time of this MemberDetail.


        :return: The invited_time of this MemberDetail.
        :rtype: datetime
        """
        return self._invited_time

    @invited_time.setter
    def invited_time(self, invited_time):
        """Sets the invited_time of this MemberDetail.


        :param invited_time: The invited_time of this MemberDetail.
        :type invited_time: datetime
        """

        self._invited_time = invited_time

    @property
    def updated_time(self):
        """Gets the updated_time of this MemberDetail.


        :return: The updated_time of this MemberDetail.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this MemberDetail.


        :param updated_time: The updated_time of this MemberDetail.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def volume_usage_in_bytes(self):
        """Gets the volume_usage_in_bytes of this MemberDetail.


        :return: The volume_usage_in_bytes of this MemberDetail.
        :rtype: int
        """
        return self._volume_usage_in_bytes

    @volume_usage_in_bytes.setter
    def volume_usage_in_bytes(self, volume_usage_in_bytes):
        """Sets the volume_usage_in_bytes of this MemberDetail.


        :param volume_usage_in_bytes: The volume_usage_in_bytes of this MemberDetail.
        :type volume_usage_in_bytes: int
        """

        self._volume_usage_in_bytes = volume_usage_in_bytes

    @property
    def volume_usage_updated_time(self):
        """Gets the volume_usage_updated_time of this MemberDetail.


        :return: The volume_usage_updated_time of this MemberDetail.
        :rtype: datetime
        """
        return self._volume_usage_updated_time

    @volume_usage_updated_time.setter
    def volume_usage_updated_time(self, volume_usage_updated_time):
        """Sets the volume_usage_updated_time of this MemberDetail.


        :param volume_usage_updated_time: The volume_usage_updated_time of this MemberDetail.
        :type volume_usage_updated_time: datetime
        """

        self._volume_usage_updated_time = volume_usage_updated_time

    @property
    def percent_of_graph_utilization(self):
        """Gets the percent_of_graph_utilization of this MemberDetail.


        :return: The percent_of_graph_utilization of this MemberDetail.
        :rtype: float
        """
        return self._percent_of_graph_utilization

    @percent_of_graph_utilization.setter
    def percent_of_graph_utilization(self, percent_of_graph_utilization):
        """Sets the percent_of_graph_utilization of this MemberDetail.


        :param percent_of_graph_utilization: The percent_of_graph_utilization of this MemberDetail.
        :type percent_of_graph_utilization: float
        """

        self._percent_of_graph_utilization = percent_of_graph_utilization

    @property
    def percent_of_graph_utilization_updated_time(self):
        """Gets the percent_of_graph_utilization_updated_time of this MemberDetail.


        :return: The percent_of_graph_utilization_updated_time of this MemberDetail.
        :rtype: datetime
        """
        return self._percent_of_graph_utilization_updated_time

    @percent_of_graph_utilization_updated_time.setter
    def percent_of_graph_utilization_updated_time(self, percent_of_graph_utilization_updated_time):
        """Sets the percent_of_graph_utilization_updated_time of this MemberDetail.


        :param percent_of_graph_utilization_updated_time: The percent_of_graph_utilization_updated_time of this MemberDetail.
        :type percent_of_graph_utilization_updated_time: datetime
        """

        self._percent_of_graph_utilization_updated_time = percent_of_graph_utilization_updated_time

    @property
    def invitation_type(self):
        """Gets the invitation_type of this MemberDetail.


        :return: The invitation_type of this MemberDetail.
        :rtype: InvitationType
        """
        return self._invitation_type

    @invitation_type.setter
    def invitation_type(self, invitation_type):
        """Sets the invitation_type of this MemberDetail.


        :param invitation_type: The invitation_type of this MemberDetail.
        :type invitation_type: InvitationType
        """

        self._invitation_type = invitation_type

    @property
    def volume_usage_by_datasource_package(self):
        """Gets the volume_usage_by_datasource_package of this MemberDetail.


        :return: The volume_usage_by_datasource_package of this MemberDetail.
        :rtype: Dict
        """
        return self._volume_usage_by_datasource_package

    @volume_usage_by_datasource_package.setter
    def volume_usage_by_datasource_package(self, volume_usage_by_datasource_package):
        """Sets the volume_usage_by_datasource_package of this MemberDetail.


        :param volume_usage_by_datasource_package: The volume_usage_by_datasource_package of this MemberDetail.
        :type volume_usage_by_datasource_package: Dict
        """

        self._volume_usage_by_datasource_package = volume_usage_by_datasource_package

    @property
    def datasource_package_ingest_states(self):
        """Gets the datasource_package_ingest_states of this MemberDetail.


        :return: The datasource_package_ingest_states of this MemberDetail.
        :rtype: Dict
        """
        return self._datasource_package_ingest_states

    @datasource_package_ingest_states.setter
    def datasource_package_ingest_states(self, datasource_package_ingest_states):
        """Sets the datasource_package_ingest_states of this MemberDetail.


        :param datasource_package_ingest_states: The datasource_package_ingest_states of this MemberDetail.
        :type datasource_package_ingest_states: Dict
        """

        self._datasource_package_ingest_states = datasource_package_ingest_states
