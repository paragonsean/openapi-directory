# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_arn: str=None, account_ids: List[str]=None):
        """DeleteMembersRequest - a model defined in OpenAPI

        :param graph_arn: The graph_arn of this DeleteMembersRequest.
        :param account_ids: The account_ids of this DeleteMembersRequest.
        """
        self.openapi_types = {
            'graph_arn': str,
            'account_ids': List[str]
        }

        self.attribute_map = {
            'graph_arn': 'GraphArn',
            'account_ids': 'AccountIds'
        }

        self._graph_arn = graph_arn
        self._account_ids = account_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteMembers_request of this DeleteMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_arn(self):
        """Gets the graph_arn of this DeleteMembersRequest.

        The ARN of the behavior graph to remove members from.

        :return: The graph_arn of this DeleteMembersRequest.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this DeleteMembersRequest.

        The ARN of the behavior graph to remove members from.

        :param graph_arn: The graph_arn of this DeleteMembersRequest.
        :type graph_arn: str
        """
        if graph_arn is None:
            raise ValueError("Invalid value for `graph_arn`, must not be `None`")
        if graph_arn is not None and not re.search(r'^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$', graph_arn):
            raise ValueError("Invalid value for `graph_arn`, must be a follow pattern or equal to `/^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$/`")

        self._graph_arn = graph_arn

    @property
    def account_ids(self):
        """Gets the account_ids of this DeleteMembersRequest.

        The list of Amazon Web Services account identifiers for the member accounts to remove from the behavior graph. You can remove up to 50 member accounts at a time.

        :return: The account_ids of this DeleteMembersRequest.
        :rtype: List[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this DeleteMembersRequest.

        The list of Amazon Web Services account identifiers for the member accounts to remove from the behavior graph. You can remove up to 50 member accounts at a time.

        :param account_ids: The account_ids of this DeleteMembersRequest.
        :type account_ids: List[str]
        """
        if account_ids is None:
            raise ValueError("Invalid value for `account_ids`, must not be `None`")
        if account_ids is not None and len(account_ids) > 50:
            raise ValueError("Invalid value for `account_ids`, number of items must be less than or equal to `50`")
        if account_ids is not None and len(account_ids) < 1:
            raise ValueError("Invalid value for `account_ids`, number of items must be greater than or equal to `1`")

        self._account_ids = account_ids
