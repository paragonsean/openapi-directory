# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetMembershipDatasourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_arns: List[str]=None):
        """BatchGetMembershipDatasourcesRequest - a model defined in OpenAPI

        :param graph_arns: The graph_arns of this BatchGetMembershipDatasourcesRequest.
        """
        self.openapi_types = {
            'graph_arns': List[str]
        }

        self.attribute_map = {
            'graph_arns': 'GraphArns'
        }

        self._graph_arns = graph_arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetMembershipDatasourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetMembershipDatasources_request of this BatchGetMembershipDatasourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_arns(self):
        """Gets the graph_arns of this BatchGetMembershipDatasourcesRequest.

        The ARN of the behavior graph.

        :return: The graph_arns of this BatchGetMembershipDatasourcesRequest.
        :rtype: List[str]
        """
        return self._graph_arns

    @graph_arns.setter
    def graph_arns(self, graph_arns):
        """Sets the graph_arns of this BatchGetMembershipDatasourcesRequest.

        The ARN of the behavior graph.

        :param graph_arns: The graph_arns of this BatchGetMembershipDatasourcesRequest.
        :type graph_arns: List[str]
        """
        if graph_arns is None:
            raise ValueError("Invalid value for `graph_arns`, must not be `None`")
        if graph_arns is not None and len(graph_arns) > 50:
            raise ValueError("Invalid value for `graph_arns`, number of items must be less than or equal to `50`")
        if graph_arns is not None and len(graph_arns) < 1:
            raise ValueError("Invalid value for `graph_arns`, number of items must be greater than or equal to `1`")

        self._graph_arns = graph_arns
