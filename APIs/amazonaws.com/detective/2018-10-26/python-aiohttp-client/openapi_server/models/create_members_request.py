# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
import re
from openapi_server import util


class CreateMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_arn: str=None, message: str=None, disable_email_notification: bool=None, accounts: List[Account]=None):
        """CreateMembersRequest - a model defined in OpenAPI

        :param graph_arn: The graph_arn of this CreateMembersRequest.
        :param message: The message of this CreateMembersRequest.
        :param disable_email_notification: The disable_email_notification of this CreateMembersRequest.
        :param accounts: The accounts of this CreateMembersRequest.
        """
        self.openapi_types = {
            'graph_arn': str,
            'message': str,
            'disable_email_notification': bool,
            'accounts': List[Account]
        }

        self.attribute_map = {
            'graph_arn': 'GraphArn',
            'message': 'Message',
            'disable_email_notification': 'DisableEmailNotification',
            'accounts': 'Accounts'
        }

        self._graph_arn = graph_arn
        self._message = message
        self._disable_email_notification = disable_email_notification
        self._accounts = accounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMembers_request of this CreateMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_arn(self):
        """Gets the graph_arn of this CreateMembersRequest.

        The ARN of the behavior graph.

        :return: The graph_arn of this CreateMembersRequest.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this CreateMembersRequest.

        The ARN of the behavior graph.

        :param graph_arn: The graph_arn of this CreateMembersRequest.
        :type graph_arn: str
        """
        if graph_arn is None:
            raise ValueError("Invalid value for `graph_arn`, must not be `None`")
        if graph_arn is not None and not re.search(r'^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$', graph_arn):
            raise ValueError("Invalid value for `graph_arn`, must be a follow pattern or equal to `/^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$/`")

        self._graph_arn = graph_arn

    @property
    def message(self):
        """Gets the message of this CreateMembersRequest.

        Customized message text to include in the invitation email message to the invited member accounts.

        :return: The message of this CreateMembersRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CreateMembersRequest.

        Customized message text to include in the invitation email message to the invited member accounts.

        :param message: The message of this CreateMembersRequest.
        :type message: str
        """
        if message is not None and len(message) > 1000:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `1000`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def disable_email_notification(self):
        """Gets the disable_email_notification of this CreateMembersRequest.

        <p>if set to <code>true</code>, then the invited accounts do not receive email notifications. By default, this is set to <code>false</code>, and the invited accounts receive email notifications.</p> <p>Organization accounts in the organization behavior graph do not receive email notifications.</p>

        :return: The disable_email_notification of this CreateMembersRequest.
        :rtype: bool
        """
        return self._disable_email_notification

    @disable_email_notification.setter
    def disable_email_notification(self, disable_email_notification):
        """Sets the disable_email_notification of this CreateMembersRequest.

        <p>if set to <code>true</code>, then the invited accounts do not receive email notifications. By default, this is set to <code>false</code>, and the invited accounts receive email notifications.</p> <p>Organization accounts in the organization behavior graph do not receive email notifications.</p>

        :param disable_email_notification: The disable_email_notification of this CreateMembersRequest.
        :type disable_email_notification: bool
        """

        self._disable_email_notification = disable_email_notification

    @property
    def accounts(self):
        """Gets the accounts of this CreateMembersRequest.

        The list of Amazon Web Services accounts to invite or to enable. You can invite or enable up to 50 accounts at a time. For each invited account, the account list contains the account identifier and the Amazon Web Services account root user email address. For organization accounts in the organization behavior graph, the email address is not required.

        :return: The accounts of this CreateMembersRequest.
        :rtype: List[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this CreateMembersRequest.

        The list of Amazon Web Services accounts to invite or to enable. You can invite or enable up to 50 accounts at a time. For each invited account, the account list contains the account identifier and the Amazon Web Services account root user email address. For organization accounts in the organization behavior graph, the email address is not required.

        :param accounts: The accounts of this CreateMembersRequest.
        :type accounts: List[Account]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")
        if accounts is not None and len(accounts) > 50:
            raise ValueError("Invalid value for `accounts`, number of items must be less than or equal to `50`")
        if accounts is not None and len(accounts) < 1:
            raise ValueError("Invalid value for `accounts`, number of items must be greater than or equal to `1`")

        self._accounts = accounts
