# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_arn: str=None, next_token: str=None, max_results: int=None):
        """ListMembersRequest - a model defined in OpenAPI

        :param graph_arn: The graph_arn of this ListMembersRequest.
        :param next_token: The next_token of this ListMembersRequest.
        :param max_results: The max_results of this ListMembersRequest.
        """
        self.openapi_types = {
            'graph_arn': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'graph_arn': 'GraphArn',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._graph_arn = graph_arn
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListMembers_request of this ListMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_arn(self):
        """Gets the graph_arn of this ListMembersRequest.

        The ARN of the behavior graph for which to retrieve the list of member accounts.

        :return: The graph_arn of this ListMembersRequest.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this ListMembersRequest.

        The ARN of the behavior graph for which to retrieve the list of member accounts.

        :param graph_arn: The graph_arn of this ListMembersRequest.
        :type graph_arn: str
        """
        if graph_arn is None:
            raise ValueError("Invalid value for `graph_arn`, must not be `None`")
        if graph_arn is not None and not re.search(r'^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$', graph_arn):
            raise ValueError("Invalid value for `graph_arn`, must be a follow pattern or equal to `/^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$/`")

        self._graph_arn = graph_arn

    @property
    def next_token(self):
        """Gets the next_token of this ListMembersRequest.

        For requests to retrieve the next page of member account results, the pagination token that was returned with the previous page of results. The initial request does not include a pagination token.

        :return: The next_token of this ListMembersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListMembersRequest.

        For requests to retrieve the next page of member account results, the pagination token that was returned with the previous page of results. The initial request does not include a pagination token.

        :param next_token: The next_token of this ListMembersRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1024:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1024`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListMembersRequest.

        The maximum number of member accounts to include in the response. The total must be less than the overall limit on the number of results to return, which is currently 200.

        :return: The max_results of this ListMembersRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListMembersRequest.

        The maximum number of member accounts to include in the response. The total must be less than the overall limit on the number of results to return, which is currently 200.

        :param max_results: The max_results of this ListMembersRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 200:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `200`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
