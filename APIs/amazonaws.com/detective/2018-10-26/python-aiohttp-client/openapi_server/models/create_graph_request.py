# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGraphRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tags: Dict[str, str]=None):
        """CreateGraphRequest - a model defined in OpenAPI

        :param tags: The tags of this CreateGraphRequest.
        """
        self.openapi_types = {
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'tags': 'Tags'
        }

        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGraphRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGraph_request of this CreateGraphRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tags(self):
        """Gets the tags of this CreateGraphRequest.

        The tags to assign to the new behavior graph. You can add up to 50 tags. For each tag, you provide the tag key and the tag value. Each tag key can contain up to 128 characters. Each tag value can contain up to 256 characters.

        :return: The tags of this CreateGraphRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateGraphRequest.

        The tags to assign to the new behavior graph. You can add up to 50 tags. For each tag, you provide the tag key and the tag value. Each tag key can contain up to 128 characters. Each tag value can contain up to 256 characters.

        :param tags: The tags of this CreateGraphRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
