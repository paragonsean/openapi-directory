# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MembershipDatasources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, graph_arn: str=None, datasource_package_ingest_history: Dict=None):
        """MembershipDatasources - a model defined in OpenAPI

        :param account_id: The account_id of this MembershipDatasources.
        :param graph_arn: The graph_arn of this MembershipDatasources.
        :param datasource_package_ingest_history: The datasource_package_ingest_history of this MembershipDatasources.
        """
        self.openapi_types = {
            'account_id': str,
            'graph_arn': str,
            'datasource_package_ingest_history': Dict
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'graph_arn': 'GraphArn',
            'datasource_package_ingest_history': 'DatasourcePackageIngestHistory'
        }

        self._account_id = account_id
        self._graph_arn = graph_arn
        self._datasource_package_ingest_history = datasource_package_ingest_history

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipDatasources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipDatasources of this MembershipDatasources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MembershipDatasources.


        :return: The account_id of this MembershipDatasources.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MembershipDatasources.


        :param account_id: The account_id of this MembershipDatasources.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def graph_arn(self):
        """Gets the graph_arn of this MembershipDatasources.


        :return: The graph_arn of this MembershipDatasources.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this MembershipDatasources.


        :param graph_arn: The graph_arn of this MembershipDatasources.
        :type graph_arn: str
        """

        self._graph_arn = graph_arn

    @property
    def datasource_package_ingest_history(self):
        """Gets the datasource_package_ingest_history of this MembershipDatasources.


        :return: The datasource_package_ingest_history of this MembershipDatasources.
        :rtype: Dict
        """
        return self._datasource_package_ingest_history

    @datasource_package_ingest_history.setter
    def datasource_package_ingest_history(self, datasource_package_ingest_history):
        """Sets the datasource_package_ingest_history of this MembershipDatasources.


        :param datasource_package_ingest_history: The datasource_package_ingest_history of this MembershipDatasources.
        :type datasource_package_ingest_history: Dict
        """

        self._datasource_package_ingest_history = datasource_package_ingest_history
