# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartMonitoringMemberRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_arn: str=None, account_id: str=None):
        """StartMonitoringMemberRequest - a model defined in OpenAPI

        :param graph_arn: The graph_arn of this StartMonitoringMemberRequest.
        :param account_id: The account_id of this StartMonitoringMemberRequest.
        """
        self.openapi_types = {
            'graph_arn': str,
            'account_id': str
        }

        self.attribute_map = {
            'graph_arn': 'GraphArn',
            'account_id': 'AccountId'
        }

        self._graph_arn = graph_arn
        self._account_id = account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartMonitoringMemberRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartMonitoringMember_request of this StartMonitoringMemberRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_arn(self):
        """Gets the graph_arn of this StartMonitoringMemberRequest.

        The ARN of the behavior graph.

        :return: The graph_arn of this StartMonitoringMemberRequest.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this StartMonitoringMemberRequest.

        The ARN of the behavior graph.

        :param graph_arn: The graph_arn of this StartMonitoringMemberRequest.
        :type graph_arn: str
        """
        if graph_arn is None:
            raise ValueError("Invalid value for `graph_arn`, must not be `None`")
        if graph_arn is not None and not re.search(r'^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$', graph_arn):
            raise ValueError("Invalid value for `graph_arn`, must be a follow pattern or equal to `/^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$/`")

        self._graph_arn = graph_arn

    @property
    def account_id(self):
        """Gets the account_id of this StartMonitoringMemberRequest.

        <p>The account ID of the member account to try to enable.</p> <p>The account must be an invited member account with a status of <code>ACCEPTED_BUT_DISABLED</code>. </p>

        :return: The account_id of this StartMonitoringMemberRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this StartMonitoringMemberRequest.

        <p>The account ID of the member account to try to enable.</p> <p>The account must be an invited member account with a status of <code>ACCEPTED_BUT_DISABLED</code>. </p>

        :param account_id: The account_id of this StartMonitoringMemberRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'^[0-9]+$', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/^[0-9]+$/`")

        self._account_id = account_id
