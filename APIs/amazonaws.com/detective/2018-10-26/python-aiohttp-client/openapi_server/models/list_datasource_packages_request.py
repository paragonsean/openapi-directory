# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListDatasourcePackagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, graph_arn: str=None, next_token: str=None, max_results: int=None):
        """ListDatasourcePackagesRequest - a model defined in OpenAPI

        :param graph_arn: The graph_arn of this ListDatasourcePackagesRequest.
        :param next_token: The next_token of this ListDatasourcePackagesRequest.
        :param max_results: The max_results of this ListDatasourcePackagesRequest.
        """
        self.openapi_types = {
            'graph_arn': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'graph_arn': 'GraphArn',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._graph_arn = graph_arn
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDatasourcePackagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDatasourcePackages_request of this ListDatasourcePackagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def graph_arn(self):
        """Gets the graph_arn of this ListDatasourcePackagesRequest.

        The ARN of the behavior graph.

        :return: The graph_arn of this ListDatasourcePackagesRequest.
        :rtype: str
        """
        return self._graph_arn

    @graph_arn.setter
    def graph_arn(self, graph_arn):
        """Sets the graph_arn of this ListDatasourcePackagesRequest.

        The ARN of the behavior graph.

        :param graph_arn: The graph_arn of this ListDatasourcePackagesRequest.
        :type graph_arn: str
        """
        if graph_arn is None:
            raise ValueError("Invalid value for `graph_arn`, must not be `None`")
        if graph_arn is not None and not re.search(r'^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$', graph_arn):
            raise ValueError("Invalid value for `graph_arn`, must be a follow pattern or equal to `/^arn:aws[-\w]{0,10}?:detective:[-\w]{2,20}?:\d{12}?:graph:[abcdef\d]{32}?$/`")

        self._graph_arn = graph_arn

    @property
    def next_token(self):
        """Gets the next_token of this ListDatasourcePackagesRequest.

        For requests to get the next page of results, the pagination token that was returned with the previous set of results. The initial request does not include a pagination token.

        :return: The next_token of this ListDatasourcePackagesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListDatasourcePackagesRequest.

        For requests to get the next page of results, the pagination token that was returned with the previous set of results. The initial request does not include a pagination token.

        :param next_token: The next_token of this ListDatasourcePackagesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1024:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1024`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListDatasourcePackagesRequest.

        The maximum number of results to return.

        :return: The max_results of this ListDatasourcePackagesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListDatasourcePackagesRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this ListDatasourcePackagesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 200:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `200`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
