/**
 * Amazon Detective
 * <p>Detective uses machine learning and purpose-built visualizations to help you to analyze and investigate security issues across your Amazon Web Services (Amazon Web Services) workloads. Detective automatically extracts time-based events such as login attempts, API calls, and network traffic from CloudTrail and Amazon Virtual Private Cloud (Amazon VPC) flow logs. It also extracts findings detected by Amazon GuardDuty.</p> <p>The Detective API primarily supports the creation and management of behavior graphs. A behavior graph contains the extracted data from a set of member accounts, and is created and managed by an administrator account.</p> <p>To add a member account to the behavior graph, the administrator account sends an invitation to the account. When the account accepts the invitation, it becomes a member account in the behavior graph.</p> <p>Detective is also integrated with Organizations. The organization management account designates the Detective administrator account for the organization. That account becomes the administrator account for the organization behavior graph. The Detective administrator account is also the delegated administrator account for Detective in Organizations.</p> <p>The Detective administrator account can enable any organization account as a member account in the organization behavior graph. The organization accounts do not receive invitations. The Detective administrator account can also invite other accounts to the organization behavior graph.</p> <p>Every behavior graph is specific to a Region. You can only use the API to manage behavior graphs that belong to the Region that is associated with the currently selected endpoint.</p> <p>The administrator account for a behavior graph can use the Detective API to do the following:</p> <ul> <li> <p>Enable and disable Detective. Enabling Detective creates a new behavior graph.</p> </li> <li> <p>View the list of member accounts in a behavior graph.</p> </li> <li> <p>Add member accounts to a behavior graph.</p> </li> <li> <p>Remove member accounts from a behavior graph.</p> </li> <li> <p>Apply tags to a behavior graph.</p> </li> </ul> <p>The organization management account can use the Detective API to select the delegated administrator for Detective.</p> <p>The Detective administrator account for an organization can use the Detective API to do the following:</p> <ul> <li> <p>Perform all of the functions of an administrator account.</p> </li> <li> <p>Determine whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p> </li> </ul> <p>An invited member account can use the Detective API to do the following:</p> <ul> <li> <p>View the list of behavior graphs that they are invited to.</p> </li> <li> <p>Accept an invitation to contribute to a behavior graph.</p> </li> <li> <p>Decline an invitation to contribute to a behavior graph.</p> </li> <li> <p>Remove their account from a behavior graph.</p> </li> </ul> <p>All API actions are logged as CloudTrail events. See <a href=\"https://docs.aws.amazon.com/detective/latest/adminguide/logging-using-cloudtrail.html\">Logging Detective API Calls with CloudTrail</a>.</p> <note> <p>We replaced the term \"master account\" with the term \"administrator account.\" An administrator account is used to centrally manage multiple accounts. In the case of Detective, the administrator account manages the accounts in their behavior graph.</p> </note>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMemberDetail.h
 *
 * Details about a member account in a behavior graph.
 */

#ifndef OAIMemberDetail_H
#define OAIMemberDetail_H

#include <QJsonObject>

#include "OAIInvitationType.h"
#include "OAIMemberDisabledReason.h"
#include "OAIMemberStatus.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMemberDetail : public OAIObject {
public:
    OAIMemberDetail();
    OAIMemberDetail(QString json);
    ~OAIMemberDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getEmailAddress() const;
    void setEmailAddress(const QString &email_address);
    bool is_email_address_Set() const;
    bool is_email_address_Valid() const;

    QString getGraphArn() const;
    void setGraphArn(const QString &graph_arn);
    bool is_graph_arn_Set() const;
    bool is_graph_arn_Valid() const;

    QString getMasterId() const;
    void setMasterId(const QString &master_id);
    bool is_master_id_Set() const;
    bool is_master_id_Valid() const;

    QString getAdministratorId() const;
    void setAdministratorId(const QString &administrator_id);
    bool is_administrator_id_Set() const;
    bool is_administrator_id_Valid() const;

    OAIMemberStatus getStatus() const;
    void setStatus(const OAIMemberStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIMemberDisabledReason getDisabledReason() const;
    void setDisabledReason(const OAIMemberDisabledReason &disabled_reason);
    bool is_disabled_reason_Set() const;
    bool is_disabled_reason_Valid() const;

    QDateTime getInvitedTime() const;
    void setInvitedTime(const QDateTime &invited_time);
    bool is_invited_time_Set() const;
    bool is_invited_time_Valid() const;

    QDateTime getUpdatedTime() const;
    void setUpdatedTime(const QDateTime &updated_time);
    bool is_updated_time_Set() const;
    bool is_updated_time_Valid() const;

    qint32 getVolumeUsageInBytes() const;
    void setVolumeUsageInBytes(const qint32 &volume_usage_in_bytes);
    bool is_volume_usage_in_bytes_Set() const;
    bool is_volume_usage_in_bytes_Valid() const;

    QDateTime getVolumeUsageUpdatedTime() const;
    void setVolumeUsageUpdatedTime(const QDateTime &volume_usage_updated_time);
    bool is_volume_usage_updated_time_Set() const;
    bool is_volume_usage_updated_time_Valid() const;

    double getPercentOfGraphUtilization() const;
    void setPercentOfGraphUtilization(const double &percent_of_graph_utilization);
    bool is_percent_of_graph_utilization_Set() const;
    bool is_percent_of_graph_utilization_Valid() const;

    QDateTime getPercentOfGraphUtilizationUpdatedTime() const;
    void setPercentOfGraphUtilizationUpdatedTime(const QDateTime &percent_of_graph_utilization_updated_time);
    bool is_percent_of_graph_utilization_updated_time_Set() const;
    bool is_percent_of_graph_utilization_updated_time_Valid() const;

    OAIInvitationType getInvitationType() const;
    void setInvitationType(const OAIInvitationType &invitation_type);
    bool is_invitation_type_Set() const;
    bool is_invitation_type_Valid() const;

    QMap getVolumeUsageByDatasourcePackage() const;
    void setVolumeUsageByDatasourcePackage(const QMap &volume_usage_by_datasource_package);
    bool is_volume_usage_by_datasource_package_Set() const;
    bool is_volume_usage_by_datasource_package_Valid() const;

    QMap getDatasourcePackageIngestStates() const;
    void setDatasourcePackageIngestStates(const QMap &datasource_package_ingest_states);
    bool is_datasource_package_ingest_states_Set() const;
    bool is_datasource_package_ingest_states_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_email_address;
    bool m_email_address_isSet;
    bool m_email_address_isValid;

    QString m_graph_arn;
    bool m_graph_arn_isSet;
    bool m_graph_arn_isValid;

    QString m_master_id;
    bool m_master_id_isSet;
    bool m_master_id_isValid;

    QString m_administrator_id;
    bool m_administrator_id_isSet;
    bool m_administrator_id_isValid;

    OAIMemberStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIMemberDisabledReason m_disabled_reason;
    bool m_disabled_reason_isSet;
    bool m_disabled_reason_isValid;

    QDateTime m_invited_time;
    bool m_invited_time_isSet;
    bool m_invited_time_isValid;

    QDateTime m_updated_time;
    bool m_updated_time_isSet;
    bool m_updated_time_isValid;

    qint32 m_volume_usage_in_bytes;
    bool m_volume_usage_in_bytes_isSet;
    bool m_volume_usage_in_bytes_isValid;

    QDateTime m_volume_usage_updated_time;
    bool m_volume_usage_updated_time_isSet;
    bool m_volume_usage_updated_time_isValid;

    double m_percent_of_graph_utilization;
    bool m_percent_of_graph_utilization_isSet;
    bool m_percent_of_graph_utilization_isValid;

    QDateTime m_percent_of_graph_utilization_updated_time;
    bool m_percent_of_graph_utilization_updated_time_isSet;
    bool m_percent_of_graph_utilization_updated_time_isValid;

    OAIInvitationType m_invitation_type;
    bool m_invitation_type_isSet;
    bool m_invitation_type_isValid;

    QMap m_volume_usage_by_datasource_package;
    bool m_volume_usage_by_datasource_package_isSet;
    bool m_volume_usage_by_datasource_package_isValid;

    QMap m_datasource_package_ingest_states;
    bool m_datasource_package_ingest_states_isSet;
    bool m_datasource_package_ingest_states_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMemberDetail)

#endif // OAIMemberDetail_H
