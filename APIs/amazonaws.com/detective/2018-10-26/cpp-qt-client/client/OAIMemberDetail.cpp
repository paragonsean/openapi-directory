/**
 * Amazon Detective
 * <p>Detective uses machine learning and purpose-built visualizations to help you to analyze and investigate security issues across your Amazon Web Services (Amazon Web Services) workloads. Detective automatically extracts time-based events such as login attempts, API calls, and network traffic from CloudTrail and Amazon Virtual Private Cloud (Amazon VPC) flow logs. It also extracts findings detected by Amazon GuardDuty.</p> <p>The Detective API primarily supports the creation and management of behavior graphs. A behavior graph contains the extracted data from a set of member accounts, and is created and managed by an administrator account.</p> <p>To add a member account to the behavior graph, the administrator account sends an invitation to the account. When the account accepts the invitation, it becomes a member account in the behavior graph.</p> <p>Detective is also integrated with Organizations. The organization management account designates the Detective administrator account for the organization. That account becomes the administrator account for the organization behavior graph. The Detective administrator account is also the delegated administrator account for Detective in Organizations.</p> <p>The Detective administrator account can enable any organization account as a member account in the organization behavior graph. The organization accounts do not receive invitations. The Detective administrator account can also invite other accounts to the organization behavior graph.</p> <p>Every behavior graph is specific to a Region. You can only use the API to manage behavior graphs that belong to the Region that is associated with the currently selected endpoint.</p> <p>The administrator account for a behavior graph can use the Detective API to do the following:</p> <ul> <li> <p>Enable and disable Detective. Enabling Detective creates a new behavior graph.</p> </li> <li> <p>View the list of member accounts in a behavior graph.</p> </li> <li> <p>Add member accounts to a behavior graph.</p> </li> <li> <p>Remove member accounts from a behavior graph.</p> </li> <li> <p>Apply tags to a behavior graph.</p> </li> </ul> <p>The organization management account can use the Detective API to select the delegated administrator for Detective.</p> <p>The Detective administrator account for an organization can use the Detective API to do the following:</p> <ul> <li> <p>Perform all of the functions of an administrator account.</p> </li> <li> <p>Determine whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p> </li> </ul> <p>An invited member account can use the Detective API to do the following:</p> <ul> <li> <p>View the list of behavior graphs that they are invited to.</p> </li> <li> <p>Accept an invitation to contribute to a behavior graph.</p> </li> <li> <p>Decline an invitation to contribute to a behavior graph.</p> </li> <li> <p>Remove their account from a behavior graph.</p> </li> </ul> <p>All API actions are logged as CloudTrail events. See <a href=\"https://docs.aws.amazon.com/detective/latest/adminguide/logging-using-cloudtrail.html\">Logging Detective API Calls with CloudTrail</a>.</p> <note> <p>We replaced the term \"master account\" with the term \"administrator account.\" An administrator account is used to centrally manage multiple accounts. In the case of Detective, the administrator account manages the accounts in their behavior graph.</p> </note>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberDetail::OAIMemberDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberDetail::OAIMemberDetail() {
    this->initializeModel();
}

OAIMemberDetail::~OAIMemberDetail() {}

void OAIMemberDetail::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_graph_arn_isSet = false;
    m_graph_arn_isValid = false;

    m_master_id_isSet = false;
    m_master_id_isValid = false;

    m_administrator_id_isSet = false;
    m_administrator_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_disabled_reason_isSet = false;
    m_disabled_reason_isValid = false;

    m_invited_time_isSet = false;
    m_invited_time_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_volume_usage_in_bytes_isSet = false;
    m_volume_usage_in_bytes_isValid = false;

    m_volume_usage_updated_time_isSet = false;
    m_volume_usage_updated_time_isValid = false;

    m_percent_of_graph_utilization_isSet = false;
    m_percent_of_graph_utilization_isValid = false;

    m_percent_of_graph_utilization_updated_time_isSet = false;
    m_percent_of_graph_utilization_updated_time_isValid = false;

    m_invitation_type_isSet = false;
    m_invitation_type_isValid = false;

    m_volume_usage_by_datasource_package_isSet = false;
    m_volume_usage_by_datasource_package_isValid = false;

    m_datasource_package_ingest_states_isSet = false;
    m_datasource_package_ingest_states_isValid = false;
}

void OAIMemberDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberDetail::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("EmailAddress")]);
    m_email_address_isSet = !json[QString("EmailAddress")].isNull() && m_email_address_isValid;

    m_graph_arn_isValid = ::OpenAPI::fromJsonValue(m_graph_arn, json[QString("GraphArn")]);
    m_graph_arn_isSet = !json[QString("GraphArn")].isNull() && m_graph_arn_isValid;

    m_master_id_isValid = ::OpenAPI::fromJsonValue(m_master_id, json[QString("MasterId")]);
    m_master_id_isSet = !json[QString("MasterId")].isNull() && m_master_id_isValid;

    m_administrator_id_isValid = ::OpenAPI::fromJsonValue(m_administrator_id, json[QString("AdministratorId")]);
    m_administrator_id_isSet = !json[QString("AdministratorId")].isNull() && m_administrator_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_disabled_reason_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason, json[QString("DisabledReason")]);
    m_disabled_reason_isSet = !json[QString("DisabledReason")].isNull() && m_disabled_reason_isValid;

    m_invited_time_isValid = ::OpenAPI::fromJsonValue(m_invited_time, json[QString("InvitedTime")]);
    m_invited_time_isSet = !json[QString("InvitedTime")].isNull() && m_invited_time_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("UpdatedTime")]);
    m_updated_time_isSet = !json[QString("UpdatedTime")].isNull() && m_updated_time_isValid;

    m_volume_usage_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_volume_usage_in_bytes, json[QString("VolumeUsageInBytes")]);
    m_volume_usage_in_bytes_isSet = !json[QString("VolumeUsageInBytes")].isNull() && m_volume_usage_in_bytes_isValid;

    m_volume_usage_updated_time_isValid = ::OpenAPI::fromJsonValue(m_volume_usage_updated_time, json[QString("VolumeUsageUpdatedTime")]);
    m_volume_usage_updated_time_isSet = !json[QString("VolumeUsageUpdatedTime")].isNull() && m_volume_usage_updated_time_isValid;

    m_percent_of_graph_utilization_isValid = ::OpenAPI::fromJsonValue(m_percent_of_graph_utilization, json[QString("PercentOfGraphUtilization")]);
    m_percent_of_graph_utilization_isSet = !json[QString("PercentOfGraphUtilization")].isNull() && m_percent_of_graph_utilization_isValid;

    m_percent_of_graph_utilization_updated_time_isValid = ::OpenAPI::fromJsonValue(m_percent_of_graph_utilization_updated_time, json[QString("PercentOfGraphUtilizationUpdatedTime")]);
    m_percent_of_graph_utilization_updated_time_isSet = !json[QString("PercentOfGraphUtilizationUpdatedTime")].isNull() && m_percent_of_graph_utilization_updated_time_isValid;

    m_invitation_type_isValid = ::OpenAPI::fromJsonValue(m_invitation_type, json[QString("InvitationType")]);
    m_invitation_type_isSet = !json[QString("InvitationType")].isNull() && m_invitation_type_isValid;

    m_volume_usage_by_datasource_package_isValid = ::OpenAPI::fromJsonValue(m_volume_usage_by_datasource_package, json[QString("VolumeUsageByDatasourcePackage")]);
    m_volume_usage_by_datasource_package_isSet = !json[QString("VolumeUsageByDatasourcePackage")].isNull() && m_volume_usage_by_datasource_package_isValid;

    m_datasource_package_ingest_states_isValid = ::OpenAPI::fromJsonValue(m_datasource_package_ingest_states, json[QString("DatasourcePackageIngestStates")]);
    m_datasource_package_ingest_states_isSet = !json[QString("DatasourcePackageIngestStates")].isNull() && m_datasource_package_ingest_states_isValid;
}

QString OAIMemberDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("EmailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_graph_arn_isSet) {
        obj.insert(QString("GraphArn"), ::OpenAPI::toJsonValue(m_graph_arn));
    }
    if (m_master_id_isSet) {
        obj.insert(QString("MasterId"), ::OpenAPI::toJsonValue(m_master_id));
    }
    if (m_administrator_id_isSet) {
        obj.insert(QString("AdministratorId"), ::OpenAPI::toJsonValue(m_administrator_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_disabled_reason.isSet()) {
        obj.insert(QString("DisabledReason"), ::OpenAPI::toJsonValue(m_disabled_reason));
    }
    if (m_invited_time_isSet) {
        obj.insert(QString("InvitedTime"), ::OpenAPI::toJsonValue(m_invited_time));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("UpdatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_volume_usage_in_bytes_isSet) {
        obj.insert(QString("VolumeUsageInBytes"), ::OpenAPI::toJsonValue(m_volume_usage_in_bytes));
    }
    if (m_volume_usage_updated_time_isSet) {
        obj.insert(QString("VolumeUsageUpdatedTime"), ::OpenAPI::toJsonValue(m_volume_usage_updated_time));
    }
    if (m_percent_of_graph_utilization_isSet) {
        obj.insert(QString("PercentOfGraphUtilization"), ::OpenAPI::toJsonValue(m_percent_of_graph_utilization));
    }
    if (m_percent_of_graph_utilization_updated_time_isSet) {
        obj.insert(QString("PercentOfGraphUtilizationUpdatedTime"), ::OpenAPI::toJsonValue(m_percent_of_graph_utilization_updated_time));
    }
    if (m_invitation_type.isSet()) {
        obj.insert(QString("InvitationType"), ::OpenAPI::toJsonValue(m_invitation_type));
    }
    if (m_volume_usage_by_datasource_package.isSet()) {
        obj.insert(QString("VolumeUsageByDatasourcePackage"), ::OpenAPI::toJsonValue(m_volume_usage_by_datasource_package));
    }
    if (m_datasource_package_ingest_states.isSet()) {
        obj.insert(QString("DatasourcePackageIngestStates"), ::OpenAPI::toJsonValue(m_datasource_package_ingest_states));
    }
    return obj;
}

QString OAIMemberDetail::getAccountId() const {
    return m_account_id;
}
void OAIMemberDetail::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMemberDetail::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMemberDetail::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIMemberDetail::getEmailAddress() const {
    return m_email_address;
}
void OAIMemberDetail::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIMemberDetail::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIMemberDetail::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIMemberDetail::getGraphArn() const {
    return m_graph_arn;
}
void OAIMemberDetail::setGraphArn(const QString &graph_arn) {
    m_graph_arn = graph_arn;
    m_graph_arn_isSet = true;
}

bool OAIMemberDetail::is_graph_arn_Set() const{
    return m_graph_arn_isSet;
}

bool OAIMemberDetail::is_graph_arn_Valid() const{
    return m_graph_arn_isValid;
}

QString OAIMemberDetail::getMasterId() const {
    return m_master_id;
}
void OAIMemberDetail::setMasterId(const QString &master_id) {
    m_master_id = master_id;
    m_master_id_isSet = true;
}

bool OAIMemberDetail::is_master_id_Set() const{
    return m_master_id_isSet;
}

bool OAIMemberDetail::is_master_id_Valid() const{
    return m_master_id_isValid;
}

QString OAIMemberDetail::getAdministratorId() const {
    return m_administrator_id;
}
void OAIMemberDetail::setAdministratorId(const QString &administrator_id) {
    m_administrator_id = administrator_id;
    m_administrator_id_isSet = true;
}

bool OAIMemberDetail::is_administrator_id_Set() const{
    return m_administrator_id_isSet;
}

bool OAIMemberDetail::is_administrator_id_Valid() const{
    return m_administrator_id_isValid;
}

OAIMemberStatus OAIMemberDetail::getStatus() const {
    return m_status;
}
void OAIMemberDetail::setStatus(const OAIMemberStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMemberDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMemberDetail::is_status_Valid() const{
    return m_status_isValid;
}

OAIMemberDisabledReason OAIMemberDetail::getDisabledReason() const {
    return m_disabled_reason;
}
void OAIMemberDetail::setDisabledReason(const OAIMemberDisabledReason &disabled_reason) {
    m_disabled_reason = disabled_reason;
    m_disabled_reason_isSet = true;
}

bool OAIMemberDetail::is_disabled_reason_Set() const{
    return m_disabled_reason_isSet;
}

bool OAIMemberDetail::is_disabled_reason_Valid() const{
    return m_disabled_reason_isValid;
}

QDateTime OAIMemberDetail::getInvitedTime() const {
    return m_invited_time;
}
void OAIMemberDetail::setInvitedTime(const QDateTime &invited_time) {
    m_invited_time = invited_time;
    m_invited_time_isSet = true;
}

bool OAIMemberDetail::is_invited_time_Set() const{
    return m_invited_time_isSet;
}

bool OAIMemberDetail::is_invited_time_Valid() const{
    return m_invited_time_isValid;
}

QDateTime OAIMemberDetail::getUpdatedTime() const {
    return m_updated_time;
}
void OAIMemberDetail::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIMemberDetail::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIMemberDetail::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

qint32 OAIMemberDetail::getVolumeUsageInBytes() const {
    return m_volume_usage_in_bytes;
}
void OAIMemberDetail::setVolumeUsageInBytes(const qint32 &volume_usage_in_bytes) {
    m_volume_usage_in_bytes = volume_usage_in_bytes;
    m_volume_usage_in_bytes_isSet = true;
}

bool OAIMemberDetail::is_volume_usage_in_bytes_Set() const{
    return m_volume_usage_in_bytes_isSet;
}

bool OAIMemberDetail::is_volume_usage_in_bytes_Valid() const{
    return m_volume_usage_in_bytes_isValid;
}

QDateTime OAIMemberDetail::getVolumeUsageUpdatedTime() const {
    return m_volume_usage_updated_time;
}
void OAIMemberDetail::setVolumeUsageUpdatedTime(const QDateTime &volume_usage_updated_time) {
    m_volume_usage_updated_time = volume_usage_updated_time;
    m_volume_usage_updated_time_isSet = true;
}

bool OAIMemberDetail::is_volume_usage_updated_time_Set() const{
    return m_volume_usage_updated_time_isSet;
}

bool OAIMemberDetail::is_volume_usage_updated_time_Valid() const{
    return m_volume_usage_updated_time_isValid;
}

double OAIMemberDetail::getPercentOfGraphUtilization() const {
    return m_percent_of_graph_utilization;
}
void OAIMemberDetail::setPercentOfGraphUtilization(const double &percent_of_graph_utilization) {
    m_percent_of_graph_utilization = percent_of_graph_utilization;
    m_percent_of_graph_utilization_isSet = true;
}

bool OAIMemberDetail::is_percent_of_graph_utilization_Set() const{
    return m_percent_of_graph_utilization_isSet;
}

bool OAIMemberDetail::is_percent_of_graph_utilization_Valid() const{
    return m_percent_of_graph_utilization_isValid;
}

QDateTime OAIMemberDetail::getPercentOfGraphUtilizationUpdatedTime() const {
    return m_percent_of_graph_utilization_updated_time;
}
void OAIMemberDetail::setPercentOfGraphUtilizationUpdatedTime(const QDateTime &percent_of_graph_utilization_updated_time) {
    m_percent_of_graph_utilization_updated_time = percent_of_graph_utilization_updated_time;
    m_percent_of_graph_utilization_updated_time_isSet = true;
}

bool OAIMemberDetail::is_percent_of_graph_utilization_updated_time_Set() const{
    return m_percent_of_graph_utilization_updated_time_isSet;
}

bool OAIMemberDetail::is_percent_of_graph_utilization_updated_time_Valid() const{
    return m_percent_of_graph_utilization_updated_time_isValid;
}

OAIInvitationType OAIMemberDetail::getInvitationType() const {
    return m_invitation_type;
}
void OAIMemberDetail::setInvitationType(const OAIInvitationType &invitation_type) {
    m_invitation_type = invitation_type;
    m_invitation_type_isSet = true;
}

bool OAIMemberDetail::is_invitation_type_Set() const{
    return m_invitation_type_isSet;
}

bool OAIMemberDetail::is_invitation_type_Valid() const{
    return m_invitation_type_isValid;
}

QMap OAIMemberDetail::getVolumeUsageByDatasourcePackage() const {
    return m_volume_usage_by_datasource_package;
}
void OAIMemberDetail::setVolumeUsageByDatasourcePackage(const QMap &volume_usage_by_datasource_package) {
    m_volume_usage_by_datasource_package = volume_usage_by_datasource_package;
    m_volume_usage_by_datasource_package_isSet = true;
}

bool OAIMemberDetail::is_volume_usage_by_datasource_package_Set() const{
    return m_volume_usage_by_datasource_package_isSet;
}

bool OAIMemberDetail::is_volume_usage_by_datasource_package_Valid() const{
    return m_volume_usage_by_datasource_package_isValid;
}

QMap OAIMemberDetail::getDatasourcePackageIngestStates() const {
    return m_datasource_package_ingest_states;
}
void OAIMemberDetail::setDatasourcePackageIngestStates(const QMap &datasource_package_ingest_states) {
    m_datasource_package_ingest_states = datasource_package_ingest_states;
    m_datasource_package_ingest_states_isSet = true;
}

bool OAIMemberDetail::is_datasource_package_ingest_states_Set() const{
    return m_datasource_package_ingest_states_isSet;
}

bool OAIMemberDetail::is_datasource_package_ingest_states_Valid() const{
    return m_datasource_package_ingest_states_isValid;
}

bool OAIMemberDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graph_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_usage_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_usage_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_of_graph_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_of_graph_utilization_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_usage_by_datasource_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_package_ingest_states.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
