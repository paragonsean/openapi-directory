/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecordPatch.h
 *
 * An update operation for a record.
 */

#ifndef OAIRecordPatch_H
#define OAIRecordPatch_H

#include <QJsonObject>

#include "OAIOperation.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecordPatch : public OAIObject {
public:
    OAIRecordPatch();
    OAIRecordPatch(QString json);
    ~OAIRecordPatch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOperation getOp() const;
    void setOp(const OAIOperation &op);
    bool is_op_Set() const;
    bool is_op_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    qint32 getSyncCount() const;
    void setSyncCount(const qint32 &sync_count);
    bool is_sync_count_Set() const;
    bool is_sync_count_Valid() const;

    QDateTime getDeviceLastModifiedDate() const;
    void setDeviceLastModifiedDate(const QDateTime &device_last_modified_date);
    bool is_device_last_modified_date_Set() const;
    bool is_device_last_modified_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOperation m_op;
    bool m_op_isSet;
    bool m_op_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    qint32 m_sync_count;
    bool m_sync_count_isSet;
    bool m_sync_count_isValid;

    QDateTime m_device_last_modified_date;
    bool m_device_last_modified_date_isSet;
    bool m_device_last_modified_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecordPatch)

#endif // OAIRecordPatch_H
