/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetResponse_Dataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetResponse_Dataset::OAIDescribeDatasetResponse_Dataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetResponse_Dataset::OAIDescribeDatasetResponse_Dataset() {
    this->initializeModel();
}

OAIDescribeDatasetResponse_Dataset::~OAIDescribeDatasetResponse_Dataset() {}

void OAIDescribeDatasetResponse_Dataset::initializeModel() {

    m_identity_id_isSet = false;
    m_identity_id_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_data_storage_isSet = false;
    m_data_storage_isValid = false;

    m_num_records_isSet = false;
    m_num_records_isValid = false;
}

void OAIDescribeDatasetResponse_Dataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetResponse_Dataset::fromJsonObject(QJsonObject json) {

    m_identity_id_isValid = ::OpenAPI::fromJsonValue(m_identity_id, json[QString("IdentityId")]);
    m_identity_id_isSet = !json[QString("IdentityId")].isNull() && m_identity_id_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_data_storage_isValid = ::OpenAPI::fromJsonValue(m_data_storage, json[QString("DataStorage")]);
    m_data_storage_isSet = !json[QString("DataStorage")].isNull() && m_data_storage_isValid;

    m_num_records_isValid = ::OpenAPI::fromJsonValue(m_num_records, json[QString("NumRecords")]);
    m_num_records_isSet = !json[QString("NumRecords")].isNull() && m_num_records_isValid;
}

QString OAIDescribeDatasetResponse_Dataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetResponse_Dataset::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_id_isSet) {
        obj.insert(QString("IdentityId"), ::OpenAPI::toJsonValue(m_identity_id));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_data_storage_isSet) {
        obj.insert(QString("DataStorage"), ::OpenAPI::toJsonValue(m_data_storage));
    }
    if (m_num_records_isSet) {
        obj.insert(QString("NumRecords"), ::OpenAPI::toJsonValue(m_num_records));
    }
    return obj;
}

QString OAIDescribeDatasetResponse_Dataset::getIdentityId() const {
    return m_identity_id;
}
void OAIDescribeDatasetResponse_Dataset::setIdentityId(const QString &identity_id) {
    m_identity_id = identity_id;
    m_identity_id_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_identity_id_Set() const{
    return m_identity_id_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_identity_id_Valid() const{
    return m_identity_id_isValid;
}

QString OAIDescribeDatasetResponse_Dataset::getDatasetName() const {
    return m_dataset_name;
}
void OAIDescribeDatasetResponse_Dataset::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QDateTime OAIDescribeDatasetResponse_Dataset::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeDatasetResponse_Dataset::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIDescribeDatasetResponse_Dataset::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIDescribeDatasetResponse_Dataset::setLastModifiedDate(const QDateTime &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIDescribeDatasetResponse_Dataset::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIDescribeDatasetResponse_Dataset::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

qint32 OAIDescribeDatasetResponse_Dataset::getDataStorage() const {
    return m_data_storage;
}
void OAIDescribeDatasetResponse_Dataset::setDataStorage(const qint32 &data_storage) {
    m_data_storage = data_storage;
    m_data_storage_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_data_storage_Set() const{
    return m_data_storage_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_data_storage_Valid() const{
    return m_data_storage_isValid;
}

qint32 OAIDescribeDatasetResponse_Dataset::getNumRecords() const {
    return m_num_records;
}
void OAIDescribeDatasetResponse_Dataset::setNumRecords(const qint32 &num_records) {
    m_num_records = num_records;
    m_num_records_isSet = true;
}

bool OAIDescribeDatasetResponse_Dataset::is_num_records_Set() const{
    return m_num_records_isSet;
}

bool OAIDescribeDatasetResponse_Dataset::is_num_records_Valid() const{
    return m_num_records_isValid;
}

bool OAIDescribeDatasetResponse_Dataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_records_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetResponse_Dataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
