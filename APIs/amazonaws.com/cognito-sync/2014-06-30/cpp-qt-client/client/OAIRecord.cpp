/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord::OAIRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord::OAIRecord() {
    this->initializeModel();
}

OAIRecord::~OAIRecord() {}

void OAIRecord::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_sync_count_isSet = false;
    m_sync_count_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_device_last_modified_date_isSet = false;
    m_device_last_modified_date_isValid = false;
}

void OAIRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_sync_count_isValid = ::OpenAPI::fromJsonValue(m_sync_count, json[QString("SyncCount")]);
    m_sync_count_isSet = !json[QString("SyncCount")].isNull() && m_sync_count_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_device_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_device_last_modified_date, json[QString("DeviceLastModifiedDate")]);
    m_device_last_modified_date_isSet = !json[QString("DeviceLastModifiedDate")].isNull() && m_device_last_modified_date_isValid;
}

QString OAIRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_sync_count_isSet) {
        obj.insert(QString("SyncCount"), ::OpenAPI::toJsonValue(m_sync_count));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_device_last_modified_date_isSet) {
        obj.insert(QString("DeviceLastModifiedDate"), ::OpenAPI::toJsonValue(m_device_last_modified_date));
    }
    return obj;
}

QString OAIRecord::getKey() const {
    return m_key;
}
void OAIRecord::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIRecord::is_key_Set() const{
    return m_key_isSet;
}

bool OAIRecord::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIRecord::getValue() const {
    return m_value;
}
void OAIRecord::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIRecord::is_value_Set() const{
    return m_value_isSet;
}

bool OAIRecord::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIRecord::getSyncCount() const {
    return m_sync_count;
}
void OAIRecord::setSyncCount(const qint32 &sync_count) {
    m_sync_count = sync_count;
    m_sync_count_isSet = true;
}

bool OAIRecord::is_sync_count_Set() const{
    return m_sync_count_isSet;
}

bool OAIRecord::is_sync_count_Valid() const{
    return m_sync_count_isValid;
}

QDateTime OAIRecord::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIRecord::setLastModifiedDate(const QDateTime &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIRecord::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIRecord::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIRecord::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIRecord::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIRecord::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIRecord::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QDateTime OAIRecord::getDeviceLastModifiedDate() const {
    return m_device_last_modified_date;
}
void OAIRecord::setDeviceLastModifiedDate(const QDateTime &device_last_modified_date) {
    m_device_last_modified_date = device_last_modified_date;
    m_device_last_modified_date_isSet = true;
}

bool OAIRecord::is_device_last_modified_date_Set() const{
    return m_device_last_modified_date_isSet;
}

bool OAIRecord::is_device_last_modified_date_Valid() const{
    return m_device_last_modified_date_isValid;
}

bool OAIRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
