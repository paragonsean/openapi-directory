/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateRecordsRequest.h
 *
 * A request to post updates to records or add and delete records for a dataset and user.
 */

#ifndef OAIUpdateRecordsRequest_H
#define OAIUpdateRecordsRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateRecordsRequest : public OAIObject {
public:
    OAIUpdateRecordsRequest();
    OAIUpdateRecordsRequest(QString json);
    ~OAIUpdateRecordsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QList getRecordPatches() const;
    void setRecordPatches(const QList &record_patches);
    bool is_record_patches_Set() const;
    bool is_record_patches_Valid() const;

    QString getSyncSessionToken() const;
    void setSyncSessionToken(const QString &sync_session_token);
    bool is_sync_session_token_Set() const;
    bool is_sync_session_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QList m_record_patches;
    bool m_record_patches_isSet;
    bool m_record_patches_isValid;

    QString m_sync_session_token;
    bool m_sync_session_token_isSet;
    bool m_sync_session_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateRecordsRequest)

#endif // OAIUpdateRecordsRequest_H
