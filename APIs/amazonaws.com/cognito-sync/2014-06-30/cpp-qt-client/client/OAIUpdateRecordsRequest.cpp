/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRecordsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRecordsRequest::OAIUpdateRecordsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRecordsRequest::OAIUpdateRecordsRequest() {
    this->initializeModel();
}

OAIUpdateRecordsRequest::~OAIUpdateRecordsRequest() {}

void OAIUpdateRecordsRequest::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_record_patches_isSet = false;
    m_record_patches_isValid = false;

    m_sync_session_token_isSet = false;
    m_sync_session_token_isValid = false;
}

void OAIUpdateRecordsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRecordsRequest::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_record_patches_isValid = ::OpenAPI::fromJsonValue(m_record_patches, json[QString("RecordPatches")]);
    m_record_patches_isSet = !json[QString("RecordPatches")].isNull() && m_record_patches_isValid;

    m_sync_session_token_isValid = ::OpenAPI::fromJsonValue(m_sync_session_token, json[QString("SyncSessionToken")]);
    m_sync_session_token_isSet = !json[QString("SyncSessionToken")].isNull() && m_sync_session_token_isValid;
}

QString OAIUpdateRecordsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRecordsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_record_patches.isSet()) {
        obj.insert(QString("RecordPatches"), ::OpenAPI::toJsonValue(m_record_patches));
    }
    if (m_sync_session_token_isSet) {
        obj.insert(QString("SyncSessionToken"), ::OpenAPI::toJsonValue(m_sync_session_token));
    }
    return obj;
}

QString OAIUpdateRecordsRequest::getDeviceId() const {
    return m_device_id;
}
void OAIUpdateRecordsRequest::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIUpdateRecordsRequest::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIUpdateRecordsRequest::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QList OAIUpdateRecordsRequest::getRecordPatches() const {
    return m_record_patches;
}
void OAIUpdateRecordsRequest::setRecordPatches(const QList &record_patches) {
    m_record_patches = record_patches;
    m_record_patches_isSet = true;
}

bool OAIUpdateRecordsRequest::is_record_patches_Set() const{
    return m_record_patches_isSet;
}

bool OAIUpdateRecordsRequest::is_record_patches_Valid() const{
    return m_record_patches_isValid;
}

QString OAIUpdateRecordsRequest::getSyncSessionToken() const {
    return m_sync_session_token;
}
void OAIUpdateRecordsRequest::setSyncSessionToken(const QString &sync_session_token) {
    m_sync_session_token = sync_session_token;
    m_sync_session_token_isSet = true;
}

bool OAIUpdateRecordsRequest::is_sync_session_token_Set() const{
    return m_sync_session_token_isSet;
}

bool OAIUpdateRecordsRequest::is_sync_session_token_Valid() const{
    return m_sync_session_token_isValid;
}

bool OAIUpdateRecordsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_patches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_session_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRecordsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sync_session_token_isValid && true;
}

} // namespace OpenAPI
