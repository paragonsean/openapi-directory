/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityUsage::OAIIdentityUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityUsage::OAIIdentityUsage() {
    this->initializeModel();
}

OAIIdentityUsage::~OAIIdentityUsage() {}

void OAIIdentityUsage::initializeModel() {

    m_identity_id_isSet = false;
    m_identity_id_isValid = false;

    m_identity_pool_id_isSet = false;
    m_identity_pool_id_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_dataset_count_isSet = false;
    m_dataset_count_isValid = false;

    m_data_storage_isSet = false;
    m_data_storage_isValid = false;
}

void OAIIdentityUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityUsage::fromJsonObject(QJsonObject json) {

    m_identity_id_isValid = ::OpenAPI::fromJsonValue(m_identity_id, json[QString("IdentityId")]);
    m_identity_id_isSet = !json[QString("IdentityId")].isNull() && m_identity_id_isValid;

    m_identity_pool_id_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_id, json[QString("IdentityPoolId")]);
    m_identity_pool_id_isSet = !json[QString("IdentityPoolId")].isNull() && m_identity_pool_id_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_dataset_count_isValid = ::OpenAPI::fromJsonValue(m_dataset_count, json[QString("DatasetCount")]);
    m_dataset_count_isSet = !json[QString("DatasetCount")].isNull() && m_dataset_count_isValid;

    m_data_storage_isValid = ::OpenAPI::fromJsonValue(m_data_storage, json[QString("DataStorage")]);
    m_data_storage_isSet = !json[QString("DataStorage")].isNull() && m_data_storage_isValid;
}

QString OAIIdentityUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_id_isSet) {
        obj.insert(QString("IdentityId"), ::OpenAPI::toJsonValue(m_identity_id));
    }
    if (m_identity_pool_id_isSet) {
        obj.insert(QString("IdentityPoolId"), ::OpenAPI::toJsonValue(m_identity_pool_id));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_dataset_count_isSet) {
        obj.insert(QString("DatasetCount"), ::OpenAPI::toJsonValue(m_dataset_count));
    }
    if (m_data_storage_isSet) {
        obj.insert(QString("DataStorage"), ::OpenAPI::toJsonValue(m_data_storage));
    }
    return obj;
}

QString OAIIdentityUsage::getIdentityId() const {
    return m_identity_id;
}
void OAIIdentityUsage::setIdentityId(const QString &identity_id) {
    m_identity_id = identity_id;
    m_identity_id_isSet = true;
}

bool OAIIdentityUsage::is_identity_id_Set() const{
    return m_identity_id_isSet;
}

bool OAIIdentityUsage::is_identity_id_Valid() const{
    return m_identity_id_isValid;
}

QString OAIIdentityUsage::getIdentityPoolId() const {
    return m_identity_pool_id;
}
void OAIIdentityUsage::setIdentityPoolId(const QString &identity_pool_id) {
    m_identity_pool_id = identity_pool_id;
    m_identity_pool_id_isSet = true;
}

bool OAIIdentityUsage::is_identity_pool_id_Set() const{
    return m_identity_pool_id_isSet;
}

bool OAIIdentityUsage::is_identity_pool_id_Valid() const{
    return m_identity_pool_id_isValid;
}

QDateTime OAIIdentityUsage::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIIdentityUsage::setLastModifiedDate(const QDateTime &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIIdentityUsage::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIIdentityUsage::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

qint32 OAIIdentityUsage::getDatasetCount() const {
    return m_dataset_count;
}
void OAIIdentityUsage::setDatasetCount(const qint32 &dataset_count) {
    m_dataset_count = dataset_count;
    m_dataset_count_isSet = true;
}

bool OAIIdentityUsage::is_dataset_count_Set() const{
    return m_dataset_count_isSet;
}

bool OAIIdentityUsage::is_dataset_count_Valid() const{
    return m_dataset_count_isValid;
}

qint32 OAIIdentityUsage::getDataStorage() const {
    return m_data_storage;
}
void OAIIdentityUsage::setDataStorage(const qint32 &data_storage) {
    m_data_storage = data_storage;
    m_data_storage_isSet = true;
}

bool OAIIdentityUsage::is_data_storage_Set() const{
    return m_data_storage_isSet;
}

bool OAIIdentityUsage::is_data_storage_Valid() const{
    return m_data_storage_isValid;
}

bool OAIIdentityUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_storage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
