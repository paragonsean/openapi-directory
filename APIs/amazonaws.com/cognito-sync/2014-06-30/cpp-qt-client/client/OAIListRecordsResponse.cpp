/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRecordsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRecordsResponse::OAIListRecordsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRecordsResponse::OAIListRecordsResponse() {
    this->initializeModel();
}

OAIListRecordsResponse::~OAIListRecordsResponse() {}

void OAIListRecordsResponse::initializeModel() {

    m_records_isSet = false;
    m_records_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_dataset_sync_count_isSet = false;
    m_dataset_sync_count_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_merged_dataset_names_isSet = false;
    m_merged_dataset_names_isValid = false;

    m_dataset_exists_isSet = false;
    m_dataset_exists_isValid = false;

    m_dataset_deleted_after_requested_sync_count_isSet = false;
    m_dataset_deleted_after_requested_sync_count_isValid = false;

    m_sync_session_token_isSet = false;
    m_sync_session_token_isValid = false;
}

void OAIListRecordsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRecordsResponse::fromJsonObject(QJsonObject json) {

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("Records")]);
    m_records_isSet = !json[QString("Records")].isNull() && m_records_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_dataset_sync_count_isValid = ::OpenAPI::fromJsonValue(m_dataset_sync_count, json[QString("DatasetSyncCount")]);
    m_dataset_sync_count_isSet = !json[QString("DatasetSyncCount")].isNull() && m_dataset_sync_count_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_merged_dataset_names_isValid = ::OpenAPI::fromJsonValue(m_merged_dataset_names, json[QString("MergedDatasetNames")]);
    m_merged_dataset_names_isSet = !json[QString("MergedDatasetNames")].isNull() && m_merged_dataset_names_isValid;

    m_dataset_exists_isValid = ::OpenAPI::fromJsonValue(m_dataset_exists, json[QString("DatasetExists")]);
    m_dataset_exists_isSet = !json[QString("DatasetExists")].isNull() && m_dataset_exists_isValid;

    m_dataset_deleted_after_requested_sync_count_isValid = ::OpenAPI::fromJsonValue(m_dataset_deleted_after_requested_sync_count, json[QString("DatasetDeletedAfterRequestedSyncCount")]);
    m_dataset_deleted_after_requested_sync_count_isSet = !json[QString("DatasetDeletedAfterRequestedSyncCount")].isNull() && m_dataset_deleted_after_requested_sync_count_isValid;

    m_sync_session_token_isValid = ::OpenAPI::fromJsonValue(m_sync_session_token, json[QString("SyncSessionToken")]);
    m_sync_session_token_isSet = !json[QString("SyncSessionToken")].isNull() && m_sync_session_token_isValid;
}

QString OAIListRecordsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRecordsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_records.isSet()) {
        obj.insert(QString("Records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_dataset_sync_count_isSet) {
        obj.insert(QString("DatasetSyncCount"), ::OpenAPI::toJsonValue(m_dataset_sync_count));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_merged_dataset_names.isSet()) {
        obj.insert(QString("MergedDatasetNames"), ::OpenAPI::toJsonValue(m_merged_dataset_names));
    }
    if (m_dataset_exists_isSet) {
        obj.insert(QString("DatasetExists"), ::OpenAPI::toJsonValue(m_dataset_exists));
    }
    if (m_dataset_deleted_after_requested_sync_count_isSet) {
        obj.insert(QString("DatasetDeletedAfterRequestedSyncCount"), ::OpenAPI::toJsonValue(m_dataset_deleted_after_requested_sync_count));
    }
    if (m_sync_session_token_isSet) {
        obj.insert(QString("SyncSessionToken"), ::OpenAPI::toJsonValue(m_sync_session_token));
    }
    return obj;
}

QList OAIListRecordsResponse::getRecords() const {
    return m_records;
}
void OAIListRecordsResponse::setRecords(const QList &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIListRecordsResponse::is_records_Set() const{
    return m_records_isSet;
}

bool OAIListRecordsResponse::is_records_Valid() const{
    return m_records_isValid;
}

QString OAIListRecordsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListRecordsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRecordsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRecordsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListRecordsResponse::getCount() const {
    return m_count;
}
void OAIListRecordsResponse::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIListRecordsResponse::is_count_Set() const{
    return m_count_isSet;
}

bool OAIListRecordsResponse::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIListRecordsResponse::getDatasetSyncCount() const {
    return m_dataset_sync_count;
}
void OAIListRecordsResponse::setDatasetSyncCount(const qint32 &dataset_sync_count) {
    m_dataset_sync_count = dataset_sync_count;
    m_dataset_sync_count_isSet = true;
}

bool OAIListRecordsResponse::is_dataset_sync_count_Set() const{
    return m_dataset_sync_count_isSet;
}

bool OAIListRecordsResponse::is_dataset_sync_count_Valid() const{
    return m_dataset_sync_count_isValid;
}

QString OAIListRecordsResponse::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIListRecordsResponse::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIListRecordsResponse::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIListRecordsResponse::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QList OAIListRecordsResponse::getMergedDatasetNames() const {
    return m_merged_dataset_names;
}
void OAIListRecordsResponse::setMergedDatasetNames(const QList &merged_dataset_names) {
    m_merged_dataset_names = merged_dataset_names;
    m_merged_dataset_names_isSet = true;
}

bool OAIListRecordsResponse::is_merged_dataset_names_Set() const{
    return m_merged_dataset_names_isSet;
}

bool OAIListRecordsResponse::is_merged_dataset_names_Valid() const{
    return m_merged_dataset_names_isValid;
}

bool OAIListRecordsResponse::getDatasetExists() const {
    return m_dataset_exists;
}
void OAIListRecordsResponse::setDatasetExists(const bool &dataset_exists) {
    m_dataset_exists = dataset_exists;
    m_dataset_exists_isSet = true;
}

bool OAIListRecordsResponse::is_dataset_exists_Set() const{
    return m_dataset_exists_isSet;
}

bool OAIListRecordsResponse::is_dataset_exists_Valid() const{
    return m_dataset_exists_isValid;
}

bool OAIListRecordsResponse::getDatasetDeletedAfterRequestedSyncCount() const {
    return m_dataset_deleted_after_requested_sync_count;
}
void OAIListRecordsResponse::setDatasetDeletedAfterRequestedSyncCount(const bool &dataset_deleted_after_requested_sync_count) {
    m_dataset_deleted_after_requested_sync_count = dataset_deleted_after_requested_sync_count;
    m_dataset_deleted_after_requested_sync_count_isSet = true;
}

bool OAIListRecordsResponse::is_dataset_deleted_after_requested_sync_count_Set() const{
    return m_dataset_deleted_after_requested_sync_count_isSet;
}

bool OAIListRecordsResponse::is_dataset_deleted_after_requested_sync_count_Valid() const{
    return m_dataset_deleted_after_requested_sync_count_isValid;
}

QString OAIListRecordsResponse::getSyncSessionToken() const {
    return m_sync_session_token;
}
void OAIListRecordsResponse::setSyncSessionToken(const QString &sync_session_token) {
    m_sync_session_token = sync_session_token;
    m_sync_session_token_isSet = true;
}

bool OAIListRecordsResponse::is_sync_session_token_Set() const{
    return m_sync_session_token_isSet;
}

bool OAIListRecordsResponse::is_sync_session_token_Valid() const{
    return m_sync_session_token_isValid;
}

bool OAIListRecordsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_sync_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_dataset_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_deleted_after_requested_sync_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_session_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRecordsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
