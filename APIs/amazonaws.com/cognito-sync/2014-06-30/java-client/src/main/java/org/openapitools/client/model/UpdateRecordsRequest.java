/*
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecordPatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateRecordsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:18.461510-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateRecordsRequest {
  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_RECORD_PATCHES = "RecordPatches";
  @SerializedName(SERIALIZED_NAME_RECORD_PATCHES)
  private List<RecordPatch> recordPatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNC_SESSION_TOKEN = "SyncSessionToken";
  @SerializedName(SERIALIZED_NAME_SYNC_SESSION_TOKEN)
  private String syncSessionToken;

  public UpdateRecordsRequest() {
  }

  public UpdateRecordsRequest deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The unique ID generated for this device by Cognito.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public UpdateRecordsRequest recordPatches(List<RecordPatch> recordPatches) {
    this.recordPatches = recordPatches;
    return this;
  }

  public UpdateRecordsRequest addRecordPatchesItem(RecordPatch recordPatchesItem) {
    if (this.recordPatches == null) {
      this.recordPatches = new ArrayList<>();
    }
    this.recordPatches.add(recordPatchesItem);
    return this;
  }

  /**
   * A list of patch operations.
   * @return recordPatches
   */
  @javax.annotation.Nullable
  public List<RecordPatch> getRecordPatches() {
    return recordPatches;
  }

  public void setRecordPatches(List<RecordPatch> recordPatches) {
    this.recordPatches = recordPatches;
  }


  public UpdateRecordsRequest syncSessionToken(String syncSessionToken) {
    this.syncSessionToken = syncSessionToken;
    return this;
  }

  /**
   * The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.
   * @return syncSessionToken
   */
  @javax.annotation.Nonnull
  public String getSyncSessionToken() {
    return syncSessionToken;
  }

  public void setSyncSessionToken(String syncSessionToken) {
    this.syncSessionToken = syncSessionToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRecordsRequest updateRecordsRequest = (UpdateRecordsRequest) o;
    return Objects.equals(this.deviceId, updateRecordsRequest.deviceId) &&
        Objects.equals(this.recordPatches, updateRecordsRequest.recordPatches) &&
        Objects.equals(this.syncSessionToken, updateRecordsRequest.syncSessionToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, recordPatches, syncSessionToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRecordsRequest {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    recordPatches: ").append(toIndentedString(recordPatches)).append("\n");
    sb.append("    syncSessionToken: ").append(toIndentedString(syncSessionToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceId");
    openapiFields.add("RecordPatches");
    openapiFields.add("SyncSessionToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SyncSessionToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRecordsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRecordsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRecordsRequest is not found in the empty JSON string", UpdateRecordsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRecordsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRecordsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateRecordsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) && !jsonObj.get("DeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceId").toString()));
      }
      if (jsonObj.get("RecordPatches") != null && !jsonObj.get("RecordPatches").isJsonNull()) {
        JsonArray jsonArrayrecordPatches = jsonObj.getAsJsonArray("RecordPatches");
        if (jsonArrayrecordPatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RecordPatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RecordPatches` to be an array in the JSON string but got `%s`", jsonObj.get("RecordPatches").toString()));
          }

          // validate the optional field `RecordPatches` (array)
          for (int i = 0; i < jsonArrayrecordPatches.size(); i++) {
            RecordPatch.validateJsonElement(jsonArrayrecordPatches.get(i));
          };
        }
      }
      if (!jsonObj.get("SyncSessionToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SyncSessionToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SyncSessionToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRecordsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRecordsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRecordsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRecordsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRecordsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateRecordsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRecordsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRecordsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRecordsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateRecordsRequest
   */
  public static UpdateRecordsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRecordsRequest.class);
  }

  /**
   * Convert an instance of UpdateRecordsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

