/*
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Operation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An update operation for a record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:18.461510-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordPatch {
  public static final String SERIALIZED_NAME_OP = "Op";
  @SerializedName(SERIALIZED_NAME_OP)
  private Operation op;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_SYNC_COUNT = "SyncCount";
  @SerializedName(SERIALIZED_NAME_SYNC_COUNT)
  private Integer syncCount;

  public static final String SERIALIZED_NAME_DEVICE_LAST_MODIFIED_DATE = "DeviceLastModifiedDate";
  @SerializedName(SERIALIZED_NAME_DEVICE_LAST_MODIFIED_DATE)
  private OffsetDateTime deviceLastModifiedDate;

  public RecordPatch() {
  }

  public RecordPatch op(Operation op) {
    this.op = op;
    return this;
  }

  /**
   * Get op
   * @return op
   */
  @javax.annotation.Nonnull
  public Operation getOp() {
    return op;
  }

  public void setOp(Operation op) {
    this.op = op;
  }


  public RecordPatch key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nonnull
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public RecordPatch value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public RecordPatch syncCount(Integer syncCount) {
    this.syncCount = syncCount;
    return this;
  }

  /**
   * Get syncCount
   * @return syncCount
   */
  @javax.annotation.Nonnull
  public Integer getSyncCount() {
    return syncCount;
  }

  public void setSyncCount(Integer syncCount) {
    this.syncCount = syncCount;
  }


  public RecordPatch deviceLastModifiedDate(OffsetDateTime deviceLastModifiedDate) {
    this.deviceLastModifiedDate = deviceLastModifiedDate;
    return this;
  }

  /**
   * Get deviceLastModifiedDate
   * @return deviceLastModifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeviceLastModifiedDate() {
    return deviceLastModifiedDate;
  }

  public void setDeviceLastModifiedDate(OffsetDateTime deviceLastModifiedDate) {
    this.deviceLastModifiedDate = deviceLastModifiedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordPatch recordPatch = (RecordPatch) o;
    return Objects.equals(this.op, recordPatch.op) &&
        Objects.equals(this.key, recordPatch.key) &&
        Objects.equals(this.value, recordPatch.value) &&
        Objects.equals(this.syncCount, recordPatch.syncCount) &&
        Objects.equals(this.deviceLastModifiedDate, recordPatch.deviceLastModifiedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(op, key, value, syncCount, deviceLastModifiedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordPatch {\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    syncCount: ").append(toIndentedString(syncCount)).append("\n");
    sb.append("    deviceLastModifiedDate: ").append(toIndentedString(deviceLastModifiedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Op");
    openapiFields.add("Key");
    openapiFields.add("Value");
    openapiFields.add("SyncCount");
    openapiFields.add("DeviceLastModifiedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Op");
    openapiRequiredFields.add("Key");
    openapiRequiredFields.add("SyncCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordPatch is not found in the empty JSON string", RecordPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordPatch.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Op`
      Operation.validateJsonElement(jsonObj.get("Op"));
      // validate the required field `Key`
      String.validateJsonElement(jsonObj.get("Key"));
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the required field `SyncCount`
      Integer.validateJsonElement(jsonObj.get("SyncCount"));
      // validate the optional field `DeviceLastModifiedDate`
      if (jsonObj.get("DeviceLastModifiedDate") != null && !jsonObj.get("DeviceLastModifiedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeviceLastModifiedDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordPatch>() {
           @Override
           public void write(JsonWriter out, RecordPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordPatch
   * @throws IOException if the JSON string is invalid with respect to RecordPatch
   */
  public static RecordPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordPatch.class);
  }

  /**
   * Convert an instance of RecordPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

