/*
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetIdentityPoolConfigurationResponseCognitoStreams;
import org.openapitools.client.model.GetIdentityPoolConfigurationResponsePushSync;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The output for the GetIdentityPoolConfiguration operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:18.461510-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetIdentityPoolConfigurationResponse {
  public static final String SERIALIZED_NAME_IDENTITY_POOL_ID = "IdentityPoolId";
  @SerializedName(SERIALIZED_NAME_IDENTITY_POOL_ID)
  private String identityPoolId;

  public static final String SERIALIZED_NAME_PUSH_SYNC = "PushSync";
  @SerializedName(SERIALIZED_NAME_PUSH_SYNC)
  private GetIdentityPoolConfigurationResponsePushSync pushSync;

  public static final String SERIALIZED_NAME_COGNITO_STREAMS = "CognitoStreams";
  @SerializedName(SERIALIZED_NAME_COGNITO_STREAMS)
  private GetIdentityPoolConfigurationResponseCognitoStreams cognitoStreams;

  public GetIdentityPoolConfigurationResponse() {
  }

  public GetIdentityPoolConfigurationResponse identityPoolId(String identityPoolId) {
    this.identityPoolId = identityPoolId;
    return this;
  }

  /**
   * Get identityPoolId
   * @return identityPoolId
   */
  @javax.annotation.Nullable
  public String getIdentityPoolId() {
    return identityPoolId;
  }

  public void setIdentityPoolId(String identityPoolId) {
    this.identityPoolId = identityPoolId;
  }


  public GetIdentityPoolConfigurationResponse pushSync(GetIdentityPoolConfigurationResponsePushSync pushSync) {
    this.pushSync = pushSync;
    return this;
  }

  /**
   * Get pushSync
   * @return pushSync
   */
  @javax.annotation.Nullable
  public GetIdentityPoolConfigurationResponsePushSync getPushSync() {
    return pushSync;
  }

  public void setPushSync(GetIdentityPoolConfigurationResponsePushSync pushSync) {
    this.pushSync = pushSync;
  }


  public GetIdentityPoolConfigurationResponse cognitoStreams(GetIdentityPoolConfigurationResponseCognitoStreams cognitoStreams) {
    this.cognitoStreams = cognitoStreams;
    return this;
  }

  /**
   * Get cognitoStreams
   * @return cognitoStreams
   */
  @javax.annotation.Nullable
  public GetIdentityPoolConfigurationResponseCognitoStreams getCognitoStreams() {
    return cognitoStreams;
  }

  public void setCognitoStreams(GetIdentityPoolConfigurationResponseCognitoStreams cognitoStreams) {
    this.cognitoStreams = cognitoStreams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIdentityPoolConfigurationResponse getIdentityPoolConfigurationResponse = (GetIdentityPoolConfigurationResponse) o;
    return Objects.equals(this.identityPoolId, getIdentityPoolConfigurationResponse.identityPoolId) &&
        Objects.equals(this.pushSync, getIdentityPoolConfigurationResponse.pushSync) &&
        Objects.equals(this.cognitoStreams, getIdentityPoolConfigurationResponse.cognitoStreams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityPoolId, pushSync, cognitoStreams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIdentityPoolConfigurationResponse {\n");
    sb.append("    identityPoolId: ").append(toIndentedString(identityPoolId)).append("\n");
    sb.append("    pushSync: ").append(toIndentedString(pushSync)).append("\n");
    sb.append("    cognitoStreams: ").append(toIndentedString(cognitoStreams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IdentityPoolId");
    openapiFields.add("PushSync");
    openapiFields.add("CognitoStreams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIdentityPoolConfigurationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIdentityPoolConfigurationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIdentityPoolConfigurationResponse is not found in the empty JSON string", GetIdentityPoolConfigurationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIdentityPoolConfigurationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIdentityPoolConfigurationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IdentityPoolId`
      if (jsonObj.get("IdentityPoolId") != null && !jsonObj.get("IdentityPoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdentityPoolId"));
      }
      // validate the optional field `PushSync`
      if (jsonObj.get("PushSync") != null && !jsonObj.get("PushSync").isJsonNull()) {
        GetIdentityPoolConfigurationResponsePushSync.validateJsonElement(jsonObj.get("PushSync"));
      }
      // validate the optional field `CognitoStreams`
      if (jsonObj.get("CognitoStreams") != null && !jsonObj.get("CognitoStreams").isJsonNull()) {
        GetIdentityPoolConfigurationResponseCognitoStreams.validateJsonElement(jsonObj.get("CognitoStreams"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIdentityPoolConfigurationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIdentityPoolConfigurationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIdentityPoolConfigurationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIdentityPoolConfigurationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIdentityPoolConfigurationResponse>() {
           @Override
           public void write(JsonWriter out, GetIdentityPoolConfigurationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIdentityPoolConfigurationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIdentityPoolConfigurationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIdentityPoolConfigurationResponse
   * @throws IOException if the JSON string is invalid with respect to GetIdentityPoolConfigurationResponse
   */
  public static GetIdentityPoolConfigurationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIdentityPoolConfigurationResponse.class);
  }

  /**
   * Convert an instance of GetIdentityPoolConfigurationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

