/*
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returned for a successful ListRecordsRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:18.461510-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListRecordsResponse {
  public static final String SERIALIZED_NAME_RECORDS = "Records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List records;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_DATASET_SYNC_COUNT = "DatasetSyncCount";
  @SerializedName(SERIALIZED_NAME_DATASET_SYNC_COUNT)
  private Integer datasetSyncCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "LastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_MERGED_DATASET_NAMES = "MergedDatasetNames";
  @SerializedName(SERIALIZED_NAME_MERGED_DATASET_NAMES)
  private List mergedDatasetNames;

  public static final String SERIALIZED_NAME_DATASET_EXISTS = "DatasetExists";
  @SerializedName(SERIALIZED_NAME_DATASET_EXISTS)
  private Boolean datasetExists;

  public static final String SERIALIZED_NAME_DATASET_DELETED_AFTER_REQUESTED_SYNC_COUNT = "DatasetDeletedAfterRequestedSyncCount";
  @SerializedName(SERIALIZED_NAME_DATASET_DELETED_AFTER_REQUESTED_SYNC_COUNT)
  private Boolean datasetDeletedAfterRequestedSyncCount;

  public static final String SERIALIZED_NAME_SYNC_SESSION_TOKEN = "SyncSessionToken";
  @SerializedName(SERIALIZED_NAME_SYNC_SESSION_TOKEN)
  private String syncSessionToken;

  public ListRecordsResponse() {
  }

  public ListRecordsResponse records(List records) {
    this.records = records;
    return this;
  }

  /**
   * Get records
   * @return records
   */
  @javax.annotation.Nullable
  public List getRecords() {
    return records;
  }

  public void setRecords(List records) {
    this.records = records;
  }


  public ListRecordsResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListRecordsResponse count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public ListRecordsResponse datasetSyncCount(Integer datasetSyncCount) {
    this.datasetSyncCount = datasetSyncCount;
    return this;
  }

  /**
   * Get datasetSyncCount
   * @return datasetSyncCount
   */
  @javax.annotation.Nullable
  public Integer getDatasetSyncCount() {
    return datasetSyncCount;
  }

  public void setDatasetSyncCount(Integer datasetSyncCount) {
    this.datasetSyncCount = datasetSyncCount;
  }


  public ListRecordsResponse lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

  /**
   * Get lastModifiedBy
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public ListRecordsResponse mergedDatasetNames(List mergedDatasetNames) {
    this.mergedDatasetNames = mergedDatasetNames;
    return this;
  }

  /**
   * Get mergedDatasetNames
   * @return mergedDatasetNames
   */
  @javax.annotation.Nullable
  public List getMergedDatasetNames() {
    return mergedDatasetNames;
  }

  public void setMergedDatasetNames(List mergedDatasetNames) {
    this.mergedDatasetNames = mergedDatasetNames;
  }


  public ListRecordsResponse datasetExists(Boolean datasetExists) {
    this.datasetExists = datasetExists;
    return this;
  }

  /**
   * Get datasetExists
   * @return datasetExists
   */
  @javax.annotation.Nullable
  public Boolean getDatasetExists() {
    return datasetExists;
  }

  public void setDatasetExists(Boolean datasetExists) {
    this.datasetExists = datasetExists;
  }


  public ListRecordsResponse datasetDeletedAfterRequestedSyncCount(Boolean datasetDeletedAfterRequestedSyncCount) {
    this.datasetDeletedAfterRequestedSyncCount = datasetDeletedAfterRequestedSyncCount;
    return this;
  }

  /**
   * Get datasetDeletedAfterRequestedSyncCount
   * @return datasetDeletedAfterRequestedSyncCount
   */
  @javax.annotation.Nullable
  public Boolean getDatasetDeletedAfterRequestedSyncCount() {
    return datasetDeletedAfterRequestedSyncCount;
  }

  public void setDatasetDeletedAfterRequestedSyncCount(Boolean datasetDeletedAfterRequestedSyncCount) {
    this.datasetDeletedAfterRequestedSyncCount = datasetDeletedAfterRequestedSyncCount;
  }


  public ListRecordsResponse syncSessionToken(String syncSessionToken) {
    this.syncSessionToken = syncSessionToken;
    return this;
  }

  /**
   * Get syncSessionToken
   * @return syncSessionToken
   */
  @javax.annotation.Nullable
  public String getSyncSessionToken() {
    return syncSessionToken;
  }

  public void setSyncSessionToken(String syncSessionToken) {
    this.syncSessionToken = syncSessionToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListRecordsResponse listRecordsResponse = (ListRecordsResponse) o;
    return Objects.equals(this.records, listRecordsResponse.records) &&
        Objects.equals(this.nextToken, listRecordsResponse.nextToken) &&
        Objects.equals(this.count, listRecordsResponse.count) &&
        Objects.equals(this.datasetSyncCount, listRecordsResponse.datasetSyncCount) &&
        Objects.equals(this.lastModifiedBy, listRecordsResponse.lastModifiedBy) &&
        Objects.equals(this.mergedDatasetNames, listRecordsResponse.mergedDatasetNames) &&
        Objects.equals(this.datasetExists, listRecordsResponse.datasetExists) &&
        Objects.equals(this.datasetDeletedAfterRequestedSyncCount, listRecordsResponse.datasetDeletedAfterRequestedSyncCount) &&
        Objects.equals(this.syncSessionToken, listRecordsResponse.syncSessionToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(records, nextToken, count, datasetSyncCount, lastModifiedBy, mergedDatasetNames, datasetExists, datasetDeletedAfterRequestedSyncCount, syncSessionToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListRecordsResponse {\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    datasetSyncCount: ").append(toIndentedString(datasetSyncCount)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    mergedDatasetNames: ").append(toIndentedString(mergedDatasetNames)).append("\n");
    sb.append("    datasetExists: ").append(toIndentedString(datasetExists)).append("\n");
    sb.append("    datasetDeletedAfterRequestedSyncCount: ").append(toIndentedString(datasetDeletedAfterRequestedSyncCount)).append("\n");
    sb.append("    syncSessionToken: ").append(toIndentedString(syncSessionToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Records");
    openapiFields.add("NextToken");
    openapiFields.add("Count");
    openapiFields.add("DatasetSyncCount");
    openapiFields.add("LastModifiedBy");
    openapiFields.add("MergedDatasetNames");
    openapiFields.add("DatasetExists");
    openapiFields.add("DatasetDeletedAfterRequestedSyncCount");
    openapiFields.add("SyncSessionToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListRecordsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListRecordsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListRecordsResponse is not found in the empty JSON string", ListRecordsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListRecordsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListRecordsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Records`
      if (jsonObj.get("Records") != null && !jsonObj.get("Records").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Records"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `Count`
      if (jsonObj.get("Count") != null && !jsonObj.get("Count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Count"));
      }
      // validate the optional field `DatasetSyncCount`
      if (jsonObj.get("DatasetSyncCount") != null && !jsonObj.get("DatasetSyncCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DatasetSyncCount"));
      }
      // validate the optional field `LastModifiedBy`
      if (jsonObj.get("LastModifiedBy") != null && !jsonObj.get("LastModifiedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastModifiedBy"));
      }
      // validate the optional field `MergedDatasetNames`
      if (jsonObj.get("MergedDatasetNames") != null && !jsonObj.get("MergedDatasetNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MergedDatasetNames"));
      }
      // validate the optional field `DatasetExists`
      if (jsonObj.get("DatasetExists") != null && !jsonObj.get("DatasetExists").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DatasetExists"));
      }
      // validate the optional field `DatasetDeletedAfterRequestedSyncCount`
      if (jsonObj.get("DatasetDeletedAfterRequestedSyncCount") != null && !jsonObj.get("DatasetDeletedAfterRequestedSyncCount").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DatasetDeletedAfterRequestedSyncCount"));
      }
      // validate the optional field `SyncSessionToken`
      if (jsonObj.get("SyncSessionToken") != null && !jsonObj.get("SyncSessionToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SyncSessionToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListRecordsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListRecordsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListRecordsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListRecordsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListRecordsResponse>() {
           @Override
           public void write(JsonWriter out, ListRecordsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListRecordsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListRecordsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListRecordsResponse
   * @throws IOException if the JSON string is invalid with respect to ListRecordsResponse
   */
  public static ListRecordsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListRecordsResponse.class);
  }

  /**
   * Convert an instance of ListRecordsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

