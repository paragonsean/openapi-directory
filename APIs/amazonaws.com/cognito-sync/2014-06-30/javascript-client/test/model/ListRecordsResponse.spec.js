/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCognitoSync);
  }
}(this, function(expect, AmazonCognitoSync) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCognitoSync.ListRecordsResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListRecordsResponse', function() {
    it('should create an instance of ListRecordsResponse', function() {
      // uncomment below and update the code to test ListRecordsResponse
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be.a(AmazonCognitoSync.ListRecordsResponse);
    });

    it('should have the property records (base name: "Records")', function() {
      // uncomment below and update the code to test the property records
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property nextToken (base name: "NextToken")', function() {
      // uncomment below and update the code to test the property nextToken
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property count (base name: "Count")', function() {
      // uncomment below and update the code to test the property count
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property datasetSyncCount (base name: "DatasetSyncCount")', function() {
      // uncomment below and update the code to test the property datasetSyncCount
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedBy (base name: "LastModifiedBy")', function() {
      // uncomment below and update the code to test the property lastModifiedBy
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property mergedDatasetNames (base name: "MergedDatasetNames")', function() {
      // uncomment below and update the code to test the property mergedDatasetNames
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property datasetExists (base name: "DatasetExists")', function() {
      // uncomment below and update the code to test the property datasetExists
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property datasetDeletedAfterRequestedSyncCount (base name: "DatasetDeletedAfterRequestedSyncCount")', function() {
      // uncomment below and update the code to test the property datasetDeletedAfterRequestedSyncCount
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

    it('should have the property syncSessionToken (base name: "SyncSessionToken")', function() {
      // uncomment below and update the code to test the property syncSessionToken
      //var instance = new AmazonCognitoSync.ListRecordsResponse();
      //expect(instance).to.be();
    });

  });

}));
