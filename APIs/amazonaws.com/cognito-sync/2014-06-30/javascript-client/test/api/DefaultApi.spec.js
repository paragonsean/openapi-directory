/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCognitoSync);
  }
}(this, function(expect, AmazonCognitoSync) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCognitoSync.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('bulkPublish', function() {
      it('should call bulkPublish successfully', function(done) {
        //uncomment below and update the code to test bulkPublish
        //instance.bulkPublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataset', function() {
      it('should call deleteDataset successfully', function(done) {
        //uncomment below and update the code to test deleteDataset
        //instance.deleteDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataset', function() {
      it('should call describeDataset successfully', function(done) {
        //uncomment below and update the code to test describeDataset
        //instance.describeDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeIdentityPoolUsage', function() {
      it('should call describeIdentityPoolUsage successfully', function(done) {
        //uncomment below and update the code to test describeIdentityPoolUsage
        //instance.describeIdentityPoolUsage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeIdentityUsage', function() {
      it('should call describeIdentityUsage successfully', function(done) {
        //uncomment below and update the code to test describeIdentityUsage
        //instance.describeIdentityUsage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBulkPublishDetails', function() {
      it('should call getBulkPublishDetails successfully', function(done) {
        //uncomment below and update the code to test getBulkPublishDetails
        //instance.getBulkPublishDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCognitoEvents', function() {
      it('should call getCognitoEvents successfully', function(done) {
        //uncomment below and update the code to test getCognitoEvents
        //instance.getCognitoEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIdentityPoolConfiguration', function() {
      it('should call getIdentityPoolConfiguration successfully', function(done) {
        //uncomment below and update the code to test getIdentityPoolConfiguration
        //instance.getIdentityPoolConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDatasets', function() {
      it('should call listDatasets successfully', function(done) {
        //uncomment below and update the code to test listDatasets
        //instance.listDatasets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentityPoolUsage', function() {
      it('should call listIdentityPoolUsage successfully', function(done) {
        //uncomment below and update the code to test listIdentityPoolUsage
        //instance.listIdentityPoolUsage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRecords', function() {
      it('should call listRecords successfully', function(done) {
        //uncomment below and update the code to test listRecords
        //instance.listRecords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerDevice', function() {
      it('should call registerDevice successfully', function(done) {
        //uncomment below and update the code to test registerDevice
        //instance.registerDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setCognitoEvents', function() {
      it('should call setCognitoEvents successfully', function(done) {
        //uncomment below and update the code to test setCognitoEvents
        //instance.setCognitoEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setIdentityPoolConfiguration', function() {
      it('should call setIdentityPoolConfiguration successfully', function(done) {
        //uncomment below and update the code to test setIdentityPoolConfiguration
        //instance.setIdentityPoolConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeToDataset', function() {
      it('should call subscribeToDataset successfully', function(done) {
        //uncomment below and update the code to test subscribeToDataset
        //instance.subscribeToDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsubscribeFromDataset', function() {
      it('should call unsubscribeFromDataset successfully', function(done) {
        //uncomment below and update the code to test unsubscribeFromDataset
        //instance.unsubscribeFromDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRecords', function() {
      it('should call updateRecords successfully', function(done) {
        //uncomment below and update the code to test updateRecords
        //instance.updateRecords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
