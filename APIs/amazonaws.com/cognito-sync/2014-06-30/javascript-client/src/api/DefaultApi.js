/**
 * Amazon Cognito Sync
 * <fullname>Amazon Cognito Sync</fullname> <p>Amazon Cognito Sync provides an AWS service and client library that enable cross-device syncing of application-related user data. High-level client libraries are available for both iOS and Android. You can use these libraries to persist data locally so that it's available even if the device is offline. Developer credentials don't need to be stored on the mobile device to access the service. You can use Amazon Cognito to obtain a normalized user ID and credentials. User data is persisted in a dataset that can store up to 1 MB of key-value pairs, and you can have up to 20 datasets per user identity.</p> <p>With Amazon Cognito Sync, the data stored for each identity is accessible only to credentials assigned to that identity. In order to use the Cognito Sync service, you need to make API calls using credentials retrieved with <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/Welcome.html\">Amazon Cognito Identity service</a>.</p> <p>If you want to use Cognito Sync in an Android or iOS application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href=\"http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-sync.html\">Developer Guide for Android</a> and the <a href=\"http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-sync.html\">Developer Guide for iOS</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkPublishResponse from '../model/BulkPublishResponse';
import DeleteDatasetResponse from '../model/DeleteDatasetResponse';
import DescribeDatasetResponse from '../model/DescribeDatasetResponse';
import DescribeIdentityPoolUsageResponse from '../model/DescribeIdentityPoolUsageResponse';
import DescribeIdentityUsageResponse from '../model/DescribeIdentityUsageResponse';
import GetBulkPublishDetailsResponse from '../model/GetBulkPublishDetailsResponse';
import GetCognitoEventsResponse from '../model/GetCognitoEventsResponse';
import GetIdentityPoolConfigurationResponse from '../model/GetIdentityPoolConfigurationResponse';
import ListDatasetsResponse from '../model/ListDatasetsResponse';
import ListIdentityPoolUsageResponse from '../model/ListIdentityPoolUsageResponse';
import ListRecordsResponse from '../model/ListRecordsResponse';
import RegisterDeviceRequest from '../model/RegisterDeviceRequest';
import RegisterDeviceResponse from '../model/RegisterDeviceResponse';
import SetCognitoEventsRequest from '../model/SetCognitoEventsRequest';
import SetIdentityPoolConfigurationRequest from '../model/SetIdentityPoolConfigurationRequest';
import SetIdentityPoolConfigurationResponse from '../model/SetIdentityPoolConfigurationResponse';
import UpdateRecordsRequest from '../model/UpdateRecordsRequest';
import UpdateRecordsResponse from '../model/UpdateRecordsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2014-06-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulkPublish operation.
     * @callback module:api/DefaultApi~bulkPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkPublishResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Initiates a bulk publish of all existing datasets for an Identity Pool to the configured stream. Customers are limited to one successful bulk publish per 24 hours. Bulk publish is an asynchronous request, customers can see the status of the request via the GetBulkPublishDetails operation.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~bulkPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkPublishResponse}
     */
    bulkPublish(identityPoolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling bulkPublish");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BulkPublishResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/bulkpublish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DefaultApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specific dataset. The dataset will be deleted permanently, and the action can't be undone. Datasets that this dataset was merged with will no longer report the merge. Any subsequent operation on this dataset will result in a ResourceNotFoundException.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} identityId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} datasetName A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDatasetResponse}
     */
    deleteDataset(identityPoolId, identityId, datasetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling deleteDataset");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling deleteDataset");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling deleteDataset");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId,
        'DatasetName': datasetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteDatasetResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataset operation.
     * @callback module:api/DefaultApi~describeDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets meta data about a dataset by identity and dataset name. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} identityId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} datasetName A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDatasetResponse}
     */
    describeDataset(identityPoolId, identityId, datasetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling describeDataset");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling describeDataset");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling describeDataset");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId,
        'DatasetName': datasetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDatasetResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIdentityPoolUsage operation.
     * @callback module:api/DefaultApi~describeIdentityPoolUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIdentityPoolUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets usage details (for example, data storage) about a particular identity pool.</p> <p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIdentityPoolUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIdentityPoolUsageResponse}
     */
    describeIdentityPoolUsage(identityPoolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling describeIdentityPoolUsage");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeIdentityPoolUsageResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIdentityUsage operation.
     * @callback module:api/DefaultApi~describeIdentityUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIdentityUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets usage information for an identity, including number of datasets and data usage.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} identityId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIdentityUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIdentityUsageResponse}
     */
    describeIdentityUsage(identityPoolId, identityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling describeIdentityUsage");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling describeIdentityUsage");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeIdentityUsageResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkPublishDetails operation.
     * @callback module:api/DefaultApi~getBulkPublishDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBulkPublishDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get the status of the last BulkPublish operation for an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBulkPublishDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBulkPublishDetailsResponse}
     */
    getBulkPublishDetails(identityPoolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling getBulkPublishDetails");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBulkPublishDetailsResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/getBulkPublishDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCognitoEvents operation.
     * @callback module:api/DefaultApi~getCognitoEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCognitoEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the events and the corresponding Lambda functions associated with an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId The Cognito Identity Pool ID for the request
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCognitoEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCognitoEventsResponse}
     */
    getCognitoEvents(identityPoolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling getCognitoEvents");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCognitoEventsResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentityPoolConfiguration operation.
     * @callback module:api/DefaultApi~getIdentityPoolConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIdentityPoolConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the configuration settings of an identity pool.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool for which to return a configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIdentityPoolConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIdentityPoolConfigurationResponse}
     */
    getIdentityPoolConfiguration(identityPoolId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling getIdentityPoolConfiguration");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIdentityPoolConfigurationResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasets operation.
     * @callback module:api/DefaultApi~listDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatasetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists datasets for an identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>ListDatasets can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use the Cognito Identity credentials to make this API call.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} identityId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A pagination token for obtaining the next page of results.
     * @param {Number} [maxResults] The maximum number of results to be returned.
     * @param {module:api/DefaultApi~listDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatasetsResponse}
     */
    listDatasets(identityPoolId, identityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling listDatasets");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling listDatasets");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDatasetsResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentityPoolUsage operation.
     * @callback module:api/DefaultApi~listIdentityPoolUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIdentityPoolUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets a list of identity pools registered with Cognito.</p> <p>ListIdentityPoolUsage can only be called with developer credentials. You cannot make this API call with the temporary user credentials provided by Cognito Identity.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A pagination token for obtaining the next page of results.
     * @param {Number} [maxResults] The maximum number of results to be returned.
     * @param {module:api/DefaultApi~listIdentityPoolUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIdentityPoolUsageResponse}
     */
    listIdentityPoolUsage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIdentityPoolUsageResponse;
      return this.apiClient.callApi(
        '/identitypools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecords operation.
     * @callback module:api/DefaultApi~listRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets paginated records, optionally changed after a particular sync count for a dataset and identity. With Amazon Cognito Sync, each identity has access only to its own data. Thus, the credentials used to make this API call need to have access to the identity data.</p> <p>ListRecords can be called with temporary user credentials provided by Cognito Identity or with developer credentials. You should use Cognito Identity credentials to make this API call.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} identityId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} datasetName A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [lastSyncCount] The last server sync count for this record.
     * @param {String} [nextToken] A pagination token for obtaining the next page of results.
     * @param {Number} [maxResults] The maximum number of results to be returned.
     * @param {String} [syncSessionToken] A token containing a session ID, identity ID, and expiration.
     * @param {module:api/DefaultApi~listRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecordsResponse}
     */
    listRecords(identityPoolId, identityId, datasetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling listRecords");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling listRecords");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling listRecords");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId,
        'DatasetName': datasetName
      };
      let queryParams = {
        'lastSyncCount': opts['lastSyncCount'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'syncSessionToken': opts['syncSessionToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRecordsResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerDevice operation.
     * @callback module:api/DefaultApi~registerDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Registers a device to receive push sync notifications.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. Here, the ID of the pool that the identity belongs to.
     * @param {String} identityId The unique ID for this identity.
     * @param {module:model/RegisterDeviceRequest} registerDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterDeviceResponse}
     */
    registerDevice(identityPoolId, identityId, registerDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerDeviceRequest;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling registerDevice");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling registerDevice");
      }
      // verify the required parameter 'registerDeviceRequest' is set
      if (registerDeviceRequest === undefined || registerDeviceRequest === null) {
        throw new Error("Missing the required parameter 'registerDeviceRequest' when calling registerDevice");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterDeviceResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identity/{IdentityId}/device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCognitoEvents operation.
     * @callback module:api/DefaultApi~setCognitoEventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the AWS Lambda function for a given event type for an identity pool. This request only updates the key/value pair specified. Other key/values pairs are not updated. To remove a key value pair, pass a empty value for the particular key.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId The Cognito Identity Pool to use when configuring Cognito Events
     * @param {module:model/SetCognitoEventsRequest} setCognitoEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setCognitoEventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setCognitoEvents(identityPoolId, setCognitoEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = setCognitoEventsRequest;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling setCognitoEvents");
      }
      // verify the required parameter 'setCognitoEventsRequest' is set
      if (setCognitoEventsRequest === undefined || setCognitoEventsRequest === null) {
        throw new Error("Missing the required parameter 'setCognitoEventsRequest' when calling setCognitoEvents");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIdentityPoolConfiguration operation.
     * @callback module:api/DefaultApi~setIdentityPoolConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetIdentityPoolConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the necessary configuration for push sync.</p><p>This API can only be called with developer credentials. You cannot call this API with the temporary user credentials provided by Cognito Identity.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. This is the ID of the pool to modify.
     * @param {module:model/SetIdentityPoolConfigurationRequest} setIdentityPoolConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setIdentityPoolConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetIdentityPoolConfigurationResponse}
     */
    setIdentityPoolConfiguration(identityPoolId, setIdentityPoolConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = setIdentityPoolConfigurationRequest;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling setIdentityPoolConfiguration");
      }
      // verify the required parameter 'setIdentityPoolConfigurationRequest' is set
      if (setIdentityPoolConfigurationRequest === undefined || setIdentityPoolConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'setIdentityPoolConfigurationRequest' when calling setIdentityPoolConfiguration");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetIdentityPoolConfigurationResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToDataset operation.
     * @callback module:api/DefaultApi~subscribeToDatasetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Subscribes to receive notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which the identity belongs.
     * @param {String} identityId Unique ID for this identity.
     * @param {String} datasetName The name of the dataset to subcribe to.
     * @param {String} deviceId The unique ID generated for this device by Cognito.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~subscribeToDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    subscribeToDataset(identityPoolId, identityId, datasetName, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling subscribeToDataset");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling subscribeToDataset");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling subscribeToDataset");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling subscribeToDataset");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId,
        'DatasetName': datasetName,
        'DeviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeFromDataset operation.
     * @callback module:api/DefaultApi~unsubscribeFromDatasetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Unsubscribes from receiving notifications when a dataset is modified by another device.</p><p>This API can only be called with temporary credentials provided by Cognito Identity. You cannot call this API with developer credentials.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. The ID of the pool to which this identity belongs.
     * @param {String} identityId Unique ID for this identity.
     * @param {String} datasetName The name of the dataset from which to unsubcribe.
     * @param {String} deviceId The unique ID generated for this device by Cognito.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unsubscribeFromDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unsubscribeFromDataset(identityPoolId, identityId, datasetName, deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling unsubscribeFromDataset");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling unsubscribeFromDataset");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling unsubscribeFromDataset");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unsubscribeFromDataset");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId,
        'DatasetName': datasetName,
        'DeviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecords operation.
     * @callback module:api/DefaultApi~updateRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRecordsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Posts updates to records and adds and deletes records for a dataset and user.</p> <p>The sync count in the record patch is your last known sync count for that record. The server will reject an UpdateRecords request with a ResourceConflictException if you try to patch a record with a new value but a stale sync count.</p><p>For example, if the sync count on the server is 5 for a key called highScore and you try and submit a new highScore with sync count of 4, the request will be rejected. To obtain the current sync count for a record, call ListRecords. On a successful update of the record, the response returns the new sync count for that record. You should present that sync count the next time you try to update that same record. When the record does not exist, specify the sync count as 0.</p> <p>This API can be called with temporary user credentials provided by Cognito Identity or with developer credentials.</p>
     * @param {String} identityPoolId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} identityId A name-spaced GUID (for example, us-east-1:23EC4050-6AEA-7089-A2DD-08002EXAMPLE) created by Amazon Cognito. GUID generation is unique within a region.
     * @param {String} datasetName A string of up to 128 characters. Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (dash), and '.' (dot).
     * @param {module:model/UpdateRecordsRequest} updateRecordsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [xAmzClientContext] Intended to supply a device ID that will populate the lastModifiedBy field referenced in other methods. The ClientContext field is not yet implemented.
     * @param {module:api/DefaultApi~updateRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRecordsResponse}
     */
    updateRecords(identityPoolId, identityId, datasetName, updateRecordsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRecordsRequest;
      // verify the required parameter 'identityPoolId' is set
      if (identityPoolId === undefined || identityPoolId === null) {
        throw new Error("Missing the required parameter 'identityPoolId' when calling updateRecords");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling updateRecords");
      }
      // verify the required parameter 'datasetName' is set
      if (datasetName === undefined || datasetName === null) {
        throw new Error("Missing the required parameter 'datasetName' when calling updateRecords");
      }
      // verify the required parameter 'updateRecordsRequest' is set
      if (updateRecordsRequest === undefined || updateRecordsRequest === null) {
        throw new Error("Missing the required parameter 'updateRecordsRequest' when calling updateRecords");
      }

      let pathParams = {
        'IdentityPoolId': identityPoolId,
        'IdentityId': identityId,
        'DatasetName': datasetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amz-Client-Context': opts['xAmzClientContext']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRecordsResponse;
      return this.apiClient.callApi(
        '/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
