# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_id: str=None, identity_pool_id: str=None, last_modified_date: datetime=None, dataset_count: int=None, data_storage: int=None):
        """IdentityUsage - a model defined in OpenAPI

        :param identity_id: The identity_id of this IdentityUsage.
        :param identity_pool_id: The identity_pool_id of this IdentityUsage.
        :param last_modified_date: The last_modified_date of this IdentityUsage.
        :param dataset_count: The dataset_count of this IdentityUsage.
        :param data_storage: The data_storage of this IdentityUsage.
        """
        self.openapi_types = {
            'identity_id': str,
            'identity_pool_id': str,
            'last_modified_date': datetime,
            'dataset_count': int,
            'data_storage': int
        }

        self.attribute_map = {
            'identity_id': 'IdentityId',
            'identity_pool_id': 'IdentityPoolId',
            'last_modified_date': 'LastModifiedDate',
            'dataset_count': 'DatasetCount',
            'data_storage': 'DataStorage'
        }

        self._identity_id = identity_id
        self._identity_pool_id = identity_pool_id
        self._last_modified_date = last_modified_date
        self._dataset_count = dataset_count
        self._data_storage = data_storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityUsage of this IdentityUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_id(self):
        """Gets the identity_id of this IdentityUsage.


        :return: The identity_id of this IdentityUsage.
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this IdentityUsage.


        :param identity_id: The identity_id of this IdentityUsage.
        :type identity_id: str
        """

        self._identity_id = identity_id

    @property
    def identity_pool_id(self):
        """Gets the identity_pool_id of this IdentityUsage.


        :return: The identity_pool_id of this IdentityUsage.
        :rtype: str
        """
        return self._identity_pool_id

    @identity_pool_id.setter
    def identity_pool_id(self, identity_pool_id):
        """Sets the identity_pool_id of this IdentityUsage.


        :param identity_pool_id: The identity_pool_id of this IdentityUsage.
        :type identity_pool_id: str
        """

        self._identity_pool_id = identity_pool_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this IdentityUsage.


        :return: The last_modified_date of this IdentityUsage.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this IdentityUsage.


        :param last_modified_date: The last_modified_date of this IdentityUsage.
        :type last_modified_date: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def dataset_count(self):
        """Gets the dataset_count of this IdentityUsage.


        :return: The dataset_count of this IdentityUsage.
        :rtype: int
        """
        return self._dataset_count

    @dataset_count.setter
    def dataset_count(self, dataset_count):
        """Sets the dataset_count of this IdentityUsage.


        :param dataset_count: The dataset_count of this IdentityUsage.
        :type dataset_count: int
        """

        self._dataset_count = dataset_count

    @property
    def data_storage(self):
        """Gets the data_storage of this IdentityUsage.


        :return: The data_storage of this IdentityUsage.
        :rtype: int
        """
        return self._data_storage

    @data_storage.setter
    def data_storage(self, data_storage):
        """Sets the data_storage of this IdentityUsage.


        :param data_storage: The data_storage of this IdentityUsage.
        :type data_storage: int
        """

        self._data_storage = data_storage
