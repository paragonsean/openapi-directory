# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform: str=None, token: str=None):
        """RegisterDeviceRequest - a model defined in OpenAPI

        :param platform: The platform of this RegisterDeviceRequest.
        :param token: The token of this RegisterDeviceRequest.
        """
        self.openapi_types = {
            'platform': str,
            'token': str
        }

        self.attribute_map = {
            'platform': 'Platform',
            'token': 'Token'
        }

        self._platform = platform
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterDevice_request of this RegisterDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self):
        """Gets the platform of this RegisterDeviceRequest.

        The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).

        :return: The platform of this RegisterDeviceRequest.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this RegisterDeviceRequest.

        The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).

        :param platform: The platform of this RegisterDeviceRequest.
        :type platform: str
        """
        allowed_values = ["APNS", "APNS_SANDBOX", "GCM", "ADM"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def token(self):
        """Gets the token of this RegisterDeviceRequest.

        The push token.

        :return: The token of this RegisterDeviceRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this RegisterDeviceRequest.

        The push token.

        :param token: The token of this RegisterDeviceRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
