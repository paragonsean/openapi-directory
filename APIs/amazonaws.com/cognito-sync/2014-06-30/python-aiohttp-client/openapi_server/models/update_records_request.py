# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.record_patch import RecordPatch
from openapi_server import util


class UpdateRecordsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, record_patches: List[RecordPatch]=None, sync_session_token: str=None):
        """UpdateRecordsRequest - a model defined in OpenAPI

        :param device_id: The device_id of this UpdateRecordsRequest.
        :param record_patches: The record_patches of this UpdateRecordsRequest.
        :param sync_session_token: The sync_session_token of this UpdateRecordsRequest.
        """
        self.openapi_types = {
            'device_id': str,
            'record_patches': List[RecordPatch],
            'sync_session_token': str
        }

        self.attribute_map = {
            'device_id': 'DeviceId',
            'record_patches': 'RecordPatches',
            'sync_session_token': 'SyncSessionToken'
        }

        self._device_id = device_id
        self._record_patches = record_patches
        self._sync_session_token = sync_session_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRecordsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRecords_request of this UpdateRecordsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this UpdateRecordsRequest.

        The unique ID generated for this device by Cognito.

        :return: The device_id of this UpdateRecordsRequest.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this UpdateRecordsRequest.

        The unique ID generated for this device by Cognito.

        :param device_id: The device_id of this UpdateRecordsRequest.
        :type device_id: str
        """
        if device_id is not None and len(device_id) > 256:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `256`")
        if device_id is not None and len(device_id) < 1:
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `1`")

        self._device_id = device_id

    @property
    def record_patches(self):
        """Gets the record_patches of this UpdateRecordsRequest.

        A list of patch operations.

        :return: The record_patches of this UpdateRecordsRequest.
        :rtype: List[RecordPatch]
        """
        return self._record_patches

    @record_patches.setter
    def record_patches(self, record_patches):
        """Sets the record_patches of this UpdateRecordsRequest.

        A list of patch operations.

        :param record_patches: The record_patches of this UpdateRecordsRequest.
        :type record_patches: List[RecordPatch]
        """

        self._record_patches = record_patches

    @property
    def sync_session_token(self):
        """Gets the sync_session_token of this UpdateRecordsRequest.

        The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.

        :return: The sync_session_token of this UpdateRecordsRequest.
        :rtype: str
        """
        return self._sync_session_token

    @sync_session_token.setter
    def sync_session_token(self, sync_session_token):
        """Sets the sync_session_token of this UpdateRecordsRequest.

        The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.

        :param sync_session_token: The sync_session_token of this UpdateRecordsRequest.
        :type sync_session_token: str
        """
        if sync_session_token is None:
            raise ValueError("Invalid value for `sync_session_token`, must not be `None`")

        self._sync_session_token = sync_session_token
