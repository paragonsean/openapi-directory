/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput_InputProcessingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput_InputProcessingConfiguration::OAIInput_InputProcessingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput_InputProcessingConfiguration::OAIInput_InputProcessingConfiguration() {
    this->initializeModel();
}

OAIInput_InputProcessingConfiguration::~OAIInput_InputProcessingConfiguration() {}

void OAIInput_InputProcessingConfiguration::initializeModel() {

    m_input_lambda_processor_isSet = false;
    m_input_lambda_processor_isValid = false;
}

void OAIInput_InputProcessingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput_InputProcessingConfiguration::fromJsonObject(QJsonObject json) {

    m_input_lambda_processor_isValid = ::OpenAPI::fromJsonValue(m_input_lambda_processor, json[QString("InputLambdaProcessor")]);
    m_input_lambda_processor_isSet = !json[QString("InputLambdaProcessor")].isNull() && m_input_lambda_processor_isValid;
}

QString OAIInput_InputProcessingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput_InputProcessingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_input_lambda_processor.isSet()) {
        obj.insert(QString("InputLambdaProcessor"), ::OpenAPI::toJsonValue(m_input_lambda_processor));
    }
    return obj;
}

OAIInputProcessingConfiguration_InputLambdaProcessor OAIInput_InputProcessingConfiguration::getInputLambdaProcessor() const {
    return m_input_lambda_processor;
}
void OAIInput_InputProcessingConfiguration::setInputLambdaProcessor(const OAIInputProcessingConfiguration_InputLambdaProcessor &input_lambda_processor) {
    m_input_lambda_processor = input_lambda_processor;
    m_input_lambda_processor_isSet = true;
}

bool OAIInput_InputProcessingConfiguration::is_input_lambda_processor_Set() const{
    return m_input_lambda_processor_isSet;
}

bool OAIInput_InputProcessingConfiguration::is_input_lambda_processor_Valid() const{
    return m_input_lambda_processor_isValid;
}

bool OAIInput_InputProcessingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_lambda_processor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput_InputProcessingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_lambda_processor_isValid && true;
}

} // namespace OpenAPI
