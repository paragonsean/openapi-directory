/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutput::OAIOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutput::OAIOutput() {
    this->initializeModel();
}

OAIOutput::~OAIOutput() {}

void OAIOutput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_kinesis_streams_output_isSet = false;
    m_kinesis_streams_output_isValid = false;

    m_kinesis_firehose_output_isSet = false;
    m_kinesis_firehose_output_isValid = false;

    m_lambda_output_isSet = false;
    m_lambda_output_isValid = false;

    m_destination_schema_isSet = false;
    m_destination_schema_isValid = false;
}

void OAIOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_kinesis_streams_output_isValid = ::OpenAPI::fromJsonValue(m_kinesis_streams_output, json[QString("KinesisStreamsOutput")]);
    m_kinesis_streams_output_isSet = !json[QString("KinesisStreamsOutput")].isNull() && m_kinesis_streams_output_isValid;

    m_kinesis_firehose_output_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_output, json[QString("KinesisFirehoseOutput")]);
    m_kinesis_firehose_output_isSet = !json[QString("KinesisFirehoseOutput")].isNull() && m_kinesis_firehose_output_isValid;

    m_lambda_output_isValid = ::OpenAPI::fromJsonValue(m_lambda_output, json[QString("LambdaOutput")]);
    m_lambda_output_isSet = !json[QString("LambdaOutput")].isNull() && m_lambda_output_isValid;

    m_destination_schema_isValid = ::OpenAPI::fromJsonValue(m_destination_schema, json[QString("DestinationSchema")]);
    m_destination_schema_isSet = !json[QString("DestinationSchema")].isNull() && m_destination_schema_isValid;
}

QString OAIOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_kinesis_streams_output.isSet()) {
        obj.insert(QString("KinesisStreamsOutput"), ::OpenAPI::toJsonValue(m_kinesis_streams_output));
    }
    if (m_kinesis_firehose_output.isSet()) {
        obj.insert(QString("KinesisFirehoseOutput"), ::OpenAPI::toJsonValue(m_kinesis_firehose_output));
    }
    if (m_lambda_output.isSet()) {
        obj.insert(QString("LambdaOutput"), ::OpenAPI::toJsonValue(m_lambda_output));
    }
    if (m_destination_schema.isSet()) {
        obj.insert(QString("DestinationSchema"), ::OpenAPI::toJsonValue(m_destination_schema));
    }
    return obj;
}

QString OAIOutput::getName() const {
    return m_name;
}
void OAIOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOutput::is_name_Valid() const{
    return m_name_isValid;
}

OAIOutput_KinesisStreamsOutput OAIOutput::getKinesisStreamsOutput() const {
    return m_kinesis_streams_output;
}
void OAIOutput::setKinesisStreamsOutput(const OAIOutput_KinesisStreamsOutput &kinesis_streams_output) {
    m_kinesis_streams_output = kinesis_streams_output;
    m_kinesis_streams_output_isSet = true;
}

bool OAIOutput::is_kinesis_streams_output_Set() const{
    return m_kinesis_streams_output_isSet;
}

bool OAIOutput::is_kinesis_streams_output_Valid() const{
    return m_kinesis_streams_output_isValid;
}

OAIOutput_KinesisFirehoseOutput OAIOutput::getKinesisFirehoseOutput() const {
    return m_kinesis_firehose_output;
}
void OAIOutput::setKinesisFirehoseOutput(const OAIOutput_KinesisFirehoseOutput &kinesis_firehose_output) {
    m_kinesis_firehose_output = kinesis_firehose_output;
    m_kinesis_firehose_output_isSet = true;
}

bool OAIOutput::is_kinesis_firehose_output_Set() const{
    return m_kinesis_firehose_output_isSet;
}

bool OAIOutput::is_kinesis_firehose_output_Valid() const{
    return m_kinesis_firehose_output_isValid;
}

OAIOutput_LambdaOutput OAIOutput::getLambdaOutput() const {
    return m_lambda_output;
}
void OAIOutput::setLambdaOutput(const OAIOutput_LambdaOutput &lambda_output) {
    m_lambda_output = lambda_output;
    m_lambda_output_isSet = true;
}

bool OAIOutput::is_lambda_output_Set() const{
    return m_lambda_output_isSet;
}

bool OAIOutput::is_lambda_output_Valid() const{
    return m_lambda_output_isValid;
}

OAIOutput_DestinationSchema OAIOutput::getDestinationSchema() const {
    return m_destination_schema;
}
void OAIOutput::setDestinationSchema(const OAIOutput_DestinationSchema &destination_schema) {
    m_destination_schema = destination_schema;
    m_destination_schema_isSet = true;
}

bool OAIOutput::is_destination_schema_Set() const{
    return m_destination_schema_isSet;
}

bool OAIOutput::is_destination_schema_Valid() const{
    return m_destination_schema_isValid;
}

bool OAIOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_streams_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_destination_schema_isValid && true;
}

} // namespace OpenAPI
