/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationRequest_ApplicationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationRequest_ApplicationUpdate::OAIUpdateApplicationRequest_ApplicationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationRequest_ApplicationUpdate::OAIUpdateApplicationRequest_ApplicationUpdate() {
    this->initializeModel();
}

OAIUpdateApplicationRequest_ApplicationUpdate::~OAIUpdateApplicationRequest_ApplicationUpdate() {}

void OAIUpdateApplicationRequest_ApplicationUpdate::initializeModel() {

    m_input_updates_isSet = false;
    m_input_updates_isValid = false;

    m_application_code_update_isSet = false;
    m_application_code_update_isValid = false;

    m_output_updates_isSet = false;
    m_output_updates_isValid = false;

    m_reference_data_source_updates_isSet = false;
    m_reference_data_source_updates_isValid = false;

    m_cloud_watch_logging_option_updates_isSet = false;
    m_cloud_watch_logging_option_updates_isValid = false;
}

void OAIUpdateApplicationRequest_ApplicationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationRequest_ApplicationUpdate::fromJsonObject(QJsonObject json) {

    m_input_updates_isValid = ::OpenAPI::fromJsonValue(m_input_updates, json[QString("InputUpdates")]);
    m_input_updates_isSet = !json[QString("InputUpdates")].isNull() && m_input_updates_isValid;

    m_application_code_update_isValid = ::OpenAPI::fromJsonValue(m_application_code_update, json[QString("ApplicationCodeUpdate")]);
    m_application_code_update_isSet = !json[QString("ApplicationCodeUpdate")].isNull() && m_application_code_update_isValid;

    m_output_updates_isValid = ::OpenAPI::fromJsonValue(m_output_updates, json[QString("OutputUpdates")]);
    m_output_updates_isSet = !json[QString("OutputUpdates")].isNull() && m_output_updates_isValid;

    m_reference_data_source_updates_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source_updates, json[QString("ReferenceDataSourceUpdates")]);
    m_reference_data_source_updates_isSet = !json[QString("ReferenceDataSourceUpdates")].isNull() && m_reference_data_source_updates_isValid;

    m_cloud_watch_logging_option_updates_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_updates, json[QString("CloudWatchLoggingOptionUpdates")]);
    m_cloud_watch_logging_option_updates_isSet = !json[QString("CloudWatchLoggingOptionUpdates")].isNull() && m_cloud_watch_logging_option_updates_isValid;
}

QString OAIUpdateApplicationRequest_ApplicationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationRequest_ApplicationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_input_updates.isSet()) {
        obj.insert(QString("InputUpdates"), ::OpenAPI::toJsonValue(m_input_updates));
    }
    if (m_application_code_update_isSet) {
        obj.insert(QString("ApplicationCodeUpdate"), ::OpenAPI::toJsonValue(m_application_code_update));
    }
    if (m_output_updates.isSet()) {
        obj.insert(QString("OutputUpdates"), ::OpenAPI::toJsonValue(m_output_updates));
    }
    if (m_reference_data_source_updates.isSet()) {
        obj.insert(QString("ReferenceDataSourceUpdates"), ::OpenAPI::toJsonValue(m_reference_data_source_updates));
    }
    if (m_cloud_watch_logging_option_updates.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptionUpdates"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_updates));
    }
    return obj;
}

QList OAIUpdateApplicationRequest_ApplicationUpdate::getInputUpdates() const {
    return m_input_updates;
}
void OAIUpdateApplicationRequest_ApplicationUpdate::setInputUpdates(const QList &input_updates) {
    m_input_updates = input_updates;
    m_input_updates_isSet = true;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_input_updates_Set() const{
    return m_input_updates_isSet;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_input_updates_Valid() const{
    return m_input_updates_isValid;
}

QString OAIUpdateApplicationRequest_ApplicationUpdate::getApplicationCodeUpdate() const {
    return m_application_code_update;
}
void OAIUpdateApplicationRequest_ApplicationUpdate::setApplicationCodeUpdate(const QString &application_code_update) {
    m_application_code_update = application_code_update;
    m_application_code_update_isSet = true;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_application_code_update_Set() const{
    return m_application_code_update_isSet;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_application_code_update_Valid() const{
    return m_application_code_update_isValid;
}

QList OAIUpdateApplicationRequest_ApplicationUpdate::getOutputUpdates() const {
    return m_output_updates;
}
void OAIUpdateApplicationRequest_ApplicationUpdate::setOutputUpdates(const QList &output_updates) {
    m_output_updates = output_updates;
    m_output_updates_isSet = true;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_output_updates_Set() const{
    return m_output_updates_isSet;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_output_updates_Valid() const{
    return m_output_updates_isValid;
}

QList OAIUpdateApplicationRequest_ApplicationUpdate::getReferenceDataSourceUpdates() const {
    return m_reference_data_source_updates;
}
void OAIUpdateApplicationRequest_ApplicationUpdate::setReferenceDataSourceUpdates(const QList &reference_data_source_updates) {
    m_reference_data_source_updates = reference_data_source_updates;
    m_reference_data_source_updates_isSet = true;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_reference_data_source_updates_Set() const{
    return m_reference_data_source_updates_isSet;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_reference_data_source_updates_Valid() const{
    return m_reference_data_source_updates_isValid;
}

QList OAIUpdateApplicationRequest_ApplicationUpdate::getCloudWatchLoggingOptionUpdates() const {
    return m_cloud_watch_logging_option_updates;
}
void OAIUpdateApplicationRequest_ApplicationUpdate::setCloudWatchLoggingOptionUpdates(const QList &cloud_watch_logging_option_updates) {
    m_cloud_watch_logging_option_updates = cloud_watch_logging_option_updates;
    m_cloud_watch_logging_option_updates_isSet = true;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_cloud_watch_logging_option_updates_Set() const{
    return m_cloud_watch_logging_option_updates_isSet;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::is_cloud_watch_logging_option_updates_Valid() const{
    return m_cloud_watch_logging_option_updates_isValid;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_code_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_option_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationRequest_ApplicationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
