/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDescription_InputSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDescription_InputSchema::OAIInputDescription_InputSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDescription_InputSchema::OAIInputDescription_InputSchema() {
    this->initializeModel();
}

OAIInputDescription_InputSchema::~OAIInputDescription_InputSchema() {}

void OAIInputDescription_InputSchema::initializeModel() {

    m_record_format_isSet = false;
    m_record_format_isValid = false;

    m_record_encoding_isSet = false;
    m_record_encoding_isValid = false;

    m_record_columns_isSet = false;
    m_record_columns_isValid = false;
}

void OAIInputDescription_InputSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDescription_InputSchema::fromJsonObject(QJsonObject json) {

    m_record_format_isValid = ::OpenAPI::fromJsonValue(m_record_format, json[QString("RecordFormat")]);
    m_record_format_isSet = !json[QString("RecordFormat")].isNull() && m_record_format_isValid;

    m_record_encoding_isValid = ::OpenAPI::fromJsonValue(m_record_encoding, json[QString("RecordEncoding")]);
    m_record_encoding_isSet = !json[QString("RecordEncoding")].isNull() && m_record_encoding_isValid;

    m_record_columns_isValid = ::OpenAPI::fromJsonValue(m_record_columns, json[QString("RecordColumns")]);
    m_record_columns_isSet = !json[QString("RecordColumns")].isNull() && m_record_columns_isValid;
}

QString OAIInputDescription_InputSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDescription_InputSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_record_format.isSet()) {
        obj.insert(QString("RecordFormat"), ::OpenAPI::toJsonValue(m_record_format));
    }
    if (m_record_encoding_isSet) {
        obj.insert(QString("RecordEncoding"), ::OpenAPI::toJsonValue(m_record_encoding));
    }
    if (m_record_columns.isSet()) {
        obj.insert(QString("RecordColumns"), ::OpenAPI::toJsonValue(m_record_columns));
    }
    return obj;
}

OAISourceSchema_RecordFormat OAIInputDescription_InputSchema::getRecordFormat() const {
    return m_record_format;
}
void OAIInputDescription_InputSchema::setRecordFormat(const OAISourceSchema_RecordFormat &record_format) {
    m_record_format = record_format;
    m_record_format_isSet = true;
}

bool OAIInputDescription_InputSchema::is_record_format_Set() const{
    return m_record_format_isSet;
}

bool OAIInputDescription_InputSchema::is_record_format_Valid() const{
    return m_record_format_isValid;
}

QString OAIInputDescription_InputSchema::getRecordEncoding() const {
    return m_record_encoding;
}
void OAIInputDescription_InputSchema::setRecordEncoding(const QString &record_encoding) {
    m_record_encoding = record_encoding;
    m_record_encoding_isSet = true;
}

bool OAIInputDescription_InputSchema::is_record_encoding_Set() const{
    return m_record_encoding_isSet;
}

bool OAIInputDescription_InputSchema::is_record_encoding_Valid() const{
    return m_record_encoding_isValid;
}

QList OAIInputDescription_InputSchema::getRecordColumns() const {
    return m_record_columns;
}
void OAIInputDescription_InputSchema::setRecordColumns(const QList &record_columns) {
    m_record_columns = record_columns;
    m_record_columns_isSet = true;
}

bool OAIInputDescription_InputSchema::is_record_columns_Set() const{
    return m_record_columns_isSet;
}

bool OAIInputDescription_InputSchema::is_record_columns_Valid() const{
    return m_record_columns_isValid;
}

bool OAIInputDescription_InputSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDescription_InputSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_format_isValid && m_record_columns_isValid && true;
}

} // namespace OpenAPI
