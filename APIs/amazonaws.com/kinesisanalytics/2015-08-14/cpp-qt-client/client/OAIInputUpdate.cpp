/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputUpdate::OAIInputUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputUpdate::OAIInputUpdate() {
    this->initializeModel();
}

OAIInputUpdate::~OAIInputUpdate() {}

void OAIInputUpdate::initializeModel() {

    m_input_id_isSet = false;
    m_input_id_isValid = false;

    m_name_prefix_update_isSet = false;
    m_name_prefix_update_isValid = false;

    m_input_processing_configuration_update_isSet = false;
    m_input_processing_configuration_update_isValid = false;

    m_kinesis_streams_input_update_isSet = false;
    m_kinesis_streams_input_update_isValid = false;

    m_kinesis_firehose_input_update_isSet = false;
    m_kinesis_firehose_input_update_isValid = false;

    m_input_schema_update_isSet = false;
    m_input_schema_update_isValid = false;

    m_input_parallelism_update_isSet = false;
    m_input_parallelism_update_isValid = false;
}

void OAIInputUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputUpdate::fromJsonObject(QJsonObject json) {

    m_input_id_isValid = ::OpenAPI::fromJsonValue(m_input_id, json[QString("InputId")]);
    m_input_id_isSet = !json[QString("InputId")].isNull() && m_input_id_isValid;

    m_name_prefix_update_isValid = ::OpenAPI::fromJsonValue(m_name_prefix_update, json[QString("NamePrefixUpdate")]);
    m_name_prefix_update_isSet = !json[QString("NamePrefixUpdate")].isNull() && m_name_prefix_update_isValid;

    m_input_processing_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_input_processing_configuration_update, json[QString("InputProcessingConfigurationUpdate")]);
    m_input_processing_configuration_update_isSet = !json[QString("InputProcessingConfigurationUpdate")].isNull() && m_input_processing_configuration_update_isValid;

    m_kinesis_streams_input_update_isValid = ::OpenAPI::fromJsonValue(m_kinesis_streams_input_update, json[QString("KinesisStreamsInputUpdate")]);
    m_kinesis_streams_input_update_isSet = !json[QString("KinesisStreamsInputUpdate")].isNull() && m_kinesis_streams_input_update_isValid;

    m_kinesis_firehose_input_update_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_input_update, json[QString("KinesisFirehoseInputUpdate")]);
    m_kinesis_firehose_input_update_isSet = !json[QString("KinesisFirehoseInputUpdate")].isNull() && m_kinesis_firehose_input_update_isValid;

    m_input_schema_update_isValid = ::OpenAPI::fromJsonValue(m_input_schema_update, json[QString("InputSchemaUpdate")]);
    m_input_schema_update_isSet = !json[QString("InputSchemaUpdate")].isNull() && m_input_schema_update_isValid;

    m_input_parallelism_update_isValid = ::OpenAPI::fromJsonValue(m_input_parallelism_update, json[QString("InputParallelismUpdate")]);
    m_input_parallelism_update_isSet = !json[QString("InputParallelismUpdate")].isNull() && m_input_parallelism_update_isValid;
}

QString OAIInputUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_input_id_isSet) {
        obj.insert(QString("InputId"), ::OpenAPI::toJsonValue(m_input_id));
    }
    if (m_name_prefix_update_isSet) {
        obj.insert(QString("NamePrefixUpdate"), ::OpenAPI::toJsonValue(m_name_prefix_update));
    }
    if (m_input_processing_configuration_update.isSet()) {
        obj.insert(QString("InputProcessingConfigurationUpdate"), ::OpenAPI::toJsonValue(m_input_processing_configuration_update));
    }
    if (m_kinesis_streams_input_update.isSet()) {
        obj.insert(QString("KinesisStreamsInputUpdate"), ::OpenAPI::toJsonValue(m_kinesis_streams_input_update));
    }
    if (m_kinesis_firehose_input_update.isSet()) {
        obj.insert(QString("KinesisFirehoseInputUpdate"), ::OpenAPI::toJsonValue(m_kinesis_firehose_input_update));
    }
    if (m_input_schema_update.isSet()) {
        obj.insert(QString("InputSchemaUpdate"), ::OpenAPI::toJsonValue(m_input_schema_update));
    }
    if (m_input_parallelism_update.isSet()) {
        obj.insert(QString("InputParallelismUpdate"), ::OpenAPI::toJsonValue(m_input_parallelism_update));
    }
    return obj;
}

QString OAIInputUpdate::getInputId() const {
    return m_input_id;
}
void OAIInputUpdate::setInputId(const QString &input_id) {
    m_input_id = input_id;
    m_input_id_isSet = true;
}

bool OAIInputUpdate::is_input_id_Set() const{
    return m_input_id_isSet;
}

bool OAIInputUpdate::is_input_id_Valid() const{
    return m_input_id_isValid;
}

QString OAIInputUpdate::getNamePrefixUpdate() const {
    return m_name_prefix_update;
}
void OAIInputUpdate::setNamePrefixUpdate(const QString &name_prefix_update) {
    m_name_prefix_update = name_prefix_update;
    m_name_prefix_update_isSet = true;
}

bool OAIInputUpdate::is_name_prefix_update_Set() const{
    return m_name_prefix_update_isSet;
}

bool OAIInputUpdate::is_name_prefix_update_Valid() const{
    return m_name_prefix_update_isValid;
}

OAIInputUpdate_InputProcessingConfigurationUpdate OAIInputUpdate::getInputProcessingConfigurationUpdate() const {
    return m_input_processing_configuration_update;
}
void OAIInputUpdate::setInputProcessingConfigurationUpdate(const OAIInputUpdate_InputProcessingConfigurationUpdate &input_processing_configuration_update) {
    m_input_processing_configuration_update = input_processing_configuration_update;
    m_input_processing_configuration_update_isSet = true;
}

bool OAIInputUpdate::is_input_processing_configuration_update_Set() const{
    return m_input_processing_configuration_update_isSet;
}

bool OAIInputUpdate::is_input_processing_configuration_update_Valid() const{
    return m_input_processing_configuration_update_isValid;
}

OAIInputUpdate_KinesisStreamsInputUpdate OAIInputUpdate::getKinesisStreamsInputUpdate() const {
    return m_kinesis_streams_input_update;
}
void OAIInputUpdate::setKinesisStreamsInputUpdate(const OAIInputUpdate_KinesisStreamsInputUpdate &kinesis_streams_input_update) {
    m_kinesis_streams_input_update = kinesis_streams_input_update;
    m_kinesis_streams_input_update_isSet = true;
}

bool OAIInputUpdate::is_kinesis_streams_input_update_Set() const{
    return m_kinesis_streams_input_update_isSet;
}

bool OAIInputUpdate::is_kinesis_streams_input_update_Valid() const{
    return m_kinesis_streams_input_update_isValid;
}

OAIInputUpdate_KinesisFirehoseInputUpdate OAIInputUpdate::getKinesisFirehoseInputUpdate() const {
    return m_kinesis_firehose_input_update;
}
void OAIInputUpdate::setKinesisFirehoseInputUpdate(const OAIInputUpdate_KinesisFirehoseInputUpdate &kinesis_firehose_input_update) {
    m_kinesis_firehose_input_update = kinesis_firehose_input_update;
    m_kinesis_firehose_input_update_isSet = true;
}

bool OAIInputUpdate::is_kinesis_firehose_input_update_Set() const{
    return m_kinesis_firehose_input_update_isSet;
}

bool OAIInputUpdate::is_kinesis_firehose_input_update_Valid() const{
    return m_kinesis_firehose_input_update_isValid;
}

OAIInputUpdate_InputSchemaUpdate OAIInputUpdate::getInputSchemaUpdate() const {
    return m_input_schema_update;
}
void OAIInputUpdate::setInputSchemaUpdate(const OAIInputUpdate_InputSchemaUpdate &input_schema_update) {
    m_input_schema_update = input_schema_update;
    m_input_schema_update_isSet = true;
}

bool OAIInputUpdate::is_input_schema_update_Set() const{
    return m_input_schema_update_isSet;
}

bool OAIInputUpdate::is_input_schema_update_Valid() const{
    return m_input_schema_update_isValid;
}

OAIInputUpdate_InputParallelismUpdate OAIInputUpdate::getInputParallelismUpdate() const {
    return m_input_parallelism_update;
}
void OAIInputUpdate::setInputParallelismUpdate(const OAIInputUpdate_InputParallelismUpdate &input_parallelism_update) {
    m_input_parallelism_update = input_parallelism_update;
    m_input_parallelism_update_isSet = true;
}

bool OAIInputUpdate::is_input_parallelism_update_Set() const{
    return m_input_parallelism_update_isSet;
}

bool OAIInputUpdate::is_input_parallelism_update_Valid() const{
    return m_input_parallelism_update_isValid;
}

bool OAIInputUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_prefix_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_processing_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_streams_input_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_input_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_schema_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_parallelism_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_id_isValid && true;
}

} // namespace OpenAPI
