/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateApplicationRequest.h
 *
 * TBD
 */

#ifndef OAICreateApplicationRequest_H
#define OAICreateApplicationRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateApplicationRequest : public OAIObject {
public:
    OAICreateApplicationRequest();
    OAICreateApplicationRequest(QString json);
    ~OAICreateApplicationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationName() const;
    void setApplicationName(const QString &application_name);
    bool is_application_name_Set() const;
    bool is_application_name_Valid() const;

    QString getApplicationDescription() const;
    void setApplicationDescription(const QString &application_description);
    bool is_application_description_Set() const;
    bool is_application_description_Valid() const;

    QList getInputs() const;
    void setInputs(const QList &inputs);
    bool is_inputs_Set() const;
    bool is_inputs_Valid() const;

    QList getOutputs() const;
    void setOutputs(const QList &outputs);
    bool is_outputs_Set() const;
    bool is_outputs_Valid() const;

    QList getCloudWatchLoggingOptions() const;
    void setCloudWatchLoggingOptions(const QList &cloud_watch_logging_options);
    bool is_cloud_watch_logging_options_Set() const;
    bool is_cloud_watch_logging_options_Valid() const;

    QString getApplicationCode() const;
    void setApplicationCode(const QString &application_code);
    bool is_application_code_Set() const;
    bool is_application_code_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_name;
    bool m_application_name_isSet;
    bool m_application_name_isValid;

    QString m_application_description;
    bool m_application_description_isSet;
    bool m_application_description_isValid;

    QList m_inputs;
    bool m_inputs_isSet;
    bool m_inputs_isValid;

    QList m_outputs;
    bool m_outputs_isSet;
    bool m_outputs_isValid;

    QList m_cloud_watch_logging_options;
    bool m_cloud_watch_logging_options_isSet;
    bool m_cloud_watch_logging_options_isValid;

    QString m_application_code;
    bool m_application_code_isSet;
    bool m_application_code_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateApplicationRequest)

#endif // OAICreateApplicationRequest_H
