/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInput.h
 *
 * When you configure the application input, you specify the streaming source, the in-application stream name that is created, and the mapping between the two. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html\&quot;&gt;Configuring Application Input&lt;/a&gt;. 
 */

#ifndef OAIInput_H
#define OAIInput_H

#include <QJsonObject>

#include "OAIInput_InputParallelism.h"
#include "OAIInput_InputProcessingConfiguration.h"
#include "OAIInput_InputSchema.h"
#include "OAIInput_KinesisFirehoseInput.h"
#include "OAIInput_KinesisStreamsInput.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInput_InputProcessingConfiguration;
class OAIInput_KinesisStreamsInput;
class OAIInput_KinesisFirehoseInput;
class OAIInput_InputParallelism;
class OAIInput_InputSchema;

class OAIInput : public OAIObject {
public:
    OAIInput();
    OAIInput(QString json);
    ~OAIInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNamePrefix() const;
    void setNamePrefix(const QString &name_prefix);
    bool is_name_prefix_Set() const;
    bool is_name_prefix_Valid() const;

    OAIInput_InputProcessingConfiguration getInputProcessingConfiguration() const;
    void setInputProcessingConfiguration(const OAIInput_InputProcessingConfiguration &input_processing_configuration);
    bool is_input_processing_configuration_Set() const;
    bool is_input_processing_configuration_Valid() const;

    OAIInput_KinesisStreamsInput getKinesisStreamsInput() const;
    void setKinesisStreamsInput(const OAIInput_KinesisStreamsInput &kinesis_streams_input);
    bool is_kinesis_streams_input_Set() const;
    bool is_kinesis_streams_input_Valid() const;

    OAIInput_KinesisFirehoseInput getKinesisFirehoseInput() const;
    void setKinesisFirehoseInput(const OAIInput_KinesisFirehoseInput &kinesis_firehose_input);
    bool is_kinesis_firehose_input_Set() const;
    bool is_kinesis_firehose_input_Valid() const;

    OAIInput_InputParallelism getInputParallelism() const;
    void setInputParallelism(const OAIInput_InputParallelism &input_parallelism);
    bool is_input_parallelism_Set() const;
    bool is_input_parallelism_Valid() const;

    OAIInput_InputSchema getInputSchema() const;
    void setInputSchema(const OAIInput_InputSchema &input_schema);
    bool is_input_schema_Set() const;
    bool is_input_schema_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name_prefix;
    bool m_name_prefix_isSet;
    bool m_name_prefix_isValid;

    OAIInput_InputProcessingConfiguration m_input_processing_configuration;
    bool m_input_processing_configuration_isSet;
    bool m_input_processing_configuration_isValid;

    OAIInput_KinesisStreamsInput m_kinesis_streams_input;
    bool m_kinesis_streams_input_isSet;
    bool m_kinesis_streams_input_isValid;

    OAIInput_KinesisFirehoseInput m_kinesis_firehose_input;
    bool m_kinesis_firehose_input_isSet;
    bool m_kinesis_firehose_input_isValid;

    OAIInput_InputParallelism m_input_parallelism;
    bool m_input_parallelism_isSet;
    bool m_input_parallelism_isValid;

    OAIInput_InputSchema m_input_schema;
    bool m_input_schema_isSet;
    bool m_input_schema_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInput)

#endif // OAIInput_H
