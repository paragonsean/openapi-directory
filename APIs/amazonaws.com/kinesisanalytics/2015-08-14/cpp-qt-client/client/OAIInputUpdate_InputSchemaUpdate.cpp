/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputUpdate_InputSchemaUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputUpdate_InputSchemaUpdate::OAIInputUpdate_InputSchemaUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputUpdate_InputSchemaUpdate::OAIInputUpdate_InputSchemaUpdate() {
    this->initializeModel();
}

OAIInputUpdate_InputSchemaUpdate::~OAIInputUpdate_InputSchemaUpdate() {}

void OAIInputUpdate_InputSchemaUpdate::initializeModel() {

    m_record_format_update_isSet = false;
    m_record_format_update_isValid = false;

    m_record_encoding_update_isSet = false;
    m_record_encoding_update_isValid = false;

    m_record_column_updates_isSet = false;
    m_record_column_updates_isValid = false;
}

void OAIInputUpdate_InputSchemaUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputUpdate_InputSchemaUpdate::fromJsonObject(QJsonObject json) {

    m_record_format_update_isValid = ::OpenAPI::fromJsonValue(m_record_format_update, json[QString("RecordFormatUpdate")]);
    m_record_format_update_isSet = !json[QString("RecordFormatUpdate")].isNull() && m_record_format_update_isValid;

    m_record_encoding_update_isValid = ::OpenAPI::fromJsonValue(m_record_encoding_update, json[QString("RecordEncodingUpdate")]);
    m_record_encoding_update_isSet = !json[QString("RecordEncodingUpdate")].isNull() && m_record_encoding_update_isValid;

    m_record_column_updates_isValid = ::OpenAPI::fromJsonValue(m_record_column_updates, json[QString("RecordColumnUpdates")]);
    m_record_column_updates_isSet = !json[QString("RecordColumnUpdates")].isNull() && m_record_column_updates_isValid;
}

QString OAIInputUpdate_InputSchemaUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputUpdate_InputSchemaUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_record_format_update.isSet()) {
        obj.insert(QString("RecordFormatUpdate"), ::OpenAPI::toJsonValue(m_record_format_update));
    }
    if (m_record_encoding_update_isSet) {
        obj.insert(QString("RecordEncodingUpdate"), ::OpenAPI::toJsonValue(m_record_encoding_update));
    }
    if (m_record_column_updates.isSet()) {
        obj.insert(QString("RecordColumnUpdates"), ::OpenAPI::toJsonValue(m_record_column_updates));
    }
    return obj;
}

OAISourceSchema_RecordFormat OAIInputUpdate_InputSchemaUpdate::getRecordFormatUpdate() const {
    return m_record_format_update;
}
void OAIInputUpdate_InputSchemaUpdate::setRecordFormatUpdate(const OAISourceSchema_RecordFormat &record_format_update) {
    m_record_format_update = record_format_update;
    m_record_format_update_isSet = true;
}

bool OAIInputUpdate_InputSchemaUpdate::is_record_format_update_Set() const{
    return m_record_format_update_isSet;
}

bool OAIInputUpdate_InputSchemaUpdate::is_record_format_update_Valid() const{
    return m_record_format_update_isValid;
}

QString OAIInputUpdate_InputSchemaUpdate::getRecordEncodingUpdate() const {
    return m_record_encoding_update;
}
void OAIInputUpdate_InputSchemaUpdate::setRecordEncodingUpdate(const QString &record_encoding_update) {
    m_record_encoding_update = record_encoding_update;
    m_record_encoding_update_isSet = true;
}

bool OAIInputUpdate_InputSchemaUpdate::is_record_encoding_update_Set() const{
    return m_record_encoding_update_isSet;
}

bool OAIInputUpdate_InputSchemaUpdate::is_record_encoding_update_Valid() const{
    return m_record_encoding_update_isValid;
}

QList OAIInputUpdate_InputSchemaUpdate::getRecordColumnUpdates() const {
    return m_record_column_updates;
}
void OAIInputUpdate_InputSchemaUpdate::setRecordColumnUpdates(const QList &record_column_updates) {
    m_record_column_updates = record_column_updates;
    m_record_column_updates_isSet = true;
}

bool OAIInputUpdate_InputSchemaUpdate::is_record_column_updates_Set() const{
    return m_record_column_updates_isSet;
}

bool OAIInputUpdate_InputSchemaUpdate::is_record_column_updates_Valid() const{
    return m_record_column_updates_isValid;
}

bool OAIInputUpdate_InputSchemaUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record_format_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_encoding_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_column_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputUpdate_InputSchemaUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
