/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationStatus::OAIApplicationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationStatus::OAIApplicationStatus() {
    this->initializeModel();
}

OAIApplicationStatus::~OAIApplicationStatus() {}

void OAIApplicationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIApplicationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIApplicationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationStatus::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationStatus::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIApplicationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIApplicationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIApplicationStatus::DELETING:
            val = "DELETING";
            break;
        case eOAIApplicationStatus::STARTING:
            val = "STARTING";
            break;
        case eOAIApplicationStatus::STOPPING:
            val = "STOPPING";
            break;
        case eOAIApplicationStatus::READY:
            val = "READY";
            break;
        case eOAIApplicationStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAIApplicationStatus::UPDATING:
            val = "UPDATING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIApplicationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIApplicationStatus::eOAIApplicationStatus OAIApplicationStatus::getValue() const {
    return m_value;
}

void OAIApplicationStatus::setValue(const OAIApplicationStatus::eOAIApplicationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIApplicationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIApplicationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
