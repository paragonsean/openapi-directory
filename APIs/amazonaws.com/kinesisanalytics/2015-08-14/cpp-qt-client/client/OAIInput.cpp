/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput::OAIInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput::OAIInput() {
    this->initializeModel();
}

OAIInput::~OAIInput() {}

void OAIInput::initializeModel() {

    m_name_prefix_isSet = false;
    m_name_prefix_isValid = false;

    m_input_processing_configuration_isSet = false;
    m_input_processing_configuration_isValid = false;

    m_kinesis_streams_input_isSet = false;
    m_kinesis_streams_input_isValid = false;

    m_kinesis_firehose_input_isSet = false;
    m_kinesis_firehose_input_isValid = false;

    m_input_parallelism_isSet = false;
    m_input_parallelism_isValid = false;

    m_input_schema_isSet = false;
    m_input_schema_isValid = false;
}

void OAIInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput::fromJsonObject(QJsonObject json) {

    m_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_name_prefix, json[QString("NamePrefix")]);
    m_name_prefix_isSet = !json[QString("NamePrefix")].isNull() && m_name_prefix_isValid;

    m_input_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_input_processing_configuration, json[QString("InputProcessingConfiguration")]);
    m_input_processing_configuration_isSet = !json[QString("InputProcessingConfiguration")].isNull() && m_input_processing_configuration_isValid;

    m_kinesis_streams_input_isValid = ::OpenAPI::fromJsonValue(m_kinesis_streams_input, json[QString("KinesisStreamsInput")]);
    m_kinesis_streams_input_isSet = !json[QString("KinesisStreamsInput")].isNull() && m_kinesis_streams_input_isValid;

    m_kinesis_firehose_input_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_input, json[QString("KinesisFirehoseInput")]);
    m_kinesis_firehose_input_isSet = !json[QString("KinesisFirehoseInput")].isNull() && m_kinesis_firehose_input_isValid;

    m_input_parallelism_isValid = ::OpenAPI::fromJsonValue(m_input_parallelism, json[QString("InputParallelism")]);
    m_input_parallelism_isSet = !json[QString("InputParallelism")].isNull() && m_input_parallelism_isValid;

    m_input_schema_isValid = ::OpenAPI::fromJsonValue(m_input_schema, json[QString("InputSchema")]);
    m_input_schema_isSet = !json[QString("InputSchema")].isNull() && m_input_schema_isValid;
}

QString OAIInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_prefix_isSet) {
        obj.insert(QString("NamePrefix"), ::OpenAPI::toJsonValue(m_name_prefix));
    }
    if (m_input_processing_configuration.isSet()) {
        obj.insert(QString("InputProcessingConfiguration"), ::OpenAPI::toJsonValue(m_input_processing_configuration));
    }
    if (m_kinesis_streams_input.isSet()) {
        obj.insert(QString("KinesisStreamsInput"), ::OpenAPI::toJsonValue(m_kinesis_streams_input));
    }
    if (m_kinesis_firehose_input.isSet()) {
        obj.insert(QString("KinesisFirehoseInput"), ::OpenAPI::toJsonValue(m_kinesis_firehose_input));
    }
    if (m_input_parallelism.isSet()) {
        obj.insert(QString("InputParallelism"), ::OpenAPI::toJsonValue(m_input_parallelism));
    }
    if (m_input_schema.isSet()) {
        obj.insert(QString("InputSchema"), ::OpenAPI::toJsonValue(m_input_schema));
    }
    return obj;
}

QString OAIInput::getNamePrefix() const {
    return m_name_prefix;
}
void OAIInput::setNamePrefix(const QString &name_prefix) {
    m_name_prefix = name_prefix;
    m_name_prefix_isSet = true;
}

bool OAIInput::is_name_prefix_Set() const{
    return m_name_prefix_isSet;
}

bool OAIInput::is_name_prefix_Valid() const{
    return m_name_prefix_isValid;
}

OAIInput_InputProcessingConfiguration OAIInput::getInputProcessingConfiguration() const {
    return m_input_processing_configuration;
}
void OAIInput::setInputProcessingConfiguration(const OAIInput_InputProcessingConfiguration &input_processing_configuration) {
    m_input_processing_configuration = input_processing_configuration;
    m_input_processing_configuration_isSet = true;
}

bool OAIInput::is_input_processing_configuration_Set() const{
    return m_input_processing_configuration_isSet;
}

bool OAIInput::is_input_processing_configuration_Valid() const{
    return m_input_processing_configuration_isValid;
}

OAIInput_KinesisStreamsInput OAIInput::getKinesisStreamsInput() const {
    return m_kinesis_streams_input;
}
void OAIInput::setKinesisStreamsInput(const OAIInput_KinesisStreamsInput &kinesis_streams_input) {
    m_kinesis_streams_input = kinesis_streams_input;
    m_kinesis_streams_input_isSet = true;
}

bool OAIInput::is_kinesis_streams_input_Set() const{
    return m_kinesis_streams_input_isSet;
}

bool OAIInput::is_kinesis_streams_input_Valid() const{
    return m_kinesis_streams_input_isValid;
}

OAIInput_KinesisFirehoseInput OAIInput::getKinesisFirehoseInput() const {
    return m_kinesis_firehose_input;
}
void OAIInput::setKinesisFirehoseInput(const OAIInput_KinesisFirehoseInput &kinesis_firehose_input) {
    m_kinesis_firehose_input = kinesis_firehose_input;
    m_kinesis_firehose_input_isSet = true;
}

bool OAIInput::is_kinesis_firehose_input_Set() const{
    return m_kinesis_firehose_input_isSet;
}

bool OAIInput::is_kinesis_firehose_input_Valid() const{
    return m_kinesis_firehose_input_isValid;
}

OAIInput_InputParallelism OAIInput::getInputParallelism() const {
    return m_input_parallelism;
}
void OAIInput::setInputParallelism(const OAIInput_InputParallelism &input_parallelism) {
    m_input_parallelism = input_parallelism;
    m_input_parallelism_isSet = true;
}

bool OAIInput::is_input_parallelism_Set() const{
    return m_input_parallelism_isSet;
}

bool OAIInput::is_input_parallelism_Valid() const{
    return m_input_parallelism_isValid;
}

OAIInput_InputSchema OAIInput::getInputSchema() const {
    return m_input_schema;
}
void OAIInput::setInputSchema(const OAIInput_InputSchema &input_schema) {
    m_input_schema = input_schema;
    m_input_schema_isSet = true;
}

bool OAIInput::is_input_schema_Set() const{
    return m_input_schema_isSet;
}

bool OAIInput::is_input_schema_Valid() const{
    return m_input_schema_isValid;
}

bool OAIInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_streams_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_parallelism.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_prefix_isValid && m_input_schema_isValid && true;
}

} // namespace OpenAPI
