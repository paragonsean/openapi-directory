/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceDataSourceDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceDataSourceDescription::OAIReferenceDataSourceDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceDataSourceDescription::OAIReferenceDataSourceDescription() {
    this->initializeModel();
}

OAIReferenceDataSourceDescription::~OAIReferenceDataSourceDescription() {}

void OAIReferenceDataSourceDescription::initializeModel() {

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_s3_reference_data_source_description_isSet = false;
    m_s3_reference_data_source_description_isValid = false;

    m_reference_schema_isSet = false;
    m_reference_schema_isValid = false;
}

void OAIReferenceDataSourceDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceDataSourceDescription::fromJsonObject(QJsonObject json) {

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_s3_reference_data_source_description_isValid = ::OpenAPI::fromJsonValue(m_s3_reference_data_source_description, json[QString("S3ReferenceDataSourceDescription")]);
    m_s3_reference_data_source_description_isSet = !json[QString("S3ReferenceDataSourceDescription")].isNull() && m_s3_reference_data_source_description_isValid;

    m_reference_schema_isValid = ::OpenAPI::fromJsonValue(m_reference_schema, json[QString("ReferenceSchema")]);
    m_reference_schema_isSet = !json[QString("ReferenceSchema")].isNull() && m_reference_schema_isValid;
}

QString OAIReferenceDataSourceDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceDataSourceDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_s3_reference_data_source_description.isSet()) {
        obj.insert(QString("S3ReferenceDataSourceDescription"), ::OpenAPI::toJsonValue(m_s3_reference_data_source_description));
    }
    if (m_reference_schema.isSet()) {
        obj.insert(QString("ReferenceSchema"), ::OpenAPI::toJsonValue(m_reference_schema));
    }
    return obj;
}

QString OAIReferenceDataSourceDescription::getReferenceId() const {
    return m_reference_id;
}
void OAIReferenceDataSourceDescription::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIReferenceDataSourceDescription::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIReferenceDataSourceDescription::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAIReferenceDataSourceDescription::getTableName() const {
    return m_table_name;
}
void OAIReferenceDataSourceDescription::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIReferenceDataSourceDescription::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIReferenceDataSourceDescription::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIReferenceDataSourceDescription_S3ReferenceDataSourceDescription OAIReferenceDataSourceDescription::getS3ReferenceDataSourceDescription() const {
    return m_s3_reference_data_source_description;
}
void OAIReferenceDataSourceDescription::setS3ReferenceDataSourceDescription(const OAIReferenceDataSourceDescription_S3ReferenceDataSourceDescription &s3_reference_data_source_description) {
    m_s3_reference_data_source_description = s3_reference_data_source_description;
    m_s3_reference_data_source_description_isSet = true;
}

bool OAIReferenceDataSourceDescription::is_s3_reference_data_source_description_Set() const{
    return m_s3_reference_data_source_description_isSet;
}

bool OAIReferenceDataSourceDescription::is_s3_reference_data_source_description_Valid() const{
    return m_s3_reference_data_source_description_isValid;
}

OAIReferenceDataSource_ReferenceSchema OAIReferenceDataSourceDescription::getReferenceSchema() const {
    return m_reference_schema;
}
void OAIReferenceDataSourceDescription::setReferenceSchema(const OAIReferenceDataSource_ReferenceSchema &reference_schema) {
    m_reference_schema = reference_schema;
    m_reference_schema_isSet = true;
}

bool OAIReferenceDataSourceDescription::is_reference_schema_Set() const{
    return m_reference_schema_isSet;
}

bool OAIReferenceDataSourceDescription::is_reference_schema_Valid() const{
    return m_reference_schema_isValid;
}

bool OAIReferenceDataSourceDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_reference_data_source_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceDataSourceDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_id_isValid && m_table_name_isValid && m_s3_reference_data_source_description_isValid && true;
}

} // namespace OpenAPI
