/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddApplicationReferenceDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddApplicationReferenceDataSourceRequest::OAIAddApplicationReferenceDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddApplicationReferenceDataSourceRequest::OAIAddApplicationReferenceDataSourceRequest() {
    this->initializeModel();
}

OAIAddApplicationReferenceDataSourceRequest::~OAIAddApplicationReferenceDataSourceRequest() {}

void OAIAddApplicationReferenceDataSourceRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_current_application_version_id_isSet = false;
    m_current_application_version_id_isValid = false;

    m_reference_data_source_isSet = false;
    m_reference_data_source_isValid = false;
}

void OAIAddApplicationReferenceDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddApplicationReferenceDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_current_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_application_version_id, json[QString("CurrentApplicationVersionId")]);
    m_current_application_version_id_isSet = !json[QString("CurrentApplicationVersionId")].isNull() && m_current_application_version_id_isValid;

    m_reference_data_source_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source, json[QString("ReferenceDataSource")]);
    m_reference_data_source_isSet = !json[QString("ReferenceDataSource")].isNull() && m_reference_data_source_isValid;
}

QString OAIAddApplicationReferenceDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddApplicationReferenceDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_current_application_version_id_isSet) {
        obj.insert(QString("CurrentApplicationVersionId"), ::OpenAPI::toJsonValue(m_current_application_version_id));
    }
    if (m_reference_data_source.isSet()) {
        obj.insert(QString("ReferenceDataSource"), ::OpenAPI::toJsonValue(m_reference_data_source));
    }
    return obj;
}

QString OAIAddApplicationReferenceDataSourceRequest::getApplicationName() const {
    return m_application_name;
}
void OAIAddApplicationReferenceDataSourceRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIAddApplicationReferenceDataSourceRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIAddApplicationReferenceDataSourceRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

qint32 OAIAddApplicationReferenceDataSourceRequest::getCurrentApplicationVersionId() const {
    return m_current_application_version_id;
}
void OAIAddApplicationReferenceDataSourceRequest::setCurrentApplicationVersionId(const qint32 &current_application_version_id) {
    m_current_application_version_id = current_application_version_id;
    m_current_application_version_id_isSet = true;
}

bool OAIAddApplicationReferenceDataSourceRequest::is_current_application_version_id_Set() const{
    return m_current_application_version_id_isSet;
}

bool OAIAddApplicationReferenceDataSourceRequest::is_current_application_version_id_Valid() const{
    return m_current_application_version_id_isValid;
}

OAIAddApplicationReferenceDataSourceRequest_ReferenceDataSource OAIAddApplicationReferenceDataSourceRequest::getReferenceDataSource() const {
    return m_reference_data_source;
}
void OAIAddApplicationReferenceDataSourceRequest::setReferenceDataSource(const OAIAddApplicationReferenceDataSourceRequest_ReferenceDataSource &reference_data_source) {
    m_reference_data_source = reference_data_source;
    m_reference_data_source_isSet = true;
}

bool OAIAddApplicationReferenceDataSourceRequest::is_reference_data_source_Set() const{
    return m_reference_data_source_isSet;
}

bool OAIAddApplicationReferenceDataSourceRequest::is_reference_data_source_Valid() const{
    return m_reference_data_source_isValid;
}

bool OAIAddApplicationReferenceDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddApplicationReferenceDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_current_application_version_id_isValid && m_reference_data_source_isValid && true;
}

} // namespace OpenAPI
