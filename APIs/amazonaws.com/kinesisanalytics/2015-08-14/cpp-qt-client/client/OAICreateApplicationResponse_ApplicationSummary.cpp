/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationResponse_ApplicationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationResponse_ApplicationSummary::OAICreateApplicationResponse_ApplicationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationResponse_ApplicationSummary::OAICreateApplicationResponse_ApplicationSummary() {
    this->initializeModel();
}

OAICreateApplicationResponse_ApplicationSummary::~OAICreateApplicationResponse_ApplicationSummary() {}

void OAICreateApplicationResponse_ApplicationSummary::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_status_isSet = false;
    m_application_status_isValid = false;
}

void OAICreateApplicationResponse_ApplicationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationResponse_ApplicationSummary::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_status_isValid = ::OpenAPI::fromJsonValue(m_application_status, json[QString("ApplicationStatus")]);
    m_application_status_isSet = !json[QString("ApplicationStatus")].isNull() && m_application_status_isValid;
}

QString OAICreateApplicationResponse_ApplicationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationResponse_ApplicationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_status.isSet()) {
        obj.insert(QString("ApplicationStatus"), ::OpenAPI::toJsonValue(m_application_status));
    }
    return obj;
}

QString OAICreateApplicationResponse_ApplicationSummary::getApplicationName() const {
    return m_application_name;
}
void OAICreateApplicationResponse_ApplicationSummary::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICreateApplicationResponse_ApplicationSummary::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICreateApplicationResponse_ApplicationSummary::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAICreateApplicationResponse_ApplicationSummary::getApplicationArn() const {
    return m_application_arn;
}
void OAICreateApplicationResponse_ApplicationSummary::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAICreateApplicationResponse_ApplicationSummary::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAICreateApplicationResponse_ApplicationSummary::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

OAIApplicationStatus OAICreateApplicationResponse_ApplicationSummary::getApplicationStatus() const {
    return m_application_status;
}
void OAICreateApplicationResponse_ApplicationSummary::setApplicationStatus(const OAIApplicationStatus &application_status) {
    m_application_status = application_status;
    m_application_status_isSet = true;
}

bool OAICreateApplicationResponse_ApplicationSummary::is_application_status_Set() const{
    return m_application_status_isSet;
}

bool OAICreateApplicationResponse_ApplicationSummary::is_application_status_Valid() const{
    return m_application_status_isValid;
}

bool OAICreateApplicationResponse_ApplicationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationResponse_ApplicationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_application_arn_isValid && m_application_status_isValid && true;
}

} // namespace OpenAPI
