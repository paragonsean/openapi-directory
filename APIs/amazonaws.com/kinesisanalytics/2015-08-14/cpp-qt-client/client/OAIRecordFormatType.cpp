/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordFormatType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordFormatType::OAIRecordFormatType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordFormatType::OAIRecordFormatType() {
    this->initializeModel();
}

OAIRecordFormatType::~OAIRecordFormatType() {}

void OAIRecordFormatType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRecordFormatType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRecordFormatType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("JSON", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordFormatType::JSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CSV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecordFormatType::CSV;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRecordFormatType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRecordFormatType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRecordFormatType::JSON:
            val = "JSON";
            break;
        case eOAIRecordFormatType::CSV:
            val = "CSV";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRecordFormatType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRecordFormatType::eOAIRecordFormatType OAIRecordFormatType::getValue() const {
    return m_value;
}

void OAIRecordFormatType::setValue(const OAIRecordFormatType::eOAIRecordFormatType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRecordFormatType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRecordFormatType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
