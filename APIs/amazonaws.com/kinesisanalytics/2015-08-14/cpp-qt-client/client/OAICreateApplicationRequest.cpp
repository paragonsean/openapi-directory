/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationRequest::OAICreateApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationRequest::OAICreateApplicationRequest() {
    this->initializeModel();
}

OAICreateApplicationRequest::~OAICreateApplicationRequest() {}

void OAICreateApplicationRequest::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_description_isSet = false;
    m_application_description_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;

    m_application_code_isSet = false;
    m_application_code_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationRequest::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_description_isValid = ::OpenAPI::fromJsonValue(m_application_description, json[QString("ApplicationDescription")]);
    m_application_description_isSet = !json[QString("ApplicationDescription")].isNull() && m_application_description_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("Inputs")]);
    m_inputs_isSet = !json[QString("Inputs")].isNull() && m_inputs_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;

    m_application_code_isValid = ::OpenAPI::fromJsonValue(m_application_code, json[QString("ApplicationCode")]);
    m_application_code_isSet = !json[QString("ApplicationCode")].isNull() && m_application_code_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_description_isSet) {
        obj.insert(QString("ApplicationDescription"), ::OpenAPI::toJsonValue(m_application_description));
    }
    if (m_inputs.isSet()) {
        obj.insert(QString("Inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    if (m_application_code_isSet) {
        obj.insert(QString("ApplicationCode"), ::OpenAPI::toJsonValue(m_application_code));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApplicationRequest::getApplicationName() const {
    return m_application_name;
}
void OAICreateApplicationRequest::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAICreateApplicationRequest::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAICreateApplicationRequest::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAICreateApplicationRequest::getApplicationDescription() const {
    return m_application_description;
}
void OAICreateApplicationRequest::setApplicationDescription(const QString &application_description) {
    m_application_description = application_description;
    m_application_description_isSet = true;
}

bool OAICreateApplicationRequest::is_application_description_Set() const{
    return m_application_description_isSet;
}

bool OAICreateApplicationRequest::is_application_description_Valid() const{
    return m_application_description_isValid;
}

QList OAICreateApplicationRequest::getInputs() const {
    return m_inputs;
}
void OAICreateApplicationRequest::setInputs(const QList &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAICreateApplicationRequest::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAICreateApplicationRequest::is_inputs_Valid() const{
    return m_inputs_isValid;
}

QList OAICreateApplicationRequest::getOutputs() const {
    return m_outputs;
}
void OAICreateApplicationRequest::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAICreateApplicationRequest::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAICreateApplicationRequest::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QList OAICreateApplicationRequest::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAICreateApplicationRequest::setCloudWatchLoggingOptions(const QList &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAICreateApplicationRequest::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAICreateApplicationRequest::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

QString OAICreateApplicationRequest::getApplicationCode() const {
    return m_application_code;
}
void OAICreateApplicationRequest::setApplicationCode(const QString &application_code) {
    m_application_code = application_code;
    m_application_code_isSet = true;
}

bool OAICreateApplicationRequest::is_application_code_Set() const{
    return m_application_code_isSet;
}

bool OAICreateApplicationRequest::is_application_code_Valid() const{
    return m_application_code_isValid;
}

QList OAICreateApplicationRequest::getTags() const {
    return m_tags;
}
void OAICreateApplicationRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && true;
}

} // namespace OpenAPI
