/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeApplicationResponse_ApplicationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeApplicationResponse_ApplicationDetail::OAIDescribeApplicationResponse_ApplicationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeApplicationResponse_ApplicationDetail::OAIDescribeApplicationResponse_ApplicationDetail() {
    this->initializeModel();
}

OAIDescribeApplicationResponse_ApplicationDetail::~OAIDescribeApplicationResponse_ApplicationDetail() {}

void OAIDescribeApplicationResponse_ApplicationDetail::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_application_description_isSet = false;
    m_application_description_isValid = false;

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_status_isSet = false;
    m_application_status_isValid = false;

    m_create_timestamp_isSet = false;
    m_create_timestamp_isValid = false;

    m_last_update_timestamp_isSet = false;
    m_last_update_timestamp_isValid = false;

    m_input_descriptions_isSet = false;
    m_input_descriptions_isValid = false;

    m_output_descriptions_isSet = false;
    m_output_descriptions_isValid = false;

    m_reference_data_source_descriptions_isSet = false;
    m_reference_data_source_descriptions_isValid = false;

    m_cloud_watch_logging_option_descriptions_isSet = false;
    m_cloud_watch_logging_option_descriptions_isValid = false;

    m_application_code_isSet = false;
    m_application_code_isValid = false;

    m_application_version_id_isSet = false;
    m_application_version_id_isValid = false;
}

void OAIDescribeApplicationResponse_ApplicationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeApplicationResponse_ApplicationDetail::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_application_description_isValid = ::OpenAPI::fromJsonValue(m_application_description, json[QString("ApplicationDescription")]);
    m_application_description_isSet = !json[QString("ApplicationDescription")].isNull() && m_application_description_isValid;

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationARN")]);
    m_application_arn_isSet = !json[QString("ApplicationARN")].isNull() && m_application_arn_isValid;

    m_application_status_isValid = ::OpenAPI::fromJsonValue(m_application_status, json[QString("ApplicationStatus")]);
    m_application_status_isSet = !json[QString("ApplicationStatus")].isNull() && m_application_status_isValid;

    m_create_timestamp_isValid = ::OpenAPI::fromJsonValue(m_create_timestamp, json[QString("CreateTimestamp")]);
    m_create_timestamp_isSet = !json[QString("CreateTimestamp")].isNull() && m_create_timestamp_isValid;

    m_last_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_update_timestamp, json[QString("LastUpdateTimestamp")]);
    m_last_update_timestamp_isSet = !json[QString("LastUpdateTimestamp")].isNull() && m_last_update_timestamp_isValid;

    m_input_descriptions_isValid = ::OpenAPI::fromJsonValue(m_input_descriptions, json[QString("InputDescriptions")]);
    m_input_descriptions_isSet = !json[QString("InputDescriptions")].isNull() && m_input_descriptions_isValid;

    m_output_descriptions_isValid = ::OpenAPI::fromJsonValue(m_output_descriptions, json[QString("OutputDescriptions")]);
    m_output_descriptions_isSet = !json[QString("OutputDescriptions")].isNull() && m_output_descriptions_isValid;

    m_reference_data_source_descriptions_isValid = ::OpenAPI::fromJsonValue(m_reference_data_source_descriptions, json[QString("ReferenceDataSourceDescriptions")]);
    m_reference_data_source_descriptions_isSet = !json[QString("ReferenceDataSourceDescriptions")].isNull() && m_reference_data_source_descriptions_isValid;

    m_cloud_watch_logging_option_descriptions_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_option_descriptions, json[QString("CloudWatchLoggingOptionDescriptions")]);
    m_cloud_watch_logging_option_descriptions_isSet = !json[QString("CloudWatchLoggingOptionDescriptions")].isNull() && m_cloud_watch_logging_option_descriptions_isValid;

    m_application_code_isValid = ::OpenAPI::fromJsonValue(m_application_code, json[QString("ApplicationCode")]);
    m_application_code_isSet = !json[QString("ApplicationCode")].isNull() && m_application_code_isValid;

    m_application_version_id_isValid = ::OpenAPI::fromJsonValue(m_application_version_id, json[QString("ApplicationVersionId")]);
    m_application_version_id_isSet = !json[QString("ApplicationVersionId")].isNull() && m_application_version_id_isValid;
}

QString OAIDescribeApplicationResponse_ApplicationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeApplicationResponse_ApplicationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_application_description_isSet) {
        obj.insert(QString("ApplicationDescription"), ::OpenAPI::toJsonValue(m_application_description));
    }
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationARN"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_status.isSet()) {
        obj.insert(QString("ApplicationStatus"), ::OpenAPI::toJsonValue(m_application_status));
    }
    if (m_create_timestamp_isSet) {
        obj.insert(QString("CreateTimestamp"), ::OpenAPI::toJsonValue(m_create_timestamp));
    }
    if (m_last_update_timestamp_isSet) {
        obj.insert(QString("LastUpdateTimestamp"), ::OpenAPI::toJsonValue(m_last_update_timestamp));
    }
    if (m_input_descriptions.isSet()) {
        obj.insert(QString("InputDescriptions"), ::OpenAPI::toJsonValue(m_input_descriptions));
    }
    if (m_output_descriptions.isSet()) {
        obj.insert(QString("OutputDescriptions"), ::OpenAPI::toJsonValue(m_output_descriptions));
    }
    if (m_reference_data_source_descriptions.isSet()) {
        obj.insert(QString("ReferenceDataSourceDescriptions"), ::OpenAPI::toJsonValue(m_reference_data_source_descriptions));
    }
    if (m_cloud_watch_logging_option_descriptions.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptionDescriptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_option_descriptions));
    }
    if (m_application_code_isSet) {
        obj.insert(QString("ApplicationCode"), ::OpenAPI::toJsonValue(m_application_code));
    }
    if (m_application_version_id_isSet) {
        obj.insert(QString("ApplicationVersionId"), ::OpenAPI::toJsonValue(m_application_version_id));
    }
    return obj;
}

QString OAIDescribeApplicationResponse_ApplicationDetail::getApplicationName() const {
    return m_application_name;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIDescribeApplicationResponse_ApplicationDetail::getApplicationDescription() const {
    return m_application_description;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setApplicationDescription(const QString &application_description) {
    m_application_description = application_description;
    m_application_description_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_description_Set() const{
    return m_application_description_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_description_Valid() const{
    return m_application_description_isValid;
}

QString OAIDescribeApplicationResponse_ApplicationDetail::getApplicationArn() const {
    return m_application_arn;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

OAIApplicationStatus OAIDescribeApplicationResponse_ApplicationDetail::getApplicationStatus() const {
    return m_application_status;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setApplicationStatus(const OAIApplicationStatus &application_status) {
    m_application_status = application_status;
    m_application_status_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_status_Set() const{
    return m_application_status_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_status_Valid() const{
    return m_application_status_isValid;
}

QDateTime OAIDescribeApplicationResponse_ApplicationDetail::getCreateTimestamp() const {
    return m_create_timestamp;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setCreateTimestamp(const QDateTime &create_timestamp) {
    m_create_timestamp = create_timestamp;
    m_create_timestamp_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_create_timestamp_Set() const{
    return m_create_timestamp_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_create_timestamp_Valid() const{
    return m_create_timestamp_isValid;
}

QDateTime OAIDescribeApplicationResponse_ApplicationDetail::getLastUpdateTimestamp() const {
    return m_last_update_timestamp;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setLastUpdateTimestamp(const QDateTime &last_update_timestamp) {
    m_last_update_timestamp = last_update_timestamp;
    m_last_update_timestamp_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_last_update_timestamp_Set() const{
    return m_last_update_timestamp_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_last_update_timestamp_Valid() const{
    return m_last_update_timestamp_isValid;
}

QList OAIDescribeApplicationResponse_ApplicationDetail::getInputDescriptions() const {
    return m_input_descriptions;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setInputDescriptions(const QList &input_descriptions) {
    m_input_descriptions = input_descriptions;
    m_input_descriptions_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_input_descriptions_Set() const{
    return m_input_descriptions_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_input_descriptions_Valid() const{
    return m_input_descriptions_isValid;
}

QList OAIDescribeApplicationResponse_ApplicationDetail::getOutputDescriptions() const {
    return m_output_descriptions;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setOutputDescriptions(const QList &output_descriptions) {
    m_output_descriptions = output_descriptions;
    m_output_descriptions_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_output_descriptions_Set() const{
    return m_output_descriptions_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_output_descriptions_Valid() const{
    return m_output_descriptions_isValid;
}

QList OAIDescribeApplicationResponse_ApplicationDetail::getReferenceDataSourceDescriptions() const {
    return m_reference_data_source_descriptions;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setReferenceDataSourceDescriptions(const QList &reference_data_source_descriptions) {
    m_reference_data_source_descriptions = reference_data_source_descriptions;
    m_reference_data_source_descriptions_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_reference_data_source_descriptions_Set() const{
    return m_reference_data_source_descriptions_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_reference_data_source_descriptions_Valid() const{
    return m_reference_data_source_descriptions_isValid;
}

QList OAIDescribeApplicationResponse_ApplicationDetail::getCloudWatchLoggingOptionDescriptions() const {
    return m_cloud_watch_logging_option_descriptions;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setCloudWatchLoggingOptionDescriptions(const QList &cloud_watch_logging_option_descriptions) {
    m_cloud_watch_logging_option_descriptions = cloud_watch_logging_option_descriptions;
    m_cloud_watch_logging_option_descriptions_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_cloud_watch_logging_option_descriptions_Set() const{
    return m_cloud_watch_logging_option_descriptions_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_cloud_watch_logging_option_descriptions_Valid() const{
    return m_cloud_watch_logging_option_descriptions_isValid;
}

QString OAIDescribeApplicationResponse_ApplicationDetail::getApplicationCode() const {
    return m_application_code;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setApplicationCode(const QString &application_code) {
    m_application_code = application_code;
    m_application_code_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_code_Set() const{
    return m_application_code_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_code_Valid() const{
    return m_application_code_isValid;
}

qint32 OAIDescribeApplicationResponse_ApplicationDetail::getApplicationVersionId() const {
    return m_application_version_id;
}
void OAIDescribeApplicationResponse_ApplicationDetail::setApplicationVersionId(const qint32 &application_version_id) {
    m_application_version_id = application_version_id;
    m_application_version_id_isSet = true;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_version_id_Set() const{
    return m_application_version_id_isSet;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::is_application_version_id_Valid() const{
    return m_application_version_id_isValid;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_source_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_option_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeApplicationResponse_ApplicationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_application_arn_isValid && m_application_status_isValid && m_application_version_id_isValid && true;
}

} // namespace OpenAPI
