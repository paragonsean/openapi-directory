/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription from './ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription';
import ReferenceDataSourceReferenceSchema from './ReferenceDataSourceReferenceSchema';

/**
 * The ReferenceDataSourceDescription model module.
 * @module model/ReferenceDataSourceDescription
 * @version 2015-08-14
 */
class ReferenceDataSourceDescription {
    /**
     * Constructs a new <code>ReferenceDataSourceDescription</code>.
     * Describes the reference data source configured for an application.
     * @alias module:model/ReferenceDataSourceDescription
     * @param referenceId {String} 
     * @param tableName {String} 
     * @param s3ReferenceDataSourceDescription {module:model/ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription} 
     */
    constructor(referenceId, tableName, s3ReferenceDataSourceDescription) { 
        
        ReferenceDataSourceDescription.initialize(this, referenceId, tableName, s3ReferenceDataSourceDescription);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, referenceId, tableName, s3ReferenceDataSourceDescription) { 
        obj['ReferenceId'] = referenceId;
        obj['TableName'] = tableName;
        obj['S3ReferenceDataSourceDescription'] = s3ReferenceDataSourceDescription;
    }

    /**
     * Constructs a <code>ReferenceDataSourceDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferenceDataSourceDescription} obj Optional instance to populate.
     * @return {module:model/ReferenceDataSourceDescription} The populated <code>ReferenceDataSourceDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferenceDataSourceDescription();

            if (data.hasOwnProperty('ReferenceId')) {
                obj['ReferenceId'] = ApiClient.convertToType(data['ReferenceId'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('S3ReferenceDataSourceDescription')) {
                obj['S3ReferenceDataSourceDescription'] = ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.constructFromObject(data['S3ReferenceDataSourceDescription']);
            }
            if (data.hasOwnProperty('ReferenceSchema')) {
                obj['ReferenceSchema'] = ReferenceDataSourceReferenceSchema.constructFromObject(data['ReferenceSchema']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferenceDataSourceDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferenceDataSourceDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReferenceDataSourceDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ReferenceId`
        if (data['ReferenceId']) { // data not null
          String.validateJSON(data['ReferenceId']);
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `S3ReferenceDataSourceDescription`
        if (data['S3ReferenceDataSourceDescription']) { // data not null
          ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.validateJSON(data['S3ReferenceDataSourceDescription']);
        }
        // validate the optional field `ReferenceSchema`
        if (data['ReferenceSchema']) { // data not null
          ReferenceDataSourceReferenceSchema.validateJSON(data['ReferenceSchema']);
        }

        return true;
    }


}

ReferenceDataSourceDescription.RequiredProperties = ["ReferenceId", "TableName", "S3ReferenceDataSourceDescription"];

/**
 * @member {String} ReferenceId
 */
ReferenceDataSourceDescription.prototype['ReferenceId'] = undefined;

/**
 * @member {String} TableName
 */
ReferenceDataSourceDescription.prototype['TableName'] = undefined;

/**
 * @member {module:model/ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription} S3ReferenceDataSourceDescription
 */
ReferenceDataSourceDescription.prototype['S3ReferenceDataSourceDescription'] = undefined;

/**
 * @member {module:model/ReferenceDataSourceReferenceSchema} ReferenceSchema
 */
ReferenceDataSourceDescription.prototype['ReferenceSchema'] = undefined;






export default ReferenceDataSourceDescription;

