/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputInputParallelism from './InputInputParallelism';
import InputInputProcessingConfiguration from './InputInputProcessingConfiguration';
import InputInputSchema from './InputInputSchema';
import InputKinesisFirehoseInput from './InputKinesisFirehoseInput';
import InputKinesisStreamsInput from './InputKinesisStreamsInput';

/**
 * The Input model module.
 * @module model/Input
 * @version 2015-08-14
 */
class Input {
    /**
     * Constructs a new <code>Input</code>.
     * When you configure the application input, you specify the streaming source, the in-application stream name that is created, and the mapping between the two. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-input.html\&quot;&gt;Configuring Application Input&lt;/a&gt;. 
     * @alias module:model/Input
     * @param namePrefix {String} 
     * @param inputSchema {module:model/InputInputSchema} 
     */
    constructor(namePrefix, inputSchema) { 
        
        Input.initialize(this, namePrefix, inputSchema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, namePrefix, inputSchema) { 
        obj['NamePrefix'] = namePrefix;
        obj['InputSchema'] = inputSchema;
    }

    /**
     * Constructs a <code>Input</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Input} obj Optional instance to populate.
     * @return {module:model/Input} The populated <code>Input</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Input();

            if (data.hasOwnProperty('NamePrefix')) {
                obj['NamePrefix'] = ApiClient.convertToType(data['NamePrefix'], 'String');
            }
            if (data.hasOwnProperty('InputProcessingConfiguration')) {
                obj['InputProcessingConfiguration'] = InputInputProcessingConfiguration.constructFromObject(data['InputProcessingConfiguration']);
            }
            if (data.hasOwnProperty('KinesisStreamsInput')) {
                obj['KinesisStreamsInput'] = InputKinesisStreamsInput.constructFromObject(data['KinesisStreamsInput']);
            }
            if (data.hasOwnProperty('KinesisFirehoseInput')) {
                obj['KinesisFirehoseInput'] = InputKinesisFirehoseInput.constructFromObject(data['KinesisFirehoseInput']);
            }
            if (data.hasOwnProperty('InputParallelism')) {
                obj['InputParallelism'] = InputInputParallelism.constructFromObject(data['InputParallelism']);
            }
            if (data.hasOwnProperty('InputSchema')) {
                obj['InputSchema'] = InputInputSchema.constructFromObject(data['InputSchema']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Input</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Input</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Input.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `NamePrefix`
        if (data['NamePrefix']) { // data not null
          String.validateJSON(data['NamePrefix']);
        }
        // validate the optional field `InputProcessingConfiguration`
        if (data['InputProcessingConfiguration']) { // data not null
          InputInputProcessingConfiguration.validateJSON(data['InputProcessingConfiguration']);
        }
        // validate the optional field `KinesisStreamsInput`
        if (data['KinesisStreamsInput']) { // data not null
          InputKinesisStreamsInput.validateJSON(data['KinesisStreamsInput']);
        }
        // validate the optional field `KinesisFirehoseInput`
        if (data['KinesisFirehoseInput']) { // data not null
          InputKinesisFirehoseInput.validateJSON(data['KinesisFirehoseInput']);
        }
        // validate the optional field `InputParallelism`
        if (data['InputParallelism']) { // data not null
          InputInputParallelism.validateJSON(data['InputParallelism']);
        }
        // validate the optional field `InputSchema`
        if (data['InputSchema']) { // data not null
          InputInputSchema.validateJSON(data['InputSchema']);
        }

        return true;
    }


}

Input.RequiredProperties = ["NamePrefix", "InputSchema"];

/**
 * @member {String} NamePrefix
 */
Input.prototype['NamePrefix'] = undefined;

/**
 * @member {module:model/InputInputProcessingConfiguration} InputProcessingConfiguration
 */
Input.prototype['InputProcessingConfiguration'] = undefined;

/**
 * @member {module:model/InputKinesisStreamsInput} KinesisStreamsInput
 */
Input.prototype['KinesisStreamsInput'] = undefined;

/**
 * @member {module:model/InputKinesisFirehoseInput} KinesisFirehoseInput
 */
Input.prototype['KinesisFirehoseInput'] = undefined;

/**
 * @member {module:model/InputInputParallelism} InputParallelism
 */
Input.prototype['InputParallelism'] = undefined;

/**
 * @member {module:model/InputInputSchema} InputSchema
 */
Input.prototype['InputSchema'] = undefined;






export default Input;

