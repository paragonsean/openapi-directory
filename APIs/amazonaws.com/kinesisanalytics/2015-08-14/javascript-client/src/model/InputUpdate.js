/**
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputUpdateInputParallelismUpdate from './InputUpdateInputParallelismUpdate';
import InputUpdateInputProcessingConfigurationUpdate from './InputUpdateInputProcessingConfigurationUpdate';
import InputUpdateInputSchemaUpdate from './InputUpdateInputSchemaUpdate';
import InputUpdateKinesisFirehoseInputUpdate from './InputUpdateKinesisFirehoseInputUpdate';
import InputUpdateKinesisStreamsInputUpdate from './InputUpdateKinesisStreamsInputUpdate';

/**
 * The InputUpdate model module.
 * @module model/InputUpdate
 * @version 2015-08-14
 */
class InputUpdate {
    /**
     * Constructs a new <code>InputUpdate</code>.
     * Describes updates to a specific input configuration (identified by the &lt;code&gt;InputId&lt;/code&gt; of an application). 
     * @alias module:model/InputUpdate
     * @param inputId {String} 
     */
    constructor(inputId) { 
        
        InputUpdate.initialize(this, inputId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputId) { 
        obj['InputId'] = inputId;
    }

    /**
     * Constructs a <code>InputUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputUpdate} obj Optional instance to populate.
     * @return {module:model/InputUpdate} The populated <code>InputUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputUpdate();

            if (data.hasOwnProperty('InputId')) {
                obj['InputId'] = ApiClient.convertToType(data['InputId'], 'String');
            }
            if (data.hasOwnProperty('NamePrefixUpdate')) {
                obj['NamePrefixUpdate'] = ApiClient.convertToType(data['NamePrefixUpdate'], 'String');
            }
            if (data.hasOwnProperty('InputProcessingConfigurationUpdate')) {
                obj['InputProcessingConfigurationUpdate'] = InputUpdateInputProcessingConfigurationUpdate.constructFromObject(data['InputProcessingConfigurationUpdate']);
            }
            if (data.hasOwnProperty('KinesisStreamsInputUpdate')) {
                obj['KinesisStreamsInputUpdate'] = InputUpdateKinesisStreamsInputUpdate.constructFromObject(data['KinesisStreamsInputUpdate']);
            }
            if (data.hasOwnProperty('KinesisFirehoseInputUpdate')) {
                obj['KinesisFirehoseInputUpdate'] = InputUpdateKinesisFirehoseInputUpdate.constructFromObject(data['KinesisFirehoseInputUpdate']);
            }
            if (data.hasOwnProperty('InputSchemaUpdate')) {
                obj['InputSchemaUpdate'] = InputUpdateInputSchemaUpdate.constructFromObject(data['InputSchemaUpdate']);
            }
            if (data.hasOwnProperty('InputParallelismUpdate')) {
                obj['InputParallelismUpdate'] = InputUpdateInputParallelismUpdate.constructFromObject(data['InputParallelismUpdate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `InputId`
        if (data['InputId']) { // data not null
          String.validateJSON(data['InputId']);
        }
        // validate the optional field `NamePrefixUpdate`
        if (data['NamePrefixUpdate']) { // data not null
          String.validateJSON(data['NamePrefixUpdate']);
        }
        // validate the optional field `InputProcessingConfigurationUpdate`
        if (data['InputProcessingConfigurationUpdate']) { // data not null
          InputUpdateInputProcessingConfigurationUpdate.validateJSON(data['InputProcessingConfigurationUpdate']);
        }
        // validate the optional field `KinesisStreamsInputUpdate`
        if (data['KinesisStreamsInputUpdate']) { // data not null
          InputUpdateKinesisStreamsInputUpdate.validateJSON(data['KinesisStreamsInputUpdate']);
        }
        // validate the optional field `KinesisFirehoseInputUpdate`
        if (data['KinesisFirehoseInputUpdate']) { // data not null
          InputUpdateKinesisFirehoseInputUpdate.validateJSON(data['KinesisFirehoseInputUpdate']);
        }
        // validate the optional field `InputSchemaUpdate`
        if (data['InputSchemaUpdate']) { // data not null
          InputUpdateInputSchemaUpdate.validateJSON(data['InputSchemaUpdate']);
        }
        // validate the optional field `InputParallelismUpdate`
        if (data['InputParallelismUpdate']) { // data not null
          InputUpdateInputParallelismUpdate.validateJSON(data['InputParallelismUpdate']);
        }

        return true;
    }


}

InputUpdate.RequiredProperties = ["InputId"];

/**
 * @member {String} InputId
 */
InputUpdate.prototype['InputId'] = undefined;

/**
 * @member {String} NamePrefixUpdate
 */
InputUpdate.prototype['NamePrefixUpdate'] = undefined;

/**
 * @member {module:model/InputUpdateInputProcessingConfigurationUpdate} InputProcessingConfigurationUpdate
 */
InputUpdate.prototype['InputProcessingConfigurationUpdate'] = undefined;

/**
 * @member {module:model/InputUpdateKinesisStreamsInputUpdate} KinesisStreamsInputUpdate
 */
InputUpdate.prototype['KinesisStreamsInputUpdate'] = undefined;

/**
 * @member {module:model/InputUpdateKinesisFirehoseInputUpdate} KinesisFirehoseInputUpdate
 */
InputUpdate.prototype['KinesisFirehoseInputUpdate'] = undefined;

/**
 * @member {module:model/InputUpdateInputSchemaUpdate} InputSchemaUpdate
 */
InputUpdate.prototype['InputSchemaUpdate'] = undefined;

/**
 * @member {module:model/InputUpdateInputParallelismUpdate} InputParallelismUpdate
 */
InputUpdate.prototype['InputParallelismUpdate'] = undefined;






export default InputUpdate;

