/*
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputInputParallelism;
import org.openapitools.client.model.InputInputProcessingConfiguration;
import org.openapitools.client.model.InputInputSchema;
import org.openapitools.client.model.InputKinesisFirehoseInput;
import org.openapitools.client.model.InputKinesisStreamsInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddApplicationInputRequestInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:34.996808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddApplicationInputRequestInput {
  public static final String SERIALIZED_NAME_NAME_PREFIX = "NamePrefix";
  @SerializedName(SERIALIZED_NAME_NAME_PREFIX)
  private String namePrefix;

  public static final String SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION = "InputProcessingConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION)
  private InputInputProcessingConfiguration inputProcessingConfiguration;

  public static final String SERIALIZED_NAME_KINESIS_STREAMS_INPUT = "KinesisStreamsInput";
  @SerializedName(SERIALIZED_NAME_KINESIS_STREAMS_INPUT)
  private InputKinesisStreamsInput kinesisStreamsInput;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_INPUT = "KinesisFirehoseInput";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_INPUT)
  private InputKinesisFirehoseInput kinesisFirehoseInput;

  public static final String SERIALIZED_NAME_INPUT_PARALLELISM = "InputParallelism";
  @SerializedName(SERIALIZED_NAME_INPUT_PARALLELISM)
  private InputInputParallelism inputParallelism;

  public static final String SERIALIZED_NAME_INPUT_SCHEMA = "InputSchema";
  @SerializedName(SERIALIZED_NAME_INPUT_SCHEMA)
  private InputInputSchema inputSchema;

  public AddApplicationInputRequestInput() {
  }

  public AddApplicationInputRequestInput namePrefix(String namePrefix) {
    this.namePrefix = namePrefix;
    return this;
  }

  /**
   * Get namePrefix
   * @return namePrefix
   */
  @javax.annotation.Nonnull
  public String getNamePrefix() {
    return namePrefix;
  }

  public void setNamePrefix(String namePrefix) {
    this.namePrefix = namePrefix;
  }


  public AddApplicationInputRequestInput inputProcessingConfiguration(InputInputProcessingConfiguration inputProcessingConfiguration) {
    this.inputProcessingConfiguration = inputProcessingConfiguration;
    return this;
  }

  /**
   * Get inputProcessingConfiguration
   * @return inputProcessingConfiguration
   */
  @javax.annotation.Nullable
  public InputInputProcessingConfiguration getInputProcessingConfiguration() {
    return inputProcessingConfiguration;
  }

  public void setInputProcessingConfiguration(InputInputProcessingConfiguration inputProcessingConfiguration) {
    this.inputProcessingConfiguration = inputProcessingConfiguration;
  }


  public AddApplicationInputRequestInput kinesisStreamsInput(InputKinesisStreamsInput kinesisStreamsInput) {
    this.kinesisStreamsInput = kinesisStreamsInput;
    return this;
  }

  /**
   * Get kinesisStreamsInput
   * @return kinesisStreamsInput
   */
  @javax.annotation.Nullable
  public InputKinesisStreamsInput getKinesisStreamsInput() {
    return kinesisStreamsInput;
  }

  public void setKinesisStreamsInput(InputKinesisStreamsInput kinesisStreamsInput) {
    this.kinesisStreamsInput = kinesisStreamsInput;
  }


  public AddApplicationInputRequestInput kinesisFirehoseInput(InputKinesisFirehoseInput kinesisFirehoseInput) {
    this.kinesisFirehoseInput = kinesisFirehoseInput;
    return this;
  }

  /**
   * Get kinesisFirehoseInput
   * @return kinesisFirehoseInput
   */
  @javax.annotation.Nullable
  public InputKinesisFirehoseInput getKinesisFirehoseInput() {
    return kinesisFirehoseInput;
  }

  public void setKinesisFirehoseInput(InputKinesisFirehoseInput kinesisFirehoseInput) {
    this.kinesisFirehoseInput = kinesisFirehoseInput;
  }


  public AddApplicationInputRequestInput inputParallelism(InputInputParallelism inputParallelism) {
    this.inputParallelism = inputParallelism;
    return this;
  }

  /**
   * Get inputParallelism
   * @return inputParallelism
   */
  @javax.annotation.Nullable
  public InputInputParallelism getInputParallelism() {
    return inputParallelism;
  }

  public void setInputParallelism(InputInputParallelism inputParallelism) {
    this.inputParallelism = inputParallelism;
  }


  public AddApplicationInputRequestInput inputSchema(InputInputSchema inputSchema) {
    this.inputSchema = inputSchema;
    return this;
  }

  /**
   * Get inputSchema
   * @return inputSchema
   */
  @javax.annotation.Nonnull
  public InputInputSchema getInputSchema() {
    return inputSchema;
  }

  public void setInputSchema(InputInputSchema inputSchema) {
    this.inputSchema = inputSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApplicationInputRequestInput addApplicationInputRequestInput = (AddApplicationInputRequestInput) o;
    return Objects.equals(this.namePrefix, addApplicationInputRequestInput.namePrefix) &&
        Objects.equals(this.inputProcessingConfiguration, addApplicationInputRequestInput.inputProcessingConfiguration) &&
        Objects.equals(this.kinesisStreamsInput, addApplicationInputRequestInput.kinesisStreamsInput) &&
        Objects.equals(this.kinesisFirehoseInput, addApplicationInputRequestInput.kinesisFirehoseInput) &&
        Objects.equals(this.inputParallelism, addApplicationInputRequestInput.inputParallelism) &&
        Objects.equals(this.inputSchema, addApplicationInputRequestInput.inputSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namePrefix, inputProcessingConfiguration, kinesisStreamsInput, kinesisFirehoseInput, inputParallelism, inputSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApplicationInputRequestInput {\n");
    sb.append("    namePrefix: ").append(toIndentedString(namePrefix)).append("\n");
    sb.append("    inputProcessingConfiguration: ").append(toIndentedString(inputProcessingConfiguration)).append("\n");
    sb.append("    kinesisStreamsInput: ").append(toIndentedString(kinesisStreamsInput)).append("\n");
    sb.append("    kinesisFirehoseInput: ").append(toIndentedString(kinesisFirehoseInput)).append("\n");
    sb.append("    inputParallelism: ").append(toIndentedString(inputParallelism)).append("\n");
    sb.append("    inputSchema: ").append(toIndentedString(inputSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NamePrefix");
    openapiFields.add("InputProcessingConfiguration");
    openapiFields.add("KinesisStreamsInput");
    openapiFields.add("KinesisFirehoseInput");
    openapiFields.add("InputParallelism");
    openapiFields.add("InputSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("NamePrefix");
    openapiRequiredFields.add("InputSchema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddApplicationInputRequestInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddApplicationInputRequestInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddApplicationInputRequestInput is not found in the empty JSON string", AddApplicationInputRequestInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddApplicationInputRequestInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddApplicationInputRequestInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddApplicationInputRequestInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `NamePrefix`
      String.validateJsonElement(jsonObj.get("NamePrefix"));
      // validate the optional field `InputProcessingConfiguration`
      if (jsonObj.get("InputProcessingConfiguration") != null && !jsonObj.get("InputProcessingConfiguration").isJsonNull()) {
        InputInputProcessingConfiguration.validateJsonElement(jsonObj.get("InputProcessingConfiguration"));
      }
      // validate the optional field `KinesisStreamsInput`
      if (jsonObj.get("KinesisStreamsInput") != null && !jsonObj.get("KinesisStreamsInput").isJsonNull()) {
        InputKinesisStreamsInput.validateJsonElement(jsonObj.get("KinesisStreamsInput"));
      }
      // validate the optional field `KinesisFirehoseInput`
      if (jsonObj.get("KinesisFirehoseInput") != null && !jsonObj.get("KinesisFirehoseInput").isJsonNull()) {
        InputKinesisFirehoseInput.validateJsonElement(jsonObj.get("KinesisFirehoseInput"));
      }
      // validate the optional field `InputParallelism`
      if (jsonObj.get("InputParallelism") != null && !jsonObj.get("InputParallelism").isJsonNull()) {
        InputInputParallelism.validateJsonElement(jsonObj.get("InputParallelism"));
      }
      // validate the required field `InputSchema`
      InputInputSchema.validateJsonElement(jsonObj.get("InputSchema"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddApplicationInputRequestInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddApplicationInputRequestInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddApplicationInputRequestInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddApplicationInputRequestInput.class));

       return (TypeAdapter<T>) new TypeAdapter<AddApplicationInputRequestInput>() {
           @Override
           public void write(JsonWriter out, AddApplicationInputRequestInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddApplicationInputRequestInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddApplicationInputRequestInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddApplicationInputRequestInput
   * @throws IOException if the JSON string is invalid with respect to AddApplicationInputRequestInput
   */
  public static AddApplicationInputRequestInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddApplicationInputRequestInput.class);
  }

  /**
   * Convert an instance of AddApplicationInputRequestInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

