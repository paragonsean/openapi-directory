/*
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiscoverInputSchemaRequestInputProcessingConfiguration;
import org.openapitools.client.model.DiscoverInputSchemaRequestInputStartingPositionConfiguration;
import org.openapitools.client.model.DiscoverInputSchemaRequestS3Configuration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DiscoverInputSchemaRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:34.996808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoverInputSchemaRequest {
  public static final String SERIALIZED_NAME_RESOURCE_A_R_N = "ResourceARN";
  @SerializedName(SERIALIZED_NAME_RESOURCE_A_R_N)
  private String resourceARN;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_INPUT_STARTING_POSITION_CONFIGURATION = "InputStartingPositionConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_STARTING_POSITION_CONFIGURATION)
  private DiscoverInputSchemaRequestInputStartingPositionConfiguration inputStartingPositionConfiguration;

  public static final String SERIALIZED_NAME_S3_CONFIGURATION = "S3Configuration";
  @SerializedName(SERIALIZED_NAME_S3_CONFIGURATION)
  private DiscoverInputSchemaRequestS3Configuration s3Configuration;

  public static final String SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION = "InputProcessingConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION)
  private DiscoverInputSchemaRequestInputProcessingConfiguration inputProcessingConfiguration;

  public DiscoverInputSchemaRequest() {
  }

  public DiscoverInputSchemaRequest resourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
    return this;
  }

  /**
   * Get resourceARN
   * @return resourceARN
   */
  @javax.annotation.Nullable
  public String getResourceARN() {
    return resourceARN;
  }

  public void setResourceARN(String resourceARN) {
    this.resourceARN = resourceARN;
  }


  public DiscoverInputSchemaRequest roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public DiscoverInputSchemaRequest inputStartingPositionConfiguration(DiscoverInputSchemaRequestInputStartingPositionConfiguration inputStartingPositionConfiguration) {
    this.inputStartingPositionConfiguration = inputStartingPositionConfiguration;
    return this;
  }

  /**
   * Get inputStartingPositionConfiguration
   * @return inputStartingPositionConfiguration
   */
  @javax.annotation.Nullable
  public DiscoverInputSchemaRequestInputStartingPositionConfiguration getInputStartingPositionConfiguration() {
    return inputStartingPositionConfiguration;
  }

  public void setInputStartingPositionConfiguration(DiscoverInputSchemaRequestInputStartingPositionConfiguration inputStartingPositionConfiguration) {
    this.inputStartingPositionConfiguration = inputStartingPositionConfiguration;
  }


  public DiscoverInputSchemaRequest s3Configuration(DiscoverInputSchemaRequestS3Configuration s3Configuration) {
    this.s3Configuration = s3Configuration;
    return this;
  }

  /**
   * Get s3Configuration
   * @return s3Configuration
   */
  @javax.annotation.Nullable
  public DiscoverInputSchemaRequestS3Configuration getS3Configuration() {
    return s3Configuration;
  }

  public void setS3Configuration(DiscoverInputSchemaRequestS3Configuration s3Configuration) {
    this.s3Configuration = s3Configuration;
  }


  public DiscoverInputSchemaRequest inputProcessingConfiguration(DiscoverInputSchemaRequestInputProcessingConfiguration inputProcessingConfiguration) {
    this.inputProcessingConfiguration = inputProcessingConfiguration;
    return this;
  }

  /**
   * Get inputProcessingConfiguration
   * @return inputProcessingConfiguration
   */
  @javax.annotation.Nullable
  public DiscoverInputSchemaRequestInputProcessingConfiguration getInputProcessingConfiguration() {
    return inputProcessingConfiguration;
  }

  public void setInputProcessingConfiguration(DiscoverInputSchemaRequestInputProcessingConfiguration inputProcessingConfiguration) {
    this.inputProcessingConfiguration = inputProcessingConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoverInputSchemaRequest discoverInputSchemaRequest = (DiscoverInputSchemaRequest) o;
    return Objects.equals(this.resourceARN, discoverInputSchemaRequest.resourceARN) &&
        Objects.equals(this.roleARN, discoverInputSchemaRequest.roleARN) &&
        Objects.equals(this.inputStartingPositionConfiguration, discoverInputSchemaRequest.inputStartingPositionConfiguration) &&
        Objects.equals(this.s3Configuration, discoverInputSchemaRequest.s3Configuration) &&
        Objects.equals(this.inputProcessingConfiguration, discoverInputSchemaRequest.inputProcessingConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceARN, roleARN, inputStartingPositionConfiguration, s3Configuration, inputProcessingConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoverInputSchemaRequest {\n");
    sb.append("    resourceARN: ").append(toIndentedString(resourceARN)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    inputStartingPositionConfiguration: ").append(toIndentedString(inputStartingPositionConfiguration)).append("\n");
    sb.append("    s3Configuration: ").append(toIndentedString(s3Configuration)).append("\n");
    sb.append("    inputProcessingConfiguration: ").append(toIndentedString(inputProcessingConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceARN");
    openapiFields.add("RoleARN");
    openapiFields.add("InputStartingPositionConfiguration");
    openapiFields.add("S3Configuration");
    openapiFields.add("InputProcessingConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoverInputSchemaRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoverInputSchemaRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoverInputSchemaRequest is not found in the empty JSON string", DiscoverInputSchemaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoverInputSchemaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoverInputSchemaRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceARN`
      if (jsonObj.get("ResourceARN") != null && !jsonObj.get("ResourceARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceARN"));
      }
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `InputStartingPositionConfiguration`
      if (jsonObj.get("InputStartingPositionConfiguration") != null && !jsonObj.get("InputStartingPositionConfiguration").isJsonNull()) {
        DiscoverInputSchemaRequestInputStartingPositionConfiguration.validateJsonElement(jsonObj.get("InputStartingPositionConfiguration"));
      }
      // validate the optional field `S3Configuration`
      if (jsonObj.get("S3Configuration") != null && !jsonObj.get("S3Configuration").isJsonNull()) {
        DiscoverInputSchemaRequestS3Configuration.validateJsonElement(jsonObj.get("S3Configuration"));
      }
      // validate the optional field `InputProcessingConfiguration`
      if (jsonObj.get("InputProcessingConfiguration") != null && !jsonObj.get("InputProcessingConfiguration").isJsonNull()) {
        DiscoverInputSchemaRequestInputProcessingConfiguration.validateJsonElement(jsonObj.get("InputProcessingConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoverInputSchemaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoverInputSchemaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoverInputSchemaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoverInputSchemaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoverInputSchemaRequest>() {
           @Override
           public void write(JsonWriter out, DiscoverInputSchemaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoverInputSchemaRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoverInputSchemaRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoverInputSchemaRequest
   * @throws IOException if the JSON string is invalid with respect to DiscoverInputSchemaRequest
   */
  public static DiscoverInputSchemaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoverInputSchemaRequest.class);
  }

  /**
   * Convert an instance of DiscoverInputSchemaRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

