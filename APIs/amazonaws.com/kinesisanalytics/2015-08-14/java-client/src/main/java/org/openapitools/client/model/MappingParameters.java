/*
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MappingParametersCSVMappingParameters;
import org.openapitools.client.model.MappingParametersJSONMappingParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When configuring application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:34.996808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappingParameters {
  public static final String SERIALIZED_NAME_JS_O_N_MAPPING_PARAMETERS = "JSONMappingParameters";
  @SerializedName(SERIALIZED_NAME_JS_O_N_MAPPING_PARAMETERS)
  private MappingParametersJSONMappingParameters jsONMappingParameters;

  public static final String SERIALIZED_NAME_CS_V_MAPPING_PARAMETERS = "CSVMappingParameters";
  @SerializedName(SERIALIZED_NAME_CS_V_MAPPING_PARAMETERS)
  private MappingParametersCSVMappingParameters csVMappingParameters;

  public MappingParameters() {
  }

  public MappingParameters jsONMappingParameters(MappingParametersJSONMappingParameters jsONMappingParameters) {
    this.jsONMappingParameters = jsONMappingParameters;
    return this;
  }

  /**
   * Get jsONMappingParameters
   * @return jsONMappingParameters
   */
  @javax.annotation.Nullable
  public MappingParametersJSONMappingParameters getJsONMappingParameters() {
    return jsONMappingParameters;
  }

  public void setJsONMappingParameters(MappingParametersJSONMappingParameters jsONMappingParameters) {
    this.jsONMappingParameters = jsONMappingParameters;
  }


  public MappingParameters csVMappingParameters(MappingParametersCSVMappingParameters csVMappingParameters) {
    this.csVMappingParameters = csVMappingParameters;
    return this;
  }

  /**
   * Get csVMappingParameters
   * @return csVMappingParameters
   */
  @javax.annotation.Nullable
  public MappingParametersCSVMappingParameters getCsVMappingParameters() {
    return csVMappingParameters;
  }

  public void setCsVMappingParameters(MappingParametersCSVMappingParameters csVMappingParameters) {
    this.csVMappingParameters = csVMappingParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingParameters mappingParameters = (MappingParameters) o;
    return Objects.equals(this.jsONMappingParameters, mappingParameters.jsONMappingParameters) &&
        Objects.equals(this.csVMappingParameters, mappingParameters.csVMappingParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jsONMappingParameters, csVMappingParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingParameters {\n");
    sb.append("    jsONMappingParameters: ").append(toIndentedString(jsONMappingParameters)).append("\n");
    sb.append("    csVMappingParameters: ").append(toIndentedString(csVMappingParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JSONMappingParameters");
    openapiFields.add("CSVMappingParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappingParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappingParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingParameters is not found in the empty JSON string", MappingParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappingParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JSONMappingParameters`
      if (jsonObj.get("JSONMappingParameters") != null && !jsonObj.get("JSONMappingParameters").isJsonNull()) {
        MappingParametersJSONMappingParameters.validateJsonElement(jsonObj.get("JSONMappingParameters"));
      }
      // validate the optional field `CSVMappingParameters`
      if (jsonObj.get("CSVMappingParameters") != null && !jsonObj.get("CSVMappingParameters").isJsonNull()) {
        MappingParametersCSVMappingParameters.validateJsonElement(jsonObj.get("CSVMappingParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingParameters>() {
           @Override
           public void write(JsonWriter out, MappingParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappingParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappingParameters
   * @throws IOException if the JSON string is invalid with respect to MappingParameters
   */
  public static MappingParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingParameters.class);
  }

  /**
   * Convert an instance of MappingParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

