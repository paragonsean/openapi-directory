/*
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputUpdateInputParallelismUpdate;
import org.openapitools.client.model.InputUpdateInputProcessingConfigurationUpdate;
import org.openapitools.client.model.InputUpdateInputSchemaUpdate;
import org.openapitools.client.model.InputUpdateKinesisFirehoseInputUpdate;
import org.openapitools.client.model.InputUpdateKinesisStreamsInputUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes updates to a specific input configuration (identified by the &lt;code&gt;InputId&lt;/code&gt; of an application). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:34.996808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputUpdate {
  public static final String SERIALIZED_NAME_INPUT_ID = "InputId";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private String inputId;

  public static final String SERIALIZED_NAME_NAME_PREFIX_UPDATE = "NamePrefixUpdate";
  @SerializedName(SERIALIZED_NAME_NAME_PREFIX_UPDATE)
  private String namePrefixUpdate;

  public static final String SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION_UPDATE = "InputProcessingConfigurationUpdate";
  @SerializedName(SERIALIZED_NAME_INPUT_PROCESSING_CONFIGURATION_UPDATE)
  private InputUpdateInputProcessingConfigurationUpdate inputProcessingConfigurationUpdate;

  public static final String SERIALIZED_NAME_KINESIS_STREAMS_INPUT_UPDATE = "KinesisStreamsInputUpdate";
  @SerializedName(SERIALIZED_NAME_KINESIS_STREAMS_INPUT_UPDATE)
  private InputUpdateKinesisStreamsInputUpdate kinesisStreamsInputUpdate;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_INPUT_UPDATE = "KinesisFirehoseInputUpdate";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_INPUT_UPDATE)
  private InputUpdateKinesisFirehoseInputUpdate kinesisFirehoseInputUpdate;

  public static final String SERIALIZED_NAME_INPUT_SCHEMA_UPDATE = "InputSchemaUpdate";
  @SerializedName(SERIALIZED_NAME_INPUT_SCHEMA_UPDATE)
  private InputUpdateInputSchemaUpdate inputSchemaUpdate;

  public static final String SERIALIZED_NAME_INPUT_PARALLELISM_UPDATE = "InputParallelismUpdate";
  @SerializedName(SERIALIZED_NAME_INPUT_PARALLELISM_UPDATE)
  private InputUpdateInputParallelismUpdate inputParallelismUpdate;

  public InputUpdate() {
  }

  public InputUpdate inputId(String inputId) {
    this.inputId = inputId;
    return this;
  }

  /**
   * Get inputId
   * @return inputId
   */
  @javax.annotation.Nonnull
  public String getInputId() {
    return inputId;
  }

  public void setInputId(String inputId) {
    this.inputId = inputId;
  }


  public InputUpdate namePrefixUpdate(String namePrefixUpdate) {
    this.namePrefixUpdate = namePrefixUpdate;
    return this;
  }

  /**
   * Get namePrefixUpdate
   * @return namePrefixUpdate
   */
  @javax.annotation.Nullable
  public String getNamePrefixUpdate() {
    return namePrefixUpdate;
  }

  public void setNamePrefixUpdate(String namePrefixUpdate) {
    this.namePrefixUpdate = namePrefixUpdate;
  }


  public InputUpdate inputProcessingConfigurationUpdate(InputUpdateInputProcessingConfigurationUpdate inputProcessingConfigurationUpdate) {
    this.inputProcessingConfigurationUpdate = inputProcessingConfigurationUpdate;
    return this;
  }

  /**
   * Get inputProcessingConfigurationUpdate
   * @return inputProcessingConfigurationUpdate
   */
  @javax.annotation.Nullable
  public InputUpdateInputProcessingConfigurationUpdate getInputProcessingConfigurationUpdate() {
    return inputProcessingConfigurationUpdate;
  }

  public void setInputProcessingConfigurationUpdate(InputUpdateInputProcessingConfigurationUpdate inputProcessingConfigurationUpdate) {
    this.inputProcessingConfigurationUpdate = inputProcessingConfigurationUpdate;
  }


  public InputUpdate kinesisStreamsInputUpdate(InputUpdateKinesisStreamsInputUpdate kinesisStreamsInputUpdate) {
    this.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate;
    return this;
  }

  /**
   * Get kinesisStreamsInputUpdate
   * @return kinesisStreamsInputUpdate
   */
  @javax.annotation.Nullable
  public InputUpdateKinesisStreamsInputUpdate getKinesisStreamsInputUpdate() {
    return kinesisStreamsInputUpdate;
  }

  public void setKinesisStreamsInputUpdate(InputUpdateKinesisStreamsInputUpdate kinesisStreamsInputUpdate) {
    this.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate;
  }


  public InputUpdate kinesisFirehoseInputUpdate(InputUpdateKinesisFirehoseInputUpdate kinesisFirehoseInputUpdate) {
    this.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate;
    return this;
  }

  /**
   * Get kinesisFirehoseInputUpdate
   * @return kinesisFirehoseInputUpdate
   */
  @javax.annotation.Nullable
  public InputUpdateKinesisFirehoseInputUpdate getKinesisFirehoseInputUpdate() {
    return kinesisFirehoseInputUpdate;
  }

  public void setKinesisFirehoseInputUpdate(InputUpdateKinesisFirehoseInputUpdate kinesisFirehoseInputUpdate) {
    this.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate;
  }


  public InputUpdate inputSchemaUpdate(InputUpdateInputSchemaUpdate inputSchemaUpdate) {
    this.inputSchemaUpdate = inputSchemaUpdate;
    return this;
  }

  /**
   * Get inputSchemaUpdate
   * @return inputSchemaUpdate
   */
  @javax.annotation.Nullable
  public InputUpdateInputSchemaUpdate getInputSchemaUpdate() {
    return inputSchemaUpdate;
  }

  public void setInputSchemaUpdate(InputUpdateInputSchemaUpdate inputSchemaUpdate) {
    this.inputSchemaUpdate = inputSchemaUpdate;
  }


  public InputUpdate inputParallelismUpdate(InputUpdateInputParallelismUpdate inputParallelismUpdate) {
    this.inputParallelismUpdate = inputParallelismUpdate;
    return this;
  }

  /**
   * Get inputParallelismUpdate
   * @return inputParallelismUpdate
   */
  @javax.annotation.Nullable
  public InputUpdateInputParallelismUpdate getInputParallelismUpdate() {
    return inputParallelismUpdate;
  }

  public void setInputParallelismUpdate(InputUpdateInputParallelismUpdate inputParallelismUpdate) {
    this.inputParallelismUpdate = inputParallelismUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputUpdate inputUpdate = (InputUpdate) o;
    return Objects.equals(this.inputId, inputUpdate.inputId) &&
        Objects.equals(this.namePrefixUpdate, inputUpdate.namePrefixUpdate) &&
        Objects.equals(this.inputProcessingConfigurationUpdate, inputUpdate.inputProcessingConfigurationUpdate) &&
        Objects.equals(this.kinesisStreamsInputUpdate, inputUpdate.kinesisStreamsInputUpdate) &&
        Objects.equals(this.kinesisFirehoseInputUpdate, inputUpdate.kinesisFirehoseInputUpdate) &&
        Objects.equals(this.inputSchemaUpdate, inputUpdate.inputSchemaUpdate) &&
        Objects.equals(this.inputParallelismUpdate, inputUpdate.inputParallelismUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputId, namePrefixUpdate, inputProcessingConfigurationUpdate, kinesisStreamsInputUpdate, kinesisFirehoseInputUpdate, inputSchemaUpdate, inputParallelismUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputUpdate {\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    namePrefixUpdate: ").append(toIndentedString(namePrefixUpdate)).append("\n");
    sb.append("    inputProcessingConfigurationUpdate: ").append(toIndentedString(inputProcessingConfigurationUpdate)).append("\n");
    sb.append("    kinesisStreamsInputUpdate: ").append(toIndentedString(kinesisStreamsInputUpdate)).append("\n");
    sb.append("    kinesisFirehoseInputUpdate: ").append(toIndentedString(kinesisFirehoseInputUpdate)).append("\n");
    sb.append("    inputSchemaUpdate: ").append(toIndentedString(inputSchemaUpdate)).append("\n");
    sb.append("    inputParallelismUpdate: ").append(toIndentedString(inputParallelismUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputId");
    openapiFields.add("NamePrefixUpdate");
    openapiFields.add("InputProcessingConfigurationUpdate");
    openapiFields.add("KinesisStreamsInputUpdate");
    openapiFields.add("KinesisFirehoseInputUpdate");
    openapiFields.add("InputSchemaUpdate");
    openapiFields.add("InputParallelismUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InputId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputUpdate is not found in the empty JSON string", InputUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InputId`
      String.validateJsonElement(jsonObj.get("InputId"));
      // validate the optional field `NamePrefixUpdate`
      if (jsonObj.get("NamePrefixUpdate") != null && !jsonObj.get("NamePrefixUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NamePrefixUpdate"));
      }
      // validate the optional field `InputProcessingConfigurationUpdate`
      if (jsonObj.get("InputProcessingConfigurationUpdate") != null && !jsonObj.get("InputProcessingConfigurationUpdate").isJsonNull()) {
        InputUpdateInputProcessingConfigurationUpdate.validateJsonElement(jsonObj.get("InputProcessingConfigurationUpdate"));
      }
      // validate the optional field `KinesisStreamsInputUpdate`
      if (jsonObj.get("KinesisStreamsInputUpdate") != null && !jsonObj.get("KinesisStreamsInputUpdate").isJsonNull()) {
        InputUpdateKinesisStreamsInputUpdate.validateJsonElement(jsonObj.get("KinesisStreamsInputUpdate"));
      }
      // validate the optional field `KinesisFirehoseInputUpdate`
      if (jsonObj.get("KinesisFirehoseInputUpdate") != null && !jsonObj.get("KinesisFirehoseInputUpdate").isJsonNull()) {
        InputUpdateKinesisFirehoseInputUpdate.validateJsonElement(jsonObj.get("KinesisFirehoseInputUpdate"));
      }
      // validate the optional field `InputSchemaUpdate`
      if (jsonObj.get("InputSchemaUpdate") != null && !jsonObj.get("InputSchemaUpdate").isJsonNull()) {
        InputUpdateInputSchemaUpdate.validateJsonElement(jsonObj.get("InputSchemaUpdate"));
      }
      // validate the optional field `InputParallelismUpdate`
      if (jsonObj.get("InputParallelismUpdate") != null && !jsonObj.get("InputParallelismUpdate").isJsonNull()) {
        InputUpdateInputParallelismUpdate.validateJsonElement(jsonObj.get("InputParallelismUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<InputUpdate>() {
           @Override
           public void write(JsonWriter out, InputUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputUpdate
   * @throws IOException if the JSON string is invalid with respect to InputUpdate
   */
  public static InputUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputUpdate.class);
  }

  /**
   * Convert an instance of InputUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

