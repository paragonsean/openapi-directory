/*
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReferenceDataSourceUpdateReferenceSchemaUpdate;
import org.openapitools.client.model.ReferenceDataSourceUpdateS3ReferenceDataSourceUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When you update a reference data source configuration for an application, this object provides all the updated values (such as the source bucket name and object key name), the in-application table name that is created, and updated mapping information that maps the data in the Amazon S3 object to the in-application reference table that is created.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:34.996808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceDataSourceUpdate {
  public static final String SERIALIZED_NAME_REFERENCE_ID = "ReferenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_TABLE_NAME_UPDATE = "TableNameUpdate";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME_UPDATE)
  private String tableNameUpdate;

  public static final String SERIALIZED_NAME_S3_REFERENCE_DATA_SOURCE_UPDATE = "S3ReferenceDataSourceUpdate";
  @SerializedName(SERIALIZED_NAME_S3_REFERENCE_DATA_SOURCE_UPDATE)
  private ReferenceDataSourceUpdateS3ReferenceDataSourceUpdate s3ReferenceDataSourceUpdate;

  public static final String SERIALIZED_NAME_REFERENCE_SCHEMA_UPDATE = "ReferenceSchemaUpdate";
  @SerializedName(SERIALIZED_NAME_REFERENCE_SCHEMA_UPDATE)
  private ReferenceDataSourceUpdateReferenceSchemaUpdate referenceSchemaUpdate;

  public ReferenceDataSourceUpdate() {
  }

  public ReferenceDataSourceUpdate referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public ReferenceDataSourceUpdate tableNameUpdate(String tableNameUpdate) {
    this.tableNameUpdate = tableNameUpdate;
    return this;
  }

  /**
   * Get tableNameUpdate
   * @return tableNameUpdate
   */
  @javax.annotation.Nullable
  public String getTableNameUpdate() {
    return tableNameUpdate;
  }

  public void setTableNameUpdate(String tableNameUpdate) {
    this.tableNameUpdate = tableNameUpdate;
  }


  public ReferenceDataSourceUpdate s3ReferenceDataSourceUpdate(ReferenceDataSourceUpdateS3ReferenceDataSourceUpdate s3ReferenceDataSourceUpdate) {
    this.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate;
    return this;
  }

  /**
   * Get s3ReferenceDataSourceUpdate
   * @return s3ReferenceDataSourceUpdate
   */
  @javax.annotation.Nullable
  public ReferenceDataSourceUpdateS3ReferenceDataSourceUpdate getS3ReferenceDataSourceUpdate() {
    return s3ReferenceDataSourceUpdate;
  }

  public void setS3ReferenceDataSourceUpdate(ReferenceDataSourceUpdateS3ReferenceDataSourceUpdate s3ReferenceDataSourceUpdate) {
    this.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate;
  }


  public ReferenceDataSourceUpdate referenceSchemaUpdate(ReferenceDataSourceUpdateReferenceSchemaUpdate referenceSchemaUpdate) {
    this.referenceSchemaUpdate = referenceSchemaUpdate;
    return this;
  }

  /**
   * Get referenceSchemaUpdate
   * @return referenceSchemaUpdate
   */
  @javax.annotation.Nullable
  public ReferenceDataSourceUpdateReferenceSchemaUpdate getReferenceSchemaUpdate() {
    return referenceSchemaUpdate;
  }

  public void setReferenceSchemaUpdate(ReferenceDataSourceUpdateReferenceSchemaUpdate referenceSchemaUpdate) {
    this.referenceSchemaUpdate = referenceSchemaUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceDataSourceUpdate referenceDataSourceUpdate = (ReferenceDataSourceUpdate) o;
    return Objects.equals(this.referenceId, referenceDataSourceUpdate.referenceId) &&
        Objects.equals(this.tableNameUpdate, referenceDataSourceUpdate.tableNameUpdate) &&
        Objects.equals(this.s3ReferenceDataSourceUpdate, referenceDataSourceUpdate.s3ReferenceDataSourceUpdate) &&
        Objects.equals(this.referenceSchemaUpdate, referenceDataSourceUpdate.referenceSchemaUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceId, tableNameUpdate, s3ReferenceDataSourceUpdate, referenceSchemaUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceDataSourceUpdate {\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    tableNameUpdate: ").append(toIndentedString(tableNameUpdate)).append("\n");
    sb.append("    s3ReferenceDataSourceUpdate: ").append(toIndentedString(s3ReferenceDataSourceUpdate)).append("\n");
    sb.append("    referenceSchemaUpdate: ").append(toIndentedString(referenceSchemaUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReferenceId");
    openapiFields.add("TableNameUpdate");
    openapiFields.add("S3ReferenceDataSourceUpdate");
    openapiFields.add("ReferenceSchemaUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReferenceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceDataSourceUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceDataSourceUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceDataSourceUpdate is not found in the empty JSON string", ReferenceDataSourceUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceDataSourceUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceDataSourceUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReferenceDataSourceUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReferenceId`
      String.validateJsonElement(jsonObj.get("ReferenceId"));
      // validate the optional field `TableNameUpdate`
      if (jsonObj.get("TableNameUpdate") != null && !jsonObj.get("TableNameUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableNameUpdate"));
      }
      // validate the optional field `S3ReferenceDataSourceUpdate`
      if (jsonObj.get("S3ReferenceDataSourceUpdate") != null && !jsonObj.get("S3ReferenceDataSourceUpdate").isJsonNull()) {
        ReferenceDataSourceUpdateS3ReferenceDataSourceUpdate.validateJsonElement(jsonObj.get("S3ReferenceDataSourceUpdate"));
      }
      // validate the optional field `ReferenceSchemaUpdate`
      if (jsonObj.get("ReferenceSchemaUpdate") != null && !jsonObj.get("ReferenceSchemaUpdate").isJsonNull()) {
        ReferenceDataSourceUpdateReferenceSchemaUpdate.validateJsonElement(jsonObj.get("ReferenceSchemaUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceDataSourceUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceDataSourceUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceDataSourceUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceDataSourceUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceDataSourceUpdate>() {
           @Override
           public void write(JsonWriter out, ReferenceDataSourceUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceDataSourceUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceDataSourceUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceDataSourceUpdate
   * @throws IOException if the JSON string is invalid with respect to ReferenceDataSourceUpdate
   */
  public static ReferenceDataSourceUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceDataSourceUpdate.class);
  }

  /**
   * Convert an instance of ReferenceDataSourceUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

