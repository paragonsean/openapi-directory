/*
 * Amazon Kinesis Analytics
 * <fullname>Amazon Kinesis Analytics</fullname> <p> <b>Overview</b> </p> <note> <p>This documentation is for version 1 of the Amazon Kinesis Data Analytics API, which only supports SQL applications. Version 2 of the API supports SQL and Java applications. For more information about version 2, see <a href=\"/kinesisanalytics/latest/apiv2/Welcome.html\">Amazon Kinesis Data Analytics API V2 Documentation</a>.</p> </note> <p>This is the <i>Amazon Kinesis Analytics v1 API Reference</i>. The Amazon Kinesis Analytics Developer Guide provides additional information. </p>
 *
 * The version of the OpenAPI document: 2015-08-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes updates to apply to an existing Amazon Kinesis Analytics application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:34.996808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationUpdate {
  public static final String SERIALIZED_NAME_INPUT_UPDATES = "InputUpdates";
  @SerializedName(SERIALIZED_NAME_INPUT_UPDATES)
  private List inputUpdates;

  public static final String SERIALIZED_NAME_APPLICATION_CODE_UPDATE = "ApplicationCodeUpdate";
  @SerializedName(SERIALIZED_NAME_APPLICATION_CODE_UPDATE)
  private String applicationCodeUpdate;

  public static final String SERIALIZED_NAME_OUTPUT_UPDATES = "OutputUpdates";
  @SerializedName(SERIALIZED_NAME_OUTPUT_UPDATES)
  private List outputUpdates;

  public static final String SERIALIZED_NAME_REFERENCE_DATA_SOURCE_UPDATES = "ReferenceDataSourceUpdates";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DATA_SOURCE_UPDATES)
  private List referenceDataSourceUpdates;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTION_UPDATES = "CloudWatchLoggingOptionUpdates";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTION_UPDATES)
  private List cloudWatchLoggingOptionUpdates;

  public ApplicationUpdate() {
  }

  public ApplicationUpdate inputUpdates(List inputUpdates) {
    this.inputUpdates = inputUpdates;
    return this;
  }

  /**
   * Get inputUpdates
   * @return inputUpdates
   */
  @javax.annotation.Nullable
  public List getInputUpdates() {
    return inputUpdates;
  }

  public void setInputUpdates(List inputUpdates) {
    this.inputUpdates = inputUpdates;
  }


  public ApplicationUpdate applicationCodeUpdate(String applicationCodeUpdate) {
    this.applicationCodeUpdate = applicationCodeUpdate;
    return this;
  }

  /**
   * Get applicationCodeUpdate
   * @return applicationCodeUpdate
   */
  @javax.annotation.Nullable
  public String getApplicationCodeUpdate() {
    return applicationCodeUpdate;
  }

  public void setApplicationCodeUpdate(String applicationCodeUpdate) {
    this.applicationCodeUpdate = applicationCodeUpdate;
  }


  public ApplicationUpdate outputUpdates(List outputUpdates) {
    this.outputUpdates = outputUpdates;
    return this;
  }

  /**
   * Get outputUpdates
   * @return outputUpdates
   */
  @javax.annotation.Nullable
  public List getOutputUpdates() {
    return outputUpdates;
  }

  public void setOutputUpdates(List outputUpdates) {
    this.outputUpdates = outputUpdates;
  }


  public ApplicationUpdate referenceDataSourceUpdates(List referenceDataSourceUpdates) {
    this.referenceDataSourceUpdates = referenceDataSourceUpdates;
    return this;
  }

  /**
   * Get referenceDataSourceUpdates
   * @return referenceDataSourceUpdates
   */
  @javax.annotation.Nullable
  public List getReferenceDataSourceUpdates() {
    return referenceDataSourceUpdates;
  }

  public void setReferenceDataSourceUpdates(List referenceDataSourceUpdates) {
    this.referenceDataSourceUpdates = referenceDataSourceUpdates;
  }


  public ApplicationUpdate cloudWatchLoggingOptionUpdates(List cloudWatchLoggingOptionUpdates) {
    this.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptionUpdates
   * @return cloudWatchLoggingOptionUpdates
   */
  @javax.annotation.Nullable
  public List getCloudWatchLoggingOptionUpdates() {
    return cloudWatchLoggingOptionUpdates;
  }

  public void setCloudWatchLoggingOptionUpdates(List cloudWatchLoggingOptionUpdates) {
    this.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationUpdate applicationUpdate = (ApplicationUpdate) o;
    return Objects.equals(this.inputUpdates, applicationUpdate.inputUpdates) &&
        Objects.equals(this.applicationCodeUpdate, applicationUpdate.applicationCodeUpdate) &&
        Objects.equals(this.outputUpdates, applicationUpdate.outputUpdates) &&
        Objects.equals(this.referenceDataSourceUpdates, applicationUpdate.referenceDataSourceUpdates) &&
        Objects.equals(this.cloudWatchLoggingOptionUpdates, applicationUpdate.cloudWatchLoggingOptionUpdates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputUpdates, applicationCodeUpdate, outputUpdates, referenceDataSourceUpdates, cloudWatchLoggingOptionUpdates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationUpdate {\n");
    sb.append("    inputUpdates: ").append(toIndentedString(inputUpdates)).append("\n");
    sb.append("    applicationCodeUpdate: ").append(toIndentedString(applicationCodeUpdate)).append("\n");
    sb.append("    outputUpdates: ").append(toIndentedString(outputUpdates)).append("\n");
    sb.append("    referenceDataSourceUpdates: ").append(toIndentedString(referenceDataSourceUpdates)).append("\n");
    sb.append("    cloudWatchLoggingOptionUpdates: ").append(toIndentedString(cloudWatchLoggingOptionUpdates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InputUpdates");
    openapiFields.add("ApplicationCodeUpdate");
    openapiFields.add("OutputUpdates");
    openapiFields.add("ReferenceDataSourceUpdates");
    openapiFields.add("CloudWatchLoggingOptionUpdates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationUpdate is not found in the empty JSON string", ApplicationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InputUpdates`
      if (jsonObj.get("InputUpdates") != null && !jsonObj.get("InputUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InputUpdates"));
      }
      // validate the optional field `ApplicationCodeUpdate`
      if (jsonObj.get("ApplicationCodeUpdate") != null && !jsonObj.get("ApplicationCodeUpdate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationCodeUpdate"));
      }
      // validate the optional field `OutputUpdates`
      if (jsonObj.get("OutputUpdates") != null && !jsonObj.get("OutputUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OutputUpdates"));
      }
      // validate the optional field `ReferenceDataSourceUpdates`
      if (jsonObj.get("ReferenceDataSourceUpdates") != null && !jsonObj.get("ReferenceDataSourceUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReferenceDataSourceUpdates"));
      }
      // validate the optional field `CloudWatchLoggingOptionUpdates`
      if (jsonObj.get("CloudWatchLoggingOptionUpdates") != null && !jsonObj.get("CloudWatchLoggingOptionUpdates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CloudWatchLoggingOptionUpdates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationUpdate>() {
           @Override
           public void write(JsonWriter out, ApplicationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationUpdate
   * @throws IOException if the JSON string is invalid with respect to ApplicationUpdate
   */
  public static ApplicationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationUpdate.class);
  }

  /**
   * Convert an instance of ApplicationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

