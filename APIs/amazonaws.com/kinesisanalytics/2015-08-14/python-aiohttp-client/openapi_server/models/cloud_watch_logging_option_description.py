# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudWatchLoggingOptionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_watch_logging_option_id: str=None, log_stream_arn: str=None, role_arn: str=None):
        """CloudWatchLoggingOptionDescription - a model defined in OpenAPI

        :param cloud_watch_logging_option_id: The cloud_watch_logging_option_id of this CloudWatchLoggingOptionDescription.
        :param log_stream_arn: The log_stream_arn of this CloudWatchLoggingOptionDescription.
        :param role_arn: The role_arn of this CloudWatchLoggingOptionDescription.
        """
        self.openapi_types = {
            'cloud_watch_logging_option_id': str,
            'log_stream_arn': str,
            'role_arn': str
        }

        self.attribute_map = {
            'cloud_watch_logging_option_id': 'CloudWatchLoggingOptionId',
            'log_stream_arn': 'LogStreamARN',
            'role_arn': 'RoleARN'
        }

        self._cloud_watch_logging_option_id = cloud_watch_logging_option_id
        self._log_stream_arn = log_stream_arn
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchLoggingOptionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchLoggingOptionDescription of this CloudWatchLoggingOptionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_watch_logging_option_id(self):
        """Gets the cloud_watch_logging_option_id of this CloudWatchLoggingOptionDescription.


        :return: The cloud_watch_logging_option_id of this CloudWatchLoggingOptionDescription.
        :rtype: str
        """
        return self._cloud_watch_logging_option_id

    @cloud_watch_logging_option_id.setter
    def cloud_watch_logging_option_id(self, cloud_watch_logging_option_id):
        """Sets the cloud_watch_logging_option_id of this CloudWatchLoggingOptionDescription.


        :param cloud_watch_logging_option_id: The cloud_watch_logging_option_id of this CloudWatchLoggingOptionDescription.
        :type cloud_watch_logging_option_id: str
        """

        self._cloud_watch_logging_option_id = cloud_watch_logging_option_id

    @property
    def log_stream_arn(self):
        """Gets the log_stream_arn of this CloudWatchLoggingOptionDescription.


        :return: The log_stream_arn of this CloudWatchLoggingOptionDescription.
        :rtype: str
        """
        return self._log_stream_arn

    @log_stream_arn.setter
    def log_stream_arn(self, log_stream_arn):
        """Sets the log_stream_arn of this CloudWatchLoggingOptionDescription.


        :param log_stream_arn: The log_stream_arn of this CloudWatchLoggingOptionDescription.
        :type log_stream_arn: str
        """
        if log_stream_arn is None:
            raise ValueError("Invalid value for `log_stream_arn`, must not be `None`")

        self._log_stream_arn = log_stream_arn

    @property
    def role_arn(self):
        """Gets the role_arn of this CloudWatchLoggingOptionDescription.


        :return: The role_arn of this CloudWatchLoggingOptionDescription.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CloudWatchLoggingOptionDescription.


        :param role_arn: The role_arn of this CloudWatchLoggingOptionDescription.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
