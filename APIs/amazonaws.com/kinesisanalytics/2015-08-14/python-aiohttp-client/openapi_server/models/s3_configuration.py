# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Configuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, bucket_arn: str=None, file_key: str=None):
        """S3Configuration - a model defined in OpenAPI

        :param role_arn: The role_arn of this S3Configuration.
        :param bucket_arn: The bucket_arn of this S3Configuration.
        :param file_key: The file_key of this S3Configuration.
        """
        self.openapi_types = {
            'role_arn': str,
            'bucket_arn': str,
            'file_key': str
        }

        self.attribute_map = {
            'role_arn': 'RoleARN',
            'bucket_arn': 'BucketARN',
            'file_key': 'FileKey'
        }

        self._role_arn = role_arn
        self._bucket_arn = bucket_arn
        self._file_key = file_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Configuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Configuration of this S3Configuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this S3Configuration.


        :return: The role_arn of this S3Configuration.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this S3Configuration.


        :param role_arn: The role_arn of this S3Configuration.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def bucket_arn(self):
        """Gets the bucket_arn of this S3Configuration.


        :return: The bucket_arn of this S3Configuration.
        :rtype: str
        """
        return self._bucket_arn

    @bucket_arn.setter
    def bucket_arn(self, bucket_arn):
        """Sets the bucket_arn of this S3Configuration.


        :param bucket_arn: The bucket_arn of this S3Configuration.
        :type bucket_arn: str
        """
        if bucket_arn is None:
            raise ValueError("Invalid value for `bucket_arn`, must not be `None`")

        self._bucket_arn = bucket_arn

    @property
    def file_key(self):
        """Gets the file_key of this S3Configuration.


        :return: The file_key of this S3Configuration.
        :rtype: str
        """
        return self._file_key

    @file_key.setter
    def file_key(self, file_key):
        """Sets the file_key of this S3Configuration.


        :param file_key: The file_key of this S3Configuration.
        :type file_key: str
        """
        if file_key is None:
            raise ValueError("Invalid value for `file_key`, must not be `None`")

        self._file_key = file_key
