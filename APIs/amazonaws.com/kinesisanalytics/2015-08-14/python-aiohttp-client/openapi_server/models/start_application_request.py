# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, input_configurations: List=None):
        """StartApplicationRequest - a model defined in OpenAPI

        :param application_name: The application_name of this StartApplicationRequest.
        :param input_configurations: The input_configurations of this StartApplicationRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'input_configurations': List
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'input_configurations': 'InputConfigurations'
        }

        self._application_name = application_name
        self._input_configurations = input_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartApplicationRequest of this StartApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this StartApplicationRequest.


        :return: The application_name of this StartApplicationRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this StartApplicationRequest.


        :param application_name: The application_name of this StartApplicationRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def input_configurations(self):
        """Gets the input_configurations of this StartApplicationRequest.


        :return: The input_configurations of this StartApplicationRequest.
        :rtype: List
        """
        return self._input_configurations

    @input_configurations.setter
    def input_configurations(self, input_configurations):
        """Sets the input_configurations of this StartApplicationRequest.


        :param input_configurations: The input_configurations of this StartApplicationRequest.
        :type input_configurations: List
        """
        if input_configurations is None:
            raise ValueError("Invalid value for `input_configurations`, must not be `None`")

        self._input_configurations = input_configurations
