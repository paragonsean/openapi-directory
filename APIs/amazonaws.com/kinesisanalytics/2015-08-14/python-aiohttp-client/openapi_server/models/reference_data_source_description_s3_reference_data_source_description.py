# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_arn: str=None, file_key: str=None, reference_role_arn: str=None):
        """ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription - a model defined in OpenAPI

        :param bucket_arn: The bucket_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :param file_key: The file_key of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :param reference_role_arn: The reference_role_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        """
        self.openapi_types = {
            'bucket_arn': str,
            'file_key': str,
            'reference_role_arn': str
        }

        self.attribute_map = {
            'bucket_arn': 'BucketARN',
            'file_key': 'FileKey',
            'reference_role_arn': 'ReferenceRoleARN'
        }

        self._bucket_arn = bucket_arn
        self._file_key = file_key
        self._reference_role_arn = reference_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceDataSourceDescription_S3ReferenceDataSourceDescription of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_arn(self):
        """Gets the bucket_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.


        :return: The bucket_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :rtype: str
        """
        return self._bucket_arn

    @bucket_arn.setter
    def bucket_arn(self, bucket_arn):
        """Sets the bucket_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.


        :param bucket_arn: The bucket_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :type bucket_arn: str
        """
        if bucket_arn is None:
            raise ValueError("Invalid value for `bucket_arn`, must not be `None`")

        self._bucket_arn = bucket_arn

    @property
    def file_key(self):
        """Gets the file_key of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.


        :return: The file_key of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :rtype: str
        """
        return self._file_key

    @file_key.setter
    def file_key(self, file_key):
        """Sets the file_key of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.


        :param file_key: The file_key of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :type file_key: str
        """
        if file_key is None:
            raise ValueError("Invalid value for `file_key`, must not be `None`")

        self._file_key = file_key

    @property
    def reference_role_arn(self):
        """Gets the reference_role_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.


        :return: The reference_role_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :rtype: str
        """
        return self._reference_role_arn

    @reference_role_arn.setter
    def reference_role_arn(self, reference_role_arn):
        """Sets the reference_role_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.


        :param reference_role_arn: The reference_role_arn of this ReferenceDataSourceDescriptionS3ReferenceDataSourceDescription.
        :type reference_role_arn: str
        """
        if reference_role_arn is None:
            raise ValueError("Invalid value for `reference_role_arn`, must not be `None`")

        self._reference_role_arn = reference_role_arn
