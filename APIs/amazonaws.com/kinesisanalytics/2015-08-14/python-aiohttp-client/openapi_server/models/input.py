# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_input_parallelism import InputInputParallelism
from openapi_server.models.input_input_processing_configuration import InputInputProcessingConfiguration
from openapi_server.models.input_input_schema import InputInputSchema
from openapi_server.models.input_kinesis_firehose_input import InputKinesisFirehoseInput
from openapi_server.models.input_kinesis_streams_input import InputKinesisStreamsInput
from openapi_server import util


class Input(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_prefix: str=None, input_processing_configuration: InputInputProcessingConfiguration=None, kinesis_streams_input: InputKinesisStreamsInput=None, kinesis_firehose_input: InputKinesisFirehoseInput=None, input_parallelism: InputInputParallelism=None, input_schema: InputInputSchema=None):
        """Input - a model defined in OpenAPI

        :param name_prefix: The name_prefix of this Input.
        :param input_processing_configuration: The input_processing_configuration of this Input.
        :param kinesis_streams_input: The kinesis_streams_input of this Input.
        :param kinesis_firehose_input: The kinesis_firehose_input of this Input.
        :param input_parallelism: The input_parallelism of this Input.
        :param input_schema: The input_schema of this Input.
        """
        self.openapi_types = {
            'name_prefix': str,
            'input_processing_configuration': InputInputProcessingConfiguration,
            'kinesis_streams_input': InputKinesisStreamsInput,
            'kinesis_firehose_input': InputKinesisFirehoseInput,
            'input_parallelism': InputInputParallelism,
            'input_schema': InputInputSchema
        }

        self.attribute_map = {
            'name_prefix': 'NamePrefix',
            'input_processing_configuration': 'InputProcessingConfiguration',
            'kinesis_streams_input': 'KinesisStreamsInput',
            'kinesis_firehose_input': 'KinesisFirehoseInput',
            'input_parallelism': 'InputParallelism',
            'input_schema': 'InputSchema'
        }

        self._name_prefix = name_prefix
        self._input_processing_configuration = input_processing_configuration
        self._kinesis_streams_input = kinesis_streams_input
        self._kinesis_firehose_input = kinesis_firehose_input
        self._input_parallelism = input_parallelism
        self._input_schema = input_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Input of this Input.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_prefix(self):
        """Gets the name_prefix of this Input.


        :return: The name_prefix of this Input.
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this Input.


        :param name_prefix: The name_prefix of this Input.
        :type name_prefix: str
        """
        if name_prefix is None:
            raise ValueError("Invalid value for `name_prefix`, must not be `None`")

        self._name_prefix = name_prefix

    @property
    def input_processing_configuration(self):
        """Gets the input_processing_configuration of this Input.


        :return: The input_processing_configuration of this Input.
        :rtype: InputInputProcessingConfiguration
        """
        return self._input_processing_configuration

    @input_processing_configuration.setter
    def input_processing_configuration(self, input_processing_configuration):
        """Sets the input_processing_configuration of this Input.


        :param input_processing_configuration: The input_processing_configuration of this Input.
        :type input_processing_configuration: InputInputProcessingConfiguration
        """

        self._input_processing_configuration = input_processing_configuration

    @property
    def kinesis_streams_input(self):
        """Gets the kinesis_streams_input of this Input.


        :return: The kinesis_streams_input of this Input.
        :rtype: InputKinesisStreamsInput
        """
        return self._kinesis_streams_input

    @kinesis_streams_input.setter
    def kinesis_streams_input(self, kinesis_streams_input):
        """Sets the kinesis_streams_input of this Input.


        :param kinesis_streams_input: The kinesis_streams_input of this Input.
        :type kinesis_streams_input: InputKinesisStreamsInput
        """

        self._kinesis_streams_input = kinesis_streams_input

    @property
    def kinesis_firehose_input(self):
        """Gets the kinesis_firehose_input of this Input.


        :return: The kinesis_firehose_input of this Input.
        :rtype: InputKinesisFirehoseInput
        """
        return self._kinesis_firehose_input

    @kinesis_firehose_input.setter
    def kinesis_firehose_input(self, kinesis_firehose_input):
        """Sets the kinesis_firehose_input of this Input.


        :param kinesis_firehose_input: The kinesis_firehose_input of this Input.
        :type kinesis_firehose_input: InputKinesisFirehoseInput
        """

        self._kinesis_firehose_input = kinesis_firehose_input

    @property
    def input_parallelism(self):
        """Gets the input_parallelism of this Input.


        :return: The input_parallelism of this Input.
        :rtype: InputInputParallelism
        """
        return self._input_parallelism

    @input_parallelism.setter
    def input_parallelism(self, input_parallelism):
        """Sets the input_parallelism of this Input.


        :param input_parallelism: The input_parallelism of this Input.
        :type input_parallelism: InputInputParallelism
        """

        self._input_parallelism = input_parallelism

    @property
    def input_schema(self):
        """Gets the input_schema of this Input.


        :return: The input_schema of this Input.
        :rtype: InputInputSchema
        """
        return self._input_schema

    @input_schema.setter
    def input_schema(self, input_schema):
        """Sets the input_schema of this Input.


        :param input_schema: The input_schema of this Input.
        :type input_schema: InputInputSchema
        """
        if input_schema is None:
            raise ValueError("Invalid value for `input_schema`, must not be `None`")

        self._input_schema = input_schema
