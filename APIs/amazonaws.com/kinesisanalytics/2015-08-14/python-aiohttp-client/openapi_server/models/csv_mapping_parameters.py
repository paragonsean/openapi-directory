# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CSVMappingParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_row_delimiter: str=None, record_column_delimiter: str=None):
        """CSVMappingParameters - a model defined in OpenAPI

        :param record_row_delimiter: The record_row_delimiter of this CSVMappingParameters.
        :param record_column_delimiter: The record_column_delimiter of this CSVMappingParameters.
        """
        self.openapi_types = {
            'record_row_delimiter': str,
            'record_column_delimiter': str
        }

        self.attribute_map = {
            'record_row_delimiter': 'RecordRowDelimiter',
            'record_column_delimiter': 'RecordColumnDelimiter'
        }

        self._record_row_delimiter = record_row_delimiter
        self._record_column_delimiter = record_column_delimiter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CSVMappingParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CSVMappingParameters of this CSVMappingParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_row_delimiter(self):
        """Gets the record_row_delimiter of this CSVMappingParameters.


        :return: The record_row_delimiter of this CSVMappingParameters.
        :rtype: str
        """
        return self._record_row_delimiter

    @record_row_delimiter.setter
    def record_row_delimiter(self, record_row_delimiter):
        """Sets the record_row_delimiter of this CSVMappingParameters.


        :param record_row_delimiter: The record_row_delimiter of this CSVMappingParameters.
        :type record_row_delimiter: str
        """
        if record_row_delimiter is None:
            raise ValueError("Invalid value for `record_row_delimiter`, must not be `None`")

        self._record_row_delimiter = record_row_delimiter

    @property
    def record_column_delimiter(self):
        """Gets the record_column_delimiter of this CSVMappingParameters.


        :return: The record_column_delimiter of this CSVMappingParameters.
        :rtype: str
        """
        return self._record_column_delimiter

    @record_column_delimiter.setter
    def record_column_delimiter(self, record_column_delimiter):
        """Sets the record_column_delimiter of this CSVMappingParameters.


        :param record_column_delimiter: The record_column_delimiter of this CSVMappingParameters.
        :type record_column_delimiter: str
        """
        if record_column_delimiter is None:
            raise ValueError("Invalid value for `record_column_delimiter`, must not be `None`")

        self._record_column_delimiter = record_column_delimiter
