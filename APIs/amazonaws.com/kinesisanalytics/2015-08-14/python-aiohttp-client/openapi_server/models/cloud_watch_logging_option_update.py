# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudWatchLoggingOptionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_watch_logging_option_id: str=None, log_stream_arn_update: str=None, role_arn_update: str=None):
        """CloudWatchLoggingOptionUpdate - a model defined in OpenAPI

        :param cloud_watch_logging_option_id: The cloud_watch_logging_option_id of this CloudWatchLoggingOptionUpdate.
        :param log_stream_arn_update: The log_stream_arn_update of this CloudWatchLoggingOptionUpdate.
        :param role_arn_update: The role_arn_update of this CloudWatchLoggingOptionUpdate.
        """
        self.openapi_types = {
            'cloud_watch_logging_option_id': str,
            'log_stream_arn_update': str,
            'role_arn_update': str
        }

        self.attribute_map = {
            'cloud_watch_logging_option_id': 'CloudWatchLoggingOptionId',
            'log_stream_arn_update': 'LogStreamARNUpdate',
            'role_arn_update': 'RoleARNUpdate'
        }

        self._cloud_watch_logging_option_id = cloud_watch_logging_option_id
        self._log_stream_arn_update = log_stream_arn_update
        self._role_arn_update = role_arn_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchLoggingOptionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchLoggingOptionUpdate of this CloudWatchLoggingOptionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_watch_logging_option_id(self):
        """Gets the cloud_watch_logging_option_id of this CloudWatchLoggingOptionUpdate.


        :return: The cloud_watch_logging_option_id of this CloudWatchLoggingOptionUpdate.
        :rtype: str
        """
        return self._cloud_watch_logging_option_id

    @cloud_watch_logging_option_id.setter
    def cloud_watch_logging_option_id(self, cloud_watch_logging_option_id):
        """Sets the cloud_watch_logging_option_id of this CloudWatchLoggingOptionUpdate.


        :param cloud_watch_logging_option_id: The cloud_watch_logging_option_id of this CloudWatchLoggingOptionUpdate.
        :type cloud_watch_logging_option_id: str
        """
        if cloud_watch_logging_option_id is None:
            raise ValueError("Invalid value for `cloud_watch_logging_option_id`, must not be `None`")

        self._cloud_watch_logging_option_id = cloud_watch_logging_option_id

    @property
    def log_stream_arn_update(self):
        """Gets the log_stream_arn_update of this CloudWatchLoggingOptionUpdate.


        :return: The log_stream_arn_update of this CloudWatchLoggingOptionUpdate.
        :rtype: str
        """
        return self._log_stream_arn_update

    @log_stream_arn_update.setter
    def log_stream_arn_update(self, log_stream_arn_update):
        """Sets the log_stream_arn_update of this CloudWatchLoggingOptionUpdate.


        :param log_stream_arn_update: The log_stream_arn_update of this CloudWatchLoggingOptionUpdate.
        :type log_stream_arn_update: str
        """

        self._log_stream_arn_update = log_stream_arn_update

    @property
    def role_arn_update(self):
        """Gets the role_arn_update of this CloudWatchLoggingOptionUpdate.


        :return: The role_arn_update of this CloudWatchLoggingOptionUpdate.
        :rtype: str
        """
        return self._role_arn_update

    @role_arn_update.setter
    def role_arn_update(self, role_arn_update):
        """Sets the role_arn_update of this CloudWatchLoggingOptionUpdate.


        :param role_arn_update: The role_arn_update of this CloudWatchLoggingOptionUpdate.
        :type role_arn_update: str
        """

        self._role_arn_update = role_arn_update
