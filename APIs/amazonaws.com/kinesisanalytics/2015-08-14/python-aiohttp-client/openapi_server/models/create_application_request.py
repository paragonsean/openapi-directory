# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, application_description: str=None, inputs: List=None, outputs: List=None, cloud_watch_logging_options: List=None, application_code: str=None, tags: List=None):
        """CreateApplicationRequest - a model defined in OpenAPI

        :param application_name: The application_name of this CreateApplicationRequest.
        :param application_description: The application_description of this CreateApplicationRequest.
        :param inputs: The inputs of this CreateApplicationRequest.
        :param outputs: The outputs of this CreateApplicationRequest.
        :param cloud_watch_logging_options: The cloud_watch_logging_options of this CreateApplicationRequest.
        :param application_code: The application_code of this CreateApplicationRequest.
        :param tags: The tags of this CreateApplicationRequest.
        """
        self.openapi_types = {
            'application_name': str,
            'application_description': str,
            'inputs': List,
            'outputs': List,
            'cloud_watch_logging_options': List,
            'application_code': str,
            'tags': List
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'application_description': 'ApplicationDescription',
            'inputs': 'Inputs',
            'outputs': 'Outputs',
            'cloud_watch_logging_options': 'CloudWatchLoggingOptions',
            'application_code': 'ApplicationCode',
            'tags': 'Tags'
        }

        self._application_name = application_name
        self._application_description = application_description
        self._inputs = inputs
        self._outputs = outputs
        self._cloud_watch_logging_options = cloud_watch_logging_options
        self._application_code = application_code
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplicationRequest of this CreateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this CreateApplicationRequest.


        :return: The application_name of this CreateApplicationRequest.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CreateApplicationRequest.


        :param application_name: The application_name of this CreateApplicationRequest.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def application_description(self):
        """Gets the application_description of this CreateApplicationRequest.


        :return: The application_description of this CreateApplicationRequest.
        :rtype: str
        """
        return self._application_description

    @application_description.setter
    def application_description(self, application_description):
        """Sets the application_description of this CreateApplicationRequest.


        :param application_description: The application_description of this CreateApplicationRequest.
        :type application_description: str
        """

        self._application_description = application_description

    @property
    def inputs(self):
        """Gets the inputs of this CreateApplicationRequest.


        :return: The inputs of this CreateApplicationRequest.
        :rtype: List
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this CreateApplicationRequest.


        :param inputs: The inputs of this CreateApplicationRequest.
        :type inputs: List
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this CreateApplicationRequest.


        :return: The outputs of this CreateApplicationRequest.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this CreateApplicationRequest.


        :param outputs: The outputs of this CreateApplicationRequest.
        :type outputs: List
        """

        self._outputs = outputs

    @property
    def cloud_watch_logging_options(self):
        """Gets the cloud_watch_logging_options of this CreateApplicationRequest.


        :return: The cloud_watch_logging_options of this CreateApplicationRequest.
        :rtype: List
        """
        return self._cloud_watch_logging_options

    @cloud_watch_logging_options.setter
    def cloud_watch_logging_options(self, cloud_watch_logging_options):
        """Sets the cloud_watch_logging_options of this CreateApplicationRequest.


        :param cloud_watch_logging_options: The cloud_watch_logging_options of this CreateApplicationRequest.
        :type cloud_watch_logging_options: List
        """

        self._cloud_watch_logging_options = cloud_watch_logging_options

    @property
    def application_code(self):
        """Gets the application_code of this CreateApplicationRequest.


        :return: The application_code of this CreateApplicationRequest.
        :rtype: str
        """
        return self._application_code

    @application_code.setter
    def application_code(self, application_code):
        """Sets the application_code of this CreateApplicationRequest.


        :param application_code: The application_code of this CreateApplicationRequest.
        :type application_code: str
        """

        self._application_code = application_code

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationRequest.


        :return: The tags of this CreateApplicationRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationRequest.


        :param tags: The tags of this CreateApplicationRequest.
        :type tags: List
        """

        self._tags = tags
