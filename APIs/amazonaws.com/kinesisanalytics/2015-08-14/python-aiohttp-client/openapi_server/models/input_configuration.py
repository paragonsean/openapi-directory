# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_configuration_input_starting_position_configuration import InputConfigurationInputStartingPositionConfiguration
from openapi_server import util


class InputConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, input_starting_position_configuration: InputConfigurationInputStartingPositionConfiguration=None):
        """InputConfiguration - a model defined in OpenAPI

        :param id: The id of this InputConfiguration.
        :param input_starting_position_configuration: The input_starting_position_configuration of this InputConfiguration.
        """
        self.openapi_types = {
            'id': str,
            'input_starting_position_configuration': InputConfigurationInputStartingPositionConfiguration
        }

        self.attribute_map = {
            'id': 'Id',
            'input_starting_position_configuration': 'InputStartingPositionConfiguration'
        }

        self._id = id
        self._input_starting_position_configuration = input_starting_position_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputConfiguration of this InputConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this InputConfiguration.


        :return: The id of this InputConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InputConfiguration.


        :param id: The id of this InputConfiguration.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_starting_position_configuration(self):
        """Gets the input_starting_position_configuration of this InputConfiguration.


        :return: The input_starting_position_configuration of this InputConfiguration.
        :rtype: InputConfigurationInputStartingPositionConfiguration
        """
        return self._input_starting_position_configuration

    @input_starting_position_configuration.setter
    def input_starting_position_configuration(self, input_starting_position_configuration):
        """Sets the input_starting_position_configuration of this InputConfiguration.


        :param input_starting_position_configuration: The input_starting_position_configuration of this InputConfiguration.
        :type input_starting_position_configuration: InputConfigurationInputStartingPositionConfiguration
        """
        if input_starting_position_configuration is None:
            raise ValueError("Invalid value for `input_starting_position_configuration`, must not be `None`")

        self._input_starting_position_configuration = input_starting_position_configuration
