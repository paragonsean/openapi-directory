# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.promotion import Promotion
import re
from openapi_server import util


class GetRecommendationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_arn: str=None, item_id: str=None, user_id: str=None, num_results: int=None, context: Dict[str, str]=None, filter_arn: str=None, filter_values: Dict[str, str]=None, recommender_arn: str=None, promotions: List[Promotion]=None):
        """GetRecommendationsRequest - a model defined in OpenAPI

        :param campaign_arn: The campaign_arn of this GetRecommendationsRequest.
        :param item_id: The item_id of this GetRecommendationsRequest.
        :param user_id: The user_id of this GetRecommendationsRequest.
        :param num_results: The num_results of this GetRecommendationsRequest.
        :param context: The context of this GetRecommendationsRequest.
        :param filter_arn: The filter_arn of this GetRecommendationsRequest.
        :param filter_values: The filter_values of this GetRecommendationsRequest.
        :param recommender_arn: The recommender_arn of this GetRecommendationsRequest.
        :param promotions: The promotions of this GetRecommendationsRequest.
        """
        self.openapi_types = {
            'campaign_arn': str,
            'item_id': str,
            'user_id': str,
            'num_results': int,
            'context': Dict[str, str],
            'filter_arn': str,
            'filter_values': Dict[str, str],
            'recommender_arn': str,
            'promotions': List[Promotion]
        }

        self.attribute_map = {
            'campaign_arn': 'campaignArn',
            'item_id': 'itemId',
            'user_id': 'userId',
            'num_results': 'numResults',
            'context': 'context',
            'filter_arn': 'filterArn',
            'filter_values': 'filterValues',
            'recommender_arn': 'recommenderArn',
            'promotions': 'promotions'
        }

        self._campaign_arn = campaign_arn
        self._item_id = item_id
        self._user_id = user_id
        self._num_results = num_results
        self._context = context
        self._filter_arn = filter_arn
        self._filter_values = filter_values
        self._recommender_arn = recommender_arn
        self._promotions = promotions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecommendationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRecommendations_request of this GetRecommendationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_arn(self):
        """Gets the campaign_arn of this GetRecommendationsRequest.

        The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.

        :return: The campaign_arn of this GetRecommendationsRequest.
        :rtype: str
        """
        return self._campaign_arn

    @campaign_arn.setter
    def campaign_arn(self, campaign_arn):
        """Sets the campaign_arn of this GetRecommendationsRequest.

        The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.

        :param campaign_arn: The campaign_arn of this GetRecommendationsRequest.
        :type campaign_arn: str
        """
        if campaign_arn is not None and len(campaign_arn) > 256:
            raise ValueError("Invalid value for `campaign_arn`, length must be less than or equal to `256`")
        if campaign_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', campaign_arn):
            raise ValueError("Invalid value for `campaign_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._campaign_arn = campaign_arn

    @property
    def item_id(self):
        """Gets the item_id of this GetRecommendationsRequest.

        <p>The item ID to provide recommendations for.</p> <p>Required for <code>RELATED_ITEMS</code> recipe type.</p>

        :return: The item_id of this GetRecommendationsRequest.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this GetRecommendationsRequest.

        <p>The item ID to provide recommendations for.</p> <p>Required for <code>RELATED_ITEMS</code> recipe type.</p>

        :param item_id: The item_id of this GetRecommendationsRequest.
        :type item_id: str
        """
        if item_id is not None and len(item_id) > 256:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `256`")

        self._item_id = item_id

    @property
    def user_id(self):
        """Gets the user_id of this GetRecommendationsRequest.

        <p>The user ID to provide recommendations for.</p> <p>Required for <code>USER_PERSONALIZATION</code> recipe type.</p>

        :return: The user_id of this GetRecommendationsRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetRecommendationsRequest.

        <p>The user ID to provide recommendations for.</p> <p>Required for <code>USER_PERSONALIZATION</code> recipe type.</p>

        :param user_id: The user_id of this GetRecommendationsRequest.
        :type user_id: str
        """
        if user_id is not None and len(user_id) > 256:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `256`")

        self._user_id = user_id

    @property
    def num_results(self):
        """Gets the num_results of this GetRecommendationsRequest.

        The number of results to return. The default is 25. The maximum is 500.

        :return: The num_results of this GetRecommendationsRequest.
        :rtype: int
        """
        return self._num_results

    @num_results.setter
    def num_results(self, num_results):
        """Sets the num_results of this GetRecommendationsRequest.

        The number of results to return. The default is 25. The maximum is 500.

        :param num_results: The num_results of this GetRecommendationsRequest.
        :type num_results: int
        """
        if num_results is not None and num_results < 0:
            raise ValueError("Invalid value for `num_results`, must be a value greater than or equal to `0`")

        self._num_results = num_results

    @property
    def context(self):
        """Gets the context of this GetRecommendationsRequest.

        The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.

        :return: The context of this GetRecommendationsRequest.
        :rtype: Dict[str, str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GetRecommendationsRequest.

        The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.

        :param context: The context of this GetRecommendationsRequest.
        :type context: Dict[str, str]
        """
        if context is not None and len(context) > 150:
            raise ValueError("Invalid value for `context`, number of items must be less than or equal to `150`")

        self._context = context

    @property
    def filter_arn(self):
        """Gets the filter_arn of this GetRecommendationsRequest.

        <p>The ARN of the filter to apply to the returned recommendations. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.</p> <p>When using this parameter, be sure the filter resource is <code>ACTIVE</code>.</p>

        :return: The filter_arn of this GetRecommendationsRequest.
        :rtype: str
        """
        return self._filter_arn

    @filter_arn.setter
    def filter_arn(self, filter_arn):
        """Sets the filter_arn of this GetRecommendationsRequest.

        <p>The ARN of the filter to apply to the returned recommendations. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.</p> <p>When using this parameter, be sure the filter resource is <code>ACTIVE</code>.</p>

        :param filter_arn: The filter_arn of this GetRecommendationsRequest.
        :type filter_arn: str
        """
        if filter_arn is not None and len(filter_arn) > 256:
            raise ValueError("Invalid value for `filter_arn`, length must be less than or equal to `256`")
        if filter_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', filter_arn):
            raise ValueError("Invalid value for `filter_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._filter_arn = filter_arn

    @property
    def filter_values(self):
        """Gets the filter_values of this GetRecommendationsRequest.

        <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering recommendations and user segments</a>.</p>

        :return: The filter_values of this GetRecommendationsRequest.
        :rtype: Dict[str, str]
        """
        return self._filter_values

    @filter_values.setter
    def filter_values(self, filter_values):
        """Sets the filter_values of this GetRecommendationsRequest.

        <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering recommendations and user segments</a>.</p>

        :param filter_values: The filter_values of this GetRecommendationsRequest.
        :type filter_values: Dict[str, str]
        """
        if filter_values is not None and len(filter_values) > 25:
            raise ValueError("Invalid value for `filter_values`, number of items must be less than or equal to `25`")

        self._filter_values = filter_values

    @property
    def recommender_arn(self):
        """Gets the recommender_arn of this GetRecommendationsRequest.

        The Amazon Resource Name (ARN) of the recommender to use to get recommendations. Provide a recommender ARN if you created a Domain dataset group with a recommender for a domain use case.

        :return: The recommender_arn of this GetRecommendationsRequest.
        :rtype: str
        """
        return self._recommender_arn

    @recommender_arn.setter
    def recommender_arn(self, recommender_arn):
        """Sets the recommender_arn of this GetRecommendationsRequest.

        The Amazon Resource Name (ARN) of the recommender to use to get recommendations. Provide a recommender ARN if you created a Domain dataset group with a recommender for a domain use case.

        :param recommender_arn: The recommender_arn of this GetRecommendationsRequest.
        :type recommender_arn: str
        """
        if recommender_arn is not None and len(recommender_arn) > 256:
            raise ValueError("Invalid value for `recommender_arn`, length must be less than or equal to `256`")
        if recommender_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', recommender_arn):
            raise ValueError("Invalid value for `recommender_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._recommender_arn = recommender_arn

    @property
    def promotions(self):
        """Gets the promotions of this GetRecommendationsRequest.

        The promotions to apply to the recommendation request. A promotion defines additional business rules that apply to a configurable subset of recommended items.

        :return: The promotions of this GetRecommendationsRequest.
        :rtype: List[Promotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this GetRecommendationsRequest.

        The promotions to apply to the recommendation request. A promotion defines additional business rules that apply to a configurable subset of recommended items.

        :param promotions: The promotions of this GetRecommendationsRequest.
        :type promotions: List[Promotion]
        """
        if promotions is not None and len(promotions) > 1:
            raise ValueError("Invalid value for `promotions`, number of items must be less than or equal to `1`")

        self._promotions = promotions
