# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetPersonalizedRankingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_arn: str=None, input_list: List[str]=None, user_id: str=None, context: Dict[str, str]=None, filter_arn: str=None, filter_values: Dict[str, str]=None):
        """GetPersonalizedRankingRequest - a model defined in OpenAPI

        :param campaign_arn: The campaign_arn of this GetPersonalizedRankingRequest.
        :param input_list: The input_list of this GetPersonalizedRankingRequest.
        :param user_id: The user_id of this GetPersonalizedRankingRequest.
        :param context: The context of this GetPersonalizedRankingRequest.
        :param filter_arn: The filter_arn of this GetPersonalizedRankingRequest.
        :param filter_values: The filter_values of this GetPersonalizedRankingRequest.
        """
        self.openapi_types = {
            'campaign_arn': str,
            'input_list': List[str],
            'user_id': str,
            'context': Dict[str, str],
            'filter_arn': str,
            'filter_values': Dict[str, str]
        }

        self.attribute_map = {
            'campaign_arn': 'campaignArn',
            'input_list': 'inputList',
            'user_id': 'userId',
            'context': 'context',
            'filter_arn': 'filterArn',
            'filter_values': 'filterValues'
        }

        self._campaign_arn = campaign_arn
        self._input_list = input_list
        self._user_id = user_id
        self._context = context
        self._filter_arn = filter_arn
        self._filter_values = filter_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPersonalizedRankingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPersonalizedRanking_request of this GetPersonalizedRankingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_arn(self):
        """Gets the campaign_arn of this GetPersonalizedRankingRequest.

        The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.

        :return: The campaign_arn of this GetPersonalizedRankingRequest.
        :rtype: str
        """
        return self._campaign_arn

    @campaign_arn.setter
    def campaign_arn(self, campaign_arn):
        """Sets the campaign_arn of this GetPersonalizedRankingRequest.

        The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.

        :param campaign_arn: The campaign_arn of this GetPersonalizedRankingRequest.
        :type campaign_arn: str
        """
        if campaign_arn is None:
            raise ValueError("Invalid value for `campaign_arn`, must not be `None`")
        if campaign_arn is not None and len(campaign_arn) > 256:
            raise ValueError("Invalid value for `campaign_arn`, length must be less than or equal to `256`")
        if campaign_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', campaign_arn):
            raise ValueError("Invalid value for `campaign_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._campaign_arn = campaign_arn

    @property
    def input_list(self):
        """Gets the input_list of this GetPersonalizedRankingRequest.

        A list of items (by <code>itemId</code>) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.

        :return: The input_list of this GetPersonalizedRankingRequest.
        :rtype: List[str]
        """
        return self._input_list

    @input_list.setter
    def input_list(self, input_list):
        """Sets the input_list of this GetPersonalizedRankingRequest.

        A list of items (by <code>itemId</code>) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.

        :param input_list: The input_list of this GetPersonalizedRankingRequest.
        :type input_list: List[str]
        """
        if input_list is None:
            raise ValueError("Invalid value for `input_list`, must not be `None`")

        self._input_list = input_list

    @property
    def user_id(self):
        """Gets the user_id of this GetPersonalizedRankingRequest.

        The user for which you want the campaign to provide a personalized ranking.

        :return: The user_id of this GetPersonalizedRankingRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetPersonalizedRankingRequest.

        The user for which you want the campaign to provide a personalized ranking.

        :param user_id: The user_id of this GetPersonalizedRankingRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and len(user_id) > 256:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `256`")

        self._user_id = user_id

    @property
    def context(self):
        """Gets the context of this GetPersonalizedRankingRequest.

        The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.

        :return: The context of this GetPersonalizedRankingRequest.
        :rtype: Dict[str, str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GetPersonalizedRankingRequest.

        The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.

        :param context: The context of this GetPersonalizedRankingRequest.
        :type context: Dict[str, str]
        """
        if context is not None and len(context) > 150:
            raise ValueError("Invalid value for `context`, number of items must be less than or equal to `150`")

        self._context = context

    @property
    def filter_arn(self):
        """Gets the filter_arn of this GetPersonalizedRankingRequest.

        The Amazon Resource Name (ARN) of a filter you created to include items or exclude items from recommendations for a given user. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.

        :return: The filter_arn of this GetPersonalizedRankingRequest.
        :rtype: str
        """
        return self._filter_arn

    @filter_arn.setter
    def filter_arn(self, filter_arn):
        """Sets the filter_arn of this GetPersonalizedRankingRequest.

        The Amazon Resource Name (ARN) of a filter you created to include items or exclude items from recommendations for a given user. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.

        :param filter_arn: The filter_arn of this GetPersonalizedRankingRequest.
        :type filter_arn: str
        """
        if filter_arn is not None and len(filter_arn) > 256:
            raise ValueError("Invalid value for `filter_arn`, length must be less than or equal to `256`")
        if filter_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', filter_arn):
            raise ValueError("Invalid value for `filter_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._filter_arn = filter_arn

    @property
    def filter_values(self):
        """Gets the filter_values of this GetPersonalizedRankingRequest.

        <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.</p>

        :return: The filter_values of this GetPersonalizedRankingRequest.
        :rtype: Dict[str, str]
        """
        return self._filter_values

    @filter_values.setter
    def filter_values(self, filter_values):
        """Sets the filter_values of this GetPersonalizedRankingRequest.

        <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.</p>

        :param filter_values: The filter_values of this GetPersonalizedRankingRequest.
        :type filter_values: Dict[str, str]
        """
        if filter_values is not None and len(filter_values) > 25:
            raise ValueError("Invalid value for `filter_values`, number of items must be less than or equal to `25`")

        self._filter_values = filter_values
