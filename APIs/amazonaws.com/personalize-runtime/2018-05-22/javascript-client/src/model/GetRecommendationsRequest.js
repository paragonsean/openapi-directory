/**
 * Amazon Personalize Runtime
 * <p/>
 *
 * The version of the OpenAPI document: 2018-05-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Promotion from './Promotion';

/**
 * The GetRecommendationsRequest model module.
 * @module model/GetRecommendationsRequest
 * @version 2018-05-22
 */
class GetRecommendationsRequest {
    /**
     * Constructs a new <code>GetRecommendationsRequest</code>.
     * @alias module:model/GetRecommendationsRequest
     */
    constructor() { 
        
        GetRecommendationsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetRecommendationsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetRecommendationsRequest} obj Optional instance to populate.
     * @return {module:model/GetRecommendationsRequest} The populated <code>GetRecommendationsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetRecommendationsRequest();

            if (data.hasOwnProperty('campaignArn')) {
                obj['campaignArn'] = ApiClient.convertToType(data['campaignArn'], 'String');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('numResults')) {
                obj['numResults'] = ApiClient.convertToType(data['numResults'], 'Number');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], {'String': 'String'});
            }
            if (data.hasOwnProperty('filterArn')) {
                obj['filterArn'] = ApiClient.convertToType(data['filterArn'], 'String');
            }
            if (data.hasOwnProperty('filterValues')) {
                obj['filterValues'] = ApiClient.convertToType(data['filterValues'], {'String': 'String'});
            }
            if (data.hasOwnProperty('recommenderArn')) {
                obj['recommenderArn'] = ApiClient.convertToType(data['recommenderArn'], 'String');
            }
            if (data.hasOwnProperty('promotions')) {
                obj['promotions'] = ApiClient.convertToType(data['promotions'], [Promotion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetRecommendationsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetRecommendationsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['campaignArn'] && !(typeof data['campaignArn'] === 'string' || data['campaignArn'] instanceof String)) {
            throw new Error("Expected the field `campaignArn` to be a primitive type in the JSON string but got " + data['campaignArn']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['filterArn'] && !(typeof data['filterArn'] === 'string' || data['filterArn'] instanceof String)) {
            throw new Error("Expected the field `filterArn` to be a primitive type in the JSON string but got " + data['filterArn']);
        }
        // ensure the json data is a string
        if (data['recommenderArn'] && !(typeof data['recommenderArn'] === 'string' || data['recommenderArn'] instanceof String)) {
            throw new Error("Expected the field `recommenderArn` to be a primitive type in the JSON string but got " + data['recommenderArn']);
        }
        if (data['promotions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promotions'])) {
                throw new Error("Expected the field `promotions` to be an array in the JSON data but got " + data['promotions']);
            }
            // validate the optional field `promotions` (array)
            for (const item of data['promotions']) {
                Promotion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.
 * @member {String} campaignArn
 */
GetRecommendationsRequest.prototype['campaignArn'] = undefined;

/**
 * <p>The item ID to provide recommendations for.</p> <p>Required for <code>RELATED_ITEMS</code> recipe type.</p>
 * @member {String} itemId
 */
GetRecommendationsRequest.prototype['itemId'] = undefined;

/**
 * <p>The user ID to provide recommendations for.</p> <p>Required for <code>USER_PERSONALIZATION</code> recipe type.</p>
 * @member {String} userId
 */
GetRecommendationsRequest.prototype['userId'] = undefined;

/**
 * The number of results to return. The default is 25. The maximum is 500.
 * @member {Number} numResults
 */
GetRecommendationsRequest.prototype['numResults'] = undefined;

/**
 * The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.
 * @member {Object.<String, String>} context
 */
GetRecommendationsRequest.prototype['context'] = undefined;

/**
 * <p>The ARN of the filter to apply to the returned recommendations. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering Recommendations</a>.</p> <p>When using this parameter, be sure the filter resource is <code>ACTIVE</code>.</p>
 * @member {String} filterArn
 */
GetRecommendationsRequest.prototype['filterArn'] = undefined;

/**
 * <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/filter.html\">Filtering recommendations and user segments</a>.</p>
 * @member {Object.<String, String>} filterValues
 */
GetRecommendationsRequest.prototype['filterValues'] = undefined;

/**
 * The Amazon Resource Name (ARN) of the recommender to use to get recommendations. Provide a recommender ARN if you created a Domain dataset group with a recommender for a domain use case.
 * @member {String} recommenderArn
 */
GetRecommendationsRequest.prototype['recommenderArn'] = undefined;

/**
 * The promotions to apply to the recommendation request. A promotion defines additional business rules that apply to a configurable subset of recommended items.
 * @member {Array.<module:model/Promotion>} promotions
 */
GetRecommendationsRequest.prototype['promotions'] = undefined;






export default GetRecommendationsRequest;

