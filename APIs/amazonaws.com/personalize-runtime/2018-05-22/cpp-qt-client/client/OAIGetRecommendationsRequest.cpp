/**
 * Amazon Personalize Runtime
 * <p/>
 *
 * The version of the OpenAPI document: 2018-05-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecommendationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecommendationsRequest::OAIGetRecommendationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecommendationsRequest::OAIGetRecommendationsRequest() {
    this->initializeModel();
}

OAIGetRecommendationsRequest::~OAIGetRecommendationsRequest() {}

void OAIGetRecommendationsRequest::initializeModel() {

    m_campaign_arn_isSet = false;
    m_campaign_arn_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_num_results_isSet = false;
    m_num_results_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_filter_arn_isSet = false;
    m_filter_arn_isValid = false;

    m_filter_values_isSet = false;
    m_filter_values_isValid = false;

    m_recommender_arn_isSet = false;
    m_recommender_arn_isValid = false;

    m_promotions_isSet = false;
    m_promotions_isValid = false;
}

void OAIGetRecommendationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecommendationsRequest::fromJsonObject(QJsonObject json) {

    m_campaign_arn_isValid = ::OpenAPI::fromJsonValue(m_campaign_arn, json[QString("campaignArn")]);
    m_campaign_arn_isSet = !json[QString("campaignArn")].isNull() && m_campaign_arn_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_num_results_isValid = ::OpenAPI::fromJsonValue(m_num_results, json[QString("numResults")]);
    m_num_results_isSet = !json[QString("numResults")].isNull() && m_num_results_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_filter_arn_isValid = ::OpenAPI::fromJsonValue(m_filter_arn, json[QString("filterArn")]);
    m_filter_arn_isSet = !json[QString("filterArn")].isNull() && m_filter_arn_isValid;

    m_filter_values_isValid = ::OpenAPI::fromJsonValue(m_filter_values, json[QString("filterValues")]);
    m_filter_values_isSet = !json[QString("filterValues")].isNull() && m_filter_values_isValid;

    m_recommender_arn_isValid = ::OpenAPI::fromJsonValue(m_recommender_arn, json[QString("recommenderArn")]);
    m_recommender_arn_isSet = !json[QString("recommenderArn")].isNull() && m_recommender_arn_isValid;

    m_promotions_isValid = ::OpenAPI::fromJsonValue(m_promotions, json[QString("promotions")]);
    m_promotions_isSet = !json[QString("promotions")].isNull() && m_promotions_isValid;
}

QString OAIGetRecommendationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecommendationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_arn_isSet) {
        obj.insert(QString("campaignArn"), ::OpenAPI::toJsonValue(m_campaign_arn));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_num_results_isSet) {
        obj.insert(QString("numResults"), ::OpenAPI::toJsonValue(m_num_results));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_filter_arn_isSet) {
        obj.insert(QString("filterArn"), ::OpenAPI::toJsonValue(m_filter_arn));
    }
    if (m_filter_values.isSet()) {
        obj.insert(QString("filterValues"), ::OpenAPI::toJsonValue(m_filter_values));
    }
    if (m_recommender_arn_isSet) {
        obj.insert(QString("recommenderArn"), ::OpenAPI::toJsonValue(m_recommender_arn));
    }
    if (m_promotions.isSet()) {
        obj.insert(QString("promotions"), ::OpenAPI::toJsonValue(m_promotions));
    }
    return obj;
}

QString OAIGetRecommendationsRequest::getCampaignArn() const {
    return m_campaign_arn;
}
void OAIGetRecommendationsRequest::setCampaignArn(const QString &campaign_arn) {
    m_campaign_arn = campaign_arn;
    m_campaign_arn_isSet = true;
}

bool OAIGetRecommendationsRequest::is_campaign_arn_Set() const{
    return m_campaign_arn_isSet;
}

bool OAIGetRecommendationsRequest::is_campaign_arn_Valid() const{
    return m_campaign_arn_isValid;
}

QString OAIGetRecommendationsRequest::getItemId() const {
    return m_item_id;
}
void OAIGetRecommendationsRequest::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIGetRecommendationsRequest::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIGetRecommendationsRequest::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIGetRecommendationsRequest::getUserId() const {
    return m_user_id;
}
void OAIGetRecommendationsRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetRecommendationsRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetRecommendationsRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 OAIGetRecommendationsRequest::getNumResults() const {
    return m_num_results;
}
void OAIGetRecommendationsRequest::setNumResults(const qint32 &num_results) {
    m_num_results = num_results;
    m_num_results_isSet = true;
}

bool OAIGetRecommendationsRequest::is_num_results_Set() const{
    return m_num_results_isSet;
}

bool OAIGetRecommendationsRequest::is_num_results_Valid() const{
    return m_num_results_isValid;
}

QMap OAIGetRecommendationsRequest::getContext() const {
    return m_context;
}
void OAIGetRecommendationsRequest::setContext(const QMap &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIGetRecommendationsRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIGetRecommendationsRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIGetRecommendationsRequest::getFilterArn() const {
    return m_filter_arn;
}
void OAIGetRecommendationsRequest::setFilterArn(const QString &filter_arn) {
    m_filter_arn = filter_arn;
    m_filter_arn_isSet = true;
}

bool OAIGetRecommendationsRequest::is_filter_arn_Set() const{
    return m_filter_arn_isSet;
}

bool OAIGetRecommendationsRequest::is_filter_arn_Valid() const{
    return m_filter_arn_isValid;
}

QMap OAIGetRecommendationsRequest::getFilterValues() const {
    return m_filter_values;
}
void OAIGetRecommendationsRequest::setFilterValues(const QMap &filter_values) {
    m_filter_values = filter_values;
    m_filter_values_isSet = true;
}

bool OAIGetRecommendationsRequest::is_filter_values_Set() const{
    return m_filter_values_isSet;
}

bool OAIGetRecommendationsRequest::is_filter_values_Valid() const{
    return m_filter_values_isValid;
}

QString OAIGetRecommendationsRequest::getRecommenderArn() const {
    return m_recommender_arn;
}
void OAIGetRecommendationsRequest::setRecommenderArn(const QString &recommender_arn) {
    m_recommender_arn = recommender_arn;
    m_recommender_arn_isSet = true;
}

bool OAIGetRecommendationsRequest::is_recommender_arn_Set() const{
    return m_recommender_arn_isSet;
}

bool OAIGetRecommendationsRequest::is_recommender_arn_Valid() const{
    return m_recommender_arn_isValid;
}

QList OAIGetRecommendationsRequest::getPromotions() const {
    return m_promotions;
}
void OAIGetRecommendationsRequest::setPromotions(const QList &promotions) {
    m_promotions = promotions;
    m_promotions_isSet = true;
}

bool OAIGetRecommendationsRequest::is_promotions_Set() const{
    return m_promotions_isSet;
}

bool OAIGetRecommendationsRequest::is_promotions_Valid() const{
    return m_promotions_isValid;
}

bool OAIGetRecommendationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommender_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecommendationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
