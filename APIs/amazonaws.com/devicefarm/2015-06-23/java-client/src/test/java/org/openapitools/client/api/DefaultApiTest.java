/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDevicePoolRequest;
import org.openapitools.client.model.CreateDevicePoolResult;
import org.openapitools.client.model.CreateInstanceProfileRequest;
import org.openapitools.client.model.CreateInstanceProfileResult;
import org.openapitools.client.model.CreateNetworkProfileRequest;
import org.openapitools.client.model.CreateNetworkProfileResult;
import org.openapitools.client.model.CreateProjectRequest;
import org.openapitools.client.model.CreateProjectResult;
import org.openapitools.client.model.CreateRemoteAccessSessionRequest;
import org.openapitools.client.model.CreateRemoteAccessSessionResult;
import org.openapitools.client.model.CreateTestGridProjectRequest;
import org.openapitools.client.model.CreateTestGridProjectResult;
import org.openapitools.client.model.CreateTestGridUrlRequest;
import org.openapitools.client.model.CreateTestGridUrlResult;
import org.openapitools.client.model.CreateUploadRequest;
import org.openapitools.client.model.CreateUploadResult;
import org.openapitools.client.model.CreateVPCEConfigurationRequest;
import org.openapitools.client.model.CreateVPCEConfigurationResult;
import org.openapitools.client.model.DeleteDevicePoolRequest;
import org.openapitools.client.model.DeleteInstanceProfileRequest;
import org.openapitools.client.model.DeleteNetworkProfileRequest;
import org.openapitools.client.model.DeleteProjectRequest;
import org.openapitools.client.model.DeleteRemoteAccessSessionRequest;
import org.openapitools.client.model.DeleteRunRequest;
import org.openapitools.client.model.DeleteTestGridProjectRequest;
import org.openapitools.client.model.DeleteUploadRequest;
import org.openapitools.client.model.DeleteVPCEConfigurationRequest;
import org.openapitools.client.model.GetAccountSettingsResult;
import org.openapitools.client.model.GetDeviceInstanceRequest;
import org.openapitools.client.model.GetDeviceInstanceResult;
import org.openapitools.client.model.GetDevicePoolCompatibilityRequest;
import org.openapitools.client.model.GetDevicePoolCompatibilityResult;
import org.openapitools.client.model.GetDevicePoolRequest;
import org.openapitools.client.model.GetDevicePoolResult;
import org.openapitools.client.model.GetDeviceRequest;
import org.openapitools.client.model.GetDeviceResult;
import org.openapitools.client.model.GetInstanceProfileRequest;
import org.openapitools.client.model.GetInstanceProfileResult;
import org.openapitools.client.model.GetJobRequest;
import org.openapitools.client.model.GetJobResult;
import org.openapitools.client.model.GetNetworkProfileRequest;
import org.openapitools.client.model.GetNetworkProfileResult;
import org.openapitools.client.model.GetOfferingStatusRequest;
import org.openapitools.client.model.GetOfferingStatusResult;
import org.openapitools.client.model.GetProjectRequest;
import org.openapitools.client.model.GetProjectResult;
import org.openapitools.client.model.GetRemoteAccessSessionRequest;
import org.openapitools.client.model.GetRemoteAccessSessionResult;
import org.openapitools.client.model.GetRunRequest;
import org.openapitools.client.model.GetRunResult;
import org.openapitools.client.model.GetSuiteRequest;
import org.openapitools.client.model.GetSuiteResult;
import org.openapitools.client.model.GetTestGridProjectRequest;
import org.openapitools.client.model.GetTestGridProjectResult;
import org.openapitools.client.model.GetTestGridSessionRequest;
import org.openapitools.client.model.GetTestGridSessionResult;
import org.openapitools.client.model.GetTestRequest;
import org.openapitools.client.model.GetTestResult;
import org.openapitools.client.model.GetUploadRequest;
import org.openapitools.client.model.GetUploadResult;
import org.openapitools.client.model.GetVPCEConfigurationRequest;
import org.openapitools.client.model.GetVPCEConfigurationResult;
import org.openapitools.client.model.InstallToRemoteAccessSessionRequest;
import org.openapitools.client.model.InstallToRemoteAccessSessionResult;
import org.openapitools.client.model.ListArtifactsRequest;
import org.openapitools.client.model.ListArtifactsResult;
import org.openapitools.client.model.ListDeviceInstancesRequest;
import org.openapitools.client.model.ListDeviceInstancesResult;
import org.openapitools.client.model.ListDevicePoolsRequest;
import org.openapitools.client.model.ListDevicePoolsResult;
import org.openapitools.client.model.ListDevicesRequest;
import org.openapitools.client.model.ListDevicesResult;
import org.openapitools.client.model.ListInstanceProfilesRequest;
import org.openapitools.client.model.ListInstanceProfilesResult;
import org.openapitools.client.model.ListJobsRequest;
import org.openapitools.client.model.ListJobsResult;
import org.openapitools.client.model.ListNetworkProfilesRequest;
import org.openapitools.client.model.ListNetworkProfilesResult;
import org.openapitools.client.model.ListOfferingPromotionsRequest;
import org.openapitools.client.model.ListOfferingPromotionsResult;
import org.openapitools.client.model.ListOfferingTransactionsRequest;
import org.openapitools.client.model.ListOfferingTransactionsResult;
import org.openapitools.client.model.ListOfferingsRequest;
import org.openapitools.client.model.ListOfferingsResult;
import org.openapitools.client.model.ListProjectsRequest;
import org.openapitools.client.model.ListProjectsResult;
import org.openapitools.client.model.ListRemoteAccessSessionsRequest;
import org.openapitools.client.model.ListRemoteAccessSessionsResult;
import org.openapitools.client.model.ListRunsRequest;
import org.openapitools.client.model.ListRunsResult;
import org.openapitools.client.model.ListSamplesRequest;
import org.openapitools.client.model.ListSamplesResult;
import org.openapitools.client.model.ListSuitesRequest;
import org.openapitools.client.model.ListSuitesResult;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTestGridProjectsRequest;
import org.openapitools.client.model.ListTestGridProjectsResult;
import org.openapitools.client.model.ListTestGridSessionActionsRequest;
import org.openapitools.client.model.ListTestGridSessionActionsResult;
import org.openapitools.client.model.ListTestGridSessionArtifactsRequest;
import org.openapitools.client.model.ListTestGridSessionArtifactsResult;
import org.openapitools.client.model.ListTestGridSessionsRequest;
import org.openapitools.client.model.ListTestGridSessionsResult;
import org.openapitools.client.model.ListTestsRequest;
import org.openapitools.client.model.ListTestsResult;
import org.openapitools.client.model.ListUniqueProblemsRequest;
import org.openapitools.client.model.ListUniqueProblemsResult;
import org.openapitools.client.model.ListUploadsRequest;
import org.openapitools.client.model.ListUploadsResult;
import org.openapitools.client.model.ListVPCEConfigurationsRequest;
import org.openapitools.client.model.ListVPCEConfigurationsResult;
import org.openapitools.client.model.PurchaseOfferingRequest;
import org.openapitools.client.model.PurchaseOfferingResult;
import org.openapitools.client.model.RenewOfferingRequest;
import org.openapitools.client.model.RenewOfferingResult;
import org.openapitools.client.model.ScheduleRunRequest;
import org.openapitools.client.model.ScheduleRunResult;
import org.openapitools.client.model.StopJobRequest;
import org.openapitools.client.model.StopJobResult;
import org.openapitools.client.model.StopRemoteAccessSessionRequest;
import org.openapitools.client.model.StopRemoteAccessSessionResult;
import org.openapitools.client.model.StopRunRequest;
import org.openapitools.client.model.StopRunResult;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateDeviceInstanceRequest;
import org.openapitools.client.model.UpdateDeviceInstanceResult;
import org.openapitools.client.model.UpdateDevicePoolRequest;
import org.openapitools.client.model.UpdateDevicePoolResult;
import org.openapitools.client.model.UpdateInstanceProfileRequest;
import org.openapitools.client.model.UpdateInstanceProfileResult;
import org.openapitools.client.model.UpdateNetworkProfileRequest;
import org.openapitools.client.model.UpdateNetworkProfileResult;
import org.openapitools.client.model.UpdateProjectRequest;
import org.openapitools.client.model.UpdateProjectResult;
import org.openapitools.client.model.UpdateTestGridProjectRequest;
import org.openapitools.client.model.UpdateTestGridProjectResult;
import org.openapitools.client.model.UpdateUploadRequest;
import org.openapitools.client.model.UpdateUploadResult;
import org.openapitools.client.model.UpdateVPCEConfigurationRequest;
import org.openapitools.client.model.UpdateVPCEConfigurationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a device pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDevicePoolTest() throws ApiException {
        String xAmzTarget = null;
        CreateDevicePoolRequest createDevicePoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDevicePoolResult response = api.createDevicePool(xAmzTarget, createDevicePoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a profile that can be applied to one or more private fleet device instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstanceProfileTest() throws ApiException {
        String xAmzTarget = null;
        CreateInstanceProfileRequest createInstanceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInstanceProfileResult response = api.createInstanceProfile(xAmzTarget, createInstanceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a network profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        CreateNetworkProfileRequest createNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNetworkProfileResult response = api.createNetworkProfile(xAmzTarget, createNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        String xAmzTarget = null;
        CreateProjectRequest createProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProjectResult response = api.createProject(xAmzTarget, createProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies and starts a remote access session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRemoteAccessSessionTest() throws ApiException {
        String xAmzTarget = null;
        CreateRemoteAccessSessionRequest createRemoteAccessSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRemoteAccessSessionResult response = api.createRemoteAccessSession(xAmzTarget, createRemoteAccessSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Selenium testing project. Projects are used to track &lt;a&gt;TestGridSession&lt;/a&gt; instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTestGridProjectTest() throws ApiException {
        String xAmzTarget = null;
        CreateTestGridProjectRequest createTestGridProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTestGridProjectResult response = api.createTestGridProject(xAmzTarget, createTestGridProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a signed, short-term URL that can be passed to a Selenium &lt;code&gt;RemoteWebDriver&lt;/code&gt; constructor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTestGridUrlTest() throws ApiException {
        String xAmzTarget = null;
        CreateTestGridUrlRequest createTestGridUrlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTestGridUrlResult response = api.createTestGridUrl(xAmzTarget, createTestGridUrlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Uploads an app or test scripts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUploadTest() throws ApiException {
        String xAmzTarget = null;
        CreateUploadRequest createUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUploadResult response = api.createUpload(xAmzTarget, createUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVPCEConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateVPCEConfigurationRequest createVPCEConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVPCEConfigurationResult response = api.createVPCEConfiguration(xAmzTarget, createVPCEConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDevicePoolTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDevicePoolRequest deleteDevicePoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDevicePool(xAmzTarget, deleteDevicePoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a profile that can be applied to one or more private device instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInstanceProfileTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInstanceProfileRequest deleteInstanceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInstanceProfile(xAmzTarget, deleteInstanceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a network profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        DeleteNetworkProfileRequest deleteNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteNetworkProfile(xAmzTarget, deleteNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an AWS Device Farm project, given the project ARN.&lt;/p&gt; &lt;p&gt; Deleting this resource does not stop an in-progress run.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProjectRequest deleteProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProject(xAmzTarget, deleteProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a completed remote access session and its results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRemoteAccessSessionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRemoteAccessSessionRequest deleteRemoteAccessSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRemoteAccessSession(xAmzTarget, deleteRemoteAccessSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the run, given the run ARN.&lt;/p&gt; &lt;p&gt; Deleting this resource does not stop an in-progress run.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRunTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRunRequest deleteRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRun(xAmzTarget, deleteRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Deletes a Selenium testing project and all content generated under it. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You cannot undo this operation.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;You cannot delete a project if it has active sessions.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTestGridProjectTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTestGridProjectRequest deleteTestGridProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTestGridProject(xAmzTarget, deleteTestGridProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an upload given the upload ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUploadTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUploadRequest deleteUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUpload(xAmzTarget, deleteUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVPCEConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteVPCEConfigurationRequest deleteVPCEConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteVPCEConfiguration(xAmzTarget, deleteVPCEConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountSettingsTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccountSettingsResult response = api.getAccountSettings(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a unique device type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String xAmzTarget = null;
        GetDeviceRequest getDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceResult response = api.getDevice(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a device instance that belongs to a private device fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceInstanceTest() throws ApiException {
        String xAmzTarget = null;
        GetDeviceInstanceRequest getDeviceInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceInstanceResult response = api.getDeviceInstance(xAmzTarget, getDeviceInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a device pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevicePoolTest() throws ApiException {
        String xAmzTarget = null;
        GetDevicePoolRequest getDevicePoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDevicePoolResult response = api.getDevicePool(xAmzTarget, getDevicePoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about compatibility with a device pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDevicePoolCompatibilityTest() throws ApiException {
        String xAmzTarget = null;
        GetDevicePoolCompatibilityRequest getDevicePoolCompatibilityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDevicePoolCompatibilityResult response = api.getDevicePoolCompatibility(xAmzTarget, getDevicePoolCompatibilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the specified instance profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceProfileTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceProfileRequest getInstanceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceProfileResult response = api.getInstanceProfile(xAmzTarget, getInstanceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String xAmzTarget = null;
        GetJobRequest getJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobResult response = api.getJob(xAmzTarget, getJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a network profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        GetNetworkProfileRequest getNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNetworkProfileResult response = api.getNetworkProfile(xAmzTarget, getNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a &lt;code&gt;NotEligible&lt;/code&gt; error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact &lt;a href&#x3D;\&quot;mailto:aws-devicefarm-support@amazon.com\&quot;&gt;aws-devicefarm-support@amazon.com&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOfferingStatusTest() throws ApiException {
        String xAmzTarget = null;
        GetOfferingStatusRequest getOfferingStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetOfferingStatusResult response = api.getOfferingStatus(xAmzTarget, getOfferingStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        String xAmzTarget = null;
        GetProjectRequest getProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProjectResult response = api.getProject(xAmzTarget, getProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a link to a currently running remote access session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemoteAccessSessionTest() throws ApiException {
        String xAmzTarget = null;
        GetRemoteAccessSessionRequest getRemoteAccessSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRemoteAccessSessionResult response = api.getRemoteAccessSession(xAmzTarget, getRemoteAccessSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunTest() throws ApiException {
        String xAmzTarget = null;
        GetRunRequest getRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRunResult response = api.getRun(xAmzTarget, getRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a suite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuiteTest() throws ApiException {
        String xAmzTarget = null;
        GetSuiteRequest getSuiteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSuiteResult response = api.getSuite(xAmzTarget, getSuiteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestTest() throws ApiException {
        String xAmzTarget = null;
        GetTestRequest getTestRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTestResult response = api.getTest(xAmzTarget, getTestRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a Selenium testing project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestGridProjectTest() throws ApiException {
        String xAmzTarget = null;
        GetTestGridProjectRequest getTestGridProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTestGridProjectResult response = api.getTestGridProject(xAmzTarget, getTestGridProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;A session is an instance of a browser created through a &lt;code&gt;RemoteWebDriver&lt;/code&gt; with the URL from &lt;a&gt;CreateTestGridUrlResult$url&lt;/a&gt;. You can use the following to look up sessions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The session ARN (&lt;a&gt;GetTestGridSessionRequest$sessionArn&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The project ARN and a session ID (&lt;a&gt;GetTestGridSessionRequest$projectArn&lt;/a&gt; and &lt;a&gt;GetTestGridSessionRequest$sessionId&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestGridSessionTest() throws ApiException {
        String xAmzTarget = null;
        GetTestGridSessionRequest getTestGridSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTestGridSessionResult response = api.getTestGridSession(xAmzTarget, getTestGridSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an upload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUploadTest() throws ApiException {
        String xAmzTarget = null;
        GetUploadRequest getUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUploadResult response = api.getUpload(xAmzTarget, getUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVPCEConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetVPCEConfigurationRequest getVPCEConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetVPCEConfigurationResult response = api.getVPCEConfiguration(xAmzTarget, getVPCEConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installToRemoteAccessSessionTest() throws ApiException {
        String xAmzTarget = null;
        InstallToRemoteAccessSessionRequest installToRemoteAccessSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InstallToRemoteAccessSessionResult response = api.installToRemoteAccessSession(xAmzTarget, installToRemoteAccessSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about artifacts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArtifactsTest() throws ApiException {
        String xAmzTarget = null;
        ListArtifactsRequest listArtifactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListArtifactsResult response = api.listArtifacts(xAmzTarget, listArtifactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about the private device instances associated with one or more AWS accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceInstancesTest() throws ApiException {
        String xAmzTarget = null;
        ListDeviceInstancesRequest listDeviceInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListDeviceInstancesResult response = api.listDeviceInstances(xAmzTarget, listDeviceInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about device pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicePoolsTest() throws ApiException {
        String xAmzTarget = null;
        ListDevicePoolsRequest listDevicePoolsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListDevicePoolsResult response = api.listDevicePools(xAmzTarget, listDevicePoolsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about unique device types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String xAmzTarget = null;
        ListDevicesRequest listDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListDevicesResult response = api.listDevices(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about all the instance profiles in an AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstanceProfilesTest() throws ApiException {
        String xAmzTarget = null;
        ListInstanceProfilesRequest listInstanceProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListInstanceProfilesResult response = api.listInstanceProfiles(xAmzTarget, listInstanceProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about jobs for a given test run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListJobsRequest listJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListJobsResult response = api.listJobs(xAmzTarget, listJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the list of available network profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkProfilesTest() throws ApiException {
        String xAmzTarget = null;
        ListNetworkProfilesRequest listNetworkProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListNetworkProfilesResult response = api.listNetworkProfiles(xAmzTarget, listNetworkProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a &lt;code&gt;NotEligible&lt;/code&gt; error if the caller is not permitted to invoke the operation. Contact &lt;a href&#x3D;\&quot;mailto:aws-devicefarm-support@amazon.com\&quot;&gt;aws-devicefarm-support@amazon.com&lt;/a&gt; if you must be able to invoke this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfferingPromotionsTest() throws ApiException {
        String xAmzTarget = null;
        ListOfferingPromotionsRequest listOfferingPromotionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListOfferingPromotionsResult response = api.listOfferingPromotions(xAmzTarget, listOfferingPromotionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a &lt;code&gt;NotEligible&lt;/code&gt; error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact &lt;a href&#x3D;\&quot;mailto:aws-devicefarm-support@amazon.com\&quot;&gt;aws-devicefarm-support@amazon.com&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfferingTransactionsTest() throws ApiException {
        String xAmzTarget = null;
        ListOfferingTransactionsRequest listOfferingTransactionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListOfferingTransactionsResult response = api.listOfferingTransactions(xAmzTarget, listOfferingTransactionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a &lt;code&gt;NotEligible&lt;/code&gt; error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact &lt;a href&#x3D;\&quot;mailto:aws-devicefarm-support@amazon.com\&quot;&gt;aws-devicefarm-support@amazon.com&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfferingsTest() throws ApiException {
        String xAmzTarget = null;
        ListOfferingsRequest listOfferingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListOfferingsResult response = api.listOfferings(xAmzTarget, listOfferingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        String xAmzTarget = null;
        ListProjectsRequest listProjectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListProjectsResult response = api.listProjects(xAmzTarget, listProjectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of all currently running remote access sessions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRemoteAccessSessionsTest() throws ApiException {
        String xAmzTarget = null;
        ListRemoteAccessSessionsRequest listRemoteAccessSessionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListRemoteAccessSessionsResult response = api.listRemoteAccessSessions(xAmzTarget, listRemoteAccessSessionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about runs, given an AWS Device Farm project ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRunsTest() throws ApiException {
        String xAmzTarget = null;
        ListRunsRequest listRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListRunsResult response = api.listRuns(xAmzTarget, listRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about samples, given an AWS Device Farm job ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSamplesTest() throws ApiException {
        String xAmzTarget = null;
        ListSamplesRequest listSamplesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListSamplesResult response = api.listSamples(xAmzTarget, listSamplesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about test suites for a given job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSuitesTest() throws ApiException {
        String xAmzTarget = null;
        ListSuitesRequest listSuitesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListSuitesResult response = api.listSuites(xAmzTarget, listSuitesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * List the tags for an AWS Device Farm resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of all Selenium testing projects in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestGridProjectsTest() throws ApiException {
        String xAmzTarget = null;
        ListTestGridProjectsRequest listTestGridProjectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResult = null;
        String nextToken = null;
        ListTestGridProjectsResult response = api.listTestGridProjects(xAmzTarget, listTestGridProjectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResult, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the actions taken in a &lt;a&gt;TestGridSession&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestGridSessionActionsTest() throws ApiException {
        String xAmzTarget = null;
        ListTestGridSessionActionsRequest listTestGridSessionActionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResult = null;
        String nextToken = null;
        ListTestGridSessionActionsResult response = api.listTestGridSessionActions(xAmzTarget, listTestGridSessionActionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResult, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of artifacts created during the session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestGridSessionArtifactsTest() throws ApiException {
        String xAmzTarget = null;
        ListTestGridSessionArtifactsRequest listTestGridSessionArtifactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResult = null;
        String nextToken = null;
        ListTestGridSessionArtifactsResult response = api.listTestGridSessionArtifacts(xAmzTarget, listTestGridSessionArtifactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResult, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of sessions for a &lt;a&gt;TestGridProject&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestGridSessionsTest() throws ApiException {
        String xAmzTarget = null;
        ListTestGridSessionsRequest listTestGridSessionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResult = null;
        String nextToken = null;
        ListTestGridSessionsResult response = api.listTestGridSessions(xAmzTarget, listTestGridSessionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResult, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about tests in a given test suite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTestsTest() throws ApiException {
        String xAmzTarget = null;
        ListTestsRequest listTestsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTestsResult response = api.listTests(xAmzTarget, listTestsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about unique problems, such as exceptions or crashes.&lt;/p&gt; &lt;p&gt;Unique problems are defined as a single instance of an error across a run, job, or suite. For example, if a call in your application consistently raises an exception (&lt;code&gt;OutOfBoundsException in MyActivity.java:386&lt;/code&gt;), &lt;code&gt;ListUniqueProblems&lt;/code&gt; returns a single entry instead of many individual entries for that exception.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUniqueProblemsTest() throws ApiException {
        String xAmzTarget = null;
        ListUniqueProblemsRequest listUniqueProblemsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListUniqueProblemsResult response = api.listUniqueProblems(xAmzTarget, listUniqueProblemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about uploads, given an AWS Device Farm project ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUploadsTest() throws ApiException {
        String xAmzTarget = null;
        ListUploadsRequest listUploadsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListUploadsResult response = api.listUploads(xAmzTarget, listUploadsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVPCEConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListVPCEConfigurationsRequest listVPCEConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListVPCEConfigurationsResult response = api.listVPCEConfigurations(xAmzTarget, listVPCEConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a &lt;code&gt;NotEligible&lt;/code&gt; error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact &lt;a href&#x3D;\&quot;mailto:aws-devicefarm-support@amazon.com\&quot;&gt;aws-devicefarm-support@amazon.com&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseOfferingTest() throws ApiException {
        String xAmzTarget = null;
        PurchaseOfferingRequest purchaseOfferingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseOfferingResult response = api.purchaseOffering(xAmzTarget, purchaseOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Explicitly sets the quantity of devices to renew for an offering, starting from the &lt;code&gt;effectiveDate&lt;/code&gt; of the next period. The API returns a &lt;code&gt;NotEligible&lt;/code&gt; error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact &lt;a href&#x3D;\&quot;mailto:aws-devicefarm-support@amazon.com\&quot;&gt;aws-devicefarm-support@amazon.com&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renewOfferingTest() throws ApiException {
        String xAmzTarget = null;
        RenewOfferingRequest renewOfferingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RenewOfferingResult response = api.renewOffering(xAmzTarget, renewOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Schedules a run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleRunTest() throws ApiException {
        String xAmzTarget = null;
        ScheduleRunRequest scheduleRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ScheduleRunResult response = api.scheduleRun(xAmzTarget, scheduleRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device where tests have not started. You are not billed for this device. On the device where tests have started, setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown, and any tests that were in progress or already completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopJobTest() throws ApiException {
        String xAmzTarget = null;
        StopJobRequest stopJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopJobResult response = api.stopJob(xAmzTarget, stopJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Ends a specified remote access session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRemoteAccessSessionTest() throws ApiException {
        String xAmzTarget = null;
        StopRemoteAccessSessionRequest stopRemoteAccessSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopRemoteAccessSessionResult response = api.stopRemoteAccessSession(xAmzTarget, stopRemoteAccessSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices where tests have not started. You are not billed for these devices. On devices where tests have started executing, setup suite and teardown suite tests run to completion on those devices. You are billed for setup, teardown, and any tests that were in progress or already completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRunTest() throws ApiException {
        String xAmzTarget = null;
        StopRunRequest stopRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopRunResult response = api.stopRun(xAmzTarget, stopRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates information about a private device instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceInstanceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDeviceInstanceRequest updateDeviceInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDeviceInstanceResult response = api.updateDeviceInstance(xAmzTarget, updateDeviceInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDevicePoolTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDevicePoolRequest updateDevicePoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDevicePoolResult response = api.updateDevicePool(xAmzTarget, updateDevicePoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates information about an existing private device instance profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceProfileTest() throws ApiException {
        String xAmzTarget = null;
        UpdateInstanceProfileRequest updateInstanceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInstanceProfileResult response = api.updateInstanceProfile(xAmzTarget, updateInstanceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the network profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkProfileTest() throws ApiException {
        String xAmzTarget = null;
        UpdateNetworkProfileRequest updateNetworkProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateNetworkProfileResult response = api.updateNetworkProfile(xAmzTarget, updateNetworkProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the specified project name, given the project ARN and a new name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProjectRequest updateProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProjectResult response = api.updateProject(xAmzTarget, updateProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Change details of a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTestGridProjectTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTestGridProjectRequest updateTestGridProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTestGridProjectResult response = api.updateTestGridProject(xAmzTarget, updateTestGridProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an uploaded test spec.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUploadTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUploadRequest updateUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUploadResult response = api.updateUpload(xAmzTarget, updateUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVPCEConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateVPCEConfigurationRequest updateVPCEConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVPCEConfigurationResult response = api.updateVPCEConfiguration(xAmzTarget, updateVPCEConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
