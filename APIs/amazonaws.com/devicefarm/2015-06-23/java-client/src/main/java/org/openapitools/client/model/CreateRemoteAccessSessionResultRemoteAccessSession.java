/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BillingMethod;
import org.openapitools.client.model.CreateProjectRequestVpcConfig;
import org.openapitools.client.model.ExecutionResult;
import org.openapitools.client.model.ExecutionStatus;
import org.openapitools.client.model.InteractionMode;
import org.openapitools.client.model.RemoteAccessSessionDevice;
import org.openapitools.client.model.RemoteAccessSessionDeviceMinutes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRemoteAccessSessionResultRemoteAccessSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRemoteAccessSessionResultRemoteAccessSession {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExecutionStatus status;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ExecutionResult result;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public static final String SERIALIZED_NAME_STOPPED = "stopped";
  @SerializedName(SERIALIZED_NAME_STOPPED)
  private OffsetDateTime stopped;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private RemoteAccessSessionDevice device;

  public static final String SERIALIZED_NAME_INSTANCE_ARN = "instanceArn";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ARN)
  private String instanceArn;

  public static final String SERIALIZED_NAME_REMOTE_DEBUG_ENABLED = "remoteDebugEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_DEBUG_ENABLED)
  private Boolean remoteDebugEnabled;

  public static final String SERIALIZED_NAME_REMOTE_RECORD_ENABLED = "remoteRecordEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_RECORD_ENABLED)
  private Boolean remoteRecordEnabled;

  public static final String SERIALIZED_NAME_REMOTE_RECORD_APP_ARN = "remoteRecordAppArn";
  @SerializedName(SERIALIZED_NAME_REMOTE_RECORD_APP_ARN)
  private String remoteRecordAppArn;

  public static final String SERIALIZED_NAME_HOST_ADDRESS = "hostAddress";
  @SerializedName(SERIALIZED_NAME_HOST_ADDRESS)
  private String hostAddress;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_BILLING_METHOD = "billingMethod";
  @SerializedName(SERIALIZED_NAME_BILLING_METHOD)
  private BillingMethod billingMethod;

  public static final String SERIALIZED_NAME_DEVICE_MINUTES = "deviceMinutes";
  @SerializedName(SERIALIZED_NAME_DEVICE_MINUTES)
  private RemoteAccessSessionDeviceMinutes deviceMinutes;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_DEVICE_UDID = "deviceUdid";
  @SerializedName(SERIALIZED_NAME_DEVICE_UDID)
  private String deviceUdid;

  public static final String SERIALIZED_NAME_INTERACTION_MODE = "interactionMode";
  @SerializedName(SERIALIZED_NAME_INTERACTION_MODE)
  private InteractionMode interactionMode;

  public static final String SERIALIZED_NAME_SKIP_APP_RESIGN = "skipAppResign";
  @SerializedName(SERIALIZED_NAME_SKIP_APP_RESIGN)
  private Boolean skipAppResign;

  public static final String SERIALIZED_NAME_VPC_CONFIG = "vpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private CreateProjectRequestVpcConfig vpcConfig;

  public CreateRemoteAccessSessionResultRemoteAccessSession() {
  }

  public CreateRemoteAccessSessionResultRemoteAccessSession arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession status(ExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(ExecutionStatus status) {
    this.status = status;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession result(ExecutionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public ExecutionResult getResult() {
    return result;
  }

  public void setResult(ExecutionResult result) {
    this.result = result;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession stopped(OffsetDateTime stopped) {
    this.stopped = stopped;
    return this;
  }

  /**
   * Get stopped
   * @return stopped
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopped() {
    return stopped;
  }

  public void setStopped(OffsetDateTime stopped) {
    this.stopped = stopped;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession device(RemoteAccessSessionDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public RemoteAccessSessionDevice getDevice() {
    return device;
  }

  public void setDevice(RemoteAccessSessionDevice device) {
    this.device = device;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession instanceArn(String instanceArn) {
    this.instanceArn = instanceArn;
    return this;
  }

  /**
   * Get instanceArn
   * @return instanceArn
   */
  @javax.annotation.Nullable
  public String getInstanceArn() {
    return instanceArn;
  }

  public void setInstanceArn(String instanceArn) {
    this.instanceArn = instanceArn;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession remoteDebugEnabled(Boolean remoteDebugEnabled) {
    this.remoteDebugEnabled = remoteDebugEnabled;
    return this;
  }

  /**
   * Get remoteDebugEnabled
   * @return remoteDebugEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteDebugEnabled() {
    return remoteDebugEnabled;
  }

  public void setRemoteDebugEnabled(Boolean remoteDebugEnabled) {
    this.remoteDebugEnabled = remoteDebugEnabled;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession remoteRecordEnabled(Boolean remoteRecordEnabled) {
    this.remoteRecordEnabled = remoteRecordEnabled;
    return this;
  }

  /**
   * Get remoteRecordEnabled
   * @return remoteRecordEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteRecordEnabled() {
    return remoteRecordEnabled;
  }

  public void setRemoteRecordEnabled(Boolean remoteRecordEnabled) {
    this.remoteRecordEnabled = remoteRecordEnabled;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession remoteRecordAppArn(String remoteRecordAppArn) {
    this.remoteRecordAppArn = remoteRecordAppArn;
    return this;
  }

  /**
   * Get remoteRecordAppArn
   * @return remoteRecordAppArn
   */
  @javax.annotation.Nullable
  public String getRemoteRecordAppArn() {
    return remoteRecordAppArn;
  }

  public void setRemoteRecordAppArn(String remoteRecordAppArn) {
    this.remoteRecordAppArn = remoteRecordAppArn;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession hostAddress(String hostAddress) {
    this.hostAddress = hostAddress;
    return this;
  }

  /**
   * Get hostAddress
   * @return hostAddress
   */
  @javax.annotation.Nullable
  public String getHostAddress() {
    return hostAddress;
  }

  public void setHostAddress(String hostAddress) {
    this.hostAddress = hostAddress;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession billingMethod(BillingMethod billingMethod) {
    this.billingMethod = billingMethod;
    return this;
  }

  /**
   * Get billingMethod
   * @return billingMethod
   */
  @javax.annotation.Nullable
  public BillingMethod getBillingMethod() {
    return billingMethod;
  }

  public void setBillingMethod(BillingMethod billingMethod) {
    this.billingMethod = billingMethod;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession deviceMinutes(RemoteAccessSessionDeviceMinutes deviceMinutes) {
    this.deviceMinutes = deviceMinutes;
    return this;
  }

  /**
   * Get deviceMinutes
   * @return deviceMinutes
   */
  @javax.annotation.Nullable
  public RemoteAccessSessionDeviceMinutes getDeviceMinutes() {
    return deviceMinutes;
  }

  public void setDeviceMinutes(RemoteAccessSessionDeviceMinutes deviceMinutes) {
    this.deviceMinutes = deviceMinutes;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession deviceUdid(String deviceUdid) {
    this.deviceUdid = deviceUdid;
    return this;
  }

  /**
   * Get deviceUdid
   * @return deviceUdid
   */
  @javax.annotation.Nullable
  public String getDeviceUdid() {
    return deviceUdid;
  }

  public void setDeviceUdid(String deviceUdid) {
    this.deviceUdid = deviceUdid;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession interactionMode(InteractionMode interactionMode) {
    this.interactionMode = interactionMode;
    return this;
  }

  /**
   * Get interactionMode
   * @return interactionMode
   */
  @javax.annotation.Nullable
  public InteractionMode getInteractionMode() {
    return interactionMode;
  }

  public void setInteractionMode(InteractionMode interactionMode) {
    this.interactionMode = interactionMode;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession skipAppResign(Boolean skipAppResign) {
    this.skipAppResign = skipAppResign;
    return this;
  }

  /**
   * Get skipAppResign
   * @return skipAppResign
   */
  @javax.annotation.Nullable
  public Boolean getSkipAppResign() {
    return skipAppResign;
  }

  public void setSkipAppResign(Boolean skipAppResign) {
    this.skipAppResign = skipAppResign;
  }


  public CreateRemoteAccessSessionResultRemoteAccessSession vpcConfig(CreateProjectRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nullable
  public CreateProjectRequestVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(CreateProjectRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRemoteAccessSessionResultRemoteAccessSession createRemoteAccessSessionResultRemoteAccessSession = (CreateRemoteAccessSessionResultRemoteAccessSession) o;
    return Objects.equals(this.arn, createRemoteAccessSessionResultRemoteAccessSession.arn) &&
        Objects.equals(this.name, createRemoteAccessSessionResultRemoteAccessSession.name) &&
        Objects.equals(this.created, createRemoteAccessSessionResultRemoteAccessSession.created) &&
        Objects.equals(this.status, createRemoteAccessSessionResultRemoteAccessSession.status) &&
        Objects.equals(this.result, createRemoteAccessSessionResultRemoteAccessSession.result) &&
        Objects.equals(this.message, createRemoteAccessSessionResultRemoteAccessSession.message) &&
        Objects.equals(this.started, createRemoteAccessSessionResultRemoteAccessSession.started) &&
        Objects.equals(this.stopped, createRemoteAccessSessionResultRemoteAccessSession.stopped) &&
        Objects.equals(this.device, createRemoteAccessSessionResultRemoteAccessSession.device) &&
        Objects.equals(this.instanceArn, createRemoteAccessSessionResultRemoteAccessSession.instanceArn) &&
        Objects.equals(this.remoteDebugEnabled, createRemoteAccessSessionResultRemoteAccessSession.remoteDebugEnabled) &&
        Objects.equals(this.remoteRecordEnabled, createRemoteAccessSessionResultRemoteAccessSession.remoteRecordEnabled) &&
        Objects.equals(this.remoteRecordAppArn, createRemoteAccessSessionResultRemoteAccessSession.remoteRecordAppArn) &&
        Objects.equals(this.hostAddress, createRemoteAccessSessionResultRemoteAccessSession.hostAddress) &&
        Objects.equals(this.clientId, createRemoteAccessSessionResultRemoteAccessSession.clientId) &&
        Objects.equals(this.billingMethod, createRemoteAccessSessionResultRemoteAccessSession.billingMethod) &&
        Objects.equals(this.deviceMinutes, createRemoteAccessSessionResultRemoteAccessSession.deviceMinutes) &&
        Objects.equals(this.endpoint, createRemoteAccessSessionResultRemoteAccessSession.endpoint) &&
        Objects.equals(this.deviceUdid, createRemoteAccessSessionResultRemoteAccessSession.deviceUdid) &&
        Objects.equals(this.interactionMode, createRemoteAccessSessionResultRemoteAccessSession.interactionMode) &&
        Objects.equals(this.skipAppResign, createRemoteAccessSessionResultRemoteAccessSession.skipAppResign) &&
        Objects.equals(this.vpcConfig, createRemoteAccessSessionResultRemoteAccessSession.vpcConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, created, status, result, message, started, stopped, device, instanceArn, remoteDebugEnabled, remoteRecordEnabled, remoteRecordAppArn, hostAddress, clientId, billingMethod, deviceMinutes, endpoint, deviceUdid, interactionMode, skipAppResign, vpcConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRemoteAccessSessionResultRemoteAccessSession {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    instanceArn: ").append(toIndentedString(instanceArn)).append("\n");
    sb.append("    remoteDebugEnabled: ").append(toIndentedString(remoteDebugEnabled)).append("\n");
    sb.append("    remoteRecordEnabled: ").append(toIndentedString(remoteRecordEnabled)).append("\n");
    sb.append("    remoteRecordAppArn: ").append(toIndentedString(remoteRecordAppArn)).append("\n");
    sb.append("    hostAddress: ").append(toIndentedString(hostAddress)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    billingMethod: ").append(toIndentedString(billingMethod)).append("\n");
    sb.append("    deviceMinutes: ").append(toIndentedString(deviceMinutes)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    deviceUdid: ").append(toIndentedString(deviceUdid)).append("\n");
    sb.append("    interactionMode: ").append(toIndentedString(interactionMode)).append("\n");
    sb.append("    skipAppResign: ").append(toIndentedString(skipAppResign)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("created");
    openapiFields.add("status");
    openapiFields.add("result");
    openapiFields.add("message");
    openapiFields.add("started");
    openapiFields.add("stopped");
    openapiFields.add("device");
    openapiFields.add("instanceArn");
    openapiFields.add("remoteDebugEnabled");
    openapiFields.add("remoteRecordEnabled");
    openapiFields.add("remoteRecordAppArn");
    openapiFields.add("hostAddress");
    openapiFields.add("clientId");
    openapiFields.add("billingMethod");
    openapiFields.add("deviceMinutes");
    openapiFields.add("endpoint");
    openapiFields.add("deviceUdid");
    openapiFields.add("interactionMode");
    openapiFields.add("skipAppResign");
    openapiFields.add("vpcConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRemoteAccessSessionResultRemoteAccessSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRemoteAccessSessionResultRemoteAccessSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRemoteAccessSessionResultRemoteAccessSession is not found in the empty JSON string", CreateRemoteAccessSessionResultRemoteAccessSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRemoteAccessSessionResultRemoteAccessSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRemoteAccessSessionResultRemoteAccessSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `created`
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ExecutionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ExecutionResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `started`
      if (jsonObj.get("started") != null && !jsonObj.get("started").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("started"));
      }
      // validate the optional field `stopped`
      if (jsonObj.get("stopped") != null && !jsonObj.get("stopped").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopped"));
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        RemoteAccessSessionDevice.validateJsonElement(jsonObj.get("device"));
      }
      // validate the optional field `instanceArn`
      if (jsonObj.get("instanceArn") != null && !jsonObj.get("instanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceArn"));
      }
      // validate the optional field `remoteDebugEnabled`
      if (jsonObj.get("remoteDebugEnabled") != null && !jsonObj.get("remoteDebugEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("remoteDebugEnabled"));
      }
      // validate the optional field `remoteRecordEnabled`
      if (jsonObj.get("remoteRecordEnabled") != null && !jsonObj.get("remoteRecordEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("remoteRecordEnabled"));
      }
      // validate the optional field `remoteRecordAppArn`
      if (jsonObj.get("remoteRecordAppArn") != null && !jsonObj.get("remoteRecordAppArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("remoteRecordAppArn"));
      }
      // validate the optional field `hostAddress`
      if (jsonObj.get("hostAddress") != null && !jsonObj.get("hostAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostAddress"));
      }
      // validate the optional field `clientId`
      if (jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientId"));
      }
      // validate the optional field `billingMethod`
      if (jsonObj.get("billingMethod") != null && !jsonObj.get("billingMethod").isJsonNull()) {
        BillingMethod.validateJsonElement(jsonObj.get("billingMethod"));
      }
      // validate the optional field `deviceMinutes`
      if (jsonObj.get("deviceMinutes") != null && !jsonObj.get("deviceMinutes").isJsonNull()) {
        RemoteAccessSessionDeviceMinutes.validateJsonElement(jsonObj.get("deviceMinutes"));
      }
      // validate the optional field `endpoint`
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("endpoint"));
      }
      // validate the optional field `deviceUdid`
      if (jsonObj.get("deviceUdid") != null && !jsonObj.get("deviceUdid").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("deviceUdid"));
      }
      // validate the optional field `interactionMode`
      if (jsonObj.get("interactionMode") != null && !jsonObj.get("interactionMode").isJsonNull()) {
        InteractionMode.validateJsonElement(jsonObj.get("interactionMode"));
      }
      // validate the optional field `skipAppResign`
      if (jsonObj.get("skipAppResign") != null && !jsonObj.get("skipAppResign").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("skipAppResign"));
      }
      // validate the optional field `vpcConfig`
      if (jsonObj.get("vpcConfig") != null && !jsonObj.get("vpcConfig").isJsonNull()) {
        CreateProjectRequestVpcConfig.validateJsonElement(jsonObj.get("vpcConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRemoteAccessSessionResultRemoteAccessSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRemoteAccessSessionResultRemoteAccessSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRemoteAccessSessionResultRemoteAccessSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRemoteAccessSessionResultRemoteAccessSession.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRemoteAccessSessionResultRemoteAccessSession>() {
           @Override
           public void write(JsonWriter out, CreateRemoteAccessSessionResultRemoteAccessSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRemoteAccessSessionResultRemoteAccessSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRemoteAccessSessionResultRemoteAccessSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRemoteAccessSessionResultRemoteAccessSession
   * @throws IOException if the JSON string is invalid with respect to CreateRemoteAccessSessionResultRemoteAccessSession
   */
  public static CreateRemoteAccessSessionResultRemoteAccessSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRemoteAccessSessionResultRemoteAccessSession.class);
  }

  /**
   * Convert an instance of CreateRemoteAccessSessionResultRemoteAccessSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

