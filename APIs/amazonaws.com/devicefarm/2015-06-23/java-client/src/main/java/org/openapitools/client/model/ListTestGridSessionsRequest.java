/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TestGridSessionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTestGridSessionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTestGridSessionsRequest {
  public static final String SERIALIZED_NAME_PROJECT_ARN = "projectArn";
  @SerializedName(SERIALIZED_NAME_PROJECT_ARN)
  private String projectArn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TestGridSessionStatus status;

  public static final String SERIALIZED_NAME_CREATION_TIME_AFTER = "creationTimeAfter";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME_AFTER)
  private OffsetDateTime creationTimeAfter;

  public static final String SERIALIZED_NAME_CREATION_TIME_BEFORE = "creationTimeBefore";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME_BEFORE)
  private OffsetDateTime creationTimeBefore;

  public static final String SERIALIZED_NAME_END_TIME_AFTER = "endTimeAfter";
  @SerializedName(SERIALIZED_NAME_END_TIME_AFTER)
  private OffsetDateTime endTimeAfter;

  public static final String SERIALIZED_NAME_END_TIME_BEFORE = "endTimeBefore";
  @SerializedName(SERIALIZED_NAME_END_TIME_BEFORE)
  private OffsetDateTime endTimeBefore;

  public static final String SERIALIZED_NAME_MAX_RESULT = "maxResult";
  @SerializedName(SERIALIZED_NAME_MAX_RESULT)
  private Integer maxResult;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListTestGridSessionsRequest() {
  }

  public ListTestGridSessionsRequest projectArn(String projectArn) {
    this.projectArn = projectArn;
    return this;
  }

  /**
   * Get projectArn
   * @return projectArn
   */
  @javax.annotation.Nonnull
  public String getProjectArn() {
    return projectArn;
  }

  public void setProjectArn(String projectArn) {
    this.projectArn = projectArn;
  }


  public ListTestGridSessionsRequest status(TestGridSessionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TestGridSessionStatus getStatus() {
    return status;
  }

  public void setStatus(TestGridSessionStatus status) {
    this.status = status;
  }


  public ListTestGridSessionsRequest creationTimeAfter(OffsetDateTime creationTimeAfter) {
    this.creationTimeAfter = creationTimeAfter;
    return this;
  }

  /**
   * Get creationTimeAfter
   * @return creationTimeAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimeAfter() {
    return creationTimeAfter;
  }

  public void setCreationTimeAfter(OffsetDateTime creationTimeAfter) {
    this.creationTimeAfter = creationTimeAfter;
  }


  public ListTestGridSessionsRequest creationTimeBefore(OffsetDateTime creationTimeBefore) {
    this.creationTimeBefore = creationTimeBefore;
    return this;
  }

  /**
   * Get creationTimeBefore
   * @return creationTimeBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimeBefore() {
    return creationTimeBefore;
  }

  public void setCreationTimeBefore(OffsetDateTime creationTimeBefore) {
    this.creationTimeBefore = creationTimeBefore;
  }


  public ListTestGridSessionsRequest endTimeAfter(OffsetDateTime endTimeAfter) {
    this.endTimeAfter = endTimeAfter;
    return this;
  }

  /**
   * Get endTimeAfter
   * @return endTimeAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTimeAfter() {
    return endTimeAfter;
  }

  public void setEndTimeAfter(OffsetDateTime endTimeAfter) {
    this.endTimeAfter = endTimeAfter;
  }


  public ListTestGridSessionsRequest endTimeBefore(OffsetDateTime endTimeBefore) {
    this.endTimeBefore = endTimeBefore;
    return this;
  }

  /**
   * Get endTimeBefore
   * @return endTimeBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTimeBefore() {
    return endTimeBefore;
  }

  public void setEndTimeBefore(OffsetDateTime endTimeBefore) {
    this.endTimeBefore = endTimeBefore;
  }


  public ListTestGridSessionsRequest maxResult(Integer maxResult) {
    this.maxResult = maxResult;
    return this;
  }

  /**
   * Get maxResult
   * @return maxResult
   */
  @javax.annotation.Nullable
  public Integer getMaxResult() {
    return maxResult;
  }

  public void setMaxResult(Integer maxResult) {
    this.maxResult = maxResult;
  }


  public ListTestGridSessionsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTestGridSessionsRequest listTestGridSessionsRequest = (ListTestGridSessionsRequest) o;
    return Objects.equals(this.projectArn, listTestGridSessionsRequest.projectArn) &&
        Objects.equals(this.status, listTestGridSessionsRequest.status) &&
        Objects.equals(this.creationTimeAfter, listTestGridSessionsRequest.creationTimeAfter) &&
        Objects.equals(this.creationTimeBefore, listTestGridSessionsRequest.creationTimeBefore) &&
        Objects.equals(this.endTimeAfter, listTestGridSessionsRequest.endTimeAfter) &&
        Objects.equals(this.endTimeBefore, listTestGridSessionsRequest.endTimeBefore) &&
        Objects.equals(this.maxResult, listTestGridSessionsRequest.maxResult) &&
        Objects.equals(this.nextToken, listTestGridSessionsRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectArn, status, creationTimeAfter, creationTimeBefore, endTimeAfter, endTimeBefore, maxResult, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTestGridSessionsRequest {\n");
    sb.append("    projectArn: ").append(toIndentedString(projectArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationTimeAfter: ").append(toIndentedString(creationTimeAfter)).append("\n");
    sb.append("    creationTimeBefore: ").append(toIndentedString(creationTimeBefore)).append("\n");
    sb.append("    endTimeAfter: ").append(toIndentedString(endTimeAfter)).append("\n");
    sb.append("    endTimeBefore: ").append(toIndentedString(endTimeBefore)).append("\n");
    sb.append("    maxResult: ").append(toIndentedString(maxResult)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectArn");
    openapiFields.add("status");
    openapiFields.add("creationTimeAfter");
    openapiFields.add("creationTimeBefore");
    openapiFields.add("endTimeAfter");
    openapiFields.add("endTimeBefore");
    openapiFields.add("maxResult");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTestGridSessionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTestGridSessionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTestGridSessionsRequest is not found in the empty JSON string", ListTestGridSessionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTestGridSessionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTestGridSessionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListTestGridSessionsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `projectArn`
      String.validateJsonElement(jsonObj.get("projectArn"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TestGridSessionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `creationTimeAfter`
      if (jsonObj.get("creationTimeAfter") != null && !jsonObj.get("creationTimeAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTimeAfter"));
      }
      // validate the optional field `creationTimeBefore`
      if (jsonObj.get("creationTimeBefore") != null && !jsonObj.get("creationTimeBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTimeBefore"));
      }
      // validate the optional field `endTimeAfter`
      if (jsonObj.get("endTimeAfter") != null && !jsonObj.get("endTimeAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTimeAfter"));
      }
      // validate the optional field `endTimeBefore`
      if (jsonObj.get("endTimeBefore") != null && !jsonObj.get("endTimeBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTimeBefore"));
      }
      // validate the optional field `maxResult`
      if (jsonObj.get("maxResult") != null && !jsonObj.get("maxResult").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxResult"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTestGridSessionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTestGridSessionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTestGridSessionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTestGridSessionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTestGridSessionsRequest>() {
           @Override
           public void write(JsonWriter out, ListTestGridSessionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTestGridSessionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTestGridSessionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTestGridSessionsRequest
   * @throws IOException if the JSON string is invalid with respect to ListTestGridSessionsRequest
   */
  public static ListTestGridSessionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTestGridSessionsRequest.class);
  }

  /**
   * Convert an instance of ListTestGridSessionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

