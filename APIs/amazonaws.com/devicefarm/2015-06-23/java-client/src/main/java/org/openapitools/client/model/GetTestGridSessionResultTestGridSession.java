/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TestGridSessionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTestGridSessionResultTestGridSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTestGridSessionResultTestGridSession {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TestGridSessionStatus status;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_ENDED = "ended";
  @SerializedName(SERIALIZED_NAME_ENDED)
  private OffsetDateTime ended;

  public static final String SERIALIZED_NAME_BILLING_MINUTES = "billingMinutes";
  @SerializedName(SERIALIZED_NAME_BILLING_MINUTES)
  private Double billingMinutes;

  public static final String SERIALIZED_NAME_SELENIUM_PROPERTIES = "seleniumProperties";
  @SerializedName(SERIALIZED_NAME_SELENIUM_PROPERTIES)
  private String seleniumProperties;

  public GetTestGridSessionResultTestGridSession() {
  }

  public GetTestGridSessionResultTestGridSession arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetTestGridSessionResultTestGridSession status(TestGridSessionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TestGridSessionStatus getStatus() {
    return status;
  }

  public void setStatus(TestGridSessionStatus status) {
    this.status = status;
  }


  public GetTestGridSessionResultTestGridSession created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public GetTestGridSessionResultTestGridSession ended(OffsetDateTime ended) {
    this.ended = ended;
    return this;
  }

  /**
   * Get ended
   * @return ended
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnded() {
    return ended;
  }

  public void setEnded(OffsetDateTime ended) {
    this.ended = ended;
  }


  public GetTestGridSessionResultTestGridSession billingMinutes(Double billingMinutes) {
    this.billingMinutes = billingMinutes;
    return this;
  }

  /**
   * Get billingMinutes
   * @return billingMinutes
   */
  @javax.annotation.Nullable
  public Double getBillingMinutes() {
    return billingMinutes;
  }

  public void setBillingMinutes(Double billingMinutes) {
    this.billingMinutes = billingMinutes;
  }


  public GetTestGridSessionResultTestGridSession seleniumProperties(String seleniumProperties) {
    this.seleniumProperties = seleniumProperties;
    return this;
  }

  /**
   * Get seleniumProperties
   * @return seleniumProperties
   */
  @javax.annotation.Nullable
  public String getSeleniumProperties() {
    return seleniumProperties;
  }

  public void setSeleniumProperties(String seleniumProperties) {
    this.seleniumProperties = seleniumProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTestGridSessionResultTestGridSession getTestGridSessionResultTestGridSession = (GetTestGridSessionResultTestGridSession) o;
    return Objects.equals(this.arn, getTestGridSessionResultTestGridSession.arn) &&
        Objects.equals(this.status, getTestGridSessionResultTestGridSession.status) &&
        Objects.equals(this.created, getTestGridSessionResultTestGridSession.created) &&
        Objects.equals(this.ended, getTestGridSessionResultTestGridSession.ended) &&
        Objects.equals(this.billingMinutes, getTestGridSessionResultTestGridSession.billingMinutes) &&
        Objects.equals(this.seleniumProperties, getTestGridSessionResultTestGridSession.seleniumProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, status, created, ended, billingMinutes, seleniumProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTestGridSessionResultTestGridSession {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    ended: ").append(toIndentedString(ended)).append("\n");
    sb.append("    billingMinutes: ").append(toIndentedString(billingMinutes)).append("\n");
    sb.append("    seleniumProperties: ").append(toIndentedString(seleniumProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("status");
    openapiFields.add("created");
    openapiFields.add("ended");
    openapiFields.add("billingMinutes");
    openapiFields.add("seleniumProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTestGridSessionResultTestGridSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTestGridSessionResultTestGridSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTestGridSessionResultTestGridSession is not found in the empty JSON string", GetTestGridSessionResultTestGridSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTestGridSessionResultTestGridSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTestGridSessionResultTestGridSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TestGridSessionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `created`
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      }
      // validate the optional field `ended`
      if (jsonObj.get("ended") != null && !jsonObj.get("ended").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ended"));
      }
      // validate the optional field `billingMinutes`
      if (jsonObj.get("billingMinutes") != null && !jsonObj.get("billingMinutes").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("billingMinutes"));
      }
      // validate the optional field `seleniumProperties`
      if (jsonObj.get("seleniumProperties") != null && !jsonObj.get("seleniumProperties").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("seleniumProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTestGridSessionResultTestGridSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTestGridSessionResultTestGridSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTestGridSessionResultTestGridSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTestGridSessionResultTestGridSession.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTestGridSessionResultTestGridSession>() {
           @Override
           public void write(JsonWriter out, GetTestGridSessionResultTestGridSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTestGridSessionResultTestGridSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTestGridSessionResultTestGridSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTestGridSessionResultTestGridSession
   * @throws IOException if the JSON string is invalid with respect to GetTestGridSessionResultTestGridSession
   */
  public static GetTestGridSessionResultTestGridSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTestGridSessionResultTestGridSession.class);
  }

  /**
   * Convert an instance of GetTestGridSessionResultTestGridSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

