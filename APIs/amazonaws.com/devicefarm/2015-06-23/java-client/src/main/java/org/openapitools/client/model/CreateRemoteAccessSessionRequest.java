/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateRemoteAccessSessionRequestConfiguration;
import org.openapitools.client.model.InteractionMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creates and submits a request to start a remote access session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRemoteAccessSessionRequest {
  public static final String SERIALIZED_NAME_PROJECT_ARN = "projectArn";
  @SerializedName(SERIALIZED_NAME_PROJECT_ARN)
  private String projectArn;

  public static final String SERIALIZED_NAME_DEVICE_ARN = "deviceArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_ARN)
  private String deviceArn;

  public static final String SERIALIZED_NAME_INSTANCE_ARN = "instanceArn";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ARN)
  private String instanceArn;

  public static final String SERIALIZED_NAME_SSH_PUBLIC_KEY = "sshPublicKey";
  @SerializedName(SERIALIZED_NAME_SSH_PUBLIC_KEY)
  private String sshPublicKey;

  public static final String SERIALIZED_NAME_REMOTE_DEBUG_ENABLED = "remoteDebugEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_DEBUG_ENABLED)
  private Boolean remoteDebugEnabled;

  public static final String SERIALIZED_NAME_REMOTE_RECORD_ENABLED = "remoteRecordEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_RECORD_ENABLED)
  private Boolean remoteRecordEnabled;

  public static final String SERIALIZED_NAME_REMOTE_RECORD_APP_ARN = "remoteRecordAppArn";
  @SerializedName(SERIALIZED_NAME_REMOTE_RECORD_APP_ARN)
  private String remoteRecordAppArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private CreateRemoteAccessSessionRequestConfiguration _configuration;

  public static final String SERIALIZED_NAME_INTERACTION_MODE = "interactionMode";
  @SerializedName(SERIALIZED_NAME_INTERACTION_MODE)
  private InteractionMode interactionMode;

  public static final String SERIALIZED_NAME_SKIP_APP_RESIGN = "skipAppResign";
  @SerializedName(SERIALIZED_NAME_SKIP_APP_RESIGN)
  private Boolean skipAppResign;

  public CreateRemoteAccessSessionRequest() {
  }

  public CreateRemoteAccessSessionRequest projectArn(String projectArn) {
    this.projectArn = projectArn;
    return this;
  }

  /**
   * Get projectArn
   * @return projectArn
   */
  @javax.annotation.Nonnull
  public String getProjectArn() {
    return projectArn;
  }

  public void setProjectArn(String projectArn) {
    this.projectArn = projectArn;
  }


  public CreateRemoteAccessSessionRequest deviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
    return this;
  }

  /**
   * Get deviceArn
   * @return deviceArn
   */
  @javax.annotation.Nonnull
  public String getDeviceArn() {
    return deviceArn;
  }

  public void setDeviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
  }


  public CreateRemoteAccessSessionRequest instanceArn(String instanceArn) {
    this.instanceArn = instanceArn;
    return this;
  }

  /**
   * Get instanceArn
   * @return instanceArn
   */
  @javax.annotation.Nullable
  public String getInstanceArn() {
    return instanceArn;
  }

  public void setInstanceArn(String instanceArn) {
    this.instanceArn = instanceArn;
  }


  public CreateRemoteAccessSessionRequest sshPublicKey(String sshPublicKey) {
    this.sshPublicKey = sshPublicKey;
    return this;
  }

  /**
   * Get sshPublicKey
   * @return sshPublicKey
   */
  @javax.annotation.Nullable
  public String getSshPublicKey() {
    return sshPublicKey;
  }

  public void setSshPublicKey(String sshPublicKey) {
    this.sshPublicKey = sshPublicKey;
  }


  public CreateRemoteAccessSessionRequest remoteDebugEnabled(Boolean remoteDebugEnabled) {
    this.remoteDebugEnabled = remoteDebugEnabled;
    return this;
  }

  /**
   * Get remoteDebugEnabled
   * @return remoteDebugEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteDebugEnabled() {
    return remoteDebugEnabled;
  }

  public void setRemoteDebugEnabled(Boolean remoteDebugEnabled) {
    this.remoteDebugEnabled = remoteDebugEnabled;
  }


  public CreateRemoteAccessSessionRequest remoteRecordEnabled(Boolean remoteRecordEnabled) {
    this.remoteRecordEnabled = remoteRecordEnabled;
    return this;
  }

  /**
   * Get remoteRecordEnabled
   * @return remoteRecordEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteRecordEnabled() {
    return remoteRecordEnabled;
  }

  public void setRemoteRecordEnabled(Boolean remoteRecordEnabled) {
    this.remoteRecordEnabled = remoteRecordEnabled;
  }


  public CreateRemoteAccessSessionRequest remoteRecordAppArn(String remoteRecordAppArn) {
    this.remoteRecordAppArn = remoteRecordAppArn;
    return this;
  }

  /**
   * Get remoteRecordAppArn
   * @return remoteRecordAppArn
   */
  @javax.annotation.Nullable
  public String getRemoteRecordAppArn() {
    return remoteRecordAppArn;
  }

  public void setRemoteRecordAppArn(String remoteRecordAppArn) {
    this.remoteRecordAppArn = remoteRecordAppArn;
  }


  public CreateRemoteAccessSessionRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRemoteAccessSessionRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public CreateRemoteAccessSessionRequest _configuration(CreateRemoteAccessSessionRequestConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public CreateRemoteAccessSessionRequestConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(CreateRemoteAccessSessionRequestConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public CreateRemoteAccessSessionRequest interactionMode(InteractionMode interactionMode) {
    this.interactionMode = interactionMode;
    return this;
  }

  /**
   * Get interactionMode
   * @return interactionMode
   */
  @javax.annotation.Nullable
  public InteractionMode getInteractionMode() {
    return interactionMode;
  }

  public void setInteractionMode(InteractionMode interactionMode) {
    this.interactionMode = interactionMode;
  }


  public CreateRemoteAccessSessionRequest skipAppResign(Boolean skipAppResign) {
    this.skipAppResign = skipAppResign;
    return this;
  }

  /**
   * Get skipAppResign
   * @return skipAppResign
   */
  @javax.annotation.Nullable
  public Boolean getSkipAppResign() {
    return skipAppResign;
  }

  public void setSkipAppResign(Boolean skipAppResign) {
    this.skipAppResign = skipAppResign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRemoteAccessSessionRequest createRemoteAccessSessionRequest = (CreateRemoteAccessSessionRequest) o;
    return Objects.equals(this.projectArn, createRemoteAccessSessionRequest.projectArn) &&
        Objects.equals(this.deviceArn, createRemoteAccessSessionRequest.deviceArn) &&
        Objects.equals(this.instanceArn, createRemoteAccessSessionRequest.instanceArn) &&
        Objects.equals(this.sshPublicKey, createRemoteAccessSessionRequest.sshPublicKey) &&
        Objects.equals(this.remoteDebugEnabled, createRemoteAccessSessionRequest.remoteDebugEnabled) &&
        Objects.equals(this.remoteRecordEnabled, createRemoteAccessSessionRequest.remoteRecordEnabled) &&
        Objects.equals(this.remoteRecordAppArn, createRemoteAccessSessionRequest.remoteRecordAppArn) &&
        Objects.equals(this.name, createRemoteAccessSessionRequest.name) &&
        Objects.equals(this.clientId, createRemoteAccessSessionRequest.clientId) &&
        Objects.equals(this._configuration, createRemoteAccessSessionRequest._configuration) &&
        Objects.equals(this.interactionMode, createRemoteAccessSessionRequest.interactionMode) &&
        Objects.equals(this.skipAppResign, createRemoteAccessSessionRequest.skipAppResign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectArn, deviceArn, instanceArn, sshPublicKey, remoteDebugEnabled, remoteRecordEnabled, remoteRecordAppArn, name, clientId, _configuration, interactionMode, skipAppResign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRemoteAccessSessionRequest {\n");
    sb.append("    projectArn: ").append(toIndentedString(projectArn)).append("\n");
    sb.append("    deviceArn: ").append(toIndentedString(deviceArn)).append("\n");
    sb.append("    instanceArn: ").append(toIndentedString(instanceArn)).append("\n");
    sb.append("    sshPublicKey: ").append(toIndentedString(sshPublicKey)).append("\n");
    sb.append("    remoteDebugEnabled: ").append(toIndentedString(remoteDebugEnabled)).append("\n");
    sb.append("    remoteRecordEnabled: ").append(toIndentedString(remoteRecordEnabled)).append("\n");
    sb.append("    remoteRecordAppArn: ").append(toIndentedString(remoteRecordAppArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    interactionMode: ").append(toIndentedString(interactionMode)).append("\n");
    sb.append("    skipAppResign: ").append(toIndentedString(skipAppResign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectArn");
    openapiFields.add("deviceArn");
    openapiFields.add("instanceArn");
    openapiFields.add("sshPublicKey");
    openapiFields.add("remoteDebugEnabled");
    openapiFields.add("remoteRecordEnabled");
    openapiFields.add("remoteRecordAppArn");
    openapiFields.add("name");
    openapiFields.add("clientId");
    openapiFields.add("configuration");
    openapiFields.add("interactionMode");
    openapiFields.add("skipAppResign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectArn");
    openapiRequiredFields.add("deviceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRemoteAccessSessionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRemoteAccessSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRemoteAccessSessionRequest is not found in the empty JSON string", CreateRemoteAccessSessionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRemoteAccessSessionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRemoteAccessSessionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRemoteAccessSessionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `projectArn`
      String.validateJsonElement(jsonObj.get("projectArn"));
      // validate the required field `deviceArn`
      String.validateJsonElement(jsonObj.get("deviceArn"));
      // validate the optional field `instanceArn`
      if (jsonObj.get("instanceArn") != null && !jsonObj.get("instanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceArn"));
      }
      // validate the optional field `sshPublicKey`
      if (jsonObj.get("sshPublicKey") != null && !jsonObj.get("sshPublicKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sshPublicKey"));
      }
      // validate the optional field `remoteDebugEnabled`
      if (jsonObj.get("remoteDebugEnabled") != null && !jsonObj.get("remoteDebugEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("remoteDebugEnabled"));
      }
      // validate the optional field `remoteRecordEnabled`
      if (jsonObj.get("remoteRecordEnabled") != null && !jsonObj.get("remoteRecordEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("remoteRecordEnabled"));
      }
      // validate the optional field `remoteRecordAppArn`
      if (jsonObj.get("remoteRecordAppArn") != null && !jsonObj.get("remoteRecordAppArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("remoteRecordAppArn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `clientId`
      if (jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientId"));
      }
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        CreateRemoteAccessSessionRequestConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      // validate the optional field `interactionMode`
      if (jsonObj.get("interactionMode") != null && !jsonObj.get("interactionMode").isJsonNull()) {
        InteractionMode.validateJsonElement(jsonObj.get("interactionMode"));
      }
      // validate the optional field `skipAppResign`
      if (jsonObj.get("skipAppResign") != null && !jsonObj.get("skipAppResign").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("skipAppResign"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRemoteAccessSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRemoteAccessSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRemoteAccessSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRemoteAccessSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRemoteAccessSessionRequest>() {
           @Override
           public void write(JsonWriter out, CreateRemoteAccessSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRemoteAccessSessionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRemoteAccessSessionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRemoteAccessSessionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRemoteAccessSessionRequest
   */
  public static CreateRemoteAccessSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRemoteAccessSessionRequest.class);
  }

  /**
   * Convert an instance of CreateRemoteAccessSessionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

