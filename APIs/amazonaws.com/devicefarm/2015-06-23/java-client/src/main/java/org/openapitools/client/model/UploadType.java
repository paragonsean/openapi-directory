/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets UploadType
 */
@JsonAdapter(UploadType.Adapter.class)
public enum UploadType {
  
  ANDROID_APP("ANDROID_APP"),
  
  IOS_APP("IOS_APP"),
  
  WEB_APP("WEB_APP"),
  
  EXTERNAL_DATA("EXTERNAL_DATA"),
  
  APPIUM_JAVA_JUNIT_TEST_PACKAGE("APPIUM_JAVA_JUNIT_TEST_PACKAGE"),
  
  APPIUM_JAVA_TESTNG_TEST_PACKAGE("APPIUM_JAVA_TESTNG_TEST_PACKAGE"),
  
  APPIUM_PYTHON_TEST_PACKAGE("APPIUM_PYTHON_TEST_PACKAGE"),
  
  APPIUM_NODE_TEST_PACKAGE("APPIUM_NODE_TEST_PACKAGE"),
  
  APPIUM_RUBY_TEST_PACKAGE("APPIUM_RUBY_TEST_PACKAGE"),
  
  APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE("APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE"),
  
  APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE("APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE"),
  
  APPIUM_WEB_PYTHON_TEST_PACKAGE("APPIUM_WEB_PYTHON_TEST_PACKAGE"),
  
  APPIUM_WEB_NODE_TEST_PACKAGE("APPIUM_WEB_NODE_TEST_PACKAGE"),
  
  APPIUM_WEB_RUBY_TEST_PACKAGE("APPIUM_WEB_RUBY_TEST_PACKAGE"),
  
  CALABASH_TEST_PACKAGE("CALABASH_TEST_PACKAGE"),
  
  INSTRUMENTATION_TEST_PACKAGE("INSTRUMENTATION_TEST_PACKAGE"),
  
  UIAUTOMATION_TEST_PACKAGE("UIAUTOMATION_TEST_PACKAGE"),
  
  UIAUTOMATOR_TEST_PACKAGE("UIAUTOMATOR_TEST_PACKAGE"),
  
  XCTEST_TEST_PACKAGE("XCTEST_TEST_PACKAGE"),
  
  XCTEST_UI_TEST_PACKAGE("XCTEST_UI_TEST_PACKAGE"),
  
  APPIUM_JAVA_JUNIT_TEST_SPEC("APPIUM_JAVA_JUNIT_TEST_SPEC"),
  
  APPIUM_JAVA_TESTNG_TEST_SPEC("APPIUM_JAVA_TESTNG_TEST_SPEC"),
  
  APPIUM_PYTHON_TEST_SPEC("APPIUM_PYTHON_TEST_SPEC"),
  
  APPIUM_NODE_TEST_SPEC("APPIUM_NODE_TEST_SPEC"),
  
  APPIUM_RUBY_TEST_SPEC("APPIUM_RUBY_TEST_SPEC"),
  
  APPIUM_WEB_JAVA_JUNIT_TEST_SPEC("APPIUM_WEB_JAVA_JUNIT_TEST_SPEC"),
  
  APPIUM_WEB_JAVA_TESTNG_TEST_SPEC("APPIUM_WEB_JAVA_TESTNG_TEST_SPEC"),
  
  APPIUM_WEB_PYTHON_TEST_SPEC("APPIUM_WEB_PYTHON_TEST_SPEC"),
  
  APPIUM_WEB_NODE_TEST_SPEC("APPIUM_WEB_NODE_TEST_SPEC"),
  
  APPIUM_WEB_RUBY_TEST_SPEC("APPIUM_WEB_RUBY_TEST_SPEC"),
  
  INSTRUMENTATION_TEST_SPEC("INSTRUMENTATION_TEST_SPEC"),
  
  XCTEST_UI_TEST_SPEC("XCTEST_UI_TEST_SPEC");

  private String value;

  UploadType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static UploadType fromValue(String value) {
    for (UploadType b : UploadType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<UploadType> {
    @Override
    public void write(final JsonWriter jsonWriter, final UploadType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public UploadType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return UploadType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    UploadType.fromValue(value);
  }
}

