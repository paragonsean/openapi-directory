/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingMethod;
import org.openapitools.client.model.ScheduleRunConfigurationCustomerArtifactPaths;
import org.openapitools.client.model.ScheduleRunConfigurationLocation;
import org.openapitools.client.model.ScheduleRunConfigurationRadios;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleRunConfiguration {
  public static final String SERIALIZED_NAME_EXTRA_DATA_PACKAGE_ARN = "extraDataPackageArn";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA_PACKAGE_ARN)
  private String extraDataPackageArn;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE_ARN = "networkProfileArn";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE_ARN)
  private String networkProfileArn;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private ScheduleRunConfigurationLocation location;

  public static final String SERIALIZED_NAME_VPCE_CONFIGURATION_ARNS = "vpceConfigurationArns";
  @SerializedName(SERIALIZED_NAME_VPCE_CONFIGURATION_ARNS)
  private List vpceConfigurationArns;

  public static final String SERIALIZED_NAME_CUSTOMER_ARTIFACT_PATHS = "customerArtifactPaths";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ARTIFACT_PATHS)
  private ScheduleRunConfigurationCustomerArtifactPaths customerArtifactPaths;

  public static final String SERIALIZED_NAME_RADIOS = "radios";
  @SerializedName(SERIALIZED_NAME_RADIOS)
  private ScheduleRunConfigurationRadios radios;

  public static final String SERIALIZED_NAME_AUXILIARY_APPS = "auxiliaryApps";
  @SerializedName(SERIALIZED_NAME_AUXILIARY_APPS)
  private List auxiliaryApps;

  public static final String SERIALIZED_NAME_BILLING_METHOD = "billingMethod";
  @SerializedName(SERIALIZED_NAME_BILLING_METHOD)
  private BillingMethod billingMethod;

  public ScheduleRunConfiguration() {
  }

  public ScheduleRunConfiguration extraDataPackageArn(String extraDataPackageArn) {
    this.extraDataPackageArn = extraDataPackageArn;
    return this;
  }

  /**
   * Get extraDataPackageArn
   * @return extraDataPackageArn
   */
  @javax.annotation.Nullable
  public String getExtraDataPackageArn() {
    return extraDataPackageArn;
  }

  public void setExtraDataPackageArn(String extraDataPackageArn) {
    this.extraDataPackageArn = extraDataPackageArn;
  }


  public ScheduleRunConfiguration networkProfileArn(String networkProfileArn) {
    this.networkProfileArn = networkProfileArn;
    return this;
  }

  /**
   * Get networkProfileArn
   * @return networkProfileArn
   */
  @javax.annotation.Nullable
  public String getNetworkProfileArn() {
    return networkProfileArn;
  }

  public void setNetworkProfileArn(String networkProfileArn) {
    this.networkProfileArn = networkProfileArn;
  }


  public ScheduleRunConfiguration locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public ScheduleRunConfiguration location(ScheduleRunConfigurationLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public ScheduleRunConfigurationLocation getLocation() {
    return location;
  }

  public void setLocation(ScheduleRunConfigurationLocation location) {
    this.location = location;
  }


  public ScheduleRunConfiguration vpceConfigurationArns(List vpceConfigurationArns) {
    this.vpceConfigurationArns = vpceConfigurationArns;
    return this;
  }

  /**
   * Get vpceConfigurationArns
   * @return vpceConfigurationArns
   */
  @javax.annotation.Nullable
  public List getVpceConfigurationArns() {
    return vpceConfigurationArns;
  }

  public void setVpceConfigurationArns(List vpceConfigurationArns) {
    this.vpceConfigurationArns = vpceConfigurationArns;
  }


  public ScheduleRunConfiguration customerArtifactPaths(ScheduleRunConfigurationCustomerArtifactPaths customerArtifactPaths) {
    this.customerArtifactPaths = customerArtifactPaths;
    return this;
  }

  /**
   * Get customerArtifactPaths
   * @return customerArtifactPaths
   */
  @javax.annotation.Nullable
  public ScheduleRunConfigurationCustomerArtifactPaths getCustomerArtifactPaths() {
    return customerArtifactPaths;
  }

  public void setCustomerArtifactPaths(ScheduleRunConfigurationCustomerArtifactPaths customerArtifactPaths) {
    this.customerArtifactPaths = customerArtifactPaths;
  }


  public ScheduleRunConfiguration radios(ScheduleRunConfigurationRadios radios) {
    this.radios = radios;
    return this;
  }

  /**
   * Get radios
   * @return radios
   */
  @javax.annotation.Nullable
  public ScheduleRunConfigurationRadios getRadios() {
    return radios;
  }

  public void setRadios(ScheduleRunConfigurationRadios radios) {
    this.radios = radios;
  }


  public ScheduleRunConfiguration auxiliaryApps(List auxiliaryApps) {
    this.auxiliaryApps = auxiliaryApps;
    return this;
  }

  /**
   * Get auxiliaryApps
   * @return auxiliaryApps
   */
  @javax.annotation.Nullable
  public List getAuxiliaryApps() {
    return auxiliaryApps;
  }

  public void setAuxiliaryApps(List auxiliaryApps) {
    this.auxiliaryApps = auxiliaryApps;
  }


  public ScheduleRunConfiguration billingMethod(BillingMethod billingMethod) {
    this.billingMethod = billingMethod;
    return this;
  }

  /**
   * Get billingMethod
   * @return billingMethod
   */
  @javax.annotation.Nullable
  public BillingMethod getBillingMethod() {
    return billingMethod;
  }

  public void setBillingMethod(BillingMethod billingMethod) {
    this.billingMethod = billingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleRunConfiguration scheduleRunConfiguration = (ScheduleRunConfiguration) o;
    return Objects.equals(this.extraDataPackageArn, scheduleRunConfiguration.extraDataPackageArn) &&
        Objects.equals(this.networkProfileArn, scheduleRunConfiguration.networkProfileArn) &&
        Objects.equals(this.locale, scheduleRunConfiguration.locale) &&
        Objects.equals(this.location, scheduleRunConfiguration.location) &&
        Objects.equals(this.vpceConfigurationArns, scheduleRunConfiguration.vpceConfigurationArns) &&
        Objects.equals(this.customerArtifactPaths, scheduleRunConfiguration.customerArtifactPaths) &&
        Objects.equals(this.radios, scheduleRunConfiguration.radios) &&
        Objects.equals(this.auxiliaryApps, scheduleRunConfiguration.auxiliaryApps) &&
        Objects.equals(this.billingMethod, scheduleRunConfiguration.billingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extraDataPackageArn, networkProfileArn, locale, location, vpceConfigurationArns, customerArtifactPaths, radios, auxiliaryApps, billingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleRunConfiguration {\n");
    sb.append("    extraDataPackageArn: ").append(toIndentedString(extraDataPackageArn)).append("\n");
    sb.append("    networkProfileArn: ").append(toIndentedString(networkProfileArn)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    vpceConfigurationArns: ").append(toIndentedString(vpceConfigurationArns)).append("\n");
    sb.append("    customerArtifactPaths: ").append(toIndentedString(customerArtifactPaths)).append("\n");
    sb.append("    radios: ").append(toIndentedString(radios)).append("\n");
    sb.append("    auxiliaryApps: ").append(toIndentedString(auxiliaryApps)).append("\n");
    sb.append("    billingMethod: ").append(toIndentedString(billingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extraDataPackageArn");
    openapiFields.add("networkProfileArn");
    openapiFields.add("locale");
    openapiFields.add("location");
    openapiFields.add("vpceConfigurationArns");
    openapiFields.add("customerArtifactPaths");
    openapiFields.add("radios");
    openapiFields.add("auxiliaryApps");
    openapiFields.add("billingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleRunConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleRunConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleRunConfiguration is not found in the empty JSON string", ScheduleRunConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleRunConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleRunConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `extraDataPackageArn`
      if (jsonObj.get("extraDataPackageArn") != null && !jsonObj.get("extraDataPackageArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("extraDataPackageArn"));
      }
      // validate the optional field `networkProfileArn`
      if (jsonObj.get("networkProfileArn") != null && !jsonObj.get("networkProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("networkProfileArn"));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("locale"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        ScheduleRunConfigurationLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `vpceConfigurationArns`
      if (jsonObj.get("vpceConfigurationArns") != null && !jsonObj.get("vpceConfigurationArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("vpceConfigurationArns"));
      }
      // validate the optional field `customerArtifactPaths`
      if (jsonObj.get("customerArtifactPaths") != null && !jsonObj.get("customerArtifactPaths").isJsonNull()) {
        ScheduleRunConfigurationCustomerArtifactPaths.validateJsonElement(jsonObj.get("customerArtifactPaths"));
      }
      // validate the optional field `radios`
      if (jsonObj.get("radios") != null && !jsonObj.get("radios").isJsonNull()) {
        ScheduleRunConfigurationRadios.validateJsonElement(jsonObj.get("radios"));
      }
      // validate the optional field `auxiliaryApps`
      if (jsonObj.get("auxiliaryApps") != null && !jsonObj.get("auxiliaryApps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("auxiliaryApps"));
      }
      // validate the optional field `billingMethod`
      if (jsonObj.get("billingMethod") != null && !jsonObj.get("billingMethod").isJsonNull()) {
        BillingMethod.validateJsonElement(jsonObj.get("billingMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleRunConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleRunConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleRunConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleRunConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleRunConfiguration>() {
           @Override
           public void write(JsonWriter out, ScheduleRunConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleRunConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleRunConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleRunConfiguration
   * @throws IOException if the JSON string is invalid with respect to ScheduleRunConfiguration
   */
  public static ScheduleRunConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleRunConfiguration.class);
  }

  /**
   * Convert an instance of ScheduleRunConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

