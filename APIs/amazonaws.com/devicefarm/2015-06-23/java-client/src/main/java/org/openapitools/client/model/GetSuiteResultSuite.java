/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionResult;
import org.openapitools.client.model.ExecutionStatus;
import org.openapitools.client.model.SuiteCounters;
import org.openapitools.client.model.SuiteDeviceMinutes;
import org.openapitools.client.model.TestType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSuiteResultSuite
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSuiteResultSuite {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TestType type;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExecutionStatus status;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ExecutionResult result;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public static final String SERIALIZED_NAME_STOPPED = "stopped";
  @SerializedName(SERIALIZED_NAME_STOPPED)
  private OffsetDateTime stopped;

  public static final String SERIALIZED_NAME_COUNTERS = "counters";
  @SerializedName(SERIALIZED_NAME_COUNTERS)
  private SuiteCounters counters;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_DEVICE_MINUTES = "deviceMinutes";
  @SerializedName(SERIALIZED_NAME_DEVICE_MINUTES)
  private SuiteDeviceMinutes deviceMinutes;

  public GetSuiteResultSuite() {
  }

  public GetSuiteResultSuite arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetSuiteResultSuite name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetSuiteResultSuite type(TestType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TestType getType() {
    return type;
  }

  public void setType(TestType type) {
    this.type = type;
  }


  public GetSuiteResultSuite created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public GetSuiteResultSuite status(ExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(ExecutionStatus status) {
    this.status = status;
  }


  public GetSuiteResultSuite result(ExecutionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public ExecutionResult getResult() {
    return result;
  }

  public void setResult(ExecutionResult result) {
    this.result = result;
  }


  public GetSuiteResultSuite started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public GetSuiteResultSuite stopped(OffsetDateTime stopped) {
    this.stopped = stopped;
    return this;
  }

  /**
   * Get stopped
   * @return stopped
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopped() {
    return stopped;
  }

  public void setStopped(OffsetDateTime stopped) {
    this.stopped = stopped;
  }


  public GetSuiteResultSuite counters(SuiteCounters counters) {
    this.counters = counters;
    return this;
  }

  /**
   * Get counters
   * @return counters
   */
  @javax.annotation.Nullable
  public SuiteCounters getCounters() {
    return counters;
  }

  public void setCounters(SuiteCounters counters) {
    this.counters = counters;
  }


  public GetSuiteResultSuite message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GetSuiteResultSuite deviceMinutes(SuiteDeviceMinutes deviceMinutes) {
    this.deviceMinutes = deviceMinutes;
    return this;
  }

  /**
   * Get deviceMinutes
   * @return deviceMinutes
   */
  @javax.annotation.Nullable
  public SuiteDeviceMinutes getDeviceMinutes() {
    return deviceMinutes;
  }

  public void setDeviceMinutes(SuiteDeviceMinutes deviceMinutes) {
    this.deviceMinutes = deviceMinutes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSuiteResultSuite getSuiteResultSuite = (GetSuiteResultSuite) o;
    return Objects.equals(this.arn, getSuiteResultSuite.arn) &&
        Objects.equals(this.name, getSuiteResultSuite.name) &&
        Objects.equals(this.type, getSuiteResultSuite.type) &&
        Objects.equals(this.created, getSuiteResultSuite.created) &&
        Objects.equals(this.status, getSuiteResultSuite.status) &&
        Objects.equals(this.result, getSuiteResultSuite.result) &&
        Objects.equals(this.started, getSuiteResultSuite.started) &&
        Objects.equals(this.stopped, getSuiteResultSuite.stopped) &&
        Objects.equals(this.counters, getSuiteResultSuite.counters) &&
        Objects.equals(this.message, getSuiteResultSuite.message) &&
        Objects.equals(this.deviceMinutes, getSuiteResultSuite.deviceMinutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, type, created, status, result, started, stopped, counters, message, deviceMinutes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSuiteResultSuite {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("    counters: ").append(toIndentedString(counters)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    deviceMinutes: ").append(toIndentedString(deviceMinutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("created");
    openapiFields.add("status");
    openapiFields.add("result");
    openapiFields.add("started");
    openapiFields.add("stopped");
    openapiFields.add("counters");
    openapiFields.add("message");
    openapiFields.add("deviceMinutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSuiteResultSuite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSuiteResultSuite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSuiteResultSuite is not found in the empty JSON string", GetSuiteResultSuite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSuiteResultSuite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSuiteResultSuite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TestType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `created`
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ExecutionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ExecutionResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `started`
      if (jsonObj.get("started") != null && !jsonObj.get("started").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("started"));
      }
      // validate the optional field `stopped`
      if (jsonObj.get("stopped") != null && !jsonObj.get("stopped").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopped"));
      }
      // validate the optional field `counters`
      if (jsonObj.get("counters") != null && !jsonObj.get("counters").isJsonNull()) {
        SuiteCounters.validateJsonElement(jsonObj.get("counters"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `deviceMinutes`
      if (jsonObj.get("deviceMinutes") != null && !jsonObj.get("deviceMinutes").isJsonNull()) {
        SuiteDeviceMinutes.validateJsonElement(jsonObj.get("deviceMinutes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSuiteResultSuite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSuiteResultSuite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSuiteResultSuite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSuiteResultSuite.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSuiteResultSuite>() {
           @Override
           public void write(JsonWriter out, GetSuiteResultSuite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSuiteResultSuite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSuiteResultSuite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSuiteResultSuite
   * @throws IOException if the JSON string is invalid with respect to GetSuiteResultSuite
   */
  public static GetSuiteResultSuite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSuiteResultSuite.class);
  }

  /**
   * Convert an instance of GetSuiteResultSuite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

