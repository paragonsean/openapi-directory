/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BillingMethod;
import org.openapitools.client.model.CreateProjectRequestVpcConfig;
import org.openapitools.client.model.DevicePlatform;
import org.openapitools.client.model.ExecutionResult;
import org.openapitools.client.model.ExecutionResultCode;
import org.openapitools.client.model.ExecutionStatus;
import org.openapitools.client.model.RunCounters;
import org.openapitools.client.model.RunCustomerArtifactPaths;
import org.openapitools.client.model.RunDeviceMinutes;
import org.openapitools.client.model.RunDeviceSelectionResult;
import org.openapitools.client.model.RunNetworkProfile;
import org.openapitools.client.model.ScheduleRunConfigurationLocation;
import org.openapitools.client.model.ScheduleRunConfigurationRadios;
import org.openapitools.client.model.TestType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StopRunResultRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StopRunResultRun {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TestType type;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private DevicePlatform platform;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExecutionStatus status;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ExecutionResult result;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  public static final String SERIALIZED_NAME_STOPPED = "stopped";
  @SerializedName(SERIALIZED_NAME_STOPPED)
  private OffsetDateTime stopped;

  public static final String SERIALIZED_NAME_COUNTERS = "counters";
  @SerializedName(SERIALIZED_NAME_COUNTERS)
  private RunCounters counters;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_TOTAL_JOBS = "totalJobs";
  @SerializedName(SERIALIZED_NAME_TOTAL_JOBS)
  private Integer totalJobs;

  public static final String SERIALIZED_NAME_COMPLETED_JOBS = "completedJobs";
  @SerializedName(SERIALIZED_NAME_COMPLETED_JOBS)
  private Integer completedJobs;

  public static final String SERIALIZED_NAME_BILLING_METHOD = "billingMethod";
  @SerializedName(SERIALIZED_NAME_BILLING_METHOD)
  private BillingMethod billingMethod;

  public static final String SERIALIZED_NAME_DEVICE_MINUTES = "deviceMinutes";
  @SerializedName(SERIALIZED_NAME_DEVICE_MINUTES)
  private RunDeviceMinutes deviceMinutes;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private RunNetworkProfile networkProfile;

  public static final String SERIALIZED_NAME_PARSING_RESULT_URL = "parsingResultUrl";
  @SerializedName(SERIALIZED_NAME_PARSING_RESULT_URL)
  private String parsingResultUrl;

  public static final String SERIALIZED_NAME_RESULT_CODE = "resultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private ExecutionResultCode resultCode;

  public static final String SERIALIZED_NAME_SEED = "seed";
  @SerializedName(SERIALIZED_NAME_SEED)
  private Integer seed;

  public static final String SERIALIZED_NAME_APP_UPLOAD = "appUpload";
  @SerializedName(SERIALIZED_NAME_APP_UPLOAD)
  private String appUpload;

  public static final String SERIALIZED_NAME_EVENT_COUNT = "eventCount";
  @SerializedName(SERIALIZED_NAME_EVENT_COUNT)
  private Integer eventCount;

  public static final String SERIALIZED_NAME_JOB_TIMEOUT_MINUTES = "jobTimeoutMinutes";
  @SerializedName(SERIALIZED_NAME_JOB_TIMEOUT_MINUTES)
  private Integer jobTimeoutMinutes;

  public static final String SERIALIZED_NAME_DEVICE_POOL_ARN = "devicePoolArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_POOL_ARN)
  private String devicePoolArn;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_RADIOS = "radios";
  @SerializedName(SERIALIZED_NAME_RADIOS)
  private ScheduleRunConfigurationRadios radios;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private ScheduleRunConfigurationLocation location;

  public static final String SERIALIZED_NAME_CUSTOMER_ARTIFACT_PATHS = "customerArtifactPaths";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ARTIFACT_PATHS)
  private RunCustomerArtifactPaths customerArtifactPaths;

  public static final String SERIALIZED_NAME_WEB_URL = "webUrl";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_SKIP_APP_RESIGN = "skipAppResign";
  @SerializedName(SERIALIZED_NAME_SKIP_APP_RESIGN)
  private Boolean skipAppResign;

  public static final String SERIALIZED_NAME_TEST_SPEC_ARN = "testSpecArn";
  @SerializedName(SERIALIZED_NAME_TEST_SPEC_ARN)
  private String testSpecArn;

  public static final String SERIALIZED_NAME_DEVICE_SELECTION_RESULT = "deviceSelectionResult";
  @SerializedName(SERIALIZED_NAME_DEVICE_SELECTION_RESULT)
  private RunDeviceSelectionResult deviceSelectionResult;

  public static final String SERIALIZED_NAME_VPC_CONFIG = "vpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private CreateProjectRequestVpcConfig vpcConfig;

  public StopRunResultRun() {
  }

  public StopRunResultRun arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public StopRunResultRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StopRunResultRun type(TestType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TestType getType() {
    return type;
  }

  public void setType(TestType type) {
    this.type = type;
  }


  public StopRunResultRun platform(DevicePlatform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public DevicePlatform getPlatform() {
    return platform;
  }

  public void setPlatform(DevicePlatform platform) {
    this.platform = platform;
  }


  public StopRunResultRun created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public StopRunResultRun status(ExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(ExecutionStatus status) {
    this.status = status;
  }


  public StopRunResultRun result(ExecutionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public ExecutionResult getResult() {
    return result;
  }

  public void setResult(ExecutionResult result) {
    this.result = result;
  }


  public StopRunResultRun started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public StopRunResultRun stopped(OffsetDateTime stopped) {
    this.stopped = stopped;
    return this;
  }

  /**
   * Get stopped
   * @return stopped
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopped() {
    return stopped;
  }

  public void setStopped(OffsetDateTime stopped) {
    this.stopped = stopped;
  }


  public StopRunResultRun counters(RunCounters counters) {
    this.counters = counters;
    return this;
  }

  /**
   * Get counters
   * @return counters
   */
  @javax.annotation.Nullable
  public RunCounters getCounters() {
    return counters;
  }

  public void setCounters(RunCounters counters) {
    this.counters = counters;
  }


  public StopRunResultRun message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public StopRunResultRun totalJobs(Integer totalJobs) {
    this.totalJobs = totalJobs;
    return this;
  }

  /**
   * Get totalJobs
   * @return totalJobs
   */
  @javax.annotation.Nullable
  public Integer getTotalJobs() {
    return totalJobs;
  }

  public void setTotalJobs(Integer totalJobs) {
    this.totalJobs = totalJobs;
  }


  public StopRunResultRun completedJobs(Integer completedJobs) {
    this.completedJobs = completedJobs;
    return this;
  }

  /**
   * Get completedJobs
   * @return completedJobs
   */
  @javax.annotation.Nullable
  public Integer getCompletedJobs() {
    return completedJobs;
  }

  public void setCompletedJobs(Integer completedJobs) {
    this.completedJobs = completedJobs;
  }


  public StopRunResultRun billingMethod(BillingMethod billingMethod) {
    this.billingMethod = billingMethod;
    return this;
  }

  /**
   * Get billingMethod
   * @return billingMethod
   */
  @javax.annotation.Nullable
  public BillingMethod getBillingMethod() {
    return billingMethod;
  }

  public void setBillingMethod(BillingMethod billingMethod) {
    this.billingMethod = billingMethod;
  }


  public StopRunResultRun deviceMinutes(RunDeviceMinutes deviceMinutes) {
    this.deviceMinutes = deviceMinutes;
    return this;
  }

  /**
   * Get deviceMinutes
   * @return deviceMinutes
   */
  @javax.annotation.Nullable
  public RunDeviceMinutes getDeviceMinutes() {
    return deviceMinutes;
  }

  public void setDeviceMinutes(RunDeviceMinutes deviceMinutes) {
    this.deviceMinutes = deviceMinutes;
  }


  public StopRunResultRun networkProfile(RunNetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * Get networkProfile
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public RunNetworkProfile getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(RunNetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
  }


  public StopRunResultRun parsingResultUrl(String parsingResultUrl) {
    this.parsingResultUrl = parsingResultUrl;
    return this;
  }

  /**
   * Get parsingResultUrl
   * @return parsingResultUrl
   */
  @javax.annotation.Nullable
  public String getParsingResultUrl() {
    return parsingResultUrl;
  }

  public void setParsingResultUrl(String parsingResultUrl) {
    this.parsingResultUrl = parsingResultUrl;
  }


  public StopRunResultRun resultCode(ExecutionResultCode resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * Get resultCode
   * @return resultCode
   */
  @javax.annotation.Nullable
  public ExecutionResultCode getResultCode() {
    return resultCode;
  }

  public void setResultCode(ExecutionResultCode resultCode) {
    this.resultCode = resultCode;
  }


  public StopRunResultRun seed(Integer seed) {
    this.seed = seed;
    return this;
  }

  /**
   * Get seed
   * @return seed
   */
  @javax.annotation.Nullable
  public Integer getSeed() {
    return seed;
  }

  public void setSeed(Integer seed) {
    this.seed = seed;
  }


  public StopRunResultRun appUpload(String appUpload) {
    this.appUpload = appUpload;
    return this;
  }

  /**
   * Get appUpload
   * @return appUpload
   */
  @javax.annotation.Nullable
  public String getAppUpload() {
    return appUpload;
  }

  public void setAppUpload(String appUpload) {
    this.appUpload = appUpload;
  }


  public StopRunResultRun eventCount(Integer eventCount) {
    this.eventCount = eventCount;
    return this;
  }

  /**
   * Get eventCount
   * @return eventCount
   */
  @javax.annotation.Nullable
  public Integer getEventCount() {
    return eventCount;
  }

  public void setEventCount(Integer eventCount) {
    this.eventCount = eventCount;
  }


  public StopRunResultRun jobTimeoutMinutes(Integer jobTimeoutMinutes) {
    this.jobTimeoutMinutes = jobTimeoutMinutes;
    return this;
  }

  /**
   * Get jobTimeoutMinutes
   * @return jobTimeoutMinutes
   */
  @javax.annotation.Nullable
  public Integer getJobTimeoutMinutes() {
    return jobTimeoutMinutes;
  }

  public void setJobTimeoutMinutes(Integer jobTimeoutMinutes) {
    this.jobTimeoutMinutes = jobTimeoutMinutes;
  }


  public StopRunResultRun devicePoolArn(String devicePoolArn) {
    this.devicePoolArn = devicePoolArn;
    return this;
  }

  /**
   * Get devicePoolArn
   * @return devicePoolArn
   */
  @javax.annotation.Nullable
  public String getDevicePoolArn() {
    return devicePoolArn;
  }

  public void setDevicePoolArn(String devicePoolArn) {
    this.devicePoolArn = devicePoolArn;
  }


  public StopRunResultRun locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public StopRunResultRun radios(ScheduleRunConfigurationRadios radios) {
    this.radios = radios;
    return this;
  }

  /**
   * Get radios
   * @return radios
   */
  @javax.annotation.Nullable
  public ScheduleRunConfigurationRadios getRadios() {
    return radios;
  }

  public void setRadios(ScheduleRunConfigurationRadios radios) {
    this.radios = radios;
  }


  public StopRunResultRun location(ScheduleRunConfigurationLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public ScheduleRunConfigurationLocation getLocation() {
    return location;
  }

  public void setLocation(ScheduleRunConfigurationLocation location) {
    this.location = location;
  }


  public StopRunResultRun customerArtifactPaths(RunCustomerArtifactPaths customerArtifactPaths) {
    this.customerArtifactPaths = customerArtifactPaths;
    return this;
  }

  /**
   * Get customerArtifactPaths
   * @return customerArtifactPaths
   */
  @javax.annotation.Nullable
  public RunCustomerArtifactPaths getCustomerArtifactPaths() {
    return customerArtifactPaths;
  }

  public void setCustomerArtifactPaths(RunCustomerArtifactPaths customerArtifactPaths) {
    this.customerArtifactPaths = customerArtifactPaths;
  }


  public StopRunResultRun webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public StopRunResultRun skipAppResign(Boolean skipAppResign) {
    this.skipAppResign = skipAppResign;
    return this;
  }

  /**
   * Get skipAppResign
   * @return skipAppResign
   */
  @javax.annotation.Nullable
  public Boolean getSkipAppResign() {
    return skipAppResign;
  }

  public void setSkipAppResign(Boolean skipAppResign) {
    this.skipAppResign = skipAppResign;
  }


  public StopRunResultRun testSpecArn(String testSpecArn) {
    this.testSpecArn = testSpecArn;
    return this;
  }

  /**
   * Get testSpecArn
   * @return testSpecArn
   */
  @javax.annotation.Nullable
  public String getTestSpecArn() {
    return testSpecArn;
  }

  public void setTestSpecArn(String testSpecArn) {
    this.testSpecArn = testSpecArn;
  }


  public StopRunResultRun deviceSelectionResult(RunDeviceSelectionResult deviceSelectionResult) {
    this.deviceSelectionResult = deviceSelectionResult;
    return this;
  }

  /**
   * Get deviceSelectionResult
   * @return deviceSelectionResult
   */
  @javax.annotation.Nullable
  public RunDeviceSelectionResult getDeviceSelectionResult() {
    return deviceSelectionResult;
  }

  public void setDeviceSelectionResult(RunDeviceSelectionResult deviceSelectionResult) {
    this.deviceSelectionResult = deviceSelectionResult;
  }


  public StopRunResultRun vpcConfig(CreateProjectRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nullable
  public CreateProjectRequestVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(CreateProjectRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopRunResultRun stopRunResultRun = (StopRunResultRun) o;
    return Objects.equals(this.arn, stopRunResultRun.arn) &&
        Objects.equals(this.name, stopRunResultRun.name) &&
        Objects.equals(this.type, stopRunResultRun.type) &&
        Objects.equals(this.platform, stopRunResultRun.platform) &&
        Objects.equals(this.created, stopRunResultRun.created) &&
        Objects.equals(this.status, stopRunResultRun.status) &&
        Objects.equals(this.result, stopRunResultRun.result) &&
        Objects.equals(this.started, stopRunResultRun.started) &&
        Objects.equals(this.stopped, stopRunResultRun.stopped) &&
        Objects.equals(this.counters, stopRunResultRun.counters) &&
        Objects.equals(this.message, stopRunResultRun.message) &&
        Objects.equals(this.totalJobs, stopRunResultRun.totalJobs) &&
        Objects.equals(this.completedJobs, stopRunResultRun.completedJobs) &&
        Objects.equals(this.billingMethod, stopRunResultRun.billingMethod) &&
        Objects.equals(this.deviceMinutes, stopRunResultRun.deviceMinutes) &&
        Objects.equals(this.networkProfile, stopRunResultRun.networkProfile) &&
        Objects.equals(this.parsingResultUrl, stopRunResultRun.parsingResultUrl) &&
        Objects.equals(this.resultCode, stopRunResultRun.resultCode) &&
        Objects.equals(this.seed, stopRunResultRun.seed) &&
        Objects.equals(this.appUpload, stopRunResultRun.appUpload) &&
        Objects.equals(this.eventCount, stopRunResultRun.eventCount) &&
        Objects.equals(this.jobTimeoutMinutes, stopRunResultRun.jobTimeoutMinutes) &&
        Objects.equals(this.devicePoolArn, stopRunResultRun.devicePoolArn) &&
        Objects.equals(this.locale, stopRunResultRun.locale) &&
        Objects.equals(this.radios, stopRunResultRun.radios) &&
        Objects.equals(this.location, stopRunResultRun.location) &&
        Objects.equals(this.customerArtifactPaths, stopRunResultRun.customerArtifactPaths) &&
        Objects.equals(this.webUrl, stopRunResultRun.webUrl) &&
        Objects.equals(this.skipAppResign, stopRunResultRun.skipAppResign) &&
        Objects.equals(this.testSpecArn, stopRunResultRun.testSpecArn) &&
        Objects.equals(this.deviceSelectionResult, stopRunResultRun.deviceSelectionResult) &&
        Objects.equals(this.vpcConfig, stopRunResultRun.vpcConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, type, platform, created, status, result, started, stopped, counters, message, totalJobs, completedJobs, billingMethod, deviceMinutes, networkProfile, parsingResultUrl, resultCode, seed, appUpload, eventCount, jobTimeoutMinutes, devicePoolArn, locale, radios, location, customerArtifactPaths, webUrl, skipAppResign, testSpecArn, deviceSelectionResult, vpcConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopRunResultRun {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("    counters: ").append(toIndentedString(counters)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    totalJobs: ").append(toIndentedString(totalJobs)).append("\n");
    sb.append("    completedJobs: ").append(toIndentedString(completedJobs)).append("\n");
    sb.append("    billingMethod: ").append(toIndentedString(billingMethod)).append("\n");
    sb.append("    deviceMinutes: ").append(toIndentedString(deviceMinutes)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    parsingResultUrl: ").append(toIndentedString(parsingResultUrl)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    appUpload: ").append(toIndentedString(appUpload)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    jobTimeoutMinutes: ").append(toIndentedString(jobTimeoutMinutes)).append("\n");
    sb.append("    devicePoolArn: ").append(toIndentedString(devicePoolArn)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    radios: ").append(toIndentedString(radios)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    customerArtifactPaths: ").append(toIndentedString(customerArtifactPaths)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    skipAppResign: ").append(toIndentedString(skipAppResign)).append("\n");
    sb.append("    testSpecArn: ").append(toIndentedString(testSpecArn)).append("\n");
    sb.append("    deviceSelectionResult: ").append(toIndentedString(deviceSelectionResult)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("platform");
    openapiFields.add("created");
    openapiFields.add("status");
    openapiFields.add("result");
    openapiFields.add("started");
    openapiFields.add("stopped");
    openapiFields.add("counters");
    openapiFields.add("message");
    openapiFields.add("totalJobs");
    openapiFields.add("completedJobs");
    openapiFields.add("billingMethod");
    openapiFields.add("deviceMinutes");
    openapiFields.add("networkProfile");
    openapiFields.add("parsingResultUrl");
    openapiFields.add("resultCode");
    openapiFields.add("seed");
    openapiFields.add("appUpload");
    openapiFields.add("eventCount");
    openapiFields.add("jobTimeoutMinutes");
    openapiFields.add("devicePoolArn");
    openapiFields.add("locale");
    openapiFields.add("radios");
    openapiFields.add("location");
    openapiFields.add("customerArtifactPaths");
    openapiFields.add("webUrl");
    openapiFields.add("skipAppResign");
    openapiFields.add("testSpecArn");
    openapiFields.add("deviceSelectionResult");
    openapiFields.add("vpcConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StopRunResultRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StopRunResultRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StopRunResultRun is not found in the empty JSON string", StopRunResultRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StopRunResultRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StopRunResultRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TestType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        DevicePlatform.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `created`
      if (jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ExecutionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ExecutionResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `started`
      if (jsonObj.get("started") != null && !jsonObj.get("started").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("started"));
      }
      // validate the optional field `stopped`
      if (jsonObj.get("stopped") != null && !jsonObj.get("stopped").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopped"));
      }
      // validate the optional field `counters`
      if (jsonObj.get("counters") != null && !jsonObj.get("counters").isJsonNull()) {
        RunCounters.validateJsonElement(jsonObj.get("counters"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `totalJobs`
      if (jsonObj.get("totalJobs") != null && !jsonObj.get("totalJobs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalJobs"));
      }
      // validate the optional field `completedJobs`
      if (jsonObj.get("completedJobs") != null && !jsonObj.get("completedJobs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("completedJobs"));
      }
      // validate the optional field `billingMethod`
      if (jsonObj.get("billingMethod") != null && !jsonObj.get("billingMethod").isJsonNull()) {
        BillingMethod.validateJsonElement(jsonObj.get("billingMethod"));
      }
      // validate the optional field `deviceMinutes`
      if (jsonObj.get("deviceMinutes") != null && !jsonObj.get("deviceMinutes").isJsonNull()) {
        RunDeviceMinutes.validateJsonElement(jsonObj.get("deviceMinutes"));
      }
      // validate the optional field `networkProfile`
      if (jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) {
        RunNetworkProfile.validateJsonElement(jsonObj.get("networkProfile"));
      }
      // validate the optional field `parsingResultUrl`
      if (jsonObj.get("parsingResultUrl") != null && !jsonObj.get("parsingResultUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parsingResultUrl"));
      }
      // validate the optional field `resultCode`
      if (jsonObj.get("resultCode") != null && !jsonObj.get("resultCode").isJsonNull()) {
        ExecutionResultCode.validateJsonElement(jsonObj.get("resultCode"));
      }
      // validate the optional field `seed`
      if (jsonObj.get("seed") != null && !jsonObj.get("seed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("seed"));
      }
      // validate the optional field `appUpload`
      if (jsonObj.get("appUpload") != null && !jsonObj.get("appUpload").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appUpload"));
      }
      // validate the optional field `eventCount`
      if (jsonObj.get("eventCount") != null && !jsonObj.get("eventCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("eventCount"));
      }
      // validate the optional field `jobTimeoutMinutes`
      if (jsonObj.get("jobTimeoutMinutes") != null && !jsonObj.get("jobTimeoutMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("jobTimeoutMinutes"));
      }
      // validate the optional field `devicePoolArn`
      if (jsonObj.get("devicePoolArn") != null && !jsonObj.get("devicePoolArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("devicePoolArn"));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("locale"));
      }
      // validate the optional field `radios`
      if (jsonObj.get("radios") != null && !jsonObj.get("radios").isJsonNull()) {
        ScheduleRunConfigurationRadios.validateJsonElement(jsonObj.get("radios"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        ScheduleRunConfigurationLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `customerArtifactPaths`
      if (jsonObj.get("customerArtifactPaths") != null && !jsonObj.get("customerArtifactPaths").isJsonNull()) {
        RunCustomerArtifactPaths.validateJsonElement(jsonObj.get("customerArtifactPaths"));
      }
      // validate the optional field `webUrl`
      if (jsonObj.get("webUrl") != null && !jsonObj.get("webUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("webUrl"));
      }
      // validate the optional field `skipAppResign`
      if (jsonObj.get("skipAppResign") != null && !jsonObj.get("skipAppResign").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("skipAppResign"));
      }
      // validate the optional field `testSpecArn`
      if (jsonObj.get("testSpecArn") != null && !jsonObj.get("testSpecArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("testSpecArn"));
      }
      // validate the optional field `deviceSelectionResult`
      if (jsonObj.get("deviceSelectionResult") != null && !jsonObj.get("deviceSelectionResult").isJsonNull()) {
        RunDeviceSelectionResult.validateJsonElement(jsonObj.get("deviceSelectionResult"));
      }
      // validate the optional field `vpcConfig`
      if (jsonObj.get("vpcConfig") != null && !jsonObj.get("vpcConfig").isJsonNull()) {
        CreateProjectRequestVpcConfig.validateJsonElement(jsonObj.get("vpcConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StopRunResultRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StopRunResultRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StopRunResultRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StopRunResultRun.class));

       return (TypeAdapter<T>) new TypeAdapter<StopRunResultRun>() {
           @Override
           public void write(JsonWriter out, StopRunResultRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StopRunResultRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StopRunResultRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StopRunResultRun
   * @throws IOException if the JSON string is invalid with respect to StopRunResultRun
   */
  public static StopRunResultRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StopRunResultRun.class);
  }

  /**
   * Convert an instance of StopRunResultRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

