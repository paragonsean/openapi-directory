/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkProfileType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An array of settings that describes characteristics of a network profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkProfile {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private NetworkProfileType type;

  public static final String SERIALIZED_NAME_UPLINK_BANDWIDTH_BITS = "uplinkBandwidthBits";
  @SerializedName(SERIALIZED_NAME_UPLINK_BANDWIDTH_BITS)
  private Integer uplinkBandwidthBits;

  public static final String SERIALIZED_NAME_DOWNLINK_BANDWIDTH_BITS = "downlinkBandwidthBits";
  @SerializedName(SERIALIZED_NAME_DOWNLINK_BANDWIDTH_BITS)
  private Integer downlinkBandwidthBits;

  public static final String SERIALIZED_NAME_UPLINK_DELAY_MS = "uplinkDelayMs";
  @SerializedName(SERIALIZED_NAME_UPLINK_DELAY_MS)
  private Integer uplinkDelayMs;

  public static final String SERIALIZED_NAME_DOWNLINK_DELAY_MS = "downlinkDelayMs";
  @SerializedName(SERIALIZED_NAME_DOWNLINK_DELAY_MS)
  private Integer downlinkDelayMs;

  public static final String SERIALIZED_NAME_UPLINK_JITTER_MS = "uplinkJitterMs";
  @SerializedName(SERIALIZED_NAME_UPLINK_JITTER_MS)
  private Integer uplinkJitterMs;

  public static final String SERIALIZED_NAME_DOWNLINK_JITTER_MS = "downlinkJitterMs";
  @SerializedName(SERIALIZED_NAME_DOWNLINK_JITTER_MS)
  private Integer downlinkJitterMs;

  public static final String SERIALIZED_NAME_UPLINK_LOSS_PERCENT = "uplinkLossPercent";
  @SerializedName(SERIALIZED_NAME_UPLINK_LOSS_PERCENT)
  private Integer uplinkLossPercent;

  public static final String SERIALIZED_NAME_DOWNLINK_LOSS_PERCENT = "downlinkLossPercent";
  @SerializedName(SERIALIZED_NAME_DOWNLINK_LOSS_PERCENT)
  private Integer downlinkLossPercent;

  public NetworkProfile() {
  }

  public NetworkProfile arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public NetworkProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NetworkProfile description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NetworkProfile type(NetworkProfileType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public NetworkProfileType getType() {
    return type;
  }

  public void setType(NetworkProfileType type) {
    this.type = type;
  }


  public NetworkProfile uplinkBandwidthBits(Integer uplinkBandwidthBits) {
    this.uplinkBandwidthBits = uplinkBandwidthBits;
    return this;
  }

  /**
   * Get uplinkBandwidthBits
   * @return uplinkBandwidthBits
   */
  @javax.annotation.Nullable
  public Integer getUplinkBandwidthBits() {
    return uplinkBandwidthBits;
  }

  public void setUplinkBandwidthBits(Integer uplinkBandwidthBits) {
    this.uplinkBandwidthBits = uplinkBandwidthBits;
  }


  public NetworkProfile downlinkBandwidthBits(Integer downlinkBandwidthBits) {
    this.downlinkBandwidthBits = downlinkBandwidthBits;
    return this;
  }

  /**
   * Get downlinkBandwidthBits
   * @return downlinkBandwidthBits
   */
  @javax.annotation.Nullable
  public Integer getDownlinkBandwidthBits() {
    return downlinkBandwidthBits;
  }

  public void setDownlinkBandwidthBits(Integer downlinkBandwidthBits) {
    this.downlinkBandwidthBits = downlinkBandwidthBits;
  }


  public NetworkProfile uplinkDelayMs(Integer uplinkDelayMs) {
    this.uplinkDelayMs = uplinkDelayMs;
    return this;
  }

  /**
   * Get uplinkDelayMs
   * @return uplinkDelayMs
   */
  @javax.annotation.Nullable
  public Integer getUplinkDelayMs() {
    return uplinkDelayMs;
  }

  public void setUplinkDelayMs(Integer uplinkDelayMs) {
    this.uplinkDelayMs = uplinkDelayMs;
  }


  public NetworkProfile downlinkDelayMs(Integer downlinkDelayMs) {
    this.downlinkDelayMs = downlinkDelayMs;
    return this;
  }

  /**
   * Get downlinkDelayMs
   * @return downlinkDelayMs
   */
  @javax.annotation.Nullable
  public Integer getDownlinkDelayMs() {
    return downlinkDelayMs;
  }

  public void setDownlinkDelayMs(Integer downlinkDelayMs) {
    this.downlinkDelayMs = downlinkDelayMs;
  }


  public NetworkProfile uplinkJitterMs(Integer uplinkJitterMs) {
    this.uplinkJitterMs = uplinkJitterMs;
    return this;
  }

  /**
   * Get uplinkJitterMs
   * @return uplinkJitterMs
   */
  @javax.annotation.Nullable
  public Integer getUplinkJitterMs() {
    return uplinkJitterMs;
  }

  public void setUplinkJitterMs(Integer uplinkJitterMs) {
    this.uplinkJitterMs = uplinkJitterMs;
  }


  public NetworkProfile downlinkJitterMs(Integer downlinkJitterMs) {
    this.downlinkJitterMs = downlinkJitterMs;
    return this;
  }

  /**
   * Get downlinkJitterMs
   * @return downlinkJitterMs
   */
  @javax.annotation.Nullable
  public Integer getDownlinkJitterMs() {
    return downlinkJitterMs;
  }

  public void setDownlinkJitterMs(Integer downlinkJitterMs) {
    this.downlinkJitterMs = downlinkJitterMs;
  }


  public NetworkProfile uplinkLossPercent(Integer uplinkLossPercent) {
    this.uplinkLossPercent = uplinkLossPercent;
    return this;
  }

  /**
   * Get uplinkLossPercent
   * @return uplinkLossPercent
   */
  @javax.annotation.Nullable
  public Integer getUplinkLossPercent() {
    return uplinkLossPercent;
  }

  public void setUplinkLossPercent(Integer uplinkLossPercent) {
    this.uplinkLossPercent = uplinkLossPercent;
  }


  public NetworkProfile downlinkLossPercent(Integer downlinkLossPercent) {
    this.downlinkLossPercent = downlinkLossPercent;
    return this;
  }

  /**
   * Get downlinkLossPercent
   * @return downlinkLossPercent
   */
  @javax.annotation.Nullable
  public Integer getDownlinkLossPercent() {
    return downlinkLossPercent;
  }

  public void setDownlinkLossPercent(Integer downlinkLossPercent) {
    this.downlinkLossPercent = downlinkLossPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkProfile networkProfile = (NetworkProfile) o;
    return Objects.equals(this.arn, networkProfile.arn) &&
        Objects.equals(this.name, networkProfile.name) &&
        Objects.equals(this.description, networkProfile.description) &&
        Objects.equals(this.type, networkProfile.type) &&
        Objects.equals(this.uplinkBandwidthBits, networkProfile.uplinkBandwidthBits) &&
        Objects.equals(this.downlinkBandwidthBits, networkProfile.downlinkBandwidthBits) &&
        Objects.equals(this.uplinkDelayMs, networkProfile.uplinkDelayMs) &&
        Objects.equals(this.downlinkDelayMs, networkProfile.downlinkDelayMs) &&
        Objects.equals(this.uplinkJitterMs, networkProfile.uplinkJitterMs) &&
        Objects.equals(this.downlinkJitterMs, networkProfile.downlinkJitterMs) &&
        Objects.equals(this.uplinkLossPercent, networkProfile.uplinkLossPercent) &&
        Objects.equals(this.downlinkLossPercent, networkProfile.downlinkLossPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, description, type, uplinkBandwidthBits, downlinkBandwidthBits, uplinkDelayMs, downlinkDelayMs, uplinkJitterMs, downlinkJitterMs, uplinkLossPercent, downlinkLossPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkProfile {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uplinkBandwidthBits: ").append(toIndentedString(uplinkBandwidthBits)).append("\n");
    sb.append("    downlinkBandwidthBits: ").append(toIndentedString(downlinkBandwidthBits)).append("\n");
    sb.append("    uplinkDelayMs: ").append(toIndentedString(uplinkDelayMs)).append("\n");
    sb.append("    downlinkDelayMs: ").append(toIndentedString(downlinkDelayMs)).append("\n");
    sb.append("    uplinkJitterMs: ").append(toIndentedString(uplinkJitterMs)).append("\n");
    sb.append("    downlinkJitterMs: ").append(toIndentedString(downlinkJitterMs)).append("\n");
    sb.append("    uplinkLossPercent: ").append(toIndentedString(uplinkLossPercent)).append("\n");
    sb.append("    downlinkLossPercent: ").append(toIndentedString(downlinkLossPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("uplinkBandwidthBits");
    openapiFields.add("downlinkBandwidthBits");
    openapiFields.add("uplinkDelayMs");
    openapiFields.add("downlinkDelayMs");
    openapiFields.add("uplinkJitterMs");
    openapiFields.add("downlinkJitterMs");
    openapiFields.add("uplinkLossPercent");
    openapiFields.add("downlinkLossPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkProfile is not found in the empty JSON string", NetworkProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        NetworkProfileType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `uplinkBandwidthBits`
      if (jsonObj.get("uplinkBandwidthBits") != null && !jsonObj.get("uplinkBandwidthBits").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("uplinkBandwidthBits"));
      }
      // validate the optional field `downlinkBandwidthBits`
      if (jsonObj.get("downlinkBandwidthBits") != null && !jsonObj.get("downlinkBandwidthBits").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("downlinkBandwidthBits"));
      }
      // validate the optional field `uplinkDelayMs`
      if (jsonObj.get("uplinkDelayMs") != null && !jsonObj.get("uplinkDelayMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("uplinkDelayMs"));
      }
      // validate the optional field `downlinkDelayMs`
      if (jsonObj.get("downlinkDelayMs") != null && !jsonObj.get("downlinkDelayMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("downlinkDelayMs"));
      }
      // validate the optional field `uplinkJitterMs`
      if (jsonObj.get("uplinkJitterMs") != null && !jsonObj.get("uplinkJitterMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("uplinkJitterMs"));
      }
      // validate the optional field `downlinkJitterMs`
      if (jsonObj.get("downlinkJitterMs") != null && !jsonObj.get("downlinkJitterMs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("downlinkJitterMs"));
      }
      // validate the optional field `uplinkLossPercent`
      if (jsonObj.get("uplinkLossPercent") != null && !jsonObj.get("uplinkLossPercent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("uplinkLossPercent"));
      }
      // validate the optional field `downlinkLossPercent`
      if (jsonObj.get("downlinkLossPercent") != null && !jsonObj.get("downlinkLossPercent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("downlinkLossPercent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkProfile>() {
           @Override
           public void write(JsonWriter out, NetworkProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkProfile
   * @throws IOException if the JSON string is invalid with respect to NetworkProfile
   */
  public static NetworkProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkProfile.class);
  }

  /**
   * Convert an instance of NetworkProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

