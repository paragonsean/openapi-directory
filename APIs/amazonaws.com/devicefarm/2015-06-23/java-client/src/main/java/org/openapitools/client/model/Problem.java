/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionResult;
import org.openapitools.client.model.ProblemDevice;
import org.openapitools.client.model.ProblemJob;
import org.openapitools.client.model.ProblemRun;
import org.openapitools.client.model.ProblemSuite;
import org.openapitools.client.model.ProblemTest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a specific warning or failure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Problem {
  public static final String SERIALIZED_NAME_RUN = "run";
  @SerializedName(SERIALIZED_NAME_RUN)
  private ProblemRun run;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private ProblemJob job;

  public static final String SERIALIZED_NAME_SUITE = "suite";
  @SerializedName(SERIALIZED_NAME_SUITE)
  private ProblemSuite suite;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private ProblemTest test;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private ProblemDevice device;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ExecutionResult result;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public Problem() {
  }

  public Problem run(ProblemRun run) {
    this.run = run;
    return this;
  }

  /**
   * Get run
   * @return run
   */
  @javax.annotation.Nullable
  public ProblemRun getRun() {
    return run;
  }

  public void setRun(ProblemRun run) {
    this.run = run;
  }


  public Problem job(ProblemJob job) {
    this.job = job;
    return this;
  }

  /**
   * Get job
   * @return job
   */
  @javax.annotation.Nullable
  public ProblemJob getJob() {
    return job;
  }

  public void setJob(ProblemJob job) {
    this.job = job;
  }


  public Problem suite(ProblemSuite suite) {
    this.suite = suite;
    return this;
  }

  /**
   * Get suite
   * @return suite
   */
  @javax.annotation.Nullable
  public ProblemSuite getSuite() {
    return suite;
  }

  public void setSuite(ProblemSuite suite) {
    this.suite = suite;
  }


  public Problem test(ProblemTest test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public ProblemTest getTest() {
    return test;
  }

  public void setTest(ProblemTest test) {
    this.test = test;
  }


  public Problem device(ProblemDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public ProblemDevice getDevice() {
    return device;
  }

  public void setDevice(ProblemDevice device) {
    this.device = device;
  }


  public Problem result(ExecutionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public ExecutionResult getResult() {
    return result;
  }

  public void setResult(ExecutionResult result) {
    this.result = result;
  }


  public Problem message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Problem problem = (Problem) o;
    return Objects.equals(this.run, problem.run) &&
        Objects.equals(this.job, problem.job) &&
        Objects.equals(this.suite, problem.suite) &&
        Objects.equals(this.test, problem.test) &&
        Objects.equals(this.device, problem.device) &&
        Objects.equals(this.result, problem.result) &&
        Objects.equals(this.message, problem.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(run, job, suite, test, device, result, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Problem {\n");
    sb.append("    run: ").append(toIndentedString(run)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    suite: ").append(toIndentedString(suite)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("run");
    openapiFields.add("job");
    openapiFields.add("suite");
    openapiFields.add("test");
    openapiFields.add("device");
    openapiFields.add("result");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Problem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Problem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Problem is not found in the empty JSON string", Problem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Problem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Problem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `run`
      if (jsonObj.get("run") != null && !jsonObj.get("run").isJsonNull()) {
        ProblemRun.validateJsonElement(jsonObj.get("run"));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        ProblemJob.validateJsonElement(jsonObj.get("job"));
      }
      // validate the optional field `suite`
      if (jsonObj.get("suite") != null && !jsonObj.get("suite").isJsonNull()) {
        ProblemSuite.validateJsonElement(jsonObj.get("suite"));
      }
      // validate the optional field `test`
      if (jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) {
        ProblemTest.validateJsonElement(jsonObj.get("test"));
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        ProblemDevice.validateJsonElement(jsonObj.get("device"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ExecutionResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Problem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Problem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Problem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Problem.class));

       return (TypeAdapter<T>) new TypeAdapter<Problem>() {
           @Override
           public void write(JsonWriter out, Problem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Problem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Problem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Problem
   * @throws IOException if the JSON string is invalid with respect to Problem
   */
  public static Problem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Problem.class);
  }

  /**
   * Convert an instance of Problem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

