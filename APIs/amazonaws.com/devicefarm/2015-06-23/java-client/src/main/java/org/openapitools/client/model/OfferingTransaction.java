/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.OfferingTransactionCost;
import org.openapitools.client.model.OfferingTransactionOfferingStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the metadata of an offering transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferingTransaction {
  public static final String SERIALIZED_NAME_OFFERING_STATUS = "offeringStatus";
  @SerializedName(SERIALIZED_NAME_OFFERING_STATUS)
  private OfferingTransactionOfferingStatus offeringStatus;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_OFFERING_PROMOTION_ID = "offeringPromotionId";
  @SerializedName(SERIALIZED_NAME_OFFERING_PROMOTION_ID)
  private String offeringPromotionId;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private OfferingTransactionCost cost;

  public OfferingTransaction() {
  }

  public OfferingTransaction offeringStatus(OfferingTransactionOfferingStatus offeringStatus) {
    this.offeringStatus = offeringStatus;
    return this;
  }

  /**
   * Get offeringStatus
   * @return offeringStatus
   */
  @javax.annotation.Nullable
  public OfferingTransactionOfferingStatus getOfferingStatus() {
    return offeringStatus;
  }

  public void setOfferingStatus(OfferingTransactionOfferingStatus offeringStatus) {
    this.offeringStatus = offeringStatus;
  }


  public OfferingTransaction transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public OfferingTransaction offeringPromotionId(String offeringPromotionId) {
    this.offeringPromotionId = offeringPromotionId;
    return this;
  }

  /**
   * Get offeringPromotionId
   * @return offeringPromotionId
   */
  @javax.annotation.Nullable
  public String getOfferingPromotionId() {
    return offeringPromotionId;
  }

  public void setOfferingPromotionId(String offeringPromotionId) {
    this.offeringPromotionId = offeringPromotionId;
  }


  public OfferingTransaction createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

  /**
   * Get createdOn
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public OfferingTransaction cost(OfferingTransactionCost cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public OfferingTransactionCost getCost() {
    return cost;
  }

  public void setCost(OfferingTransactionCost cost) {
    this.cost = cost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferingTransaction offeringTransaction = (OfferingTransaction) o;
    return Objects.equals(this.offeringStatus, offeringTransaction.offeringStatus) &&
        Objects.equals(this.transactionId, offeringTransaction.transactionId) &&
        Objects.equals(this.offeringPromotionId, offeringTransaction.offeringPromotionId) &&
        Objects.equals(this.createdOn, offeringTransaction.createdOn) &&
        Objects.equals(this.cost, offeringTransaction.cost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offeringStatus, transactionId, offeringPromotionId, createdOn, cost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferingTransaction {\n");
    sb.append("    offeringStatus: ").append(toIndentedString(offeringStatus)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    offeringPromotionId: ").append(toIndentedString(offeringPromotionId)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offeringStatus");
    openapiFields.add("transactionId");
    openapiFields.add("offeringPromotionId");
    openapiFields.add("createdOn");
    openapiFields.add("cost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferingTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferingTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferingTransaction is not found in the empty JSON string", OfferingTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferingTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferingTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `offeringStatus`
      if (jsonObj.get("offeringStatus") != null && !jsonObj.get("offeringStatus").isJsonNull()) {
        OfferingTransactionOfferingStatus.validateJsonElement(jsonObj.get("offeringStatus"));
      }
      // validate the optional field `transactionId`
      if (jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("transactionId"));
      }
      // validate the optional field `offeringPromotionId`
      if (jsonObj.get("offeringPromotionId") != null && !jsonObj.get("offeringPromotionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("offeringPromotionId"));
      }
      // validate the optional field `createdOn`
      if (jsonObj.get("createdOn") != null && !jsonObj.get("createdOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdOn"));
      }
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        OfferingTransactionCost.validateJsonElement(jsonObj.get("cost"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferingTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferingTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferingTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferingTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferingTransaction>() {
           @Override
           public void write(JsonWriter out, OfferingTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferingTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferingTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferingTransaction
   * @throws IOException if the JSON string is invalid with respect to OfferingTransaction
   */
  public static OfferingTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferingTransaction.class);
  }

  /**
   * Convert an instance of OfferingTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

