/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceAvailability;
import org.openapitools.client.model.DeviceCpu;
import org.openapitools.client.model.DeviceFormFactor;
import org.openapitools.client.model.DevicePlatform;
import org.openapitools.client.model.DeviceResolution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProblemDevice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProblemDevice {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_FORM_FACTOR = "formFactor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private DeviceFormFactor formFactor;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private DevicePlatform platform;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private DeviceCpu cpu;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private DeviceResolution resolution;

  public static final String SERIALIZED_NAME_HEAP_SIZE = "heapSize";
  @SerializedName(SERIALIZED_NAME_HEAP_SIZE)
  private Integer heapSize;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private Integer memory;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_RADIO = "radio";
  @SerializedName(SERIALIZED_NAME_RADIO)
  private String radio;

  public static final String SERIALIZED_NAME_REMOTE_ACCESS_ENABLED = "remoteAccessEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_ACCESS_ENABLED)
  private Boolean remoteAccessEnabled;

  public static final String SERIALIZED_NAME_REMOTE_DEBUG_ENABLED = "remoteDebugEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_DEBUG_ENABLED)
  private Boolean remoteDebugEnabled;

  public static final String SERIALIZED_NAME_FLEET_TYPE = "fleetType";
  @SerializedName(SERIALIZED_NAME_FLEET_TYPE)
  private String fleetType;

  public static final String SERIALIZED_NAME_FLEET_NAME = "fleetName";
  @SerializedName(SERIALIZED_NAME_FLEET_NAME)
  private String fleetName;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List instances;

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private DeviceAvailability availability;

  public ProblemDevice() {
  }

  public ProblemDevice arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ProblemDevice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProblemDevice manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public ProblemDevice model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ProblemDevice modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * Get modelId
   * @return modelId
   */
  @javax.annotation.Nullable
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public ProblemDevice formFactor(DeviceFormFactor formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Get formFactor
   * @return formFactor
   */
  @javax.annotation.Nullable
  public DeviceFormFactor getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(DeviceFormFactor formFactor) {
    this.formFactor = formFactor;
  }


  public ProblemDevice platform(DevicePlatform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public DevicePlatform getPlatform() {
    return platform;
  }

  public void setPlatform(DevicePlatform platform) {
    this.platform = platform;
  }


  public ProblemDevice os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public ProblemDevice cpu(DeviceCpu cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public DeviceCpu getCpu() {
    return cpu;
  }

  public void setCpu(DeviceCpu cpu) {
    this.cpu = cpu;
  }


  public ProblemDevice resolution(DeviceResolution resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public DeviceResolution getResolution() {
    return resolution;
  }

  public void setResolution(DeviceResolution resolution) {
    this.resolution = resolution;
  }


  public ProblemDevice heapSize(Integer heapSize) {
    this.heapSize = heapSize;
    return this;
  }

  /**
   * Get heapSize
   * @return heapSize
   */
  @javax.annotation.Nullable
  public Integer getHeapSize() {
    return heapSize;
  }

  public void setHeapSize(Integer heapSize) {
    this.heapSize = heapSize;
  }


  public ProblemDevice memory(Integer memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public Integer getMemory() {
    return memory;
  }

  public void setMemory(Integer memory) {
    this.memory = memory;
  }


  public ProblemDevice image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ProblemDevice carrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  /**
   * Get carrier
   * @return carrier
   */
  @javax.annotation.Nullable
  public String getCarrier() {
    return carrier;
  }

  public void setCarrier(String carrier) {
    this.carrier = carrier;
  }


  public ProblemDevice radio(String radio) {
    this.radio = radio;
    return this;
  }

  /**
   * Get radio
   * @return radio
   */
  @javax.annotation.Nullable
  public String getRadio() {
    return radio;
  }

  public void setRadio(String radio) {
    this.radio = radio;
  }


  public ProblemDevice remoteAccessEnabled(Boolean remoteAccessEnabled) {
    this.remoteAccessEnabled = remoteAccessEnabled;
    return this;
  }

  /**
   * Get remoteAccessEnabled
   * @return remoteAccessEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteAccessEnabled() {
    return remoteAccessEnabled;
  }

  public void setRemoteAccessEnabled(Boolean remoteAccessEnabled) {
    this.remoteAccessEnabled = remoteAccessEnabled;
  }


  public ProblemDevice remoteDebugEnabled(Boolean remoteDebugEnabled) {
    this.remoteDebugEnabled = remoteDebugEnabled;
    return this;
  }

  /**
   * Get remoteDebugEnabled
   * @return remoteDebugEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteDebugEnabled() {
    return remoteDebugEnabled;
  }

  public void setRemoteDebugEnabled(Boolean remoteDebugEnabled) {
    this.remoteDebugEnabled = remoteDebugEnabled;
  }


  public ProblemDevice fleetType(String fleetType) {
    this.fleetType = fleetType;
    return this;
  }

  /**
   * Get fleetType
   * @return fleetType
   */
  @javax.annotation.Nullable
  public String getFleetType() {
    return fleetType;
  }

  public void setFleetType(String fleetType) {
    this.fleetType = fleetType;
  }


  public ProblemDevice fleetName(String fleetName) {
    this.fleetName = fleetName;
    return this;
  }

  /**
   * Get fleetName
   * @return fleetName
   */
  @javax.annotation.Nullable
  public String getFleetName() {
    return fleetName;
  }

  public void setFleetName(String fleetName) {
    this.fleetName = fleetName;
  }


  public ProblemDevice instances(List instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Get instances
   * @return instances
   */
  @javax.annotation.Nullable
  public List getInstances() {
    return instances;
  }

  public void setInstances(List instances) {
    this.instances = instances;
  }


  public ProblemDevice availability(DeviceAvailability availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Get availability
   * @return availability
   */
  @javax.annotation.Nullable
  public DeviceAvailability getAvailability() {
    return availability;
  }

  public void setAvailability(DeviceAvailability availability) {
    this.availability = availability;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProblemDevice problemDevice = (ProblemDevice) o;
    return Objects.equals(this.arn, problemDevice.arn) &&
        Objects.equals(this.name, problemDevice.name) &&
        Objects.equals(this.manufacturer, problemDevice.manufacturer) &&
        Objects.equals(this.model, problemDevice.model) &&
        Objects.equals(this.modelId, problemDevice.modelId) &&
        Objects.equals(this.formFactor, problemDevice.formFactor) &&
        Objects.equals(this.platform, problemDevice.platform) &&
        Objects.equals(this.os, problemDevice.os) &&
        Objects.equals(this.cpu, problemDevice.cpu) &&
        Objects.equals(this.resolution, problemDevice.resolution) &&
        Objects.equals(this.heapSize, problemDevice.heapSize) &&
        Objects.equals(this.memory, problemDevice.memory) &&
        Objects.equals(this.image, problemDevice.image) &&
        Objects.equals(this.carrier, problemDevice.carrier) &&
        Objects.equals(this.radio, problemDevice.radio) &&
        Objects.equals(this.remoteAccessEnabled, problemDevice.remoteAccessEnabled) &&
        Objects.equals(this.remoteDebugEnabled, problemDevice.remoteDebugEnabled) &&
        Objects.equals(this.fleetType, problemDevice.fleetType) &&
        Objects.equals(this.fleetName, problemDevice.fleetName) &&
        Objects.equals(this.instances, problemDevice.instances) &&
        Objects.equals(this.availability, problemDevice.availability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, manufacturer, model, modelId, formFactor, platform, os, cpu, resolution, heapSize, memory, image, carrier, radio, remoteAccessEnabled, remoteDebugEnabled, fleetType, fleetName, instances, availability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProblemDevice {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    heapSize: ").append(toIndentedString(heapSize)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    radio: ").append(toIndentedString(radio)).append("\n");
    sb.append("    remoteAccessEnabled: ").append(toIndentedString(remoteAccessEnabled)).append("\n");
    sb.append("    remoteDebugEnabled: ").append(toIndentedString(remoteDebugEnabled)).append("\n");
    sb.append("    fleetType: ").append(toIndentedString(fleetType)).append("\n");
    sb.append("    fleetName: ").append(toIndentedString(fleetName)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("manufacturer");
    openapiFields.add("model");
    openapiFields.add("modelId");
    openapiFields.add("formFactor");
    openapiFields.add("platform");
    openapiFields.add("os");
    openapiFields.add("cpu");
    openapiFields.add("resolution");
    openapiFields.add("heapSize");
    openapiFields.add("memory");
    openapiFields.add("image");
    openapiFields.add("carrier");
    openapiFields.add("radio");
    openapiFields.add("remoteAccessEnabled");
    openapiFields.add("remoteDebugEnabled");
    openapiFields.add("fleetType");
    openapiFields.add("fleetName");
    openapiFields.add("instances");
    openapiFields.add("availability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProblemDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProblemDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProblemDevice is not found in the empty JSON string", ProblemDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProblemDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProblemDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `manufacturer`
      if (jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("manufacturer"));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("model"));
      }
      // validate the optional field `modelId`
      if (jsonObj.get("modelId") != null && !jsonObj.get("modelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("modelId"));
      }
      // validate the optional field `formFactor`
      if (jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) {
        DeviceFormFactor.validateJsonElement(jsonObj.get("formFactor"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        DevicePlatform.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `os`
      if (jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("os"));
      }
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        DeviceCpu.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        DeviceResolution.validateJsonElement(jsonObj.get("resolution"));
      }
      // validate the optional field `heapSize`
      if (jsonObj.get("heapSize") != null && !jsonObj.get("heapSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("heapSize"));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("memory"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `carrier`
      if (jsonObj.get("carrier") != null && !jsonObj.get("carrier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("carrier"));
      }
      // validate the optional field `radio`
      if (jsonObj.get("radio") != null && !jsonObj.get("radio").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("radio"));
      }
      // validate the optional field `remoteAccessEnabled`
      if (jsonObj.get("remoteAccessEnabled") != null && !jsonObj.get("remoteAccessEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("remoteAccessEnabled"));
      }
      // validate the optional field `remoteDebugEnabled`
      if (jsonObj.get("remoteDebugEnabled") != null && !jsonObj.get("remoteDebugEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("remoteDebugEnabled"));
      }
      // validate the optional field `fleetType`
      if (jsonObj.get("fleetType") != null && !jsonObj.get("fleetType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fleetType"));
      }
      // validate the optional field `fleetName`
      if (jsonObj.get("fleetName") != null && !jsonObj.get("fleetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fleetName"));
      }
      // validate the optional field `instances`
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("instances"));
      }
      // validate the optional field `availability`
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        DeviceAvailability.validateJsonElement(jsonObj.get("availability"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProblemDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProblemDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProblemDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProblemDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<ProblemDevice>() {
           @Override
           public void write(JsonWriter out, ProblemDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProblemDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProblemDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProblemDevice
   * @throws IOException if the JSON string is invalid with respect to ProblemDevice
   */
  public static ProblemDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProblemDevice.class);
  }

  /**
   * Convert an instance of ProblemDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

