/*
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ScheduleRunRequestConfiguration;
import org.openapitools.client.model.ScheduleRunRequestDeviceSelectionConfiguration;
import org.openapitools.client.model.ScheduleRunRequestExecutionConfiguration;
import org.openapitools.client.model.ScheduleRunRequestTest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a request to the schedule run operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:03.389051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduleRunRequest {
  public static final String SERIALIZED_NAME_PROJECT_ARN = "projectArn";
  @SerializedName(SERIALIZED_NAME_PROJECT_ARN)
  private String projectArn;

  public static final String SERIALIZED_NAME_APP_ARN = "appArn";
  @SerializedName(SERIALIZED_NAME_APP_ARN)
  private String appArn;

  public static final String SERIALIZED_NAME_DEVICE_POOL_ARN = "devicePoolArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_POOL_ARN)
  private String devicePoolArn;

  public static final String SERIALIZED_NAME_DEVICE_SELECTION_CONFIGURATION = "deviceSelectionConfiguration";
  @SerializedName(SERIALIZED_NAME_DEVICE_SELECTION_CONFIGURATION)
  private ScheduleRunRequestDeviceSelectionConfiguration deviceSelectionConfiguration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private ScheduleRunRequestTest test;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private ScheduleRunRequestConfiguration _configuration;

  public static final String SERIALIZED_NAME_EXECUTION_CONFIGURATION = "executionConfiguration";
  @SerializedName(SERIALIZED_NAME_EXECUTION_CONFIGURATION)
  private ScheduleRunRequestExecutionConfiguration executionConfiguration;

  public ScheduleRunRequest() {
  }

  public ScheduleRunRequest projectArn(String projectArn) {
    this.projectArn = projectArn;
    return this;
  }

  /**
   * Get projectArn
   * @return projectArn
   */
  @javax.annotation.Nonnull
  public String getProjectArn() {
    return projectArn;
  }

  public void setProjectArn(String projectArn) {
    this.projectArn = projectArn;
  }


  public ScheduleRunRequest appArn(String appArn) {
    this.appArn = appArn;
    return this;
  }

  /**
   * Get appArn
   * @return appArn
   */
  @javax.annotation.Nullable
  public String getAppArn() {
    return appArn;
  }

  public void setAppArn(String appArn) {
    this.appArn = appArn;
  }


  public ScheduleRunRequest devicePoolArn(String devicePoolArn) {
    this.devicePoolArn = devicePoolArn;
    return this;
  }

  /**
   * Get devicePoolArn
   * @return devicePoolArn
   */
  @javax.annotation.Nullable
  public String getDevicePoolArn() {
    return devicePoolArn;
  }

  public void setDevicePoolArn(String devicePoolArn) {
    this.devicePoolArn = devicePoolArn;
  }


  public ScheduleRunRequest deviceSelectionConfiguration(ScheduleRunRequestDeviceSelectionConfiguration deviceSelectionConfiguration) {
    this.deviceSelectionConfiguration = deviceSelectionConfiguration;
    return this;
  }

  /**
   * Get deviceSelectionConfiguration
   * @return deviceSelectionConfiguration
   */
  @javax.annotation.Nullable
  public ScheduleRunRequestDeviceSelectionConfiguration getDeviceSelectionConfiguration() {
    return deviceSelectionConfiguration;
  }

  public void setDeviceSelectionConfiguration(ScheduleRunRequestDeviceSelectionConfiguration deviceSelectionConfiguration) {
    this.deviceSelectionConfiguration = deviceSelectionConfiguration;
  }


  public ScheduleRunRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ScheduleRunRequest test(ScheduleRunRequestTest test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nonnull
  public ScheduleRunRequestTest getTest() {
    return test;
  }

  public void setTest(ScheduleRunRequestTest test) {
    this.test = test;
  }


  public ScheduleRunRequest _configuration(ScheduleRunRequestConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public ScheduleRunRequestConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(ScheduleRunRequestConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public ScheduleRunRequest executionConfiguration(ScheduleRunRequestExecutionConfiguration executionConfiguration) {
    this.executionConfiguration = executionConfiguration;
    return this;
  }

  /**
   * Get executionConfiguration
   * @return executionConfiguration
   */
  @javax.annotation.Nullable
  public ScheduleRunRequestExecutionConfiguration getExecutionConfiguration() {
    return executionConfiguration;
  }

  public void setExecutionConfiguration(ScheduleRunRequestExecutionConfiguration executionConfiguration) {
    this.executionConfiguration = executionConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduleRunRequest scheduleRunRequest = (ScheduleRunRequest) o;
    return Objects.equals(this.projectArn, scheduleRunRequest.projectArn) &&
        Objects.equals(this.appArn, scheduleRunRequest.appArn) &&
        Objects.equals(this.devicePoolArn, scheduleRunRequest.devicePoolArn) &&
        Objects.equals(this.deviceSelectionConfiguration, scheduleRunRequest.deviceSelectionConfiguration) &&
        Objects.equals(this.name, scheduleRunRequest.name) &&
        Objects.equals(this.test, scheduleRunRequest.test) &&
        Objects.equals(this._configuration, scheduleRunRequest._configuration) &&
        Objects.equals(this.executionConfiguration, scheduleRunRequest.executionConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectArn, appArn, devicePoolArn, deviceSelectionConfiguration, name, test, _configuration, executionConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduleRunRequest {\n");
    sb.append("    projectArn: ").append(toIndentedString(projectArn)).append("\n");
    sb.append("    appArn: ").append(toIndentedString(appArn)).append("\n");
    sb.append("    devicePoolArn: ").append(toIndentedString(devicePoolArn)).append("\n");
    sb.append("    deviceSelectionConfiguration: ").append(toIndentedString(deviceSelectionConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    executionConfiguration: ").append(toIndentedString(executionConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("projectArn");
    openapiFields.add("appArn");
    openapiFields.add("devicePoolArn");
    openapiFields.add("deviceSelectionConfiguration");
    openapiFields.add("name");
    openapiFields.add("test");
    openapiFields.add("configuration");
    openapiFields.add("executionConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("projectArn");
    openapiRequiredFields.add("test");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduleRunRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduleRunRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduleRunRequest is not found in the empty JSON string", ScheduleRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduleRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduleRunRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduleRunRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `projectArn`
      String.validateJsonElement(jsonObj.get("projectArn"));
      // validate the optional field `appArn`
      if (jsonObj.get("appArn") != null && !jsonObj.get("appArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("appArn"));
      }
      // validate the optional field `devicePoolArn`
      if (jsonObj.get("devicePoolArn") != null && !jsonObj.get("devicePoolArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("devicePoolArn"));
      }
      // validate the optional field `deviceSelectionConfiguration`
      if (jsonObj.get("deviceSelectionConfiguration") != null && !jsonObj.get("deviceSelectionConfiguration").isJsonNull()) {
        ScheduleRunRequestDeviceSelectionConfiguration.validateJsonElement(jsonObj.get("deviceSelectionConfiguration"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the required field `test`
      ScheduleRunRequestTest.validateJsonElement(jsonObj.get("test"));
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        ScheduleRunRequestConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      // validate the optional field `executionConfiguration`
      if (jsonObj.get("executionConfiguration") != null && !jsonObj.get("executionConfiguration").isJsonNull()) {
        ScheduleRunRequestExecutionConfiguration.validateJsonElement(jsonObj.get("executionConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduleRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduleRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduleRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduleRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduleRunRequest>() {
           @Override
           public void write(JsonWriter out, ScheduleRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduleRunRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduleRunRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduleRunRequest
   * @throws IOException if the JSON string is invalid with respect to ScheduleRunRequest
   */
  public static ScheduleRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduleRunRequest.class);
  }

  /**
   * Convert an instance of ScheduleRunRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

