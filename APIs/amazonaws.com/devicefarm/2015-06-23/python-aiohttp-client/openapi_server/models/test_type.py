# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BUILTIN_FUZZ = 'BUILTIN_FUZZ'
    BUILTIN_EXPLORER = 'BUILTIN_EXPLORER'
    WEB_PERFORMANCE_PROFILE = 'WEB_PERFORMANCE_PROFILE'
    APPIUM_JAVA_JUNIT = 'APPIUM_JAVA_JUNIT'
    APPIUM_JAVA_TESTNG = 'APPIUM_JAVA_TESTNG'
    APPIUM_PYTHON = 'APPIUM_PYTHON'
    APPIUM_NODE = 'APPIUM_NODE'
    APPIUM_RUBY = 'APPIUM_RUBY'
    APPIUM_WEB_JAVA_JUNIT = 'APPIUM_WEB_JAVA_JUNIT'
    APPIUM_WEB_JAVA_TESTNG = 'APPIUM_WEB_JAVA_TESTNG'
    APPIUM_WEB_PYTHON = 'APPIUM_WEB_PYTHON'
    APPIUM_WEB_NODE = 'APPIUM_WEB_NODE'
    APPIUM_WEB_RUBY = 'APPIUM_WEB_RUBY'
    CALABASH = 'CALABASH'
    INSTRUMENTATION = 'INSTRUMENTATION'
    UIAUTOMATION = 'UIAUTOMATION'
    UIAUTOMATOR = 'UIAUTOMATOR'
    XCTEST = 'XCTEST'
    XCTEST_UI = 'XCTEST_UI'
    REMOTE_ACCESS_RECORD = 'REMOTE_ACCESS_RECORD'
    REMOTE_ACCESS_REPLAY = 'REMOTE_ACCESS_REPLAY'

    def __init__(self):
        """TestType - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestType of this TestType.
        """
        return util.deserialize_model(dikt, cls)
