# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_result import ExecutionResult
from openapi_server.models.problem_device import ProblemDevice
from openapi_server.models.problem_job import ProblemJob
from openapi_server.models.problem_run import ProblemRun
from openapi_server.models.problem_suite import ProblemSuite
from openapi_server.models.problem_test import ProblemTest
from openapi_server import util


class Problem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run: ProblemRun=None, job: ProblemJob=None, suite: ProblemSuite=None, test: ProblemTest=None, device: ProblemDevice=None, result: ExecutionResult=None, message: str=None):
        """Problem - a model defined in OpenAPI

        :param run: The run of this Problem.
        :param job: The job of this Problem.
        :param suite: The suite of this Problem.
        :param test: The test of this Problem.
        :param device: The device of this Problem.
        :param result: The result of this Problem.
        :param message: The message of this Problem.
        """
        self.openapi_types = {
            'run': ProblemRun,
            'job': ProblemJob,
            'suite': ProblemSuite,
            'test': ProblemTest,
            'device': ProblemDevice,
            'result': ExecutionResult,
            'message': str
        }

        self.attribute_map = {
            'run': 'run',
            'job': 'job',
            'suite': 'suite',
            'test': 'test',
            'device': 'device',
            'result': 'result',
            'message': 'message'
        }

        self._run = run
        self._job = job
        self._suite = suite
        self._test = test
        self._device = device
        self._result = result
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Problem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Problem of this Problem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run(self):
        """Gets the run of this Problem.


        :return: The run of this Problem.
        :rtype: ProblemRun
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this Problem.


        :param run: The run of this Problem.
        :type run: ProblemRun
        """

        self._run = run

    @property
    def job(self):
        """Gets the job of this Problem.


        :return: The job of this Problem.
        :rtype: ProblemJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Problem.


        :param job: The job of this Problem.
        :type job: ProblemJob
        """

        self._job = job

    @property
    def suite(self):
        """Gets the suite of this Problem.


        :return: The suite of this Problem.
        :rtype: ProblemSuite
        """
        return self._suite

    @suite.setter
    def suite(self, suite):
        """Sets the suite of this Problem.


        :param suite: The suite of this Problem.
        :type suite: ProblemSuite
        """

        self._suite = suite

    @property
    def test(self):
        """Gets the test of this Problem.


        :return: The test of this Problem.
        :rtype: ProblemTest
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Problem.


        :param test: The test of this Problem.
        :type test: ProblemTest
        """

        self._test = test

    @property
    def device(self):
        """Gets the device of this Problem.


        :return: The device of this Problem.
        :rtype: ProblemDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Problem.


        :param device: The device of this Problem.
        :type device: ProblemDevice
        """

        self._device = device

    @property
    def result(self):
        """Gets the result of this Problem.


        :return: The result of this Problem.
        :rtype: ExecutionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Problem.


        :param result: The result of this Problem.
        :type result: ExecutionResult
        """

        self._result = result

    @property
    def message(self):
        """Gets the message of this Problem.


        :return: The message of this Problem.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Problem.


        :param message: The message of this Problem.
        :type message: str
        """

        self._message = message
