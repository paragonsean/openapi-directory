# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteAccessSessionDeviceMinutes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total: float=None, metered: float=None, unmetered: float=None):
        """RemoteAccessSessionDeviceMinutes - a model defined in OpenAPI

        :param total: The total of this RemoteAccessSessionDeviceMinutes.
        :param metered: The metered of this RemoteAccessSessionDeviceMinutes.
        :param unmetered: The unmetered of this RemoteAccessSessionDeviceMinutes.
        """
        self.openapi_types = {
            'total': float,
            'metered': float,
            'unmetered': float
        }

        self.attribute_map = {
            'total': 'total',
            'metered': 'metered',
            'unmetered': 'unmetered'
        }

        self._total = total
        self._metered = metered
        self._unmetered = unmetered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteAccessSessionDeviceMinutes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteAccessSession_deviceMinutes of this RemoteAccessSessionDeviceMinutes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this RemoteAccessSessionDeviceMinutes.


        :return: The total of this RemoteAccessSessionDeviceMinutes.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RemoteAccessSessionDeviceMinutes.


        :param total: The total of this RemoteAccessSessionDeviceMinutes.
        :type total: float
        """

        self._total = total

    @property
    def metered(self):
        """Gets the metered of this RemoteAccessSessionDeviceMinutes.


        :return: The metered of this RemoteAccessSessionDeviceMinutes.
        :rtype: float
        """
        return self._metered

    @metered.setter
    def metered(self, metered):
        """Sets the metered of this RemoteAccessSessionDeviceMinutes.


        :param metered: The metered of this RemoteAccessSessionDeviceMinutes.
        :type metered: float
        """

        self._metered = metered

    @property
    def unmetered(self):
        """Gets the unmetered of this RemoteAccessSessionDeviceMinutes.


        :return: The unmetered of this RemoteAccessSessionDeviceMinutes.
        :rtype: float
        """
        return self._unmetered

    @unmetered.setter
    def unmetered(self, unmetered):
        """Sets the unmetered of this RemoteAccessSessionDeviceMinutes.


        :param unmetered: The unmetered of this RemoteAccessSessionDeviceMinutes.
        :type unmetered: float
        """

        self._unmetered = unmetered
