# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunDeviceSelectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List=None, matched_devices_count: int=None, max_devices: int=None):
        """RunDeviceSelectionResult - a model defined in OpenAPI

        :param filters: The filters of this RunDeviceSelectionResult.
        :param matched_devices_count: The matched_devices_count of this RunDeviceSelectionResult.
        :param max_devices: The max_devices of this RunDeviceSelectionResult.
        """
        self.openapi_types = {
            'filters': List,
            'matched_devices_count': int,
            'max_devices': int
        }

        self.attribute_map = {
            'filters': 'filters',
            'matched_devices_count': 'matchedDevicesCount',
            'max_devices': 'maxDevices'
        }

        self._filters = filters
        self._matched_devices_count = matched_devices_count
        self._max_devices = max_devices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunDeviceSelectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Run_deviceSelectionResult of this RunDeviceSelectionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this RunDeviceSelectionResult.


        :return: The filters of this RunDeviceSelectionResult.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this RunDeviceSelectionResult.


        :param filters: The filters of this RunDeviceSelectionResult.
        :type filters: List
        """

        self._filters = filters

    @property
    def matched_devices_count(self):
        """Gets the matched_devices_count of this RunDeviceSelectionResult.


        :return: The matched_devices_count of this RunDeviceSelectionResult.
        :rtype: int
        """
        return self._matched_devices_count

    @matched_devices_count.setter
    def matched_devices_count(self, matched_devices_count):
        """Sets the matched_devices_count of this RunDeviceSelectionResult.


        :param matched_devices_count: The matched_devices_count of this RunDeviceSelectionResult.
        :type matched_devices_count: int
        """

        self._matched_devices_count = matched_devices_count

    @property
    def max_devices(self):
        """Gets the max_devices of this RunDeviceSelectionResult.


        :return: The max_devices of this RunDeviceSelectionResult.
        :rtype: int
        """
        return self._max_devices

    @max_devices.setter
    def max_devices(self, max_devices):
        """Sets the max_devices of this RunDeviceSelectionResult.


        :param max_devices: The max_devices of this RunDeviceSelectionResult.
        :type max_devices: int
        """

        self._max_devices = max_devices
