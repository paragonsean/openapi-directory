# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.billing_method import BillingMethod
from openapi_server.models.create_project_request_vpc_config import CreateProjectRequestVpcConfig
from openapi_server.models.device_platform import DevicePlatform
from openapi_server.models.execution_result import ExecutionResult
from openapi_server.models.execution_result_code import ExecutionResultCode
from openapi_server.models.execution_status import ExecutionStatus
from openapi_server.models.run_counters import RunCounters
from openapi_server.models.run_customer_artifact_paths import RunCustomerArtifactPaths
from openapi_server.models.run_device_minutes import RunDeviceMinutes
from openapi_server.models.run_device_selection_result import RunDeviceSelectionResult
from openapi_server.models.run_network_profile import RunNetworkProfile
from openapi_server.models.schedule_run_configuration_location import ScheduleRunConfigurationLocation
from openapi_server.models.schedule_run_configuration_radios import ScheduleRunConfigurationRadios
from openapi_server.models.test_type import TestType
from openapi_server import util


class Run(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, type: TestType=None, platform: DevicePlatform=None, created: datetime=None, status: ExecutionStatus=None, result: ExecutionResult=None, started: datetime=None, stopped: datetime=None, counters: RunCounters=None, message: str=None, total_jobs: int=None, completed_jobs: int=None, billing_method: BillingMethod=None, device_minutes: RunDeviceMinutes=None, network_profile: RunNetworkProfile=None, parsing_result_url: str=None, result_code: ExecutionResultCode=None, seed: int=None, app_upload: str=None, event_count: int=None, job_timeout_minutes: int=None, device_pool_arn: str=None, locale: str=None, radios: ScheduleRunConfigurationRadios=None, location: ScheduleRunConfigurationLocation=None, customer_artifact_paths: RunCustomerArtifactPaths=None, web_url: str=None, skip_app_resign: bool=None, test_spec_arn: str=None, device_selection_result: RunDeviceSelectionResult=None, vpc_config: CreateProjectRequestVpcConfig=None):
        """Run - a model defined in OpenAPI

        :param arn: The arn of this Run.
        :param name: The name of this Run.
        :param type: The type of this Run.
        :param platform: The platform of this Run.
        :param created: The created of this Run.
        :param status: The status of this Run.
        :param result: The result of this Run.
        :param started: The started of this Run.
        :param stopped: The stopped of this Run.
        :param counters: The counters of this Run.
        :param message: The message of this Run.
        :param total_jobs: The total_jobs of this Run.
        :param completed_jobs: The completed_jobs of this Run.
        :param billing_method: The billing_method of this Run.
        :param device_minutes: The device_minutes of this Run.
        :param network_profile: The network_profile of this Run.
        :param parsing_result_url: The parsing_result_url of this Run.
        :param result_code: The result_code of this Run.
        :param seed: The seed of this Run.
        :param app_upload: The app_upload of this Run.
        :param event_count: The event_count of this Run.
        :param job_timeout_minutes: The job_timeout_minutes of this Run.
        :param device_pool_arn: The device_pool_arn of this Run.
        :param locale: The locale of this Run.
        :param radios: The radios of this Run.
        :param location: The location of this Run.
        :param customer_artifact_paths: The customer_artifact_paths of this Run.
        :param web_url: The web_url of this Run.
        :param skip_app_resign: The skip_app_resign of this Run.
        :param test_spec_arn: The test_spec_arn of this Run.
        :param device_selection_result: The device_selection_result of this Run.
        :param vpc_config: The vpc_config of this Run.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'type': TestType,
            'platform': DevicePlatform,
            'created': datetime,
            'status': ExecutionStatus,
            'result': ExecutionResult,
            'started': datetime,
            'stopped': datetime,
            'counters': RunCounters,
            'message': str,
            'total_jobs': int,
            'completed_jobs': int,
            'billing_method': BillingMethod,
            'device_minutes': RunDeviceMinutes,
            'network_profile': RunNetworkProfile,
            'parsing_result_url': str,
            'result_code': ExecutionResultCode,
            'seed': int,
            'app_upload': str,
            'event_count': int,
            'job_timeout_minutes': int,
            'device_pool_arn': str,
            'locale': str,
            'radios': ScheduleRunConfigurationRadios,
            'location': ScheduleRunConfigurationLocation,
            'customer_artifact_paths': RunCustomerArtifactPaths,
            'web_url': str,
            'skip_app_resign': bool,
            'test_spec_arn': str,
            'device_selection_result': RunDeviceSelectionResult,
            'vpc_config': CreateProjectRequestVpcConfig
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'type': 'type',
            'platform': 'platform',
            'created': 'created',
            'status': 'status',
            'result': 'result',
            'started': 'started',
            'stopped': 'stopped',
            'counters': 'counters',
            'message': 'message',
            'total_jobs': 'totalJobs',
            'completed_jobs': 'completedJobs',
            'billing_method': 'billingMethod',
            'device_minutes': 'deviceMinutes',
            'network_profile': 'networkProfile',
            'parsing_result_url': 'parsingResultUrl',
            'result_code': 'resultCode',
            'seed': 'seed',
            'app_upload': 'appUpload',
            'event_count': 'eventCount',
            'job_timeout_minutes': 'jobTimeoutMinutes',
            'device_pool_arn': 'devicePoolArn',
            'locale': 'locale',
            'radios': 'radios',
            'location': 'location',
            'customer_artifact_paths': 'customerArtifactPaths',
            'web_url': 'webUrl',
            'skip_app_resign': 'skipAppResign',
            'test_spec_arn': 'testSpecArn',
            'device_selection_result': 'deviceSelectionResult',
            'vpc_config': 'vpcConfig'
        }

        self._arn = arn
        self._name = name
        self._type = type
        self._platform = platform
        self._created = created
        self._status = status
        self._result = result
        self._started = started
        self._stopped = stopped
        self._counters = counters
        self._message = message
        self._total_jobs = total_jobs
        self._completed_jobs = completed_jobs
        self._billing_method = billing_method
        self._device_minutes = device_minutes
        self._network_profile = network_profile
        self._parsing_result_url = parsing_result_url
        self._result_code = result_code
        self._seed = seed
        self._app_upload = app_upload
        self._event_count = event_count
        self._job_timeout_minutes = job_timeout_minutes
        self._device_pool_arn = device_pool_arn
        self._locale = locale
        self._radios = radios
        self._location = location
        self._customer_artifact_paths = customer_artifact_paths
        self._web_url = web_url
        self._skip_app_resign = skip_app_resign
        self._test_spec_arn = test_spec_arn
        self._device_selection_result = device_selection_result
        self._vpc_config = vpc_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Run':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Run of this Run.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Run.


        :return: The arn of this Run.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Run.


        :param arn: The arn of this Run.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this Run.


        :return: The name of this Run.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Run.


        :param name: The name of this Run.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Run.


        :return: The type of this Run.
        :rtype: TestType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Run.


        :param type: The type of this Run.
        :type type: TestType
        """

        self._type = type

    @property
    def platform(self):
        """Gets the platform of this Run.


        :return: The platform of this Run.
        :rtype: DevicePlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Run.


        :param platform: The platform of this Run.
        :type platform: DevicePlatform
        """

        self._platform = platform

    @property
    def created(self):
        """Gets the created of this Run.


        :return: The created of this Run.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Run.


        :param created: The created of this Run.
        :type created: datetime
        """

        self._created = created

    @property
    def status(self):
        """Gets the status of this Run.


        :return: The status of this Run.
        :rtype: ExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Run.


        :param status: The status of this Run.
        :type status: ExecutionStatus
        """

        self._status = status

    @property
    def result(self):
        """Gets the result of this Run.


        :return: The result of this Run.
        :rtype: ExecutionResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Run.


        :param result: The result of this Run.
        :type result: ExecutionResult
        """

        self._result = result

    @property
    def started(self):
        """Gets the started of this Run.


        :return: The started of this Run.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this Run.


        :param started: The started of this Run.
        :type started: datetime
        """

        self._started = started

    @property
    def stopped(self):
        """Gets the stopped of this Run.


        :return: The stopped of this Run.
        :rtype: datetime
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this Run.


        :param stopped: The stopped of this Run.
        :type stopped: datetime
        """

        self._stopped = stopped

    @property
    def counters(self):
        """Gets the counters of this Run.


        :return: The counters of this Run.
        :rtype: RunCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this Run.


        :param counters: The counters of this Run.
        :type counters: RunCounters
        """

        self._counters = counters

    @property
    def message(self):
        """Gets the message of this Run.


        :return: The message of this Run.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Run.


        :param message: The message of this Run.
        :type message: str
        """

        self._message = message

    @property
    def total_jobs(self):
        """Gets the total_jobs of this Run.


        :return: The total_jobs of this Run.
        :rtype: int
        """
        return self._total_jobs

    @total_jobs.setter
    def total_jobs(self, total_jobs):
        """Sets the total_jobs of this Run.


        :param total_jobs: The total_jobs of this Run.
        :type total_jobs: int
        """

        self._total_jobs = total_jobs

    @property
    def completed_jobs(self):
        """Gets the completed_jobs of this Run.


        :return: The completed_jobs of this Run.
        :rtype: int
        """
        return self._completed_jobs

    @completed_jobs.setter
    def completed_jobs(self, completed_jobs):
        """Sets the completed_jobs of this Run.


        :param completed_jobs: The completed_jobs of this Run.
        :type completed_jobs: int
        """

        self._completed_jobs = completed_jobs

    @property
    def billing_method(self):
        """Gets the billing_method of this Run.


        :return: The billing_method of this Run.
        :rtype: BillingMethod
        """
        return self._billing_method

    @billing_method.setter
    def billing_method(self, billing_method):
        """Sets the billing_method of this Run.


        :param billing_method: The billing_method of this Run.
        :type billing_method: BillingMethod
        """

        self._billing_method = billing_method

    @property
    def device_minutes(self):
        """Gets the device_minutes of this Run.


        :return: The device_minutes of this Run.
        :rtype: RunDeviceMinutes
        """
        return self._device_minutes

    @device_minutes.setter
    def device_minutes(self, device_minutes):
        """Sets the device_minutes of this Run.


        :param device_minutes: The device_minutes of this Run.
        :type device_minutes: RunDeviceMinutes
        """

        self._device_minutes = device_minutes

    @property
    def network_profile(self):
        """Gets the network_profile of this Run.


        :return: The network_profile of this Run.
        :rtype: RunNetworkProfile
        """
        return self._network_profile

    @network_profile.setter
    def network_profile(self, network_profile):
        """Sets the network_profile of this Run.


        :param network_profile: The network_profile of this Run.
        :type network_profile: RunNetworkProfile
        """

        self._network_profile = network_profile

    @property
    def parsing_result_url(self):
        """Gets the parsing_result_url of this Run.


        :return: The parsing_result_url of this Run.
        :rtype: str
        """
        return self._parsing_result_url

    @parsing_result_url.setter
    def parsing_result_url(self, parsing_result_url):
        """Sets the parsing_result_url of this Run.


        :param parsing_result_url: The parsing_result_url of this Run.
        :type parsing_result_url: str
        """

        self._parsing_result_url = parsing_result_url

    @property
    def result_code(self):
        """Gets the result_code of this Run.


        :return: The result_code of this Run.
        :rtype: ExecutionResultCode
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this Run.


        :param result_code: The result_code of this Run.
        :type result_code: ExecutionResultCode
        """

        self._result_code = result_code

    @property
    def seed(self):
        """Gets the seed of this Run.


        :return: The seed of this Run.
        :rtype: int
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this Run.


        :param seed: The seed of this Run.
        :type seed: int
        """

        self._seed = seed

    @property
    def app_upload(self):
        """Gets the app_upload of this Run.


        :return: The app_upload of this Run.
        :rtype: str
        """
        return self._app_upload

    @app_upload.setter
    def app_upload(self, app_upload):
        """Sets the app_upload of this Run.


        :param app_upload: The app_upload of this Run.
        :type app_upload: str
        """

        self._app_upload = app_upload

    @property
    def event_count(self):
        """Gets the event_count of this Run.


        :return: The event_count of this Run.
        :rtype: int
        """
        return self._event_count

    @event_count.setter
    def event_count(self, event_count):
        """Sets the event_count of this Run.


        :param event_count: The event_count of this Run.
        :type event_count: int
        """

        self._event_count = event_count

    @property
    def job_timeout_minutes(self):
        """Gets the job_timeout_minutes of this Run.


        :return: The job_timeout_minutes of this Run.
        :rtype: int
        """
        return self._job_timeout_minutes

    @job_timeout_minutes.setter
    def job_timeout_minutes(self, job_timeout_minutes):
        """Sets the job_timeout_minutes of this Run.


        :param job_timeout_minutes: The job_timeout_minutes of this Run.
        :type job_timeout_minutes: int
        """

        self._job_timeout_minutes = job_timeout_minutes

    @property
    def device_pool_arn(self):
        """Gets the device_pool_arn of this Run.


        :return: The device_pool_arn of this Run.
        :rtype: str
        """
        return self._device_pool_arn

    @device_pool_arn.setter
    def device_pool_arn(self, device_pool_arn):
        """Sets the device_pool_arn of this Run.


        :param device_pool_arn: The device_pool_arn of this Run.
        :type device_pool_arn: str
        """

        self._device_pool_arn = device_pool_arn

    @property
    def locale(self):
        """Gets the locale of this Run.


        :return: The locale of this Run.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Run.


        :param locale: The locale of this Run.
        :type locale: str
        """

        self._locale = locale

    @property
    def radios(self):
        """Gets the radios of this Run.


        :return: The radios of this Run.
        :rtype: ScheduleRunConfigurationRadios
        """
        return self._radios

    @radios.setter
    def radios(self, radios):
        """Sets the radios of this Run.


        :param radios: The radios of this Run.
        :type radios: ScheduleRunConfigurationRadios
        """

        self._radios = radios

    @property
    def location(self):
        """Gets the location of this Run.


        :return: The location of this Run.
        :rtype: ScheduleRunConfigurationLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Run.


        :param location: The location of this Run.
        :type location: ScheduleRunConfigurationLocation
        """

        self._location = location

    @property
    def customer_artifact_paths(self):
        """Gets the customer_artifact_paths of this Run.


        :return: The customer_artifact_paths of this Run.
        :rtype: RunCustomerArtifactPaths
        """
        return self._customer_artifact_paths

    @customer_artifact_paths.setter
    def customer_artifact_paths(self, customer_artifact_paths):
        """Sets the customer_artifact_paths of this Run.


        :param customer_artifact_paths: The customer_artifact_paths of this Run.
        :type customer_artifact_paths: RunCustomerArtifactPaths
        """

        self._customer_artifact_paths = customer_artifact_paths

    @property
    def web_url(self):
        """Gets the web_url of this Run.


        :return: The web_url of this Run.
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this Run.


        :param web_url: The web_url of this Run.
        :type web_url: str
        """

        self._web_url = web_url

    @property
    def skip_app_resign(self):
        """Gets the skip_app_resign of this Run.


        :return: The skip_app_resign of this Run.
        :rtype: bool
        """
        return self._skip_app_resign

    @skip_app_resign.setter
    def skip_app_resign(self, skip_app_resign):
        """Sets the skip_app_resign of this Run.


        :param skip_app_resign: The skip_app_resign of this Run.
        :type skip_app_resign: bool
        """

        self._skip_app_resign = skip_app_resign

    @property
    def test_spec_arn(self):
        """Gets the test_spec_arn of this Run.


        :return: The test_spec_arn of this Run.
        :rtype: str
        """
        return self._test_spec_arn

    @test_spec_arn.setter
    def test_spec_arn(self, test_spec_arn):
        """Sets the test_spec_arn of this Run.


        :param test_spec_arn: The test_spec_arn of this Run.
        :type test_spec_arn: str
        """

        self._test_spec_arn = test_spec_arn

    @property
    def device_selection_result(self):
        """Gets the device_selection_result of this Run.


        :return: The device_selection_result of this Run.
        :rtype: RunDeviceSelectionResult
        """
        return self._device_selection_result

    @device_selection_result.setter
    def device_selection_result(self, device_selection_result):
        """Sets the device_selection_result of this Run.


        :param device_selection_result: The device_selection_result of this Run.
        :type device_selection_result: RunDeviceSelectionResult
        """

        self._device_selection_result = device_selection_result

    @property
    def vpc_config(self):
        """Gets the vpc_config of this Run.


        :return: The vpc_config of this Run.
        :rtype: CreateProjectRequestVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this Run.


        :param vpc_config: The vpc_config of this Run.
        :type vpc_config: CreateProjectRequestVpcConfig
        """

        self._vpc_config = vpc_config
