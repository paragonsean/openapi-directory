# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleRunConfigurationRadios(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wifi: bool=None, bluetooth: bool=None, nfc: bool=None, gps: bool=None):
        """ScheduleRunConfigurationRadios - a model defined in OpenAPI

        :param wifi: The wifi of this ScheduleRunConfigurationRadios.
        :param bluetooth: The bluetooth of this ScheduleRunConfigurationRadios.
        :param nfc: The nfc of this ScheduleRunConfigurationRadios.
        :param gps: The gps of this ScheduleRunConfigurationRadios.
        """
        self.openapi_types = {
            'wifi': bool,
            'bluetooth': bool,
            'nfc': bool,
            'gps': bool
        }

        self.attribute_map = {
            'wifi': 'wifi',
            'bluetooth': 'bluetooth',
            'nfc': 'nfc',
            'gps': 'gps'
        }

        self._wifi = wifi
        self._bluetooth = bluetooth
        self._nfc = nfc
        self._gps = gps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleRunConfigurationRadios':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleRunConfiguration_radios of this ScheduleRunConfigurationRadios.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wifi(self):
        """Gets the wifi of this ScheduleRunConfigurationRadios.


        :return: The wifi of this ScheduleRunConfigurationRadios.
        :rtype: bool
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this ScheduleRunConfigurationRadios.


        :param wifi: The wifi of this ScheduleRunConfigurationRadios.
        :type wifi: bool
        """

        self._wifi = wifi

    @property
    def bluetooth(self):
        """Gets the bluetooth of this ScheduleRunConfigurationRadios.


        :return: The bluetooth of this ScheduleRunConfigurationRadios.
        :rtype: bool
        """
        return self._bluetooth

    @bluetooth.setter
    def bluetooth(self, bluetooth):
        """Sets the bluetooth of this ScheduleRunConfigurationRadios.


        :param bluetooth: The bluetooth of this ScheduleRunConfigurationRadios.
        :type bluetooth: bool
        """

        self._bluetooth = bluetooth

    @property
    def nfc(self):
        """Gets the nfc of this ScheduleRunConfigurationRadios.


        :return: The nfc of this ScheduleRunConfigurationRadios.
        :rtype: bool
        """
        return self._nfc

    @nfc.setter
    def nfc(self, nfc):
        """Sets the nfc of this ScheduleRunConfigurationRadios.


        :param nfc: The nfc of this ScheduleRunConfigurationRadios.
        :type nfc: bool
        """

        self._nfc = nfc

    @property
    def gps(self):
        """Gets the gps of this ScheduleRunConfigurationRadios.


        :return: The gps of this ScheduleRunConfigurationRadios.
        :rtype: bool
        """
        return self._gps

    @gps.setter
    def gps(self, gps):
        """Sets the gps of this ScheduleRunConfigurationRadios.


        :param gps: The gps of this ScheduleRunConfigurationRadios.
        :type gps: bool
        """

        self._gps = gps
