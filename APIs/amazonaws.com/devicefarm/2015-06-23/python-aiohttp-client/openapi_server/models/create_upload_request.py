# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_type import UploadType
from openapi_server import util


class CreateUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_arn: str=None, name: str=None, type: UploadType=None, content_type: str=None):
        """CreateUploadRequest - a model defined in OpenAPI

        :param project_arn: The project_arn of this CreateUploadRequest.
        :param name: The name of this CreateUploadRequest.
        :param type: The type of this CreateUploadRequest.
        :param content_type: The content_type of this CreateUploadRequest.
        """
        self.openapi_types = {
            'project_arn': str,
            'name': str,
            'type': UploadType,
            'content_type': str
        }

        self.attribute_map = {
            'project_arn': 'projectArn',
            'name': 'name',
            'type': 'type',
            'content_type': 'contentType'
        }

        self._project_arn = project_arn
        self._name = name
        self._type = type
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUploadRequest of this CreateUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_arn(self):
        """Gets the project_arn of this CreateUploadRequest.


        :return: The project_arn of this CreateUploadRequest.
        :rtype: str
        """
        return self._project_arn

    @project_arn.setter
    def project_arn(self, project_arn):
        """Sets the project_arn of this CreateUploadRequest.


        :param project_arn: The project_arn of this CreateUploadRequest.
        :type project_arn: str
        """
        if project_arn is None:
            raise ValueError("Invalid value for `project_arn`, must not be `None`")

        self._project_arn = project_arn

    @property
    def name(self):
        """Gets the name of this CreateUploadRequest.


        :return: The name of this CreateUploadRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUploadRequest.


        :param name: The name of this CreateUploadRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateUploadRequest.


        :return: The type of this CreateUploadRequest.
        :rtype: UploadType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateUploadRequest.


        :param type: The type of this CreateUploadRequest.
        :type type: UploadType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def content_type(self):
        """Gets the content_type of this CreateUploadRequest.


        :return: The content_type of this CreateUploadRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CreateUploadRequest.


        :param content_type: The content_type of this CreateUploadRequest.
        :type content_type: str
        """

        self._content_type = content_type
