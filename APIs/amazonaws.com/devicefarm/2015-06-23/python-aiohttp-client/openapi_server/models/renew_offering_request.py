# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenewOfferingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offering_id: str=None, quantity: int=None):
        """RenewOfferingRequest - a model defined in OpenAPI

        :param offering_id: The offering_id of this RenewOfferingRequest.
        :param quantity: The quantity of this RenewOfferingRequest.
        """
        self.openapi_types = {
            'offering_id': str,
            'quantity': int
        }

        self.attribute_map = {
            'offering_id': 'offeringId',
            'quantity': 'quantity'
        }

        self._offering_id = offering_id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenewOfferingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenewOfferingRequest of this RenewOfferingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offering_id(self):
        """Gets the offering_id of this RenewOfferingRequest.


        :return: The offering_id of this RenewOfferingRequest.
        :rtype: str
        """
        return self._offering_id

    @offering_id.setter
    def offering_id(self, offering_id):
        """Sets the offering_id of this RenewOfferingRequest.


        :param offering_id: The offering_id of this RenewOfferingRequest.
        :type offering_id: str
        """
        if offering_id is None:
            raise ValueError("Invalid value for `offering_id`, must not be `None`")

        self._offering_id = offering_id

    @property
    def quantity(self):
        """Gets the quantity of this RenewOfferingRequest.


        :return: The quantity of this RenewOfferingRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RenewOfferingRequest.


        :param quantity: The quantity of this RenewOfferingRequest.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
