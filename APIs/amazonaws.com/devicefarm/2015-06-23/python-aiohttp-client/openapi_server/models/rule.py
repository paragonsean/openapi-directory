# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_attribute import DeviceAttribute
from openapi_server.models.rule_operator import RuleOperator
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: DeviceAttribute=None, operator: RuleOperator=None, value: str=None):
        """Rule - a model defined in OpenAPI

        :param attribute: The attribute of this Rule.
        :param operator: The operator of this Rule.
        :param value: The value of this Rule.
        """
        self.openapi_types = {
            'attribute': DeviceAttribute,
            'operator': RuleOperator,
            'value': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'operator': 'operator',
            'value': 'value'
        }

        self._attribute = attribute
        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this Rule.


        :return: The attribute of this Rule.
        :rtype: DeviceAttribute
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this Rule.


        :param attribute: The attribute of this Rule.
        :type attribute: DeviceAttribute
        """

        self._attribute = attribute

    @property
    def operator(self):
        """Gets the operator of this Rule.


        :return: The operator of this Rule.
        :rtype: RuleOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Rule.


        :param operator: The operator of this Rule.
        :type operator: RuleOperator
        """

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this Rule.


        :return: The value of this Rule.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Rule.


        :param value: The value of this Rule.
        :type value: str
        """

        self._value = value
