# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_type import ArtifactType
from openapi_server import util


class Artifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, type: ArtifactType=None, extension: str=None, url: str=None):
        """Artifact - a model defined in OpenAPI

        :param arn: The arn of this Artifact.
        :param name: The name of this Artifact.
        :param type: The type of this Artifact.
        :param extension: The extension of this Artifact.
        :param url: The url of this Artifact.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'type': ArtifactType,
            'extension': str,
            'url': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'type': 'type',
            'extension': 'extension',
            'url': 'url'
        }

        self._arn = arn
        self._name = name
        self._type = type
        self._extension = extension
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Artifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Artifact of this Artifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Artifact.


        :return: The arn of this Artifact.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Artifact.


        :param arn: The arn of this Artifact.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this Artifact.


        :return: The name of this Artifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.


        :param name: The name of this Artifact.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Artifact.


        :return: The type of this Artifact.
        :rtype: ArtifactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Artifact.


        :param type: The type of this Artifact.
        :type type: ArtifactType
        """

        self._type = type

    @property
    def extension(self):
        """Gets the extension of this Artifact.


        :return: The extension of this Artifact.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Artifact.


        :param extension: The extension of this Artifact.
        :type extension: str
        """

        self._extension = extension

    @property
    def url(self):
        """Gets the url of this Artifact.


        :return: The url of this Artifact.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Artifact.


        :param url: The url of this Artifact.
        :type url: str
        """

        self._url = url
