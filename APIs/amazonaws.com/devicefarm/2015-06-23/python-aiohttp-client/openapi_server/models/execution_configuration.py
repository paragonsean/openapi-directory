# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecutionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_timeout_minutes: int=None, accounts_cleanup: bool=None, app_packages_cleanup: bool=None, video_capture: bool=None, skip_app_resign: bool=None):
        """ExecutionConfiguration - a model defined in OpenAPI

        :param job_timeout_minutes: The job_timeout_minutes of this ExecutionConfiguration.
        :param accounts_cleanup: The accounts_cleanup of this ExecutionConfiguration.
        :param app_packages_cleanup: The app_packages_cleanup of this ExecutionConfiguration.
        :param video_capture: The video_capture of this ExecutionConfiguration.
        :param skip_app_resign: The skip_app_resign of this ExecutionConfiguration.
        """
        self.openapi_types = {
            'job_timeout_minutes': int,
            'accounts_cleanup': bool,
            'app_packages_cleanup': bool,
            'video_capture': bool,
            'skip_app_resign': bool
        }

        self.attribute_map = {
            'job_timeout_minutes': 'jobTimeoutMinutes',
            'accounts_cleanup': 'accountsCleanup',
            'app_packages_cleanup': 'appPackagesCleanup',
            'video_capture': 'videoCapture',
            'skip_app_resign': 'skipAppResign'
        }

        self._job_timeout_minutes = job_timeout_minutes
        self._accounts_cleanup = accounts_cleanup
        self._app_packages_cleanup = app_packages_cleanup
        self._video_capture = video_capture
        self._skip_app_resign = skip_app_resign

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionConfiguration of this ExecutionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_timeout_minutes(self):
        """Gets the job_timeout_minutes of this ExecutionConfiguration.


        :return: The job_timeout_minutes of this ExecutionConfiguration.
        :rtype: int
        """
        return self._job_timeout_minutes

    @job_timeout_minutes.setter
    def job_timeout_minutes(self, job_timeout_minutes):
        """Sets the job_timeout_minutes of this ExecutionConfiguration.


        :param job_timeout_minutes: The job_timeout_minutes of this ExecutionConfiguration.
        :type job_timeout_minutes: int
        """

        self._job_timeout_minutes = job_timeout_minutes

    @property
    def accounts_cleanup(self):
        """Gets the accounts_cleanup of this ExecutionConfiguration.


        :return: The accounts_cleanup of this ExecutionConfiguration.
        :rtype: bool
        """
        return self._accounts_cleanup

    @accounts_cleanup.setter
    def accounts_cleanup(self, accounts_cleanup):
        """Sets the accounts_cleanup of this ExecutionConfiguration.


        :param accounts_cleanup: The accounts_cleanup of this ExecutionConfiguration.
        :type accounts_cleanup: bool
        """

        self._accounts_cleanup = accounts_cleanup

    @property
    def app_packages_cleanup(self):
        """Gets the app_packages_cleanup of this ExecutionConfiguration.


        :return: The app_packages_cleanup of this ExecutionConfiguration.
        :rtype: bool
        """
        return self._app_packages_cleanup

    @app_packages_cleanup.setter
    def app_packages_cleanup(self, app_packages_cleanup):
        """Sets the app_packages_cleanup of this ExecutionConfiguration.


        :param app_packages_cleanup: The app_packages_cleanup of this ExecutionConfiguration.
        :type app_packages_cleanup: bool
        """

        self._app_packages_cleanup = app_packages_cleanup

    @property
    def video_capture(self):
        """Gets the video_capture of this ExecutionConfiguration.


        :return: The video_capture of this ExecutionConfiguration.
        :rtype: bool
        """
        return self._video_capture

    @video_capture.setter
    def video_capture(self, video_capture):
        """Sets the video_capture of this ExecutionConfiguration.


        :param video_capture: The video_capture of this ExecutionConfiguration.
        :type video_capture: bool
        """

        self._video_capture = video_capture

    @property
    def skip_app_resign(self):
        """Gets the skip_app_resign of this ExecutionConfiguration.


        :return: The skip_app_resign of this ExecutionConfiguration.
        :rtype: bool
        """
        return self._skip_app_resign

    @skip_app_resign.setter
    def skip_app_resign(self, skip_app_resign):
        """Sets the skip_app_resign of this ExecutionConfiguration.


        :param skip_app_resign: The skip_app_resign of this ExecutionConfiguration.
        :type skip_app_resign: bool
        """

        self._skip_app_resign = skip_app_resign
