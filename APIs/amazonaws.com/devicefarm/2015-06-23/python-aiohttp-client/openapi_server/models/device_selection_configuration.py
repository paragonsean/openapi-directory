# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceSelectionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List=None, max_devices: int=None):
        """DeviceSelectionConfiguration - a model defined in OpenAPI

        :param filters: The filters of this DeviceSelectionConfiguration.
        :param max_devices: The max_devices of this DeviceSelectionConfiguration.
        """
        self.openapi_types = {
            'filters': List,
            'max_devices': int
        }

        self.attribute_map = {
            'filters': 'filters',
            'max_devices': 'maxDevices'
        }

        self._filters = filters
        self._max_devices = max_devices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSelectionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceSelectionConfiguration of this DeviceSelectionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this DeviceSelectionConfiguration.


        :return: The filters of this DeviceSelectionConfiguration.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DeviceSelectionConfiguration.


        :param filters: The filters of this DeviceSelectionConfiguration.
        :type filters: List
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters

    @property
    def max_devices(self):
        """Gets the max_devices of this DeviceSelectionConfiguration.


        :return: The max_devices of this DeviceSelectionConfiguration.
        :rtype: int
        """
        return self._max_devices

    @max_devices.setter
    def max_devices(self, max_devices):
        """Sets the max_devices of this DeviceSelectionConfiguration.


        :param max_devices: The max_devices of this DeviceSelectionConfiguration.
        :type max_devices: int
        """
        if max_devices is None:
            raise ValueError("Invalid value for `max_devices`, must not be `None`")

        self._max_devices = max_devices
