# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_platform import DevicePlatform
from openapi_server.models.offering_type import OfferingType
from openapi_server import util


class Offering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, description: str=None, type: OfferingType=None, platform: DevicePlatform=None, recurring_charges: List=None):
        """Offering - a model defined in OpenAPI

        :param id: The id of this Offering.
        :param description: The description of this Offering.
        :param type: The type of this Offering.
        :param platform: The platform of this Offering.
        :param recurring_charges: The recurring_charges of this Offering.
        """
        self.openapi_types = {
            'id': str,
            'description': str,
            'type': OfferingType,
            'platform': DevicePlatform,
            'recurring_charges': List
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'type': 'type',
            'platform': 'platform',
            'recurring_charges': 'recurringCharges'
        }

        self._id = id
        self._description = description
        self._type = type
        self._platform = platform
        self._recurring_charges = recurring_charges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offering of this Offering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Offering.


        :return: The id of this Offering.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Offering.


        :param id: The id of this Offering.
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Offering.


        :return: The description of this Offering.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Offering.


        :param description: The description of this Offering.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Offering.


        :return: The type of this Offering.
        :rtype: OfferingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Offering.


        :param type: The type of this Offering.
        :type type: OfferingType
        """

        self._type = type

    @property
    def platform(self):
        """Gets the platform of this Offering.


        :return: The platform of this Offering.
        :rtype: DevicePlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Offering.


        :param platform: The platform of this Offering.
        :type platform: DevicePlatform
        """

        self._platform = platform

    @property
    def recurring_charges(self):
        """Gets the recurring_charges of this Offering.


        :return: The recurring_charges of this Offering.
        :rtype: List
        """
        return self._recurring_charges

    @recurring_charges.setter
    def recurring_charges(self, recurring_charges):
        """Sets the recurring_charges of this Offering.


        :param recurring_charges: The recurring_charges of this Offering.
        :type recurring_charges: List
        """

        self._recurring_charges = recurring_charges
