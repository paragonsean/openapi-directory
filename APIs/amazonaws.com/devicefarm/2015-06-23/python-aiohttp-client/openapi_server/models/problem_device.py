# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_availability import DeviceAvailability
from openapi_server.models.device_cpu import DeviceCpu
from openapi_server.models.device_form_factor import DeviceFormFactor
from openapi_server.models.device_platform import DevicePlatform
from openapi_server.models.device_resolution import DeviceResolution
from openapi_server import util


class ProblemDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, manufacturer: str=None, model: str=None, model_id: str=None, form_factor: DeviceFormFactor=None, platform: DevicePlatform=None, os: str=None, cpu: DeviceCpu=None, resolution: DeviceResolution=None, heap_size: int=None, memory: int=None, image: str=None, carrier: str=None, radio: str=None, remote_access_enabled: bool=None, remote_debug_enabled: bool=None, fleet_type: str=None, fleet_name: str=None, instances: List=None, availability: DeviceAvailability=None):
        """ProblemDevice - a model defined in OpenAPI

        :param arn: The arn of this ProblemDevice.
        :param name: The name of this ProblemDevice.
        :param manufacturer: The manufacturer of this ProblemDevice.
        :param model: The model of this ProblemDevice.
        :param model_id: The model_id of this ProblemDevice.
        :param form_factor: The form_factor of this ProblemDevice.
        :param platform: The platform of this ProblemDevice.
        :param os: The os of this ProblemDevice.
        :param cpu: The cpu of this ProblemDevice.
        :param resolution: The resolution of this ProblemDevice.
        :param heap_size: The heap_size of this ProblemDevice.
        :param memory: The memory of this ProblemDevice.
        :param image: The image of this ProblemDevice.
        :param carrier: The carrier of this ProblemDevice.
        :param radio: The radio of this ProblemDevice.
        :param remote_access_enabled: The remote_access_enabled of this ProblemDevice.
        :param remote_debug_enabled: The remote_debug_enabled of this ProblemDevice.
        :param fleet_type: The fleet_type of this ProblemDevice.
        :param fleet_name: The fleet_name of this ProblemDevice.
        :param instances: The instances of this ProblemDevice.
        :param availability: The availability of this ProblemDevice.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'manufacturer': str,
            'model': str,
            'model_id': str,
            'form_factor': DeviceFormFactor,
            'platform': DevicePlatform,
            'os': str,
            'cpu': DeviceCpu,
            'resolution': DeviceResolution,
            'heap_size': int,
            'memory': int,
            'image': str,
            'carrier': str,
            'radio': str,
            'remote_access_enabled': bool,
            'remote_debug_enabled': bool,
            'fleet_type': str,
            'fleet_name': str,
            'instances': List,
            'availability': DeviceAvailability
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'model_id': 'modelId',
            'form_factor': 'formFactor',
            'platform': 'platform',
            'os': 'os',
            'cpu': 'cpu',
            'resolution': 'resolution',
            'heap_size': 'heapSize',
            'memory': 'memory',
            'image': 'image',
            'carrier': 'carrier',
            'radio': 'radio',
            'remote_access_enabled': 'remoteAccessEnabled',
            'remote_debug_enabled': 'remoteDebugEnabled',
            'fleet_type': 'fleetType',
            'fleet_name': 'fleetName',
            'instances': 'instances',
            'availability': 'availability'
        }

        self._arn = arn
        self._name = name
        self._manufacturer = manufacturer
        self._model = model
        self._model_id = model_id
        self._form_factor = form_factor
        self._platform = platform
        self._os = os
        self._cpu = cpu
        self._resolution = resolution
        self._heap_size = heap_size
        self._memory = memory
        self._image = image
        self._carrier = carrier
        self._radio = radio
        self._remote_access_enabled = remote_access_enabled
        self._remote_debug_enabled = remote_debug_enabled
        self._fleet_type = fleet_type
        self._fleet_name = fleet_name
        self._instances = instances
        self._availability = availability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProblemDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Problem_device of this ProblemDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ProblemDevice.


        :return: The arn of this ProblemDevice.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ProblemDevice.


        :param arn: The arn of this ProblemDevice.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this ProblemDevice.


        :return: The name of this ProblemDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProblemDevice.


        :param name: The name of this ProblemDevice.
        :type name: str
        """

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProblemDevice.


        :return: The manufacturer of this ProblemDevice.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProblemDevice.


        :param manufacturer: The manufacturer of this ProblemDevice.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this ProblemDevice.


        :return: The model of this ProblemDevice.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProblemDevice.


        :param model: The model of this ProblemDevice.
        :type model: str
        """

        self._model = model

    @property
    def model_id(self):
        """Gets the model_id of this ProblemDevice.


        :return: The model_id of this ProblemDevice.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ProblemDevice.


        :param model_id: The model_id of this ProblemDevice.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def form_factor(self):
        """Gets the form_factor of this ProblemDevice.


        :return: The form_factor of this ProblemDevice.
        :rtype: DeviceFormFactor
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this ProblemDevice.


        :param form_factor: The form_factor of this ProblemDevice.
        :type form_factor: DeviceFormFactor
        """

        self._form_factor = form_factor

    @property
    def platform(self):
        """Gets the platform of this ProblemDevice.


        :return: The platform of this ProblemDevice.
        :rtype: DevicePlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ProblemDevice.


        :param platform: The platform of this ProblemDevice.
        :type platform: DevicePlatform
        """

        self._platform = platform

    @property
    def os(self):
        """Gets the os of this ProblemDevice.


        :return: The os of this ProblemDevice.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this ProblemDevice.


        :param os: The os of this ProblemDevice.
        :type os: str
        """

        self._os = os

    @property
    def cpu(self):
        """Gets the cpu of this ProblemDevice.


        :return: The cpu of this ProblemDevice.
        :rtype: DeviceCpu
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ProblemDevice.


        :param cpu: The cpu of this ProblemDevice.
        :type cpu: DeviceCpu
        """

        self._cpu = cpu

    @property
    def resolution(self):
        """Gets the resolution of this ProblemDevice.


        :return: The resolution of this ProblemDevice.
        :rtype: DeviceResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ProblemDevice.


        :param resolution: The resolution of this ProblemDevice.
        :type resolution: DeviceResolution
        """

        self._resolution = resolution

    @property
    def heap_size(self):
        """Gets the heap_size of this ProblemDevice.


        :return: The heap_size of this ProblemDevice.
        :rtype: int
        """
        return self._heap_size

    @heap_size.setter
    def heap_size(self, heap_size):
        """Sets the heap_size of this ProblemDevice.


        :param heap_size: The heap_size of this ProblemDevice.
        :type heap_size: int
        """

        self._heap_size = heap_size

    @property
    def memory(self):
        """Gets the memory of this ProblemDevice.


        :return: The memory of this ProblemDevice.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ProblemDevice.


        :param memory: The memory of this ProblemDevice.
        :type memory: int
        """

        self._memory = memory

    @property
    def image(self):
        """Gets the image of this ProblemDevice.


        :return: The image of this ProblemDevice.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ProblemDevice.


        :param image: The image of this ProblemDevice.
        :type image: str
        """

        self._image = image

    @property
    def carrier(self):
        """Gets the carrier of this ProblemDevice.


        :return: The carrier of this ProblemDevice.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this ProblemDevice.


        :param carrier: The carrier of this ProblemDevice.
        :type carrier: str
        """

        self._carrier = carrier

    @property
    def radio(self):
        """Gets the radio of this ProblemDevice.


        :return: The radio of this ProblemDevice.
        :rtype: str
        """
        return self._radio

    @radio.setter
    def radio(self, radio):
        """Sets the radio of this ProblemDevice.


        :param radio: The radio of this ProblemDevice.
        :type radio: str
        """

        self._radio = radio

    @property
    def remote_access_enabled(self):
        """Gets the remote_access_enabled of this ProblemDevice.


        :return: The remote_access_enabled of this ProblemDevice.
        :rtype: bool
        """
        return self._remote_access_enabled

    @remote_access_enabled.setter
    def remote_access_enabled(self, remote_access_enabled):
        """Sets the remote_access_enabled of this ProblemDevice.


        :param remote_access_enabled: The remote_access_enabled of this ProblemDevice.
        :type remote_access_enabled: bool
        """

        self._remote_access_enabled = remote_access_enabled

    @property
    def remote_debug_enabled(self):
        """Gets the remote_debug_enabled of this ProblemDevice.


        :return: The remote_debug_enabled of this ProblemDevice.
        :rtype: bool
        """
        return self._remote_debug_enabled

    @remote_debug_enabled.setter
    def remote_debug_enabled(self, remote_debug_enabled):
        """Sets the remote_debug_enabled of this ProblemDevice.


        :param remote_debug_enabled: The remote_debug_enabled of this ProblemDevice.
        :type remote_debug_enabled: bool
        """

        self._remote_debug_enabled = remote_debug_enabled

    @property
    def fleet_type(self):
        """Gets the fleet_type of this ProblemDevice.


        :return: The fleet_type of this ProblemDevice.
        :rtype: str
        """
        return self._fleet_type

    @fleet_type.setter
    def fleet_type(self, fleet_type):
        """Sets the fleet_type of this ProblemDevice.


        :param fleet_type: The fleet_type of this ProblemDevice.
        :type fleet_type: str
        """

        self._fleet_type = fleet_type

    @property
    def fleet_name(self):
        """Gets the fleet_name of this ProblemDevice.


        :return: The fleet_name of this ProblemDevice.
        :rtype: str
        """
        return self._fleet_name

    @fleet_name.setter
    def fleet_name(self, fleet_name):
        """Sets the fleet_name of this ProblemDevice.


        :param fleet_name: The fleet_name of this ProblemDevice.
        :type fleet_name: str
        """

        self._fleet_name = fleet_name

    @property
    def instances(self):
        """Gets the instances of this ProblemDevice.


        :return: The instances of this ProblemDevice.
        :rtype: List
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this ProblemDevice.


        :param instances: The instances of this ProblemDevice.
        :type instances: List
        """

        self._instances = instances

    @property
    def availability(self):
        """Gets the availability of this ProblemDevice.


        :return: The availability of this ProblemDevice.
        :rtype: DeviceAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ProblemDevice.


        :param availability: The availability of this ProblemDevice.
        :type availability: DeviceAvailability
        """

        self._availability = availability
