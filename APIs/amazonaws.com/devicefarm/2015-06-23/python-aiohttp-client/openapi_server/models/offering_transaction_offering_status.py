# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offering_status_offering import OfferingStatusOffering
from openapi_server.models.offering_transaction_type import OfferingTransactionType
from openapi_server import util


class OfferingTransactionOfferingStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: OfferingTransactionType=None, offering: OfferingStatusOffering=None, quantity: int=None, effective_on: datetime=None):
        """OfferingTransactionOfferingStatus - a model defined in OpenAPI

        :param type: The type of this OfferingTransactionOfferingStatus.
        :param offering: The offering of this OfferingTransactionOfferingStatus.
        :param quantity: The quantity of this OfferingTransactionOfferingStatus.
        :param effective_on: The effective_on of this OfferingTransactionOfferingStatus.
        """
        self.openapi_types = {
            'type': OfferingTransactionType,
            'offering': OfferingStatusOffering,
            'quantity': int,
            'effective_on': datetime
        }

        self.attribute_map = {
            'type': 'type',
            'offering': 'offering',
            'quantity': 'quantity',
            'effective_on': 'effectiveOn'
        }

        self._type = type
        self._offering = offering
        self._quantity = quantity
        self._effective_on = effective_on

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferingTransactionOfferingStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferingTransaction_offeringStatus of this OfferingTransactionOfferingStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this OfferingTransactionOfferingStatus.


        :return: The type of this OfferingTransactionOfferingStatus.
        :rtype: OfferingTransactionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OfferingTransactionOfferingStatus.


        :param type: The type of this OfferingTransactionOfferingStatus.
        :type type: OfferingTransactionType
        """

        self._type = type

    @property
    def offering(self):
        """Gets the offering of this OfferingTransactionOfferingStatus.


        :return: The offering of this OfferingTransactionOfferingStatus.
        :rtype: OfferingStatusOffering
        """
        return self._offering

    @offering.setter
    def offering(self, offering):
        """Sets the offering of this OfferingTransactionOfferingStatus.


        :param offering: The offering of this OfferingTransactionOfferingStatus.
        :type offering: OfferingStatusOffering
        """

        self._offering = offering

    @property
    def quantity(self):
        """Gets the quantity of this OfferingTransactionOfferingStatus.


        :return: The quantity of this OfferingTransactionOfferingStatus.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OfferingTransactionOfferingStatus.


        :param quantity: The quantity of this OfferingTransactionOfferingStatus.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def effective_on(self):
        """Gets the effective_on of this OfferingTransactionOfferingStatus.


        :return: The effective_on of this OfferingTransactionOfferingStatus.
        :rtype: datetime
        """
        return self._effective_on

    @effective_on.setter
    def effective_on(self, effective_on):
        """Sets the effective_on of this OfferingTransactionOfferingStatus.


        :param effective_on: The effective_on of this OfferingTransactionOfferingStatus.
        :type effective_on: datetime
        """

        self._effective_on = effective_on
