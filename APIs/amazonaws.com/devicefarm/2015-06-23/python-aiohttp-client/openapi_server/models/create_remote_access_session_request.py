# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_remote_access_session_request_configuration import CreateRemoteAccessSessionRequestConfiguration
from openapi_server.models.interaction_mode import InteractionMode
from openapi_server import util


class CreateRemoteAccessSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_arn: str=None, device_arn: str=None, instance_arn: str=None, ssh_public_key: str=None, remote_debug_enabled: bool=None, remote_record_enabled: bool=None, remote_record_app_arn: str=None, name: str=None, client_id: str=None, configuration: CreateRemoteAccessSessionRequestConfiguration=None, interaction_mode: InteractionMode=None, skip_app_resign: bool=None):
        """CreateRemoteAccessSessionRequest - a model defined in OpenAPI

        :param project_arn: The project_arn of this CreateRemoteAccessSessionRequest.
        :param device_arn: The device_arn of this CreateRemoteAccessSessionRequest.
        :param instance_arn: The instance_arn of this CreateRemoteAccessSessionRequest.
        :param ssh_public_key: The ssh_public_key of this CreateRemoteAccessSessionRequest.
        :param remote_debug_enabled: The remote_debug_enabled of this CreateRemoteAccessSessionRequest.
        :param remote_record_enabled: The remote_record_enabled of this CreateRemoteAccessSessionRequest.
        :param remote_record_app_arn: The remote_record_app_arn of this CreateRemoteAccessSessionRequest.
        :param name: The name of this CreateRemoteAccessSessionRequest.
        :param client_id: The client_id of this CreateRemoteAccessSessionRequest.
        :param configuration: The configuration of this CreateRemoteAccessSessionRequest.
        :param interaction_mode: The interaction_mode of this CreateRemoteAccessSessionRequest.
        :param skip_app_resign: The skip_app_resign of this CreateRemoteAccessSessionRequest.
        """
        self.openapi_types = {
            'project_arn': str,
            'device_arn': str,
            'instance_arn': str,
            'ssh_public_key': str,
            'remote_debug_enabled': bool,
            'remote_record_enabled': bool,
            'remote_record_app_arn': str,
            'name': str,
            'client_id': str,
            'configuration': CreateRemoteAccessSessionRequestConfiguration,
            'interaction_mode': InteractionMode,
            'skip_app_resign': bool
        }

        self.attribute_map = {
            'project_arn': 'projectArn',
            'device_arn': 'deviceArn',
            'instance_arn': 'instanceArn',
            'ssh_public_key': 'sshPublicKey',
            'remote_debug_enabled': 'remoteDebugEnabled',
            'remote_record_enabled': 'remoteRecordEnabled',
            'remote_record_app_arn': 'remoteRecordAppArn',
            'name': 'name',
            'client_id': 'clientId',
            'configuration': 'configuration',
            'interaction_mode': 'interactionMode',
            'skip_app_resign': 'skipAppResign'
        }

        self._project_arn = project_arn
        self._device_arn = device_arn
        self._instance_arn = instance_arn
        self._ssh_public_key = ssh_public_key
        self._remote_debug_enabled = remote_debug_enabled
        self._remote_record_enabled = remote_record_enabled
        self._remote_record_app_arn = remote_record_app_arn
        self._name = name
        self._client_id = client_id
        self._configuration = configuration
        self._interaction_mode = interaction_mode
        self._skip_app_resign = skip_app_resign

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRemoteAccessSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRemoteAccessSessionRequest of this CreateRemoteAccessSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_arn(self):
        """Gets the project_arn of this CreateRemoteAccessSessionRequest.


        :return: The project_arn of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._project_arn

    @project_arn.setter
    def project_arn(self, project_arn):
        """Sets the project_arn of this CreateRemoteAccessSessionRequest.


        :param project_arn: The project_arn of this CreateRemoteAccessSessionRequest.
        :type project_arn: str
        """
        if project_arn is None:
            raise ValueError("Invalid value for `project_arn`, must not be `None`")

        self._project_arn = project_arn

    @property
    def device_arn(self):
        """Gets the device_arn of this CreateRemoteAccessSessionRequest.


        :return: The device_arn of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._device_arn

    @device_arn.setter
    def device_arn(self, device_arn):
        """Sets the device_arn of this CreateRemoteAccessSessionRequest.


        :param device_arn: The device_arn of this CreateRemoteAccessSessionRequest.
        :type device_arn: str
        """
        if device_arn is None:
            raise ValueError("Invalid value for `device_arn`, must not be `None`")

        self._device_arn = device_arn

    @property
    def instance_arn(self):
        """Gets the instance_arn of this CreateRemoteAccessSessionRequest.


        :return: The instance_arn of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._instance_arn

    @instance_arn.setter
    def instance_arn(self, instance_arn):
        """Sets the instance_arn of this CreateRemoteAccessSessionRequest.


        :param instance_arn: The instance_arn of this CreateRemoteAccessSessionRequest.
        :type instance_arn: str
        """

        self._instance_arn = instance_arn

    @property
    def ssh_public_key(self):
        """Gets the ssh_public_key of this CreateRemoteAccessSessionRequest.


        :return: The ssh_public_key of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._ssh_public_key

    @ssh_public_key.setter
    def ssh_public_key(self, ssh_public_key):
        """Sets the ssh_public_key of this CreateRemoteAccessSessionRequest.


        :param ssh_public_key: The ssh_public_key of this CreateRemoteAccessSessionRequest.
        :type ssh_public_key: str
        """

        self._ssh_public_key = ssh_public_key

    @property
    def remote_debug_enabled(self):
        """Gets the remote_debug_enabled of this CreateRemoteAccessSessionRequest.


        :return: The remote_debug_enabled of this CreateRemoteAccessSessionRequest.
        :rtype: bool
        """
        return self._remote_debug_enabled

    @remote_debug_enabled.setter
    def remote_debug_enabled(self, remote_debug_enabled):
        """Sets the remote_debug_enabled of this CreateRemoteAccessSessionRequest.


        :param remote_debug_enabled: The remote_debug_enabled of this CreateRemoteAccessSessionRequest.
        :type remote_debug_enabled: bool
        """

        self._remote_debug_enabled = remote_debug_enabled

    @property
    def remote_record_enabled(self):
        """Gets the remote_record_enabled of this CreateRemoteAccessSessionRequest.


        :return: The remote_record_enabled of this CreateRemoteAccessSessionRequest.
        :rtype: bool
        """
        return self._remote_record_enabled

    @remote_record_enabled.setter
    def remote_record_enabled(self, remote_record_enabled):
        """Sets the remote_record_enabled of this CreateRemoteAccessSessionRequest.


        :param remote_record_enabled: The remote_record_enabled of this CreateRemoteAccessSessionRequest.
        :type remote_record_enabled: bool
        """

        self._remote_record_enabled = remote_record_enabled

    @property
    def remote_record_app_arn(self):
        """Gets the remote_record_app_arn of this CreateRemoteAccessSessionRequest.


        :return: The remote_record_app_arn of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._remote_record_app_arn

    @remote_record_app_arn.setter
    def remote_record_app_arn(self, remote_record_app_arn):
        """Sets the remote_record_app_arn of this CreateRemoteAccessSessionRequest.


        :param remote_record_app_arn: The remote_record_app_arn of this CreateRemoteAccessSessionRequest.
        :type remote_record_app_arn: str
        """

        self._remote_record_app_arn = remote_record_app_arn

    @property
    def name(self):
        """Gets the name of this CreateRemoteAccessSessionRequest.


        :return: The name of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRemoteAccessSessionRequest.


        :param name: The name of this CreateRemoteAccessSessionRequest.
        :type name: str
        """

        self._name = name

    @property
    def client_id(self):
        """Gets the client_id of this CreateRemoteAccessSessionRequest.


        :return: The client_id of this CreateRemoteAccessSessionRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CreateRemoteAccessSessionRequest.


        :param client_id: The client_id of this CreateRemoteAccessSessionRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def configuration(self):
        """Gets the configuration of this CreateRemoteAccessSessionRequest.


        :return: The configuration of this CreateRemoteAccessSessionRequest.
        :rtype: CreateRemoteAccessSessionRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateRemoteAccessSessionRequest.


        :param configuration: The configuration of this CreateRemoteAccessSessionRequest.
        :type configuration: CreateRemoteAccessSessionRequestConfiguration
        """

        self._configuration = configuration

    @property
    def interaction_mode(self):
        """Gets the interaction_mode of this CreateRemoteAccessSessionRequest.


        :return: The interaction_mode of this CreateRemoteAccessSessionRequest.
        :rtype: InteractionMode
        """
        return self._interaction_mode

    @interaction_mode.setter
    def interaction_mode(self, interaction_mode):
        """Sets the interaction_mode of this CreateRemoteAccessSessionRequest.


        :param interaction_mode: The interaction_mode of this CreateRemoteAccessSessionRequest.
        :type interaction_mode: InteractionMode
        """

        self._interaction_mode = interaction_mode

    @property
    def skip_app_resign(self):
        """Gets the skip_app_resign of this CreateRemoteAccessSessionRequest.


        :return: The skip_app_resign of this CreateRemoteAccessSessionRequest.
        :rtype: bool
        """
        return self._skip_app_resign

    @skip_app_resign.setter
    def skip_app_resign(self, skip_app_resign):
        """Sets the skip_app_resign of this CreateRemoteAccessSessionRequest.


        :param skip_app_resign: The skip_app_resign of this CreateRemoteAccessSessionRequest.
        :type skip_app_resign: bool
        """

        self._skip_app_resign = skip_app_resign
