# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total: int=None, passed: int=None, failed: int=None, warned: int=None, errored: int=None, stopped: int=None, skipped: int=None):
        """RunCounters - a model defined in OpenAPI

        :param total: The total of this RunCounters.
        :param passed: The passed of this RunCounters.
        :param failed: The failed of this RunCounters.
        :param warned: The warned of this RunCounters.
        :param errored: The errored of this RunCounters.
        :param stopped: The stopped of this RunCounters.
        :param skipped: The skipped of this RunCounters.
        """
        self.openapi_types = {
            'total': int,
            'passed': int,
            'failed': int,
            'warned': int,
            'errored': int,
            'stopped': int,
            'skipped': int
        }

        self.attribute_map = {
            'total': 'total',
            'passed': 'passed',
            'failed': 'failed',
            'warned': 'warned',
            'errored': 'errored',
            'stopped': 'stopped',
            'skipped': 'skipped'
        }

        self._total = total
        self._passed = passed
        self._failed = failed
        self._warned = warned
        self._errored = errored
        self._stopped = stopped
        self._skipped = skipped

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Run_counters of this RunCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this RunCounters.


        :return: The total of this RunCounters.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RunCounters.


        :param total: The total of this RunCounters.
        :type total: int
        """

        self._total = total

    @property
    def passed(self):
        """Gets the passed of this RunCounters.


        :return: The passed of this RunCounters.
        :rtype: int
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this RunCounters.


        :param passed: The passed of this RunCounters.
        :type passed: int
        """

        self._passed = passed

    @property
    def failed(self):
        """Gets the failed of this RunCounters.


        :return: The failed of this RunCounters.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this RunCounters.


        :param failed: The failed of this RunCounters.
        :type failed: int
        """

        self._failed = failed

    @property
    def warned(self):
        """Gets the warned of this RunCounters.


        :return: The warned of this RunCounters.
        :rtype: int
        """
        return self._warned

    @warned.setter
    def warned(self, warned):
        """Sets the warned of this RunCounters.


        :param warned: The warned of this RunCounters.
        :type warned: int
        """

        self._warned = warned

    @property
    def errored(self):
        """Gets the errored of this RunCounters.


        :return: The errored of this RunCounters.
        :rtype: int
        """
        return self._errored

    @errored.setter
    def errored(self, errored):
        """Sets the errored of this RunCounters.


        :param errored: The errored of this RunCounters.
        :type errored: int
        """

        self._errored = errored

    @property
    def stopped(self):
        """Gets the stopped of this RunCounters.


        :return: The stopped of this RunCounters.
        :rtype: int
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this RunCounters.


        :param stopped: The stopped of this RunCounters.
        :type stopped: int
        """

        self._stopped = stopped

    @property
    def skipped(self):
        """Gets the skipped of this RunCounters.


        :return: The skipped of this RunCounters.
        :rtype: int
        """
        return self._skipped

    @skipped.setter
    def skipped(self, skipped):
        """Sets the skipped of this RunCounters.


        :param skipped: The skipped of this RunCounters.
        :type skipped: int
        """

        self._skipped = skipped
