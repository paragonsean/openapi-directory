# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_pool_compatibility_result_device import DevicePoolCompatibilityResultDevice
from openapi_server import util


class DevicePoolCompatibilityResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: DevicePoolCompatibilityResultDevice=None, compatible: bool=None, incompatibility_messages: List=None):
        """DevicePoolCompatibilityResult - a model defined in OpenAPI

        :param device: The device of this DevicePoolCompatibilityResult.
        :param compatible: The compatible of this DevicePoolCompatibilityResult.
        :param incompatibility_messages: The incompatibility_messages of this DevicePoolCompatibilityResult.
        """
        self.openapi_types = {
            'device': DevicePoolCompatibilityResultDevice,
            'compatible': bool,
            'incompatibility_messages': List
        }

        self.attribute_map = {
            'device': 'device',
            'compatible': 'compatible',
            'incompatibility_messages': 'incompatibilityMessages'
        }

        self._device = device
        self._compatible = compatible
        self._incompatibility_messages = incompatibility_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DevicePoolCompatibilityResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DevicePoolCompatibilityResult of this DevicePoolCompatibilityResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this DevicePoolCompatibilityResult.


        :return: The device of this DevicePoolCompatibilityResult.
        :rtype: DevicePoolCompatibilityResultDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DevicePoolCompatibilityResult.


        :param device: The device of this DevicePoolCompatibilityResult.
        :type device: DevicePoolCompatibilityResultDevice
        """

        self._device = device

    @property
    def compatible(self):
        """Gets the compatible of this DevicePoolCompatibilityResult.


        :return: The compatible of this DevicePoolCompatibilityResult.
        :rtype: bool
        """
        return self._compatible

    @compatible.setter
    def compatible(self, compatible):
        """Sets the compatible of this DevicePoolCompatibilityResult.


        :param compatible: The compatible of this DevicePoolCompatibilityResult.
        :type compatible: bool
        """

        self._compatible = compatible

    @property
    def incompatibility_messages(self):
        """Gets the incompatibility_messages of this DevicePoolCompatibilityResult.


        :return: The incompatibility_messages of this DevicePoolCompatibilityResult.
        :rtype: List
        """
        return self._incompatibility_messages

    @incompatibility_messages.setter
    def incompatibility_messages(self, incompatibility_messages):
        """Sets the incompatibility_messages of this DevicePoolCompatibilityResult.


        :param incompatibility_messages: The incompatibility_messages of this DevicePoolCompatibilityResult.
        :type incompatibility_messages: List
        """

        self._incompatibility_messages = incompatibility_messages
