# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offering_transaction_cost import OfferingTransactionCost
from openapi_server.models.offering_transaction_offering_status import OfferingTransactionOfferingStatus
from openapi_server import util


class RenewOfferingResultOfferingTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offering_status: OfferingTransactionOfferingStatus=None, transaction_id: str=None, offering_promotion_id: str=None, created_on: datetime=None, cost: OfferingTransactionCost=None):
        """RenewOfferingResultOfferingTransaction - a model defined in OpenAPI

        :param offering_status: The offering_status of this RenewOfferingResultOfferingTransaction.
        :param transaction_id: The transaction_id of this RenewOfferingResultOfferingTransaction.
        :param offering_promotion_id: The offering_promotion_id of this RenewOfferingResultOfferingTransaction.
        :param created_on: The created_on of this RenewOfferingResultOfferingTransaction.
        :param cost: The cost of this RenewOfferingResultOfferingTransaction.
        """
        self.openapi_types = {
            'offering_status': OfferingTransactionOfferingStatus,
            'transaction_id': str,
            'offering_promotion_id': str,
            'created_on': datetime,
            'cost': OfferingTransactionCost
        }

        self.attribute_map = {
            'offering_status': 'offeringStatus',
            'transaction_id': 'transactionId',
            'offering_promotion_id': 'offeringPromotionId',
            'created_on': 'createdOn',
            'cost': 'cost'
        }

        self._offering_status = offering_status
        self._transaction_id = transaction_id
        self._offering_promotion_id = offering_promotion_id
        self._created_on = created_on
        self._cost = cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenewOfferingResultOfferingTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenewOfferingResult_offeringTransaction of this RenewOfferingResultOfferingTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offering_status(self):
        """Gets the offering_status of this RenewOfferingResultOfferingTransaction.


        :return: The offering_status of this RenewOfferingResultOfferingTransaction.
        :rtype: OfferingTransactionOfferingStatus
        """
        return self._offering_status

    @offering_status.setter
    def offering_status(self, offering_status):
        """Sets the offering_status of this RenewOfferingResultOfferingTransaction.


        :param offering_status: The offering_status of this RenewOfferingResultOfferingTransaction.
        :type offering_status: OfferingTransactionOfferingStatus
        """

        self._offering_status = offering_status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this RenewOfferingResultOfferingTransaction.


        :return: The transaction_id of this RenewOfferingResultOfferingTransaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this RenewOfferingResultOfferingTransaction.


        :param transaction_id: The transaction_id of this RenewOfferingResultOfferingTransaction.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def offering_promotion_id(self):
        """Gets the offering_promotion_id of this RenewOfferingResultOfferingTransaction.


        :return: The offering_promotion_id of this RenewOfferingResultOfferingTransaction.
        :rtype: str
        """
        return self._offering_promotion_id

    @offering_promotion_id.setter
    def offering_promotion_id(self, offering_promotion_id):
        """Sets the offering_promotion_id of this RenewOfferingResultOfferingTransaction.


        :param offering_promotion_id: The offering_promotion_id of this RenewOfferingResultOfferingTransaction.
        :type offering_promotion_id: str
        """

        self._offering_promotion_id = offering_promotion_id

    @property
    def created_on(self):
        """Gets the created_on of this RenewOfferingResultOfferingTransaction.


        :return: The created_on of this RenewOfferingResultOfferingTransaction.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this RenewOfferingResultOfferingTransaction.


        :param created_on: The created_on of this RenewOfferingResultOfferingTransaction.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def cost(self):
        """Gets the cost of this RenewOfferingResultOfferingTransaction.


        :return: The cost of this RenewOfferingResultOfferingTransaction.
        :rtype: OfferingTransactionCost
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this RenewOfferingResultOfferingTransaction.


        :param cost: The cost of this RenewOfferingResultOfferingTransaction.
        :type cost: OfferingTransactionCost
        """

        self._cost = cost
