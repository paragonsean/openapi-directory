/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestType::OAITestType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestType::OAITestType() {
    this->initializeModel();
}

OAITestType::~OAITestType() {}

void OAITestType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITestType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITestType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BUILTIN_FUZZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::BUILTIN_FUZZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BUILTIN_EXPLORER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::BUILTIN_EXPLORER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEB_PERFORMANCE_PROFILE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::WEB_PERFORMANCE_PROFILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_JUNIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_JAVA_JUNIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_TESTNG", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_JAVA_TESTNG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_PYTHON", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_PYTHON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_NODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_NODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_RUBY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_RUBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_JAVA_JUNIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_WEB_JAVA_JUNIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_JAVA_TESTNG", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_WEB_JAVA_TESTNG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_PYTHON", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_WEB_PYTHON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_NODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_WEB_NODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_RUBY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::APPIUM_WEB_RUBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CALABASH", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::CALABASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTRUMENTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::INSTRUMENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UIAUTOMATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::UIAUTOMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UIAUTOMATOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::UIAUTOMATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XCTEST", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::XCTEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XCTEST_UI", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::XCTEST_UI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOTE_ACCESS_RECORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::REMOTE_ACCESS_RECORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOTE_ACCESS_REPLAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITestType::REMOTE_ACCESS_REPLAY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITestType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITestType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITestType::BUILTIN_FUZZ:
            val = "BUILTIN_FUZZ";
            break;
        case eOAITestType::BUILTIN_EXPLORER:
            val = "BUILTIN_EXPLORER";
            break;
        case eOAITestType::WEB_PERFORMANCE_PROFILE:
            val = "WEB_PERFORMANCE_PROFILE";
            break;
        case eOAITestType::APPIUM_JAVA_JUNIT:
            val = "APPIUM_JAVA_JUNIT";
            break;
        case eOAITestType::APPIUM_JAVA_TESTNG:
            val = "APPIUM_JAVA_TESTNG";
            break;
        case eOAITestType::APPIUM_PYTHON:
            val = "APPIUM_PYTHON";
            break;
        case eOAITestType::APPIUM_NODE:
            val = "APPIUM_NODE";
            break;
        case eOAITestType::APPIUM_RUBY:
            val = "APPIUM_RUBY";
            break;
        case eOAITestType::APPIUM_WEB_JAVA_JUNIT:
            val = "APPIUM_WEB_JAVA_JUNIT";
            break;
        case eOAITestType::APPIUM_WEB_JAVA_TESTNG:
            val = "APPIUM_WEB_JAVA_TESTNG";
            break;
        case eOAITestType::APPIUM_WEB_PYTHON:
            val = "APPIUM_WEB_PYTHON";
            break;
        case eOAITestType::APPIUM_WEB_NODE:
            val = "APPIUM_WEB_NODE";
            break;
        case eOAITestType::APPIUM_WEB_RUBY:
            val = "APPIUM_WEB_RUBY";
            break;
        case eOAITestType::CALABASH:
            val = "CALABASH";
            break;
        case eOAITestType::INSTRUMENTATION:
            val = "INSTRUMENTATION";
            break;
        case eOAITestType::UIAUTOMATION:
            val = "UIAUTOMATION";
            break;
        case eOAITestType::UIAUTOMATOR:
            val = "UIAUTOMATOR";
            break;
        case eOAITestType::XCTEST:
            val = "XCTEST";
            break;
        case eOAITestType::XCTEST_UI:
            val = "XCTEST_UI";
            break;
        case eOAITestType::REMOTE_ACCESS_RECORD:
            val = "REMOTE_ACCESS_RECORD";
            break;
        case eOAITestType::REMOTE_ACCESS_REPLAY:
            val = "REMOTE_ACCESS_REPLAY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITestType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITestType::eOAITestType OAITestType::getValue() const {
    return m_value;
}

void OAITestType::setValue(const OAITestType::eOAITestType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITestType::isSet() const {
    
    return m_value_isSet;
}

bool OAITestType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
