/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceFilter.h
 *
 * &lt;p&gt;Represents a device filter used to select a set of devices to be included in a test run. This data structure is passed in as the &lt;code&gt;deviceSelectionConfiguration&lt;/code&gt; parameter to &lt;code&gt;ScheduleRun&lt;/code&gt;. For an example of the JSON request syntax, see &lt;a&gt;ScheduleRun&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;It is also passed in as the &lt;code&gt;filters&lt;/code&gt; parameter to &lt;code&gt;ListDevices&lt;/code&gt;. For an example of the JSON request syntax, see &lt;a&gt;ListDevices&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIDeviceFilter_H
#define OAIDeviceFilter_H

#include <QJsonObject>

#include "OAIDeviceFilterAttribute.h"
#include "OAIRuleOperator.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeviceFilter : public OAIObject {
public:
    OAIDeviceFilter();
    OAIDeviceFilter(QString json);
    ~OAIDeviceFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDeviceFilterAttribute getAttribute() const;
    void setAttribute(const OAIDeviceFilterAttribute &attribute);
    bool is_attribute_Set() const;
    bool is_attribute_Valid() const;

    OAIRuleOperator getROperator() const;
    void setROperator(const OAIRuleOperator &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDeviceFilterAttribute m_attribute;
    bool m_attribute_isSet;
    bool m_attribute_isValid;

    OAIRuleOperator m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceFilter)

#endif // OAIDeviceFilter_H
