/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUploadResult_upload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUploadResult_upload::OAICreateUploadResult_upload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUploadResult_upload::OAICreateUploadResult_upload() {
    this->initializeModel();
}

OAICreateUploadResult_upload::~OAICreateUploadResult_upload() {}

void OAICreateUploadResult_upload::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;
}

void OAICreateUploadResult_upload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUploadResult_upload::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;
}

QString OAICreateUploadResult_upload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUploadResult_upload::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    return obj;
}

QString OAICreateUploadResult_upload::getArn() const {
    return m_arn;
}
void OAICreateUploadResult_upload::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateUploadResult_upload::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateUploadResult_upload::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateUploadResult_upload::getName() const {
    return m_name;
}
void OAICreateUploadResult_upload::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateUploadResult_upload::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateUploadResult_upload::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAICreateUploadResult_upload::getCreated() const {
    return m_created;
}
void OAICreateUploadResult_upload::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICreateUploadResult_upload::is_created_Set() const{
    return m_created_isSet;
}

bool OAICreateUploadResult_upload::is_created_Valid() const{
    return m_created_isValid;
}

OAIUploadType OAICreateUploadResult_upload::getType() const {
    return m_type;
}
void OAICreateUploadResult_upload::setType(const OAIUploadType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateUploadResult_upload::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateUploadResult_upload::is_type_Valid() const{
    return m_type_isValid;
}

OAIUploadStatus OAICreateUploadResult_upload::getStatus() const {
    return m_status;
}
void OAICreateUploadResult_upload::setStatus(const OAIUploadStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateUploadResult_upload::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateUploadResult_upload::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateUploadResult_upload::getUrl() const {
    return m_url;
}
void OAICreateUploadResult_upload::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateUploadResult_upload::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateUploadResult_upload::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICreateUploadResult_upload::getMetadata() const {
    return m_metadata;
}
void OAICreateUploadResult_upload::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateUploadResult_upload::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateUploadResult_upload::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateUploadResult_upload::getContentType() const {
    return m_content_type;
}
void OAICreateUploadResult_upload::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICreateUploadResult_upload::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICreateUploadResult_upload::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAICreateUploadResult_upload::getMessage() const {
    return m_message;
}
void OAICreateUploadResult_upload::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateUploadResult_upload::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateUploadResult_upload::is_message_Valid() const{
    return m_message_isValid;
}

OAIUploadCategory OAICreateUploadResult_upload::getCategory() const {
    return m_category;
}
void OAICreateUploadResult_upload::setCategory(const OAIUploadCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICreateUploadResult_upload::is_category_Set() const{
    return m_category_isSet;
}

bool OAICreateUploadResult_upload::is_category_Valid() const{
    return m_category_isValid;
}

bool OAICreateUploadResult_upload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUploadResult_upload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
