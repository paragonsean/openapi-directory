/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOfferingResult_offeringTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOfferingResult_offeringTransaction::OAIPurchaseOfferingResult_offeringTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOfferingResult_offeringTransaction::OAIPurchaseOfferingResult_offeringTransaction() {
    this->initializeModel();
}

OAIPurchaseOfferingResult_offeringTransaction::~OAIPurchaseOfferingResult_offeringTransaction() {}

void OAIPurchaseOfferingResult_offeringTransaction::initializeModel() {

    m_offering_status_isSet = false;
    m_offering_status_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_offering_promotion_id_isSet = false;
    m_offering_promotion_id_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;
}

void OAIPurchaseOfferingResult_offeringTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOfferingResult_offeringTransaction::fromJsonObject(QJsonObject json) {

    m_offering_status_isValid = ::OpenAPI::fromJsonValue(m_offering_status, json[QString("offeringStatus")]);
    m_offering_status_isSet = !json[QString("offeringStatus")].isNull() && m_offering_status_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_offering_promotion_id_isValid = ::OpenAPI::fromJsonValue(m_offering_promotion_id, json[QString("offeringPromotionId")]);
    m_offering_promotion_id_isSet = !json[QString("offeringPromotionId")].isNull() && m_offering_promotion_id_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;
}

QString OAIPurchaseOfferingResult_offeringTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOfferingResult_offeringTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_offering_status.isSet()) {
        obj.insert(QString("offeringStatus"), ::OpenAPI::toJsonValue(m_offering_status));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_offering_promotion_id_isSet) {
        obj.insert(QString("offeringPromotionId"), ::OpenAPI::toJsonValue(m_offering_promotion_id));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_cost.isSet()) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    return obj;
}

OAIOfferingTransaction_offeringStatus OAIPurchaseOfferingResult_offeringTransaction::getOfferingStatus() const {
    return m_offering_status;
}
void OAIPurchaseOfferingResult_offeringTransaction::setOfferingStatus(const OAIOfferingTransaction_offeringStatus &offering_status) {
    m_offering_status = offering_status;
    m_offering_status_isSet = true;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_offering_status_Set() const{
    return m_offering_status_isSet;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_offering_status_Valid() const{
    return m_offering_status_isValid;
}

QString OAIPurchaseOfferingResult_offeringTransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAIPurchaseOfferingResult_offeringTransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIPurchaseOfferingResult_offeringTransaction::getOfferingPromotionId() const {
    return m_offering_promotion_id;
}
void OAIPurchaseOfferingResult_offeringTransaction::setOfferingPromotionId(const QString &offering_promotion_id) {
    m_offering_promotion_id = offering_promotion_id;
    m_offering_promotion_id_isSet = true;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_offering_promotion_id_Set() const{
    return m_offering_promotion_id_isSet;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_offering_promotion_id_Valid() const{
    return m_offering_promotion_id_isValid;
}

QDateTime OAIPurchaseOfferingResult_offeringTransaction::getCreatedOn() const {
    return m_created_on;
}
void OAIPurchaseOfferingResult_offeringTransaction::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIOfferingTransaction_cost OAIPurchaseOfferingResult_offeringTransaction::getCost() const {
    return m_cost;
}
void OAIPurchaseOfferingResult_offeringTransaction::setCost(const OAIOfferingTransaction_cost &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIPurchaseOfferingResult_offeringTransaction::is_cost_Valid() const{
    return m_cost_isValid;
}

bool OAIPurchaseOfferingResult_offeringTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offering_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_promotion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOfferingResult_offeringTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
