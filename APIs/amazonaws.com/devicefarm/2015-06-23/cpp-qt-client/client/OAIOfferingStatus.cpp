/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferingStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferingStatus::OAIOfferingStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferingStatus::OAIOfferingStatus() {
    this->initializeModel();
}

OAIOfferingStatus::~OAIOfferingStatus() {}

void OAIOfferingStatus::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_offering_isSet = false;
    m_offering_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_effective_on_isSet = false;
    m_effective_on_isValid = false;
}

void OAIOfferingStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferingStatus::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_offering_isValid = ::OpenAPI::fromJsonValue(m_offering, json[QString("offering")]);
    m_offering_isSet = !json[QString("offering")].isNull() && m_offering_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_effective_on_isValid = ::OpenAPI::fromJsonValue(m_effective_on, json[QString("effectiveOn")]);
    m_effective_on_isSet = !json[QString("effectiveOn")].isNull() && m_effective_on_isValid;
}

QString OAIOfferingStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferingStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_offering.isSet()) {
        obj.insert(QString("offering"), ::OpenAPI::toJsonValue(m_offering));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_effective_on_isSet) {
        obj.insert(QString("effectiveOn"), ::OpenAPI::toJsonValue(m_effective_on));
    }
    return obj;
}

OAIOfferingTransactionType OAIOfferingStatus::getType() const {
    return m_type;
}
void OAIOfferingStatus::setType(const OAIOfferingTransactionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOfferingStatus::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOfferingStatus::is_type_Valid() const{
    return m_type_isValid;
}

OAIOfferingStatus_offering OAIOfferingStatus::getOffering() const {
    return m_offering;
}
void OAIOfferingStatus::setOffering(const OAIOfferingStatus_offering &offering) {
    m_offering = offering;
    m_offering_isSet = true;
}

bool OAIOfferingStatus::is_offering_Set() const{
    return m_offering_isSet;
}

bool OAIOfferingStatus::is_offering_Valid() const{
    return m_offering_isValid;
}

qint32 OAIOfferingStatus::getQuantity() const {
    return m_quantity;
}
void OAIOfferingStatus::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOfferingStatus::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOfferingStatus::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QDateTime OAIOfferingStatus::getEffectiveOn() const {
    return m_effective_on;
}
void OAIOfferingStatus::setEffectiveOn(const QDateTime &effective_on) {
    m_effective_on = effective_on;
    m_effective_on_isSet = true;
}

bool OAIOfferingStatus::is_effective_on_Set() const{
    return m_effective_on_isSet;
}

bool OAIOfferingStatus::is_effective_on_Valid() const{
    return m_effective_on_isValid;
}

bool OAIOfferingStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferingStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
