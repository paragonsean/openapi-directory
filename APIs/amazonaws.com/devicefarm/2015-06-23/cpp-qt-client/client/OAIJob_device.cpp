/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob_device.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob_device::OAIJob_device(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob_device::OAIJob_device() {
    this->initializeModel();
}

OAIJob_device::~OAIJob_device() {}

void OAIJob_device::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_heap_size_isSet = false;
    m_heap_size_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_radio_isSet = false;
    m_radio_isValid = false;

    m_remote_access_enabled_isSet = false;
    m_remote_access_enabled_isValid = false;

    m_remote_debug_enabled_isSet = false;
    m_remote_debug_enabled_isValid = false;

    m_fleet_type_isSet = false;
    m_fleet_type_isValid = false;

    m_fleet_name_isSet = false;
    m_fleet_name_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;
}

void OAIJob_device::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob_device::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_heap_size_isValid = ::OpenAPI::fromJsonValue(m_heap_size, json[QString("heapSize")]);
    m_heap_size_isSet = !json[QString("heapSize")].isNull() && m_heap_size_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_radio_isValid = ::OpenAPI::fromJsonValue(m_radio, json[QString("radio")]);
    m_radio_isSet = !json[QString("radio")].isNull() && m_radio_isValid;

    m_remote_access_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_access_enabled, json[QString("remoteAccessEnabled")]);
    m_remote_access_enabled_isSet = !json[QString("remoteAccessEnabled")].isNull() && m_remote_access_enabled_isValid;

    m_remote_debug_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_debug_enabled, json[QString("remoteDebugEnabled")]);
    m_remote_debug_enabled_isSet = !json[QString("remoteDebugEnabled")].isNull() && m_remote_debug_enabled_isValid;

    m_fleet_type_isValid = ::OpenAPI::fromJsonValue(m_fleet_type, json[QString("fleetType")]);
    m_fleet_type_isSet = !json[QString("fleetType")].isNull() && m_fleet_type_isValid;

    m_fleet_name_isValid = ::OpenAPI::fromJsonValue(m_fleet_name, json[QString("fleetName")]);
    m_fleet_name_isSet = !json[QString("fleetName")].isNull() && m_fleet_name_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;
}

QString OAIJob_device::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob_device::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_form_factor.isSet()) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_cpu.isSet()) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_heap_size_isSet) {
        obj.insert(QString("heapSize"), ::OpenAPI::toJsonValue(m_heap_size));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_radio_isSet) {
        obj.insert(QString("radio"), ::OpenAPI::toJsonValue(m_radio));
    }
    if (m_remote_access_enabled_isSet) {
        obj.insert(QString("remoteAccessEnabled"), ::OpenAPI::toJsonValue(m_remote_access_enabled));
    }
    if (m_remote_debug_enabled_isSet) {
        obj.insert(QString("remoteDebugEnabled"), ::OpenAPI::toJsonValue(m_remote_debug_enabled));
    }
    if (m_fleet_type_isSet) {
        obj.insert(QString("fleetType"), ::OpenAPI::toJsonValue(m_fleet_type));
    }
    if (m_fleet_name_isSet) {
        obj.insert(QString("fleetName"), ::OpenAPI::toJsonValue(m_fleet_name));
    }
    if (m_instances.isSet()) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_availability.isSet()) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    return obj;
}

QString OAIJob_device::getArn() const {
    return m_arn;
}
void OAIJob_device::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIJob_device::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIJob_device::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIJob_device::getName() const {
    return m_name;
}
void OAIJob_device::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob_device::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob_device::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJob_device::getManufacturer() const {
    return m_manufacturer;
}
void OAIJob_device::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIJob_device::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIJob_device::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIJob_device::getModel() const {
    return m_model;
}
void OAIJob_device::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIJob_device::is_model_Set() const{
    return m_model_isSet;
}

bool OAIJob_device::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIJob_device::getModelId() const {
    return m_model_id;
}
void OAIJob_device::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIJob_device::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIJob_device::is_model_id_Valid() const{
    return m_model_id_isValid;
}

OAIDeviceFormFactor OAIJob_device::getFormFactor() const {
    return m_form_factor;
}
void OAIJob_device::setFormFactor(const OAIDeviceFormFactor &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAIJob_device::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAIJob_device::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

OAIDevicePlatform OAIJob_device::getPlatform() const {
    return m_platform;
}
void OAIJob_device::setPlatform(const OAIDevicePlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIJob_device::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIJob_device::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIJob_device::getOs() const {
    return m_os;
}
void OAIJob_device::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIJob_device::is_os_Set() const{
    return m_os_isSet;
}

bool OAIJob_device::is_os_Valid() const{
    return m_os_isValid;
}

OAIDevice_cpu OAIJob_device::getCpu() const {
    return m_cpu;
}
void OAIJob_device::setCpu(const OAIDevice_cpu &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIJob_device::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIJob_device::is_cpu_Valid() const{
    return m_cpu_isValid;
}

OAIDevice_resolution OAIJob_device::getResolution() const {
    return m_resolution;
}
void OAIJob_device::setResolution(const OAIDevice_resolution &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIJob_device::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIJob_device::is_resolution_Valid() const{
    return m_resolution_isValid;
}

qint32 OAIJob_device::getHeapSize() const {
    return m_heap_size;
}
void OAIJob_device::setHeapSize(const qint32 &heap_size) {
    m_heap_size = heap_size;
    m_heap_size_isSet = true;
}

bool OAIJob_device::is_heap_size_Set() const{
    return m_heap_size_isSet;
}

bool OAIJob_device::is_heap_size_Valid() const{
    return m_heap_size_isValid;
}

qint32 OAIJob_device::getMemory() const {
    return m_memory;
}
void OAIJob_device::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIJob_device::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIJob_device::is_memory_Valid() const{
    return m_memory_isValid;
}

QString OAIJob_device::getImage() const {
    return m_image;
}
void OAIJob_device::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIJob_device::is_image_Set() const{
    return m_image_isSet;
}

bool OAIJob_device::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIJob_device::getCarrier() const {
    return m_carrier;
}
void OAIJob_device::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIJob_device::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIJob_device::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAIJob_device::getRadio() const {
    return m_radio;
}
void OAIJob_device::setRadio(const QString &radio) {
    m_radio = radio;
    m_radio_isSet = true;
}

bool OAIJob_device::is_radio_Set() const{
    return m_radio_isSet;
}

bool OAIJob_device::is_radio_Valid() const{
    return m_radio_isValid;
}

bool OAIJob_device::getRemoteAccessEnabled() const {
    return m_remote_access_enabled;
}
void OAIJob_device::setRemoteAccessEnabled(const bool &remote_access_enabled) {
    m_remote_access_enabled = remote_access_enabled;
    m_remote_access_enabled_isSet = true;
}

bool OAIJob_device::is_remote_access_enabled_Set() const{
    return m_remote_access_enabled_isSet;
}

bool OAIJob_device::is_remote_access_enabled_Valid() const{
    return m_remote_access_enabled_isValid;
}

bool OAIJob_device::getRemoteDebugEnabled() const {
    return m_remote_debug_enabled;
}
void OAIJob_device::setRemoteDebugEnabled(const bool &remote_debug_enabled) {
    m_remote_debug_enabled = remote_debug_enabled;
    m_remote_debug_enabled_isSet = true;
}

bool OAIJob_device::is_remote_debug_enabled_Set() const{
    return m_remote_debug_enabled_isSet;
}

bool OAIJob_device::is_remote_debug_enabled_Valid() const{
    return m_remote_debug_enabled_isValid;
}

QString OAIJob_device::getFleetType() const {
    return m_fleet_type;
}
void OAIJob_device::setFleetType(const QString &fleet_type) {
    m_fleet_type = fleet_type;
    m_fleet_type_isSet = true;
}

bool OAIJob_device::is_fleet_type_Set() const{
    return m_fleet_type_isSet;
}

bool OAIJob_device::is_fleet_type_Valid() const{
    return m_fleet_type_isValid;
}

QString OAIJob_device::getFleetName() const {
    return m_fleet_name;
}
void OAIJob_device::setFleetName(const QString &fleet_name) {
    m_fleet_name = fleet_name;
    m_fleet_name_isSet = true;
}

bool OAIJob_device::is_fleet_name_Set() const{
    return m_fleet_name_isSet;
}

bool OAIJob_device::is_fleet_name_Valid() const{
    return m_fleet_name_isValid;
}

QList OAIJob_device::getInstances() const {
    return m_instances;
}
void OAIJob_device::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIJob_device::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIJob_device::is_instances_Valid() const{
    return m_instances_isValid;
}

OAIDeviceAvailability OAIJob_device::getAvailability() const {
    return m_availability;
}
void OAIJob_device::setAvailability(const OAIDeviceAvailability &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIJob_device::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIJob_device::is_availability_Valid() const{
    return m_availability_isValid;
}

bool OAIJob_device::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_factor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heap_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_access_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_debug_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob_device::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
