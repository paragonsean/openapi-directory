/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleRunRequest_deviceSelectionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleRunRequest_deviceSelectionConfiguration::OAIScheduleRunRequest_deviceSelectionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleRunRequest_deviceSelectionConfiguration::OAIScheduleRunRequest_deviceSelectionConfiguration() {
    this->initializeModel();
}

OAIScheduleRunRequest_deviceSelectionConfiguration::~OAIScheduleRunRequest_deviceSelectionConfiguration() {}

void OAIScheduleRunRequest_deviceSelectionConfiguration::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_devices_isSet = false;
    m_max_devices_isValid = false;
}

void OAIScheduleRunRequest_deviceSelectionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleRunRequest_deviceSelectionConfiguration::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_max_devices_isValid = ::OpenAPI::fromJsonValue(m_max_devices, json[QString("maxDevices")]);
    m_max_devices_isSet = !json[QString("maxDevices")].isNull() && m_max_devices_isValid;
}

QString OAIScheduleRunRequest_deviceSelectionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleRunRequest_deviceSelectionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_devices_isSet) {
        obj.insert(QString("maxDevices"), ::OpenAPI::toJsonValue(m_max_devices));
    }
    return obj;
}

QList OAIScheduleRunRequest_deviceSelectionConfiguration::getFilters() const {
    return m_filters;
}
void OAIScheduleRunRequest_deviceSelectionConfiguration::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIScheduleRunRequest_deviceSelectionConfiguration::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIScheduleRunRequest_deviceSelectionConfiguration::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIScheduleRunRequest_deviceSelectionConfiguration::getMaxDevices() const {
    return m_max_devices;
}
void OAIScheduleRunRequest_deviceSelectionConfiguration::setMaxDevices(const qint32 &max_devices) {
    m_max_devices = max_devices;
    m_max_devices_isSet = true;
}

bool OAIScheduleRunRequest_deviceSelectionConfiguration::is_max_devices_Set() const{
    return m_max_devices_isSet;
}

bool OAIScheduleRunRequest_deviceSelectionConfiguration::is_max_devices_Valid() const{
    return m_max_devices_isValid;
}

bool OAIScheduleRunRequest_deviceSelectionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_devices_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleRunRequest_deviceSelectionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && m_max_devices_isValid && true;
}

} // namespace OpenAPI
