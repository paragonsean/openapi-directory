/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTestGridSessionsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTestGridSessionsResult::OAIListTestGridSessionsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTestGridSessionsResult::OAIListTestGridSessionsResult() {
    this->initializeModel();
}

OAIListTestGridSessionsResult::~OAIListTestGridSessionsResult() {}

void OAIListTestGridSessionsResult::initializeModel() {

    m_test_grid_sessions_isSet = false;
    m_test_grid_sessions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTestGridSessionsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTestGridSessionsResult::fromJsonObject(QJsonObject json) {

    m_test_grid_sessions_isValid = ::OpenAPI::fromJsonValue(m_test_grid_sessions, json[QString("testGridSessions")]);
    m_test_grid_sessions_isSet = !json[QString("testGridSessions")].isNull() && m_test_grid_sessions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTestGridSessionsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTestGridSessionsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_test_grid_sessions.isSet()) {
        obj.insert(QString("testGridSessions"), ::OpenAPI::toJsonValue(m_test_grid_sessions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListTestGridSessionsResult::getTestGridSessions() const {
    return m_test_grid_sessions;
}
void OAIListTestGridSessionsResult::setTestGridSessions(const QList &test_grid_sessions) {
    m_test_grid_sessions = test_grid_sessions;
    m_test_grid_sessions_isSet = true;
}

bool OAIListTestGridSessionsResult::is_test_grid_sessions_Set() const{
    return m_test_grid_sessions_isSet;
}

bool OAIListTestGridSessionsResult::is_test_grid_sessions_Valid() const{
    return m_test_grid_sessions_isValid;
}

QString OAIListTestGridSessionsResult::getNextToken() const {
    return m_next_token;
}
void OAIListTestGridSessionsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTestGridSessionsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTestGridSessionsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTestGridSessionsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_grid_sessions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTestGridSessionsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
