/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInstanceProfileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInstanceProfileRequest::OAICreateInstanceProfileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInstanceProfileRequest::OAICreateInstanceProfileRequest() {
    this->initializeModel();
}

OAICreateInstanceProfileRequest::~OAICreateInstanceProfileRequest() {}

void OAICreateInstanceProfileRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_package_cleanup_isSet = false;
    m_package_cleanup_isValid = false;

    m_exclude_app_packages_from_cleanup_isSet = false;
    m_exclude_app_packages_from_cleanup_isValid = false;

    m_reboot_after_use_isSet = false;
    m_reboot_after_use_isValid = false;
}

void OAICreateInstanceProfileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInstanceProfileRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_package_cleanup_isValid = ::OpenAPI::fromJsonValue(m_package_cleanup, json[QString("packageCleanup")]);
    m_package_cleanup_isSet = !json[QString("packageCleanup")].isNull() && m_package_cleanup_isValid;

    m_exclude_app_packages_from_cleanup_isValid = ::OpenAPI::fromJsonValue(m_exclude_app_packages_from_cleanup, json[QString("excludeAppPackagesFromCleanup")]);
    m_exclude_app_packages_from_cleanup_isSet = !json[QString("excludeAppPackagesFromCleanup")].isNull() && m_exclude_app_packages_from_cleanup_isValid;

    m_reboot_after_use_isValid = ::OpenAPI::fromJsonValue(m_reboot_after_use, json[QString("rebootAfterUse")]);
    m_reboot_after_use_isSet = !json[QString("rebootAfterUse")].isNull() && m_reboot_after_use_isValid;
}

QString OAICreateInstanceProfileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInstanceProfileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_package_cleanup_isSet) {
        obj.insert(QString("packageCleanup"), ::OpenAPI::toJsonValue(m_package_cleanup));
    }
    if (m_exclude_app_packages_from_cleanup.isSet()) {
        obj.insert(QString("excludeAppPackagesFromCleanup"), ::OpenAPI::toJsonValue(m_exclude_app_packages_from_cleanup));
    }
    if (m_reboot_after_use_isSet) {
        obj.insert(QString("rebootAfterUse"), ::OpenAPI::toJsonValue(m_reboot_after_use));
    }
    return obj;
}

QString OAICreateInstanceProfileRequest::getName() const {
    return m_name;
}
void OAICreateInstanceProfileRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateInstanceProfileRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateInstanceProfileRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateInstanceProfileRequest::getDescription() const {
    return m_description;
}
void OAICreateInstanceProfileRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateInstanceProfileRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateInstanceProfileRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateInstanceProfileRequest::getPackageCleanup() const {
    return m_package_cleanup;
}
void OAICreateInstanceProfileRequest::setPackageCleanup(const bool &package_cleanup) {
    m_package_cleanup = package_cleanup;
    m_package_cleanup_isSet = true;
}

bool OAICreateInstanceProfileRequest::is_package_cleanup_Set() const{
    return m_package_cleanup_isSet;
}

bool OAICreateInstanceProfileRequest::is_package_cleanup_Valid() const{
    return m_package_cleanup_isValid;
}

QList OAICreateInstanceProfileRequest::getExcludeAppPackagesFromCleanup() const {
    return m_exclude_app_packages_from_cleanup;
}
void OAICreateInstanceProfileRequest::setExcludeAppPackagesFromCleanup(const QList &exclude_app_packages_from_cleanup) {
    m_exclude_app_packages_from_cleanup = exclude_app_packages_from_cleanup;
    m_exclude_app_packages_from_cleanup_isSet = true;
}

bool OAICreateInstanceProfileRequest::is_exclude_app_packages_from_cleanup_Set() const{
    return m_exclude_app_packages_from_cleanup_isSet;
}

bool OAICreateInstanceProfileRequest::is_exclude_app_packages_from_cleanup_Valid() const{
    return m_exclude_app_packages_from_cleanup_isValid;
}

bool OAICreateInstanceProfileRequest::getRebootAfterUse() const {
    return m_reboot_after_use;
}
void OAICreateInstanceProfileRequest::setRebootAfterUse(const bool &reboot_after_use) {
    m_reboot_after_use = reboot_after_use;
    m_reboot_after_use_isSet = true;
}

bool OAICreateInstanceProfileRequest::is_reboot_after_use_Set() const{
    return m_reboot_after_use_isSet;
}

bool OAICreateInstanceProfileRequest::is_reboot_after_use_Valid() const{
    return m_reboot_after_use_isValid;
}

bool OAICreateInstanceProfileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_cleanup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_app_packages_from_cleanup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_after_use_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInstanceProfileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
