/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetRunResult_run.h
 *
 * 
 */

#ifndef OAIGetRunResult_run_H
#define OAIGetRunResult_run_H

#include <QJsonObject>

#include "OAIBillingMethod.h"
#include "OAICreateProjectRequest_vpcConfig.h"
#include "OAIDevicePlatform.h"
#include "OAIExecutionResult.h"
#include "OAIExecutionResultCode.h"
#include "OAIExecutionStatus.h"
#include "OAIRun_counters.h"
#include "OAIRun_customerArtifactPaths.h"
#include "OAIRun_deviceMinutes.h"
#include "OAIRun_deviceSelectionResult.h"
#include "OAIRun_networkProfile.h"
#include "OAIScheduleRunConfiguration_location.h"
#include "OAIScheduleRunConfiguration_radios.h"
#include "OAITestType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRun_counters;
class OAIRun_deviceMinutes;
class OAIRun_networkProfile;
class OAIScheduleRunConfiguration_radios;
class OAIScheduleRunConfiguration_location;
class OAIRun_customerArtifactPaths;
class OAIRun_deviceSelectionResult;
class OAICreateProjectRequest_vpcConfig;

class OAIGetRunResult_run : public OAIObject {
public:
    OAIGetRunResult_run();
    OAIGetRunResult_run(QString json);
    ~OAIGetRunResult_run() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAITestType getType() const;
    void setType(const OAITestType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIDevicePlatform getPlatform() const;
    void setPlatform(const OAIDevicePlatform &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIExecutionStatus getStatus() const;
    void setStatus(const OAIExecutionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIExecutionResult getResult() const;
    void setResult(const OAIExecutionResult &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    QDateTime getStarted() const;
    void setStarted(const QDateTime &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    QDateTime getStopped() const;
    void setStopped(const QDateTime &stopped);
    bool is_stopped_Set() const;
    bool is_stopped_Valid() const;

    OAIRun_counters getCounters() const;
    void setCounters(const OAIRun_counters &counters);
    bool is_counters_Set() const;
    bool is_counters_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    qint32 getTotalJobs() const;
    void setTotalJobs(const qint32 &total_jobs);
    bool is_total_jobs_Set() const;
    bool is_total_jobs_Valid() const;

    qint32 getCompletedJobs() const;
    void setCompletedJobs(const qint32 &completed_jobs);
    bool is_completed_jobs_Set() const;
    bool is_completed_jobs_Valid() const;

    OAIBillingMethod getBillingMethod() const;
    void setBillingMethod(const OAIBillingMethod &billing_method);
    bool is_billing_method_Set() const;
    bool is_billing_method_Valid() const;

    OAIRun_deviceMinutes getDeviceMinutes() const;
    void setDeviceMinutes(const OAIRun_deviceMinutes &device_minutes);
    bool is_device_minutes_Set() const;
    bool is_device_minutes_Valid() const;

    OAIRun_networkProfile getNetworkProfile() const;
    void setNetworkProfile(const OAIRun_networkProfile &network_profile);
    bool is_network_profile_Set() const;
    bool is_network_profile_Valid() const;

    QString getParsingResultUrl() const;
    void setParsingResultUrl(const QString &parsing_result_url);
    bool is_parsing_result_url_Set() const;
    bool is_parsing_result_url_Valid() const;

    OAIExecutionResultCode getResultCode() const;
    void setResultCode(const OAIExecutionResultCode &result_code);
    bool is_result_code_Set() const;
    bool is_result_code_Valid() const;

    qint32 getSeed() const;
    void setSeed(const qint32 &seed);
    bool is_seed_Set() const;
    bool is_seed_Valid() const;

    QString getAppUpload() const;
    void setAppUpload(const QString &app_upload);
    bool is_app_upload_Set() const;
    bool is_app_upload_Valid() const;

    qint32 getEventCount() const;
    void setEventCount(const qint32 &event_count);
    bool is_event_count_Set() const;
    bool is_event_count_Valid() const;

    qint32 getJobTimeoutMinutes() const;
    void setJobTimeoutMinutes(const qint32 &job_timeout_minutes);
    bool is_job_timeout_minutes_Set() const;
    bool is_job_timeout_minutes_Valid() const;

    QString getDevicePoolArn() const;
    void setDevicePoolArn(const QString &device_pool_arn);
    bool is_device_pool_arn_Set() const;
    bool is_device_pool_arn_Valid() const;

    QString getLocale() const;
    void setLocale(const QString &locale);
    bool is_locale_Set() const;
    bool is_locale_Valid() const;

    OAIScheduleRunConfiguration_radios getRadios() const;
    void setRadios(const OAIScheduleRunConfiguration_radios &radios);
    bool is_radios_Set() const;
    bool is_radios_Valid() const;

    OAIScheduleRunConfiguration_location getLocation() const;
    void setLocation(const OAIScheduleRunConfiguration_location &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    OAIRun_customerArtifactPaths getCustomerArtifactPaths() const;
    void setCustomerArtifactPaths(const OAIRun_customerArtifactPaths &customer_artifact_paths);
    bool is_customer_artifact_paths_Set() const;
    bool is_customer_artifact_paths_Valid() const;

    QString getWebUrl() const;
    void setWebUrl(const QString &web_url);
    bool is_web_url_Set() const;
    bool is_web_url_Valid() const;

    bool getSkipAppResign() const;
    void setSkipAppResign(const bool &skip_app_resign);
    bool is_skip_app_resign_Set() const;
    bool is_skip_app_resign_Valid() const;

    QString getTestSpecArn() const;
    void setTestSpecArn(const QString &test_spec_arn);
    bool is_test_spec_arn_Set() const;
    bool is_test_spec_arn_Valid() const;

    OAIRun_deviceSelectionResult getDeviceSelectionResult() const;
    void setDeviceSelectionResult(const OAIRun_deviceSelectionResult &device_selection_result);
    bool is_device_selection_result_Set() const;
    bool is_device_selection_result_Valid() const;

    OAICreateProjectRequest_vpcConfig getVpcConfig() const;
    void setVpcConfig(const OAICreateProjectRequest_vpcConfig &vpc_config);
    bool is_vpc_config_Set() const;
    bool is_vpc_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAITestType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIDevicePlatform m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIExecutionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIExecutionResult m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    QDateTime m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    QDateTime m_stopped;
    bool m_stopped_isSet;
    bool m_stopped_isValid;

    OAIRun_counters m_counters;
    bool m_counters_isSet;
    bool m_counters_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    qint32 m_total_jobs;
    bool m_total_jobs_isSet;
    bool m_total_jobs_isValid;

    qint32 m_completed_jobs;
    bool m_completed_jobs_isSet;
    bool m_completed_jobs_isValid;

    OAIBillingMethod m_billing_method;
    bool m_billing_method_isSet;
    bool m_billing_method_isValid;

    OAIRun_deviceMinutes m_device_minutes;
    bool m_device_minutes_isSet;
    bool m_device_minutes_isValid;

    OAIRun_networkProfile m_network_profile;
    bool m_network_profile_isSet;
    bool m_network_profile_isValid;

    QString m_parsing_result_url;
    bool m_parsing_result_url_isSet;
    bool m_parsing_result_url_isValid;

    OAIExecutionResultCode m_result_code;
    bool m_result_code_isSet;
    bool m_result_code_isValid;

    qint32 m_seed;
    bool m_seed_isSet;
    bool m_seed_isValid;

    QString m_app_upload;
    bool m_app_upload_isSet;
    bool m_app_upload_isValid;

    qint32 m_event_count;
    bool m_event_count_isSet;
    bool m_event_count_isValid;

    qint32 m_job_timeout_minutes;
    bool m_job_timeout_minutes_isSet;
    bool m_job_timeout_minutes_isValid;

    QString m_device_pool_arn;
    bool m_device_pool_arn_isSet;
    bool m_device_pool_arn_isValid;

    QString m_locale;
    bool m_locale_isSet;
    bool m_locale_isValid;

    OAIScheduleRunConfiguration_radios m_radios;
    bool m_radios_isSet;
    bool m_radios_isValid;

    OAIScheduleRunConfiguration_location m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    OAIRun_customerArtifactPaths m_customer_artifact_paths;
    bool m_customer_artifact_paths_isSet;
    bool m_customer_artifact_paths_isValid;

    QString m_web_url;
    bool m_web_url_isSet;
    bool m_web_url_isValid;

    bool m_skip_app_resign;
    bool m_skip_app_resign_isSet;
    bool m_skip_app_resign_isValid;

    QString m_test_spec_arn;
    bool m_test_spec_arn_isSet;
    bool m_test_spec_arn_isValid;

    OAIRun_deviceSelectionResult m_device_selection_result;
    bool m_device_selection_result_isSet;
    bool m_device_selection_result_isValid;

    OAICreateProjectRequest_vpcConfig m_vpc_config;
    bool m_vpc_config_isSet;
    bool m_vpc_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetRunResult_run)

#endif // OAIGetRunResult_run_H
