/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleRunConfiguration_customerArtifactPaths.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleRunConfiguration_customerArtifactPaths::OAIScheduleRunConfiguration_customerArtifactPaths(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleRunConfiguration_customerArtifactPaths::OAIScheduleRunConfiguration_customerArtifactPaths() {
    this->initializeModel();
}

OAIScheduleRunConfiguration_customerArtifactPaths::~OAIScheduleRunConfiguration_customerArtifactPaths() {}

void OAIScheduleRunConfiguration_customerArtifactPaths::initializeModel() {

    m_ios_paths_isSet = false;
    m_ios_paths_isValid = false;

    m_android_paths_isSet = false;
    m_android_paths_isValid = false;

    m_device_host_paths_isSet = false;
    m_device_host_paths_isValid = false;
}

void OAIScheduleRunConfiguration_customerArtifactPaths::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleRunConfiguration_customerArtifactPaths::fromJsonObject(QJsonObject json) {

    m_ios_paths_isValid = ::OpenAPI::fromJsonValue(m_ios_paths, json[QString("iosPaths")]);
    m_ios_paths_isSet = !json[QString("iosPaths")].isNull() && m_ios_paths_isValid;

    m_android_paths_isValid = ::OpenAPI::fromJsonValue(m_android_paths, json[QString("androidPaths")]);
    m_android_paths_isSet = !json[QString("androidPaths")].isNull() && m_android_paths_isValid;

    m_device_host_paths_isValid = ::OpenAPI::fromJsonValue(m_device_host_paths, json[QString("deviceHostPaths")]);
    m_device_host_paths_isSet = !json[QString("deviceHostPaths")].isNull() && m_device_host_paths_isValid;
}

QString OAIScheduleRunConfiguration_customerArtifactPaths::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleRunConfiguration_customerArtifactPaths::asJsonObject() const {
    QJsonObject obj;
    if (m_ios_paths.isSet()) {
        obj.insert(QString("iosPaths"), ::OpenAPI::toJsonValue(m_ios_paths));
    }
    if (m_android_paths.isSet()) {
        obj.insert(QString("androidPaths"), ::OpenAPI::toJsonValue(m_android_paths));
    }
    if (m_device_host_paths.isSet()) {
        obj.insert(QString("deviceHostPaths"), ::OpenAPI::toJsonValue(m_device_host_paths));
    }
    return obj;
}

QList OAIScheduleRunConfiguration_customerArtifactPaths::getIosPaths() const {
    return m_ios_paths;
}
void OAIScheduleRunConfiguration_customerArtifactPaths::setIosPaths(const QList &ios_paths) {
    m_ios_paths = ios_paths;
    m_ios_paths_isSet = true;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::is_ios_paths_Set() const{
    return m_ios_paths_isSet;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::is_ios_paths_Valid() const{
    return m_ios_paths_isValid;
}

QList OAIScheduleRunConfiguration_customerArtifactPaths::getAndroidPaths() const {
    return m_android_paths;
}
void OAIScheduleRunConfiguration_customerArtifactPaths::setAndroidPaths(const QList &android_paths) {
    m_android_paths = android_paths;
    m_android_paths_isSet = true;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::is_android_paths_Set() const{
    return m_android_paths_isSet;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::is_android_paths_Valid() const{
    return m_android_paths_isValid;
}

QList OAIScheduleRunConfiguration_customerArtifactPaths::getDeviceHostPaths() const {
    return m_device_host_paths;
}
void OAIScheduleRunConfiguration_customerArtifactPaths::setDeviceHostPaths(const QList &device_host_paths) {
    m_device_host_paths = device_host_paths;
    m_device_host_paths_isSet = true;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::is_device_host_paths_Set() const{
    return m_device_host_paths_isSet;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::is_device_host_paths_Valid() const{
    return m_device_host_paths_isValid;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ios_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_host_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleRunConfiguration_customerArtifactPaths::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
