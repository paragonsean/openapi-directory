/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffering::OAIOffering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffering::OAIOffering() {
    this->initializeModel();
}

OAIOffering::~OAIOffering() {}

void OAIOffering::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_recurring_charges_isSet = false;
    m_recurring_charges_isValid = false;
}

void OAIOffering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffering::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_recurring_charges_isValid = ::OpenAPI::fromJsonValue(m_recurring_charges, json[QString("recurringCharges")]);
    m_recurring_charges_isSet = !json[QString("recurringCharges")].isNull() && m_recurring_charges_isValid;
}

QString OAIOffering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffering::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_recurring_charges.isSet()) {
        obj.insert(QString("recurringCharges"), ::OpenAPI::toJsonValue(m_recurring_charges));
    }
    return obj;
}

QString OAIOffering::getId() const {
    return m_id;
}
void OAIOffering::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOffering::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOffering::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOffering::getDescription() const {
    return m_description;
}
void OAIOffering::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOffering::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOffering::is_description_Valid() const{
    return m_description_isValid;
}

OAIOfferingType OAIOffering::getType() const {
    return m_type;
}
void OAIOffering::setType(const OAIOfferingType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOffering::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOffering::is_type_Valid() const{
    return m_type_isValid;
}

OAIDevicePlatform OAIOffering::getPlatform() const {
    return m_platform;
}
void OAIOffering::setPlatform(const OAIDevicePlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIOffering::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIOffering::is_platform_Valid() const{
    return m_platform_isValid;
}

QList OAIOffering::getRecurringCharges() const {
    return m_recurring_charges;
}
void OAIOffering::setRecurringCharges(const QList &recurring_charges) {
    m_recurring_charges = recurring_charges;
    m_recurring_charges_isSet = true;
}

bool OAIOffering::is_recurring_charges_Set() const{
    return m_recurring_charges_isSet;
}

bool OAIOffering::is_recurring_charges_Valid() const{
    return m_recurring_charges_isValid;
}

bool OAIOffering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
