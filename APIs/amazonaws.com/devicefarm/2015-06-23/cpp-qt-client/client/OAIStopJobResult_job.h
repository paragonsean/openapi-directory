/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStopJobResult_job.h
 *
 * 
 */

#ifndef OAIStopJobResult_job_H
#define OAIStopJobResult_job_H

#include <QJsonObject>

#include "OAIExecutionResult.h"
#include "OAIExecutionStatus.h"
#include "OAIJob_counters.h"
#include "OAIJob_device.h"
#include "OAIJob_deviceMinutes.h"
#include "OAITestType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJob_counters;
class OAIJob_device;
class OAIJob_deviceMinutes;

class OAIStopJobResult_job : public OAIObject {
public:
    OAIStopJobResult_job();
    OAIStopJobResult_job(QString json);
    ~OAIStopJobResult_job() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAITestType getType() const;
    void setType(const OAITestType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIExecutionStatus getStatus() const;
    void setStatus(const OAIExecutionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIExecutionResult getResult() const;
    void setResult(const OAIExecutionResult &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    QDateTime getStarted() const;
    void setStarted(const QDateTime &started);
    bool is_started_Set() const;
    bool is_started_Valid() const;

    QDateTime getStopped() const;
    void setStopped(const QDateTime &stopped);
    bool is_stopped_Set() const;
    bool is_stopped_Valid() const;

    OAIJob_counters getCounters() const;
    void setCounters(const OAIJob_counters &counters);
    bool is_counters_Set() const;
    bool is_counters_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    OAIJob_device getDevice() const;
    void setDevice(const OAIJob_device &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    QString getInstanceArn() const;
    void setInstanceArn(const QString &instance_arn);
    bool is_instance_arn_Set() const;
    bool is_instance_arn_Valid() const;

    OAIJob_deviceMinutes getDeviceMinutes() const;
    void setDeviceMinutes(const OAIJob_deviceMinutes &device_minutes);
    bool is_device_minutes_Set() const;
    bool is_device_minutes_Valid() const;

    QString getVideoEndpoint() const;
    void setVideoEndpoint(const QString &video_endpoint);
    bool is_video_endpoint_Set() const;
    bool is_video_endpoint_Valid() const;

    bool getVideoCapture() const;
    void setVideoCapture(const bool &video_capture);
    bool is_video_capture_Set() const;
    bool is_video_capture_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAITestType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIExecutionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIExecutionResult m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    QDateTime m_started;
    bool m_started_isSet;
    bool m_started_isValid;

    QDateTime m_stopped;
    bool m_stopped_isSet;
    bool m_stopped_isValid;

    OAIJob_counters m_counters;
    bool m_counters_isSet;
    bool m_counters_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    OAIJob_device m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    QString m_instance_arn;
    bool m_instance_arn_isSet;
    bool m_instance_arn_isValid;

    OAIJob_deviceMinutes m_device_minutes;
    bool m_device_minutes_isSet;
    bool m_device_minutes_isValid;

    QString m_video_endpoint;
    bool m_video_endpoint_isSet;
    bool m_video_endpoint_isValid;

    bool m_video_capture;
    bool m_video_capture_isSet;
    bool m_video_capture_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStopJobResult_job)

#endif // OAIStopJobResult_job_H
