/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceProfile.h
 *
 * Represents the instance profile.
 */

#ifndef OAIInstanceProfile_H
#define OAIInstanceProfile_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInstanceProfile : public OAIObject {
public:
    OAIInstanceProfile();
    OAIInstanceProfile(QString json);
    ~OAIInstanceProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    bool getPackageCleanup() const;
    void setPackageCleanup(const bool &package_cleanup);
    bool is_package_cleanup_Set() const;
    bool is_package_cleanup_Valid() const;

    QList getExcludeAppPackagesFromCleanup() const;
    void setExcludeAppPackagesFromCleanup(const QList &exclude_app_packages_from_cleanup);
    bool is_exclude_app_packages_from_cleanup_Set() const;
    bool is_exclude_app_packages_from_cleanup_Valid() const;

    bool getRebootAfterUse() const;
    void setRebootAfterUse(const bool &reboot_after_use);
    bool is_reboot_after_use_Set() const;
    bool is_reboot_after_use_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    bool m_package_cleanup;
    bool m_package_cleanup_isSet;
    bool m_package_cleanup_isValid;

    QList m_exclude_app_packages_from_cleanup;
    bool m_exclude_app_packages_from_cleanup_isSet;
    bool m_exclude_app_packages_from_cleanup_isValid;

    bool m_reboot_after_use;
    bool m_reboot_after_use_isSet;
    bool m_reboot_after_use_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceProfile)

#endif // OAIInstanceProfile_H
