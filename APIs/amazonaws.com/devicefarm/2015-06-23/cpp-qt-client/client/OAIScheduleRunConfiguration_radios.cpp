/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleRunConfiguration_radios.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleRunConfiguration_radios::OAIScheduleRunConfiguration_radios(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleRunConfiguration_radios::OAIScheduleRunConfiguration_radios() {
    this->initializeModel();
}

OAIScheduleRunConfiguration_radios::~OAIScheduleRunConfiguration_radios() {}

void OAIScheduleRunConfiguration_radios::initializeModel() {

    m_wifi_isSet = false;
    m_wifi_isValid = false;

    m_bluetooth_isSet = false;
    m_bluetooth_isValid = false;

    m_nfc_isSet = false;
    m_nfc_isValid = false;

    m_gps_isSet = false;
    m_gps_isValid = false;
}

void OAIScheduleRunConfiguration_radios::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleRunConfiguration_radios::fromJsonObject(QJsonObject json) {

    m_wifi_isValid = ::OpenAPI::fromJsonValue(m_wifi, json[QString("wifi")]);
    m_wifi_isSet = !json[QString("wifi")].isNull() && m_wifi_isValid;

    m_bluetooth_isValid = ::OpenAPI::fromJsonValue(m_bluetooth, json[QString("bluetooth")]);
    m_bluetooth_isSet = !json[QString("bluetooth")].isNull() && m_bluetooth_isValid;

    m_nfc_isValid = ::OpenAPI::fromJsonValue(m_nfc, json[QString("nfc")]);
    m_nfc_isSet = !json[QString("nfc")].isNull() && m_nfc_isValid;

    m_gps_isValid = ::OpenAPI::fromJsonValue(m_gps, json[QString("gps")]);
    m_gps_isSet = !json[QString("gps")].isNull() && m_gps_isValid;
}

QString OAIScheduleRunConfiguration_radios::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleRunConfiguration_radios::asJsonObject() const {
    QJsonObject obj;
    if (m_wifi_isSet) {
        obj.insert(QString("wifi"), ::OpenAPI::toJsonValue(m_wifi));
    }
    if (m_bluetooth_isSet) {
        obj.insert(QString("bluetooth"), ::OpenAPI::toJsonValue(m_bluetooth));
    }
    if (m_nfc_isSet) {
        obj.insert(QString("nfc"), ::OpenAPI::toJsonValue(m_nfc));
    }
    if (m_gps_isSet) {
        obj.insert(QString("gps"), ::OpenAPI::toJsonValue(m_gps));
    }
    return obj;
}

bool OAIScheduleRunConfiguration_radios::getWifi() const {
    return m_wifi;
}
void OAIScheduleRunConfiguration_radios::setWifi(const bool &wifi) {
    m_wifi = wifi;
    m_wifi_isSet = true;
}

bool OAIScheduleRunConfiguration_radios::is_wifi_Set() const{
    return m_wifi_isSet;
}

bool OAIScheduleRunConfiguration_radios::is_wifi_Valid() const{
    return m_wifi_isValid;
}

bool OAIScheduleRunConfiguration_radios::getBluetooth() const {
    return m_bluetooth;
}
void OAIScheduleRunConfiguration_radios::setBluetooth(const bool &bluetooth) {
    m_bluetooth = bluetooth;
    m_bluetooth_isSet = true;
}

bool OAIScheduleRunConfiguration_radios::is_bluetooth_Set() const{
    return m_bluetooth_isSet;
}

bool OAIScheduleRunConfiguration_radios::is_bluetooth_Valid() const{
    return m_bluetooth_isValid;
}

bool OAIScheduleRunConfiguration_radios::getNfc() const {
    return m_nfc;
}
void OAIScheduleRunConfiguration_radios::setNfc(const bool &nfc) {
    m_nfc = nfc;
    m_nfc_isSet = true;
}

bool OAIScheduleRunConfiguration_radios::is_nfc_Set() const{
    return m_nfc_isSet;
}

bool OAIScheduleRunConfiguration_radios::is_nfc_Valid() const{
    return m_nfc_isValid;
}

bool OAIScheduleRunConfiguration_radios::getGps() const {
    return m_gps;
}
void OAIScheduleRunConfiguration_radios::setGps(const bool &gps) {
    m_gps = gps;
    m_gps_isSet = true;
}

bool OAIScheduleRunConfiguration_radios::is_gps_Set() const{
    return m_gps_isSet;
}

bool OAIScheduleRunConfiguration_radios::is_gps_Valid() const{
    return m_gps_isValid;
}

bool OAIScheduleRunConfiguration_radios::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_wifi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bluetooth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleRunConfiguration_radios::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
