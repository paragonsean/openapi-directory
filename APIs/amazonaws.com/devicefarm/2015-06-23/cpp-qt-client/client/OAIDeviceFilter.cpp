/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceFilter::OAIDeviceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceFilter::OAIDeviceFilter() {
    this->initializeModel();
}

OAIDeviceFilter::~OAIDeviceFilter() {}

void OAIDeviceFilter::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIDeviceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceFilter::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("attribute")]);
    m_attribute_isSet = !json[QString("attribute")].isNull() && m_attribute_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIDeviceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute.isSet()) {
        obj.insert(QString("attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAIDeviceFilterAttribute OAIDeviceFilter::getAttribute() const {
    return m_attribute;
}
void OAIDeviceFilter::setAttribute(const OAIDeviceFilterAttribute &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAIDeviceFilter::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAIDeviceFilter::is_attribute_Valid() const{
    return m_attribute_isValid;
}

OAIRuleOperator OAIDeviceFilter::getROperator() const {
    return m_r_operator;
}
void OAIDeviceFilter::setROperator(const OAIRuleOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIDeviceFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIDeviceFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QList OAIDeviceFilter::getValues() const {
    return m_values;
}
void OAIDeviceFilter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIDeviceFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIDeviceFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIDeviceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_isValid && m_r_operator_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
