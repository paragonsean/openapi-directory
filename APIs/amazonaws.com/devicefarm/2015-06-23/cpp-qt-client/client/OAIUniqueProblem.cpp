/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniqueProblem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniqueProblem::OAIUniqueProblem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniqueProblem::OAIUniqueProblem() {
    this->initializeModel();
}

OAIUniqueProblem::~OAIUniqueProblem() {}

void OAIUniqueProblem::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_problems_isSet = false;
    m_problems_isValid = false;
}

void OAIUniqueProblem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniqueProblem::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_problems_isValid = ::OpenAPI::fromJsonValue(m_problems, json[QString("problems")]);
    m_problems_isSet = !json[QString("problems")].isNull() && m_problems_isValid;
}

QString OAIUniqueProblem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniqueProblem::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_problems.isSet()) {
        obj.insert(QString("problems"), ::OpenAPI::toJsonValue(m_problems));
    }
    return obj;
}

QString OAIUniqueProblem::getMessage() const {
    return m_message;
}
void OAIUniqueProblem::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUniqueProblem::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUniqueProblem::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIUniqueProblem::getProblems() const {
    return m_problems;
}
void OAIUniqueProblem::setProblems(const QList &problems) {
    m_problems = problems;
    m_problems_isSet = true;
}

bool OAIUniqueProblem::is_problems_Set() const{
    return m_problems_isSet;
}

bool OAIUniqueProblem::is_problems_Valid() const{
    return m_problems_isValid;
}

bool OAIUniqueProblem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problems.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniqueProblem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
