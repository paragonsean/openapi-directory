/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice_cpu.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice_cpu::OAIDevice_cpu(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice_cpu::OAIDevice_cpu() {
    this->initializeModel();
}

OAIDevice_cpu::~OAIDevice_cpu() {}

void OAIDevice_cpu::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_clock_isSet = false;
    m_clock_isValid = false;
}

void OAIDevice_cpu::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice_cpu::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("clock")]);
    m_clock_isSet = !json[QString("clock")].isNull() && m_clock_isValid;
}

QString OAIDevice_cpu::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice_cpu::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_clock_isSet) {
        obj.insert(QString("clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    return obj;
}

QString OAIDevice_cpu::getFrequency() const {
    return m_frequency;
}
void OAIDevice_cpu::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIDevice_cpu::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIDevice_cpu::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIDevice_cpu::getArchitecture() const {
    return m_architecture;
}
void OAIDevice_cpu::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIDevice_cpu::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIDevice_cpu::is_architecture_Valid() const{
    return m_architecture_isValid;
}

double OAIDevice_cpu::getClock() const {
    return m_clock;
}
void OAIDevice_cpu::setClock(const double &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAIDevice_cpu::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAIDevice_cpu::is_clock_Valid() const{
    return m_clock_isValid;
}

bool OAIDevice_cpu::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice_cpu::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
