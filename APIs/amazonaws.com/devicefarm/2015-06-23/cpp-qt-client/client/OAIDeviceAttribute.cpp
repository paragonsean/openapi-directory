/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceAttribute::OAIDeviceAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceAttribute::OAIDeviceAttribute() {
    this->initializeModel();
}

OAIDeviceAttribute::~OAIDeviceAttribute() {}

void OAIDeviceAttribute::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeviceAttribute::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeviceAttribute::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ARN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::ARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PLATFORM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::PLATFORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORM_FACTOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::FORM_FACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MANUFACTURER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::MANUFACTURER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOTE_ACCESS_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::REMOTE_ACCESS_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOTE_DEBUG_ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::REMOTE_DEBUG_ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::APPIUM_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTANCE_ARN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::INSTANCE_ARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTANCE_LABELS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::INSTANCE_LABELS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLEET_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::FLEET_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OS_VERSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::OS_VERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MODEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::MODEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVAILABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAttribute::AVAILABILITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeviceAttribute::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeviceAttribute::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeviceAttribute::ARN:
            val = "ARN";
            break;
        case eOAIDeviceAttribute::PLATFORM:
            val = "PLATFORM";
            break;
        case eOAIDeviceAttribute::FORM_FACTOR:
            val = "FORM_FACTOR";
            break;
        case eOAIDeviceAttribute::MANUFACTURER:
            val = "MANUFACTURER";
            break;
        case eOAIDeviceAttribute::REMOTE_ACCESS_ENABLED:
            val = "REMOTE_ACCESS_ENABLED";
            break;
        case eOAIDeviceAttribute::REMOTE_DEBUG_ENABLED:
            val = "REMOTE_DEBUG_ENABLED";
            break;
        case eOAIDeviceAttribute::APPIUM_VERSION:
            val = "APPIUM_VERSION";
            break;
        case eOAIDeviceAttribute::INSTANCE_ARN:
            val = "INSTANCE_ARN";
            break;
        case eOAIDeviceAttribute::INSTANCE_LABELS:
            val = "INSTANCE_LABELS";
            break;
        case eOAIDeviceAttribute::FLEET_TYPE:
            val = "FLEET_TYPE";
            break;
        case eOAIDeviceAttribute::OS_VERSION:
            val = "OS_VERSION";
            break;
        case eOAIDeviceAttribute::MODEL:
            val = "MODEL";
            break;
        case eOAIDeviceAttribute::AVAILABILITY:
            val = "AVAILABILITY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeviceAttribute::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeviceAttribute::eOAIDeviceAttribute OAIDeviceAttribute::getValue() const {
    return m_value;
}

void OAIDeviceAttribute::setValue(const OAIDeviceAttribute::eOAIDeviceAttribute& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeviceAttribute::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeviceAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
