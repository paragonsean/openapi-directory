/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProblem.h
 *
 * Represents a specific warning or failure.
 */

#ifndef OAIProblem_H
#define OAIProblem_H

#include <QJsonObject>

#include "OAIExecutionResult.h"
#include "OAIProblem_device.h"
#include "OAIProblem_job.h"
#include "OAIProblem_run.h"
#include "OAIProblem_suite.h"
#include "OAIProblem_test.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProblem_run;
class OAIProblem_job;
class OAIProblem_suite;
class OAIProblem_test;
class OAIProblem_device;

class OAIProblem : public OAIObject {
public:
    OAIProblem();
    OAIProblem(QString json);
    ~OAIProblem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIProblem_run getRun() const;
    void setRun(const OAIProblem_run &run);
    bool is_run_Set() const;
    bool is_run_Valid() const;

    OAIProblem_job getJob() const;
    void setJob(const OAIProblem_job &job);
    bool is_job_Set() const;
    bool is_job_Valid() const;

    OAIProblem_suite getSuite() const;
    void setSuite(const OAIProblem_suite &suite);
    bool is_suite_Set() const;
    bool is_suite_Valid() const;

    OAIProblem_test getTest() const;
    void setTest(const OAIProblem_test &test);
    bool is_test_Set() const;
    bool is_test_Valid() const;

    OAIProblem_device getDevice() const;
    void setDevice(const OAIProblem_device &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    OAIExecutionResult getResult() const;
    void setResult(const OAIExecutionResult &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIProblem_run m_run;
    bool m_run_isSet;
    bool m_run_isValid;

    OAIProblem_job m_job;
    bool m_job_isSet;
    bool m_job_isValid;

    OAIProblem_suite m_suite;
    bool m_suite_isSet;
    bool m_suite_isValid;

    OAIProblem_test m_test;
    bool m_test_isSet;
    bool m_test_isValid;

    OAIProblem_device m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    OAIExecutionResult m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProblem)

#endif // OAIProblem_H
