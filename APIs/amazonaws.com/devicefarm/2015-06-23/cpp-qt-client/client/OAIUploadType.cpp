/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadType::OAIUploadType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadType::OAIUploadType() {
    this->initializeModel();
}

OAIUploadType::~OAIUploadType() {}

void OAIUploadType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUploadType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUploadType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ANDROID_APP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::ANDROID_APP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IOS_APP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::IOS_APP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEB_APP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::WEB_APP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXTERNAL_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::EXTERNAL_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_JUNIT_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_JAVA_JUNIT_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_TESTNG_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_JAVA_TESTNG_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_PYTHON_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_PYTHON_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_NODE_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_NODE_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_RUBY_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_RUBY_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_PYTHON_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_PYTHON_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_NODE_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_NODE_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_RUBY_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_RUBY_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CALABASH_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::CALABASH_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTRUMENTATION_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::INSTRUMENTATION_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UIAUTOMATION_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::UIAUTOMATION_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UIAUTOMATOR_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::UIAUTOMATOR_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XCTEST_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::XCTEST_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XCTEST_UI_TEST_PACKAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::XCTEST_UI_TEST_PACKAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_JUNIT_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_JAVA_JUNIT_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_TESTNG_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_JAVA_TESTNG_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_PYTHON_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_PYTHON_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_NODE_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_NODE_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_RUBY_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_RUBY_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_JAVA_JUNIT_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_JAVA_JUNIT_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_JAVA_TESTNG_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_JAVA_TESTNG_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_PYTHON_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_PYTHON_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_NODE_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_NODE_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_WEB_RUBY_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::APPIUM_WEB_RUBY_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTRUMENTATION_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::INSTRUMENTATION_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XCTEST_UI_TEST_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUploadType::XCTEST_UI_TEST_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUploadType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUploadType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUploadType::ANDROID_APP:
            val = "ANDROID_APP";
            break;
        case eOAIUploadType::IOS_APP:
            val = "IOS_APP";
            break;
        case eOAIUploadType::WEB_APP:
            val = "WEB_APP";
            break;
        case eOAIUploadType::EXTERNAL_DATA:
            val = "EXTERNAL_DATA";
            break;
        case eOAIUploadType::APPIUM_JAVA_JUNIT_TEST_PACKAGE:
            val = "APPIUM_JAVA_JUNIT_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_JAVA_TESTNG_TEST_PACKAGE:
            val = "APPIUM_JAVA_TESTNG_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_PYTHON_TEST_PACKAGE:
            val = "APPIUM_PYTHON_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_NODE_TEST_PACKAGE:
            val = "APPIUM_NODE_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_RUBY_TEST_PACKAGE:
            val = "APPIUM_RUBY_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE:
            val = "APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE:
            val = "APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_WEB_PYTHON_TEST_PACKAGE:
            val = "APPIUM_WEB_PYTHON_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_WEB_NODE_TEST_PACKAGE:
            val = "APPIUM_WEB_NODE_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_WEB_RUBY_TEST_PACKAGE:
            val = "APPIUM_WEB_RUBY_TEST_PACKAGE";
            break;
        case eOAIUploadType::CALABASH_TEST_PACKAGE:
            val = "CALABASH_TEST_PACKAGE";
            break;
        case eOAIUploadType::INSTRUMENTATION_TEST_PACKAGE:
            val = "INSTRUMENTATION_TEST_PACKAGE";
            break;
        case eOAIUploadType::UIAUTOMATION_TEST_PACKAGE:
            val = "UIAUTOMATION_TEST_PACKAGE";
            break;
        case eOAIUploadType::UIAUTOMATOR_TEST_PACKAGE:
            val = "UIAUTOMATOR_TEST_PACKAGE";
            break;
        case eOAIUploadType::XCTEST_TEST_PACKAGE:
            val = "XCTEST_TEST_PACKAGE";
            break;
        case eOAIUploadType::XCTEST_UI_TEST_PACKAGE:
            val = "XCTEST_UI_TEST_PACKAGE";
            break;
        case eOAIUploadType::APPIUM_JAVA_JUNIT_TEST_SPEC:
            val = "APPIUM_JAVA_JUNIT_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_JAVA_TESTNG_TEST_SPEC:
            val = "APPIUM_JAVA_TESTNG_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_PYTHON_TEST_SPEC:
            val = "APPIUM_PYTHON_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_NODE_TEST_SPEC:
            val = "APPIUM_NODE_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_RUBY_TEST_SPEC:
            val = "APPIUM_RUBY_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_WEB_JAVA_JUNIT_TEST_SPEC:
            val = "APPIUM_WEB_JAVA_JUNIT_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_WEB_JAVA_TESTNG_TEST_SPEC:
            val = "APPIUM_WEB_JAVA_TESTNG_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_WEB_PYTHON_TEST_SPEC:
            val = "APPIUM_WEB_PYTHON_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_WEB_NODE_TEST_SPEC:
            val = "APPIUM_WEB_NODE_TEST_SPEC";
            break;
        case eOAIUploadType::APPIUM_WEB_RUBY_TEST_SPEC:
            val = "APPIUM_WEB_RUBY_TEST_SPEC";
            break;
        case eOAIUploadType::INSTRUMENTATION_TEST_SPEC:
            val = "INSTRUMENTATION_TEST_SPEC";
            break;
        case eOAIUploadType::XCTEST_UI_TEST_SPEC:
            val = "XCTEST_UI_TEST_SPEC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUploadType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUploadType::eOAIUploadType OAIUploadType::getValue() const {
    return m_value;
}

void OAIUploadType::setValue(const OAIUploadType::eOAIUploadType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUploadType::isSet() const {
    
    return m_value_isSet;
}

bool OAIUploadType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
