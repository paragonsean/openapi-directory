/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRemoteAccessSessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRemoteAccessSessionRequest::OAICreateRemoteAccessSessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRemoteAccessSessionRequest::OAICreateRemoteAccessSessionRequest() {
    this->initializeModel();
}

OAICreateRemoteAccessSessionRequest::~OAICreateRemoteAccessSessionRequest() {}

void OAICreateRemoteAccessSessionRequest::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_device_arn_isSet = false;
    m_device_arn_isValid = false;

    m_instance_arn_isSet = false;
    m_instance_arn_isValid = false;

    m_ssh_public_key_isSet = false;
    m_ssh_public_key_isValid = false;

    m_remote_debug_enabled_isSet = false;
    m_remote_debug_enabled_isValid = false;

    m_remote_record_enabled_isSet = false;
    m_remote_record_enabled_isValid = false;

    m_remote_record_app_arn_isSet = false;
    m_remote_record_app_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_interaction_mode_isSet = false;
    m_interaction_mode_isValid = false;

    m_skip_app_resign_isSet = false;
    m_skip_app_resign_isValid = false;
}

void OAICreateRemoteAccessSessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRemoteAccessSessionRequest::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("projectArn")]);
    m_project_arn_isSet = !json[QString("projectArn")].isNull() && m_project_arn_isValid;

    m_device_arn_isValid = ::OpenAPI::fromJsonValue(m_device_arn, json[QString("deviceArn")]);
    m_device_arn_isSet = !json[QString("deviceArn")].isNull() && m_device_arn_isValid;

    m_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_arn, json[QString("instanceArn")]);
    m_instance_arn_isSet = !json[QString("instanceArn")].isNull() && m_instance_arn_isValid;

    m_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key, json[QString("sshPublicKey")]);
    m_ssh_public_key_isSet = !json[QString("sshPublicKey")].isNull() && m_ssh_public_key_isValid;

    m_remote_debug_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_debug_enabled, json[QString("remoteDebugEnabled")]);
    m_remote_debug_enabled_isSet = !json[QString("remoteDebugEnabled")].isNull() && m_remote_debug_enabled_isValid;

    m_remote_record_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_record_enabled, json[QString("remoteRecordEnabled")]);
    m_remote_record_enabled_isSet = !json[QString("remoteRecordEnabled")].isNull() && m_remote_record_enabled_isValid;

    m_remote_record_app_arn_isValid = ::OpenAPI::fromJsonValue(m_remote_record_app_arn, json[QString("remoteRecordAppArn")]);
    m_remote_record_app_arn_isSet = !json[QString("remoteRecordAppArn")].isNull() && m_remote_record_app_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_interaction_mode_isValid = ::OpenAPI::fromJsonValue(m_interaction_mode, json[QString("interactionMode")]);
    m_interaction_mode_isSet = !json[QString("interactionMode")].isNull() && m_interaction_mode_isValid;

    m_skip_app_resign_isValid = ::OpenAPI::fromJsonValue(m_skip_app_resign, json[QString("skipAppResign")]);
    m_skip_app_resign_isSet = !json[QString("skipAppResign")].isNull() && m_skip_app_resign_isValid;
}

QString OAICreateRemoteAccessSessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRemoteAccessSessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("projectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_device_arn_isSet) {
        obj.insert(QString("deviceArn"), ::OpenAPI::toJsonValue(m_device_arn));
    }
    if (m_instance_arn_isSet) {
        obj.insert(QString("instanceArn"), ::OpenAPI::toJsonValue(m_instance_arn));
    }
    if (m_ssh_public_key_isSet) {
        obj.insert(QString("sshPublicKey"), ::OpenAPI::toJsonValue(m_ssh_public_key));
    }
    if (m_remote_debug_enabled_isSet) {
        obj.insert(QString("remoteDebugEnabled"), ::OpenAPI::toJsonValue(m_remote_debug_enabled));
    }
    if (m_remote_record_enabled_isSet) {
        obj.insert(QString("remoteRecordEnabled"), ::OpenAPI::toJsonValue(m_remote_record_enabled));
    }
    if (m_remote_record_app_arn_isSet) {
        obj.insert(QString("remoteRecordAppArn"), ::OpenAPI::toJsonValue(m_remote_record_app_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_interaction_mode.isSet()) {
        obj.insert(QString("interactionMode"), ::OpenAPI::toJsonValue(m_interaction_mode));
    }
    if (m_skip_app_resign_isSet) {
        obj.insert(QString("skipAppResign"), ::OpenAPI::toJsonValue(m_skip_app_resign));
    }
    return obj;
}

QString OAICreateRemoteAccessSessionRequest::getProjectArn() const {
    return m_project_arn;
}
void OAICreateRemoteAccessSessionRequest::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

QString OAICreateRemoteAccessSessionRequest::getDeviceArn() const {
    return m_device_arn;
}
void OAICreateRemoteAccessSessionRequest::setDeviceArn(const QString &device_arn) {
    m_device_arn = device_arn;
    m_device_arn_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_device_arn_Set() const{
    return m_device_arn_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_device_arn_Valid() const{
    return m_device_arn_isValid;
}

QString OAICreateRemoteAccessSessionRequest::getInstanceArn() const {
    return m_instance_arn;
}
void OAICreateRemoteAccessSessionRequest::setInstanceArn(const QString &instance_arn) {
    m_instance_arn = instance_arn;
    m_instance_arn_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_instance_arn_Set() const{
    return m_instance_arn_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_instance_arn_Valid() const{
    return m_instance_arn_isValid;
}

QString OAICreateRemoteAccessSessionRequest::getSshPublicKey() const {
    return m_ssh_public_key;
}
void OAICreateRemoteAccessSessionRequest::setSshPublicKey(const QString &ssh_public_key) {
    m_ssh_public_key = ssh_public_key;
    m_ssh_public_key_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_ssh_public_key_Set() const{
    return m_ssh_public_key_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_ssh_public_key_Valid() const{
    return m_ssh_public_key_isValid;
}

bool OAICreateRemoteAccessSessionRequest::getRemoteDebugEnabled() const {
    return m_remote_debug_enabled;
}
void OAICreateRemoteAccessSessionRequest::setRemoteDebugEnabled(const bool &remote_debug_enabled) {
    m_remote_debug_enabled = remote_debug_enabled;
    m_remote_debug_enabled_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_remote_debug_enabled_Set() const{
    return m_remote_debug_enabled_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_remote_debug_enabled_Valid() const{
    return m_remote_debug_enabled_isValid;
}

bool OAICreateRemoteAccessSessionRequest::getRemoteRecordEnabled() const {
    return m_remote_record_enabled;
}
void OAICreateRemoteAccessSessionRequest::setRemoteRecordEnabled(const bool &remote_record_enabled) {
    m_remote_record_enabled = remote_record_enabled;
    m_remote_record_enabled_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_remote_record_enabled_Set() const{
    return m_remote_record_enabled_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_remote_record_enabled_Valid() const{
    return m_remote_record_enabled_isValid;
}

QString OAICreateRemoteAccessSessionRequest::getRemoteRecordAppArn() const {
    return m_remote_record_app_arn;
}
void OAICreateRemoteAccessSessionRequest::setRemoteRecordAppArn(const QString &remote_record_app_arn) {
    m_remote_record_app_arn = remote_record_app_arn;
    m_remote_record_app_arn_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_remote_record_app_arn_Set() const{
    return m_remote_record_app_arn_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_remote_record_app_arn_Valid() const{
    return m_remote_record_app_arn_isValid;
}

QString OAICreateRemoteAccessSessionRequest::getName() const {
    return m_name;
}
void OAICreateRemoteAccessSessionRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRemoteAccessSessionRequest::getClientId() const {
    return m_client_id;
}
void OAICreateRemoteAccessSessionRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAICreateRemoteAccessSessionRequest_configuration OAICreateRemoteAccessSessionRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateRemoteAccessSessionRequest::setConfiguration(const OAICreateRemoteAccessSessionRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAIInteractionMode OAICreateRemoteAccessSessionRequest::getInteractionMode() const {
    return m_interaction_mode;
}
void OAICreateRemoteAccessSessionRequest::setInteractionMode(const OAIInteractionMode &interaction_mode) {
    m_interaction_mode = interaction_mode;
    m_interaction_mode_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_interaction_mode_Set() const{
    return m_interaction_mode_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_interaction_mode_Valid() const{
    return m_interaction_mode_isValid;
}

bool OAICreateRemoteAccessSessionRequest::getSkipAppResign() const {
    return m_skip_app_resign;
}
void OAICreateRemoteAccessSessionRequest::setSkipAppResign(const bool &skip_app_resign) {
    m_skip_app_resign = skip_app_resign;
    m_skip_app_resign_isSet = true;
}

bool OAICreateRemoteAccessSessionRequest::is_skip_app_resign_Set() const{
    return m_skip_app_resign_isSet;
}

bool OAICreateRemoteAccessSessionRequest::is_skip_app_resign_Valid() const{
    return m_skip_app_resign_isValid;
}

bool OAICreateRemoteAccessSessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_debug_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_record_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_record_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_app_resign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRemoteAccessSessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_arn_isValid && m_device_arn_isValid && true;
}

} // namespace OpenAPI
