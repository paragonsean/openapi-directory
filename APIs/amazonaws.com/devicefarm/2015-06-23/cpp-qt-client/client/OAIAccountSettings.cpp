/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSettings::OAIAccountSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSettings::OAIAccountSettings() {
    this->initializeModel();
}

OAIAccountSettings::~OAIAccountSettings() {}

void OAIAccountSettings::initializeModel() {

    m_aws_account_number_isSet = false;
    m_aws_account_number_isValid = false;

    m_unmetered_devices_isSet = false;
    m_unmetered_devices_isValid = false;

    m_unmetered_remote_access_devices_isSet = false;
    m_unmetered_remote_access_devices_isValid = false;

    m_max_job_timeout_minutes_isSet = false;
    m_max_job_timeout_minutes_isValid = false;

    m_trial_minutes_isSet = false;
    m_trial_minutes_isValid = false;

    m_max_slots_isSet = false;
    m_max_slots_isValid = false;

    m_default_job_timeout_minutes_isSet = false;
    m_default_job_timeout_minutes_isValid = false;

    m_skip_app_resign_isSet = false;
    m_skip_app_resign_isValid = false;
}

void OAIAccountSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSettings::fromJsonObject(QJsonObject json) {

    m_aws_account_number_isValid = ::OpenAPI::fromJsonValue(m_aws_account_number, json[QString("awsAccountNumber")]);
    m_aws_account_number_isSet = !json[QString("awsAccountNumber")].isNull() && m_aws_account_number_isValid;

    m_unmetered_devices_isValid = ::OpenAPI::fromJsonValue(m_unmetered_devices, json[QString("unmeteredDevices")]);
    m_unmetered_devices_isSet = !json[QString("unmeteredDevices")].isNull() && m_unmetered_devices_isValid;

    m_unmetered_remote_access_devices_isValid = ::OpenAPI::fromJsonValue(m_unmetered_remote_access_devices, json[QString("unmeteredRemoteAccessDevices")]);
    m_unmetered_remote_access_devices_isSet = !json[QString("unmeteredRemoteAccessDevices")].isNull() && m_unmetered_remote_access_devices_isValid;

    m_max_job_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_max_job_timeout_minutes, json[QString("maxJobTimeoutMinutes")]);
    m_max_job_timeout_minutes_isSet = !json[QString("maxJobTimeoutMinutes")].isNull() && m_max_job_timeout_minutes_isValid;

    m_trial_minutes_isValid = ::OpenAPI::fromJsonValue(m_trial_minutes, json[QString("trialMinutes")]);
    m_trial_minutes_isSet = !json[QString("trialMinutes")].isNull() && m_trial_minutes_isValid;

    m_max_slots_isValid = ::OpenAPI::fromJsonValue(m_max_slots, json[QString("maxSlots")]);
    m_max_slots_isSet = !json[QString("maxSlots")].isNull() && m_max_slots_isValid;

    m_default_job_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_default_job_timeout_minutes, json[QString("defaultJobTimeoutMinutes")]);
    m_default_job_timeout_minutes_isSet = !json[QString("defaultJobTimeoutMinutes")].isNull() && m_default_job_timeout_minutes_isValid;

    m_skip_app_resign_isValid = ::OpenAPI::fromJsonValue(m_skip_app_resign, json[QString("skipAppResign")]);
    m_skip_app_resign_isSet = !json[QString("skipAppResign")].isNull() && m_skip_app_resign_isValid;
}

QString OAIAccountSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_account_number_isSet) {
        obj.insert(QString("awsAccountNumber"), ::OpenAPI::toJsonValue(m_aws_account_number));
    }
    if (m_unmetered_devices.isSet()) {
        obj.insert(QString("unmeteredDevices"), ::OpenAPI::toJsonValue(m_unmetered_devices));
    }
    if (m_unmetered_remote_access_devices.isSet()) {
        obj.insert(QString("unmeteredRemoteAccessDevices"), ::OpenAPI::toJsonValue(m_unmetered_remote_access_devices));
    }
    if (m_max_job_timeout_minutes_isSet) {
        obj.insert(QString("maxJobTimeoutMinutes"), ::OpenAPI::toJsonValue(m_max_job_timeout_minutes));
    }
    if (m_trial_minutes.isSet()) {
        obj.insert(QString("trialMinutes"), ::OpenAPI::toJsonValue(m_trial_minutes));
    }
    if (m_max_slots.isSet()) {
        obj.insert(QString("maxSlots"), ::OpenAPI::toJsonValue(m_max_slots));
    }
    if (m_default_job_timeout_minutes_isSet) {
        obj.insert(QString("defaultJobTimeoutMinutes"), ::OpenAPI::toJsonValue(m_default_job_timeout_minutes));
    }
    if (m_skip_app_resign_isSet) {
        obj.insert(QString("skipAppResign"), ::OpenAPI::toJsonValue(m_skip_app_resign));
    }
    return obj;
}

QString OAIAccountSettings::getAwsAccountNumber() const {
    return m_aws_account_number;
}
void OAIAccountSettings::setAwsAccountNumber(const QString &aws_account_number) {
    m_aws_account_number = aws_account_number;
    m_aws_account_number_isSet = true;
}

bool OAIAccountSettings::is_aws_account_number_Set() const{
    return m_aws_account_number_isSet;
}

bool OAIAccountSettings::is_aws_account_number_Valid() const{
    return m_aws_account_number_isValid;
}

QMap OAIAccountSettings::getUnmeteredDevices() const {
    return m_unmetered_devices;
}
void OAIAccountSettings::setUnmeteredDevices(const QMap &unmetered_devices) {
    m_unmetered_devices = unmetered_devices;
    m_unmetered_devices_isSet = true;
}

bool OAIAccountSettings::is_unmetered_devices_Set() const{
    return m_unmetered_devices_isSet;
}

bool OAIAccountSettings::is_unmetered_devices_Valid() const{
    return m_unmetered_devices_isValid;
}

QMap OAIAccountSettings::getUnmeteredRemoteAccessDevices() const {
    return m_unmetered_remote_access_devices;
}
void OAIAccountSettings::setUnmeteredRemoteAccessDevices(const QMap &unmetered_remote_access_devices) {
    m_unmetered_remote_access_devices = unmetered_remote_access_devices;
    m_unmetered_remote_access_devices_isSet = true;
}

bool OAIAccountSettings::is_unmetered_remote_access_devices_Set() const{
    return m_unmetered_remote_access_devices_isSet;
}

bool OAIAccountSettings::is_unmetered_remote_access_devices_Valid() const{
    return m_unmetered_remote_access_devices_isValid;
}

qint32 OAIAccountSettings::getMaxJobTimeoutMinutes() const {
    return m_max_job_timeout_minutes;
}
void OAIAccountSettings::setMaxJobTimeoutMinutes(const qint32 &max_job_timeout_minutes) {
    m_max_job_timeout_minutes = max_job_timeout_minutes;
    m_max_job_timeout_minutes_isSet = true;
}

bool OAIAccountSettings::is_max_job_timeout_minutes_Set() const{
    return m_max_job_timeout_minutes_isSet;
}

bool OAIAccountSettings::is_max_job_timeout_minutes_Valid() const{
    return m_max_job_timeout_minutes_isValid;
}

OAIAccountSettings_trialMinutes OAIAccountSettings::getTrialMinutes() const {
    return m_trial_minutes;
}
void OAIAccountSettings::setTrialMinutes(const OAIAccountSettings_trialMinutes &trial_minutes) {
    m_trial_minutes = trial_minutes;
    m_trial_minutes_isSet = true;
}

bool OAIAccountSettings::is_trial_minutes_Set() const{
    return m_trial_minutes_isSet;
}

bool OAIAccountSettings::is_trial_minutes_Valid() const{
    return m_trial_minutes_isValid;
}

QMap OAIAccountSettings::getMaxSlots() const {
    return m_max_slots;
}
void OAIAccountSettings::setMaxSlots(const QMap &max_slots) {
    m_max_slots = max_slots;
    m_max_slots_isSet = true;
}

bool OAIAccountSettings::is_max_slots_Set() const{
    return m_max_slots_isSet;
}

bool OAIAccountSettings::is_max_slots_Valid() const{
    return m_max_slots_isValid;
}

qint32 OAIAccountSettings::getDefaultJobTimeoutMinutes() const {
    return m_default_job_timeout_minutes;
}
void OAIAccountSettings::setDefaultJobTimeoutMinutes(const qint32 &default_job_timeout_minutes) {
    m_default_job_timeout_minutes = default_job_timeout_minutes;
    m_default_job_timeout_minutes_isSet = true;
}

bool OAIAccountSettings::is_default_job_timeout_minutes_Set() const{
    return m_default_job_timeout_minutes_isSet;
}

bool OAIAccountSettings::is_default_job_timeout_minutes_Valid() const{
    return m_default_job_timeout_minutes_isValid;
}

bool OAIAccountSettings::getSkipAppResign() const {
    return m_skip_app_resign;
}
void OAIAccountSettings::setSkipAppResign(const bool &skip_app_resign) {
    m_skip_app_resign = skip_app_resign;
    m_skip_app_resign_isSet = true;
}

bool OAIAccountSettings::is_skip_app_resign_Set() const{
    return m_skip_app_resign_isSet;
}

bool OAIAccountSettings::is_skip_app_resign_Valid() const{
    return m_skip_app_resign_isValid;
}

bool OAIAccountSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmetered_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmetered_remote_access_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_job_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_minutes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_slots.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_job_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_app_resign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
