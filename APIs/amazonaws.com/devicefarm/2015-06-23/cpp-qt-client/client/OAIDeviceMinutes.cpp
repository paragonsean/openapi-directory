/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceMinutes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceMinutes::OAIDeviceMinutes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceMinutes::OAIDeviceMinutes() {
    this->initializeModel();
}

OAIDeviceMinutes::~OAIDeviceMinutes() {}

void OAIDeviceMinutes::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_metered_isSet = false;
    m_metered_isValid = false;

    m_unmetered_isSet = false;
    m_unmetered_isValid = false;
}

void OAIDeviceMinutes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceMinutes::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_metered_isValid = ::OpenAPI::fromJsonValue(m_metered, json[QString("metered")]);
    m_metered_isSet = !json[QString("metered")].isNull() && m_metered_isValid;

    m_unmetered_isValid = ::OpenAPI::fromJsonValue(m_unmetered, json[QString("unmetered")]);
    m_unmetered_isSet = !json[QString("unmetered")].isNull() && m_unmetered_isValid;
}

QString OAIDeviceMinutes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceMinutes::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_metered_isSet) {
        obj.insert(QString("metered"), ::OpenAPI::toJsonValue(m_metered));
    }
    if (m_unmetered_isSet) {
        obj.insert(QString("unmetered"), ::OpenAPI::toJsonValue(m_unmetered));
    }
    return obj;
}

double OAIDeviceMinutes::getTotal() const {
    return m_total;
}
void OAIDeviceMinutes::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDeviceMinutes::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDeviceMinutes::is_total_Valid() const{
    return m_total_isValid;
}

double OAIDeviceMinutes::getMetered() const {
    return m_metered;
}
void OAIDeviceMinutes::setMetered(const double &metered) {
    m_metered = metered;
    m_metered_isSet = true;
}

bool OAIDeviceMinutes::is_metered_Set() const{
    return m_metered_isSet;
}

bool OAIDeviceMinutes::is_metered_Valid() const{
    return m_metered_isValid;
}

double OAIDeviceMinutes::getUnmetered() const {
    return m_unmetered;
}
void OAIDeviceMinutes::setUnmetered(const double &unmetered) {
    m_unmetered = unmetered;
    m_unmetered_isSet = true;
}

bool OAIDeviceMinutes::is_unmetered_Set() const{
    return m_unmetered_isSet;
}

bool OAIDeviceMinutes::is_unmetered_Valid() const{
    return m_unmetered_isValid;
}

bool OAIDeviceMinutes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmetered_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceMinutes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
