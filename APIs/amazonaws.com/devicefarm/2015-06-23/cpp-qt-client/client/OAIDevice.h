/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevice.h
 *
 * Represents a device type that an app is tested against.
 */

#ifndef OAIDevice_H
#define OAIDevice_H

#include <QJsonObject>

#include "OAIDeviceAvailability.h"
#include "OAIDeviceFormFactor.h"
#include "OAIDevicePlatform.h"
#include "OAIDevice_cpu.h"
#include "OAIDevice_resolution.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDevice_cpu;
class OAIDevice_resolution;

class OAIDevice : public OAIObject {
public:
    OAIDevice();
    OAIDevice(QString json);
    ~OAIDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getManufacturer() const;
    void setManufacturer(const QString &manufacturer);
    bool is_manufacturer_Set() const;
    bool is_manufacturer_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getModelId() const;
    void setModelId(const QString &model_id);
    bool is_model_id_Set() const;
    bool is_model_id_Valid() const;

    OAIDeviceFormFactor getFormFactor() const;
    void setFormFactor(const OAIDeviceFormFactor &form_factor);
    bool is_form_factor_Set() const;
    bool is_form_factor_Valid() const;

    OAIDevicePlatform getPlatform() const;
    void setPlatform(const OAIDevicePlatform &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    OAIDevice_cpu getCpu() const;
    void setCpu(const OAIDevice_cpu &cpu);
    bool is_cpu_Set() const;
    bool is_cpu_Valid() const;

    OAIDevice_resolution getResolution() const;
    void setResolution(const OAIDevice_resolution &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    qint32 getHeapSize() const;
    void setHeapSize(const qint32 &heap_size);
    bool is_heap_size_Set() const;
    bool is_heap_size_Valid() const;

    qint32 getMemory() const;
    void setMemory(const qint32 &memory);
    bool is_memory_Set() const;
    bool is_memory_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getCarrier() const;
    void setCarrier(const QString &carrier);
    bool is_carrier_Set() const;
    bool is_carrier_Valid() const;

    QString getRadio() const;
    void setRadio(const QString &radio);
    bool is_radio_Set() const;
    bool is_radio_Valid() const;

    bool getRemoteAccessEnabled() const;
    void setRemoteAccessEnabled(const bool &remote_access_enabled);
    bool is_remote_access_enabled_Set() const;
    bool is_remote_access_enabled_Valid() const;

    bool getRemoteDebugEnabled() const;
    void setRemoteDebugEnabled(const bool &remote_debug_enabled);
    bool is_remote_debug_enabled_Set() const;
    bool is_remote_debug_enabled_Valid() const;

    QString getFleetType() const;
    void setFleetType(const QString &fleet_type);
    bool is_fleet_type_Set() const;
    bool is_fleet_type_Valid() const;

    QString getFleetName() const;
    void setFleetName(const QString &fleet_name);
    bool is_fleet_name_Set() const;
    bool is_fleet_name_Valid() const;

    QList getInstances() const;
    void setInstances(const QList &instances);
    bool is_instances_Set() const;
    bool is_instances_Valid() const;

    OAIDeviceAvailability getAvailability() const;
    void setAvailability(const OAIDeviceAvailability &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_manufacturer;
    bool m_manufacturer_isSet;
    bool m_manufacturer_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_model_id;
    bool m_model_id_isSet;
    bool m_model_id_isValid;

    OAIDeviceFormFactor m_form_factor;
    bool m_form_factor_isSet;
    bool m_form_factor_isValid;

    OAIDevicePlatform m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    OAIDevice_cpu m_cpu;
    bool m_cpu_isSet;
    bool m_cpu_isValid;

    OAIDevice_resolution m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    qint32 m_heap_size;
    bool m_heap_size_isSet;
    bool m_heap_size_isValid;

    qint32 m_memory;
    bool m_memory_isSet;
    bool m_memory_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_carrier;
    bool m_carrier_isSet;
    bool m_carrier_isValid;

    QString m_radio;
    bool m_radio_isSet;
    bool m_radio_isValid;

    bool m_remote_access_enabled;
    bool m_remote_access_enabled_isSet;
    bool m_remote_access_enabled_isValid;

    bool m_remote_debug_enabled;
    bool m_remote_debug_enabled_isSet;
    bool m_remote_debug_enabled_isValid;

    QString m_fleet_type;
    bool m_fleet_type_isSet;
    bool m_fleet_type_isValid;

    QString m_fleet_name;
    bool m_fleet_name_isSet;
    bool m_fleet_name_isValid;

    QList m_instances;
    bool m_instances_isSet;
    bool m_instances_isValid;

    OAIDeviceAvailability m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevice)

#endif // OAIDevice_H
