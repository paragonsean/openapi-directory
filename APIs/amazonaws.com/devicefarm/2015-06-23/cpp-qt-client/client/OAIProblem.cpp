/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProblem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProblem::OAIProblem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProblem::OAIProblem() {
    this->initializeModel();
}

OAIProblem::~OAIProblem() {}

void OAIProblem::initializeModel() {

    m_run_isSet = false;
    m_run_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;

    m_suite_isSet = false;
    m_suite_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIProblem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProblem::fromJsonObject(QJsonObject json) {

    m_run_isValid = ::OpenAPI::fromJsonValue(m_run, json[QString("run")]);
    m_run_isSet = !json[QString("run")].isNull() && m_run_isValid;

    m_job_isValid = ::OpenAPI::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;

    m_suite_isValid = ::OpenAPI::fromJsonValue(m_suite, json[QString("suite")]);
    m_suite_isSet = !json[QString("suite")].isNull() && m_suite_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIProblem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProblem::asJsonObject() const {
    QJsonObject obj;
    if (m_run.isSet()) {
        obj.insert(QString("run"), ::OpenAPI::toJsonValue(m_run));
    }
    if (m_job.isSet()) {
        obj.insert(QString("job"), ::OpenAPI::toJsonValue(m_job));
    }
    if (m_suite.isSet()) {
        obj.insert(QString("suite"), ::OpenAPI::toJsonValue(m_suite));
    }
    if (m_test.isSet()) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIProblem_run OAIProblem::getRun() const {
    return m_run;
}
void OAIProblem::setRun(const OAIProblem_run &run) {
    m_run = run;
    m_run_isSet = true;
}

bool OAIProblem::is_run_Set() const{
    return m_run_isSet;
}

bool OAIProblem::is_run_Valid() const{
    return m_run_isValid;
}

OAIProblem_job OAIProblem::getJob() const {
    return m_job;
}
void OAIProblem::setJob(const OAIProblem_job &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIProblem::is_job_Set() const{
    return m_job_isSet;
}

bool OAIProblem::is_job_Valid() const{
    return m_job_isValid;
}

OAIProblem_suite OAIProblem::getSuite() const {
    return m_suite;
}
void OAIProblem::setSuite(const OAIProblem_suite &suite) {
    m_suite = suite;
    m_suite_isSet = true;
}

bool OAIProblem::is_suite_Set() const{
    return m_suite_isSet;
}

bool OAIProblem::is_suite_Valid() const{
    return m_suite_isValid;
}

OAIProblem_test OAIProblem::getTest() const {
    return m_test;
}
void OAIProblem::setTest(const OAIProblem_test &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIProblem::is_test_Set() const{
    return m_test_isSet;
}

bool OAIProblem::is_test_Valid() const{
    return m_test_isValid;
}

OAIProblem_device OAIProblem::getDevice() const {
    return m_device;
}
void OAIProblem::setDevice(const OAIProblem_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIProblem::is_device_Set() const{
    return m_device_isSet;
}

bool OAIProblem::is_device_Valid() const{
    return m_device_isValid;
}

OAIExecutionResult OAIProblem::getResult() const {
    return m_result;
}
void OAIProblem::setResult(const OAIExecutionResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIProblem::is_result_Set() const{
    return m_result_isSet;
}

bool OAIProblem::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIProblem::getMessage() const {
    return m_message;
}
void OAIProblem::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIProblem::is_message_Set() const{
    return m_message_isSet;
}

bool OAIProblem::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIProblem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProblem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
