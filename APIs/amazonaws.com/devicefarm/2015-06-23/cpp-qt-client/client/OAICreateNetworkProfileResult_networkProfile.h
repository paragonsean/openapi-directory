/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateNetworkProfileResult_networkProfile.h
 *
 * 
 */

#ifndef OAICreateNetworkProfileResult_networkProfile_H
#define OAICreateNetworkProfileResult_networkProfile_H

#include <QJsonObject>

#include "OAINetworkProfileType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateNetworkProfileResult_networkProfile : public OAIObject {
public:
    OAICreateNetworkProfileResult_networkProfile();
    OAICreateNetworkProfileResult_networkProfile(QString json);
    ~OAICreateNetworkProfileResult_networkProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAINetworkProfileType getType() const;
    void setType(const OAINetworkProfileType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getUplinkBandwidthBits() const;
    void setUplinkBandwidthBits(const qint32 &uplink_bandwidth_bits);
    bool is_uplink_bandwidth_bits_Set() const;
    bool is_uplink_bandwidth_bits_Valid() const;

    qint32 getDownlinkBandwidthBits() const;
    void setDownlinkBandwidthBits(const qint32 &downlink_bandwidth_bits);
    bool is_downlink_bandwidth_bits_Set() const;
    bool is_downlink_bandwidth_bits_Valid() const;

    qint32 getUplinkDelayMs() const;
    void setUplinkDelayMs(const qint32 &uplink_delay_ms);
    bool is_uplink_delay_ms_Set() const;
    bool is_uplink_delay_ms_Valid() const;

    qint32 getDownlinkDelayMs() const;
    void setDownlinkDelayMs(const qint32 &downlink_delay_ms);
    bool is_downlink_delay_ms_Set() const;
    bool is_downlink_delay_ms_Valid() const;

    qint32 getUplinkJitterMs() const;
    void setUplinkJitterMs(const qint32 &uplink_jitter_ms);
    bool is_uplink_jitter_ms_Set() const;
    bool is_uplink_jitter_ms_Valid() const;

    qint32 getDownlinkJitterMs() const;
    void setDownlinkJitterMs(const qint32 &downlink_jitter_ms);
    bool is_downlink_jitter_ms_Set() const;
    bool is_downlink_jitter_ms_Valid() const;

    qint32 getUplinkLossPercent() const;
    void setUplinkLossPercent(const qint32 &uplink_loss_percent);
    bool is_uplink_loss_percent_Set() const;
    bool is_uplink_loss_percent_Valid() const;

    qint32 getDownlinkLossPercent() const;
    void setDownlinkLossPercent(const qint32 &downlink_loss_percent);
    bool is_downlink_loss_percent_Set() const;
    bool is_downlink_loss_percent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAINetworkProfileType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_uplink_bandwidth_bits;
    bool m_uplink_bandwidth_bits_isSet;
    bool m_uplink_bandwidth_bits_isValid;

    qint32 m_downlink_bandwidth_bits;
    bool m_downlink_bandwidth_bits_isSet;
    bool m_downlink_bandwidth_bits_isValid;

    qint32 m_uplink_delay_ms;
    bool m_uplink_delay_ms_isSet;
    bool m_uplink_delay_ms_isValid;

    qint32 m_downlink_delay_ms;
    bool m_downlink_delay_ms_isSet;
    bool m_downlink_delay_ms_isValid;

    qint32 m_uplink_jitter_ms;
    bool m_uplink_jitter_ms_isSet;
    bool m_uplink_jitter_ms_isValid;

    qint32 m_downlink_jitter_ms;
    bool m_downlink_jitter_ms_isSet;
    bool m_downlink_jitter_ms_isValid;

    qint32 m_uplink_loss_percent;
    bool m_uplink_loss_percent_isSet;
    bool m_uplink_loss_percent_isValid;

    qint32 m_downlink_loss_percent;
    bool m_downlink_loss_percent_isSet;
    bool m_downlink_loss_percent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateNetworkProfileResult_networkProfile)

#endif // OAICreateNetworkProfileResult_networkProfile_H
