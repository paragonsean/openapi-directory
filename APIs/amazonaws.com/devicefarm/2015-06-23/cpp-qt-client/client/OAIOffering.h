/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOffering.h
 *
 * Represents the metadata of a device offering.
 */

#ifndef OAIOffering_H
#define OAIOffering_H

#include <QJsonObject>

#include "OAIDevicePlatform.h"
#include "OAIOfferingType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOffering : public OAIObject {
public:
    OAIOffering();
    OAIOffering(QString json);
    ~OAIOffering() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIOfferingType getType() const;
    void setType(const OAIOfferingType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIDevicePlatform getPlatform() const;
    void setPlatform(const OAIDevicePlatform &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QList getRecurringCharges() const;
    void setRecurringCharges(const QList &recurring_charges);
    bool is_recurring_charges_Set() const;
    bool is_recurring_charges_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIOfferingType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIDevicePlatform m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QList m_recurring_charges;
    bool m_recurring_charges_isSet;
    bool m_recurring_charges_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOffering)

#endif // OAIOffering_H
