/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceInstance::OAIDeviceInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceInstance::OAIDeviceInstance() {
    this->initializeModel();
}

OAIDeviceInstance::~OAIDeviceInstance() {}

void OAIDeviceInstance::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_device_arn_isSet = false;
    m_device_arn_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_udid_isSet = false;
    m_udid_isValid = false;

    m_instance_profile_isSet = false;
    m_instance_profile_isValid = false;
}

void OAIDeviceInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceInstance::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_device_arn_isValid = ::OpenAPI::fromJsonValue(m_device_arn, json[QString("deviceArn")]);
    m_device_arn_isSet = !json[QString("deviceArn")].isNull() && m_device_arn_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_udid_isValid = ::OpenAPI::fromJsonValue(m_udid, json[QString("udid")]);
    m_udid_isSet = !json[QString("udid")].isNull() && m_udid_isValid;

    m_instance_profile_isValid = ::OpenAPI::fromJsonValue(m_instance_profile, json[QString("instanceProfile")]);
    m_instance_profile_isSet = !json[QString("instanceProfile")].isNull() && m_instance_profile_isValid;
}

QString OAIDeviceInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_device_arn_isSet) {
        obj.insert(QString("deviceArn"), ::OpenAPI::toJsonValue(m_device_arn));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_udid_isSet) {
        obj.insert(QString("udid"), ::OpenAPI::toJsonValue(m_udid));
    }
    if (m_instance_profile.isSet()) {
        obj.insert(QString("instanceProfile"), ::OpenAPI::toJsonValue(m_instance_profile));
    }
    return obj;
}

QString OAIDeviceInstance::getArn() const {
    return m_arn;
}
void OAIDeviceInstance::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeviceInstance::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeviceInstance::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeviceInstance::getDeviceArn() const {
    return m_device_arn;
}
void OAIDeviceInstance::setDeviceArn(const QString &device_arn) {
    m_device_arn = device_arn;
    m_device_arn_isSet = true;
}

bool OAIDeviceInstance::is_device_arn_Set() const{
    return m_device_arn_isSet;
}

bool OAIDeviceInstance::is_device_arn_Valid() const{
    return m_device_arn_isValid;
}

QList OAIDeviceInstance::getLabels() const {
    return m_labels;
}
void OAIDeviceInstance::setLabels(const QList &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDeviceInstance::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDeviceInstance::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIInstanceStatus OAIDeviceInstance::getStatus() const {
    return m_status;
}
void OAIDeviceInstance::setStatus(const OAIInstanceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeviceInstance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeviceInstance::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeviceInstance::getUdid() const {
    return m_udid;
}
void OAIDeviceInstance::setUdid(const QString &udid) {
    m_udid = udid;
    m_udid_isSet = true;
}

bool OAIDeviceInstance::is_udid_Set() const{
    return m_udid_isSet;
}

bool OAIDeviceInstance::is_udid_Valid() const{
    return m_udid_isValid;
}

OAIDeviceInstance_instanceProfile OAIDeviceInstance::getInstanceProfile() const {
    return m_instance_profile;
}
void OAIDeviceInstance::setInstanceProfile(const OAIDeviceInstance_instanceProfile &instance_profile) {
    m_instance_profile = instance_profile;
    m_instance_profile_isSet = true;
}

bool OAIDeviceInstance::is_instance_profile_Set() const{
    return m_instance_profile_isSet;
}

bool OAIDeviceInstance::is_instance_profile_Valid() const{
    return m_instance_profile_isValid;
}

bool OAIDeviceInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_udid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
