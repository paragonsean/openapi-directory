/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionConfiguration::OAIExecutionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionConfiguration::OAIExecutionConfiguration() {
    this->initializeModel();
}

OAIExecutionConfiguration::~OAIExecutionConfiguration() {}

void OAIExecutionConfiguration::initializeModel() {

    m_job_timeout_minutes_isSet = false;
    m_job_timeout_minutes_isValid = false;

    m_accounts_cleanup_isSet = false;
    m_accounts_cleanup_isValid = false;

    m_app_packages_cleanup_isSet = false;
    m_app_packages_cleanup_isValid = false;

    m_video_capture_isSet = false;
    m_video_capture_isValid = false;

    m_skip_app_resign_isSet = false;
    m_skip_app_resign_isValid = false;
}

void OAIExecutionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionConfiguration::fromJsonObject(QJsonObject json) {

    m_job_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_job_timeout_minutes, json[QString("jobTimeoutMinutes")]);
    m_job_timeout_minutes_isSet = !json[QString("jobTimeoutMinutes")].isNull() && m_job_timeout_minutes_isValid;

    m_accounts_cleanup_isValid = ::OpenAPI::fromJsonValue(m_accounts_cleanup, json[QString("accountsCleanup")]);
    m_accounts_cleanup_isSet = !json[QString("accountsCleanup")].isNull() && m_accounts_cleanup_isValid;

    m_app_packages_cleanup_isValid = ::OpenAPI::fromJsonValue(m_app_packages_cleanup, json[QString("appPackagesCleanup")]);
    m_app_packages_cleanup_isSet = !json[QString("appPackagesCleanup")].isNull() && m_app_packages_cleanup_isValid;

    m_video_capture_isValid = ::OpenAPI::fromJsonValue(m_video_capture, json[QString("videoCapture")]);
    m_video_capture_isSet = !json[QString("videoCapture")].isNull() && m_video_capture_isValid;

    m_skip_app_resign_isValid = ::OpenAPI::fromJsonValue(m_skip_app_resign, json[QString("skipAppResign")]);
    m_skip_app_resign_isSet = !json[QString("skipAppResign")].isNull() && m_skip_app_resign_isValid;
}

QString OAIExecutionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_job_timeout_minutes_isSet) {
        obj.insert(QString("jobTimeoutMinutes"), ::OpenAPI::toJsonValue(m_job_timeout_minutes));
    }
    if (m_accounts_cleanup_isSet) {
        obj.insert(QString("accountsCleanup"), ::OpenAPI::toJsonValue(m_accounts_cleanup));
    }
    if (m_app_packages_cleanup_isSet) {
        obj.insert(QString("appPackagesCleanup"), ::OpenAPI::toJsonValue(m_app_packages_cleanup));
    }
    if (m_video_capture_isSet) {
        obj.insert(QString("videoCapture"), ::OpenAPI::toJsonValue(m_video_capture));
    }
    if (m_skip_app_resign_isSet) {
        obj.insert(QString("skipAppResign"), ::OpenAPI::toJsonValue(m_skip_app_resign));
    }
    return obj;
}

qint32 OAIExecutionConfiguration::getJobTimeoutMinutes() const {
    return m_job_timeout_minutes;
}
void OAIExecutionConfiguration::setJobTimeoutMinutes(const qint32 &job_timeout_minutes) {
    m_job_timeout_minutes = job_timeout_minutes;
    m_job_timeout_minutes_isSet = true;
}

bool OAIExecutionConfiguration::is_job_timeout_minutes_Set() const{
    return m_job_timeout_minutes_isSet;
}

bool OAIExecutionConfiguration::is_job_timeout_minutes_Valid() const{
    return m_job_timeout_minutes_isValid;
}

bool OAIExecutionConfiguration::getAccountsCleanup() const {
    return m_accounts_cleanup;
}
void OAIExecutionConfiguration::setAccountsCleanup(const bool &accounts_cleanup) {
    m_accounts_cleanup = accounts_cleanup;
    m_accounts_cleanup_isSet = true;
}

bool OAIExecutionConfiguration::is_accounts_cleanup_Set() const{
    return m_accounts_cleanup_isSet;
}

bool OAIExecutionConfiguration::is_accounts_cleanup_Valid() const{
    return m_accounts_cleanup_isValid;
}

bool OAIExecutionConfiguration::getAppPackagesCleanup() const {
    return m_app_packages_cleanup;
}
void OAIExecutionConfiguration::setAppPackagesCleanup(const bool &app_packages_cleanup) {
    m_app_packages_cleanup = app_packages_cleanup;
    m_app_packages_cleanup_isSet = true;
}

bool OAIExecutionConfiguration::is_app_packages_cleanup_Set() const{
    return m_app_packages_cleanup_isSet;
}

bool OAIExecutionConfiguration::is_app_packages_cleanup_Valid() const{
    return m_app_packages_cleanup_isValid;
}

bool OAIExecutionConfiguration::getVideoCapture() const {
    return m_video_capture;
}
void OAIExecutionConfiguration::setVideoCapture(const bool &video_capture) {
    m_video_capture = video_capture;
    m_video_capture_isSet = true;
}

bool OAIExecutionConfiguration::is_video_capture_Set() const{
    return m_video_capture_isSet;
}

bool OAIExecutionConfiguration::is_video_capture_Valid() const{
    return m_video_capture_isValid;
}

bool OAIExecutionConfiguration::getSkipAppResign() const {
    return m_skip_app_resign;
}
void OAIExecutionConfiguration::setSkipAppResign(const bool &skip_app_resign) {
    m_skip_app_resign = skip_app_resign;
    m_skip_app_resign_isSet = true;
}

bool OAIExecutionConfiguration::is_skip_app_resign_Set() const{
    return m_skip_app_resign_isSet;
}

bool OAIExecutionConfiguration::is_skip_app_resign_Valid() const{
    return m_skip_app_resign_isValid;
}

bool OAIExecutionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_cleanup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_packages_cleanup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_app_resign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
