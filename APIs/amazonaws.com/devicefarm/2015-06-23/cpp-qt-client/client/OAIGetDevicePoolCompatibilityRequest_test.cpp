/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDevicePoolCompatibilityRequest_test.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDevicePoolCompatibilityRequest_test::OAIGetDevicePoolCompatibilityRequest_test(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDevicePoolCompatibilityRequest_test::OAIGetDevicePoolCompatibilityRequest_test() {
    this->initializeModel();
}

OAIGetDevicePoolCompatibilityRequest_test::~OAIGetDevicePoolCompatibilityRequest_test() {}

void OAIGetDevicePoolCompatibilityRequest_test::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_test_package_arn_isSet = false;
    m_test_package_arn_isValid = false;

    m_test_spec_arn_isSet = false;
    m_test_spec_arn_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIGetDevicePoolCompatibilityRequest_test::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDevicePoolCompatibilityRequest_test::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_test_package_arn_isValid = ::OpenAPI::fromJsonValue(m_test_package_arn, json[QString("testPackageArn")]);
    m_test_package_arn_isSet = !json[QString("testPackageArn")].isNull() && m_test_package_arn_isValid;

    m_test_spec_arn_isValid = ::OpenAPI::fromJsonValue(m_test_spec_arn, json[QString("testSpecArn")]);
    m_test_spec_arn_isSet = !json[QString("testSpecArn")].isNull() && m_test_spec_arn_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIGetDevicePoolCompatibilityRequest_test::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDevicePoolCompatibilityRequest_test::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_test_package_arn_isSet) {
        obj.insert(QString("testPackageArn"), ::OpenAPI::toJsonValue(m_test_package_arn));
    }
    if (m_test_spec_arn_isSet) {
        obj.insert(QString("testSpecArn"), ::OpenAPI::toJsonValue(m_test_spec_arn));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

OAITestType OAIGetDevicePoolCompatibilityRequest_test::getType() const {
    return m_type;
}
void OAIGetDevicePoolCompatibilityRequest_test::setType(const OAITestType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetDevicePoolCompatibilityRequest_test::getTestPackageArn() const {
    return m_test_package_arn;
}
void OAIGetDevicePoolCompatibilityRequest_test::setTestPackageArn(const QString &test_package_arn) {
    m_test_package_arn = test_package_arn;
    m_test_package_arn_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_test_package_arn_Set() const{
    return m_test_package_arn_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_test_package_arn_Valid() const{
    return m_test_package_arn_isValid;
}

QString OAIGetDevicePoolCompatibilityRequest_test::getTestSpecArn() const {
    return m_test_spec_arn;
}
void OAIGetDevicePoolCompatibilityRequest_test::setTestSpecArn(const QString &test_spec_arn) {
    m_test_spec_arn = test_spec_arn;
    m_test_spec_arn_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_test_spec_arn_Set() const{
    return m_test_spec_arn_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_test_spec_arn_Valid() const{
    return m_test_spec_arn_isValid;
}

QString OAIGetDevicePoolCompatibilityRequest_test::getFilter() const {
    return m_filter;
}
void OAIGetDevicePoolCompatibilityRequest_test::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap OAIGetDevicePoolCompatibilityRequest_test::getParameters() const {
    return m_parameters;
}
void OAIGetDevicePoolCompatibilityRequest_test::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest_test::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIGetDevicePoolCompatibilityRequest_test::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_spec_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDevicePoolCompatibilityRequest_test::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
