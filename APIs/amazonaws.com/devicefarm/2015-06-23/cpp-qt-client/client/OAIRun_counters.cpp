/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRun_counters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRun_counters::OAIRun_counters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRun_counters::OAIRun_counters() {
    this->initializeModel();
}

OAIRun_counters::~OAIRun_counters() {}

void OAIRun_counters::initializeModel() {

    m_total_isSet = false;
    m_total_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_warned_isSet = false;
    m_warned_isValid = false;

    m_errored_isSet = false;
    m_errored_isValid = false;

    m_stopped_isSet = false;
    m_stopped_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;
}

void OAIRun_counters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRun_counters::fromJsonObject(QJsonObject json) {

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(m_passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_warned_isValid = ::OpenAPI::fromJsonValue(m_warned, json[QString("warned")]);
    m_warned_isSet = !json[QString("warned")].isNull() && m_warned_isValid;

    m_errored_isValid = ::OpenAPI::fromJsonValue(m_errored, json[QString("errored")]);
    m_errored_isSet = !json[QString("errored")].isNull() && m_errored_isValid;

    m_stopped_isValid = ::OpenAPI::fromJsonValue(m_stopped, json[QString("stopped")]);
    m_stopped_isSet = !json[QString("stopped")].isNull() && m_stopped_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;
}

QString OAIRun_counters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRun_counters::asJsonObject() const {
    QJsonObject obj;
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(m_passed));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_warned_isSet) {
        obj.insert(QString("warned"), ::OpenAPI::toJsonValue(m_warned));
    }
    if (m_errored_isSet) {
        obj.insert(QString("errored"), ::OpenAPI::toJsonValue(m_errored));
    }
    if (m_stopped_isSet) {
        obj.insert(QString("stopped"), ::OpenAPI::toJsonValue(m_stopped));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    return obj;
}

qint32 OAIRun_counters::getTotal() const {
    return m_total;
}
void OAIRun_counters::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIRun_counters::is_total_Set() const{
    return m_total_isSet;
}

bool OAIRun_counters::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIRun_counters::getPassed() const {
    return m_passed;
}
void OAIRun_counters::setPassed(const qint32 &passed) {
    m_passed = passed;
    m_passed_isSet = true;
}

bool OAIRun_counters::is_passed_Set() const{
    return m_passed_isSet;
}

bool OAIRun_counters::is_passed_Valid() const{
    return m_passed_isValid;
}

qint32 OAIRun_counters::getFailed() const {
    return m_failed;
}
void OAIRun_counters::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIRun_counters::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIRun_counters::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIRun_counters::getWarned() const {
    return m_warned;
}
void OAIRun_counters::setWarned(const qint32 &warned) {
    m_warned = warned;
    m_warned_isSet = true;
}

bool OAIRun_counters::is_warned_Set() const{
    return m_warned_isSet;
}

bool OAIRun_counters::is_warned_Valid() const{
    return m_warned_isValid;
}

qint32 OAIRun_counters::getErrored() const {
    return m_errored;
}
void OAIRun_counters::setErrored(const qint32 &errored) {
    m_errored = errored;
    m_errored_isSet = true;
}

bool OAIRun_counters::is_errored_Set() const{
    return m_errored_isSet;
}

bool OAIRun_counters::is_errored_Valid() const{
    return m_errored_isValid;
}

qint32 OAIRun_counters::getStopped() const {
    return m_stopped;
}
void OAIRun_counters::setStopped(const qint32 &stopped) {
    m_stopped = stopped;
    m_stopped_isSet = true;
}

bool OAIRun_counters::is_stopped_Set() const{
    return m_stopped_isSet;
}

bool OAIRun_counters::is_stopped_Valid() const{
    return m_stopped_isValid;
}

qint32 OAIRun_counters::getSkipped() const {
    return m_skipped;
}
void OAIRun_counters::setSkipped(const qint32 &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAIRun_counters::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAIRun_counters::is_skipped_Valid() const{
    return m_skipped_isValid;
}

bool OAIRun_counters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRun_counters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
