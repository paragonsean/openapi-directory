/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestGridSessionAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestGridSessionAction::OAITestGridSessionAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestGridSessionAction::OAITestGridSessionAction() {
    this->initializeModel();
}

OAITestGridSessionAction::~OAITestGridSessionAction() {}

void OAITestGridSessionAction::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_request_method_isSet = false;
    m_request_method_isValid = false;
}

void OAITestGridSessionAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestGridSessionAction::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_request_method_isValid = ::OpenAPI::fromJsonValue(m_request_method, json[QString("requestMethod")]);
    m_request_method_isSet = !json[QString("requestMethod")].isNull() && m_request_method_isValid;
}

QString OAITestGridSessionAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestGridSessionAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_request_method_isSet) {
        obj.insert(QString("requestMethod"), ::OpenAPI::toJsonValue(m_request_method));
    }
    return obj;
}

QString OAITestGridSessionAction::getAction() const {
    return m_action;
}
void OAITestGridSessionAction::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAITestGridSessionAction::is_action_Set() const{
    return m_action_isSet;
}

bool OAITestGridSessionAction::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAITestGridSessionAction::getStarted() const {
    return m_started;
}
void OAITestGridSessionAction::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAITestGridSessionAction::is_started_Set() const{
    return m_started_isSet;
}

bool OAITestGridSessionAction::is_started_Valid() const{
    return m_started_isValid;
}

qint32 OAITestGridSessionAction::getDuration() const {
    return m_duration;
}
void OAITestGridSessionAction::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITestGridSessionAction::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITestGridSessionAction::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAITestGridSessionAction::getStatusCode() const {
    return m_status_code;
}
void OAITestGridSessionAction::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAITestGridSessionAction::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAITestGridSessionAction::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAITestGridSessionAction::getRequestMethod() const {
    return m_request_method;
}
void OAITestGridSessionAction::setRequestMethod(const QString &request_method) {
    m_request_method = request_method;
    m_request_method_isSet = true;
}

bool OAITestGridSessionAction::is_request_method_Set() const{
    return m_request_method_isSet;
}

bool OAITestGridSessionAction::is_request_method_Valid() const{
    return m_request_method_isValid;
}

bool OAITestGridSessionAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestGridSessionAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
