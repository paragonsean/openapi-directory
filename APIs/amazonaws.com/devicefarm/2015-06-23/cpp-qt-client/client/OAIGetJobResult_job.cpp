/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetJobResult_job.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetJobResult_job::OAIGetJobResult_job(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetJobResult_job::OAIGetJobResult_job() {
    this->initializeModel();
}

OAIGetJobResult_job::~OAIGetJobResult_job() {}

void OAIGetJobResult_job::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_stopped_isSet = false;
    m_stopped_isValid = false;

    m_counters_isSet = false;
    m_counters_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_instance_arn_isSet = false;
    m_instance_arn_isValid = false;

    m_device_minutes_isSet = false;
    m_device_minutes_isValid = false;

    m_video_endpoint_isSet = false;
    m_video_endpoint_isValid = false;

    m_video_capture_isSet = false;
    m_video_capture_isValid = false;
}

void OAIGetJobResult_job::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetJobResult_job::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_stopped_isValid = ::OpenAPI::fromJsonValue(m_stopped, json[QString("stopped")]);
    m_stopped_isSet = !json[QString("stopped")].isNull() && m_stopped_isValid;

    m_counters_isValid = ::OpenAPI::fromJsonValue(m_counters, json[QString("counters")]);
    m_counters_isSet = !json[QString("counters")].isNull() && m_counters_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_arn, json[QString("instanceArn")]);
    m_instance_arn_isSet = !json[QString("instanceArn")].isNull() && m_instance_arn_isValid;

    m_device_minutes_isValid = ::OpenAPI::fromJsonValue(m_device_minutes, json[QString("deviceMinutes")]);
    m_device_minutes_isSet = !json[QString("deviceMinutes")].isNull() && m_device_minutes_isValid;

    m_video_endpoint_isValid = ::OpenAPI::fromJsonValue(m_video_endpoint, json[QString("videoEndpoint")]);
    m_video_endpoint_isSet = !json[QString("videoEndpoint")].isNull() && m_video_endpoint_isValid;

    m_video_capture_isValid = ::OpenAPI::fromJsonValue(m_video_capture, json[QString("videoCapture")]);
    m_video_capture_isSet = !json[QString("videoCapture")].isNull() && m_video_capture_isValid;
}

QString OAIGetJobResult_job::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetJobResult_job::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_stopped_isSet) {
        obj.insert(QString("stopped"), ::OpenAPI::toJsonValue(m_stopped));
    }
    if (m_counters.isSet()) {
        obj.insert(QString("counters"), ::OpenAPI::toJsonValue(m_counters));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_instance_arn_isSet) {
        obj.insert(QString("instanceArn"), ::OpenAPI::toJsonValue(m_instance_arn));
    }
    if (m_device_minutes.isSet()) {
        obj.insert(QString("deviceMinutes"), ::OpenAPI::toJsonValue(m_device_minutes));
    }
    if (m_video_endpoint_isSet) {
        obj.insert(QString("videoEndpoint"), ::OpenAPI::toJsonValue(m_video_endpoint));
    }
    if (m_video_capture_isSet) {
        obj.insert(QString("videoCapture"), ::OpenAPI::toJsonValue(m_video_capture));
    }
    return obj;
}

QString OAIGetJobResult_job::getArn() const {
    return m_arn;
}
void OAIGetJobResult_job::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetJobResult_job::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetJobResult_job::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetJobResult_job::getName() const {
    return m_name;
}
void OAIGetJobResult_job::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetJobResult_job::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetJobResult_job::is_name_Valid() const{
    return m_name_isValid;
}

OAITestType OAIGetJobResult_job::getType() const {
    return m_type;
}
void OAIGetJobResult_job::setType(const OAITestType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetJobResult_job::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetJobResult_job::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIGetJobResult_job::getCreated() const {
    return m_created;
}
void OAIGetJobResult_job::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGetJobResult_job::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGetJobResult_job::is_created_Valid() const{
    return m_created_isValid;
}

OAIExecutionStatus OAIGetJobResult_job::getStatus() const {
    return m_status;
}
void OAIGetJobResult_job::setStatus(const OAIExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetJobResult_job::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetJobResult_job::is_status_Valid() const{
    return m_status_isValid;
}

OAIExecutionResult OAIGetJobResult_job::getResult() const {
    return m_result;
}
void OAIGetJobResult_job::setResult(const OAIExecutionResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIGetJobResult_job::is_result_Set() const{
    return m_result_isSet;
}

bool OAIGetJobResult_job::is_result_Valid() const{
    return m_result_isValid;
}

QDateTime OAIGetJobResult_job::getStarted() const {
    return m_started;
}
void OAIGetJobResult_job::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIGetJobResult_job::is_started_Set() const{
    return m_started_isSet;
}

bool OAIGetJobResult_job::is_started_Valid() const{
    return m_started_isValid;
}

QDateTime OAIGetJobResult_job::getStopped() const {
    return m_stopped;
}
void OAIGetJobResult_job::setStopped(const QDateTime &stopped) {
    m_stopped = stopped;
    m_stopped_isSet = true;
}

bool OAIGetJobResult_job::is_stopped_Set() const{
    return m_stopped_isSet;
}

bool OAIGetJobResult_job::is_stopped_Valid() const{
    return m_stopped_isValid;
}

OAIJob_counters OAIGetJobResult_job::getCounters() const {
    return m_counters;
}
void OAIGetJobResult_job::setCounters(const OAIJob_counters &counters) {
    m_counters = counters;
    m_counters_isSet = true;
}

bool OAIGetJobResult_job::is_counters_Set() const{
    return m_counters_isSet;
}

bool OAIGetJobResult_job::is_counters_Valid() const{
    return m_counters_isValid;
}

QString OAIGetJobResult_job::getMessage() const {
    return m_message;
}
void OAIGetJobResult_job::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetJobResult_job::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetJobResult_job::is_message_Valid() const{
    return m_message_isValid;
}

OAIJob_device OAIGetJobResult_job::getDevice() const {
    return m_device;
}
void OAIGetJobResult_job::setDevice(const OAIJob_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIGetJobResult_job::is_device_Set() const{
    return m_device_isSet;
}

bool OAIGetJobResult_job::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIGetJobResult_job::getInstanceArn() const {
    return m_instance_arn;
}
void OAIGetJobResult_job::setInstanceArn(const QString &instance_arn) {
    m_instance_arn = instance_arn;
    m_instance_arn_isSet = true;
}

bool OAIGetJobResult_job::is_instance_arn_Set() const{
    return m_instance_arn_isSet;
}

bool OAIGetJobResult_job::is_instance_arn_Valid() const{
    return m_instance_arn_isValid;
}

OAIJob_deviceMinutes OAIGetJobResult_job::getDeviceMinutes() const {
    return m_device_minutes;
}
void OAIGetJobResult_job::setDeviceMinutes(const OAIJob_deviceMinutes &device_minutes) {
    m_device_minutes = device_minutes;
    m_device_minutes_isSet = true;
}

bool OAIGetJobResult_job::is_device_minutes_Set() const{
    return m_device_minutes_isSet;
}

bool OAIGetJobResult_job::is_device_minutes_Valid() const{
    return m_device_minutes_isValid;
}

QString OAIGetJobResult_job::getVideoEndpoint() const {
    return m_video_endpoint;
}
void OAIGetJobResult_job::setVideoEndpoint(const QString &video_endpoint) {
    m_video_endpoint = video_endpoint;
    m_video_endpoint_isSet = true;
}

bool OAIGetJobResult_job::is_video_endpoint_Set() const{
    return m_video_endpoint_isSet;
}

bool OAIGetJobResult_job::is_video_endpoint_Valid() const{
    return m_video_endpoint_isValid;
}

bool OAIGetJobResult_job::getVideoCapture() const {
    return m_video_capture;
}
void OAIGetJobResult_job::setVideoCapture(const bool &video_capture) {
    m_video_capture = video_capture;
    m_video_capture_isSet = true;
}

bool OAIGetJobResult_job::is_video_capture_Set() const{
    return m_video_capture_isSet;
}

bool OAIGetJobResult_job::is_video_capture_Valid() const{
    return m_video_capture_isValid;
}

bool OAIGetJobResult_job::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_minutes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_capture_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetJobResult_job::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
