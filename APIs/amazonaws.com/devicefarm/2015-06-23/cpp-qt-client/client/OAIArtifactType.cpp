/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactType::OAIArtifactType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactType::OAIArtifactType() {
    this->initializeModel();
}

OAIArtifactType::~OAIArtifactType() {}

void OAIArtifactType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArtifactType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArtifactType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCREENSHOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::SCREENSHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVICE_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::DEVICE_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MESSAGE_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::MESSAGE_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIDEO_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::VIDEO_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESULT_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::RESULT_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::SERVICE_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEBKIT_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::WEBKIT_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTRUMENTATION_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::INSTRUMENTATION_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXERCISER_MONKEY_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::EXERCISER_MONKEY_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CALABASH_JSON_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::CALABASH_JSON_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CALABASH_PRETTY_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::CALABASH_PRETTY_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CALABASH_STANDARD_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::CALABASH_STANDARD_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CALABASH_JAVA_XML_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::CALABASH_JAVA_XML_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTOMATION_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::AUTOMATION_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_SERVER_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::APPIUM_SERVER_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::APPIUM_JAVA_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_JAVA_XML_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::APPIUM_JAVA_XML_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_PYTHON_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::APPIUM_PYTHON_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPIUM_PYTHON_XML_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::APPIUM_PYTHON_XML_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPLORER_EVENT_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::EXPLORER_EVENT_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPLORER_SUMMARY_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::EXPLORER_SUMMARY_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPLICATION_CRASH_REPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::APPLICATION_CRASH_REPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XCTEST_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::XCTEST_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIDEO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::VIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOMER_ARTIFACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::CUSTOMER_ARTIFACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOMER_ARTIFACT_LOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::CUSTOMER_ARTIFACT_LOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TESTSPEC_OUTPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArtifactType::TESTSPEC_OUTPUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArtifactType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArtifactType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArtifactType::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIArtifactType::SCREENSHOT:
            val = "SCREENSHOT";
            break;
        case eOAIArtifactType::DEVICE_LOG:
            val = "DEVICE_LOG";
            break;
        case eOAIArtifactType::MESSAGE_LOG:
            val = "MESSAGE_LOG";
            break;
        case eOAIArtifactType::VIDEO_LOG:
            val = "VIDEO_LOG";
            break;
        case eOAIArtifactType::RESULT_LOG:
            val = "RESULT_LOG";
            break;
        case eOAIArtifactType::SERVICE_LOG:
            val = "SERVICE_LOG";
            break;
        case eOAIArtifactType::WEBKIT_LOG:
            val = "WEBKIT_LOG";
            break;
        case eOAIArtifactType::INSTRUMENTATION_OUTPUT:
            val = "INSTRUMENTATION_OUTPUT";
            break;
        case eOAIArtifactType::EXERCISER_MONKEY_OUTPUT:
            val = "EXERCISER_MONKEY_OUTPUT";
            break;
        case eOAIArtifactType::CALABASH_JSON_OUTPUT:
            val = "CALABASH_JSON_OUTPUT";
            break;
        case eOAIArtifactType::CALABASH_PRETTY_OUTPUT:
            val = "CALABASH_PRETTY_OUTPUT";
            break;
        case eOAIArtifactType::CALABASH_STANDARD_OUTPUT:
            val = "CALABASH_STANDARD_OUTPUT";
            break;
        case eOAIArtifactType::CALABASH_JAVA_XML_OUTPUT:
            val = "CALABASH_JAVA_XML_OUTPUT";
            break;
        case eOAIArtifactType::AUTOMATION_OUTPUT:
            val = "AUTOMATION_OUTPUT";
            break;
        case eOAIArtifactType::APPIUM_SERVER_OUTPUT:
            val = "APPIUM_SERVER_OUTPUT";
            break;
        case eOAIArtifactType::APPIUM_JAVA_OUTPUT:
            val = "APPIUM_JAVA_OUTPUT";
            break;
        case eOAIArtifactType::APPIUM_JAVA_XML_OUTPUT:
            val = "APPIUM_JAVA_XML_OUTPUT";
            break;
        case eOAIArtifactType::APPIUM_PYTHON_OUTPUT:
            val = "APPIUM_PYTHON_OUTPUT";
            break;
        case eOAIArtifactType::APPIUM_PYTHON_XML_OUTPUT:
            val = "APPIUM_PYTHON_XML_OUTPUT";
            break;
        case eOAIArtifactType::EXPLORER_EVENT_LOG:
            val = "EXPLORER_EVENT_LOG";
            break;
        case eOAIArtifactType::EXPLORER_SUMMARY_LOG:
            val = "EXPLORER_SUMMARY_LOG";
            break;
        case eOAIArtifactType::APPLICATION_CRASH_REPORT:
            val = "APPLICATION_CRASH_REPORT";
            break;
        case eOAIArtifactType::XCTEST_LOG:
            val = "XCTEST_LOG";
            break;
        case eOAIArtifactType::VIDEO:
            val = "VIDEO";
            break;
        case eOAIArtifactType::CUSTOMER_ARTIFACT:
            val = "CUSTOMER_ARTIFACT";
            break;
        case eOAIArtifactType::CUSTOMER_ARTIFACT_LOG:
            val = "CUSTOMER_ARTIFACT_LOG";
            break;
        case eOAIArtifactType::TESTSPEC_OUTPUT:
            val = "TESTSPEC_OUTPUT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArtifactType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArtifactType::eOAIArtifactType OAIArtifactType::getValue() const {
    return m_value;
}

void OAIArtifactType::setValue(const OAIArtifactType::eOAIArtifactType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArtifactType::isSet() const {
    
    return m_value_isSet;
}

bool OAIArtifactType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
