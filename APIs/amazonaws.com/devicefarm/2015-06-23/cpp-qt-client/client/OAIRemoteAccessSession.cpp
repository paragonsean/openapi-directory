/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteAccessSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteAccessSession::OAIRemoteAccessSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteAccessSession::OAIRemoteAccessSession() {
    this->initializeModel();
}

OAIRemoteAccessSession::~OAIRemoteAccessSession() {}

void OAIRemoteAccessSession::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_stopped_isSet = false;
    m_stopped_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_instance_arn_isSet = false;
    m_instance_arn_isValid = false;

    m_remote_debug_enabled_isSet = false;
    m_remote_debug_enabled_isValid = false;

    m_remote_record_enabled_isSet = false;
    m_remote_record_enabled_isValid = false;

    m_remote_record_app_arn_isSet = false;
    m_remote_record_app_arn_isValid = false;

    m_host_address_isSet = false;
    m_host_address_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_billing_method_isSet = false;
    m_billing_method_isValid = false;

    m_device_minutes_isSet = false;
    m_device_minutes_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_device_udid_isSet = false;
    m_device_udid_isValid = false;

    m_interaction_mode_isSet = false;
    m_interaction_mode_isValid = false;

    m_skip_app_resign_isSet = false;
    m_skip_app_resign_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;
}

void OAIRemoteAccessSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteAccessSession::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_stopped_isValid = ::OpenAPI::fromJsonValue(m_stopped, json[QString("stopped")]);
    m_stopped_isSet = !json[QString("stopped")].isNull() && m_stopped_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_instance_arn, json[QString("instanceArn")]);
    m_instance_arn_isSet = !json[QString("instanceArn")].isNull() && m_instance_arn_isValid;

    m_remote_debug_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_debug_enabled, json[QString("remoteDebugEnabled")]);
    m_remote_debug_enabled_isSet = !json[QString("remoteDebugEnabled")].isNull() && m_remote_debug_enabled_isValid;

    m_remote_record_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_record_enabled, json[QString("remoteRecordEnabled")]);
    m_remote_record_enabled_isSet = !json[QString("remoteRecordEnabled")].isNull() && m_remote_record_enabled_isValid;

    m_remote_record_app_arn_isValid = ::OpenAPI::fromJsonValue(m_remote_record_app_arn, json[QString("remoteRecordAppArn")]);
    m_remote_record_app_arn_isSet = !json[QString("remoteRecordAppArn")].isNull() && m_remote_record_app_arn_isValid;

    m_host_address_isValid = ::OpenAPI::fromJsonValue(m_host_address, json[QString("hostAddress")]);
    m_host_address_isSet = !json[QString("hostAddress")].isNull() && m_host_address_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_billing_method_isValid = ::OpenAPI::fromJsonValue(m_billing_method, json[QString("billingMethod")]);
    m_billing_method_isSet = !json[QString("billingMethod")].isNull() && m_billing_method_isValid;

    m_device_minutes_isValid = ::OpenAPI::fromJsonValue(m_device_minutes, json[QString("deviceMinutes")]);
    m_device_minutes_isSet = !json[QString("deviceMinutes")].isNull() && m_device_minutes_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_device_udid_isValid = ::OpenAPI::fromJsonValue(m_device_udid, json[QString("deviceUdid")]);
    m_device_udid_isSet = !json[QString("deviceUdid")].isNull() && m_device_udid_isValid;

    m_interaction_mode_isValid = ::OpenAPI::fromJsonValue(m_interaction_mode, json[QString("interactionMode")]);
    m_interaction_mode_isSet = !json[QString("interactionMode")].isNull() && m_interaction_mode_isValid;

    m_skip_app_resign_isValid = ::OpenAPI::fromJsonValue(m_skip_app_resign, json[QString("skipAppResign")]);
    m_skip_app_resign_isSet = !json[QString("skipAppResign")].isNull() && m_skip_app_resign_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("vpcConfig")]);
    m_vpc_config_isSet = !json[QString("vpcConfig")].isNull() && m_vpc_config_isValid;
}

QString OAIRemoteAccessSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteAccessSession::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_stopped_isSet) {
        obj.insert(QString("stopped"), ::OpenAPI::toJsonValue(m_stopped));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_instance_arn_isSet) {
        obj.insert(QString("instanceArn"), ::OpenAPI::toJsonValue(m_instance_arn));
    }
    if (m_remote_debug_enabled_isSet) {
        obj.insert(QString("remoteDebugEnabled"), ::OpenAPI::toJsonValue(m_remote_debug_enabled));
    }
    if (m_remote_record_enabled_isSet) {
        obj.insert(QString("remoteRecordEnabled"), ::OpenAPI::toJsonValue(m_remote_record_enabled));
    }
    if (m_remote_record_app_arn_isSet) {
        obj.insert(QString("remoteRecordAppArn"), ::OpenAPI::toJsonValue(m_remote_record_app_arn));
    }
    if (m_host_address_isSet) {
        obj.insert(QString("hostAddress"), ::OpenAPI::toJsonValue(m_host_address));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_billing_method.isSet()) {
        obj.insert(QString("billingMethod"), ::OpenAPI::toJsonValue(m_billing_method));
    }
    if (m_device_minutes.isSet()) {
        obj.insert(QString("deviceMinutes"), ::OpenAPI::toJsonValue(m_device_minutes));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_device_udid_isSet) {
        obj.insert(QString("deviceUdid"), ::OpenAPI::toJsonValue(m_device_udid));
    }
    if (m_interaction_mode.isSet()) {
        obj.insert(QString("interactionMode"), ::OpenAPI::toJsonValue(m_interaction_mode));
    }
    if (m_skip_app_resign_isSet) {
        obj.insert(QString("skipAppResign"), ::OpenAPI::toJsonValue(m_skip_app_resign));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("vpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    return obj;
}

QString OAIRemoteAccessSession::getArn() const {
    return m_arn;
}
void OAIRemoteAccessSession::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRemoteAccessSession::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRemoteAccessSession::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIRemoteAccessSession::getName() const {
    return m_name;
}
void OAIRemoteAccessSession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRemoteAccessSession::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRemoteAccessSession::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIRemoteAccessSession::getCreated() const {
    return m_created;
}
void OAIRemoteAccessSession::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRemoteAccessSession::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRemoteAccessSession::is_created_Valid() const{
    return m_created_isValid;
}

OAIExecutionStatus OAIRemoteAccessSession::getStatus() const {
    return m_status;
}
void OAIRemoteAccessSession::setStatus(const OAIExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRemoteAccessSession::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRemoteAccessSession::is_status_Valid() const{
    return m_status_isValid;
}

OAIExecutionResult OAIRemoteAccessSession::getResult() const {
    return m_result;
}
void OAIRemoteAccessSession::setResult(const OAIExecutionResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIRemoteAccessSession::is_result_Set() const{
    return m_result_isSet;
}

bool OAIRemoteAccessSession::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIRemoteAccessSession::getMessage() const {
    return m_message;
}
void OAIRemoteAccessSession::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRemoteAccessSession::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRemoteAccessSession::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIRemoteAccessSession::getStarted() const {
    return m_started;
}
void OAIRemoteAccessSession::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIRemoteAccessSession::is_started_Set() const{
    return m_started_isSet;
}

bool OAIRemoteAccessSession::is_started_Valid() const{
    return m_started_isValid;
}

QDateTime OAIRemoteAccessSession::getStopped() const {
    return m_stopped;
}
void OAIRemoteAccessSession::setStopped(const QDateTime &stopped) {
    m_stopped = stopped;
    m_stopped_isSet = true;
}

bool OAIRemoteAccessSession::is_stopped_Set() const{
    return m_stopped_isSet;
}

bool OAIRemoteAccessSession::is_stopped_Valid() const{
    return m_stopped_isValid;
}

OAIRemoteAccessSession_device OAIRemoteAccessSession::getDevice() const {
    return m_device;
}
void OAIRemoteAccessSession::setDevice(const OAIRemoteAccessSession_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIRemoteAccessSession::is_device_Set() const{
    return m_device_isSet;
}

bool OAIRemoteAccessSession::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIRemoteAccessSession::getInstanceArn() const {
    return m_instance_arn;
}
void OAIRemoteAccessSession::setInstanceArn(const QString &instance_arn) {
    m_instance_arn = instance_arn;
    m_instance_arn_isSet = true;
}

bool OAIRemoteAccessSession::is_instance_arn_Set() const{
    return m_instance_arn_isSet;
}

bool OAIRemoteAccessSession::is_instance_arn_Valid() const{
    return m_instance_arn_isValid;
}

bool OAIRemoteAccessSession::getRemoteDebugEnabled() const {
    return m_remote_debug_enabled;
}
void OAIRemoteAccessSession::setRemoteDebugEnabled(const bool &remote_debug_enabled) {
    m_remote_debug_enabled = remote_debug_enabled;
    m_remote_debug_enabled_isSet = true;
}

bool OAIRemoteAccessSession::is_remote_debug_enabled_Set() const{
    return m_remote_debug_enabled_isSet;
}

bool OAIRemoteAccessSession::is_remote_debug_enabled_Valid() const{
    return m_remote_debug_enabled_isValid;
}

bool OAIRemoteAccessSession::getRemoteRecordEnabled() const {
    return m_remote_record_enabled;
}
void OAIRemoteAccessSession::setRemoteRecordEnabled(const bool &remote_record_enabled) {
    m_remote_record_enabled = remote_record_enabled;
    m_remote_record_enabled_isSet = true;
}

bool OAIRemoteAccessSession::is_remote_record_enabled_Set() const{
    return m_remote_record_enabled_isSet;
}

bool OAIRemoteAccessSession::is_remote_record_enabled_Valid() const{
    return m_remote_record_enabled_isValid;
}

QString OAIRemoteAccessSession::getRemoteRecordAppArn() const {
    return m_remote_record_app_arn;
}
void OAIRemoteAccessSession::setRemoteRecordAppArn(const QString &remote_record_app_arn) {
    m_remote_record_app_arn = remote_record_app_arn;
    m_remote_record_app_arn_isSet = true;
}

bool OAIRemoteAccessSession::is_remote_record_app_arn_Set() const{
    return m_remote_record_app_arn_isSet;
}

bool OAIRemoteAccessSession::is_remote_record_app_arn_Valid() const{
    return m_remote_record_app_arn_isValid;
}

QString OAIRemoteAccessSession::getHostAddress() const {
    return m_host_address;
}
void OAIRemoteAccessSession::setHostAddress(const QString &host_address) {
    m_host_address = host_address;
    m_host_address_isSet = true;
}

bool OAIRemoteAccessSession::is_host_address_Set() const{
    return m_host_address_isSet;
}

bool OAIRemoteAccessSession::is_host_address_Valid() const{
    return m_host_address_isValid;
}

QString OAIRemoteAccessSession::getClientId() const {
    return m_client_id;
}
void OAIRemoteAccessSession::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIRemoteAccessSession::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIRemoteAccessSession::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAIBillingMethod OAIRemoteAccessSession::getBillingMethod() const {
    return m_billing_method;
}
void OAIRemoteAccessSession::setBillingMethod(const OAIBillingMethod &billing_method) {
    m_billing_method = billing_method;
    m_billing_method_isSet = true;
}

bool OAIRemoteAccessSession::is_billing_method_Set() const{
    return m_billing_method_isSet;
}

bool OAIRemoteAccessSession::is_billing_method_Valid() const{
    return m_billing_method_isValid;
}

OAIRemoteAccessSession_deviceMinutes OAIRemoteAccessSession::getDeviceMinutes() const {
    return m_device_minutes;
}
void OAIRemoteAccessSession::setDeviceMinutes(const OAIRemoteAccessSession_deviceMinutes &device_minutes) {
    m_device_minutes = device_minutes;
    m_device_minutes_isSet = true;
}

bool OAIRemoteAccessSession::is_device_minutes_Set() const{
    return m_device_minutes_isSet;
}

bool OAIRemoteAccessSession::is_device_minutes_Valid() const{
    return m_device_minutes_isValid;
}

QString OAIRemoteAccessSession::getEndpoint() const {
    return m_endpoint;
}
void OAIRemoteAccessSession::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIRemoteAccessSession::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIRemoteAccessSession::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIRemoteAccessSession::getDeviceUdid() const {
    return m_device_udid;
}
void OAIRemoteAccessSession::setDeviceUdid(const QString &device_udid) {
    m_device_udid = device_udid;
    m_device_udid_isSet = true;
}

bool OAIRemoteAccessSession::is_device_udid_Set() const{
    return m_device_udid_isSet;
}

bool OAIRemoteAccessSession::is_device_udid_Valid() const{
    return m_device_udid_isValid;
}

OAIInteractionMode OAIRemoteAccessSession::getInteractionMode() const {
    return m_interaction_mode;
}
void OAIRemoteAccessSession::setInteractionMode(const OAIInteractionMode &interaction_mode) {
    m_interaction_mode = interaction_mode;
    m_interaction_mode_isSet = true;
}

bool OAIRemoteAccessSession::is_interaction_mode_Set() const{
    return m_interaction_mode_isSet;
}

bool OAIRemoteAccessSession::is_interaction_mode_Valid() const{
    return m_interaction_mode_isValid;
}

bool OAIRemoteAccessSession::getSkipAppResign() const {
    return m_skip_app_resign;
}
void OAIRemoteAccessSession::setSkipAppResign(const bool &skip_app_resign) {
    m_skip_app_resign = skip_app_resign;
    m_skip_app_resign_isSet = true;
}

bool OAIRemoteAccessSession::is_skip_app_resign_Set() const{
    return m_skip_app_resign_isSet;
}

bool OAIRemoteAccessSession::is_skip_app_resign_Valid() const{
    return m_skip_app_resign_isValid;
}

OAICreateProjectRequest_vpcConfig OAIRemoteAccessSession::getVpcConfig() const {
    return m_vpc_config;
}
void OAIRemoteAccessSession::setVpcConfig(const OAICreateProjectRequest_vpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIRemoteAccessSession::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIRemoteAccessSession::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

bool OAIRemoteAccessSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_debug_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_record_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_record_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_minutes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_udid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_app_resign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteAccessSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
