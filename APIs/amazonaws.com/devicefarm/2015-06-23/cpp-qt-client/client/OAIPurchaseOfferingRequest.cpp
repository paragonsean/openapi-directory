/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseOfferingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseOfferingRequest::OAIPurchaseOfferingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseOfferingRequest::OAIPurchaseOfferingRequest() {
    this->initializeModel();
}

OAIPurchaseOfferingRequest::~OAIPurchaseOfferingRequest() {}

void OAIPurchaseOfferingRequest::initializeModel() {

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_offering_promotion_id_isSet = false;
    m_offering_promotion_id_isValid = false;
}

void OAIPurchaseOfferingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseOfferingRequest::fromJsonObject(QJsonObject json) {

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("offeringId")]);
    m_offering_id_isSet = !json[QString("offeringId")].isNull() && m_offering_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_offering_promotion_id_isValid = ::OpenAPI::fromJsonValue(m_offering_promotion_id, json[QString("offeringPromotionId")]);
    m_offering_promotion_id_isSet = !json[QString("offeringPromotionId")].isNull() && m_offering_promotion_id_isValid;
}

QString OAIPurchaseOfferingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseOfferingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_offering_id_isSet) {
        obj.insert(QString("offeringId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_offering_promotion_id_isSet) {
        obj.insert(QString("offeringPromotionId"), ::OpenAPI::toJsonValue(m_offering_promotion_id));
    }
    return obj;
}

QString OAIPurchaseOfferingRequest::getOfferingId() const {
    return m_offering_id;
}
void OAIPurchaseOfferingRequest::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAIPurchaseOfferingRequest::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAIPurchaseOfferingRequest::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

qint32 OAIPurchaseOfferingRequest::getQuantity() const {
    return m_quantity;
}
void OAIPurchaseOfferingRequest::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIPurchaseOfferingRequest::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIPurchaseOfferingRequest::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIPurchaseOfferingRequest::getOfferingPromotionId() const {
    return m_offering_promotion_id;
}
void OAIPurchaseOfferingRequest::setOfferingPromotionId(const QString &offering_promotion_id) {
    m_offering_promotion_id = offering_promotion_id;
    m_offering_promotion_id_isSet = true;
}

bool OAIPurchaseOfferingRequest::is_offering_promotion_id_Set() const{
    return m_offering_promotion_id_isSet;
}

bool OAIPurchaseOfferingRequest::is_offering_promotion_id_Valid() const{
    return m_offering_promotion_id_isValid;
}

bool OAIPurchaseOfferingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_promotion_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseOfferingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_offering_id_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
