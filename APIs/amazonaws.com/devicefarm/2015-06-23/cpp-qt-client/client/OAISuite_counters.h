/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuite_counters.h
 *
 * 
 */

#ifndef OAISuite_counters_H
#define OAISuite_counters_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISuite_counters : public OAIObject {
public:
    OAISuite_counters();
    OAISuite_counters(QString json);
    ~OAISuite_counters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    qint32 getPassed() const;
    void setPassed(const qint32 &passed);
    bool is_passed_Set() const;
    bool is_passed_Valid() const;

    qint32 getFailed() const;
    void setFailed(const qint32 &failed);
    bool is_failed_Set() const;
    bool is_failed_Valid() const;

    qint32 getWarned() const;
    void setWarned(const qint32 &warned);
    bool is_warned_Set() const;
    bool is_warned_Valid() const;

    qint32 getErrored() const;
    void setErrored(const qint32 &errored);
    bool is_errored_Set() const;
    bool is_errored_Valid() const;

    qint32 getStopped() const;
    void setStopped(const qint32 &stopped);
    bool is_stopped_Set() const;
    bool is_stopped_Valid() const;

    qint32 getSkipped() const;
    void setSkipped(const qint32 &skipped);
    bool is_skipped_Set() const;
    bool is_skipped_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    qint32 m_passed;
    bool m_passed_isSet;
    bool m_passed_isValid;

    qint32 m_failed;
    bool m_failed_isSet;
    bool m_failed_isValid;

    qint32 m_warned;
    bool m_warned_isSet;
    bool m_warned_isValid;

    qint32 m_errored;
    bool m_errored_isSet;
    bool m_errored_isValid;

    qint32 m_stopped;
    bool m_stopped_isSet;
    bool m_stopped_isValid;

    qint32 m_skipped;
    bool m_skipped_isSet;
    bool m_skipped_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuite_counters)

#endif // OAISuite_counters_H
