/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleRunConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleRunConfiguration::OAIScheduleRunConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleRunConfiguration::OAIScheduleRunConfiguration() {
    this->initializeModel();
}

OAIScheduleRunConfiguration::~OAIScheduleRunConfiguration() {}

void OAIScheduleRunConfiguration::initializeModel() {

    m_extra_data_package_arn_isSet = false;
    m_extra_data_package_arn_isValid = false;

    m_network_profile_arn_isSet = false;
    m_network_profile_arn_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_vpce_configuration_arns_isSet = false;
    m_vpce_configuration_arns_isValid = false;

    m_customer_artifact_paths_isSet = false;
    m_customer_artifact_paths_isValid = false;

    m_radios_isSet = false;
    m_radios_isValid = false;

    m_auxiliary_apps_isSet = false;
    m_auxiliary_apps_isValid = false;

    m_billing_method_isSet = false;
    m_billing_method_isValid = false;
}

void OAIScheduleRunConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleRunConfiguration::fromJsonObject(QJsonObject json) {

    m_extra_data_package_arn_isValid = ::OpenAPI::fromJsonValue(m_extra_data_package_arn, json[QString("extraDataPackageArn")]);
    m_extra_data_package_arn_isSet = !json[QString("extraDataPackageArn")].isNull() && m_extra_data_package_arn_isValid;

    m_network_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_network_profile_arn, json[QString("networkProfileArn")]);
    m_network_profile_arn_isSet = !json[QString("networkProfileArn")].isNull() && m_network_profile_arn_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_vpce_configuration_arns_isValid = ::OpenAPI::fromJsonValue(m_vpce_configuration_arns, json[QString("vpceConfigurationArns")]);
    m_vpce_configuration_arns_isSet = !json[QString("vpceConfigurationArns")].isNull() && m_vpce_configuration_arns_isValid;

    m_customer_artifact_paths_isValid = ::OpenAPI::fromJsonValue(m_customer_artifact_paths, json[QString("customerArtifactPaths")]);
    m_customer_artifact_paths_isSet = !json[QString("customerArtifactPaths")].isNull() && m_customer_artifact_paths_isValid;

    m_radios_isValid = ::OpenAPI::fromJsonValue(m_radios, json[QString("radios")]);
    m_radios_isSet = !json[QString("radios")].isNull() && m_radios_isValid;

    m_auxiliary_apps_isValid = ::OpenAPI::fromJsonValue(m_auxiliary_apps, json[QString("auxiliaryApps")]);
    m_auxiliary_apps_isSet = !json[QString("auxiliaryApps")].isNull() && m_auxiliary_apps_isValid;

    m_billing_method_isValid = ::OpenAPI::fromJsonValue(m_billing_method, json[QString("billingMethod")]);
    m_billing_method_isSet = !json[QString("billingMethod")].isNull() && m_billing_method_isValid;
}

QString OAIScheduleRunConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleRunConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_extra_data_package_arn_isSet) {
        obj.insert(QString("extraDataPackageArn"), ::OpenAPI::toJsonValue(m_extra_data_package_arn));
    }
    if (m_network_profile_arn_isSet) {
        obj.insert(QString("networkProfileArn"), ::OpenAPI::toJsonValue(m_network_profile_arn));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_vpce_configuration_arns.isSet()) {
        obj.insert(QString("vpceConfigurationArns"), ::OpenAPI::toJsonValue(m_vpce_configuration_arns));
    }
    if (m_customer_artifact_paths.isSet()) {
        obj.insert(QString("customerArtifactPaths"), ::OpenAPI::toJsonValue(m_customer_artifact_paths));
    }
    if (m_radios.isSet()) {
        obj.insert(QString("radios"), ::OpenAPI::toJsonValue(m_radios));
    }
    if (m_auxiliary_apps.isSet()) {
        obj.insert(QString("auxiliaryApps"), ::OpenAPI::toJsonValue(m_auxiliary_apps));
    }
    if (m_billing_method.isSet()) {
        obj.insert(QString("billingMethod"), ::OpenAPI::toJsonValue(m_billing_method));
    }
    return obj;
}

QString OAIScheduleRunConfiguration::getExtraDataPackageArn() const {
    return m_extra_data_package_arn;
}
void OAIScheduleRunConfiguration::setExtraDataPackageArn(const QString &extra_data_package_arn) {
    m_extra_data_package_arn = extra_data_package_arn;
    m_extra_data_package_arn_isSet = true;
}

bool OAIScheduleRunConfiguration::is_extra_data_package_arn_Set() const{
    return m_extra_data_package_arn_isSet;
}

bool OAIScheduleRunConfiguration::is_extra_data_package_arn_Valid() const{
    return m_extra_data_package_arn_isValid;
}

QString OAIScheduleRunConfiguration::getNetworkProfileArn() const {
    return m_network_profile_arn;
}
void OAIScheduleRunConfiguration::setNetworkProfileArn(const QString &network_profile_arn) {
    m_network_profile_arn = network_profile_arn;
    m_network_profile_arn_isSet = true;
}

bool OAIScheduleRunConfiguration::is_network_profile_arn_Set() const{
    return m_network_profile_arn_isSet;
}

bool OAIScheduleRunConfiguration::is_network_profile_arn_Valid() const{
    return m_network_profile_arn_isValid;
}

QString OAIScheduleRunConfiguration::getLocale() const {
    return m_locale;
}
void OAIScheduleRunConfiguration::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIScheduleRunConfiguration::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIScheduleRunConfiguration::is_locale_Valid() const{
    return m_locale_isValid;
}

OAIScheduleRunConfiguration_location OAIScheduleRunConfiguration::getLocation() const {
    return m_location;
}
void OAIScheduleRunConfiguration::setLocation(const OAIScheduleRunConfiguration_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIScheduleRunConfiguration::is_location_Set() const{
    return m_location_isSet;
}

bool OAIScheduleRunConfiguration::is_location_Valid() const{
    return m_location_isValid;
}

QList OAIScheduleRunConfiguration::getVpceConfigurationArns() const {
    return m_vpce_configuration_arns;
}
void OAIScheduleRunConfiguration::setVpceConfigurationArns(const QList &vpce_configuration_arns) {
    m_vpce_configuration_arns = vpce_configuration_arns;
    m_vpce_configuration_arns_isSet = true;
}

bool OAIScheduleRunConfiguration::is_vpce_configuration_arns_Set() const{
    return m_vpce_configuration_arns_isSet;
}

bool OAIScheduleRunConfiguration::is_vpce_configuration_arns_Valid() const{
    return m_vpce_configuration_arns_isValid;
}

OAIScheduleRunConfiguration_customerArtifactPaths OAIScheduleRunConfiguration::getCustomerArtifactPaths() const {
    return m_customer_artifact_paths;
}
void OAIScheduleRunConfiguration::setCustomerArtifactPaths(const OAIScheduleRunConfiguration_customerArtifactPaths &customer_artifact_paths) {
    m_customer_artifact_paths = customer_artifact_paths;
    m_customer_artifact_paths_isSet = true;
}

bool OAIScheduleRunConfiguration::is_customer_artifact_paths_Set() const{
    return m_customer_artifact_paths_isSet;
}

bool OAIScheduleRunConfiguration::is_customer_artifact_paths_Valid() const{
    return m_customer_artifact_paths_isValid;
}

OAIScheduleRunConfiguration_radios OAIScheduleRunConfiguration::getRadios() const {
    return m_radios;
}
void OAIScheduleRunConfiguration::setRadios(const OAIScheduleRunConfiguration_radios &radios) {
    m_radios = radios;
    m_radios_isSet = true;
}

bool OAIScheduleRunConfiguration::is_radios_Set() const{
    return m_radios_isSet;
}

bool OAIScheduleRunConfiguration::is_radios_Valid() const{
    return m_radios_isValid;
}

QList OAIScheduleRunConfiguration::getAuxiliaryApps() const {
    return m_auxiliary_apps;
}
void OAIScheduleRunConfiguration::setAuxiliaryApps(const QList &auxiliary_apps) {
    m_auxiliary_apps = auxiliary_apps;
    m_auxiliary_apps_isSet = true;
}

bool OAIScheduleRunConfiguration::is_auxiliary_apps_Set() const{
    return m_auxiliary_apps_isSet;
}

bool OAIScheduleRunConfiguration::is_auxiliary_apps_Valid() const{
    return m_auxiliary_apps_isValid;
}

OAIBillingMethod OAIScheduleRunConfiguration::getBillingMethod() const {
    return m_billing_method;
}
void OAIScheduleRunConfiguration::setBillingMethod(const OAIBillingMethod &billing_method) {
    m_billing_method = billing_method;
    m_billing_method_isSet = true;
}

bool OAIScheduleRunConfiguration::is_billing_method_Set() const{
    return m_billing_method_isSet;
}

bool OAIScheduleRunConfiguration::is_billing_method_Valid() const{
    return m_billing_method_isValid;
}

bool OAIScheduleRunConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extra_data_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpce_configuration_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_artifact_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auxiliary_apps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleRunConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
