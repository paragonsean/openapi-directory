/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRunResult_run.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRunResult_run::OAIGetRunResult_run(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRunResult_run::OAIGetRunResult_run() {
    this->initializeModel();
}

OAIGetRunResult_run::~OAIGetRunResult_run() {}

void OAIGetRunResult_run::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_stopped_isSet = false;
    m_stopped_isValid = false;

    m_counters_isSet = false;
    m_counters_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_total_jobs_isSet = false;
    m_total_jobs_isValid = false;

    m_completed_jobs_isSet = false;
    m_completed_jobs_isValid = false;

    m_billing_method_isSet = false;
    m_billing_method_isValid = false;

    m_device_minutes_isSet = false;
    m_device_minutes_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_parsing_result_url_isSet = false;
    m_parsing_result_url_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_seed_isSet = false;
    m_seed_isValid = false;

    m_app_upload_isSet = false;
    m_app_upload_isValid = false;

    m_event_count_isSet = false;
    m_event_count_isValid = false;

    m_job_timeout_minutes_isSet = false;
    m_job_timeout_minutes_isValid = false;

    m_device_pool_arn_isSet = false;
    m_device_pool_arn_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_radios_isSet = false;
    m_radios_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_customer_artifact_paths_isSet = false;
    m_customer_artifact_paths_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;

    m_skip_app_resign_isSet = false;
    m_skip_app_resign_isValid = false;

    m_test_spec_arn_isSet = false;
    m_test_spec_arn_isValid = false;

    m_device_selection_result_isSet = false;
    m_device_selection_result_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;
}

void OAIGetRunResult_run::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRunResult_run::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_stopped_isValid = ::OpenAPI::fromJsonValue(m_stopped, json[QString("stopped")]);
    m_stopped_isSet = !json[QString("stopped")].isNull() && m_stopped_isValid;

    m_counters_isValid = ::OpenAPI::fromJsonValue(m_counters, json[QString("counters")]);
    m_counters_isSet = !json[QString("counters")].isNull() && m_counters_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_total_jobs_isValid = ::OpenAPI::fromJsonValue(m_total_jobs, json[QString("totalJobs")]);
    m_total_jobs_isSet = !json[QString("totalJobs")].isNull() && m_total_jobs_isValid;

    m_completed_jobs_isValid = ::OpenAPI::fromJsonValue(m_completed_jobs, json[QString("completedJobs")]);
    m_completed_jobs_isSet = !json[QString("completedJobs")].isNull() && m_completed_jobs_isValid;

    m_billing_method_isValid = ::OpenAPI::fromJsonValue(m_billing_method, json[QString("billingMethod")]);
    m_billing_method_isSet = !json[QString("billingMethod")].isNull() && m_billing_method_isValid;

    m_device_minutes_isValid = ::OpenAPI::fromJsonValue(m_device_minutes, json[QString("deviceMinutes")]);
    m_device_minutes_isSet = !json[QString("deviceMinutes")].isNull() && m_device_minutes_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_parsing_result_url_isValid = ::OpenAPI::fromJsonValue(m_parsing_result_url, json[QString("parsingResultUrl")]);
    m_parsing_result_url_isSet = !json[QString("parsingResultUrl")].isNull() && m_parsing_result_url_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_seed_isValid = ::OpenAPI::fromJsonValue(m_seed, json[QString("seed")]);
    m_seed_isSet = !json[QString("seed")].isNull() && m_seed_isValid;

    m_app_upload_isValid = ::OpenAPI::fromJsonValue(m_app_upload, json[QString("appUpload")]);
    m_app_upload_isSet = !json[QString("appUpload")].isNull() && m_app_upload_isValid;

    m_event_count_isValid = ::OpenAPI::fromJsonValue(m_event_count, json[QString("eventCount")]);
    m_event_count_isSet = !json[QString("eventCount")].isNull() && m_event_count_isValid;

    m_job_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_job_timeout_minutes, json[QString("jobTimeoutMinutes")]);
    m_job_timeout_minutes_isSet = !json[QString("jobTimeoutMinutes")].isNull() && m_job_timeout_minutes_isValid;

    m_device_pool_arn_isValid = ::OpenAPI::fromJsonValue(m_device_pool_arn, json[QString("devicePoolArn")]);
    m_device_pool_arn_isSet = !json[QString("devicePoolArn")].isNull() && m_device_pool_arn_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_radios_isValid = ::OpenAPI::fromJsonValue(m_radios, json[QString("radios")]);
    m_radios_isSet = !json[QString("radios")].isNull() && m_radios_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_customer_artifact_paths_isValid = ::OpenAPI::fromJsonValue(m_customer_artifact_paths, json[QString("customerArtifactPaths")]);
    m_customer_artifact_paths_isSet = !json[QString("customerArtifactPaths")].isNull() && m_customer_artifact_paths_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("webUrl")]);
    m_web_url_isSet = !json[QString("webUrl")].isNull() && m_web_url_isValid;

    m_skip_app_resign_isValid = ::OpenAPI::fromJsonValue(m_skip_app_resign, json[QString("skipAppResign")]);
    m_skip_app_resign_isSet = !json[QString("skipAppResign")].isNull() && m_skip_app_resign_isValid;

    m_test_spec_arn_isValid = ::OpenAPI::fromJsonValue(m_test_spec_arn, json[QString("testSpecArn")]);
    m_test_spec_arn_isSet = !json[QString("testSpecArn")].isNull() && m_test_spec_arn_isValid;

    m_device_selection_result_isValid = ::OpenAPI::fromJsonValue(m_device_selection_result, json[QString("deviceSelectionResult")]);
    m_device_selection_result_isSet = !json[QString("deviceSelectionResult")].isNull() && m_device_selection_result_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("vpcConfig")]);
    m_vpc_config_isSet = !json[QString("vpcConfig")].isNull() && m_vpc_config_isValid;
}

QString OAIGetRunResult_run::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRunResult_run::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_stopped_isSet) {
        obj.insert(QString("stopped"), ::OpenAPI::toJsonValue(m_stopped));
    }
    if (m_counters.isSet()) {
        obj.insert(QString("counters"), ::OpenAPI::toJsonValue(m_counters));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_total_jobs_isSet) {
        obj.insert(QString("totalJobs"), ::OpenAPI::toJsonValue(m_total_jobs));
    }
    if (m_completed_jobs_isSet) {
        obj.insert(QString("completedJobs"), ::OpenAPI::toJsonValue(m_completed_jobs));
    }
    if (m_billing_method.isSet()) {
        obj.insert(QString("billingMethod"), ::OpenAPI::toJsonValue(m_billing_method));
    }
    if (m_device_minutes.isSet()) {
        obj.insert(QString("deviceMinutes"), ::OpenAPI::toJsonValue(m_device_minutes));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_parsing_result_url_isSet) {
        obj.insert(QString("parsingResultUrl"), ::OpenAPI::toJsonValue(m_parsing_result_url));
    }
    if (m_result_code.isSet()) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_seed_isSet) {
        obj.insert(QString("seed"), ::OpenAPI::toJsonValue(m_seed));
    }
    if (m_app_upload_isSet) {
        obj.insert(QString("appUpload"), ::OpenAPI::toJsonValue(m_app_upload));
    }
    if (m_event_count_isSet) {
        obj.insert(QString("eventCount"), ::OpenAPI::toJsonValue(m_event_count));
    }
    if (m_job_timeout_minutes_isSet) {
        obj.insert(QString("jobTimeoutMinutes"), ::OpenAPI::toJsonValue(m_job_timeout_minutes));
    }
    if (m_device_pool_arn_isSet) {
        obj.insert(QString("devicePoolArn"), ::OpenAPI::toJsonValue(m_device_pool_arn));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_radios.isSet()) {
        obj.insert(QString("radios"), ::OpenAPI::toJsonValue(m_radios));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_customer_artifact_paths.isSet()) {
        obj.insert(QString("customerArtifactPaths"), ::OpenAPI::toJsonValue(m_customer_artifact_paths));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("webUrl"), ::OpenAPI::toJsonValue(m_web_url));
    }
    if (m_skip_app_resign_isSet) {
        obj.insert(QString("skipAppResign"), ::OpenAPI::toJsonValue(m_skip_app_resign));
    }
    if (m_test_spec_arn_isSet) {
        obj.insert(QString("testSpecArn"), ::OpenAPI::toJsonValue(m_test_spec_arn));
    }
    if (m_device_selection_result.isSet()) {
        obj.insert(QString("deviceSelectionResult"), ::OpenAPI::toJsonValue(m_device_selection_result));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("vpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    return obj;
}

QString OAIGetRunResult_run::getArn() const {
    return m_arn;
}
void OAIGetRunResult_run::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetRunResult_run::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetRunResult_run::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetRunResult_run::getName() const {
    return m_name;
}
void OAIGetRunResult_run::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetRunResult_run::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetRunResult_run::is_name_Valid() const{
    return m_name_isValid;
}

OAITestType OAIGetRunResult_run::getType() const {
    return m_type;
}
void OAIGetRunResult_run::setType(const OAITestType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetRunResult_run::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetRunResult_run::is_type_Valid() const{
    return m_type_isValid;
}

OAIDevicePlatform OAIGetRunResult_run::getPlatform() const {
    return m_platform;
}
void OAIGetRunResult_run::setPlatform(const OAIDevicePlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGetRunResult_run::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGetRunResult_run::is_platform_Valid() const{
    return m_platform_isValid;
}

QDateTime OAIGetRunResult_run::getCreated() const {
    return m_created;
}
void OAIGetRunResult_run::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGetRunResult_run::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGetRunResult_run::is_created_Valid() const{
    return m_created_isValid;
}

OAIExecutionStatus OAIGetRunResult_run::getStatus() const {
    return m_status;
}
void OAIGetRunResult_run::setStatus(const OAIExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetRunResult_run::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetRunResult_run::is_status_Valid() const{
    return m_status_isValid;
}

OAIExecutionResult OAIGetRunResult_run::getResult() const {
    return m_result;
}
void OAIGetRunResult_run::setResult(const OAIExecutionResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIGetRunResult_run::is_result_Set() const{
    return m_result_isSet;
}

bool OAIGetRunResult_run::is_result_Valid() const{
    return m_result_isValid;
}

QDateTime OAIGetRunResult_run::getStarted() const {
    return m_started;
}
void OAIGetRunResult_run::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIGetRunResult_run::is_started_Set() const{
    return m_started_isSet;
}

bool OAIGetRunResult_run::is_started_Valid() const{
    return m_started_isValid;
}

QDateTime OAIGetRunResult_run::getStopped() const {
    return m_stopped;
}
void OAIGetRunResult_run::setStopped(const QDateTime &stopped) {
    m_stopped = stopped;
    m_stopped_isSet = true;
}

bool OAIGetRunResult_run::is_stopped_Set() const{
    return m_stopped_isSet;
}

bool OAIGetRunResult_run::is_stopped_Valid() const{
    return m_stopped_isValid;
}

OAIRun_counters OAIGetRunResult_run::getCounters() const {
    return m_counters;
}
void OAIGetRunResult_run::setCounters(const OAIRun_counters &counters) {
    m_counters = counters;
    m_counters_isSet = true;
}

bool OAIGetRunResult_run::is_counters_Set() const{
    return m_counters_isSet;
}

bool OAIGetRunResult_run::is_counters_Valid() const{
    return m_counters_isValid;
}

QString OAIGetRunResult_run::getMessage() const {
    return m_message;
}
void OAIGetRunResult_run::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetRunResult_run::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetRunResult_run::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIGetRunResult_run::getTotalJobs() const {
    return m_total_jobs;
}
void OAIGetRunResult_run::setTotalJobs(const qint32 &total_jobs) {
    m_total_jobs = total_jobs;
    m_total_jobs_isSet = true;
}

bool OAIGetRunResult_run::is_total_jobs_Set() const{
    return m_total_jobs_isSet;
}

bool OAIGetRunResult_run::is_total_jobs_Valid() const{
    return m_total_jobs_isValid;
}

qint32 OAIGetRunResult_run::getCompletedJobs() const {
    return m_completed_jobs;
}
void OAIGetRunResult_run::setCompletedJobs(const qint32 &completed_jobs) {
    m_completed_jobs = completed_jobs;
    m_completed_jobs_isSet = true;
}

bool OAIGetRunResult_run::is_completed_jobs_Set() const{
    return m_completed_jobs_isSet;
}

bool OAIGetRunResult_run::is_completed_jobs_Valid() const{
    return m_completed_jobs_isValid;
}

OAIBillingMethod OAIGetRunResult_run::getBillingMethod() const {
    return m_billing_method;
}
void OAIGetRunResult_run::setBillingMethod(const OAIBillingMethod &billing_method) {
    m_billing_method = billing_method;
    m_billing_method_isSet = true;
}

bool OAIGetRunResult_run::is_billing_method_Set() const{
    return m_billing_method_isSet;
}

bool OAIGetRunResult_run::is_billing_method_Valid() const{
    return m_billing_method_isValid;
}

OAIRun_deviceMinutes OAIGetRunResult_run::getDeviceMinutes() const {
    return m_device_minutes;
}
void OAIGetRunResult_run::setDeviceMinutes(const OAIRun_deviceMinutes &device_minutes) {
    m_device_minutes = device_minutes;
    m_device_minutes_isSet = true;
}

bool OAIGetRunResult_run::is_device_minutes_Set() const{
    return m_device_minutes_isSet;
}

bool OAIGetRunResult_run::is_device_minutes_Valid() const{
    return m_device_minutes_isValid;
}

OAIRun_networkProfile OAIGetRunResult_run::getNetworkProfile() const {
    return m_network_profile;
}
void OAIGetRunResult_run::setNetworkProfile(const OAIRun_networkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIGetRunResult_run::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIGetRunResult_run::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

QString OAIGetRunResult_run::getParsingResultUrl() const {
    return m_parsing_result_url;
}
void OAIGetRunResult_run::setParsingResultUrl(const QString &parsing_result_url) {
    m_parsing_result_url = parsing_result_url;
    m_parsing_result_url_isSet = true;
}

bool OAIGetRunResult_run::is_parsing_result_url_Set() const{
    return m_parsing_result_url_isSet;
}

bool OAIGetRunResult_run::is_parsing_result_url_Valid() const{
    return m_parsing_result_url_isValid;
}

OAIExecutionResultCode OAIGetRunResult_run::getResultCode() const {
    return m_result_code;
}
void OAIGetRunResult_run::setResultCode(const OAIExecutionResultCode &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIGetRunResult_run::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIGetRunResult_run::is_result_code_Valid() const{
    return m_result_code_isValid;
}

qint32 OAIGetRunResult_run::getSeed() const {
    return m_seed;
}
void OAIGetRunResult_run::setSeed(const qint32 &seed) {
    m_seed = seed;
    m_seed_isSet = true;
}

bool OAIGetRunResult_run::is_seed_Set() const{
    return m_seed_isSet;
}

bool OAIGetRunResult_run::is_seed_Valid() const{
    return m_seed_isValid;
}

QString OAIGetRunResult_run::getAppUpload() const {
    return m_app_upload;
}
void OAIGetRunResult_run::setAppUpload(const QString &app_upload) {
    m_app_upload = app_upload;
    m_app_upload_isSet = true;
}

bool OAIGetRunResult_run::is_app_upload_Set() const{
    return m_app_upload_isSet;
}

bool OAIGetRunResult_run::is_app_upload_Valid() const{
    return m_app_upload_isValid;
}

qint32 OAIGetRunResult_run::getEventCount() const {
    return m_event_count;
}
void OAIGetRunResult_run::setEventCount(const qint32 &event_count) {
    m_event_count = event_count;
    m_event_count_isSet = true;
}

bool OAIGetRunResult_run::is_event_count_Set() const{
    return m_event_count_isSet;
}

bool OAIGetRunResult_run::is_event_count_Valid() const{
    return m_event_count_isValid;
}

qint32 OAIGetRunResult_run::getJobTimeoutMinutes() const {
    return m_job_timeout_minutes;
}
void OAIGetRunResult_run::setJobTimeoutMinutes(const qint32 &job_timeout_minutes) {
    m_job_timeout_minutes = job_timeout_minutes;
    m_job_timeout_minutes_isSet = true;
}

bool OAIGetRunResult_run::is_job_timeout_minutes_Set() const{
    return m_job_timeout_minutes_isSet;
}

bool OAIGetRunResult_run::is_job_timeout_minutes_Valid() const{
    return m_job_timeout_minutes_isValid;
}

QString OAIGetRunResult_run::getDevicePoolArn() const {
    return m_device_pool_arn;
}
void OAIGetRunResult_run::setDevicePoolArn(const QString &device_pool_arn) {
    m_device_pool_arn = device_pool_arn;
    m_device_pool_arn_isSet = true;
}

bool OAIGetRunResult_run::is_device_pool_arn_Set() const{
    return m_device_pool_arn_isSet;
}

bool OAIGetRunResult_run::is_device_pool_arn_Valid() const{
    return m_device_pool_arn_isValid;
}

QString OAIGetRunResult_run::getLocale() const {
    return m_locale;
}
void OAIGetRunResult_run::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIGetRunResult_run::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIGetRunResult_run::is_locale_Valid() const{
    return m_locale_isValid;
}

OAIScheduleRunConfiguration_radios OAIGetRunResult_run::getRadios() const {
    return m_radios;
}
void OAIGetRunResult_run::setRadios(const OAIScheduleRunConfiguration_radios &radios) {
    m_radios = radios;
    m_radios_isSet = true;
}

bool OAIGetRunResult_run::is_radios_Set() const{
    return m_radios_isSet;
}

bool OAIGetRunResult_run::is_radios_Valid() const{
    return m_radios_isValid;
}

OAIScheduleRunConfiguration_location OAIGetRunResult_run::getLocation() const {
    return m_location;
}
void OAIGetRunResult_run::setLocation(const OAIScheduleRunConfiguration_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGetRunResult_run::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGetRunResult_run::is_location_Valid() const{
    return m_location_isValid;
}

OAIRun_customerArtifactPaths OAIGetRunResult_run::getCustomerArtifactPaths() const {
    return m_customer_artifact_paths;
}
void OAIGetRunResult_run::setCustomerArtifactPaths(const OAIRun_customerArtifactPaths &customer_artifact_paths) {
    m_customer_artifact_paths = customer_artifact_paths;
    m_customer_artifact_paths_isSet = true;
}

bool OAIGetRunResult_run::is_customer_artifact_paths_Set() const{
    return m_customer_artifact_paths_isSet;
}

bool OAIGetRunResult_run::is_customer_artifact_paths_Valid() const{
    return m_customer_artifact_paths_isValid;
}

QString OAIGetRunResult_run::getWebUrl() const {
    return m_web_url;
}
void OAIGetRunResult_run::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAIGetRunResult_run::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAIGetRunResult_run::is_web_url_Valid() const{
    return m_web_url_isValid;
}

bool OAIGetRunResult_run::getSkipAppResign() const {
    return m_skip_app_resign;
}
void OAIGetRunResult_run::setSkipAppResign(const bool &skip_app_resign) {
    m_skip_app_resign = skip_app_resign;
    m_skip_app_resign_isSet = true;
}

bool OAIGetRunResult_run::is_skip_app_resign_Set() const{
    return m_skip_app_resign_isSet;
}

bool OAIGetRunResult_run::is_skip_app_resign_Valid() const{
    return m_skip_app_resign_isValid;
}

QString OAIGetRunResult_run::getTestSpecArn() const {
    return m_test_spec_arn;
}
void OAIGetRunResult_run::setTestSpecArn(const QString &test_spec_arn) {
    m_test_spec_arn = test_spec_arn;
    m_test_spec_arn_isSet = true;
}

bool OAIGetRunResult_run::is_test_spec_arn_Set() const{
    return m_test_spec_arn_isSet;
}

bool OAIGetRunResult_run::is_test_spec_arn_Valid() const{
    return m_test_spec_arn_isValid;
}

OAIRun_deviceSelectionResult OAIGetRunResult_run::getDeviceSelectionResult() const {
    return m_device_selection_result;
}
void OAIGetRunResult_run::setDeviceSelectionResult(const OAIRun_deviceSelectionResult &device_selection_result) {
    m_device_selection_result = device_selection_result;
    m_device_selection_result_isSet = true;
}

bool OAIGetRunResult_run::is_device_selection_result_Set() const{
    return m_device_selection_result_isSet;
}

bool OAIGetRunResult_run::is_device_selection_result_Valid() const{
    return m_device_selection_result_isValid;
}

OAICreateProjectRequest_vpcConfig OAIGetRunResult_run::getVpcConfig() const {
    return m_vpc_config;
}
void OAIGetRunResult_run::setVpcConfig(const OAICreateProjectRequest_vpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIGetRunResult_run::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIGetRunResult_run::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

bool OAIGetRunResult_run::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_minutes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parsing_result_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_pool_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_artifact_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_app_resign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_spec_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_selection_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRunResult_run::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
