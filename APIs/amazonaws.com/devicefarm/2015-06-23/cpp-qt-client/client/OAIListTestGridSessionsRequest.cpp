/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTestGridSessionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTestGridSessionsRequest::OAIListTestGridSessionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTestGridSessionsRequest::OAIListTestGridSessionsRequest() {
    this->initializeModel();
}

OAIListTestGridSessionsRequest::~OAIListTestGridSessionsRequest() {}

void OAIListTestGridSessionsRequest::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_after_isSet = false;
    m_creation_time_after_isValid = false;

    m_creation_time_before_isSet = false;
    m_creation_time_before_isValid = false;

    m_end_time_after_isSet = false;
    m_end_time_after_isValid = false;

    m_end_time_before_isSet = false;
    m_end_time_before_isValid = false;

    m_max_result_isSet = false;
    m_max_result_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTestGridSessionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTestGridSessionsRequest::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("projectArn")]);
    m_project_arn_isSet = !json[QString("projectArn")].isNull() && m_project_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_creation_time_after_isValid = ::OpenAPI::fromJsonValue(m_creation_time_after, json[QString("creationTimeAfter")]);
    m_creation_time_after_isSet = !json[QString("creationTimeAfter")].isNull() && m_creation_time_after_isValid;

    m_creation_time_before_isValid = ::OpenAPI::fromJsonValue(m_creation_time_before, json[QString("creationTimeBefore")]);
    m_creation_time_before_isSet = !json[QString("creationTimeBefore")].isNull() && m_creation_time_before_isValid;

    m_end_time_after_isValid = ::OpenAPI::fromJsonValue(m_end_time_after, json[QString("endTimeAfter")]);
    m_end_time_after_isSet = !json[QString("endTimeAfter")].isNull() && m_end_time_after_isValid;

    m_end_time_before_isValid = ::OpenAPI::fromJsonValue(m_end_time_before, json[QString("endTimeBefore")]);
    m_end_time_before_isSet = !json[QString("endTimeBefore")].isNull() && m_end_time_before_isValid;

    m_max_result_isValid = ::OpenAPI::fromJsonValue(m_max_result, json[QString("maxResult")]);
    m_max_result_isSet = !json[QString("maxResult")].isNull() && m_max_result_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTestGridSessionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTestGridSessionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("projectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_after_isSet) {
        obj.insert(QString("creationTimeAfter"), ::OpenAPI::toJsonValue(m_creation_time_after));
    }
    if (m_creation_time_before_isSet) {
        obj.insert(QString("creationTimeBefore"), ::OpenAPI::toJsonValue(m_creation_time_before));
    }
    if (m_end_time_after_isSet) {
        obj.insert(QString("endTimeAfter"), ::OpenAPI::toJsonValue(m_end_time_after));
    }
    if (m_end_time_before_isSet) {
        obj.insert(QString("endTimeBefore"), ::OpenAPI::toJsonValue(m_end_time_before));
    }
    if (m_max_result_isSet) {
        obj.insert(QString("maxResult"), ::OpenAPI::toJsonValue(m_max_result));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListTestGridSessionsRequest::getProjectArn() const {
    return m_project_arn;
}
void OAIListTestGridSessionsRequest::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAIListTestGridSessionsRequest::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

OAITestGridSessionStatus OAIListTestGridSessionsRequest::getStatus() const {
    return m_status;
}
void OAIListTestGridSessionsRequest::setStatus(const OAITestGridSessionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListTestGridSessionsRequest::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIListTestGridSessionsRequest::getCreationTimeAfter() const {
    return m_creation_time_after;
}
void OAIListTestGridSessionsRequest::setCreationTimeAfter(const QDateTime &creation_time_after) {
    m_creation_time_after = creation_time_after;
    m_creation_time_after_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_creation_time_after_Set() const{
    return m_creation_time_after_isSet;
}

bool OAIListTestGridSessionsRequest::is_creation_time_after_Valid() const{
    return m_creation_time_after_isValid;
}

QDateTime OAIListTestGridSessionsRequest::getCreationTimeBefore() const {
    return m_creation_time_before;
}
void OAIListTestGridSessionsRequest::setCreationTimeBefore(const QDateTime &creation_time_before) {
    m_creation_time_before = creation_time_before;
    m_creation_time_before_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_creation_time_before_Set() const{
    return m_creation_time_before_isSet;
}

bool OAIListTestGridSessionsRequest::is_creation_time_before_Valid() const{
    return m_creation_time_before_isValid;
}

QDateTime OAIListTestGridSessionsRequest::getEndTimeAfter() const {
    return m_end_time_after;
}
void OAIListTestGridSessionsRequest::setEndTimeAfter(const QDateTime &end_time_after) {
    m_end_time_after = end_time_after;
    m_end_time_after_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_end_time_after_Set() const{
    return m_end_time_after_isSet;
}

bool OAIListTestGridSessionsRequest::is_end_time_after_Valid() const{
    return m_end_time_after_isValid;
}

QDateTime OAIListTestGridSessionsRequest::getEndTimeBefore() const {
    return m_end_time_before;
}
void OAIListTestGridSessionsRequest::setEndTimeBefore(const QDateTime &end_time_before) {
    m_end_time_before = end_time_before;
    m_end_time_before_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_end_time_before_Set() const{
    return m_end_time_before_isSet;
}

bool OAIListTestGridSessionsRequest::is_end_time_before_Valid() const{
    return m_end_time_before_isValid;
}

qint32 OAIListTestGridSessionsRequest::getMaxResult() const {
    return m_max_result;
}
void OAIListTestGridSessionsRequest::setMaxResult(const qint32 &max_result) {
    m_max_result = max_result;
    m_max_result_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_max_result_Set() const{
    return m_max_result_isSet;
}

bool OAIListTestGridSessionsRequest::is_max_result_Valid() const{
    return m_max_result_isValid;
}

QString OAIListTestGridSessionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListTestGridSessionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTestGridSessionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTestGridSessionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTestGridSessionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTestGridSessionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_arn_isValid && true;
}

} // namespace OpenAPI
