/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUploadRequest::OAICreateUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUploadRequest::OAICreateUploadRequest() {
    this->initializeModel();
}

OAICreateUploadRequest::~OAICreateUploadRequest() {}

void OAICreateUploadRequest::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAICreateUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUploadRequest::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("projectArn")]);
    m_project_arn_isSet = !json[QString("projectArn")].isNull() && m_project_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;
}

QString OAICreateUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("projectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAICreateUploadRequest::getProjectArn() const {
    return m_project_arn;
}
void OAICreateUploadRequest::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAICreateUploadRequest::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAICreateUploadRequest::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

QString OAICreateUploadRequest::getName() const {
    return m_name;
}
void OAICreateUploadRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateUploadRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateUploadRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIUploadType OAICreateUploadRequest::getType() const {
    return m_type;
}
void OAICreateUploadRequest::setType(const OAIUploadType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateUploadRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateUploadRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateUploadRequest::getContentType() const {
    return m_content_type;
}
void OAICreateUploadRequest::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICreateUploadRequest::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICreateUploadRequest::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAICreateUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_arn_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
