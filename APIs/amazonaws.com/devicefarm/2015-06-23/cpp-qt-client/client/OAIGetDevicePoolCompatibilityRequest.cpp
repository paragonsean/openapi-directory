/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDevicePoolCompatibilityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDevicePoolCompatibilityRequest::OAIGetDevicePoolCompatibilityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDevicePoolCompatibilityRequest::OAIGetDevicePoolCompatibilityRequest() {
    this->initializeModel();
}

OAIGetDevicePoolCompatibilityRequest::~OAIGetDevicePoolCompatibilityRequest() {}

void OAIGetDevicePoolCompatibilityRequest::initializeModel() {

    m_device_pool_arn_isSet = false;
    m_device_pool_arn_isValid = false;

    m_app_arn_isSet = false;
    m_app_arn_isValid = false;

    m_test_type_isSet = false;
    m_test_type_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;
}

void OAIGetDevicePoolCompatibilityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDevicePoolCompatibilityRequest::fromJsonObject(QJsonObject json) {

    m_device_pool_arn_isValid = ::OpenAPI::fromJsonValue(m_device_pool_arn, json[QString("devicePoolArn")]);
    m_device_pool_arn_isSet = !json[QString("devicePoolArn")].isNull() && m_device_pool_arn_isValid;

    m_app_arn_isValid = ::OpenAPI::fromJsonValue(m_app_arn, json[QString("appArn")]);
    m_app_arn_isSet = !json[QString("appArn")].isNull() && m_app_arn_isValid;

    m_test_type_isValid = ::OpenAPI::fromJsonValue(m_test_type, json[QString("testType")]);
    m_test_type_isSet = !json[QString("testType")].isNull() && m_test_type_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;
}

QString OAIGetDevicePoolCompatibilityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDevicePoolCompatibilityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_device_pool_arn_isSet) {
        obj.insert(QString("devicePoolArn"), ::OpenAPI::toJsonValue(m_device_pool_arn));
    }
    if (m_app_arn_isSet) {
        obj.insert(QString("appArn"), ::OpenAPI::toJsonValue(m_app_arn));
    }
    if (m_test_type.isSet()) {
        obj.insert(QString("testType"), ::OpenAPI::toJsonValue(m_test_type));
    }
    if (m_test.isSet()) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    return obj;
}

QString OAIGetDevicePoolCompatibilityRequest::getDevicePoolArn() const {
    return m_device_pool_arn;
}
void OAIGetDevicePoolCompatibilityRequest::setDevicePoolArn(const QString &device_pool_arn) {
    m_device_pool_arn = device_pool_arn;
    m_device_pool_arn_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest::is_device_pool_arn_Set() const{
    return m_device_pool_arn_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest::is_device_pool_arn_Valid() const{
    return m_device_pool_arn_isValid;
}

QString OAIGetDevicePoolCompatibilityRequest::getAppArn() const {
    return m_app_arn;
}
void OAIGetDevicePoolCompatibilityRequest::setAppArn(const QString &app_arn) {
    m_app_arn = app_arn;
    m_app_arn_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest::is_app_arn_Set() const{
    return m_app_arn_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest::is_app_arn_Valid() const{
    return m_app_arn_isValid;
}

OAITestType OAIGetDevicePoolCompatibilityRequest::getTestType() const {
    return m_test_type;
}
void OAIGetDevicePoolCompatibilityRequest::setTestType(const OAITestType &test_type) {
    m_test_type = test_type;
    m_test_type_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest::is_test_type_Set() const{
    return m_test_type_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest::is_test_type_Valid() const{
    return m_test_type_isValid;
}

OAIGetDevicePoolCompatibilityRequest_test OAIGetDevicePoolCompatibilityRequest::getTest() const {
    return m_test;
}
void OAIGetDevicePoolCompatibilityRequest::setTest(const OAIGetDevicePoolCompatibilityRequest_test &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest::is_test_Set() const{
    return m_test_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest::is_test_Valid() const{
    return m_test_isValid;
}

OAIGetDevicePoolCompatibilityRequest_configuration OAIGetDevicePoolCompatibilityRequest::getConfiguration() const {
    return m_configuration;
}
void OAIGetDevicePoolCompatibilityRequest::setConfiguration(const OAIGetDevicePoolCompatibilityRequest_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIGetDevicePoolCompatibilityRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIGetDevicePoolCompatibilityRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIGetDevicePoolCompatibilityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_pool_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDevicePoolCompatibilityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_pool_arn_isValid && true;
}

} // namespace OpenAPI
