/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevicePoolCompatibilityResult.h
 *
 * Represents a device pool compatibility result.
 */

#ifndef OAIDevicePoolCompatibilityResult_H
#define OAIDevicePoolCompatibilityResult_H

#include <QJsonObject>

#include "OAIDevicePoolCompatibilityResult_device.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDevicePoolCompatibilityResult_device;

class OAIDevicePoolCompatibilityResult : public OAIObject {
public:
    OAIDevicePoolCompatibilityResult();
    OAIDevicePoolCompatibilityResult(QString json);
    ~OAIDevicePoolCompatibilityResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDevicePoolCompatibilityResult_device getDevice() const;
    void setDevice(const OAIDevicePoolCompatibilityResult_device &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    bool getCompatible() const;
    void setCompatible(const bool &compatible);
    bool is_compatible_Set() const;
    bool is_compatible_Valid() const;

    QList getIncompatibilityMessages() const;
    void setIncompatibilityMessages(const QList &incompatibility_messages);
    bool is_incompatibility_messages_Set() const;
    bool is_incompatibility_messages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDevicePoolCompatibilityResult_device m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    bool m_compatible;
    bool m_compatible_isSet;
    bool m_compatible_isValid;

    QList m_incompatibility_messages;
    bool m_incompatibility_messages_isSet;
    bool m_incompatibility_messages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevicePoolCompatibilityResult)

#endif // OAIDevicePoolCompatibilityResult_H
