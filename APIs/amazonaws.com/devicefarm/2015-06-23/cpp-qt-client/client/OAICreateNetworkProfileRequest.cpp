/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkProfileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkProfileRequest::OAICreateNetworkProfileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkProfileRequest::OAICreateNetworkProfileRequest() {
    this->initializeModel();
}

OAICreateNetworkProfileRequest::~OAICreateNetworkProfileRequest() {}

void OAICreateNetworkProfileRequest::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uplink_bandwidth_bits_isSet = false;
    m_uplink_bandwidth_bits_isValid = false;

    m_downlink_bandwidth_bits_isSet = false;
    m_downlink_bandwidth_bits_isValid = false;

    m_uplink_delay_ms_isSet = false;
    m_uplink_delay_ms_isValid = false;

    m_downlink_delay_ms_isSet = false;
    m_downlink_delay_ms_isValid = false;

    m_uplink_jitter_ms_isSet = false;
    m_uplink_jitter_ms_isValid = false;

    m_downlink_jitter_ms_isSet = false;
    m_downlink_jitter_ms_isValid = false;

    m_uplink_loss_percent_isSet = false;
    m_uplink_loss_percent_isValid = false;

    m_downlink_loss_percent_isSet = false;
    m_downlink_loss_percent_isValid = false;
}

void OAICreateNetworkProfileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkProfileRequest::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("projectArn")]);
    m_project_arn_isSet = !json[QString("projectArn")].isNull() && m_project_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uplink_bandwidth_bits_isValid = ::OpenAPI::fromJsonValue(m_uplink_bandwidth_bits, json[QString("uplinkBandwidthBits")]);
    m_uplink_bandwidth_bits_isSet = !json[QString("uplinkBandwidthBits")].isNull() && m_uplink_bandwidth_bits_isValid;

    m_downlink_bandwidth_bits_isValid = ::OpenAPI::fromJsonValue(m_downlink_bandwidth_bits, json[QString("downlinkBandwidthBits")]);
    m_downlink_bandwidth_bits_isSet = !json[QString("downlinkBandwidthBits")].isNull() && m_downlink_bandwidth_bits_isValid;

    m_uplink_delay_ms_isValid = ::OpenAPI::fromJsonValue(m_uplink_delay_ms, json[QString("uplinkDelayMs")]);
    m_uplink_delay_ms_isSet = !json[QString("uplinkDelayMs")].isNull() && m_uplink_delay_ms_isValid;

    m_downlink_delay_ms_isValid = ::OpenAPI::fromJsonValue(m_downlink_delay_ms, json[QString("downlinkDelayMs")]);
    m_downlink_delay_ms_isSet = !json[QString("downlinkDelayMs")].isNull() && m_downlink_delay_ms_isValid;

    m_uplink_jitter_ms_isValid = ::OpenAPI::fromJsonValue(m_uplink_jitter_ms, json[QString("uplinkJitterMs")]);
    m_uplink_jitter_ms_isSet = !json[QString("uplinkJitterMs")].isNull() && m_uplink_jitter_ms_isValid;

    m_downlink_jitter_ms_isValid = ::OpenAPI::fromJsonValue(m_downlink_jitter_ms, json[QString("downlinkJitterMs")]);
    m_downlink_jitter_ms_isSet = !json[QString("downlinkJitterMs")].isNull() && m_downlink_jitter_ms_isValid;

    m_uplink_loss_percent_isValid = ::OpenAPI::fromJsonValue(m_uplink_loss_percent, json[QString("uplinkLossPercent")]);
    m_uplink_loss_percent_isSet = !json[QString("uplinkLossPercent")].isNull() && m_uplink_loss_percent_isValid;

    m_downlink_loss_percent_isValid = ::OpenAPI::fromJsonValue(m_downlink_loss_percent, json[QString("downlinkLossPercent")]);
    m_downlink_loss_percent_isSet = !json[QString("downlinkLossPercent")].isNull() && m_downlink_loss_percent_isValid;
}

QString OAICreateNetworkProfileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkProfileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("projectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uplink_bandwidth_bits_isSet) {
        obj.insert(QString("uplinkBandwidthBits"), ::OpenAPI::toJsonValue(m_uplink_bandwidth_bits));
    }
    if (m_downlink_bandwidth_bits_isSet) {
        obj.insert(QString("downlinkBandwidthBits"), ::OpenAPI::toJsonValue(m_downlink_bandwidth_bits));
    }
    if (m_uplink_delay_ms_isSet) {
        obj.insert(QString("uplinkDelayMs"), ::OpenAPI::toJsonValue(m_uplink_delay_ms));
    }
    if (m_downlink_delay_ms_isSet) {
        obj.insert(QString("downlinkDelayMs"), ::OpenAPI::toJsonValue(m_downlink_delay_ms));
    }
    if (m_uplink_jitter_ms_isSet) {
        obj.insert(QString("uplinkJitterMs"), ::OpenAPI::toJsonValue(m_uplink_jitter_ms));
    }
    if (m_downlink_jitter_ms_isSet) {
        obj.insert(QString("downlinkJitterMs"), ::OpenAPI::toJsonValue(m_downlink_jitter_ms));
    }
    if (m_uplink_loss_percent_isSet) {
        obj.insert(QString("uplinkLossPercent"), ::OpenAPI::toJsonValue(m_uplink_loss_percent));
    }
    if (m_downlink_loss_percent_isSet) {
        obj.insert(QString("downlinkLossPercent"), ::OpenAPI::toJsonValue(m_downlink_loss_percent));
    }
    return obj;
}

QString OAICreateNetworkProfileRequest::getProjectArn() const {
    return m_project_arn;
}
void OAICreateNetworkProfileRequest::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAICreateNetworkProfileRequest::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

QString OAICreateNetworkProfileRequest::getName() const {
    return m_name;
}
void OAICreateNetworkProfileRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkProfileRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateNetworkProfileRequest::getDescription() const {
    return m_description;
}
void OAICreateNetworkProfileRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateNetworkProfileRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAINetworkProfileType OAICreateNetworkProfileRequest::getType() const {
    return m_type;
}
void OAICreateNetworkProfileRequest::setType(const OAINetworkProfileType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateNetworkProfileRequest::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAICreateNetworkProfileRequest::getUplinkBandwidthBits() const {
    return m_uplink_bandwidth_bits;
}
void OAICreateNetworkProfileRequest::setUplinkBandwidthBits(const qint32 &uplink_bandwidth_bits) {
    m_uplink_bandwidth_bits = uplink_bandwidth_bits;
    m_uplink_bandwidth_bits_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_uplink_bandwidth_bits_Set() const{
    return m_uplink_bandwidth_bits_isSet;
}

bool OAICreateNetworkProfileRequest::is_uplink_bandwidth_bits_Valid() const{
    return m_uplink_bandwidth_bits_isValid;
}

qint32 OAICreateNetworkProfileRequest::getDownlinkBandwidthBits() const {
    return m_downlink_bandwidth_bits;
}
void OAICreateNetworkProfileRequest::setDownlinkBandwidthBits(const qint32 &downlink_bandwidth_bits) {
    m_downlink_bandwidth_bits = downlink_bandwidth_bits;
    m_downlink_bandwidth_bits_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_downlink_bandwidth_bits_Set() const{
    return m_downlink_bandwidth_bits_isSet;
}

bool OAICreateNetworkProfileRequest::is_downlink_bandwidth_bits_Valid() const{
    return m_downlink_bandwidth_bits_isValid;
}

qint32 OAICreateNetworkProfileRequest::getUplinkDelayMs() const {
    return m_uplink_delay_ms;
}
void OAICreateNetworkProfileRequest::setUplinkDelayMs(const qint32 &uplink_delay_ms) {
    m_uplink_delay_ms = uplink_delay_ms;
    m_uplink_delay_ms_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_uplink_delay_ms_Set() const{
    return m_uplink_delay_ms_isSet;
}

bool OAICreateNetworkProfileRequest::is_uplink_delay_ms_Valid() const{
    return m_uplink_delay_ms_isValid;
}

qint32 OAICreateNetworkProfileRequest::getDownlinkDelayMs() const {
    return m_downlink_delay_ms;
}
void OAICreateNetworkProfileRequest::setDownlinkDelayMs(const qint32 &downlink_delay_ms) {
    m_downlink_delay_ms = downlink_delay_ms;
    m_downlink_delay_ms_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_downlink_delay_ms_Set() const{
    return m_downlink_delay_ms_isSet;
}

bool OAICreateNetworkProfileRequest::is_downlink_delay_ms_Valid() const{
    return m_downlink_delay_ms_isValid;
}

qint32 OAICreateNetworkProfileRequest::getUplinkJitterMs() const {
    return m_uplink_jitter_ms;
}
void OAICreateNetworkProfileRequest::setUplinkJitterMs(const qint32 &uplink_jitter_ms) {
    m_uplink_jitter_ms = uplink_jitter_ms;
    m_uplink_jitter_ms_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_uplink_jitter_ms_Set() const{
    return m_uplink_jitter_ms_isSet;
}

bool OAICreateNetworkProfileRequest::is_uplink_jitter_ms_Valid() const{
    return m_uplink_jitter_ms_isValid;
}

qint32 OAICreateNetworkProfileRequest::getDownlinkJitterMs() const {
    return m_downlink_jitter_ms;
}
void OAICreateNetworkProfileRequest::setDownlinkJitterMs(const qint32 &downlink_jitter_ms) {
    m_downlink_jitter_ms = downlink_jitter_ms;
    m_downlink_jitter_ms_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_downlink_jitter_ms_Set() const{
    return m_downlink_jitter_ms_isSet;
}

bool OAICreateNetworkProfileRequest::is_downlink_jitter_ms_Valid() const{
    return m_downlink_jitter_ms_isValid;
}

qint32 OAICreateNetworkProfileRequest::getUplinkLossPercent() const {
    return m_uplink_loss_percent;
}
void OAICreateNetworkProfileRequest::setUplinkLossPercent(const qint32 &uplink_loss_percent) {
    m_uplink_loss_percent = uplink_loss_percent;
    m_uplink_loss_percent_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_uplink_loss_percent_Set() const{
    return m_uplink_loss_percent_isSet;
}

bool OAICreateNetworkProfileRequest::is_uplink_loss_percent_Valid() const{
    return m_uplink_loss_percent_isValid;
}

qint32 OAICreateNetworkProfileRequest::getDownlinkLossPercent() const {
    return m_downlink_loss_percent;
}
void OAICreateNetworkProfileRequest::setDownlinkLossPercent(const qint32 &downlink_loss_percent) {
    m_downlink_loss_percent = downlink_loss_percent;
    m_downlink_loss_percent_isSet = true;
}

bool OAICreateNetworkProfileRequest::is_downlink_loss_percent_Set() const{
    return m_downlink_loss_percent_isSet;
}

bool OAICreateNetworkProfileRequest::is_downlink_loss_percent_Valid() const{
    return m_downlink_loss_percent_isValid;
}

bool OAICreateNetworkProfileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_bandwidth_bits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downlink_bandwidth_bits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_delay_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downlink_delay_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_jitter_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downlink_jitter_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uplink_loss_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downlink_loss_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkProfileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_arn_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
