/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVPCEConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVPCEConfigurationRequest::OAICreateVPCEConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVPCEConfigurationRequest::OAICreateVPCEConfigurationRequest() {
    this->initializeModel();
}

OAICreateVPCEConfigurationRequest::~OAICreateVPCEConfigurationRequest() {}

void OAICreateVPCEConfigurationRequest::initializeModel() {

    m_vpce_configuration_name_isSet = false;
    m_vpce_configuration_name_isValid = false;

    m_vpce_service_name_isSet = false;
    m_vpce_service_name_isValid = false;

    m_service_dns_name_isSet = false;
    m_service_dns_name_isValid = false;

    m_vpce_configuration_description_isSet = false;
    m_vpce_configuration_description_isValid = false;
}

void OAICreateVPCEConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVPCEConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_vpce_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_vpce_configuration_name, json[QString("vpceConfigurationName")]);
    m_vpce_configuration_name_isSet = !json[QString("vpceConfigurationName")].isNull() && m_vpce_configuration_name_isValid;

    m_vpce_service_name_isValid = ::OpenAPI::fromJsonValue(m_vpce_service_name, json[QString("vpceServiceName")]);
    m_vpce_service_name_isSet = !json[QString("vpceServiceName")].isNull() && m_vpce_service_name_isValid;

    m_service_dns_name_isValid = ::OpenAPI::fromJsonValue(m_service_dns_name, json[QString("serviceDnsName")]);
    m_service_dns_name_isSet = !json[QString("serviceDnsName")].isNull() && m_service_dns_name_isValid;

    m_vpce_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_vpce_configuration_description, json[QString("vpceConfigurationDescription")]);
    m_vpce_configuration_description_isSet = !json[QString("vpceConfigurationDescription")].isNull() && m_vpce_configuration_description_isValid;
}

QString OAICreateVPCEConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVPCEConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_vpce_configuration_name_isSet) {
        obj.insert(QString("vpceConfigurationName"), ::OpenAPI::toJsonValue(m_vpce_configuration_name));
    }
    if (m_vpce_service_name_isSet) {
        obj.insert(QString("vpceServiceName"), ::OpenAPI::toJsonValue(m_vpce_service_name));
    }
    if (m_service_dns_name_isSet) {
        obj.insert(QString("serviceDnsName"), ::OpenAPI::toJsonValue(m_service_dns_name));
    }
    if (m_vpce_configuration_description_isSet) {
        obj.insert(QString("vpceConfigurationDescription"), ::OpenAPI::toJsonValue(m_vpce_configuration_description));
    }
    return obj;
}

QString OAICreateVPCEConfigurationRequest::getVpceConfigurationName() const {
    return m_vpce_configuration_name;
}
void OAICreateVPCEConfigurationRequest::setVpceConfigurationName(const QString &vpce_configuration_name) {
    m_vpce_configuration_name = vpce_configuration_name;
    m_vpce_configuration_name_isSet = true;
}

bool OAICreateVPCEConfigurationRequest::is_vpce_configuration_name_Set() const{
    return m_vpce_configuration_name_isSet;
}

bool OAICreateVPCEConfigurationRequest::is_vpce_configuration_name_Valid() const{
    return m_vpce_configuration_name_isValid;
}

QString OAICreateVPCEConfigurationRequest::getVpceServiceName() const {
    return m_vpce_service_name;
}
void OAICreateVPCEConfigurationRequest::setVpceServiceName(const QString &vpce_service_name) {
    m_vpce_service_name = vpce_service_name;
    m_vpce_service_name_isSet = true;
}

bool OAICreateVPCEConfigurationRequest::is_vpce_service_name_Set() const{
    return m_vpce_service_name_isSet;
}

bool OAICreateVPCEConfigurationRequest::is_vpce_service_name_Valid() const{
    return m_vpce_service_name_isValid;
}

QString OAICreateVPCEConfigurationRequest::getServiceDnsName() const {
    return m_service_dns_name;
}
void OAICreateVPCEConfigurationRequest::setServiceDnsName(const QString &service_dns_name) {
    m_service_dns_name = service_dns_name;
    m_service_dns_name_isSet = true;
}

bool OAICreateVPCEConfigurationRequest::is_service_dns_name_Set() const{
    return m_service_dns_name_isSet;
}

bool OAICreateVPCEConfigurationRequest::is_service_dns_name_Valid() const{
    return m_service_dns_name_isValid;
}

QString OAICreateVPCEConfigurationRequest::getVpceConfigurationDescription() const {
    return m_vpce_configuration_description;
}
void OAICreateVPCEConfigurationRequest::setVpceConfigurationDescription(const QString &vpce_configuration_description) {
    m_vpce_configuration_description = vpce_configuration_description;
    m_vpce_configuration_description_isSet = true;
}

bool OAICreateVPCEConfigurationRequest::is_vpce_configuration_description_Set() const{
    return m_vpce_configuration_description_isSet;
}

bool OAICreateVPCEConfigurationRequest::is_vpce_configuration_description_Valid() const{
    return m_vpce_configuration_description_isValid;
}

bool OAICreateVPCEConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpce_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpce_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpce_configuration_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVPCEConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vpce_configuration_name_isValid && m_vpce_service_name_isValid && m_service_dns_name_isValid && true;
}

} // namespace OpenAPI
