/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingMethod from './BillingMethod';
import CreateProjectRequestVpcConfig from './CreateProjectRequestVpcConfig';
import DevicePlatform from './DevicePlatform';
import ExecutionResult from './ExecutionResult';
import ExecutionResultCode from './ExecutionResultCode';
import ExecutionStatus from './ExecutionStatus';
import Run from './Run';
import RunCounters from './RunCounters';
import RunCustomerArtifactPaths from './RunCustomerArtifactPaths';
import RunDeviceMinutes from './RunDeviceMinutes';
import RunDeviceSelectionResult from './RunDeviceSelectionResult';
import RunNetworkProfile from './RunNetworkProfile';
import ScheduleRunConfigurationLocation from './ScheduleRunConfigurationLocation';
import ScheduleRunConfigurationRadios from './ScheduleRunConfigurationRadios';
import TestType from './TestType';

/**
 * The ScheduleRunResultRun model module.
 * @module model/ScheduleRunResultRun
 * @version 2015-06-23
 */
class ScheduleRunResultRun {
    /**
     * Constructs a new <code>ScheduleRunResultRun</code>.
     * @alias module:model/ScheduleRunResultRun
     * @implements module:model/Run
     */
    constructor() { 
        Run.initialize(this);
        ScheduleRunResultRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduleRunResultRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleRunResultRun} obj Optional instance to populate.
     * @return {module:model/ScheduleRunResultRun} The populated <code>ScheduleRunResultRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleRunResultRun();
            Run.constructFromObject(data, obj);

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], TestType);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], DevicePlatform);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ExecutionStatus);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], ExecutionResult);
            }
            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'Date');
            }
            if (data.hasOwnProperty('stopped')) {
                obj['stopped'] = ApiClient.convertToType(data['stopped'], 'Date');
            }
            if (data.hasOwnProperty('counters')) {
                obj['counters'] = RunCounters.constructFromObject(data['counters']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('totalJobs')) {
                obj['totalJobs'] = ApiClient.convertToType(data['totalJobs'], 'Number');
            }
            if (data.hasOwnProperty('completedJobs')) {
                obj['completedJobs'] = ApiClient.convertToType(data['completedJobs'], 'Number');
            }
            if (data.hasOwnProperty('billingMethod')) {
                obj['billingMethod'] = ApiClient.convertToType(data['billingMethod'], BillingMethod);
            }
            if (data.hasOwnProperty('deviceMinutes')) {
                obj['deviceMinutes'] = RunDeviceMinutes.constructFromObject(data['deviceMinutes']);
            }
            if (data.hasOwnProperty('networkProfile')) {
                obj['networkProfile'] = RunNetworkProfile.constructFromObject(data['networkProfile']);
            }
            if (data.hasOwnProperty('parsingResultUrl')) {
                obj['parsingResultUrl'] = ApiClient.convertToType(data['parsingResultUrl'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], ExecutionResultCode);
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'Number');
            }
            if (data.hasOwnProperty('appUpload')) {
                obj['appUpload'] = ApiClient.convertToType(data['appUpload'], 'String');
            }
            if (data.hasOwnProperty('eventCount')) {
                obj['eventCount'] = ApiClient.convertToType(data['eventCount'], 'Number');
            }
            if (data.hasOwnProperty('jobTimeoutMinutes')) {
                obj['jobTimeoutMinutes'] = ApiClient.convertToType(data['jobTimeoutMinutes'], 'Number');
            }
            if (data.hasOwnProperty('devicePoolArn')) {
                obj['devicePoolArn'] = ApiClient.convertToType(data['devicePoolArn'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('radios')) {
                obj['radios'] = ScheduleRunConfigurationRadios.constructFromObject(data['radios']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ScheduleRunConfigurationLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('customerArtifactPaths')) {
                obj['customerArtifactPaths'] = RunCustomerArtifactPaths.constructFromObject(data['customerArtifactPaths']);
            }
            if (data.hasOwnProperty('webUrl')) {
                obj['webUrl'] = ApiClient.convertToType(data['webUrl'], 'String');
            }
            if (data.hasOwnProperty('skipAppResign')) {
                obj['skipAppResign'] = ApiClient.convertToType(data['skipAppResign'], 'Boolean');
            }
            if (data.hasOwnProperty('testSpecArn')) {
                obj['testSpecArn'] = ApiClient.convertToType(data['testSpecArn'], 'String');
            }
            if (data.hasOwnProperty('deviceSelectionResult')) {
                obj['deviceSelectionResult'] = RunDeviceSelectionResult.constructFromObject(data['deviceSelectionResult']);
            }
            if (data.hasOwnProperty('vpcConfig')) {
                obj['vpcConfig'] = CreateProjectRequestVpcConfig.constructFromObject(data['vpcConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleRunResultRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleRunResultRun</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          TestType.validateJSON(data['type']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          DevicePlatform.validateJSON(data['platform']);
        }
        // validate the optional field `created`
        if (data['created']) { // data not null
          Date.validateJSON(data['created']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ExecutionStatus.validateJSON(data['status']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          ExecutionResult.validateJSON(data['result']);
        }
        // validate the optional field `started`
        if (data['started']) { // data not null
          Date.validateJSON(data['started']);
        }
        // validate the optional field `stopped`
        if (data['stopped']) { // data not null
          Date.validateJSON(data['stopped']);
        }
        // validate the optional field `counters`
        if (data['counters']) { // data not null
          RunCounters.validateJSON(data['counters']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          String.validateJSON(data['message']);
        }
        // validate the optional field `totalJobs`
        if (data['totalJobs']) { // data not null
          Number.validateJSON(data['totalJobs']);
        }
        // validate the optional field `completedJobs`
        if (data['completedJobs']) { // data not null
          Number.validateJSON(data['completedJobs']);
        }
        // validate the optional field `billingMethod`
        if (data['billingMethod']) { // data not null
          BillingMethod.validateJSON(data['billingMethod']);
        }
        // validate the optional field `deviceMinutes`
        if (data['deviceMinutes']) { // data not null
          RunDeviceMinutes.validateJSON(data['deviceMinutes']);
        }
        // validate the optional field `networkProfile`
        if (data['networkProfile']) { // data not null
          RunNetworkProfile.validateJSON(data['networkProfile']);
        }
        // validate the optional field `parsingResultUrl`
        if (data['parsingResultUrl']) { // data not null
          String.validateJSON(data['parsingResultUrl']);
        }
        // validate the optional field `resultCode`
        if (data['resultCode']) { // data not null
          ExecutionResultCode.validateJSON(data['resultCode']);
        }
        // validate the optional field `seed`
        if (data['seed']) { // data not null
          Number.validateJSON(data['seed']);
        }
        // validate the optional field `appUpload`
        if (data['appUpload']) { // data not null
          String.validateJSON(data['appUpload']);
        }
        // validate the optional field `eventCount`
        if (data['eventCount']) { // data not null
          Number.validateJSON(data['eventCount']);
        }
        // validate the optional field `jobTimeoutMinutes`
        if (data['jobTimeoutMinutes']) { // data not null
          Number.validateJSON(data['jobTimeoutMinutes']);
        }
        // validate the optional field `devicePoolArn`
        if (data['devicePoolArn']) { // data not null
          String.validateJSON(data['devicePoolArn']);
        }
        // validate the optional field `locale`
        if (data['locale']) { // data not null
          String.validateJSON(data['locale']);
        }
        // validate the optional field `radios`
        if (data['radios']) { // data not null
          ScheduleRunConfigurationRadios.validateJSON(data['radios']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          ScheduleRunConfigurationLocation.validateJSON(data['location']);
        }
        // validate the optional field `customerArtifactPaths`
        if (data['customerArtifactPaths']) { // data not null
          RunCustomerArtifactPaths.validateJSON(data['customerArtifactPaths']);
        }
        // validate the optional field `webUrl`
        if (data['webUrl']) { // data not null
          String.validateJSON(data['webUrl']);
        }
        // validate the optional field `skipAppResign`
        if (data['skipAppResign']) { // data not null
          Boolean.validateJSON(data['skipAppResign']);
        }
        // validate the optional field `testSpecArn`
        if (data['testSpecArn']) { // data not null
          String.validateJSON(data['testSpecArn']);
        }
        // validate the optional field `deviceSelectionResult`
        if (data['deviceSelectionResult']) { // data not null
          RunDeviceSelectionResult.validateJSON(data['deviceSelectionResult']);
        }
        // validate the optional field `vpcConfig`
        if (data['vpcConfig']) { // data not null
          CreateProjectRequestVpcConfig.validateJSON(data['vpcConfig']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
ScheduleRunResultRun.prototype['arn'] = undefined;

/**
 * @member {String} name
 */
ScheduleRunResultRun.prototype['name'] = undefined;

/**
 * @member {module:model/TestType} type
 */
ScheduleRunResultRun.prototype['type'] = undefined;

/**
 * @member {module:model/DevicePlatform} platform
 */
ScheduleRunResultRun.prototype['platform'] = undefined;

/**
 * @member {Date} created
 */
ScheduleRunResultRun.prototype['created'] = undefined;

/**
 * @member {module:model/ExecutionStatus} status
 */
ScheduleRunResultRun.prototype['status'] = undefined;

/**
 * @member {module:model/ExecutionResult} result
 */
ScheduleRunResultRun.prototype['result'] = undefined;

/**
 * @member {Date} started
 */
ScheduleRunResultRun.prototype['started'] = undefined;

/**
 * @member {Date} stopped
 */
ScheduleRunResultRun.prototype['stopped'] = undefined;

/**
 * @member {module:model/RunCounters} counters
 */
ScheduleRunResultRun.prototype['counters'] = undefined;

/**
 * @member {String} message
 */
ScheduleRunResultRun.prototype['message'] = undefined;

/**
 * @member {Number} totalJobs
 */
ScheduleRunResultRun.prototype['totalJobs'] = undefined;

/**
 * @member {Number} completedJobs
 */
ScheduleRunResultRun.prototype['completedJobs'] = undefined;

/**
 * @member {module:model/BillingMethod} billingMethod
 */
ScheduleRunResultRun.prototype['billingMethod'] = undefined;

/**
 * @member {module:model/RunDeviceMinutes} deviceMinutes
 */
ScheduleRunResultRun.prototype['deviceMinutes'] = undefined;

/**
 * @member {module:model/RunNetworkProfile} networkProfile
 */
ScheduleRunResultRun.prototype['networkProfile'] = undefined;

/**
 * @member {String} parsingResultUrl
 */
ScheduleRunResultRun.prototype['parsingResultUrl'] = undefined;

/**
 * @member {module:model/ExecutionResultCode} resultCode
 */
ScheduleRunResultRun.prototype['resultCode'] = undefined;

/**
 * @member {Number} seed
 */
ScheduleRunResultRun.prototype['seed'] = undefined;

/**
 * @member {String} appUpload
 */
ScheduleRunResultRun.prototype['appUpload'] = undefined;

/**
 * @member {Number} eventCount
 */
ScheduleRunResultRun.prototype['eventCount'] = undefined;

/**
 * @member {Number} jobTimeoutMinutes
 */
ScheduleRunResultRun.prototype['jobTimeoutMinutes'] = undefined;

/**
 * @member {String} devicePoolArn
 */
ScheduleRunResultRun.prototype['devicePoolArn'] = undefined;

/**
 * @member {String} locale
 */
ScheduleRunResultRun.prototype['locale'] = undefined;

/**
 * @member {module:model/ScheduleRunConfigurationRadios} radios
 */
ScheduleRunResultRun.prototype['radios'] = undefined;

/**
 * @member {module:model/ScheduleRunConfigurationLocation} location
 */
ScheduleRunResultRun.prototype['location'] = undefined;

/**
 * @member {module:model/RunCustomerArtifactPaths} customerArtifactPaths
 */
ScheduleRunResultRun.prototype['customerArtifactPaths'] = undefined;

/**
 * @member {String} webUrl
 */
ScheduleRunResultRun.prototype['webUrl'] = undefined;

/**
 * @member {Boolean} skipAppResign
 */
ScheduleRunResultRun.prototype['skipAppResign'] = undefined;

/**
 * @member {String} testSpecArn
 */
ScheduleRunResultRun.prototype['testSpecArn'] = undefined;

/**
 * @member {module:model/RunDeviceSelectionResult} deviceSelectionResult
 */
ScheduleRunResultRun.prototype['deviceSelectionResult'] = undefined;

/**
 * @member {module:model/CreateProjectRequestVpcConfig} vpcConfig
 */
ScheduleRunResultRun.prototype['vpcConfig'] = undefined;


// Implement Run interface:
/**
 * @member {String} arn
 */
Run.prototype['arn'] = undefined;
/**
 * @member {String} name
 */
Run.prototype['name'] = undefined;
/**
 * @member {module:model/TestType} type
 */
Run.prototype['type'] = undefined;
/**
 * @member {module:model/DevicePlatform} platform
 */
Run.prototype['platform'] = undefined;
/**
 * @member {Date} created
 */
Run.prototype['created'] = undefined;
/**
 * @member {module:model/ExecutionStatus} status
 */
Run.prototype['status'] = undefined;
/**
 * @member {module:model/ExecutionResult} result
 */
Run.prototype['result'] = undefined;
/**
 * @member {Date} started
 */
Run.prototype['started'] = undefined;
/**
 * @member {Date} stopped
 */
Run.prototype['stopped'] = undefined;
/**
 * @member {module:model/RunCounters} counters
 */
Run.prototype['counters'] = undefined;
/**
 * @member {String} message
 */
Run.prototype['message'] = undefined;
/**
 * @member {Number} totalJobs
 */
Run.prototype['totalJobs'] = undefined;
/**
 * @member {Number} completedJobs
 */
Run.prototype['completedJobs'] = undefined;
/**
 * @member {module:model/BillingMethod} billingMethod
 */
Run.prototype['billingMethod'] = undefined;
/**
 * @member {module:model/RunDeviceMinutes} deviceMinutes
 */
Run.prototype['deviceMinutes'] = undefined;
/**
 * @member {module:model/RunNetworkProfile} networkProfile
 */
Run.prototype['networkProfile'] = undefined;
/**
 * @member {String} parsingResultUrl
 */
Run.prototype['parsingResultUrl'] = undefined;
/**
 * @member {module:model/ExecutionResultCode} resultCode
 */
Run.prototype['resultCode'] = undefined;
/**
 * @member {Number} seed
 */
Run.prototype['seed'] = undefined;
/**
 * @member {String} appUpload
 */
Run.prototype['appUpload'] = undefined;
/**
 * @member {Number} eventCount
 */
Run.prototype['eventCount'] = undefined;
/**
 * @member {Number} jobTimeoutMinutes
 */
Run.prototype['jobTimeoutMinutes'] = undefined;
/**
 * @member {String} devicePoolArn
 */
Run.prototype['devicePoolArn'] = undefined;
/**
 * @member {String} locale
 */
Run.prototype['locale'] = undefined;
/**
 * @member {module:model/ScheduleRunConfigurationRadios} radios
 */
Run.prototype['radios'] = undefined;
/**
 * @member {module:model/ScheduleRunConfigurationLocation} location
 */
Run.prototype['location'] = undefined;
/**
 * @member {module:model/RunCustomerArtifactPaths} customerArtifactPaths
 */
Run.prototype['customerArtifactPaths'] = undefined;
/**
 * @member {String} webUrl
 */
Run.prototype['webUrl'] = undefined;
/**
 * @member {Boolean} skipAppResign
 */
Run.prototype['skipAppResign'] = undefined;
/**
 * @member {String} testSpecArn
 */
Run.prototype['testSpecArn'] = undefined;
/**
 * @member {module:model/RunDeviceSelectionResult} deviceSelectionResult
 */
Run.prototype['deviceSelectionResult'] = undefined;
/**
 * @member {module:model/CreateProjectRequestVpcConfig} vpcConfig
 */
Run.prototype['vpcConfig'] = undefined;




export default ScheduleRunResultRun;

