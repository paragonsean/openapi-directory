/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Upload from './Upload';
import UploadCategory from './UploadCategory';
import UploadStatus from './UploadStatus';
import UploadType from './UploadType';

/**
 * The UpdateUploadResultUpload model module.
 * @module model/UpdateUploadResultUpload
 * @version 2015-06-23
 */
class UpdateUploadResultUpload {
    /**
     * Constructs a new <code>UpdateUploadResultUpload</code>.
     * @alias module:model/UpdateUploadResultUpload
     * @implements module:model/Upload
     */
    constructor() { 
        Upload.initialize(this);
        UpdateUploadResultUpload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateUploadResultUpload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateUploadResultUpload} obj Optional instance to populate.
     * @return {module:model/UpdateUploadResultUpload} The populated <code>UpdateUploadResultUpload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateUploadResultUpload();
            Upload.constructFromObject(data, obj);

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], UploadType);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], UploadStatus);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], UploadCategory);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateUploadResultUpload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateUploadResultUpload</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `created`
        if (data['created']) { // data not null
          Date.validateJSON(data['created']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          UploadType.validateJSON(data['type']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          UploadStatus.validateJSON(data['status']);
        }
        // validate the optional field `url`
        if (data['url']) { // data not null
          String.validateJSON(data['url']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          String.validateJSON(data['metadata']);
        }
        // validate the optional field `contentType`
        if (data['contentType']) { // data not null
          String.validateJSON(data['contentType']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          String.validateJSON(data['message']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          UploadCategory.validateJSON(data['category']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
UpdateUploadResultUpload.prototype['arn'] = undefined;

/**
 * @member {String} name
 */
UpdateUploadResultUpload.prototype['name'] = undefined;

/**
 * @member {Date} created
 */
UpdateUploadResultUpload.prototype['created'] = undefined;

/**
 * @member {module:model/UploadType} type
 */
UpdateUploadResultUpload.prototype['type'] = undefined;

/**
 * @member {module:model/UploadStatus} status
 */
UpdateUploadResultUpload.prototype['status'] = undefined;

/**
 * @member {String} url
 */
UpdateUploadResultUpload.prototype['url'] = undefined;

/**
 * @member {String} metadata
 */
UpdateUploadResultUpload.prototype['metadata'] = undefined;

/**
 * @member {String} contentType
 */
UpdateUploadResultUpload.prototype['contentType'] = undefined;

/**
 * @member {String} message
 */
UpdateUploadResultUpload.prototype['message'] = undefined;

/**
 * @member {module:model/UploadCategory} category
 */
UpdateUploadResultUpload.prototype['category'] = undefined;


// Implement Upload interface:
/**
 * @member {String} arn
 */
Upload.prototype['arn'] = undefined;
/**
 * @member {String} name
 */
Upload.prototype['name'] = undefined;
/**
 * @member {Date} created
 */
Upload.prototype['created'] = undefined;
/**
 * @member {module:model/UploadType} type
 */
Upload.prototype['type'] = undefined;
/**
 * @member {module:model/UploadStatus} status
 */
Upload.prototype['status'] = undefined;
/**
 * @member {String} url
 */
Upload.prototype['url'] = undefined;
/**
 * @member {String} metadata
 */
Upload.prototype['metadata'] = undefined;
/**
 * @member {String} contentType
 */
Upload.prototype['contentType'] = undefined;
/**
 * @member {String} message
 */
Upload.prototype['message'] = undefined;
/**
 * @member {module:model/UploadCategory} category
 */
Upload.prototype['category'] = undefined;




export default UpdateUploadResultUpload;

