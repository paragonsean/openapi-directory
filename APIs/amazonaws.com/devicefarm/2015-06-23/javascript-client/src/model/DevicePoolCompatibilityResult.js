/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DevicePoolCompatibilityResultDevice from './DevicePoolCompatibilityResultDevice';

/**
 * The DevicePoolCompatibilityResult model module.
 * @module model/DevicePoolCompatibilityResult
 * @version 2015-06-23
 */
class DevicePoolCompatibilityResult {
    /**
     * Constructs a new <code>DevicePoolCompatibilityResult</code>.
     * Represents a device pool compatibility result.
     * @alias module:model/DevicePoolCompatibilityResult
     */
    constructor() { 
        
        DevicePoolCompatibilityResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DevicePoolCompatibilityResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DevicePoolCompatibilityResult} obj Optional instance to populate.
     * @return {module:model/DevicePoolCompatibilityResult} The populated <code>DevicePoolCompatibilityResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DevicePoolCompatibilityResult();

            if (data.hasOwnProperty('device')) {
                obj['device'] = DevicePoolCompatibilityResultDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('compatible')) {
                obj['compatible'] = ApiClient.convertToType(data['compatible'], 'Boolean');
            }
            if (data.hasOwnProperty('incompatibilityMessages')) {
                obj['incompatibilityMessages'] = ApiClient.convertToType(data['incompatibilityMessages'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DevicePoolCompatibilityResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DevicePoolCompatibilityResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `device`
        if (data['device']) { // data not null
          DevicePoolCompatibilityResultDevice.validateJSON(data['device']);
        }
        // validate the optional field `compatible`
        if (data['compatible']) { // data not null
          Boolean.validateJSON(data['compatible']);
        }
        // validate the optional field `incompatibilityMessages`
        if (data['incompatibilityMessages']) { // data not null
          Array.validateJSON(data['incompatibilityMessages']);
        }

        return true;
    }


}



/**
 * @member {module:model/DevicePoolCompatibilityResultDevice} device
 */
DevicePoolCompatibilityResult.prototype['device'] = undefined;

/**
 * @member {Boolean} compatible
 */
DevicePoolCompatibilityResult.prototype['compatible'] = undefined;

/**
 * @member {Array} incompatibilityMessages
 */
DevicePoolCompatibilityResult.prototype['incompatibilityMessages'] = undefined;






export default DevicePoolCompatibilityResult;

