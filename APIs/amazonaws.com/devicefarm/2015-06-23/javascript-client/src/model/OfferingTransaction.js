/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferingTransactionCost from './OfferingTransactionCost';
import OfferingTransactionOfferingStatus from './OfferingTransactionOfferingStatus';

/**
 * The OfferingTransaction model module.
 * @module model/OfferingTransaction
 * @version 2015-06-23
 */
class OfferingTransaction {
    /**
     * Constructs a new <code>OfferingTransaction</code>.
     * Represents the metadata of an offering transaction.
     * @alias module:model/OfferingTransaction
     */
    constructor() { 
        
        OfferingTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OfferingTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferingTransaction} obj Optional instance to populate.
     * @return {module:model/OfferingTransaction} The populated <code>OfferingTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferingTransaction();

            if (data.hasOwnProperty('offeringStatus')) {
                obj['offeringStatus'] = OfferingTransactionOfferingStatus.constructFromObject(data['offeringStatus']);
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('offeringPromotionId')) {
                obj['offeringPromotionId'] = ApiClient.convertToType(data['offeringPromotionId'], 'String');
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = OfferingTransactionCost.constructFromObject(data['cost']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OfferingTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OfferingTransaction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `offeringStatus`
        if (data['offeringStatus']) { // data not null
          OfferingTransactionOfferingStatus.validateJSON(data['offeringStatus']);
        }
        // validate the optional field `transactionId`
        if (data['transactionId']) { // data not null
          String.validateJSON(data['transactionId']);
        }
        // validate the optional field `offeringPromotionId`
        if (data['offeringPromotionId']) { // data not null
          String.validateJSON(data['offeringPromotionId']);
        }
        // validate the optional field `createdOn`
        if (data['createdOn']) { // data not null
          Date.validateJSON(data['createdOn']);
        }
        // validate the optional field `cost`
        if (data['cost']) { // data not null
          OfferingTransactionCost.validateJSON(data['cost']);
        }

        return true;
    }


}



/**
 * @member {module:model/OfferingTransactionOfferingStatus} offeringStatus
 */
OfferingTransaction.prototype['offeringStatus'] = undefined;

/**
 * @member {String} transactionId
 */
OfferingTransaction.prototype['transactionId'] = undefined;

/**
 * @member {String} offeringPromotionId
 */
OfferingTransaction.prototype['offeringPromotionId'] = undefined;

/**
 * @member {Date} createdOn
 */
OfferingTransaction.prototype['createdOn'] = undefined;

/**
 * @member {module:model/OfferingTransactionCost} cost
 */
OfferingTransaction.prototype['cost'] = undefined;






export default OfferingTransaction;

