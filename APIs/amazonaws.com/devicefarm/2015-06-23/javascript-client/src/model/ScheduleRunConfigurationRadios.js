/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Radios from './Radios';

/**
 * The ScheduleRunConfigurationRadios model module.
 * @module model/ScheduleRunConfigurationRadios
 * @version 2015-06-23
 */
class ScheduleRunConfigurationRadios {
    /**
     * Constructs a new <code>ScheduleRunConfigurationRadios</code>.
     * @alias module:model/ScheduleRunConfigurationRadios
     * @implements module:model/Radios
     */
    constructor() { 
        Radios.initialize(this);
        ScheduleRunConfigurationRadios.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScheduleRunConfigurationRadios</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleRunConfigurationRadios} obj Optional instance to populate.
     * @return {module:model/ScheduleRunConfigurationRadios} The populated <code>ScheduleRunConfigurationRadios</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleRunConfigurationRadios();
            Radios.constructFromObject(data, obj);

            if (data.hasOwnProperty('wifi')) {
                obj['wifi'] = ApiClient.convertToType(data['wifi'], 'Boolean');
            }
            if (data.hasOwnProperty('bluetooth')) {
                obj['bluetooth'] = ApiClient.convertToType(data['bluetooth'], 'Boolean');
            }
            if (data.hasOwnProperty('nfc')) {
                obj['nfc'] = ApiClient.convertToType(data['nfc'], 'Boolean');
            }
            if (data.hasOwnProperty('gps')) {
                obj['gps'] = ApiClient.convertToType(data['gps'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleRunConfigurationRadios</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleRunConfigurationRadios</code>.
     */
    static validateJSON(data) {
        // validate the optional field `wifi`
        if (data['wifi']) { // data not null
          Boolean.validateJSON(data['wifi']);
        }
        // validate the optional field `bluetooth`
        if (data['bluetooth']) { // data not null
          Boolean.validateJSON(data['bluetooth']);
        }
        // validate the optional field `nfc`
        if (data['nfc']) { // data not null
          Boolean.validateJSON(data['nfc']);
        }
        // validate the optional field `gps`
        if (data['gps']) { // data not null
          Boolean.validateJSON(data['gps']);
        }

        return true;
    }


}



/**
 * @member {Boolean} wifi
 */
ScheduleRunConfigurationRadios.prototype['wifi'] = undefined;

/**
 * @member {Boolean} bluetooth
 */
ScheduleRunConfigurationRadios.prototype['bluetooth'] = undefined;

/**
 * @member {Boolean} nfc
 */
ScheduleRunConfigurationRadios.prototype['nfc'] = undefined;

/**
 * @member {Boolean} gps
 */
ScheduleRunConfigurationRadios.prototype['gps'] = undefined;


// Implement Radios interface:
/**
 * @member {Boolean} wifi
 */
Radios.prototype['wifi'] = undefined;
/**
 * @member {Boolean} bluetooth
 */
Radios.prototype['bluetooth'] = undefined;
/**
 * @member {Boolean} nfc
 */
Radios.prototype['nfc'] = undefined;
/**
 * @member {Boolean} gps
 */
Radios.prototype['gps'] = undefined;




export default ScheduleRunConfigurationRadios;

