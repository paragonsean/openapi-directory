/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestType from './TestType';

/**
 * The ScheduleRunTest model module.
 * @module model/ScheduleRunTest
 * @version 2015-06-23
 */
class ScheduleRunTest {
    /**
     * Constructs a new <code>ScheduleRunTest</code>.
     * Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see &lt;a&gt;ScheduleRun&lt;/a&gt;.
     * @alias module:model/ScheduleRunTest
     * @param type {module:model/TestType} 
     */
    constructor(type) { 
        
        ScheduleRunTest.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ScheduleRunTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleRunTest} obj Optional instance to populate.
     * @return {module:model/ScheduleRunTest} The populated <code>ScheduleRunTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleRunTest();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], TestType);
            }
            if (data.hasOwnProperty('testPackageArn')) {
                obj['testPackageArn'] = ApiClient.convertToType(data['testPackageArn'], 'String');
            }
            if (data.hasOwnProperty('testSpecArn')) {
                obj['testSpecArn'] = ApiClient.convertToType(data['testSpecArn'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduleRunTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduleRunTest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScheduleRunTest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          TestType.validateJSON(data['type']);
        }
        // validate the optional field `testPackageArn`
        if (data['testPackageArn']) { // data not null
          String.validateJSON(data['testPackageArn']);
        }
        // validate the optional field `testSpecArn`
        if (data['testSpecArn']) { // data not null
          String.validateJSON(data['testSpecArn']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          String.validateJSON(data['filter']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          Object.validateJSON(data['parameters']);
        }

        return true;
    }


}

ScheduleRunTest.RequiredProperties = ["type"];

/**
 * @member {module:model/TestType} type
 */
ScheduleRunTest.prototype['type'] = undefined;

/**
 * @member {String} testPackageArn
 */
ScheduleRunTest.prototype['testPackageArn'] = undefined;

/**
 * @member {String} testSpecArn
 */
ScheduleRunTest.prototype['testSpecArn'] = undefined;

/**
 * @member {String} filter
 */
ScheduleRunTest.prototype['filter'] = undefined;

/**
 * @member {Object} parameters
 */
ScheduleRunTest.prototype['parameters'] = undefined;






export default ScheduleRunTest;

