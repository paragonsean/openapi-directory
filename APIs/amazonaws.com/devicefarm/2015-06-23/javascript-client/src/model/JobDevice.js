/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';
import DeviceAvailability from './DeviceAvailability';
import DeviceCpu from './DeviceCpu';
import DeviceFormFactor from './DeviceFormFactor';
import DevicePlatform from './DevicePlatform';
import DeviceResolution from './DeviceResolution';

/**
 * The JobDevice model module.
 * @module model/JobDevice
 * @version 2015-06-23
 */
class JobDevice {
    /**
     * Constructs a new <code>JobDevice</code>.
     * @alias module:model/JobDevice
     * @implements module:model/Device
     */
    constructor() { 
        Device.initialize(this);
        JobDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobDevice} obj Optional instance to populate.
     * @return {module:model/JobDevice} The populated <code>JobDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobDevice();
            Device.constructFromObject(data, obj);

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('formFactor')) {
                obj['formFactor'] = ApiClient.convertToType(data['formFactor'], DeviceFormFactor);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], DevicePlatform);
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = DeviceCpu.constructFromObject(data['cpu']);
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = DeviceResolution.constructFromObject(data['resolution']);
            }
            if (data.hasOwnProperty('heapSize')) {
                obj['heapSize'] = ApiClient.convertToType(data['heapSize'], 'Number');
            }
            if (data.hasOwnProperty('memory')) {
                obj['memory'] = ApiClient.convertToType(data['memory'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('carrier')) {
                obj['carrier'] = ApiClient.convertToType(data['carrier'], 'String');
            }
            if (data.hasOwnProperty('radio')) {
                obj['radio'] = ApiClient.convertToType(data['radio'], 'String');
            }
            if (data.hasOwnProperty('remoteAccessEnabled')) {
                obj['remoteAccessEnabled'] = ApiClient.convertToType(data['remoteAccessEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('remoteDebugEnabled')) {
                obj['remoteDebugEnabled'] = ApiClient.convertToType(data['remoteDebugEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('fleetType')) {
                obj['fleetType'] = ApiClient.convertToType(data['fleetType'], 'String');
            }
            if (data.hasOwnProperty('fleetName')) {
                obj['fleetName'] = ApiClient.convertToType(data['fleetName'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], Array);
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], DeviceAvailability);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobDevice</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `manufacturer`
        if (data['manufacturer']) { // data not null
          String.validateJSON(data['manufacturer']);
        }
        // validate the optional field `model`
        if (data['model']) { // data not null
          String.validateJSON(data['model']);
        }
        // validate the optional field `modelId`
        if (data['modelId']) { // data not null
          String.validateJSON(data['modelId']);
        }
        // validate the optional field `formFactor`
        if (data['formFactor']) { // data not null
          DeviceFormFactor.validateJSON(data['formFactor']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          DevicePlatform.validateJSON(data['platform']);
        }
        // validate the optional field `os`
        if (data['os']) { // data not null
          String.validateJSON(data['os']);
        }
        // validate the optional field `cpu`
        if (data['cpu']) { // data not null
          DeviceCpu.validateJSON(data['cpu']);
        }
        // validate the optional field `resolution`
        if (data['resolution']) { // data not null
          DeviceResolution.validateJSON(data['resolution']);
        }
        // validate the optional field `heapSize`
        if (data['heapSize']) { // data not null
          Number.validateJSON(data['heapSize']);
        }
        // validate the optional field `memory`
        if (data['memory']) { // data not null
          Number.validateJSON(data['memory']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          String.validateJSON(data['image']);
        }
        // validate the optional field `carrier`
        if (data['carrier']) { // data not null
          String.validateJSON(data['carrier']);
        }
        // validate the optional field `radio`
        if (data['radio']) { // data not null
          String.validateJSON(data['radio']);
        }
        // validate the optional field `remoteAccessEnabled`
        if (data['remoteAccessEnabled']) { // data not null
          Boolean.validateJSON(data['remoteAccessEnabled']);
        }
        // validate the optional field `remoteDebugEnabled`
        if (data['remoteDebugEnabled']) { // data not null
          Boolean.validateJSON(data['remoteDebugEnabled']);
        }
        // validate the optional field `fleetType`
        if (data['fleetType']) { // data not null
          String.validateJSON(data['fleetType']);
        }
        // validate the optional field `fleetName`
        if (data['fleetName']) { // data not null
          String.validateJSON(data['fleetName']);
        }
        // validate the optional field `instances`
        if (data['instances']) { // data not null
          Array.validateJSON(data['instances']);
        }
        // validate the optional field `availability`
        if (data['availability']) { // data not null
          DeviceAvailability.validateJSON(data['availability']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
JobDevice.prototype['arn'] = undefined;

/**
 * @member {String} name
 */
JobDevice.prototype['name'] = undefined;

/**
 * @member {String} manufacturer
 */
JobDevice.prototype['manufacturer'] = undefined;

/**
 * @member {String} model
 */
JobDevice.prototype['model'] = undefined;

/**
 * @member {String} modelId
 */
JobDevice.prototype['modelId'] = undefined;

/**
 * @member {module:model/DeviceFormFactor} formFactor
 */
JobDevice.prototype['formFactor'] = undefined;

/**
 * @member {module:model/DevicePlatform} platform
 */
JobDevice.prototype['platform'] = undefined;

/**
 * @member {String} os
 */
JobDevice.prototype['os'] = undefined;

/**
 * @member {module:model/DeviceCpu} cpu
 */
JobDevice.prototype['cpu'] = undefined;

/**
 * @member {module:model/DeviceResolution} resolution
 */
JobDevice.prototype['resolution'] = undefined;

/**
 * @member {Number} heapSize
 */
JobDevice.prototype['heapSize'] = undefined;

/**
 * @member {Number} memory
 */
JobDevice.prototype['memory'] = undefined;

/**
 * @member {String} image
 */
JobDevice.prototype['image'] = undefined;

/**
 * @member {String} carrier
 */
JobDevice.prototype['carrier'] = undefined;

/**
 * @member {String} radio
 */
JobDevice.prototype['radio'] = undefined;

/**
 * @member {Boolean} remoteAccessEnabled
 */
JobDevice.prototype['remoteAccessEnabled'] = undefined;

/**
 * @member {Boolean} remoteDebugEnabled
 */
JobDevice.prototype['remoteDebugEnabled'] = undefined;

/**
 * @member {String} fleetType
 */
JobDevice.prototype['fleetType'] = undefined;

/**
 * @member {String} fleetName
 */
JobDevice.prototype['fleetName'] = undefined;

/**
 * @member {Array} instances
 */
JobDevice.prototype['instances'] = undefined;

/**
 * @member {module:model/DeviceAvailability} availability
 */
JobDevice.prototype['availability'] = undefined;


// Implement Device interface:
/**
 * @member {String} arn
 */
Device.prototype['arn'] = undefined;
/**
 * @member {String} name
 */
Device.prototype['name'] = undefined;
/**
 * @member {String} manufacturer
 */
Device.prototype['manufacturer'] = undefined;
/**
 * @member {String} model
 */
Device.prototype['model'] = undefined;
/**
 * @member {String} modelId
 */
Device.prototype['modelId'] = undefined;
/**
 * @member {module:model/DeviceFormFactor} formFactor
 */
Device.prototype['formFactor'] = undefined;
/**
 * @member {module:model/DevicePlatform} platform
 */
Device.prototype['platform'] = undefined;
/**
 * @member {String} os
 */
Device.prototype['os'] = undefined;
/**
 * @member {module:model/DeviceCpu} cpu
 */
Device.prototype['cpu'] = undefined;
/**
 * @member {module:model/DeviceResolution} resolution
 */
Device.prototype['resolution'] = undefined;
/**
 * @member {Number} heapSize
 */
Device.prototype['heapSize'] = undefined;
/**
 * @member {Number} memory
 */
Device.prototype['memory'] = undefined;
/**
 * @member {String} image
 */
Device.prototype['image'] = undefined;
/**
 * @member {String} carrier
 */
Device.prototype['carrier'] = undefined;
/**
 * @member {String} radio
 */
Device.prototype['radio'] = undefined;
/**
 * @member {Boolean} remoteAccessEnabled
 */
Device.prototype['remoteAccessEnabled'] = undefined;
/**
 * @member {Boolean} remoteDebugEnabled
 */
Device.prototype['remoteDebugEnabled'] = undefined;
/**
 * @member {String} fleetType
 */
Device.prototype['fleetType'] = undefined;
/**
 * @member {String} fleetName
 */
Device.prototype['fleetName'] = undefined;
/**
 * @member {Array} instances
 */
Device.prototype['instances'] = undefined;
/**
 * @member {module:model/DeviceAvailability} availability
 */
Device.prototype['availability'] = undefined;




export default JobDevice;

