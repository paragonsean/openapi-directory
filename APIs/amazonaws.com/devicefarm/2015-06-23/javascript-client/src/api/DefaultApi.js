/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDevicePoolRequest from '../model/CreateDevicePoolRequest';
import CreateDevicePoolResult from '../model/CreateDevicePoolResult';
import CreateInstanceProfileRequest from '../model/CreateInstanceProfileRequest';
import CreateInstanceProfileResult from '../model/CreateInstanceProfileResult';
import CreateNetworkProfileRequest from '../model/CreateNetworkProfileRequest';
import CreateNetworkProfileResult from '../model/CreateNetworkProfileResult';
import CreateProjectRequest from '../model/CreateProjectRequest';
import CreateProjectResult from '../model/CreateProjectResult';
import CreateRemoteAccessSessionRequest from '../model/CreateRemoteAccessSessionRequest';
import CreateRemoteAccessSessionResult from '../model/CreateRemoteAccessSessionResult';
import CreateTestGridProjectRequest from '../model/CreateTestGridProjectRequest';
import CreateTestGridProjectResult from '../model/CreateTestGridProjectResult';
import CreateTestGridUrlRequest from '../model/CreateTestGridUrlRequest';
import CreateTestGridUrlResult from '../model/CreateTestGridUrlResult';
import CreateUploadRequest from '../model/CreateUploadRequest';
import CreateUploadResult from '../model/CreateUploadResult';
import CreateVPCEConfigurationRequest from '../model/CreateVPCEConfigurationRequest';
import CreateVPCEConfigurationResult from '../model/CreateVPCEConfigurationResult';
import DeleteDevicePoolRequest from '../model/DeleteDevicePoolRequest';
import DeleteInstanceProfileRequest from '../model/DeleteInstanceProfileRequest';
import DeleteNetworkProfileRequest from '../model/DeleteNetworkProfileRequest';
import DeleteProjectRequest from '../model/DeleteProjectRequest';
import DeleteRemoteAccessSessionRequest from '../model/DeleteRemoteAccessSessionRequest';
import DeleteRunRequest from '../model/DeleteRunRequest';
import DeleteTestGridProjectRequest from '../model/DeleteTestGridProjectRequest';
import DeleteUploadRequest from '../model/DeleteUploadRequest';
import DeleteVPCEConfigurationRequest from '../model/DeleteVPCEConfigurationRequest';
import GetAccountSettingsResult from '../model/GetAccountSettingsResult';
import GetDeviceInstanceRequest from '../model/GetDeviceInstanceRequest';
import GetDeviceInstanceResult from '../model/GetDeviceInstanceResult';
import GetDevicePoolCompatibilityRequest from '../model/GetDevicePoolCompatibilityRequest';
import GetDevicePoolCompatibilityResult from '../model/GetDevicePoolCompatibilityResult';
import GetDevicePoolRequest from '../model/GetDevicePoolRequest';
import GetDevicePoolResult from '../model/GetDevicePoolResult';
import GetDeviceRequest from '../model/GetDeviceRequest';
import GetDeviceResult from '../model/GetDeviceResult';
import GetInstanceProfileRequest from '../model/GetInstanceProfileRequest';
import GetInstanceProfileResult from '../model/GetInstanceProfileResult';
import GetJobRequest from '../model/GetJobRequest';
import GetJobResult from '../model/GetJobResult';
import GetNetworkProfileRequest from '../model/GetNetworkProfileRequest';
import GetNetworkProfileResult from '../model/GetNetworkProfileResult';
import GetOfferingStatusRequest from '../model/GetOfferingStatusRequest';
import GetOfferingStatusResult from '../model/GetOfferingStatusResult';
import GetProjectRequest from '../model/GetProjectRequest';
import GetProjectResult from '../model/GetProjectResult';
import GetRemoteAccessSessionRequest from '../model/GetRemoteAccessSessionRequest';
import GetRemoteAccessSessionResult from '../model/GetRemoteAccessSessionResult';
import GetRunRequest from '../model/GetRunRequest';
import GetRunResult from '../model/GetRunResult';
import GetSuiteRequest from '../model/GetSuiteRequest';
import GetSuiteResult from '../model/GetSuiteResult';
import GetTestGridProjectRequest from '../model/GetTestGridProjectRequest';
import GetTestGridProjectResult from '../model/GetTestGridProjectResult';
import GetTestGridSessionRequest from '../model/GetTestGridSessionRequest';
import GetTestGridSessionResult from '../model/GetTestGridSessionResult';
import GetTestRequest from '../model/GetTestRequest';
import GetTestResult from '../model/GetTestResult';
import GetUploadRequest from '../model/GetUploadRequest';
import GetUploadResult from '../model/GetUploadResult';
import GetVPCEConfigurationRequest from '../model/GetVPCEConfigurationRequest';
import GetVPCEConfigurationResult from '../model/GetVPCEConfigurationResult';
import InstallToRemoteAccessSessionRequest from '../model/InstallToRemoteAccessSessionRequest';
import InstallToRemoteAccessSessionResult from '../model/InstallToRemoteAccessSessionResult';
import ListArtifactsRequest from '../model/ListArtifactsRequest';
import ListArtifactsResult from '../model/ListArtifactsResult';
import ListDeviceInstancesRequest from '../model/ListDeviceInstancesRequest';
import ListDeviceInstancesResult from '../model/ListDeviceInstancesResult';
import ListDevicePoolsRequest from '../model/ListDevicePoolsRequest';
import ListDevicePoolsResult from '../model/ListDevicePoolsResult';
import ListDevicesRequest from '../model/ListDevicesRequest';
import ListDevicesResult from '../model/ListDevicesResult';
import ListInstanceProfilesRequest from '../model/ListInstanceProfilesRequest';
import ListInstanceProfilesResult from '../model/ListInstanceProfilesResult';
import ListJobsRequest from '../model/ListJobsRequest';
import ListJobsResult from '../model/ListJobsResult';
import ListNetworkProfilesRequest from '../model/ListNetworkProfilesRequest';
import ListNetworkProfilesResult from '../model/ListNetworkProfilesResult';
import ListOfferingPromotionsRequest from '../model/ListOfferingPromotionsRequest';
import ListOfferingPromotionsResult from '../model/ListOfferingPromotionsResult';
import ListOfferingTransactionsRequest from '../model/ListOfferingTransactionsRequest';
import ListOfferingTransactionsResult from '../model/ListOfferingTransactionsResult';
import ListOfferingsRequest from '../model/ListOfferingsRequest';
import ListOfferingsResult from '../model/ListOfferingsResult';
import ListProjectsRequest from '../model/ListProjectsRequest';
import ListProjectsResult from '../model/ListProjectsResult';
import ListRemoteAccessSessionsRequest from '../model/ListRemoteAccessSessionsRequest';
import ListRemoteAccessSessionsResult from '../model/ListRemoteAccessSessionsResult';
import ListRunsRequest from '../model/ListRunsRequest';
import ListRunsResult from '../model/ListRunsResult';
import ListSamplesRequest from '../model/ListSamplesRequest';
import ListSamplesResult from '../model/ListSamplesResult';
import ListSuitesRequest from '../model/ListSuitesRequest';
import ListSuitesResult from '../model/ListSuitesResult';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTestGridProjectsRequest from '../model/ListTestGridProjectsRequest';
import ListTestGridProjectsResult from '../model/ListTestGridProjectsResult';
import ListTestGridSessionActionsRequest from '../model/ListTestGridSessionActionsRequest';
import ListTestGridSessionActionsResult from '../model/ListTestGridSessionActionsResult';
import ListTestGridSessionArtifactsRequest from '../model/ListTestGridSessionArtifactsRequest';
import ListTestGridSessionArtifactsResult from '../model/ListTestGridSessionArtifactsResult';
import ListTestGridSessionsRequest from '../model/ListTestGridSessionsRequest';
import ListTestGridSessionsResult from '../model/ListTestGridSessionsResult';
import ListTestsRequest from '../model/ListTestsRequest';
import ListTestsResult from '../model/ListTestsResult';
import ListUniqueProblemsRequest from '../model/ListUniqueProblemsRequest';
import ListUniqueProblemsResult from '../model/ListUniqueProblemsResult';
import ListUploadsRequest from '../model/ListUploadsRequest';
import ListUploadsResult from '../model/ListUploadsResult';
import ListVPCEConfigurationsRequest from '../model/ListVPCEConfigurationsRequest';
import ListVPCEConfigurationsResult from '../model/ListVPCEConfigurationsResult';
import PurchaseOfferingRequest from '../model/PurchaseOfferingRequest';
import PurchaseOfferingResult from '../model/PurchaseOfferingResult';
import RenewOfferingRequest from '../model/RenewOfferingRequest';
import RenewOfferingResult from '../model/RenewOfferingResult';
import ScheduleRunRequest from '../model/ScheduleRunRequest';
import ScheduleRunResult from '../model/ScheduleRunResult';
import StopJobRequest from '../model/StopJobRequest';
import StopJobResult from '../model/StopJobResult';
import StopRemoteAccessSessionRequest from '../model/StopRemoteAccessSessionRequest';
import StopRemoteAccessSessionResult from '../model/StopRemoteAccessSessionResult';
import StopRunRequest from '../model/StopRunRequest';
import StopRunResult from '../model/StopRunResult';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateDeviceInstanceRequest from '../model/UpdateDeviceInstanceRequest';
import UpdateDeviceInstanceResult from '../model/UpdateDeviceInstanceResult';
import UpdateDevicePoolRequest from '../model/UpdateDevicePoolRequest';
import UpdateDevicePoolResult from '../model/UpdateDevicePoolResult';
import UpdateInstanceProfileRequest from '../model/UpdateInstanceProfileRequest';
import UpdateInstanceProfileResult from '../model/UpdateInstanceProfileResult';
import UpdateNetworkProfileRequest from '../model/UpdateNetworkProfileRequest';
import UpdateNetworkProfileResult from '../model/UpdateNetworkProfileResult';
import UpdateProjectRequest from '../model/UpdateProjectRequest';
import UpdateProjectResult from '../model/UpdateProjectResult';
import UpdateTestGridProjectRequest from '../model/UpdateTestGridProjectRequest';
import UpdateTestGridProjectResult from '../model/UpdateTestGridProjectResult';
import UpdateUploadRequest from '../model/UpdateUploadRequest';
import UpdateUploadResult from '../model/UpdateUploadResult';
import UpdateVPCEConfigurationRequest from '../model/UpdateVPCEConfigurationRequest';
import UpdateVPCEConfigurationResult from '../model/UpdateVPCEConfigurationResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-06-23
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDevicePool operation.
     * @callback module:api/DefaultApi~createDevicePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDevicePoolResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a device pool.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDevicePoolRequest} createDevicePoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDevicePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDevicePoolResult}
     */
    createDevicePool(xAmzTarget, createDevicePoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDevicePoolRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDevicePool");
      }
      // verify the required parameter 'createDevicePoolRequest' is set
      if (createDevicePoolRequest === undefined || createDevicePoolRequest === null) {
        throw new Error("Missing the required parameter 'createDevicePoolRequest' when calling createDevicePool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDevicePoolResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateDevicePool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstanceProfile operation.
     * @callback module:api/DefaultApi~createInstanceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInstanceProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a profile that can be applied to one or more private fleet device instances.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateInstanceProfileRequest} createInstanceProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInstanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInstanceProfileResult}
     */
    createInstanceProfile(xAmzTarget, createInstanceProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInstanceProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createInstanceProfile");
      }
      // verify the required parameter 'createInstanceProfileRequest' is set
      if (createInstanceProfileRequest === undefined || createInstanceProfileRequest === null) {
        throw new Error("Missing the required parameter 'createInstanceProfileRequest' when calling createInstanceProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInstanceProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateInstanceProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkProfile operation.
     * @callback module:api/DefaultApi~createNetworkProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a network profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateNetworkProfileRequest} createNetworkProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNetworkProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkProfileResult}
     */
    createNetworkProfile(xAmzTarget, createNetworkProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createNetworkProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createNetworkProfile");
      }
      // verify the required parameter 'createNetworkProfileRequest' is set
      if (createNetworkProfileRequest === undefined || createNetworkProfileRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkProfileRequest' when calling createNetworkProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateNetworkProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProjectRequest} createProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProjectResult}
     */
    createProject(xAmzTarget, createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProject");
      }
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRemoteAccessSession operation.
     * @callback module:api/DefaultApi~createRemoteAccessSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRemoteAccessSessionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specifies and starts a remote access session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRemoteAccessSessionRequest} createRemoteAccessSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRemoteAccessSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRemoteAccessSessionResult}
     */
    createRemoteAccessSession(xAmzTarget, createRemoteAccessSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRemoteAccessSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRemoteAccessSession");
      }
      // verify the required parameter 'createRemoteAccessSessionRequest' is set
      if (createRemoteAccessSessionRequest === undefined || createRemoteAccessSessionRequest === null) {
        throw new Error("Missing the required parameter 'createRemoteAccessSessionRequest' when calling createRemoteAccessSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRemoteAccessSessionResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateRemoteAccessSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTestGridProject operation.
     * @callback module:api/DefaultApi~createTestGridProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTestGridProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Selenium testing project. Projects are used to track <a>TestGridSession</a> instances.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTestGridProjectRequest} createTestGridProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTestGridProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTestGridProjectResult}
     */
    createTestGridProject(xAmzTarget, createTestGridProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTestGridProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTestGridProject");
      }
      // verify the required parameter 'createTestGridProjectRequest' is set
      if (createTestGridProjectRequest === undefined || createTestGridProjectRequest === null) {
        throw new Error("Missing the required parameter 'createTestGridProjectRequest' when calling createTestGridProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTestGridProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateTestGridProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTestGridUrl operation.
     * @callback module:api/DefaultApi~createTestGridUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTestGridUrlResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a signed, short-term URL that can be passed to a Selenium <code>RemoteWebDriver</code> constructor.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTestGridUrlRequest} createTestGridUrlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTestGridUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTestGridUrlResult}
     */
    createTestGridUrl(xAmzTarget, createTestGridUrlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTestGridUrlRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTestGridUrl");
      }
      // verify the required parameter 'createTestGridUrlRequest' is set
      if (createTestGridUrlRequest === undefined || createTestGridUrlRequest === null) {
        throw new Error("Missing the required parameter 'createTestGridUrlRequest' when calling createTestGridUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTestGridUrlResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateTestGridUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpload operation.
     * @callback module:api/DefaultApi~createUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUploadResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads an app or test scripts.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUploadRequest} createUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUploadResult}
     */
    createUpload(xAmzTarget, createUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUpload");
      }
      // verify the required parameter 'createUploadRequest' is set
      if (createUploadRequest === undefined || createUploadRequest === null) {
        throw new Error("Missing the required parameter 'createUploadRequest' when calling createUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUploadResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVPCEConfiguration operation.
     * @callback module:api/DefaultApi~createVPCEConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVPCEConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateVPCEConfigurationRequest} createVPCEConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVPCEConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVPCEConfigurationResult}
     */
    createVPCEConfiguration(xAmzTarget, createVPCEConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVPCEConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createVPCEConfiguration");
      }
      // verify the required parameter 'createVPCEConfigurationRequest' is set
      if (createVPCEConfigurationRequest === undefined || createVPCEConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createVPCEConfigurationRequest' when calling createVPCEConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVPCEConfigurationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.CreateVPCEConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDevicePool operation.
     * @callback module:api/DefaultApi~deleteDevicePoolCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDevicePoolRequest} deleteDevicePoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDevicePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDevicePool(xAmzTarget, deleteDevicePoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDevicePoolRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDevicePool");
      }
      // verify the required parameter 'deleteDevicePoolRequest' is set
      if (deleteDevicePoolRequest === undefined || deleteDevicePoolRequest === null) {
        throw new Error("Missing the required parameter 'deleteDevicePoolRequest' when calling deleteDevicePool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteDevicePool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstanceProfile operation.
     * @callback module:api/DefaultApi~deleteInstanceProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a profile that can be applied to one or more private device instances.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteInstanceProfileRequest} deleteInstanceProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInstanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInstanceProfile(xAmzTarget, deleteInstanceProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteInstanceProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteInstanceProfile");
      }
      // verify the required parameter 'deleteInstanceProfileRequest' is set
      if (deleteInstanceProfileRequest === undefined || deleteInstanceProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteInstanceProfileRequest' when calling deleteInstanceProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteInstanceProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkProfile operation.
     * @callback module:api/DefaultApi~deleteNetworkProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a network profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteNetworkProfileRequest} deleteNetworkProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteNetworkProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteNetworkProfile(xAmzTarget, deleteNetworkProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteNetworkProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteNetworkProfile");
      }
      // verify the required parameter 'deleteNetworkProfileRequest' is set
      if (deleteNetworkProfileRequest === undefined || deleteNetworkProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteNetworkProfileRequest' when calling deleteNetworkProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteNetworkProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an AWS Device Farm project, given the project ARN.</p> <p> Deleting this resource does not stop an in-progress run.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProjectRequest} deleteProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProject(xAmzTarget, deleteProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProject");
      }
      // verify the required parameter 'deleteProjectRequest' is set
      if (deleteProjectRequest === undefined || deleteProjectRequest === null) {
        throw new Error("Missing the required parameter 'deleteProjectRequest' when calling deleteProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteAccessSession operation.
     * @callback module:api/DefaultApi~deleteRemoteAccessSessionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a completed remote access session and its results.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRemoteAccessSessionRequest} deleteRemoteAccessSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRemoteAccessSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRemoteAccessSession(xAmzTarget, deleteRemoteAccessSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRemoteAccessSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRemoteAccessSession");
      }
      // verify the required parameter 'deleteRemoteAccessSessionRequest' is set
      if (deleteRemoteAccessSessionRequest === undefined || deleteRemoteAccessSessionRequest === null) {
        throw new Error("Missing the required parameter 'deleteRemoteAccessSessionRequest' when calling deleteRemoteAccessSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteRemoteAccessSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRun operation.
     * @callback module:api/DefaultApi~deleteRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the run, given the run ARN.</p> <p> Deleting this resource does not stop an in-progress run.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRunRequest} deleteRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRun(xAmzTarget, deleteRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRun");
      }
      // verify the required parameter 'deleteRunRequest' is set
      if (deleteRunRequest === undefined || deleteRunRequest === null) {
        throw new Error("Missing the required parameter 'deleteRunRequest' when calling deleteRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestGridProject operation.
     * @callback module:api/DefaultApi~deleteTestGridProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Deletes a Selenium testing project and all content generated under it. </p> <important> <p>You cannot undo this operation.</p> </important> <note> <p>You cannot delete a project if it has active sessions.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTestGridProjectRequest} deleteTestGridProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTestGridProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTestGridProject(xAmzTarget, deleteTestGridProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTestGridProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTestGridProject");
      }
      // verify the required parameter 'deleteTestGridProjectRequest' is set
      if (deleteTestGridProjectRequest === undefined || deleteTestGridProjectRequest === null) {
        throw new Error("Missing the required parameter 'deleteTestGridProjectRequest' when calling deleteTestGridProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteTestGridProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUpload operation.
     * @callback module:api/DefaultApi~deleteUploadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an upload given the upload ARN.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteUploadRequest} deleteUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUpload(xAmzTarget, deleteUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUpload");
      }
      // verify the required parameter 'deleteUploadRequest' is set
      if (deleteUploadRequest === undefined || deleteUploadRequest === null) {
        throw new Error("Missing the required parameter 'deleteUploadRequest' when calling deleteUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVPCEConfiguration operation.
     * @callback module:api/DefaultApi~deleteVPCEConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteVPCEConfigurationRequest} deleteVPCEConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVPCEConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteVPCEConfiguration(xAmzTarget, deleteVPCEConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteVPCEConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteVPCEConfiguration");
      }
      // verify the required parameter 'deleteVPCEConfigurationRequest' is set
      if (deleteVPCEConfigurationRequest === undefined || deleteVPCEConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteVPCEConfigurationRequest' when calling deleteVPCEConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.DeleteVPCEConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountSettings operation.
     * @callback module:api/DefaultApi~getAccountSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountSettingsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccountSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountSettingsResult}
     */
    getAccountSettings(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAccountSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetAccountSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevice operation.
     * @callback module:api/DefaultApi~getDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a unique device type.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDeviceRequest} getDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceResult}
     */
    getDevice(xAmzTarget, getDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDeviceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDevice");
      }
      // verify the required parameter 'getDeviceRequest' is set
      if (getDeviceRequest === undefined || getDeviceRequest === null) {
        throw new Error("Missing the required parameter 'getDeviceRequest' when calling getDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceInstance operation.
     * @callback module:api/DefaultApi~getDeviceInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a device instance that belongs to a private device fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDeviceInstanceRequest} getDeviceInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeviceInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceInstanceResult}
     */
    getDeviceInstance(xAmzTarget, getDeviceInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDeviceInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDeviceInstance");
      }
      // verify the required parameter 'getDeviceInstanceRequest' is set
      if (getDeviceInstanceRequest === undefined || getDeviceInstanceRequest === null) {
        throw new Error("Missing the required parameter 'getDeviceInstanceRequest' when calling getDeviceInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDeviceInstanceResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetDeviceInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevicePool operation.
     * @callback module:api/DefaultApi~getDevicePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDevicePoolResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a device pool.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDevicePoolRequest} getDevicePoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDevicePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDevicePoolResult}
     */
    getDevicePool(xAmzTarget, getDevicePoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDevicePoolRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDevicePool");
      }
      // verify the required parameter 'getDevicePoolRequest' is set
      if (getDevicePoolRequest === undefined || getDevicePoolRequest === null) {
        throw new Error("Missing the required parameter 'getDevicePoolRequest' when calling getDevicePool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDevicePoolResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetDevicePool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevicePoolCompatibility operation.
     * @callback module:api/DefaultApi~getDevicePoolCompatibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDevicePoolCompatibilityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about compatibility with a device pool.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDevicePoolCompatibilityRequest} getDevicePoolCompatibilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDevicePoolCompatibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDevicePoolCompatibilityResult}
     */
    getDevicePoolCompatibility(xAmzTarget, getDevicePoolCompatibilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDevicePoolCompatibilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDevicePoolCompatibility");
      }
      // verify the required parameter 'getDevicePoolCompatibilityRequest' is set
      if (getDevicePoolCompatibilityRequest === undefined || getDevicePoolCompatibilityRequest === null) {
        throw new Error("Missing the required parameter 'getDevicePoolCompatibilityRequest' when calling getDevicePoolCompatibility");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDevicePoolCompatibilityResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetDevicePoolCompatibility', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstanceProfile operation.
     * @callback module:api/DefaultApi~getInstanceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInstanceProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified instance profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetInstanceProfileRequest} getInstanceProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInstanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInstanceProfileResult}
     */
    getInstanceProfile(xAmzTarget, getInstanceProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInstanceProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getInstanceProfile");
      }
      // verify the required parameter 'getInstanceProfileRequest' is set
      if (getInstanceProfileRequest === undefined || getInstanceProfileRequest === null) {
        throw new Error("Missing the required parameter 'getInstanceProfileRequest' when calling getInstanceProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInstanceProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetInstanceProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/DefaultApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetJobRequest} getJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJobResult}
     */
    getJob(xAmzTarget, getJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = getJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getJob");
      }
      // verify the required parameter 'getJobRequest' is set
      if (getJobRequest === undefined || getJobRequest === null) {
        throw new Error("Missing the required parameter 'getJobRequest' when calling getJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetJobResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkProfile operation.
     * @callback module:api/DefaultApi~getNetworkProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a network profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetNetworkProfileRequest} getNetworkProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNetworkProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkProfileResult}
     */
    getNetworkProfile(xAmzTarget, getNetworkProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = getNetworkProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getNetworkProfile");
      }
      // verify the required parameter 'getNetworkProfileRequest' is set
      if (getNetworkProfileRequest === undefined || getNetworkProfileRequest === null) {
        throw new Error("Missing the required parameter 'getNetworkProfileRequest' when calling getNetworkProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNetworkProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetNetworkProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOfferingStatus operation.
     * @callback module:api/DefaultApi~getOfferingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOfferingStatusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href=\"mailto:aws-devicefarm-support@amazon.com\">aws-devicefarm-support@amazon.com</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetOfferingStatusRequest} getOfferingStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getOfferingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOfferingStatusResult}
     */
    getOfferingStatus(xAmzTarget, getOfferingStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = getOfferingStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getOfferingStatus");
      }
      // verify the required parameter 'getOfferingStatusRequest' is set
      if (getOfferingStatusRequest === undefined || getOfferingStatusRequest === null) {
        throw new Error("Missing the required parameter 'getOfferingStatusRequest' when calling getOfferingStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOfferingStatusResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetOfferingStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/DefaultApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetProjectRequest} getProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectResult}
     */
    getProject(xAmzTarget, getProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = getProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getProject");
      }
      // verify the required parameter 'getProjectRequest' is set
      if (getProjectRequest === undefined || getProjectRequest === null) {
        throw new Error("Missing the required parameter 'getProjectRequest' when calling getProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteAccessSession operation.
     * @callback module:api/DefaultApi~getRemoteAccessSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRemoteAccessSessionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a link to a currently running remote access session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRemoteAccessSessionRequest} getRemoteAccessSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRemoteAccessSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRemoteAccessSessionResult}
     */
    getRemoteAccessSession(xAmzTarget, getRemoteAccessSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRemoteAccessSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRemoteAccessSession");
      }
      // verify the required parameter 'getRemoteAccessSessionRequest' is set
      if (getRemoteAccessSessionRequest === undefined || getRemoteAccessSessionRequest === null) {
        throw new Error("Missing the required parameter 'getRemoteAccessSessionRequest' when calling getRemoteAccessSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRemoteAccessSessionResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetRemoteAccessSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRun operation.
     * @callback module:api/DefaultApi~getRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRunResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRunRequest} getRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRunResult}
     */
    getRun(xAmzTarget, getRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRun");
      }
      // verify the required parameter 'getRunRequest' is set
      if (getRunRequest === undefined || getRunRequest === null) {
        throw new Error("Missing the required parameter 'getRunRequest' when calling getRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRunResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuite operation.
     * @callback module:api/DefaultApi~getSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSuiteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a suite.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSuiteRequest} getSuiteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSuiteResult}
     */
    getSuite(xAmzTarget, getSuiteRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSuiteRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSuite");
      }
      // verify the required parameter 'getSuiteRequest' is set
      if (getSuiteRequest === undefined || getSuiteRequest === null) {
        throw new Error("Missing the required parameter 'getSuiteRequest' when calling getSuite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSuiteResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetSuite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTest operation.
     * @callback module:api/DefaultApi~getTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a test.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetTestRequest} getTestRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTestResult}
     */
    getTest(xAmzTarget, getTestRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTestRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getTest");
      }
      // verify the required parameter 'getTestRequest' is set
      if (getTestRequest === undefined || getTestRequest === null) {
        throw new Error("Missing the required parameter 'getTestRequest' when calling getTest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTestResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestGridProject operation.
     * @callback module:api/DefaultApi~getTestGridProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTestGridProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a Selenium testing project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetTestGridProjectRequest} getTestGridProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTestGridProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTestGridProjectResult}
     */
    getTestGridProject(xAmzTarget, getTestGridProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTestGridProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getTestGridProject");
      }
      // verify the required parameter 'getTestGridProjectRequest' is set
      if (getTestGridProjectRequest === undefined || getTestGridProjectRequest === null) {
        throw new Error("Missing the required parameter 'getTestGridProjectRequest' when calling getTestGridProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTestGridProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetTestGridProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestGridSession operation.
     * @callback module:api/DefaultApi~getTestGridSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTestGridSessionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>A session is an instance of a browser created through a <code>RemoteWebDriver</code> with the URL from <a>CreateTestGridUrlResult$url</a>. You can use the following to look up sessions:</p> <ul> <li> <p>The session ARN (<a>GetTestGridSessionRequest$sessionArn</a>).</p> </li> <li> <p>The project ARN and a session ID (<a>GetTestGridSessionRequest$projectArn</a> and <a>GetTestGridSessionRequest$sessionId</a>).</p> </li> </ul> <p/>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetTestGridSessionRequest} getTestGridSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTestGridSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTestGridSessionResult}
     */
    getTestGridSession(xAmzTarget, getTestGridSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTestGridSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getTestGridSession");
      }
      // verify the required parameter 'getTestGridSessionRequest' is set
      if (getTestGridSessionRequest === undefined || getTestGridSessionRequest === null) {
        throw new Error("Missing the required parameter 'getTestGridSessionRequest' when calling getTestGridSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTestGridSessionResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetTestGridSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpload operation.
     * @callback module:api/DefaultApi~getUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUploadResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an upload.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetUploadRequest} getUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUploadResult}
     */
    getUpload(xAmzTarget, getUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = getUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getUpload");
      }
      // verify the required parameter 'getUploadRequest' is set
      if (getUploadRequest === undefined || getUploadRequest === null) {
        throw new Error("Missing the required parameter 'getUploadRequest' when calling getUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUploadResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVPCEConfiguration operation.
     * @callback module:api/DefaultApi~getVPCEConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVPCEConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetVPCEConfigurationRequest} getVPCEConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVPCEConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVPCEConfigurationResult}
     */
    getVPCEConfiguration(xAmzTarget, getVPCEConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getVPCEConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getVPCEConfiguration");
      }
      // verify the required parameter 'getVPCEConfigurationRequest' is set
      if (getVPCEConfigurationRequest === undefined || getVPCEConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getVPCEConfigurationRequest' when calling getVPCEConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetVPCEConfigurationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.GetVPCEConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installToRemoteAccessSession operation.
     * @callback module:api/DefaultApi~installToRemoteAccessSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallToRemoteAccessSessionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InstallToRemoteAccessSessionRequest} installToRemoteAccessSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~installToRemoteAccessSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallToRemoteAccessSessionResult}
     */
    installToRemoteAccessSession(xAmzTarget, installToRemoteAccessSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = installToRemoteAccessSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling installToRemoteAccessSession");
      }
      // verify the required parameter 'installToRemoteAccessSessionRequest' is set
      if (installToRemoteAccessSessionRequest === undefined || installToRemoteAccessSessionRequest === null) {
        throw new Error("Missing the required parameter 'installToRemoteAccessSessionRequest' when calling installToRemoteAccessSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstallToRemoteAccessSessionResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.InstallToRemoteAccessSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArtifacts operation.
     * @callback module:api/DefaultApi~listArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListArtifactsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about artifacts.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListArtifactsRequest} listArtifactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListArtifactsResult}
     */
    listArtifacts(xAmzTarget, listArtifactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listArtifactsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listArtifacts");
      }
      // verify the required parameter 'listArtifactsRequest' is set
      if (listArtifactsRequest === undefined || listArtifactsRequest === null) {
        throw new Error("Missing the required parameter 'listArtifactsRequest' when calling listArtifacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListArtifactsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListArtifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceInstances operation.
     * @callback module:api/DefaultApi~listDeviceInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeviceInstancesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the private device instances associated with one or more AWS accounts.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDeviceInstancesRequest} listDeviceInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listDeviceInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeviceInstancesResult}
     */
    listDeviceInstances(xAmzTarget, listDeviceInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDeviceInstancesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDeviceInstances");
      }
      // verify the required parameter 'listDeviceInstancesRequest' is set
      if (listDeviceInstancesRequest === undefined || listDeviceInstancesRequest === null) {
        throw new Error("Missing the required parameter 'listDeviceInstancesRequest' when calling listDeviceInstances");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDeviceInstancesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListDeviceInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevicePools operation.
     * @callback module:api/DefaultApi~listDevicePoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicePoolsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about device pools.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDevicePoolsRequest} listDevicePoolsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDevicePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicePoolsResult}
     */
    listDevicePools(xAmzTarget, listDevicePoolsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDevicePoolsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDevicePools");
      }
      // verify the required parameter 'listDevicePoolsRequest' is set
      if (listDevicePoolsRequest === undefined || listDevicePoolsRequest === null) {
        throw new Error("Missing the required parameter 'listDevicePoolsRequest' when calling listDevicePools");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDevicePoolsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListDevicePools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevices operation.
     * @callback module:api/DefaultApi~listDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about unique device types.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDevicesRequest} listDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesResult}
     */
    listDevices(xAmzTarget, listDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDevicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDevices");
      }
      // verify the required parameter 'listDevicesRequest' is set
      if (listDevicesRequest === undefined || listDevicesRequest === null) {
        throw new Error("Missing the required parameter 'listDevicesRequest' when calling listDevices");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDevicesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceProfiles operation.
     * @callback module:api/DefaultApi~listInstanceProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstanceProfilesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about all the instance profiles in an AWS account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInstanceProfilesRequest} listInstanceProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listInstanceProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstanceProfilesResult}
     */
    listInstanceProfiles(xAmzTarget, listInstanceProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInstanceProfilesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInstanceProfiles");
      }
      // verify the required parameter 'listInstanceProfilesRequest' is set
      if (listInstanceProfilesRequest === undefined || listInstanceProfilesRequest === null) {
        throw new Error("Missing the required parameter 'listInstanceProfilesRequest' when calling listInstanceProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInstanceProfilesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListInstanceProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobs operation.
     * @callback module:api/DefaultApi~listJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about jobs for a given test run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListJobsRequest} listJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsResult}
     */
    listJobs(xAmzTarget, listJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listJobs");
      }
      // verify the required parameter 'listJobsRequest' is set
      if (listJobsRequest === undefined || listJobsRequest === null) {
        throw new Error("Missing the required parameter 'listJobsRequest' when calling listJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListJobsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkProfiles operation.
     * @callback module:api/DefaultApi~listNetworkProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNetworkProfilesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of available network profiles.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListNetworkProfilesRequest} listNetworkProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listNetworkProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNetworkProfilesResult}
     */
    listNetworkProfiles(xAmzTarget, listNetworkProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNetworkProfilesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listNetworkProfiles");
      }
      // verify the required parameter 'listNetworkProfilesRequest' is set
      if (listNetworkProfilesRequest === undefined || listNetworkProfilesRequest === null) {
        throw new Error("Missing the required parameter 'listNetworkProfilesRequest' when calling listNetworkProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNetworkProfilesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListNetworkProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfferingPromotions operation.
     * @callback module:api/DefaultApi~listOfferingPromotionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfferingPromotionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke the operation. Contact <a href=\"mailto:aws-devicefarm-support@amazon.com\">aws-devicefarm-support@amazon.com</a> if you must be able to invoke this operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOfferingPromotionsRequest} listOfferingPromotionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listOfferingPromotionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfferingPromotionsResult}
     */
    listOfferingPromotions(xAmzTarget, listOfferingPromotionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOfferingPromotionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOfferingPromotions");
      }
      // verify the required parameter 'listOfferingPromotionsRequest' is set
      if (listOfferingPromotionsRequest === undefined || listOfferingPromotionsRequest === null) {
        throw new Error("Missing the required parameter 'listOfferingPromotionsRequest' when calling listOfferingPromotions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOfferingPromotionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListOfferingPromotions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfferingTransactions operation.
     * @callback module:api/DefaultApi~listOfferingTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfferingTransactionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href=\"mailto:aws-devicefarm-support@amazon.com\">aws-devicefarm-support@amazon.com</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOfferingTransactionsRequest} listOfferingTransactionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listOfferingTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfferingTransactionsResult}
     */
    listOfferingTransactions(xAmzTarget, listOfferingTransactionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOfferingTransactionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOfferingTransactions");
      }
      // verify the required parameter 'listOfferingTransactionsRequest' is set
      if (listOfferingTransactionsRequest === undefined || listOfferingTransactionsRequest === null) {
        throw new Error("Missing the required parameter 'listOfferingTransactionsRequest' when calling listOfferingTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOfferingTransactionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListOfferingTransactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfferings operation.
     * @callback module:api/DefaultApi~listOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfferingsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href=\"mailto:aws-devicefarm-support@amazon.com\">aws-devicefarm-support@amazon.com</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOfferingsRequest} listOfferingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfferingsResult}
     */
    listOfferings(xAmzTarget, listOfferingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOfferingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOfferings");
      }
      // verify the required parameter 'listOfferingsRequest' is set
      if (listOfferingsRequest === undefined || listOfferingsRequest === null) {
        throw new Error("Missing the required parameter 'listOfferingsRequest' when calling listOfferings");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOfferingsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListOfferings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/DefaultApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProjectsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about projects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProjectsRequest} listProjectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProjectsResult}
     */
    listProjects(xAmzTarget, listProjectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listProjectsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProjects");
      }
      // verify the required parameter 'listProjectsRequest' is set
      if (listProjectsRequest === undefined || listProjectsRequest === null) {
        throw new Error("Missing the required parameter 'listProjectsRequest' when calling listProjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProjectsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRemoteAccessSessions operation.
     * @callback module:api/DefaultApi~listRemoteAccessSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRemoteAccessSessionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all currently running remote access sessions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRemoteAccessSessionsRequest} listRemoteAccessSessionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listRemoteAccessSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRemoteAccessSessionsResult}
     */
    listRemoteAccessSessions(xAmzTarget, listRemoteAccessSessionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRemoteAccessSessionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRemoteAccessSessions");
      }
      // verify the required parameter 'listRemoteAccessSessionsRequest' is set
      if (listRemoteAccessSessionsRequest === undefined || listRemoteAccessSessionsRequest === null) {
        throw new Error("Missing the required parameter 'listRemoteAccessSessionsRequest' when calling listRemoteAccessSessions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRemoteAccessSessionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListRemoteAccessSessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuns operation.
     * @callback module:api/DefaultApi~listRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRunsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about runs, given an AWS Device Farm project ARN.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRunsRequest} listRunsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRunsResult}
     */
    listRuns(xAmzTarget, listRunsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRunsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRuns");
      }
      // verify the required parameter 'listRunsRequest' is set
      if (listRunsRequest === undefined || listRunsRequest === null) {
        throw new Error("Missing the required parameter 'listRunsRequest' when calling listRuns");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRunsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSamples operation.
     * @callback module:api/DefaultApi~listSamplesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSamplesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about samples, given an AWS Device Farm job ARN.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSamplesRequest} listSamplesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSamplesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSamplesResult}
     */
    listSamples(xAmzTarget, listSamplesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSamplesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSamples");
      }
      // verify the required parameter 'listSamplesRequest' is set
      if (listSamplesRequest === undefined || listSamplesRequest === null) {
        throw new Error("Missing the required parameter 'listSamplesRequest' when calling listSamples");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSamplesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListSamples', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSuites operation.
     * @callback module:api/DefaultApi~listSuitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSuitesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about test suites for a given job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSuitesRequest} listSuitesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSuitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSuitesResult}
     */
    listSuites(xAmzTarget, listSuitesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSuitesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSuites");
      }
      // verify the required parameter 'listSuitesRequest' is set
      if (listSuitesRequest === undefined || listSuitesRequest === null) {
        throw new Error("Missing the required parameter 'listSuitesRequest' when calling listSuites");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSuitesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListSuites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the tags for an AWS Device Farm resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestGridProjects operation.
     * @callback module:api/DefaultApi~listTestGridProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestGridProjectsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all Selenium testing projects in your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTestGridProjectsRequest} listTestGridProjectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResult] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestGridProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestGridProjectsResult}
     */
    listTestGridProjects(xAmzTarget, listTestGridProjectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestGridProjectsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTestGridProjects");
      }
      // verify the required parameter 'listTestGridProjectsRequest' is set
      if (listTestGridProjectsRequest === undefined || listTestGridProjectsRequest === null) {
        throw new Error("Missing the required parameter 'listTestGridProjectsRequest' when calling listTestGridProjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResult': opts['maxResult'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestGridProjectsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListTestGridProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestGridSessionActions operation.
     * @callback module:api/DefaultApi~listTestGridSessionActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestGridSessionActionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the actions taken in a <a>TestGridSession</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTestGridSessionActionsRequest} listTestGridSessionActionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResult] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestGridSessionActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestGridSessionActionsResult}
     */
    listTestGridSessionActions(xAmzTarget, listTestGridSessionActionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestGridSessionActionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTestGridSessionActions");
      }
      // verify the required parameter 'listTestGridSessionActionsRequest' is set
      if (listTestGridSessionActionsRequest === undefined || listTestGridSessionActionsRequest === null) {
        throw new Error("Missing the required parameter 'listTestGridSessionActionsRequest' when calling listTestGridSessionActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResult': opts['maxResult'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestGridSessionActionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestGridSessionArtifacts operation.
     * @callback module:api/DefaultApi~listTestGridSessionArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestGridSessionArtifactsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of artifacts created during the session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTestGridSessionArtifactsRequest} listTestGridSessionArtifactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResult] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestGridSessionArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestGridSessionArtifactsResult}
     */
    listTestGridSessionArtifacts(xAmzTarget, listTestGridSessionArtifactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestGridSessionArtifactsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTestGridSessionArtifacts");
      }
      // verify the required parameter 'listTestGridSessionArtifactsRequest' is set
      if (listTestGridSessionArtifactsRequest === undefined || listTestGridSessionArtifactsRequest === null) {
        throw new Error("Missing the required parameter 'listTestGridSessionArtifactsRequest' when calling listTestGridSessionArtifacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResult': opts['maxResult'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestGridSessionArtifactsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionArtifacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTestGridSessions operation.
     * @callback module:api/DefaultApi~listTestGridSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestGridSessionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of sessions for a <a>TestGridProject</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTestGridSessionsRequest} listTestGridSessionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResult] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestGridSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestGridSessionsResult}
     */
    listTestGridSessions(xAmzTarget, listTestGridSessionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestGridSessionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTestGridSessions");
      }
      // verify the required parameter 'listTestGridSessionsRequest' is set
      if (listTestGridSessionsRequest === undefined || listTestGridSessionsRequest === null) {
        throw new Error("Missing the required parameter 'listTestGridSessionsRequest' when calling listTestGridSessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResult': opts['maxResult'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestGridSessionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTests operation.
     * @callback module:api/DefaultApi~listTestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTestsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about tests in a given test suite.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTestsRequest} listTestsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTestsResult}
     */
    listTests(xAmzTarget, listTestsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTestsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTests");
      }
      // verify the required parameter 'listTestsRequest' is set
      if (listTestsRequest === undefined || listTestsRequest === null) {
        throw new Error("Missing the required parameter 'listTestsRequest' when calling listTests");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTestsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListTests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUniqueProblems operation.
     * @callback module:api/DefaultApi~listUniqueProblemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUniqueProblemsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about unique problems, such as exceptions or crashes.</p> <p>Unique problems are defined as a single instance of an error across a run, job, or suite. For example, if a call in your application consistently raises an exception (<code>OutOfBoundsException in MyActivity.java:386</code>), <code>ListUniqueProblems</code> returns a single entry instead of many individual entries for that exception.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListUniqueProblemsRequest} listUniqueProblemsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUniqueProblemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUniqueProblemsResult}
     */
    listUniqueProblems(xAmzTarget, listUniqueProblemsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUniqueProblemsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listUniqueProblems");
      }
      // verify the required parameter 'listUniqueProblemsRequest' is set
      if (listUniqueProblemsRequest === undefined || listUniqueProblemsRequest === null) {
        throw new Error("Missing the required parameter 'listUniqueProblemsRequest' when calling listUniqueProblems");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUniqueProblemsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListUniqueProblems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUploads operation.
     * @callback module:api/DefaultApi~listUploadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUploadsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about uploads, given an AWS Device Farm project ARN.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListUploadsRequest} listUploadsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUploadsResult}
     */
    listUploads(xAmzTarget, listUploadsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUploadsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listUploads");
      }
      // verify the required parameter 'listUploadsRequest' is set
      if (listUploadsRequest === undefined || listUploadsRequest === null) {
        throw new Error("Missing the required parameter 'listUploadsRequest' when calling listUploads");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUploadsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListUploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVPCEConfigurations operation.
     * @callback module:api/DefaultApi~listVPCEConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVPCEConfigurationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListVPCEConfigurationsRequest} listVPCEConfigurationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listVPCEConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVPCEConfigurationsResult}
     */
    listVPCEConfigurations(xAmzTarget, listVPCEConfigurationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listVPCEConfigurationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listVPCEConfigurations");
      }
      // verify the required parameter 'listVPCEConfigurationsRequest' is set
      if (listVPCEConfigurationsRequest === undefined || listVPCEConfigurationsRequest === null) {
        throw new Error("Missing the required parameter 'listVPCEConfigurationsRequest' when calling listVPCEConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListVPCEConfigurationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ListVPCEConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseOffering operation.
     * @callback module:api/DefaultApi~purchaseOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOfferingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href=\"mailto:aws-devicefarm-support@amazon.com\">aws-devicefarm-support@amazon.com</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PurchaseOfferingRequest} purchaseOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~purchaseOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOfferingResult}
     */
    purchaseOffering(xAmzTarget, purchaseOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = purchaseOfferingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling purchaseOffering");
      }
      // verify the required parameter 'purchaseOfferingRequest' is set
      if (purchaseOfferingRequest === undefined || purchaseOfferingRequest === null) {
        throw new Error("Missing the required parameter 'purchaseOfferingRequest' when calling purchaseOffering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOfferingResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.PurchaseOffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renewOffering operation.
     * @callback module:api/DefaultApi~renewOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewOfferingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Explicitly sets the quantity of devices to renew for an offering, starting from the <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href=\"mailto:aws-devicefarm-support@amazon.com\">aws-devicefarm-support@amazon.com</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RenewOfferingRequest} renewOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~renewOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewOfferingResult}
     */
    renewOffering(xAmzTarget, renewOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = renewOfferingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling renewOffering");
      }
      // verify the required parameter 'renewOfferingRequest' is set
      if (renewOfferingRequest === undefined || renewOfferingRequest === null) {
        throw new Error("Missing the required parameter 'renewOfferingRequest' when calling renewOffering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RenewOfferingResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.RenewOffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleRun operation.
     * @callback module:api/DefaultApi~scheduleRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleRunResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules a run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ScheduleRunRequest} scheduleRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~scheduleRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleRunResult}
     */
    scheduleRun(xAmzTarget, scheduleRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = scheduleRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling scheduleRun");
      }
      // verify the required parameter 'scheduleRunRequest' is set
      if (scheduleRunRequest === undefined || scheduleRunRequest === null) {
        throw new Error("Missing the required parameter 'scheduleRunRequest' when calling scheduleRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScheduleRunResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.ScheduleRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopJob operation.
     * @callback module:api/DefaultApi~stopJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device where tests have not started. You are not billed for this device. On the device where tests have started, setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown, and any tests that were in progress or already completed.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopJobRequest} stopJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopJobResult}
     */
    stopJob(xAmzTarget, stopJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopJob");
      }
      // verify the required parameter 'stopJobRequest' is set
      if (stopJobRequest === undefined || stopJobRequest === null) {
        throw new Error("Missing the required parameter 'stopJobRequest' when calling stopJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopJobResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.StopJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRemoteAccessSession operation.
     * @callback module:api/DefaultApi~stopRemoteAccessSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopRemoteAccessSessionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ends a specified remote access session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopRemoteAccessSessionRequest} stopRemoteAccessSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopRemoteAccessSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopRemoteAccessSessionResult}
     */
    stopRemoteAccessSession(xAmzTarget, stopRemoteAccessSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopRemoteAccessSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopRemoteAccessSession");
      }
      // verify the required parameter 'stopRemoteAccessSessionRequest' is set
      if (stopRemoteAccessSessionRequest === undefined || stopRemoteAccessSessionRequest === null) {
        throw new Error("Missing the required parameter 'stopRemoteAccessSessionRequest' when calling stopRemoteAccessSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopRemoteAccessSessionResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.StopRemoteAccessSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRun operation.
     * @callback module:api/DefaultApi~stopRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopRunResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices where tests have not started. You are not billed for these devices. On devices where tests have started executing, setup suite and teardown suite tests run to completion on those devices. You are billed for setup, teardown, and any tests that were in progress or already completed.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopRunRequest} stopRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopRunResult}
     */
    stopRun(xAmzTarget, stopRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopRun");
      }
      // verify the required parameter 'stopRunRequest' is set
      if (stopRunRequest === undefined || stopRunRequest === null) {
        throw new Error("Missing the required parameter 'stopRunRequest' when calling stopRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopRunResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.StopRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified tags from a resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceInstance operation.
     * @callback module:api/DefaultApi~updateDeviceInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDeviceInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information about a private device instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDeviceInstanceRequest} updateDeviceInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDeviceInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDeviceInstanceResult}
     */
    updateDeviceInstance(xAmzTarget, updateDeviceInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDeviceInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDeviceInstance");
      }
      // verify the required parameter 'updateDeviceInstanceRequest' is set
      if (updateDeviceInstanceRequest === undefined || updateDeviceInstanceRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceInstanceRequest' when calling updateDeviceInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDeviceInstanceResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateDeviceInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDevicePool operation.
     * @callback module:api/DefaultApi~updateDevicePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDevicePoolResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDevicePoolRequest} updateDevicePoolRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDevicePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDevicePoolResult}
     */
    updateDevicePool(xAmzTarget, updateDevicePoolRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDevicePoolRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDevicePool");
      }
      // verify the required parameter 'updateDevicePoolRequest' is set
      if (updateDevicePoolRequest === undefined || updateDevicePoolRequest === null) {
        throw new Error("Missing the required parameter 'updateDevicePoolRequest' when calling updateDevicePool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDevicePoolResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateDevicePool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceProfile operation.
     * @callback module:api/DefaultApi~updateInstanceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInstanceProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information about an existing private device instance profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateInstanceProfileRequest} updateInstanceProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInstanceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInstanceProfileResult}
     */
    updateInstanceProfile(xAmzTarget, updateInstanceProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInstanceProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateInstanceProfile");
      }
      // verify the required parameter 'updateInstanceProfileRequest' is set
      if (updateInstanceProfileRequest === undefined || updateInstanceProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateInstanceProfileRequest' when calling updateInstanceProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInstanceProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateInstanceProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkProfile operation.
     * @callback module:api/DefaultApi~updateNetworkProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateNetworkProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the network profile.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateNetworkProfileRequest} updateNetworkProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateNetworkProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateNetworkProfileResult}
     */
    updateNetworkProfile(xAmzTarget, updateNetworkProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateNetworkProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateNetworkProfile");
      }
      // verify the required parameter 'updateNetworkProfileRequest' is set
      if (updateNetworkProfileRequest === undefined || updateNetworkProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkProfileRequest' when calling updateNetworkProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateNetworkProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateNetworkProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the specified project name, given the project ARN and a new name.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProjectRequest} updateProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProjectResult}
     */
    updateProject(xAmzTarget, updateProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProject");
      }
      // verify the required parameter 'updateProjectRequest' is set
      if (updateProjectRequest === undefined || updateProjectRequest === null) {
        throw new Error("Missing the required parameter 'updateProjectRequest' when calling updateProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTestGridProject operation.
     * @callback module:api/DefaultApi~updateTestGridProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTestGridProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change details of a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTestGridProjectRequest} updateTestGridProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTestGridProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTestGridProjectResult}
     */
    updateTestGridProject(xAmzTarget, updateTestGridProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTestGridProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTestGridProject");
      }
      // verify the required parameter 'updateTestGridProjectRequest' is set
      if (updateTestGridProjectRequest === undefined || updateTestGridProjectRequest === null) {
        throw new Error("Missing the required parameter 'updateTestGridProjectRequest' when calling updateTestGridProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTestGridProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateTestGridProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUpload operation.
     * @callback module:api/DefaultApi~updateUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUploadResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an uploaded test spec.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateUploadRequest} updateUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUploadResult}
     */
    updateUpload(xAmzTarget, updateUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateUpload");
      }
      // verify the required parameter 'updateUploadRequest' is set
      if (updateUploadRequest === undefined || updateUploadRequest === null) {
        throw new Error("Missing the required parameter 'updateUploadRequest' when calling updateUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUploadResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVPCEConfiguration operation.
     * @callback module:api/DefaultApi~updateVPCEConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVPCEConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateVPCEConfigurationRequest} updateVPCEConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVPCEConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVPCEConfigurationResult}
     */
    updateVPCEConfiguration(xAmzTarget, updateVPCEConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVPCEConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateVPCEConfiguration");
      }
      // verify the required parameter 'updateVPCEConfigurationRequest' is set
      if (updateVPCEConfigurationRequest === undefined || updateVPCEConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateVPCEConfigurationRequest' when calling updateVPCEConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVPCEConfigurationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=DeviceFarm_20150623.UpdateVPCEConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
