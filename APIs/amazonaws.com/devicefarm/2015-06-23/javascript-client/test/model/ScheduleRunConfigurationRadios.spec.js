/**
 * AWS Device Farm
 * <p>Welcome to the AWS Device Farm API documentation, which contains APIs for:</p> <ul> <li> <p>Testing on desktop browsers</p> <p> Device Farm makes it possible for you to test your web applications on desktop browsers using Selenium. The APIs for desktop browser testing contain <code>TestGrid</code> in their names. For more information, see <a href=\"https://docs.aws.amazon.com/devicefarm/latest/testgrid/\">Testing Web Applications on Selenium with Device Farm</a>.</p> </li> <li> <p>Testing on real mobile devices</p> <p>Device Farm makes it possible for you to test apps on physical phones, tablets, and other devices in the cloud. For more information, see the <a href=\"https://docs.aws.amazon.com/devicefarm/latest/developerguide/\">Device Farm Developer Guide</a>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2015-06-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsDeviceFarm);
  }
}(this, function(expect, AwsDeviceFarm) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsDeviceFarm.ScheduleRunConfigurationRadios();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScheduleRunConfigurationRadios', function() {
    it('should create an instance of ScheduleRunConfigurationRadios', function() {
      // uncomment below and update the code to test ScheduleRunConfigurationRadios
      //var instance = new AwsDeviceFarm.ScheduleRunConfigurationRadios();
      //expect(instance).to.be.a(AwsDeviceFarm.ScheduleRunConfigurationRadios);
    });

    it('should have the property wifi (base name: "wifi")', function() {
      // uncomment below and update the code to test the property wifi
      //var instance = new AwsDeviceFarm.ScheduleRunConfigurationRadios();
      //expect(instance).to.be();
    });

    it('should have the property bluetooth (base name: "bluetooth")', function() {
      // uncomment below and update the code to test the property bluetooth
      //var instance = new AwsDeviceFarm.ScheduleRunConfigurationRadios();
      //expect(instance).to.be();
    });

    it('should have the property nfc (base name: "nfc")', function() {
      // uncomment below and update the code to test the property nfc
      //var instance = new AwsDeviceFarm.ScheduleRunConfigurationRadios();
      //expect(instance).to.be();
    });

    it('should have the property gps (base name: "gps")', function() {
      // uncomment below and update the code to test the property gps
      //var instance = new AwsDeviceFarm.ScheduleRunConfigurationRadios();
      //expect(instance).to.be();
    });

  });

}));
