/*
 * AWS CodeStar Notifications
 * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API to work with the following objects:</p> <p>Notification rules, by calling the following: </p> <ul> <li> <p> <a>CreateNotificationRule</a>, which creates a notification rule for a resource in your account. </p> </li> <li> <p> <a>DeleteNotificationRule</a>, which deletes a notification rule. </p> </li> <li> <p> <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p> </li> <li> <p> <a>ListNotificationRules</a>, which lists the notification rules associated with your account. </p> </li> <li> <p> <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a notification rule. </p> </li> <li> <p> <a>Subscribe</a>, which subscribes a target to a notification rule. </p> </li> <li> <p> <a>Unsubscribe</a>, which removes a target from a notification rule. </p> </li> </ul> <p>Targets, by calling the following: </p> <ul> <li> <p> <a>DeleteTarget</a>, which removes a notification rule target from a notification rule. </p> </li> <li> <p> <a>ListTargets</a>, which lists the targets associated with a notification rule. </p> </li> </ul> <p>Events, by calling the following: </p> <ul> <li> <p> <a>ListEventTypes</a>, which lists the event types you can include in a notification rule. </p> </li> </ul> <p>Tags, by calling the following: </p> <ul> <li> <p> <a>ListTagsForResource</a>, which lists the tags already associated with a notification rule in your account. </p> </li> <li> <p> <a>TagResource</a>, which associates a tag you provide with a notification rule in your account. </p> </li> <li> <p> <a>UntagResource</a>, which removes a tag from a notification rule in your account. </p> </li> </ul> <p> For information about how to use AWS CodeStar Notifications, see the <a href=\"https://docs.aws.amazon.com/dtconsole/latest/userguide/what-is-dtconsole.html\">Amazon Web Services Developer Tools Console User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2019-10-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNotificationRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:44.746820-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNotificationRuleRequest {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_EVENT_TYPE_IDS = "EventTypeIds";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_IDS)
  private List<String> eventTypeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Target> targets = new ArrayList<>();

  /**
   * The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
   */
  @JsonAdapter(DetailTypeEnum.Adapter.class)
  public enum DetailTypeEnum {
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    DetailTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DetailTypeEnum fromValue(String value) {
      for (DetailTypeEnum b : DetailTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DetailTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DetailTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DetailTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DetailTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DetailTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DETAIL_TYPE = "DetailType";
  @SerializedName(SERIALIZED_NAME_DETAIL_TYPE)
  private DetailTypeEnum detailType;

  public UpdateNotificationRuleRequest() {
  }

  public UpdateNotificationRuleRequest arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the notification rule.
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UpdateNotificationRuleRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the notification rule.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateNotificationRuleRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UpdateNotificationRuleRequest eventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
    return this;
  }

  public UpdateNotificationRuleRequest addEventTypeIdsItem(String eventTypeIdsItem) {
    if (this.eventTypeIds == null) {
      this.eventTypeIds = new ArrayList<>();
    }
    this.eventTypeIds.add(eventTypeIdsItem);
    return this;
  }

  /**
   * A list of event types associated with this notification rule. For a complete list of event types and IDs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api\&quot;&gt;Notification concepts&lt;/a&gt; in the &lt;i&gt;Developer Tools Console User Guide&lt;/i&gt;.
   * @return eventTypeIds
   */
  @javax.annotation.Nullable
  public List<String> getEventTypeIds() {
    return eventTypeIds;
  }

  public void setEventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
  }


  public UpdateNotificationRuleRequest targets(List<Target> targets) {
    this.targets = targets;
    return this;
  }

  public UpdateNotificationRuleRequest addTargetsItem(Target targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * The address and type of the targets to receive notifications from this notification rule.
   * @return targets
   */
  @javax.annotation.Nullable
  public List<Target> getTargets() {
    return targets;
  }

  public void setTargets(List<Target> targets) {
    this.targets = targets;
  }


  public UpdateNotificationRuleRequest detailType(DetailTypeEnum detailType) {
    this.detailType = detailType;
    return this;
  }

  /**
   * The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
   * @return detailType
   */
  @javax.annotation.Nullable
  public DetailTypeEnum getDetailType() {
    return detailType;
  }

  public void setDetailType(DetailTypeEnum detailType) {
    this.detailType = detailType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNotificationRuleRequest updateNotificationRuleRequest = (UpdateNotificationRuleRequest) o;
    return Objects.equals(this.arn, updateNotificationRuleRequest.arn) &&
        Objects.equals(this.name, updateNotificationRuleRequest.name) &&
        Objects.equals(this.status, updateNotificationRuleRequest.status) &&
        Objects.equals(this.eventTypeIds, updateNotificationRuleRequest.eventTypeIds) &&
        Objects.equals(this.targets, updateNotificationRuleRequest.targets) &&
        Objects.equals(this.detailType, updateNotificationRuleRequest.detailType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, status, eventTypeIds, targets, detailType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNotificationRuleRequest {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    eventTypeIds: ").append(toIndentedString(eventTypeIds)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    detailType: ").append(toIndentedString(detailType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Name");
    openapiFields.add("Status");
    openapiFields.add("EventTypeIds");
    openapiFields.add("Targets");
    openapiFields.add("DetailType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNotificationRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNotificationRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNotificationRuleRequest is not found in the empty JSON string", UpdateNotificationRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNotificationRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNotificationRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNotificationRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Arn").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("EventTypeIds") != null && !jsonObj.get("EventTypeIds").isJsonNull() && !jsonObj.get("EventTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("EventTypeIds").toString()));
      }
      if (jsonObj.get("Targets") != null && !jsonObj.get("Targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("Targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Targets` to be an array in the JSON string but got `%s`", jsonObj.get("Targets").toString()));
          }

          // validate the optional field `Targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            Target.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      if ((jsonObj.get("DetailType") != null && !jsonObj.get("DetailType").isJsonNull()) && !jsonObj.get("DetailType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DetailType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DetailType").toString()));
      }
      // validate the optional field `DetailType`
      if (jsonObj.get("DetailType") != null && !jsonObj.get("DetailType").isJsonNull()) {
        DetailTypeEnum.validateJsonElement(jsonObj.get("DetailType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNotificationRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNotificationRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNotificationRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNotificationRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNotificationRuleRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNotificationRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNotificationRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNotificationRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNotificationRuleRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNotificationRuleRequest
   */
  public static UpdateNotificationRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNotificationRuleRequest.class);
  }

  /**
   * Convert an instance of UpdateNotificationRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

