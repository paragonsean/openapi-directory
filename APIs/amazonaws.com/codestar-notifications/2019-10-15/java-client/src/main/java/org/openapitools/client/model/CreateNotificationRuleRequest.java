/*
 * AWS CodeStar Notifications
 * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API to work with the following objects:</p> <p>Notification rules, by calling the following: </p> <ul> <li> <p> <a>CreateNotificationRule</a>, which creates a notification rule for a resource in your account. </p> </li> <li> <p> <a>DeleteNotificationRule</a>, which deletes a notification rule. </p> </li> <li> <p> <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p> </li> <li> <p> <a>ListNotificationRules</a>, which lists the notification rules associated with your account. </p> </li> <li> <p> <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a notification rule. </p> </li> <li> <p> <a>Subscribe</a>, which subscribes a target to a notification rule. </p> </li> <li> <p> <a>Unsubscribe</a>, which removes a target from a notification rule. </p> </li> </ul> <p>Targets, by calling the following: </p> <ul> <li> <p> <a>DeleteTarget</a>, which removes a notification rule target from a notification rule. </p> </li> <li> <p> <a>ListTargets</a>, which lists the targets associated with a notification rule. </p> </li> </ul> <p>Events, by calling the following: </p> <ul> <li> <p> <a>ListEventTypes</a>, which lists the event types you can include in a notification rule. </p> </li> </ul> <p>Tags, by calling the following: </p> <ul> <li> <p> <a>ListTagsForResource</a>, which lists the tags already associated with a notification rule in your account. </p> </li> <li> <p> <a>TagResource</a>, which associates a tag you provide with a notification rule in your account. </p> </li> <li> <p> <a>UntagResource</a>, which removes a tag from a notification rule in your account. </p> </li> </ul> <p> For information about how to use AWS CodeStar Notifications, see the <a href=\"https://docs.aws.amazon.com/dtconsole/latest/userguide/what-is-dtconsole.html\">Amazon Web Services Developer Tools Console User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2019-10-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNotificationRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:44.746820-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNotificationRuleRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EVENT_TYPE_IDS = "EventTypeIds";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE_IDS)
  private List<String> eventTypeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  public static final String SERIALIZED_NAME_TARGETS = "Targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Target> targets = new ArrayList<>();

  /**
   * The level of detail to include in the notifications for this resource. &lt;code&gt;BASIC&lt;/code&gt; will include only the contents of the event as it would appear in Amazon CloudWatch. &lt;code&gt;FULL&lt;/code&gt; will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
   */
  @JsonAdapter(DetailTypeEnum.Adapter.class)
  public enum DetailTypeEnum {
    BASIC("BASIC"),
    
    FULL("FULL");

    private String value;

    DetailTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DetailTypeEnum fromValue(String value) {
      for (DetailTypeEnum b : DetailTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DetailTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DetailTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DetailTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DetailTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DetailTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DETAIL_TYPE = "DetailType";
  @SerializedName(SERIALIZED_NAME_DETAIL_TYPE)
  private DetailTypeEnum detailType;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * The status of the notification rule. The default value is &lt;code&gt;ENABLED&lt;/code&gt;. If the status is set to &lt;code&gt;DISABLED&lt;/code&gt;, notifications aren&#39;t sent for the notification rule.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public CreateNotificationRuleRequest() {
  }

  public CreateNotificationRuleRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the notification rule. Notification rule names must be unique in your Amazon Web Services account.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNotificationRuleRequest eventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
    return this;
  }

  public CreateNotificationRuleRequest addEventTypeIdsItem(String eventTypeIdsItem) {
    if (this.eventTypeIds == null) {
      this.eventTypeIds = new ArrayList<>();
    }
    this.eventTypeIds.add(eventTypeIdsItem);
    return this;
  }

  /**
   * A list of event types associated with this notification rule. For a list of allowed events, see &lt;a&gt;EventTypeSummary&lt;/a&gt;.
   * @return eventTypeIds
   */
  @javax.annotation.Nonnull
  public List<String> getEventTypeIds() {
    return eventTypeIds;
  }

  public void setEventTypeIds(List<String> eventTypeIds) {
    this.eventTypeIds = eventTypeIds;
  }


  public CreateNotificationRuleRequest resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in CodePipeline, repositories in CodeCommit, and build projects in CodeBuild.
   * @return resource
   */
  @javax.annotation.Nonnull
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public CreateNotificationRuleRequest targets(List<Target> targets) {
    this.targets = targets;
    return this;
  }

  public CreateNotificationRuleRequest addTargetsItem(Target targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * A list of Amazon Resource Names (ARNs) of Amazon Simple Notification Service topics and Chatbot clients to associate with the notification rule.
   * @return targets
   */
  @javax.annotation.Nonnull
  public List<Target> getTargets() {
    return targets;
  }

  public void setTargets(List<Target> targets) {
    this.targets = targets;
  }


  public CreateNotificationRuleRequest detailType(DetailTypeEnum detailType) {
    this.detailType = detailType;
    return this;
  }

  /**
   * The level of detail to include in the notifications for this resource. &lt;code&gt;BASIC&lt;/code&gt; will include only the contents of the event as it would appear in Amazon CloudWatch. &lt;code&gt;FULL&lt;/code&gt; will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
   * @return detailType
   */
  @javax.annotation.Nonnull
  public DetailTypeEnum getDetailType() {
    return detailType;
  }

  public void setDetailType(DetailTypeEnum detailType) {
    this.detailType = detailType;
  }


  public CreateNotificationRuleRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * &lt;p&gt;A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request with the same parameters is received and a token is included, the request returns information about the initial request that used that token.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon Web Services SDKs prepopulate client request tokens. If you are using an Amazon Web Services SDK, an idempotency token is created for you.&lt;/p&gt; &lt;/note&gt;
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateNotificationRuleRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateNotificationRuleRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of tags to apply to this notification rule. Key names cannot start with \&quot;&lt;code&gt;aws&lt;/code&gt;\&quot;. 
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateNotificationRuleRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the notification rule. The default value is &lt;code&gt;ENABLED&lt;/code&gt;. If the status is set to &lt;code&gt;DISABLED&lt;/code&gt;, notifications aren&#39;t sent for the notification rule.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNotificationRuleRequest createNotificationRuleRequest = (CreateNotificationRuleRequest) o;
    return Objects.equals(this.name, createNotificationRuleRequest.name) &&
        Objects.equals(this.eventTypeIds, createNotificationRuleRequest.eventTypeIds) &&
        Objects.equals(this.resource, createNotificationRuleRequest.resource) &&
        Objects.equals(this.targets, createNotificationRuleRequest.targets) &&
        Objects.equals(this.detailType, createNotificationRuleRequest.detailType) &&
        Objects.equals(this.clientRequestToken, createNotificationRuleRequest.clientRequestToken) &&
        Objects.equals(this.tags, createNotificationRuleRequest.tags) &&
        Objects.equals(this.status, createNotificationRuleRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, eventTypeIds, resource, targets, detailType, clientRequestToken, tags, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNotificationRuleRequest {\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    eventTypeIds: ").append(toIndentedString(eventTypeIds)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    detailType: ").append(toIndentedString(detailType)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("EventTypeIds");
    openapiFields.add("Resource");
    openapiFields.add("Targets");
    openapiFields.add("DetailType");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("Tags");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("EventTypeIds");
    openapiRequiredFields.add("Resource");
    openapiRequiredFields.add("Targets");
    openapiRequiredFields.add("DetailType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNotificationRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNotificationRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNotificationRuleRequest is not found in the empty JSON string", CreateNotificationRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNotificationRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNotificationRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNotificationRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("EventTypeIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("EventTypeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventTypeIds` to be an array in the JSON string but got `%s`", jsonObj.get("EventTypeIds").toString()));
      }
      if (!jsonObj.get("Resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Resource").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Targets` to be an array in the JSON string but got `%s`", jsonObj.get("Targets").toString()));
      }

      JsonArray jsonArraytargets = jsonObj.getAsJsonArray("Targets");
      // validate the required field `Targets` (array)
      for (int i = 0; i < jsonArraytargets.size(); i++) {
        Target.validateJsonElement(jsonArraytargets.get(i));
      };
      if (!jsonObj.get("DetailType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DetailType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DetailType").toString()));
      }
      // validate the required field `DetailType`
      DetailTypeEnum.validateJsonElement(jsonObj.get("DetailType"));
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNotificationRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNotificationRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNotificationRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNotificationRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNotificationRuleRequest>() {
           @Override
           public void write(JsonWriter out, CreateNotificationRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNotificationRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNotificationRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNotificationRuleRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNotificationRuleRequest
   */
  public static CreateNotificationRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNotificationRuleRequest.class);
  }

  /**
   * Convert an instance of CreateNotificationRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

