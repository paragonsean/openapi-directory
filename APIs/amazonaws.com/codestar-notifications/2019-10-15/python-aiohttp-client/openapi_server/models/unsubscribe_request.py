# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UnsubscribeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, target_address: str=None):
        """UnsubscribeRequest - a model defined in OpenAPI

        :param arn: The arn of this UnsubscribeRequest.
        :param target_address: The target_address of this UnsubscribeRequest.
        """
        self.openapi_types = {
            'arn': str,
            'target_address': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'target_address': 'TargetAddress'
        }

        self._arn = arn
        self._target_address = target_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnsubscribeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Unsubscribe_request of this UnsubscribeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this UnsubscribeRequest.

        The Amazon Resource Name (ARN) of the notification rule.

        :return: The arn of this UnsubscribeRequest.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this UnsubscribeRequest.

        The Amazon Resource Name (ARN) of the notification rule.

        :param arn: The arn of this UnsubscribeRequest.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")
        if arn is not None and not re.search(r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$', arn):
            raise ValueError("Invalid value for `arn`, must be a follow pattern or equal to `/^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$/`")

        self._arn = arn

    @property
    def target_address(self):
        """Gets the target_address of this UnsubscribeRequest.

        The ARN of the Chatbot topic to unsubscribe from the notification rule.

        :return: The target_address of this UnsubscribeRequest.
        :rtype: str
        """
        return self._target_address

    @target_address.setter
    def target_address(self, target_address):
        """Sets the target_address of this UnsubscribeRequest.

        The ARN of the Chatbot topic to unsubscribe from the notification rule.

        :param target_address: The target_address of this UnsubscribeRequest.
        :type target_address: str
        """
        if target_address is None:
            raise ValueError("Invalid value for `target_address`, must not be `None`")
        if target_address is not None and len(target_address) > 320:
            raise ValueError("Invalid value for `target_address`, length must be less than or equal to `320`")
        if target_address is not None and len(target_address) < 1:
            raise ValueError("Invalid value for `target_address`, length must be greater than or equal to `1`")

        self._target_address = target_address
