# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_address: str=None, force_unsubscribe_all: bool=None):
        """DeleteTargetRequest - a model defined in OpenAPI

        :param target_address: The target_address of this DeleteTargetRequest.
        :param force_unsubscribe_all: The force_unsubscribe_all of this DeleteTargetRequest.
        """
        self.openapi_types = {
            'target_address': str,
            'force_unsubscribe_all': bool
        }

        self.attribute_map = {
            'target_address': 'TargetAddress',
            'force_unsubscribe_all': 'ForceUnsubscribeAll'
        }

        self._target_address = target_address
        self._force_unsubscribe_all = force_unsubscribe_all

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteTarget_request of this DeleteTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_address(self):
        """Gets the target_address of this DeleteTargetRequest.

        The Amazon Resource Name (ARN) of the Chatbot topic or Chatbot client to delete.

        :return: The target_address of this DeleteTargetRequest.
        :rtype: str
        """
        return self._target_address

    @target_address.setter
    def target_address(self, target_address):
        """Sets the target_address of this DeleteTargetRequest.

        The Amazon Resource Name (ARN) of the Chatbot topic or Chatbot client to delete.

        :param target_address: The target_address of this DeleteTargetRequest.
        :type target_address: str
        """
        if target_address is None:
            raise ValueError("Invalid value for `target_address`, must not be `None`")
        if target_address is not None and len(target_address) > 320:
            raise ValueError("Invalid value for `target_address`, length must be less than or equal to `320`")
        if target_address is not None and len(target_address) < 1:
            raise ValueError("Invalid value for `target_address`, length must be greater than or equal to `1`")

        self._target_address = target_address

    @property
    def force_unsubscribe_all(self):
        """Gets the force_unsubscribe_all of this DeleteTargetRequest.

        A Boolean value that can be used to delete all associations with this Chatbot topic. The default value is FALSE. If set to TRUE, all associations between that target and every notification rule in your Amazon Web Services account are deleted.

        :return: The force_unsubscribe_all of this DeleteTargetRequest.
        :rtype: bool
        """
        return self._force_unsubscribe_all

    @force_unsubscribe_all.setter
    def force_unsubscribe_all(self, force_unsubscribe_all):
        """Sets the force_unsubscribe_all of this DeleteTargetRequest.

        A Boolean value that can be used to delete all associations with this Chatbot topic. The default value is FALSE. If set to TRUE, all associations between that target and every notification rule in your Amazon Web Services account are deleted.

        :param force_unsubscribe_all: The force_unsubscribe_all of this DeleteTargetRequest.
        :type force_unsubscribe_all: bool
        """

        self._force_unsubscribe_all = force_unsubscribe_all
