# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_notification_rules_filter import ListNotificationRulesFilter
import re
from openapi_server import util


class ListNotificationRulesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[ListNotificationRulesFilter]=None, next_token: str=None, max_results: int=None):
        """ListNotificationRulesRequest - a model defined in OpenAPI

        :param filters: The filters of this ListNotificationRulesRequest.
        :param next_token: The next_token of this ListNotificationRulesRequest.
        :param max_results: The max_results of this ListNotificationRulesRequest.
        """
        self.openapi_types = {
            'filters': List[ListNotificationRulesFilter],
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'filters': 'Filters',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._filters = filters
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListNotificationRulesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListNotificationRules_request of this ListNotificationRulesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this ListNotificationRulesRequest.

        <p>The filters to use to return information by service or resource type. For valid values, see <a>ListNotificationRulesFilter</a>.</p> <note> <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p> </note>

        :return: The filters of this ListNotificationRulesRequest.
        :rtype: List[ListNotificationRulesFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListNotificationRulesRequest.

        <p>The filters to use to return information by service or resource type. For valid values, see <a>ListNotificationRulesFilter</a>.</p> <note> <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p> </note>

        :param filters: The filters of this ListNotificationRulesRequest.
        :type filters: List[ListNotificationRulesFilter]
        """

        self._filters = filters

    @property
    def next_token(self):
        """Gets the next_token of this ListNotificationRulesRequest.

        An enumeration token that, when provided in a request, returns the next batch of the results.

        :return: The next_token of this ListNotificationRulesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListNotificationRulesRequest.

        An enumeration token that, when provided in a request, returns the next batch of the results.

        :param next_token: The next_token of this ListNotificationRulesRequest.
        :type next_token: str
        """
        if next_token is not None and not re.search(r'^[\w\/+=]+$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[\w\/+=]+$/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListNotificationRulesRequest.

        A non-negative integer used to limit the number of returned results. The maximum number of results that can be returned is 100.

        :return: The max_results of this ListNotificationRulesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListNotificationRulesRequest.

        A non-negative integer used to limit the number of returned results. The maximum number of results that can be returned is 100.

        :param max_results: The max_results of this ListNotificationRulesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
