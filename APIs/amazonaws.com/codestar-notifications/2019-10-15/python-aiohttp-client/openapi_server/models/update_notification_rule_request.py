# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target import Target
import re
from openapi_server import util


class UpdateNotificationRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, status: str=None, event_type_ids: List[str]=None, targets: List[Target]=None, detail_type: str=None):
        """UpdateNotificationRuleRequest - a model defined in OpenAPI

        :param arn: The arn of this UpdateNotificationRuleRequest.
        :param name: The name of this UpdateNotificationRuleRequest.
        :param status: The status of this UpdateNotificationRuleRequest.
        :param event_type_ids: The event_type_ids of this UpdateNotificationRuleRequest.
        :param targets: The targets of this UpdateNotificationRuleRequest.
        :param detail_type: The detail_type of this UpdateNotificationRuleRequest.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'status': str,
            'event_type_ids': List[str],
            'targets': List[Target],
            'detail_type': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'name': 'Name',
            'status': 'Status',
            'event_type_ids': 'EventTypeIds',
            'targets': 'Targets',
            'detail_type': 'DetailType'
        }

        self._arn = arn
        self._name = name
        self._status = status
        self._event_type_ids = event_type_ids
        self._targets = targets
        self._detail_type = detail_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNotificationRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateNotificationRule_request of this UpdateNotificationRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this UpdateNotificationRuleRequest.

        The Amazon Resource Name (ARN) of the notification rule.

        :return: The arn of this UpdateNotificationRuleRequest.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this UpdateNotificationRuleRequest.

        The Amazon Resource Name (ARN) of the notification rule.

        :param arn: The arn of this UpdateNotificationRuleRequest.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")
        if arn is not None and not re.search(r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$', arn):
            raise ValueError("Invalid value for `arn`, must be a follow pattern or equal to `/^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$/`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this UpdateNotificationRuleRequest.

        The name of the notification rule.

        :return: The name of this UpdateNotificationRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateNotificationRuleRequest.

        The name of the notification rule.

        :param name: The name of this UpdateNotificationRuleRequest.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[A-Za-z0-9\-_ ]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[A-Za-z0-9\-_ ]+$/`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this UpdateNotificationRuleRequest.

        The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).

        :return: The status of this UpdateNotificationRuleRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateNotificationRuleRequest.

        The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).

        :param status: The status of this UpdateNotificationRuleRequest.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def event_type_ids(self):
        """Gets the event_type_ids of this UpdateNotificationRuleRequest.

        A list of event types associated with this notification rule. For a complete list of event types and IDs, see <a href=\"https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api\">Notification concepts</a> in the <i>Developer Tools Console User Guide</i>.

        :return: The event_type_ids of this UpdateNotificationRuleRequest.
        :rtype: List[str]
        """
        return self._event_type_ids

    @event_type_ids.setter
    def event_type_ids(self, event_type_ids):
        """Sets the event_type_ids of this UpdateNotificationRuleRequest.

        A list of event types associated with this notification rule. For a complete list of event types and IDs, see <a href=\"https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api\">Notification concepts</a> in the <i>Developer Tools Console User Guide</i>.

        :param event_type_ids: The event_type_ids of this UpdateNotificationRuleRequest.
        :type event_type_ids: List[str]
        """

        self._event_type_ids = event_type_ids

    @property
    def targets(self):
        """Gets the targets of this UpdateNotificationRuleRequest.

        The address and type of the targets to receive notifications from this notification rule.

        :return: The targets of this UpdateNotificationRuleRequest.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this UpdateNotificationRuleRequest.

        The address and type of the targets to receive notifications from this notification rule.

        :param targets: The targets of this UpdateNotificationRuleRequest.
        :type targets: List[Target]
        """
        if targets is not None and len(targets) > 10:
            raise ValueError("Invalid value for `targets`, number of items must be less than or equal to `10`")

        self._targets = targets

    @property
    def detail_type(self):
        """Gets the detail_type of this UpdateNotificationRuleRequest.

        The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.

        :return: The detail_type of this UpdateNotificationRuleRequest.
        :rtype: str
        """
        return self._detail_type

    @detail_type.setter
    def detail_type(self, detail_type):
        """Sets the detail_type of this UpdateNotificationRuleRequest.

        The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.

        :param detail_type: The detail_type of this UpdateNotificationRuleRequest.
        :type detail_type: str
        """
        allowed_values = ["BASIC", "FULL"]  # noqa: E501
        if detail_type not in allowed_values:
            raise ValueError(
                "Invalid value for `detail_type` ({0}), must be one of {1}"
                .format(detail_type, allowed_values)
            )

        self._detail_type = detail_type
