# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscribe_request_target import SubscribeRequestTarget
import re
from openapi_server import util


class SubscribeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, target: SubscribeRequestTarget=None, client_request_token: str=None):
        """SubscribeRequest - a model defined in OpenAPI

        :param arn: The arn of this SubscribeRequest.
        :param target: The target of this SubscribeRequest.
        :param client_request_token: The client_request_token of this SubscribeRequest.
        """
        self.openapi_types = {
            'arn': str,
            'target': SubscribeRequestTarget,
            'client_request_token': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'target': 'Target',
            'client_request_token': 'ClientRequestToken'
        }

        self._arn = arn
        self._target = target
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscribeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscribe_request of this SubscribeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this SubscribeRequest.

        The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.

        :return: The arn of this SubscribeRequest.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this SubscribeRequest.

        The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.

        :param arn: The arn of this SubscribeRequest.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")
        if arn is not None and not re.search(r'^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$', arn):
            raise ValueError("Invalid value for `arn`, must be a follow pattern or equal to `/^arn:aws[^:\s]*:codestar-notifications:[^:\s]+:\d{12}:notificationrule\/(.*\S)?$/`")

        self._arn = arn

    @property
    def target(self):
        """Gets the target of this SubscribeRequest.


        :return: The target of this SubscribeRequest.
        :rtype: SubscribeRequestTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SubscribeRequest.


        :param target: The target of this SubscribeRequest.
        :type target: SubscribeRequestTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def client_request_token(self):
        """Gets the client_request_token of this SubscribeRequest.

        An enumeration token that, when provided in a request, returns the next batch of the results.

        :return: The client_request_token of this SubscribeRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this SubscribeRequest.

        An enumeration token that, when provided in a request, returns the next batch of the results.

        :param client_request_token: The client_request_token of this SubscribeRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 256:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `256`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[\w:\/-]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[\w:\/-]+$/`")

        self._client_request_token = client_request_token
