# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target import Target
import re
from openapi_server import util


class CreateNotificationRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, event_type_ids: List[str]=None, resource: str=None, targets: List[Target]=None, detail_type: str=None, client_request_token: str=None, tags: Dict[str, str]=None, status: str=None):
        """CreateNotificationRuleRequest - a model defined in OpenAPI

        :param name: The name of this CreateNotificationRuleRequest.
        :param event_type_ids: The event_type_ids of this CreateNotificationRuleRequest.
        :param resource: The resource of this CreateNotificationRuleRequest.
        :param targets: The targets of this CreateNotificationRuleRequest.
        :param detail_type: The detail_type of this CreateNotificationRuleRequest.
        :param client_request_token: The client_request_token of this CreateNotificationRuleRequest.
        :param tags: The tags of this CreateNotificationRuleRequest.
        :param status: The status of this CreateNotificationRuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'event_type_ids': List[str],
            'resource': str,
            'targets': List[Target],
            'detail_type': str,
            'client_request_token': str,
            'tags': Dict[str, str],
            'status': str
        }

        self.attribute_map = {
            'name': 'Name',
            'event_type_ids': 'EventTypeIds',
            'resource': 'Resource',
            'targets': 'Targets',
            'detail_type': 'DetailType',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags',
            'status': 'Status'
        }

        self._name = name
        self._event_type_ids = event_type_ids
        self._resource = resource
        self._targets = targets
        self._detail_type = detail_type
        self._client_request_token = client_request_token
        self._tags = tags
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNotificationRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNotificationRule_request of this CreateNotificationRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateNotificationRuleRequest.

        The name for the notification rule. Notification rule names must be unique in your Amazon Web Services account.

        :return: The name of this CreateNotificationRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNotificationRuleRequest.

        The name for the notification rule. Notification rule names must be unique in your Amazon Web Services account.

        :param name: The name of this CreateNotificationRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[A-Za-z0-9\-_ ]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[A-Za-z0-9\-_ ]+$/`")

        self._name = name

    @property
    def event_type_ids(self):
        """Gets the event_type_ids of this CreateNotificationRuleRequest.

        A list of event types associated with this notification rule. For a list of allowed events, see <a>EventTypeSummary</a>.

        :return: The event_type_ids of this CreateNotificationRuleRequest.
        :rtype: List[str]
        """
        return self._event_type_ids

    @event_type_ids.setter
    def event_type_ids(self, event_type_ids):
        """Sets the event_type_ids of this CreateNotificationRuleRequest.

        A list of event types associated with this notification rule. For a list of allowed events, see <a>EventTypeSummary</a>.

        :param event_type_ids: The event_type_ids of this CreateNotificationRuleRequest.
        :type event_type_ids: List[str]
        """
        if event_type_ids is None:
            raise ValueError("Invalid value for `event_type_ids`, must not be `None`")

        self._event_type_ids = event_type_ids

    @property
    def resource(self):
        """Gets the resource of this CreateNotificationRuleRequest.

        The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in CodePipeline, repositories in CodeCommit, and build projects in CodeBuild.

        :return: The resource of this CreateNotificationRuleRequest.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this CreateNotificationRuleRequest.

        The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in CodePipeline, repositories in CodeCommit, and build projects in CodeBuild.

        :param resource: The resource of this CreateNotificationRuleRequest.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")
        if resource is not None and not re.search(r'^arn:aws[^:\s]*:[^:\s]*:[^:\s]*:[0-9]{12}:[^\s]+$', resource):
            raise ValueError("Invalid value for `resource`, must be a follow pattern or equal to `/^arn:aws[^:\s]*:[^:\s]*:[^:\s]*:[0-9]{12}:[^\s]+$/`")

        self._resource = resource

    @property
    def targets(self):
        """Gets the targets of this CreateNotificationRuleRequest.

        A list of Amazon Resource Names (ARNs) of Amazon Simple Notification Service topics and Chatbot clients to associate with the notification rule.

        :return: The targets of this CreateNotificationRuleRequest.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CreateNotificationRuleRequest.

        A list of Amazon Resource Names (ARNs) of Amazon Simple Notification Service topics and Chatbot clients to associate with the notification rule.

        :param targets: The targets of this CreateNotificationRuleRequest.
        :type targets: List[Target]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")
        if targets is not None and len(targets) > 10:
            raise ValueError("Invalid value for `targets`, number of items must be less than or equal to `10`")

        self._targets = targets

    @property
    def detail_type(self):
        """Gets the detail_type of this CreateNotificationRuleRequest.

        The level of detail to include in the notifications for this resource. <code>BASIC</code> will include only the contents of the event as it would appear in Amazon CloudWatch. <code>FULL</code> will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.

        :return: The detail_type of this CreateNotificationRuleRequest.
        :rtype: str
        """
        return self._detail_type

    @detail_type.setter
    def detail_type(self, detail_type):
        """Sets the detail_type of this CreateNotificationRuleRequest.

        The level of detail to include in the notifications for this resource. <code>BASIC</code> will include only the contents of the event as it would appear in Amazon CloudWatch. <code>FULL</code> will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.

        :param detail_type: The detail_type of this CreateNotificationRuleRequest.
        :type detail_type: str
        """
        allowed_values = ["BASIC", "FULL"]  # noqa: E501
        if detail_type not in allowed_values:
            raise ValueError(
                "Invalid value for `detail_type` ({0}), must be one of {1}"
                .format(detail_type, allowed_values)
            )

        self._detail_type = detail_type

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateNotificationRuleRequest.

        <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request with the same parameters is received and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The Amazon Web Services SDKs prepopulate client request tokens. If you are using an Amazon Web Services SDK, an idempotency token is created for you.</p> </note>

        :return: The client_request_token of this CreateNotificationRuleRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateNotificationRuleRequest.

        <p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request with the same parameters is received and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The Amazon Web Services SDKs prepopulate client request tokens. If you are using an Amazon Web Services SDK, an idempotency token is created for you.</p> </note>

        :param client_request_token: The client_request_token of this CreateNotificationRuleRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 256:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `256`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[\w:\/-]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[\w:\/-]+$/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateNotificationRuleRequest.

        A list of tags to apply to this notification rule. Key names cannot start with \"<code>aws</code>\". 

        :return: The tags of this CreateNotificationRuleRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateNotificationRuleRequest.

        A list of tags to apply to this notification rule. Key names cannot start with \"<code>aws</code>\". 

        :param tags: The tags of this CreateNotificationRuleRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this CreateNotificationRuleRequest.

        The status of the notification rule. The default value is <code>ENABLED</code>. If the status is set to <code>DISABLED</code>, notifications aren't sent for the notification rule.

        :return: The status of this CreateNotificationRuleRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateNotificationRuleRequest.

        The status of the notification rule. The default value is <code>ENABLED</code>. If the status is set to <code>DISABLED</code>, notifications aren't sent for the notification rule.

        :param status: The status of this CreateNotificationRuleRequest.
        :type status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
