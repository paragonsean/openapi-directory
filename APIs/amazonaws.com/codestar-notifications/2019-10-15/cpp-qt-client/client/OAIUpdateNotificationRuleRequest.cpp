/**
 * AWS CodeStar Notifications
 * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API to work with the following objects:</p> <p>Notification rules, by calling the following: </p> <ul> <li> <p> <a>CreateNotificationRule</a>, which creates a notification rule for a resource in your account. </p> </li> <li> <p> <a>DeleteNotificationRule</a>, which deletes a notification rule. </p> </li> <li> <p> <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p> </li> <li> <p> <a>ListNotificationRules</a>, which lists the notification rules associated with your account. </p> </li> <li> <p> <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a notification rule. </p> </li> <li> <p> <a>Subscribe</a>, which subscribes a target to a notification rule. </p> </li> <li> <p> <a>Unsubscribe</a>, which removes a target from a notification rule. </p> </li> </ul> <p>Targets, by calling the following: </p> <ul> <li> <p> <a>DeleteTarget</a>, which removes a notification rule target from a notification rule. </p> </li> <li> <p> <a>ListTargets</a>, which lists the targets associated with a notification rule. </p> </li> </ul> <p>Events, by calling the following: </p> <ul> <li> <p> <a>ListEventTypes</a>, which lists the event types you can include in a notification rule. </p> </li> </ul> <p>Tags, by calling the following: </p> <ul> <li> <p> <a>ListTagsForResource</a>, which lists the tags already associated with a notification rule in your account. </p> </li> <li> <p> <a>TagResource</a>, which associates a tag you provide with a notification rule in your account. </p> </li> <li> <p> <a>UntagResource</a>, which removes a tag from a notification rule in your account. </p> </li> </ul> <p> For information about how to use AWS CodeStar Notifications, see the <a href=\"https://docs.aws.amazon.com/dtconsole/latest/userguide/what-is-dtconsole.html\">Amazon Web Services Developer Tools Console User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2019-10-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNotificationRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNotificationRuleRequest::OAIUpdateNotificationRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNotificationRuleRequest::OAIUpdateNotificationRuleRequest() {
    this->initializeModel();
}

OAIUpdateNotificationRuleRequest::~OAIUpdateNotificationRuleRequest() {}

void OAIUpdateNotificationRuleRequest::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_event_type_ids_isSet = false;
    m_event_type_ids_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;
}

void OAIUpdateNotificationRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNotificationRuleRequest::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_event_type_ids_isValid = ::OpenAPI::fromJsonValue(m_event_type_ids, json[QString("EventTypeIds")]);
    m_event_type_ids_isSet = !json[QString("EventTypeIds")].isNull() && m_event_type_ids_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("DetailType")]);
    m_detail_type_isSet = !json[QString("DetailType")].isNull() && m_detail_type_isValid;
}

QString OAIUpdateNotificationRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNotificationRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_event_type_ids.isSet()) {
        obj.insert(QString("EventTypeIds"), ::OpenAPI::toJsonValue(m_event_type_ids));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_detail_type.isSet()) {
        obj.insert(QString("DetailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    return obj;
}

QString OAIUpdateNotificationRuleRequest::getArn() const {
    return m_arn;
}
void OAIUpdateNotificationRuleRequest::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateNotificationRuleRequest::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateNotificationRuleRequest::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIUpdateNotificationRuleRequest::getName() const {
    return m_name;
}
void OAIUpdateNotificationRuleRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateNotificationRuleRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateNotificationRuleRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAINotificationRuleStatus OAIUpdateNotificationRuleRequest::getStatus() const {
    return m_status;
}
void OAIUpdateNotificationRuleRequest::setStatus(const OAINotificationRuleStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateNotificationRuleRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateNotificationRuleRequest::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIUpdateNotificationRuleRequest::getEventTypeIds() const {
    return m_event_type_ids;
}
void OAIUpdateNotificationRuleRequest::setEventTypeIds(const QList &event_type_ids) {
    m_event_type_ids = event_type_ids;
    m_event_type_ids_isSet = true;
}

bool OAIUpdateNotificationRuleRequest::is_event_type_ids_Set() const{
    return m_event_type_ids_isSet;
}

bool OAIUpdateNotificationRuleRequest::is_event_type_ids_Valid() const{
    return m_event_type_ids_isValid;
}

QList OAIUpdateNotificationRuleRequest::getTargets() const {
    return m_targets;
}
void OAIUpdateNotificationRuleRequest::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIUpdateNotificationRuleRequest::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIUpdateNotificationRuleRequest::is_targets_Valid() const{
    return m_targets_isValid;
}

OAIDetailType OAIUpdateNotificationRuleRequest::getDetailType() const {
    return m_detail_type;
}
void OAIUpdateNotificationRuleRequest::setDetailType(const OAIDetailType &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAIUpdateNotificationRuleRequest::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAIUpdateNotificationRuleRequest::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

bool OAIUpdateNotificationRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNotificationRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
