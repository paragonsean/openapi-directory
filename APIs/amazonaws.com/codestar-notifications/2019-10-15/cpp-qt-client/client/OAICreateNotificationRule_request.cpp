/**
 * AWS CodeStar Notifications
 * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API to work with the following objects:</p> <p>Notification rules, by calling the following: </p> <ul> <li> <p> <a>CreateNotificationRule</a>, which creates a notification rule for a resource in your account. </p> </li> <li> <p> <a>DeleteNotificationRule</a>, which deletes a notification rule. </p> </li> <li> <p> <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p> </li> <li> <p> <a>ListNotificationRules</a>, which lists the notification rules associated with your account. </p> </li> <li> <p> <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a notification rule. </p> </li> <li> <p> <a>Subscribe</a>, which subscribes a target to a notification rule. </p> </li> <li> <p> <a>Unsubscribe</a>, which removes a target from a notification rule. </p> </li> </ul> <p>Targets, by calling the following: </p> <ul> <li> <p> <a>DeleteTarget</a>, which removes a notification rule target from a notification rule. </p> </li> <li> <p> <a>ListTargets</a>, which lists the targets associated with a notification rule. </p> </li> </ul> <p>Events, by calling the following: </p> <ul> <li> <p> <a>ListEventTypes</a>, which lists the event types you can include in a notification rule. </p> </li> </ul> <p>Tags, by calling the following: </p> <ul> <li> <p> <a>ListTagsForResource</a>, which lists the tags already associated with a notification rule in your account. </p> </li> <li> <p> <a>TagResource</a>, which associates a tag you provide with a notification rule in your account. </p> </li> <li> <p> <a>UntagResource</a>, which removes a tag from a notification rule in your account. </p> </li> </ul> <p> For information about how to use AWS CodeStar Notifications, see the <a href=\"https://docs.aws.amazon.com/dtconsole/latest/userguide/what-is-dtconsole.html\">Amazon Web Services Developer Tools Console User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2019-10-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNotificationRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNotificationRule_request::OAICreateNotificationRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNotificationRule_request::OAICreateNotificationRule_request() {
    this->initializeModel();
}

OAICreateNotificationRule_request::~OAICreateNotificationRule_request() {}

void OAICreateNotificationRule_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_event_type_ids_isSet = false;
    m_event_type_ids_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateNotificationRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNotificationRule_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_event_type_ids_isValid = ::OpenAPI::fromJsonValue(m_event_type_ids, json[QString("EventTypeIds")]);
    m_event_type_ids_isSet = !json[QString("EventTypeIds")].isNull() && m_event_type_ids_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("Resource")]);
    m_resource_isSet = !json[QString("Resource")].isNull() && m_resource_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("DetailType")]);
    m_detail_type_isSet = !json[QString("DetailType")].isNull() && m_detail_type_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateNotificationRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNotificationRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_event_type_ids.size() > 0) {
        obj.insert(QString("EventTypeIds"), ::OpenAPI::toJsonValue(m_event_type_ids));
    }
    if (m_resource_isSet) {
        obj.insert(QString("Resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_detail_type_isSet) {
        obj.insert(QString("DetailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICreateNotificationRule_request::getName() const {
    return m_name;
}
void OAICreateNotificationRule_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNotificationRule_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNotificationRule_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICreateNotificationRule_request::getEventTypeIds() const {
    return m_event_type_ids;
}
void OAICreateNotificationRule_request::setEventTypeIds(const QList<QString> &event_type_ids) {
    m_event_type_ids = event_type_ids;
    m_event_type_ids_isSet = true;
}

bool OAICreateNotificationRule_request::is_event_type_ids_Set() const{
    return m_event_type_ids_isSet;
}

bool OAICreateNotificationRule_request::is_event_type_ids_Valid() const{
    return m_event_type_ids_isValid;
}

QString OAICreateNotificationRule_request::getResource() const {
    return m_resource;
}
void OAICreateNotificationRule_request::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAICreateNotificationRule_request::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAICreateNotificationRule_request::is_resource_Valid() const{
    return m_resource_isValid;
}

QList<OAITarget> OAICreateNotificationRule_request::getTargets() const {
    return m_targets;
}
void OAICreateNotificationRule_request::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAICreateNotificationRule_request::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAICreateNotificationRule_request::is_targets_Valid() const{
    return m_targets_isValid;
}

QString OAICreateNotificationRule_request::getDetailType() const {
    return m_detail_type;
}
void OAICreateNotificationRule_request::setDetailType(const QString &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAICreateNotificationRule_request::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAICreateNotificationRule_request::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

QString OAICreateNotificationRule_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateNotificationRule_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateNotificationRule_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateNotificationRule_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap<QString, QString> OAICreateNotificationRule_request::getTags() const {
    return m_tags;
}
void OAICreateNotificationRule_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNotificationRule_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNotificationRule_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateNotificationRule_request::getStatus() const {
    return m_status;
}
void OAICreateNotificationRule_request::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateNotificationRule_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateNotificationRule_request::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateNotificationRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNotificationRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_event_type_ids_isValid && m_resource_isValid && m_targets_isValid && m_detail_type_isValid && true;
}

} // namespace OpenAPI
