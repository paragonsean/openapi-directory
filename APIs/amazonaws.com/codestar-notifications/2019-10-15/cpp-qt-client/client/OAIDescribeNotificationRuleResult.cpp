/**
 * AWS CodeStar Notifications
 * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API to work with the following objects:</p> <p>Notification rules, by calling the following: </p> <ul> <li> <p> <a>CreateNotificationRule</a>, which creates a notification rule for a resource in your account. </p> </li> <li> <p> <a>DeleteNotificationRule</a>, which deletes a notification rule. </p> </li> <li> <p> <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p> </li> <li> <p> <a>ListNotificationRules</a>, which lists the notification rules associated with your account. </p> </li> <li> <p> <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a notification rule. </p> </li> <li> <p> <a>Subscribe</a>, which subscribes a target to a notification rule. </p> </li> <li> <p> <a>Unsubscribe</a>, which removes a target from a notification rule. </p> </li> </ul> <p>Targets, by calling the following: </p> <ul> <li> <p> <a>DeleteTarget</a>, which removes a notification rule target from a notification rule. </p> </li> <li> <p> <a>ListTargets</a>, which lists the targets associated with a notification rule. </p> </li> </ul> <p>Events, by calling the following: </p> <ul> <li> <p> <a>ListEventTypes</a>, which lists the event types you can include in a notification rule. </p> </li> </ul> <p>Tags, by calling the following: </p> <ul> <li> <p> <a>ListTagsForResource</a>, which lists the tags already associated with a notification rule in your account. </p> </li> <li> <p> <a>TagResource</a>, which associates a tag you provide with a notification rule in your account. </p> </li> <li> <p> <a>UntagResource</a>, which removes a tag from a notification rule in your account. </p> </li> </ul> <p> For information about how to use AWS CodeStar Notifications, see the <a href=\"https://docs.aws.amazon.com/dtconsole/latest/userguide/what-is-dtconsole.html\">Amazon Web Services Developer Tools Console User Guide</a>. </p>
 *
 * The version of the OpenAPI document: 2019-10-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeNotificationRuleResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeNotificationRuleResult::OAIDescribeNotificationRuleResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeNotificationRuleResult::OAIDescribeNotificationRuleResult() {
    this->initializeModel();
}

OAIDescribeNotificationRuleResult::~OAIDescribeNotificationRuleResult() {}

void OAIDescribeNotificationRuleResult::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_modified_timestamp_isSet = false;
    m_last_modified_timestamp_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeNotificationRuleResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeNotificationRuleResult::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("EventTypes")]);
    m_event_types_isSet = !json[QString("EventTypes")].isNull() && m_event_types_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("Resource")]);
    m_resource_isSet = !json[QString("Resource")].isNull() && m_resource_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("DetailType")]);
    m_detail_type_isSet = !json[QString("DetailType")].isNull() && m_detail_type_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_modified_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_modified_timestamp, json[QString("LastModifiedTimestamp")]);
    m_last_modified_timestamp_isSet = !json[QString("LastModifiedTimestamp")].isNull() && m_last_modified_timestamp_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeNotificationRuleResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeNotificationRuleResult::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_event_types.isSet()) {
        obj.insert(QString("EventTypes"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_resource_isSet) {
        obj.insert(QString("Resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_detail_type.isSet()) {
        obj.insert(QString("DetailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_modified_timestamp_isSet) {
        obj.insert(QString("LastModifiedTimestamp"), ::OpenAPI::toJsonValue(m_last_modified_timestamp));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeNotificationRuleResult::getArn() const {
    return m_arn;
}
void OAIDescribeNotificationRuleResult::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeNotificationRuleResult::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeNotificationRuleResult::getName() const {
    return m_name;
}
void OAIDescribeNotificationRuleResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeNotificationRuleResult::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIDescribeNotificationRuleResult::getEventTypes() const {
    return m_event_types;
}
void OAIDescribeNotificationRuleResult::setEventTypes(const QList &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAIDescribeNotificationRuleResult::is_event_types_Valid() const{
    return m_event_types_isValid;
}

QString OAIDescribeNotificationRuleResult::getResource() const {
    return m_resource;
}
void OAIDescribeNotificationRuleResult::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIDescribeNotificationRuleResult::is_resource_Valid() const{
    return m_resource_isValid;
}

QList OAIDescribeNotificationRuleResult::getTargets() const {
    return m_targets;
}
void OAIDescribeNotificationRuleResult::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIDescribeNotificationRuleResult::is_targets_Valid() const{
    return m_targets_isValid;
}

OAIDetailType OAIDescribeNotificationRuleResult::getDetailType() const {
    return m_detail_type;
}
void OAIDescribeNotificationRuleResult::setDetailType(const OAIDetailType &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAIDescribeNotificationRuleResult::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

QString OAIDescribeNotificationRuleResult::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeNotificationRuleResult::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeNotificationRuleResult::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAINotificationRuleStatus OAIDescribeNotificationRuleResult::getStatus() const {
    return m_status;
}
void OAIDescribeNotificationRuleResult::setStatus(const OAINotificationRuleStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeNotificationRuleResult::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeNotificationRuleResult::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIDescribeNotificationRuleResult::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIDescribeNotificationRuleResult::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIDescribeNotificationRuleResult::getLastModifiedTimestamp() const {
    return m_last_modified_timestamp;
}
void OAIDescribeNotificationRuleResult::setLastModifiedTimestamp(const QDateTime &last_modified_timestamp) {
    m_last_modified_timestamp = last_modified_timestamp;
    m_last_modified_timestamp_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_last_modified_timestamp_Set() const{
    return m_last_modified_timestamp_isSet;
}

bool OAIDescribeNotificationRuleResult::is_last_modified_timestamp_Valid() const{
    return m_last_modified_timestamp_isValid;
}

QMap OAIDescribeNotificationRuleResult::getTags() const {
    return m_tags;
}
void OAIDescribeNotificationRuleResult::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeNotificationRuleResult::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeNotificationRuleResult::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeNotificationRuleResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeNotificationRuleResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
