/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-06-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateSource from './CertificateSource';
import MinimumProtocolVersion from './MinimumProtocolVersion';
import SSLSupportMethod from './SSLSupportMethod';

/**
 * The ViewerCertificate model module.
 * @module model/ViewerCertificate
 * @version 2018-06-18
 */
class ViewerCertificate {
    /**
     * Constructs a new <code>ViewerCertificate</code>.
     * &lt;p&gt;A complex type that specifies the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether you want viewers to use HTTP or HTTPS to request your objects.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want viewers to use HTTPS, whether you&#39;re using an alternate domain name such as &lt;code&gt;example.com&lt;/code&gt; or the CloudFront domain name for your distribution, such as &lt;code&gt;d111111abcdef8.cloudfront.net&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you&#39;re using an alternate domain name, whether AWS Certificate Manager (ACM) provided the certificate, or you purchased a certificate from a third-party certificate authority and imported it into ACM or uploaded it to the IAM certificate store.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You must specify only one of the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ViewerCertificate$ACMCertificateArn&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ViewerCertificate$IAMCertificateId&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ViewerCertificate$CloudFrontDefaultCertificate&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Don&#39;t specify &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;CloudFrontDefaultCertificate&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;If you want viewers to use HTTP instead of HTTPS to request your objects&lt;/b&gt;: Specify the following value:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;CloudFrontDefaultCertificate&amp;gt;true&amp;lt;CloudFrontDefaultCertificate&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;In addition, specify &lt;code&gt;allow-all&lt;/code&gt; for &lt;code&gt;ViewerProtocolPolicy&lt;/code&gt; for all of your cache behaviors.&lt;/p&gt; &lt;p&gt; &lt;b&gt;If you want viewers to use HTTPS to request your objects&lt;/b&gt;: Choose the type of certificate that you want to use based on whether you&#39;re using an alternate domain name for your objects or the CloudFront domain name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you&#39;re using an alternate domain name, such as example.com&lt;/b&gt;: Specify one of the following values, depending on whether ACM provided your certificate or you purchased your certificate from third-party certificate authority:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;ACMCertificateArn&amp;gt;&lt;i&gt;ARN for ACM SSL/TLS certificate&lt;/i&gt;&amp;lt;ACMCertificateArn&amp;gt;&lt;/code&gt; where &lt;code&gt; &lt;i&gt;ARN for ACM SSL/TLS certificate&lt;/i&gt; &lt;/code&gt; is the ARN for the ACM SSL/TLS certificate that you want to use for this distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;IAMCertificateId&amp;gt;&lt;i&gt;IAM certificate ID&lt;/i&gt;&amp;lt;IAMCertificateId&amp;gt;&lt;/code&gt; where &lt;code&gt; &lt;i&gt;IAM certificate ID&lt;/i&gt; &lt;/code&gt; is the ID that IAM returned when you added the certificate to the IAM certificate store.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;ACMCertificateArn&lt;/code&gt; or &lt;code&gt;IAMCertificateId&lt;/code&gt;, you must also specify a value for &lt;code&gt;SSLSupportMethod&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you choose to use an ACM certificate or a certificate in the IAM certificate store, we recommend that you use only an alternate domain name in your object URLs (&lt;code&gt;https://example.com/logo.jpg&lt;/code&gt;). If you use the domain name that is associated with your CloudFront distribution (such as &lt;code&gt;https://d111111abcdef8.cloudfront.net/logo.jpg&lt;/code&gt;) and the viewer supports &lt;code&gt;SNI&lt;/code&gt;, then CloudFront behaves normally. However, if the browser does not support SNI, the user&#39;s experience depends on the value that you choose for &lt;code&gt;SSLSupportMethod&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vip&lt;/code&gt;: The viewer displays a warning because there is a mismatch between the CloudFront domain name and the domain name in your SSL/TLS certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sni-only&lt;/code&gt;: CloudFront drops the connection with the browser without returning the object.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you&#39;re using the CloudFront domain name for your distribution, such as &lt;code&gt;d111111abcdef8.cloudfront.net&lt;/code&gt; &lt;/b&gt;: Specify the following value:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;CloudFrontDefaultCertificate&amp;gt;true&amp;lt;CloudFrontDefaultCertificate&amp;gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you want viewers to use HTTPS, you must also specify one of the following values in your cache behaviors:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;ViewerProtocolPolicy&amp;gt;https-only&amp;lt;ViewerProtocolPolicy&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;ViewerProtocolPolicy&amp;gt;redirect-to-https&amp;lt;ViewerProtocolPolicy&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also optionally require that CloudFront use HTTPS to communicate with your origin by specifying one of the following values for the applicable origins:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;OriginProtocolPolicy&amp;gt;https-only&amp;lt;OriginProtocolPolicy&amp;gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;OriginProtocolPolicy&amp;gt;match-viewer&amp;lt;OriginProtocolPolicy&amp;gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html#CNAMEsAndHTTPS\&quot;&gt;Using Alternate Domain Names and HTTPS&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/ViewerCertificate
     */
    constructor() { 
        
        ViewerCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViewerCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViewerCertificate} obj Optional instance to populate.
     * @return {module:model/ViewerCertificate} The populated <code>ViewerCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViewerCertificate();

            if (data.hasOwnProperty('CloudFrontDefaultCertificate')) {
                obj['CloudFrontDefaultCertificate'] = ApiClient.convertToType(data['CloudFrontDefaultCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('IAMCertificateId')) {
                obj['IAMCertificateId'] = ApiClient.convertToType(data['IAMCertificateId'], 'String');
            }
            if (data.hasOwnProperty('ACMCertificateArn')) {
                obj['ACMCertificateArn'] = ApiClient.convertToType(data['ACMCertificateArn'], 'String');
            }
            if (data.hasOwnProperty('SSLSupportMethod')) {
                obj['SSLSupportMethod'] = ApiClient.convertToType(data['SSLSupportMethod'], SSLSupportMethod);
            }
            if (data.hasOwnProperty('MinimumProtocolVersion')) {
                obj['MinimumProtocolVersion'] = ApiClient.convertToType(data['MinimumProtocolVersion'], MinimumProtocolVersion);
            }
            if (data.hasOwnProperty('Certificate')) {
                obj['Certificate'] = ApiClient.convertToType(data['Certificate'], 'String');
            }
            if (data.hasOwnProperty('CertificateSource')) {
                obj['CertificateSource'] = ApiClient.convertToType(data['CertificateSource'], CertificateSource);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViewerCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViewerCertificate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CloudFrontDefaultCertificate`
        if (data['CloudFrontDefaultCertificate']) { // data not null
          Boolean.validateJSON(data['CloudFrontDefaultCertificate']);
        }
        // validate the optional field `IAMCertificateId`
        if (data['IAMCertificateId']) { // data not null
          String.validateJSON(data['IAMCertificateId']);
        }
        // validate the optional field `ACMCertificateArn`
        if (data['ACMCertificateArn']) { // data not null
          String.validateJSON(data['ACMCertificateArn']);
        }
        // validate the optional field `SSLSupportMethod`
        if (data['SSLSupportMethod']) { // data not null
          SSLSupportMethod.validateJSON(data['SSLSupportMethod']);
        }
        // validate the optional field `MinimumProtocolVersion`
        if (data['MinimumProtocolVersion']) { // data not null
          MinimumProtocolVersion.validateJSON(data['MinimumProtocolVersion']);
        }
        // validate the optional field `Certificate`
        if (data['Certificate']) { // data not null
          String.validateJSON(data['Certificate']);
        }
        // validate the optional field `CertificateSource`
        if (data['CertificateSource']) { // data not null
          CertificateSource.validateJSON(data['CertificateSource']);
        }

        return true;
    }


}



/**
 * @member {Boolean} CloudFrontDefaultCertificate
 */
ViewerCertificate.prototype['CloudFrontDefaultCertificate'] = undefined;

/**
 * @member {String} IAMCertificateId
 */
ViewerCertificate.prototype['IAMCertificateId'] = undefined;

/**
 * @member {String} ACMCertificateArn
 */
ViewerCertificate.prototype['ACMCertificateArn'] = undefined;

/**
 * @member {module:model/SSLSupportMethod} SSLSupportMethod
 */
ViewerCertificate.prototype['SSLSupportMethod'] = undefined;

/**
 * @member {module:model/MinimumProtocolVersion} MinimumProtocolVersion
 */
ViewerCertificate.prototype['MinimumProtocolVersion'] = undefined;

/**
 * @member {String} Certificate
 */
ViewerCertificate.prototype['Certificate'] = undefined;

/**
 * @member {module:model/CertificateSource} CertificateSource
 */
ViewerCertificate.prototype['CertificateSource'] = undefined;






export default ViewerCertificate;

