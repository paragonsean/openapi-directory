/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-06-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginList_inner::OAIOriginList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginList_inner::OAIOriginList_inner() {
    this->initializeModel();
}

OAIOriginList_inner::~OAIOriginList_inner() {}

void OAIOriginList_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_origin_path_isSet = false;
    m_origin_path_isValid = false;

    m_custom_headers_isSet = false;
    m_custom_headers_isValid = false;

    m_s3_origin_config_isSet = false;
    m_s3_origin_config_isValid = false;

    m_custom_origin_config_isSet = false;
    m_custom_origin_config_isValid = false;
}

void OAIOriginList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginList_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_origin_path_isValid = ::OpenAPI::fromJsonValue(m_origin_path, json[QString("OriginPath")]);
    m_origin_path_isSet = !json[QString("OriginPath")].isNull() && m_origin_path_isValid;

    m_custom_headers_isValid = ::OpenAPI::fromJsonValue(m_custom_headers, json[QString("CustomHeaders")]);
    m_custom_headers_isSet = !json[QString("CustomHeaders")].isNull() && m_custom_headers_isValid;

    m_s3_origin_config_isValid = ::OpenAPI::fromJsonValue(m_s3_origin_config, json[QString("S3OriginConfig")]);
    m_s3_origin_config_isSet = !json[QString("S3OriginConfig")].isNull() && m_s3_origin_config_isValid;

    m_custom_origin_config_isValid = ::OpenAPI::fromJsonValue(m_custom_origin_config, json[QString("CustomOriginConfig")]);
    m_custom_origin_config_isSet = !json[QString("CustomOriginConfig")].isNull() && m_custom_origin_config_isValid;
}

QString OAIOriginList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_origin_path_isSet) {
        obj.insert(QString("OriginPath"), ::OpenAPI::toJsonValue(m_origin_path));
    }
    if (m_custom_headers.isSet()) {
        obj.insert(QString("CustomHeaders"), ::OpenAPI::toJsonValue(m_custom_headers));
    }
    if (m_s3_origin_config.isSet()) {
        obj.insert(QString("S3OriginConfig"), ::OpenAPI::toJsonValue(m_s3_origin_config));
    }
    if (m_custom_origin_config.isSet()) {
        obj.insert(QString("CustomOriginConfig"), ::OpenAPI::toJsonValue(m_custom_origin_config));
    }
    return obj;
}

QString OAIOriginList_inner::getId() const {
    return m_id;
}
void OAIOriginList_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOriginList_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOriginList_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOriginList_inner::getDomainName() const {
    return m_domain_name;
}
void OAIOriginList_inner::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIOriginList_inner::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIOriginList_inner::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIOriginList_inner::getOriginPath() const {
    return m_origin_path;
}
void OAIOriginList_inner::setOriginPath(const QString &origin_path) {
    m_origin_path = origin_path;
    m_origin_path_isSet = true;
}

bool OAIOriginList_inner::is_origin_path_Set() const{
    return m_origin_path_isSet;
}

bool OAIOriginList_inner::is_origin_path_Valid() const{
    return m_origin_path_isValid;
}

OAIOrigin_CustomHeaders OAIOriginList_inner::getCustomHeaders() const {
    return m_custom_headers;
}
void OAIOriginList_inner::setCustomHeaders(const OAIOrigin_CustomHeaders &custom_headers) {
    m_custom_headers = custom_headers;
    m_custom_headers_isSet = true;
}

bool OAIOriginList_inner::is_custom_headers_Set() const{
    return m_custom_headers_isSet;
}

bool OAIOriginList_inner::is_custom_headers_Valid() const{
    return m_custom_headers_isValid;
}

OAIOrigin_S3OriginConfig OAIOriginList_inner::getS3OriginConfig() const {
    return m_s3_origin_config;
}
void OAIOriginList_inner::setS3OriginConfig(const OAIOrigin_S3OriginConfig &s3_origin_config) {
    m_s3_origin_config = s3_origin_config;
    m_s3_origin_config_isSet = true;
}

bool OAIOriginList_inner::is_s3_origin_config_Set() const{
    return m_s3_origin_config_isSet;
}

bool OAIOriginList_inner::is_s3_origin_config_Valid() const{
    return m_s3_origin_config_isValid;
}

OAIOrigin_CustomOriginConfig OAIOriginList_inner::getCustomOriginConfig() const {
    return m_custom_origin_config;
}
void OAIOriginList_inner::setCustomOriginConfig(const OAIOrigin_CustomOriginConfig &custom_origin_config) {
    m_custom_origin_config = custom_origin_config;
    m_custom_origin_config_isSet = true;
}

bool OAIOriginList_inner::is_custom_origin_config_Set() const{
    return m_custom_origin_config_isSet;
}

bool OAIOriginList_inner::is_custom_origin_config_Valid() const{
    return m_custom_origin_config_isValid;
}

bool OAIOriginList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_origin_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_origin_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_domain_name_isValid && true;
}

} // namespace OpenAPI
