/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-06-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomOriginConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomOriginConfig::OAICustomOriginConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomOriginConfig::OAICustomOriginConfig() {
    this->initializeModel();
}

OAICustomOriginConfig::~OAICustomOriginConfig() {}

void OAICustomOriginConfig::initializeModel() {

    m_http_port_isSet = false;
    m_http_port_isValid = false;

    m_https_port_isSet = false;
    m_https_port_isValid = false;

    m_origin_protocol_policy_isSet = false;
    m_origin_protocol_policy_isValid = false;

    m_origin_ssl_protocols_isSet = false;
    m_origin_ssl_protocols_isValid = false;

    m_origin_read_timeout_isSet = false;
    m_origin_read_timeout_isValid = false;

    m_origin_keepalive_timeout_isSet = false;
    m_origin_keepalive_timeout_isValid = false;
}

void OAICustomOriginConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomOriginConfig::fromJsonObject(QJsonObject json) {

    m_http_port_isValid = ::OpenAPI::fromJsonValue(m_http_port, json[QString("HTTPPort")]);
    m_http_port_isSet = !json[QString("HTTPPort")].isNull() && m_http_port_isValid;

    m_https_port_isValid = ::OpenAPI::fromJsonValue(m_https_port, json[QString("HTTPSPort")]);
    m_https_port_isSet = !json[QString("HTTPSPort")].isNull() && m_https_port_isValid;

    m_origin_protocol_policy_isValid = ::OpenAPI::fromJsonValue(m_origin_protocol_policy, json[QString("OriginProtocolPolicy")]);
    m_origin_protocol_policy_isSet = !json[QString("OriginProtocolPolicy")].isNull() && m_origin_protocol_policy_isValid;

    m_origin_ssl_protocols_isValid = ::OpenAPI::fromJsonValue(m_origin_ssl_protocols, json[QString("OriginSslProtocols")]);
    m_origin_ssl_protocols_isSet = !json[QString("OriginSslProtocols")].isNull() && m_origin_ssl_protocols_isValid;

    m_origin_read_timeout_isValid = ::OpenAPI::fromJsonValue(m_origin_read_timeout, json[QString("OriginReadTimeout")]);
    m_origin_read_timeout_isSet = !json[QString("OriginReadTimeout")].isNull() && m_origin_read_timeout_isValid;

    m_origin_keepalive_timeout_isValid = ::OpenAPI::fromJsonValue(m_origin_keepalive_timeout, json[QString("OriginKeepaliveTimeout")]);
    m_origin_keepalive_timeout_isSet = !json[QString("OriginKeepaliveTimeout")].isNull() && m_origin_keepalive_timeout_isValid;
}

QString OAICustomOriginConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomOriginConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_http_port_isSet) {
        obj.insert(QString("HTTPPort"), ::OpenAPI::toJsonValue(m_http_port));
    }
    if (m_https_port_isSet) {
        obj.insert(QString("HTTPSPort"), ::OpenAPI::toJsonValue(m_https_port));
    }
    if (m_origin_protocol_policy.isSet()) {
        obj.insert(QString("OriginProtocolPolicy"), ::OpenAPI::toJsonValue(m_origin_protocol_policy));
    }
    if (m_origin_ssl_protocols.isSet()) {
        obj.insert(QString("OriginSslProtocols"), ::OpenAPI::toJsonValue(m_origin_ssl_protocols));
    }
    if (m_origin_read_timeout_isSet) {
        obj.insert(QString("OriginReadTimeout"), ::OpenAPI::toJsonValue(m_origin_read_timeout));
    }
    if (m_origin_keepalive_timeout_isSet) {
        obj.insert(QString("OriginKeepaliveTimeout"), ::OpenAPI::toJsonValue(m_origin_keepalive_timeout));
    }
    return obj;
}

qint32 OAICustomOriginConfig::getHttpPort() const {
    return m_http_port;
}
void OAICustomOriginConfig::setHttpPort(const qint32 &http_port) {
    m_http_port = http_port;
    m_http_port_isSet = true;
}

bool OAICustomOriginConfig::is_http_port_Set() const{
    return m_http_port_isSet;
}

bool OAICustomOriginConfig::is_http_port_Valid() const{
    return m_http_port_isValid;
}

qint32 OAICustomOriginConfig::getHttpsPort() const {
    return m_https_port;
}
void OAICustomOriginConfig::setHttpsPort(const qint32 &https_port) {
    m_https_port = https_port;
    m_https_port_isSet = true;
}

bool OAICustomOriginConfig::is_https_port_Set() const{
    return m_https_port_isSet;
}

bool OAICustomOriginConfig::is_https_port_Valid() const{
    return m_https_port_isValid;
}

OAIOriginProtocolPolicy OAICustomOriginConfig::getOriginProtocolPolicy() const {
    return m_origin_protocol_policy;
}
void OAICustomOriginConfig::setOriginProtocolPolicy(const OAIOriginProtocolPolicy &origin_protocol_policy) {
    m_origin_protocol_policy = origin_protocol_policy;
    m_origin_protocol_policy_isSet = true;
}

bool OAICustomOriginConfig::is_origin_protocol_policy_Set() const{
    return m_origin_protocol_policy_isSet;
}

bool OAICustomOriginConfig::is_origin_protocol_policy_Valid() const{
    return m_origin_protocol_policy_isValid;
}

OAICustomOriginConfig_OriginSslProtocols OAICustomOriginConfig::getOriginSslProtocols() const {
    return m_origin_ssl_protocols;
}
void OAICustomOriginConfig::setOriginSslProtocols(const OAICustomOriginConfig_OriginSslProtocols &origin_ssl_protocols) {
    m_origin_ssl_protocols = origin_ssl_protocols;
    m_origin_ssl_protocols_isSet = true;
}

bool OAICustomOriginConfig::is_origin_ssl_protocols_Set() const{
    return m_origin_ssl_protocols_isSet;
}

bool OAICustomOriginConfig::is_origin_ssl_protocols_Valid() const{
    return m_origin_ssl_protocols_isValid;
}

qint32 OAICustomOriginConfig::getOriginReadTimeout() const {
    return m_origin_read_timeout;
}
void OAICustomOriginConfig::setOriginReadTimeout(const qint32 &origin_read_timeout) {
    m_origin_read_timeout = origin_read_timeout;
    m_origin_read_timeout_isSet = true;
}

bool OAICustomOriginConfig::is_origin_read_timeout_Set() const{
    return m_origin_read_timeout_isSet;
}

bool OAICustomOriginConfig::is_origin_read_timeout_Valid() const{
    return m_origin_read_timeout_isValid;
}

qint32 OAICustomOriginConfig::getOriginKeepaliveTimeout() const {
    return m_origin_keepalive_timeout;
}
void OAICustomOriginConfig::setOriginKeepaliveTimeout(const qint32 &origin_keepalive_timeout) {
    m_origin_keepalive_timeout = origin_keepalive_timeout;
    m_origin_keepalive_timeout_isSet = true;
}

bool OAICustomOriginConfig::is_origin_keepalive_timeout_Set() const{
    return m_origin_keepalive_timeout_isSet;
}

bool OAICustomOriginConfig::is_origin_keepalive_timeout_Valid() const{
    return m_origin_keepalive_timeout_isValid;
}

bool OAICustomOriginConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_protocol_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_ssl_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_read_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_keepalive_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomOriginConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_http_port_isValid && m_https_port_isValid && m_origin_protocol_policy_isValid && true;
}

} // namespace OpenAPI
