/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-06-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMinimumProtocolVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMinimumProtocolVersion::OAIMinimumProtocolVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMinimumProtocolVersion::OAIMinimumProtocolVersion() {
    this->initializeModel();
}

OAIMinimumProtocolVersion::~OAIMinimumProtocolVersion() {}

void OAIMinimumProtocolVersion::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMinimumProtocolVersion::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMinimumProtocolVersion::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SSLv3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMinimumProtocolVersion::SSLV3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLSv1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMinimumProtocolVersion::TLSV1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLSv1_2016", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMinimumProtocolVersion::TLSV1_2016;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLSv1.1_2016", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMinimumProtocolVersion::TLSV1_1_2016;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TLSv1.2_2018", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMinimumProtocolVersion::TLSV1_2_2018;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMinimumProtocolVersion::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMinimumProtocolVersion::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMinimumProtocolVersion::SSLV3:
            val = "SSLv3";
            break;
        case eOAIMinimumProtocolVersion::TLSV1:
            val = "TLSv1";
            break;
        case eOAIMinimumProtocolVersion::TLSV1_2016:
            val = "TLSv1_2016";
            break;
        case eOAIMinimumProtocolVersion::TLSV1_1_2016:
            val = "TLSv1.1_2016";
            break;
        case eOAIMinimumProtocolVersion::TLSV1_2_2018:
            val = "TLSv1.2_2018";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMinimumProtocolVersion::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMinimumProtocolVersion::eOAIMinimumProtocolVersion OAIMinimumProtocolVersion::getValue() const {
    return m_value;
}

void OAIMinimumProtocolVersion::setValue(const OAIMinimumProtocolVersion::eOAIMinimumProtocolVersion& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMinimumProtocolVersion::isSet() const {
    
    return m_value_isSet;
}

bool OAIMinimumProtocolVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
