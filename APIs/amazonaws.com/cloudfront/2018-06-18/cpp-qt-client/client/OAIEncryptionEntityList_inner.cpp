/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-06-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionEntityList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionEntityList_inner::OAIEncryptionEntityList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionEntityList_inner::OAIEncryptionEntityList_inner() {
    this->initializeModel();
}

OAIEncryptionEntityList_inner::~OAIEncryptionEntityList_inner() {}

void OAIEncryptionEntityList_inner::initializeModel() {

    m_public_key_id_isSet = false;
    m_public_key_id_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_field_patterns_isSet = false;
    m_field_patterns_isValid = false;
}

void OAIEncryptionEntityList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionEntityList_inner::fromJsonObject(QJsonObject json) {

    m_public_key_id_isValid = ::OpenAPI::fromJsonValue(m_public_key_id, json[QString("PublicKeyId")]);
    m_public_key_id_isSet = !json[QString("PublicKeyId")].isNull() && m_public_key_id_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("ProviderId")]);
    m_provider_id_isSet = !json[QString("ProviderId")].isNull() && m_provider_id_isValid;

    m_field_patterns_isValid = ::OpenAPI::fromJsonValue(m_field_patterns, json[QString("FieldPatterns")]);
    m_field_patterns_isSet = !json[QString("FieldPatterns")].isNull() && m_field_patterns_isValid;
}

QString OAIEncryptionEntityList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionEntityList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_public_key_id_isSet) {
        obj.insert(QString("PublicKeyId"), ::OpenAPI::toJsonValue(m_public_key_id));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("ProviderId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_field_patterns.isSet()) {
        obj.insert(QString("FieldPatterns"), ::OpenAPI::toJsonValue(m_field_patterns));
    }
    return obj;
}

QString OAIEncryptionEntityList_inner::getPublicKeyId() const {
    return m_public_key_id;
}
void OAIEncryptionEntityList_inner::setPublicKeyId(const QString &public_key_id) {
    m_public_key_id = public_key_id;
    m_public_key_id_isSet = true;
}

bool OAIEncryptionEntityList_inner::is_public_key_id_Set() const{
    return m_public_key_id_isSet;
}

bool OAIEncryptionEntityList_inner::is_public_key_id_Valid() const{
    return m_public_key_id_isValid;
}

QString OAIEncryptionEntityList_inner::getProviderId() const {
    return m_provider_id;
}
void OAIEncryptionEntityList_inner::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIEncryptionEntityList_inner::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIEncryptionEntityList_inner::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

OAIEncryptionEntity_FieldPatterns OAIEncryptionEntityList_inner::getFieldPatterns() const {
    return m_field_patterns;
}
void OAIEncryptionEntityList_inner::setFieldPatterns(const OAIEncryptionEntity_FieldPatterns &field_patterns) {
    m_field_patterns = field_patterns;
    m_field_patterns_isSet = true;
}

bool OAIEncryptionEntityList_inner::is_field_patterns_Set() const{
    return m_field_patterns_isSet;
}

bool OAIEncryptionEntityList_inner::is_field_patterns_Valid() const{
    return m_field_patterns_isValid;
}

bool OAIEncryptionEntityList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_patterns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionEntityList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_public_key_id_isValid && m_provider_id_isValid && m_field_patterns_isValid && true;
}

} // namespace OpenAPI
