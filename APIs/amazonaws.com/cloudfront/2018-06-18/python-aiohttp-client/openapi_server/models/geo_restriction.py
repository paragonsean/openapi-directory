# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo_restriction_type import GeoRestrictionType
from openapi_server import util


class GeoRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, restriction_type: GeoRestrictionType=None, quantity: int=None, items: List=None):
        """GeoRestriction - a model defined in OpenAPI

        :param restriction_type: The restriction_type of this GeoRestriction.
        :param quantity: The quantity of this GeoRestriction.
        :param items: The items of this GeoRestriction.
        """
        self.openapi_types = {
            'restriction_type': GeoRestrictionType,
            'quantity': int,
            'items': List
        }

        self.attribute_map = {
            'restriction_type': 'RestrictionType',
            'quantity': 'Quantity',
            'items': 'Items'
        }

        self._restriction_type = restriction_type
        self._quantity = quantity
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoRestriction of this GeoRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def restriction_type(self):
        """Gets the restriction_type of this GeoRestriction.


        :return: The restriction_type of this GeoRestriction.
        :rtype: GeoRestrictionType
        """
        return self._restriction_type

    @restriction_type.setter
    def restriction_type(self, restriction_type):
        """Sets the restriction_type of this GeoRestriction.


        :param restriction_type: The restriction_type of this GeoRestriction.
        :type restriction_type: GeoRestrictionType
        """
        if restriction_type is None:
            raise ValueError("Invalid value for `restriction_type`, must not be `None`")

        self._restriction_type = restriction_type

    @property
    def quantity(self):
        """Gets the quantity of this GeoRestriction.


        :return: The quantity of this GeoRestriction.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GeoRestriction.


        :param quantity: The quantity of this GeoRestriction.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def items(self):
        """Gets the items of this GeoRestriction.


        :return: The items of this GeoRestriction.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GeoRestriction.


        :param items: The items of this GeoRestriction.
        :type items: List
        """

        self._items = items
