# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudFrontOriginAccessIdentitySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, s3_canonical_user_id: str=None, comment: str=None):
        """CloudFrontOriginAccessIdentitySummary - a model defined in OpenAPI

        :param id: The id of this CloudFrontOriginAccessIdentitySummary.
        :param s3_canonical_user_id: The s3_canonical_user_id of this CloudFrontOriginAccessIdentitySummary.
        :param comment: The comment of this CloudFrontOriginAccessIdentitySummary.
        """
        self.openapi_types = {
            'id': str,
            's3_canonical_user_id': str,
            'comment': str
        }

        self.attribute_map = {
            'id': 'Id',
            's3_canonical_user_id': 'S3CanonicalUserId',
            'comment': 'Comment'
        }

        self._id = id
        self._s3_canonical_user_id = s3_canonical_user_id
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudFrontOriginAccessIdentitySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudFrontOriginAccessIdentitySummary of this CloudFrontOriginAccessIdentitySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CloudFrontOriginAccessIdentitySummary.


        :return: The id of this CloudFrontOriginAccessIdentitySummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudFrontOriginAccessIdentitySummary.


        :param id: The id of this CloudFrontOriginAccessIdentitySummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def s3_canonical_user_id(self):
        """Gets the s3_canonical_user_id of this CloudFrontOriginAccessIdentitySummary.


        :return: The s3_canonical_user_id of this CloudFrontOriginAccessIdentitySummary.
        :rtype: str
        """
        return self._s3_canonical_user_id

    @s3_canonical_user_id.setter
    def s3_canonical_user_id(self, s3_canonical_user_id):
        """Sets the s3_canonical_user_id of this CloudFrontOriginAccessIdentitySummary.


        :param s3_canonical_user_id: The s3_canonical_user_id of this CloudFrontOriginAccessIdentitySummary.
        :type s3_canonical_user_id: str
        """
        if s3_canonical_user_id is None:
            raise ValueError("Invalid value for `s3_canonical_user_id`, must not be `None`")

        self._s3_canonical_user_id = s3_canonical_user_id

    @property
    def comment(self):
        """Gets the comment of this CloudFrontOriginAccessIdentitySummary.


        :return: The comment of this CloudFrontOriginAccessIdentitySummary.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CloudFrontOriginAccessIdentitySummary.


        :param comment: The comment of this CloudFrontOriginAccessIdentitySummary.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment
