# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.public_key_public_key_config import PublicKeyPublicKeyConfig
from openapi_server import util


class GetPublicKeyResultPublicKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, created_time: datetime=None, public_key_config: PublicKeyPublicKeyConfig=None):
        """GetPublicKeyResultPublicKey - a model defined in OpenAPI

        :param id: The id of this GetPublicKeyResultPublicKey.
        :param created_time: The created_time of this GetPublicKeyResultPublicKey.
        :param public_key_config: The public_key_config of this GetPublicKeyResultPublicKey.
        """
        self.openapi_types = {
            'id': str,
            'created_time': datetime,
            'public_key_config': PublicKeyPublicKeyConfig
        }

        self.attribute_map = {
            'id': 'Id',
            'created_time': 'CreatedTime',
            'public_key_config': 'PublicKeyConfig'
        }

        self._id = id
        self._created_time = created_time
        self._public_key_config = public_key_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPublicKeyResultPublicKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPublicKeyResult_PublicKey of this GetPublicKeyResultPublicKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetPublicKeyResultPublicKey.


        :return: The id of this GetPublicKeyResultPublicKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetPublicKeyResultPublicKey.


        :param id: The id of this GetPublicKeyResultPublicKey.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def created_time(self):
        """Gets the created_time of this GetPublicKeyResultPublicKey.


        :return: The created_time of this GetPublicKeyResultPublicKey.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this GetPublicKeyResultPublicKey.


        :param created_time: The created_time of this GetPublicKeyResultPublicKey.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def public_key_config(self):
        """Gets the public_key_config of this GetPublicKeyResultPublicKey.


        :return: The public_key_config of this GetPublicKeyResultPublicKey.
        :rtype: PublicKeyPublicKeyConfig
        """
        return self._public_key_config

    @public_key_config.setter
    def public_key_config(self, public_key_config):
        """Sets the public_key_config of this GetPublicKeyResultPublicKey.


        :param public_key_config: The public_key_config of this GetPublicKeyResultPublicKey.
        :type public_key_config: PublicKeyPublicKeyConfig
        """
        if public_key_config is None:
            raise ValueError("Invalid value for `public_key_config`, must not be `None`")

        self._public_key_config = public_key_config
