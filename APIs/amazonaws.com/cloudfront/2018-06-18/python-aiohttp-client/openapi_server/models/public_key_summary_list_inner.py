# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicKeySummaryListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, created_time: datetime=None, encoded_key: str=None, comment: str=None):
        """PublicKeySummaryListInner - a model defined in OpenAPI

        :param id: The id of this PublicKeySummaryListInner.
        :param name: The name of this PublicKeySummaryListInner.
        :param created_time: The created_time of this PublicKeySummaryListInner.
        :param encoded_key: The encoded_key of this PublicKeySummaryListInner.
        :param comment: The comment of this PublicKeySummaryListInner.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'created_time': datetime,
            'encoded_key': str,
            'comment': str
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'created_time': 'CreatedTime',
            'encoded_key': 'EncodedKey',
            'comment': 'Comment'
        }

        self._id = id
        self._name = name
        self._created_time = created_time
        self._encoded_key = encoded_key
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicKeySummaryListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicKeySummaryList_inner of this PublicKeySummaryListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PublicKeySummaryListInner.


        :return: The id of this PublicKeySummaryListInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicKeySummaryListInner.


        :param id: The id of this PublicKeySummaryListInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this PublicKeySummaryListInner.


        :return: The name of this PublicKeySummaryListInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicKeySummaryListInner.


        :param name: The name of this PublicKeySummaryListInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def created_time(self):
        """Gets the created_time of this PublicKeySummaryListInner.


        :return: The created_time of this PublicKeySummaryListInner.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PublicKeySummaryListInner.


        :param created_time: The created_time of this PublicKeySummaryListInner.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def encoded_key(self):
        """Gets the encoded_key of this PublicKeySummaryListInner.


        :return: The encoded_key of this PublicKeySummaryListInner.
        :rtype: str
        """
        return self._encoded_key

    @encoded_key.setter
    def encoded_key(self, encoded_key):
        """Sets the encoded_key of this PublicKeySummaryListInner.


        :param encoded_key: The encoded_key of this PublicKeySummaryListInner.
        :type encoded_key: str
        """
        if encoded_key is None:
            raise ValueError("Invalid value for `encoded_key`, must not be `None`")

        self._encoded_key = encoded_key

    @property
    def comment(self):
        """Gets the comment of this PublicKeySummaryListInner.


        :return: The comment of this PublicKeySummaryListInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PublicKeySummaryListInner.


        :param comment: The comment of this PublicKeySummaryListInner.
        :type comment: str
        """

        self._comment = comment
