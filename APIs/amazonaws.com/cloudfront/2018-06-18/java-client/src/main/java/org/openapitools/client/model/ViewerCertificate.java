/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-06-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateSource;
import org.openapitools.client.model.MinimumProtocolVersion;
import org.openapitools.client.model.SSLSupportMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A complex type that specifies the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Whether you want viewers to use HTTP or HTTPS to request your objects.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want viewers to use HTTPS, whether you&#39;re using an alternate domain name such as &lt;code&gt;example.com&lt;/code&gt; or the CloudFront domain name for your distribution, such as &lt;code&gt;d111111abcdef8.cloudfront.net&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you&#39;re using an alternate domain name, whether AWS Certificate Manager (ACM) provided the certificate, or you purchased a certificate from a third-party certificate authority and imported it into ACM or uploaded it to the IAM certificate store.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You must specify only one of the following values: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ViewerCertificate$ACMCertificateArn&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ViewerCertificate$IAMCertificateId&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ViewerCertificate$CloudFrontDefaultCertificate&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Don&#39;t specify &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;CloudFrontDefaultCertificate&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;If you want viewers to use HTTP instead of HTTPS to request your objects&lt;/b&gt;: Specify the following value:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;CloudFrontDefaultCertificate&amp;gt;true&amp;lt;CloudFrontDefaultCertificate&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;p&gt;In addition, specify &lt;code&gt;allow-all&lt;/code&gt; for &lt;code&gt;ViewerProtocolPolicy&lt;/code&gt; for all of your cache behaviors.&lt;/p&gt; &lt;p&gt; &lt;b&gt;If you want viewers to use HTTPS to request your objects&lt;/b&gt;: Choose the type of certificate that you want to use based on whether you&#39;re using an alternate domain name for your objects or the CloudFront domain name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you&#39;re using an alternate domain name, such as example.com&lt;/b&gt;: Specify one of the following values, depending on whether ACM provided your certificate or you purchased your certificate from third-party certificate authority:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;ACMCertificateArn&amp;gt;&lt;i&gt;ARN for ACM SSL/TLS certificate&lt;/i&gt;&amp;lt;ACMCertificateArn&amp;gt;&lt;/code&gt; where &lt;code&gt; &lt;i&gt;ARN for ACM SSL/TLS certificate&lt;/i&gt; &lt;/code&gt; is the ARN for the ACM SSL/TLS certificate that you want to use for this distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;IAMCertificateId&amp;gt;&lt;i&gt;IAM certificate ID&lt;/i&gt;&amp;lt;IAMCertificateId&amp;gt;&lt;/code&gt; where &lt;code&gt; &lt;i&gt;IAM certificate ID&lt;/i&gt; &lt;/code&gt; is the ID that IAM returned when you added the certificate to the IAM certificate store.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;ACMCertificateArn&lt;/code&gt; or &lt;code&gt;IAMCertificateId&lt;/code&gt;, you must also specify a value for &lt;code&gt;SSLSupportMethod&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you choose to use an ACM certificate or a certificate in the IAM certificate store, we recommend that you use only an alternate domain name in your object URLs (&lt;code&gt;https://example.com/logo.jpg&lt;/code&gt;). If you use the domain name that is associated with your CloudFront distribution (such as &lt;code&gt;https://d111111abcdef8.cloudfront.net/logo.jpg&lt;/code&gt;) and the viewer supports &lt;code&gt;SNI&lt;/code&gt;, then CloudFront behaves normally. However, if the browser does not support SNI, the user&#39;s experience depends on the value that you choose for &lt;code&gt;SSLSupportMethod&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vip&lt;/code&gt;: The viewer displays a warning because there is a mismatch between the CloudFront domain name and the domain name in your SSL/TLS certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sni-only&lt;/code&gt;: CloudFront drops the connection with the browser without returning the object.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you&#39;re using the CloudFront domain name for your distribution, such as &lt;code&gt;d111111abcdef8.cloudfront.net&lt;/code&gt; &lt;/b&gt;: Specify the following value:&lt;/p&gt; &lt;p&gt; &lt;code&gt;&amp;lt;CloudFrontDefaultCertificate&amp;gt;true&amp;lt;CloudFrontDefaultCertificate&amp;gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you want viewers to use HTTPS, you must also specify one of the following values in your cache behaviors:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &amp;lt;ViewerProtocolPolicy&amp;gt;https-only&amp;lt;ViewerProtocolPolicy&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;ViewerProtocolPolicy&amp;gt;redirect-to-https&amp;lt;ViewerProtocolPolicy&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also optionally require that CloudFront use HTTPS to communicate with your origin by specifying one of the following values for the applicable origins:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;OriginProtocolPolicy&amp;gt;https-only&amp;lt;OriginProtocolPolicy&amp;gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;&amp;lt;OriginProtocolPolicy&amp;gt;match-viewer&amp;lt;OriginProtocolPolicy&amp;gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html#CNAMEsAndHTTPS\&quot;&gt;Using Alternate Domain Names and HTTPS&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:40.036732-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViewerCertificate {
  public static final String SERIALIZED_NAME_CLOUD_FRONT_DEFAULT_CERTIFICATE = "CloudFrontDefaultCertificate";
  @SerializedName(SERIALIZED_NAME_CLOUD_FRONT_DEFAULT_CERTIFICATE)
  private Boolean cloudFrontDefaultCertificate;

  public static final String SERIALIZED_NAME_IA_M_CERTIFICATE_ID = "IAMCertificateId";
  @SerializedName(SERIALIZED_NAME_IA_M_CERTIFICATE_ID)
  private String iaMCertificateId;

  public static final String SERIALIZED_NAME_AC_M_CERTIFICATE_ARN = "ACMCertificateArn";
  @SerializedName(SERIALIZED_NAME_AC_M_CERTIFICATE_ARN)
  private String acMCertificateArn;

  public static final String SERIALIZED_NAME_SS_L_SUPPORT_METHOD = "SSLSupportMethod";
  @SerializedName(SERIALIZED_NAME_SS_L_SUPPORT_METHOD)
  private SSLSupportMethod ssLSupportMethod;

  public static final String SERIALIZED_NAME_MINIMUM_PROTOCOL_VERSION = "MinimumProtocolVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PROTOCOL_VERSION)
  private MinimumProtocolVersion minimumProtocolVersion;

  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_SOURCE = "CertificateSource";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SOURCE)
  private CertificateSource certificateSource;

  public ViewerCertificate() {
  }

  public ViewerCertificate cloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
    this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
    return this;
  }

  /**
   * Get cloudFrontDefaultCertificate
   * @return cloudFrontDefaultCertificate
   */
  @javax.annotation.Nullable
  public Boolean getCloudFrontDefaultCertificate() {
    return cloudFrontDefaultCertificate;
  }

  public void setCloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
    this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
  }


  public ViewerCertificate iaMCertificateId(String iaMCertificateId) {
    this.iaMCertificateId = iaMCertificateId;
    return this;
  }

  /**
   * Get iaMCertificateId
   * @return iaMCertificateId
   */
  @javax.annotation.Nullable
  public String getIaMCertificateId() {
    return iaMCertificateId;
  }

  public void setIaMCertificateId(String iaMCertificateId) {
    this.iaMCertificateId = iaMCertificateId;
  }


  public ViewerCertificate acMCertificateArn(String acMCertificateArn) {
    this.acMCertificateArn = acMCertificateArn;
    return this;
  }

  /**
   * Get acMCertificateArn
   * @return acMCertificateArn
   */
  @javax.annotation.Nullable
  public String getAcMCertificateArn() {
    return acMCertificateArn;
  }

  public void setAcMCertificateArn(String acMCertificateArn) {
    this.acMCertificateArn = acMCertificateArn;
  }


  public ViewerCertificate ssLSupportMethod(SSLSupportMethod ssLSupportMethod) {
    this.ssLSupportMethod = ssLSupportMethod;
    return this;
  }

  /**
   * Get ssLSupportMethod
   * @return ssLSupportMethod
   */
  @javax.annotation.Nullable
  public SSLSupportMethod getSsLSupportMethod() {
    return ssLSupportMethod;
  }

  public void setSsLSupportMethod(SSLSupportMethod ssLSupportMethod) {
    this.ssLSupportMethod = ssLSupportMethod;
  }


  public ViewerCertificate minimumProtocolVersion(MinimumProtocolVersion minimumProtocolVersion) {
    this.minimumProtocolVersion = minimumProtocolVersion;
    return this;
  }

  /**
   * Get minimumProtocolVersion
   * @return minimumProtocolVersion
   */
  @javax.annotation.Nullable
  public MinimumProtocolVersion getMinimumProtocolVersion() {
    return minimumProtocolVersion;
  }

  public void setMinimumProtocolVersion(MinimumProtocolVersion minimumProtocolVersion) {
    this.minimumProtocolVersion = minimumProtocolVersion;
  }


  public ViewerCertificate certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public ViewerCertificate certificateSource(CertificateSource certificateSource) {
    this.certificateSource = certificateSource;
    return this;
  }

  /**
   * Get certificateSource
   * @return certificateSource
   */
  @javax.annotation.Nullable
  public CertificateSource getCertificateSource() {
    return certificateSource;
  }

  public void setCertificateSource(CertificateSource certificateSource) {
    this.certificateSource = certificateSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewerCertificate viewerCertificate = (ViewerCertificate) o;
    return Objects.equals(this.cloudFrontDefaultCertificate, viewerCertificate.cloudFrontDefaultCertificate) &&
        Objects.equals(this.iaMCertificateId, viewerCertificate.iaMCertificateId) &&
        Objects.equals(this.acMCertificateArn, viewerCertificate.acMCertificateArn) &&
        Objects.equals(this.ssLSupportMethod, viewerCertificate.ssLSupportMethod) &&
        Objects.equals(this.minimumProtocolVersion, viewerCertificate.minimumProtocolVersion) &&
        Objects.equals(this.certificate, viewerCertificate.certificate) &&
        Objects.equals(this.certificateSource, viewerCertificate.certificateSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudFrontDefaultCertificate, iaMCertificateId, acMCertificateArn, ssLSupportMethod, minimumProtocolVersion, certificate, certificateSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewerCertificate {\n");
    sb.append("    cloudFrontDefaultCertificate: ").append(toIndentedString(cloudFrontDefaultCertificate)).append("\n");
    sb.append("    iaMCertificateId: ").append(toIndentedString(iaMCertificateId)).append("\n");
    sb.append("    acMCertificateArn: ").append(toIndentedString(acMCertificateArn)).append("\n");
    sb.append("    ssLSupportMethod: ").append(toIndentedString(ssLSupportMethod)).append("\n");
    sb.append("    minimumProtocolVersion: ").append(toIndentedString(minimumProtocolVersion)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateSource: ").append(toIndentedString(certificateSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CloudFrontDefaultCertificate");
    openapiFields.add("IAMCertificateId");
    openapiFields.add("ACMCertificateArn");
    openapiFields.add("SSLSupportMethod");
    openapiFields.add("MinimumProtocolVersion");
    openapiFields.add("Certificate");
    openapiFields.add("CertificateSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViewerCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewerCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewerCertificate is not found in the empty JSON string", ViewerCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ViewerCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewerCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CloudFrontDefaultCertificate`
      if (jsonObj.get("CloudFrontDefaultCertificate") != null && !jsonObj.get("CloudFrontDefaultCertificate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CloudFrontDefaultCertificate"));
      }
      // validate the optional field `IAMCertificateId`
      if (jsonObj.get("IAMCertificateId") != null && !jsonObj.get("IAMCertificateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IAMCertificateId"));
      }
      // validate the optional field `ACMCertificateArn`
      if (jsonObj.get("ACMCertificateArn") != null && !jsonObj.get("ACMCertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ACMCertificateArn"));
      }
      // validate the optional field `SSLSupportMethod`
      if (jsonObj.get("SSLSupportMethod") != null && !jsonObj.get("SSLSupportMethod").isJsonNull()) {
        SSLSupportMethod.validateJsonElement(jsonObj.get("SSLSupportMethod"));
      }
      // validate the optional field `MinimumProtocolVersion`
      if (jsonObj.get("MinimumProtocolVersion") != null && !jsonObj.get("MinimumProtocolVersion").isJsonNull()) {
        MinimumProtocolVersion.validateJsonElement(jsonObj.get("MinimumProtocolVersion"));
      }
      // validate the optional field `Certificate`
      if (jsonObj.get("Certificate") != null && !jsonObj.get("Certificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Certificate"));
      }
      // validate the optional field `CertificateSource`
      if (jsonObj.get("CertificateSource") != null && !jsonObj.get("CertificateSource").isJsonNull()) {
        CertificateSource.validateJsonElement(jsonObj.get("CertificateSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewerCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewerCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewerCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewerCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewerCertificate>() {
           @Override
           public void write(JsonWriter out, ViewerCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewerCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViewerCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViewerCertificate
   * @throws IOException if the JSON string is invalid with respect to ViewerCertificate
   */
  public static ViewerCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewerCertificate.class);
  }

  /**
   * Convert an instance of ViewerCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

