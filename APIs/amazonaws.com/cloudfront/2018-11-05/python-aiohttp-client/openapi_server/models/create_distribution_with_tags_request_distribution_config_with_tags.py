# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_distribution_with_tags20181105_request_distribution_config_with_tags_distribution_config import CreateDistributionWithTags20181105RequestDistributionConfigWithTagsDistributionConfig
from openapi_server.models.create_distribution_with_tags20181105_request_distribution_config_with_tags_tags import CreateDistributionWithTags20181105RequestDistributionConfigWithTagsTags
from openapi_server import util


class CreateDistributionWithTagsRequestDistributionConfigWithTags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distribution_config: CreateDistributionWithTags20181105RequestDistributionConfigWithTagsDistributionConfig=None, tags: CreateDistributionWithTags20181105RequestDistributionConfigWithTagsTags=None):
        """CreateDistributionWithTagsRequestDistributionConfigWithTags - a model defined in OpenAPI

        :param distribution_config: The distribution_config of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        :param tags: The tags of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        """
        self.openapi_types = {
            'distribution_config': CreateDistributionWithTags20181105RequestDistributionConfigWithTagsDistributionConfig,
            'tags': CreateDistributionWithTags20181105RequestDistributionConfigWithTagsTags
        }

        self.attribute_map = {
            'distribution_config': 'DistributionConfig',
            'tags': 'Tags'
        }

        self._distribution_config = distribution_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDistributionWithTagsRequestDistributionConfigWithTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDistributionWithTagsRequest_DistributionConfigWithTags of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distribution_config(self):
        """Gets the distribution_config of this CreateDistributionWithTagsRequestDistributionConfigWithTags.


        :return: The distribution_config of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        :rtype: CreateDistributionWithTags20181105RequestDistributionConfigWithTagsDistributionConfig
        """
        return self._distribution_config

    @distribution_config.setter
    def distribution_config(self, distribution_config):
        """Sets the distribution_config of this CreateDistributionWithTagsRequestDistributionConfigWithTags.


        :param distribution_config: The distribution_config of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        :type distribution_config: CreateDistributionWithTags20181105RequestDistributionConfigWithTagsDistributionConfig
        """
        if distribution_config is None:
            raise ValueError("Invalid value for `distribution_config`, must not be `None`")

        self._distribution_config = distribution_config

    @property
    def tags(self):
        """Gets the tags of this CreateDistributionWithTagsRequestDistributionConfigWithTags.


        :return: The tags of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        :rtype: CreateDistributionWithTags20181105RequestDistributionConfigWithTagsTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDistributionWithTagsRequestDistributionConfigWithTags.


        :param tags: The tags of this CreateDistributionWithTagsRequestDistributionConfigWithTags.
        :type tags: CreateDistributionWithTags20181105RequestDistributionConfigWithTagsTags
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
