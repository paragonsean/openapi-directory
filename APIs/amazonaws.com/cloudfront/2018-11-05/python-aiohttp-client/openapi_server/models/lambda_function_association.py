# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_type import EventType
from openapi_server import util


class LambdaFunctionAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lambda_function_arn: str=None, event_type: EventType=None, include_body: bool=None):
        """LambdaFunctionAssociation - a model defined in OpenAPI

        :param lambda_function_arn: The lambda_function_arn of this LambdaFunctionAssociation.
        :param event_type: The event_type of this LambdaFunctionAssociation.
        :param include_body: The include_body of this LambdaFunctionAssociation.
        """
        self.openapi_types = {
            'lambda_function_arn': str,
            'event_type': EventType,
            'include_body': bool
        }

        self.attribute_map = {
            'lambda_function_arn': 'LambdaFunctionARN',
            'event_type': 'EventType',
            'include_body': 'IncludeBody'
        }

        self._lambda_function_arn = lambda_function_arn
        self._event_type = event_type
        self._include_body = include_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LambdaFunctionAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LambdaFunctionAssociation of this LambdaFunctionAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lambda_function_arn(self):
        """Gets the lambda_function_arn of this LambdaFunctionAssociation.


        :return: The lambda_function_arn of this LambdaFunctionAssociation.
        :rtype: str
        """
        return self._lambda_function_arn

    @lambda_function_arn.setter
    def lambda_function_arn(self, lambda_function_arn):
        """Sets the lambda_function_arn of this LambdaFunctionAssociation.


        :param lambda_function_arn: The lambda_function_arn of this LambdaFunctionAssociation.
        :type lambda_function_arn: str
        """
        if lambda_function_arn is None:
            raise ValueError("Invalid value for `lambda_function_arn`, must not be `None`")

        self._lambda_function_arn = lambda_function_arn

    @property
    def event_type(self):
        """Gets the event_type of this LambdaFunctionAssociation.


        :return: The event_type of this LambdaFunctionAssociation.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this LambdaFunctionAssociation.


        :param event_type: The event_type of this LambdaFunctionAssociation.
        :type event_type: EventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def include_body(self):
        """Gets the include_body of this LambdaFunctionAssociation.


        :return: The include_body of this LambdaFunctionAssociation.
        :rtype: bool
        """
        return self._include_body

    @include_body.setter
    def include_body(self, include_body):
        """Sets the include_body of this LambdaFunctionAssociation.


        :param include_body: The include_body of this LambdaFunctionAssociation.
        :type include_body: bool
        """

        self._include_body = include_body
