# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format import Format
from openapi_server import util


class ContentTypeProfileListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: Format=None, profile_id: str=None, content_type: str=None):
        """ContentTypeProfileListInner - a model defined in OpenAPI

        :param format: The format of this ContentTypeProfileListInner.
        :param profile_id: The profile_id of this ContentTypeProfileListInner.
        :param content_type: The content_type of this ContentTypeProfileListInner.
        """
        self.openapi_types = {
            'format': Format,
            'profile_id': str,
            'content_type': str
        }

        self.attribute_map = {
            'format': 'Format',
            'profile_id': 'ProfileId',
            'content_type': 'ContentType'
        }

        self._format = format
        self._profile_id = profile_id
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentTypeProfileListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentTypeProfileList_inner of this ContentTypeProfileListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this ContentTypeProfileListInner.


        :return: The format of this ContentTypeProfileListInner.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ContentTypeProfileListInner.


        :param format: The format of this ContentTypeProfileListInner.
        :type format: Format
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def profile_id(self):
        """Gets the profile_id of this ContentTypeProfileListInner.


        :return: The profile_id of this ContentTypeProfileListInner.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ContentTypeProfileListInner.


        :param profile_id: The profile_id of this ContentTypeProfileListInner.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def content_type(self):
        """Gets the content_type of this ContentTypeProfileListInner.


        :return: The content_type of this ContentTypeProfileListInner.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContentTypeProfileListInner.


        :param content_type: The content_type of this ContentTypeProfileListInner.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type
