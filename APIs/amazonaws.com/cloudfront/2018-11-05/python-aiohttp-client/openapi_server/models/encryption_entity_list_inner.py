# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_entity_field_patterns import EncryptionEntityFieldPatterns
from openapi_server import util


class EncryptionEntityListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_key_id: str=None, provider_id: str=None, field_patterns: EncryptionEntityFieldPatterns=None):
        """EncryptionEntityListInner - a model defined in OpenAPI

        :param public_key_id: The public_key_id of this EncryptionEntityListInner.
        :param provider_id: The provider_id of this EncryptionEntityListInner.
        :param field_patterns: The field_patterns of this EncryptionEntityListInner.
        """
        self.openapi_types = {
            'public_key_id': str,
            'provider_id': str,
            'field_patterns': EncryptionEntityFieldPatterns
        }

        self.attribute_map = {
            'public_key_id': 'PublicKeyId',
            'provider_id': 'ProviderId',
            'field_patterns': 'FieldPatterns'
        }

        self._public_key_id = public_key_id
        self._provider_id = provider_id
        self._field_patterns = field_patterns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionEntityListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionEntityList_inner of this EncryptionEntityListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_key_id(self):
        """Gets the public_key_id of this EncryptionEntityListInner.


        :return: The public_key_id of this EncryptionEntityListInner.
        :rtype: str
        """
        return self._public_key_id

    @public_key_id.setter
    def public_key_id(self, public_key_id):
        """Sets the public_key_id of this EncryptionEntityListInner.


        :param public_key_id: The public_key_id of this EncryptionEntityListInner.
        :type public_key_id: str
        """
        if public_key_id is None:
            raise ValueError("Invalid value for `public_key_id`, must not be `None`")

        self._public_key_id = public_key_id

    @property
    def provider_id(self):
        """Gets the provider_id of this EncryptionEntityListInner.


        :return: The provider_id of this EncryptionEntityListInner.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this EncryptionEntityListInner.


        :param provider_id: The provider_id of this EncryptionEntityListInner.
        :type provider_id: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")

        self._provider_id = provider_id

    @property
    def field_patterns(self):
        """Gets the field_patterns of this EncryptionEntityListInner.


        :return: The field_patterns of this EncryptionEntityListInner.
        :rtype: EncryptionEntityFieldPatterns
        """
        return self._field_patterns

    @field_patterns.setter
    def field_patterns(self, field_patterns):
        """Sets the field_patterns of this EncryptionEntityListInner.


        :param field_patterns: The field_patterns of this EncryptionEntityListInner.
        :type field_patterns: EncryptionEntityFieldPatterns
        """
        if field_patterns is None:
            raise ValueError("Invalid value for `field_patterns`, must not be `None`")

        self._field_patterns = field_patterns
