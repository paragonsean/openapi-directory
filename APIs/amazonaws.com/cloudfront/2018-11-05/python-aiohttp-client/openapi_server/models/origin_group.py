# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.origin_group_failover_criteria import OriginGroupFailoverCriteria
from openapi_server.models.origin_group_members import OriginGroupMembers
from openapi_server import util


class OriginGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, failover_criteria: OriginGroupFailoverCriteria=None, members: OriginGroupMembers=None):
        """OriginGroup - a model defined in OpenAPI

        :param id: The id of this OriginGroup.
        :param failover_criteria: The failover_criteria of this OriginGroup.
        :param members: The members of this OriginGroup.
        """
        self.openapi_types = {
            'id': str,
            'failover_criteria': OriginGroupFailoverCriteria,
            'members': OriginGroupMembers
        }

        self.attribute_map = {
            'id': 'Id',
            'failover_criteria': 'FailoverCriteria',
            'members': 'Members'
        }

        self._id = id
        self._failover_criteria = failover_criteria
        self._members = members

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginGroup of this OriginGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OriginGroup.


        :return: The id of this OriginGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OriginGroup.


        :param id: The id of this OriginGroup.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def failover_criteria(self):
        """Gets the failover_criteria of this OriginGroup.


        :return: The failover_criteria of this OriginGroup.
        :rtype: OriginGroupFailoverCriteria
        """
        return self._failover_criteria

    @failover_criteria.setter
    def failover_criteria(self, failover_criteria):
        """Sets the failover_criteria of this OriginGroup.


        :param failover_criteria: The failover_criteria of this OriginGroup.
        :type failover_criteria: OriginGroupFailoverCriteria
        """
        if failover_criteria is None:
            raise ValueError("Invalid value for `failover_criteria`, must not be `None`")

        self._failover_criteria = failover_criteria

    @property
    def members(self):
        """Gets the members of this OriginGroup.


        :return: The members of this OriginGroup.
        :rtype: OriginGroupMembers
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this OriginGroup.


        :param members: The members of this OriginGroup.
        :type members: OriginGroupMembers
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")

        self._members = members
