# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cookie_preference_whitelisted_names import CookiePreferenceWhitelistedNames
from openapi_server.models.item_selection import ItemSelection
from openapi_server import util


class ForwardedValuesCookies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forward: ItemSelection=None, whitelisted_names: CookiePreferenceWhitelistedNames=None):
        """ForwardedValuesCookies - a model defined in OpenAPI

        :param forward: The forward of this ForwardedValuesCookies.
        :param whitelisted_names: The whitelisted_names of this ForwardedValuesCookies.
        """
        self.openapi_types = {
            'forward': ItemSelection,
            'whitelisted_names': CookiePreferenceWhitelistedNames
        }

        self.attribute_map = {
            'forward': 'Forward',
            'whitelisted_names': 'WhitelistedNames'
        }

        self._forward = forward
        self._whitelisted_names = whitelisted_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForwardedValuesCookies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForwardedValues_Cookies of this ForwardedValuesCookies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forward(self):
        """Gets the forward of this ForwardedValuesCookies.


        :return: The forward of this ForwardedValuesCookies.
        :rtype: ItemSelection
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this ForwardedValuesCookies.


        :param forward: The forward of this ForwardedValuesCookies.
        :type forward: ItemSelection
        """
        if forward is None:
            raise ValueError("Invalid value for `forward`, must not be `None`")

        self._forward = forward

    @property
    def whitelisted_names(self):
        """Gets the whitelisted_names of this ForwardedValuesCookies.


        :return: The whitelisted_names of this ForwardedValuesCookies.
        :rtype: CookiePreferenceWhitelistedNames
        """
        return self._whitelisted_names

    @whitelisted_names.setter
    def whitelisted_names(self, whitelisted_names):
        """Sets the whitelisted_names of this ForwardedValuesCookies.


        :param whitelisted_names: The whitelisted_names of this ForwardedValuesCookies.
        :type whitelisted_names: CookiePreferenceWhitelistedNames
        """

        self._whitelisted_names = whitelisted_names
