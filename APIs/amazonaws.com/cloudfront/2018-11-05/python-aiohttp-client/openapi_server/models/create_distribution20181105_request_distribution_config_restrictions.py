# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo_restriction import GeoRestriction
from openapi_server import util


class CreateDistribution20181105RequestDistributionConfigRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geo_restriction: GeoRestriction=None):
        """CreateDistribution20181105RequestDistributionConfigRestrictions - a model defined in OpenAPI

        :param geo_restriction: The geo_restriction of this CreateDistribution20181105RequestDistributionConfigRestrictions.
        """
        self.openapi_types = {
            'geo_restriction': GeoRestriction
        }

        self.attribute_map = {
            'geo_restriction': 'GeoRestriction'
        }

        self._geo_restriction = geo_restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDistribution20181105RequestDistributionConfigRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDistribution2018_11_05_request_DistributionConfig_Restrictions of this CreateDistribution20181105RequestDistributionConfigRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geo_restriction(self):
        """Gets the geo_restriction of this CreateDistribution20181105RequestDistributionConfigRestrictions.


        :return: The geo_restriction of this CreateDistribution20181105RequestDistributionConfigRestrictions.
        :rtype: GeoRestriction
        """
        return self._geo_restriction

    @geo_restriction.setter
    def geo_restriction(self, geo_restriction):
        """Sets the geo_restriction of this CreateDistribution20181105RequestDistributionConfigRestrictions.


        :param geo_restriction: The geo_restriction of this CreateDistribution20181105RequestDistributionConfigRestrictions.
        :type geo_restriction: GeoRestriction
        """
        if geo_restriction is None:
            raise ValueError("Invalid value for `geo_restriction`, must not be `None`")

        self._geo_restriction = geo_restriction
