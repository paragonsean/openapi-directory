# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_class import PriceClass
from openapi_server.models.streaming_distribution_summary_aliases import StreamingDistributionSummaryAliases
from openapi_server.models.streaming_distribution_summary_s3_origin import StreamingDistributionSummaryS3Origin
from openapi_server.models.streaming_distribution_summary_trusted_signers import StreamingDistributionSummaryTrustedSigners
from openapi_server import util


class StreamingDistributionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, status: str=None, last_modified_time: datetime=None, domain_name: str=None, s3_origin: StreamingDistributionSummaryS3Origin=None, aliases: StreamingDistributionSummaryAliases=None, trusted_signers: StreamingDistributionSummaryTrustedSigners=None, comment: str=None, price_class: PriceClass=None, enabled: bool=None):
        """StreamingDistributionSummary - a model defined in OpenAPI

        :param id: The id of this StreamingDistributionSummary.
        :param arn: The arn of this StreamingDistributionSummary.
        :param status: The status of this StreamingDistributionSummary.
        :param last_modified_time: The last_modified_time of this StreamingDistributionSummary.
        :param domain_name: The domain_name of this StreamingDistributionSummary.
        :param s3_origin: The s3_origin of this StreamingDistributionSummary.
        :param aliases: The aliases of this StreamingDistributionSummary.
        :param trusted_signers: The trusted_signers of this StreamingDistributionSummary.
        :param comment: The comment of this StreamingDistributionSummary.
        :param price_class: The price_class of this StreamingDistributionSummary.
        :param enabled: The enabled of this StreamingDistributionSummary.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'status': str,
            'last_modified_time': datetime,
            'domain_name': str,
            's3_origin': StreamingDistributionSummaryS3Origin,
            'aliases': StreamingDistributionSummaryAliases,
            'trusted_signers': StreamingDistributionSummaryTrustedSigners,
            'comment': str,
            'price_class': PriceClass,
            'enabled': bool
        }

        self.attribute_map = {
            'id': 'Id',
            'arn': 'ARN',
            'status': 'Status',
            'last_modified_time': 'LastModifiedTime',
            'domain_name': 'DomainName',
            's3_origin': 'S3Origin',
            'aliases': 'Aliases',
            'trusted_signers': 'TrustedSigners',
            'comment': 'Comment',
            'price_class': 'PriceClass',
            'enabled': 'Enabled'
        }

        self._id = id
        self._arn = arn
        self._status = status
        self._last_modified_time = last_modified_time
        self._domain_name = domain_name
        self._s3_origin = s3_origin
        self._aliases = aliases
        self._trusted_signers = trusted_signers
        self._comment = comment
        self._price_class = price_class
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingDistributionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingDistributionSummary of this StreamingDistributionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StreamingDistributionSummary.


        :return: The id of this StreamingDistributionSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamingDistributionSummary.


        :param id: The id of this StreamingDistributionSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this StreamingDistributionSummary.


        :return: The arn of this StreamingDistributionSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StreamingDistributionSummary.


        :param arn: The arn of this StreamingDistributionSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def status(self):
        """Gets the status of this StreamingDistributionSummary.


        :return: The status of this StreamingDistributionSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StreamingDistributionSummary.


        :param status: The status of this StreamingDistributionSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StreamingDistributionSummary.


        :return: The last_modified_time of this StreamingDistributionSummary.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StreamingDistributionSummary.


        :param last_modified_time: The last_modified_time of this StreamingDistributionSummary.
        :type last_modified_time: datetime
        """
        if last_modified_time is None:
            raise ValueError("Invalid value for `last_modified_time`, must not be `None`")

        self._last_modified_time = last_modified_time

    @property
    def domain_name(self):
        """Gets the domain_name of this StreamingDistributionSummary.


        :return: The domain_name of this StreamingDistributionSummary.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this StreamingDistributionSummary.


        :param domain_name: The domain_name of this StreamingDistributionSummary.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def s3_origin(self):
        """Gets the s3_origin of this StreamingDistributionSummary.


        :return: The s3_origin of this StreamingDistributionSummary.
        :rtype: StreamingDistributionSummaryS3Origin
        """
        return self._s3_origin

    @s3_origin.setter
    def s3_origin(self, s3_origin):
        """Sets the s3_origin of this StreamingDistributionSummary.


        :param s3_origin: The s3_origin of this StreamingDistributionSummary.
        :type s3_origin: StreamingDistributionSummaryS3Origin
        """
        if s3_origin is None:
            raise ValueError("Invalid value for `s3_origin`, must not be `None`")

        self._s3_origin = s3_origin

    @property
    def aliases(self):
        """Gets the aliases of this StreamingDistributionSummary.


        :return: The aliases of this StreamingDistributionSummary.
        :rtype: StreamingDistributionSummaryAliases
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this StreamingDistributionSummary.


        :param aliases: The aliases of this StreamingDistributionSummary.
        :type aliases: StreamingDistributionSummaryAliases
        """
        if aliases is None:
            raise ValueError("Invalid value for `aliases`, must not be `None`")

        self._aliases = aliases

    @property
    def trusted_signers(self):
        """Gets the trusted_signers of this StreamingDistributionSummary.


        :return: The trusted_signers of this StreamingDistributionSummary.
        :rtype: StreamingDistributionSummaryTrustedSigners
        """
        return self._trusted_signers

    @trusted_signers.setter
    def trusted_signers(self, trusted_signers):
        """Sets the trusted_signers of this StreamingDistributionSummary.


        :param trusted_signers: The trusted_signers of this StreamingDistributionSummary.
        :type trusted_signers: StreamingDistributionSummaryTrustedSigners
        """
        if trusted_signers is None:
            raise ValueError("Invalid value for `trusted_signers`, must not be `None`")

        self._trusted_signers = trusted_signers

    @property
    def comment(self):
        """Gets the comment of this StreamingDistributionSummary.


        :return: The comment of this StreamingDistributionSummary.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this StreamingDistributionSummary.


        :param comment: The comment of this StreamingDistributionSummary.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def price_class(self):
        """Gets the price_class of this StreamingDistributionSummary.


        :return: The price_class of this StreamingDistributionSummary.
        :rtype: PriceClass
        """
        return self._price_class

    @price_class.setter
    def price_class(self, price_class):
        """Sets the price_class of this StreamingDistributionSummary.


        :param price_class: The price_class of this StreamingDistributionSummary.
        :type price_class: PriceClass
        """
        if price_class is None:
            raise ValueError("Invalid value for `price_class`, must not be `None`")

        self._price_class = price_class

    @property
    def enabled(self):
        """Gets the enabled of this StreamingDistributionSummary.


        :return: The enabled of this StreamingDistributionSummary.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StreamingDistributionSummary.


        :param enabled: The enabled of this StreamingDistributionSummary.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
