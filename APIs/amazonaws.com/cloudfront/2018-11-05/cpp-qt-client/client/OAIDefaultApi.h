/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCloudFrontOriginAccessIdentity2018_11_05_request.h"
#include "OAICreateCloudFrontOriginAccessIdentityResult.h"
#include "OAICreateDistribution2018_11_05_request.h"
#include "OAICreateDistributionResult.h"
#include "OAICreateDistributionWithTags2018_11_05_request.h"
#include "OAICreateDistributionWithTagsResult.h"
#include "OAICreateFieldLevelEncryptionConfig2018_11_05_request.h"
#include "OAICreateFieldLevelEncryptionConfigResult.h"
#include "OAICreateFieldLevelEncryptionProfile2018_11_05_request.h"
#include "OAICreateFieldLevelEncryptionProfileResult.h"
#include "OAICreateInvalidation2018_11_05_request.h"
#include "OAICreateInvalidationResult.h"
#include "OAICreatePublicKey2018_11_05_request.h"
#include "OAICreatePublicKeyResult.h"
#include "OAICreateStreamingDistribution2018_11_05_request.h"
#include "OAICreateStreamingDistributionResult.h"
#include "OAICreateStreamingDistributionWithTags2018_11_05_request.h"
#include "OAICreateStreamingDistributionWithTagsResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityConfigResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityResult.h"
#include "OAIGetDistributionConfigResult.h"
#include "OAIGetDistributionResult.h"
#include "OAIGetFieldLevelEncryptionConfigResult.h"
#include "OAIGetFieldLevelEncryptionProfileConfigResult.h"
#include "OAIGetFieldLevelEncryptionProfileResult.h"
#include "OAIGetFieldLevelEncryptionResult.h"
#include "OAIGetInvalidationResult.h"
#include "OAIGetPublicKeyConfigResult.h"
#include "OAIGetPublicKeyResult.h"
#include "OAIGetStreamingDistributionConfigResult.h"
#include "OAIGetStreamingDistributionResult.h"
#include "OAIListCloudFrontOriginAccessIdentitiesResult.h"
#include "OAIListDistributionsByWebACLIdResult.h"
#include "OAIListDistributionsResult.h"
#include "OAIListFieldLevelEncryptionConfigsResult.h"
#include "OAIListFieldLevelEncryptionProfilesResult.h"
#include "OAIListInvalidationsResult.h"
#include "OAIListPublicKeysResult.h"
#include "OAIListStreamingDistributionsResult.h"
#include "OAIListTagsForResourceResult.h"
#include "OAITagResource2018_11_05_request.h"
#include "OAIUntagResource2018_11_05_request.h"
#include "OAIUpdateCloudFrontOriginAccessIdentityResult.h"
#include "OAIUpdateDistributionResult.h"
#include "OAIUpdateFieldLevelEncryptionConfigResult.h"
#include "OAIUpdateFieldLevelEncryptionProfileResult.h"
#include "OAIUpdatePublicKeyResult.h"
#include "OAIUpdateStreamingDistributionResult.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_cloud_front_origin_access_identity2018_11_05_request OAICreateCloudFrontOriginAccessIdentity2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCloudFrontOriginAccessIdentity20181105(const OAICreateCloudFrontOriginAccessIdentity2018_11_05_request &oai_create_cloud_front_origin_access_identity2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_distribution2018_11_05_request OAICreateDistribution2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistribution20181105(const OAICreateDistribution2018_11_05_request &oai_create_distribution2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_distribution_with_tags2018_11_05_request OAICreateDistributionWithTags2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistributionWithTags20181105(const bool &with_tags, const OAICreateDistributionWithTags2018_11_05_request &oai_create_distribution_with_tags2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_field_level_encryption_config2018_11_05_request OAICreateFieldLevelEncryptionConfig2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFieldLevelEncryptionConfig20181105(const OAICreateFieldLevelEncryptionConfig2018_11_05_request &oai_create_field_level_encryption_config2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_field_level_encryption_profile2018_11_05_request OAICreateFieldLevelEncryptionProfile2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFieldLevelEncryptionProfile20181105(const OAICreateFieldLevelEncryptionProfile2018_11_05_request &oai_create_field_level_encryption_profile2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  oai_create_invalidation2018_11_05_request OAICreateInvalidation2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInvalidation20181105(const QString &distribution_id, const OAICreateInvalidation2018_11_05_request &oai_create_invalidation2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_public_key2018_11_05_request OAICreatePublicKey2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPublicKey20181105(const OAICreatePublicKey2018_11_05_request &oai_create_public_key2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_streaming_distribution2018_11_05_request OAICreateStreamingDistribution2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistribution20181105(const OAICreateStreamingDistribution2018_11_05_request &oai_create_streaming_distribution2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_streaming_distribution_with_tags2018_11_05_request OAICreateStreamingDistributionWithTags2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistributionWithTags20181105(const bool &with_tags, const OAICreateStreamingDistributionWithTags2018_11_05_request &oai_create_streaming_distribution_with_tags2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteCloudFrontOriginAccessIdentity20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteDistribution20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteFieldLevelEncryptionConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteFieldLevelEncryptionProfile20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deletePublicKey20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteStreamingDistribution20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentity20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentityConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistribution20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistributionConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryption20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionProfile20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionProfileConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInvalidation20181105(const QString &distribution_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicKey20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicKeyConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistribution20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistributionConfig20181105(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listCloudFrontOriginAccessIdentities20181105(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributions20181105(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_aclid QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributionsByWebACLId20181105(const QString &web_aclid, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listFieldLevelEncryptionConfigs20181105(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listFieldLevelEncryptionProfiles20181105(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listInvalidations20181105(const QString &distribution_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listPublicKeys20181105(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listStreamingDistributions20181105(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource20181105(const QString &resource, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_resource2018_11_05_request OAITagResource2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource20181105(const QString &resource, const QString &operation, const OAITagResource2018_11_05_request &oai_tag_resource2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_resource2018_11_05_request OAIUntagResource2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource20181105(const QString &resource, const QString &operation, const OAIUntagResource2018_11_05_request &oai_untag_resource2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_cloud_front_origin_access_identity2018_11_05_request OAICreateCloudFrontOriginAccessIdentity2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateCloudFrontOriginAccessIdentity20181105(const QString &id, const OAICreateCloudFrontOriginAccessIdentity2018_11_05_request &oai_create_cloud_front_origin_access_identity2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_distribution2018_11_05_request OAICreateDistribution2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateDistribution20181105(const QString &id, const OAICreateDistribution2018_11_05_request &oai_create_distribution2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_field_level_encryption_config2018_11_05_request OAICreateFieldLevelEncryptionConfig2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateFieldLevelEncryptionConfig20181105(const QString &id, const OAICreateFieldLevelEncryptionConfig2018_11_05_request &oai_create_field_level_encryption_config2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_field_level_encryption_profile2018_11_05_request OAICreateFieldLevelEncryptionProfile2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateFieldLevelEncryptionProfile20181105(const QString &id, const OAICreateFieldLevelEncryptionProfile2018_11_05_request &oai_create_field_level_encryption_profile2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_public_key2018_11_05_request OAICreatePublicKey2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updatePublicKey20181105(const QString &id, const OAICreatePublicKey2018_11_05_request &oai_create_public_key2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_streaming_distribution2018_11_05_request OAICreateStreamingDistribution2018_11_05_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateStreamingDistribution20181105(const QString &id, const OAICreateStreamingDistribution2018_11_05_request &oai_create_streaming_distribution2018_11_05_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCloudFrontOriginAccessIdentity20181105Callback(OAIHttpRequestWorker *worker);
    void createDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void createDistributionWithTags20181105Callback(OAIHttpRequestWorker *worker);
    void createFieldLevelEncryptionConfig20181105Callback(OAIHttpRequestWorker *worker);
    void createFieldLevelEncryptionProfile20181105Callback(OAIHttpRequestWorker *worker);
    void createInvalidation20181105Callback(OAIHttpRequestWorker *worker);
    void createPublicKey20181105Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistributionWithTags20181105Callback(OAIHttpRequestWorker *worker);
    void deleteCloudFrontOriginAccessIdentity20181105Callback(OAIHttpRequestWorker *worker);
    void deleteDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionConfig20181105Callback(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionProfile20181105Callback(OAIHttpRequestWorker *worker);
    void deletePublicKey20181105Callback(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20181105Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentityConfig20181105Callback(OAIHttpRequestWorker *worker);
    void getDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void getDistributionConfig20181105Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryption20181105Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionConfig20181105Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionProfile20181105Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionProfileConfig20181105Callback(OAIHttpRequestWorker *worker);
    void getInvalidation20181105Callback(OAIHttpRequestWorker *worker);
    void getPublicKey20181105Callback(OAIHttpRequestWorker *worker);
    void getPublicKeyConfig20181105Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistributionConfig20181105Callback(OAIHttpRequestWorker *worker);
    void listCloudFrontOriginAccessIdentities20181105Callback(OAIHttpRequestWorker *worker);
    void listDistributions20181105Callback(OAIHttpRequestWorker *worker);
    void listDistributionsByWebACLId20181105Callback(OAIHttpRequestWorker *worker);
    void listFieldLevelEncryptionConfigs20181105Callback(OAIHttpRequestWorker *worker);
    void listFieldLevelEncryptionProfiles20181105Callback(OAIHttpRequestWorker *worker);
    void listInvalidations20181105Callback(OAIHttpRequestWorker *worker);
    void listPublicKeys20181105Callback(OAIHttpRequestWorker *worker);
    void listStreamingDistributions20181105Callback(OAIHttpRequestWorker *worker);
    void listTagsForResource20181105Callback(OAIHttpRequestWorker *worker);
    void tagResource20181105Callback(OAIHttpRequestWorker *worker);
    void untagResource20181105Callback(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20181105Callback(OAIHttpRequestWorker *worker);
    void updateDistribution20181105Callback(OAIHttpRequestWorker *worker);
    void updateFieldLevelEncryptionConfig20181105Callback(OAIHttpRequestWorker *worker);
    void updateFieldLevelEncryptionProfile20181105Callback(OAIHttpRequestWorker *worker);
    void updatePublicKey20181105Callback(OAIHttpRequestWorker *worker);
    void updateStreamingDistribution20181105Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCloudFrontOriginAccessIdentity20181105Signal(OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20181105Signal(OAICreateDistributionResult summary);
    void createDistributionWithTags20181105Signal(OAICreateDistributionWithTagsResult summary);
    void createFieldLevelEncryptionConfig20181105Signal(OAICreateFieldLevelEncryptionConfigResult summary);
    void createFieldLevelEncryptionProfile20181105Signal(OAICreateFieldLevelEncryptionProfileResult summary);
    void createInvalidation20181105Signal(OAICreateInvalidationResult summary);
    void createPublicKey20181105Signal(OAICreatePublicKeyResult summary);
    void createStreamingDistribution20181105Signal(OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20181105Signal(OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20181105Signal();
    void deleteDistribution20181105Signal();
    void deleteFieldLevelEncryptionConfig20181105Signal();
    void deleteFieldLevelEncryptionProfile20181105Signal();
    void deletePublicKey20181105Signal();
    void deleteStreamingDistribution20181105Signal();
    void getCloudFrontOriginAccessIdentity20181105Signal(OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20181105Signal(OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20181105Signal(OAIGetDistributionResult summary);
    void getDistributionConfig20181105Signal(OAIGetDistributionConfigResult summary);
    void getFieldLevelEncryption20181105Signal(OAIGetFieldLevelEncryptionResult summary);
    void getFieldLevelEncryptionConfig20181105Signal(OAIGetFieldLevelEncryptionConfigResult summary);
    void getFieldLevelEncryptionProfile20181105Signal(OAIGetFieldLevelEncryptionProfileResult summary);
    void getFieldLevelEncryptionProfileConfig20181105Signal(OAIGetFieldLevelEncryptionProfileConfigResult summary);
    void getInvalidation20181105Signal(OAIGetInvalidationResult summary);
    void getPublicKey20181105Signal(OAIGetPublicKeyResult summary);
    void getPublicKeyConfig20181105Signal(OAIGetPublicKeyConfigResult summary);
    void getStreamingDistribution20181105Signal(OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20181105Signal(OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20181105Signal(OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20181105Signal(OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20181105Signal(OAIListDistributionsByWebACLIdResult summary);
    void listFieldLevelEncryptionConfigs20181105Signal(OAIListFieldLevelEncryptionConfigsResult summary);
    void listFieldLevelEncryptionProfiles20181105Signal(OAIListFieldLevelEncryptionProfilesResult summary);
    void listInvalidations20181105Signal(OAIListInvalidationsResult summary);
    void listPublicKeys20181105Signal(OAIListPublicKeysResult summary);
    void listStreamingDistributions20181105Signal(OAIListStreamingDistributionsResult summary);
    void listTagsForResource20181105Signal(OAIListTagsForResourceResult summary);
    void tagResource20181105Signal();
    void untagResource20181105Signal();
    void updateCloudFrontOriginAccessIdentity20181105Signal(OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20181105Signal(OAIUpdateDistributionResult summary);
    void updateFieldLevelEncryptionConfig20181105Signal(OAIUpdateFieldLevelEncryptionConfigResult summary);
    void updateFieldLevelEncryptionProfile20181105Signal(OAIUpdateFieldLevelEncryptionProfileResult summary);
    void updatePublicKey20181105Signal(OAIUpdatePublicKeyResult summary);
    void updateStreamingDistribution20181105Signal(OAIUpdateStreamingDistributionResult summary);


    void createCloudFrontOriginAccessIdentity20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionResult summary);
    void createDistributionWithTags20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionWithTagsResult summary);
    void createFieldLevelEncryptionConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateFieldLevelEncryptionConfigResult summary);
    void createFieldLevelEncryptionProfile20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateFieldLevelEncryptionProfileResult summary);
    void createInvalidation20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateInvalidationResult summary);
    void createPublicKey20181105SignalFull(OAIHttpRequestWorker *worker, OAICreatePublicKeyResult summary);
    void createStreamingDistribution20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20181105SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20181105SignalFull(OAIHttpRequestWorker *worker);
    void deleteDistribution20181105SignalFull(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionConfig20181105SignalFull(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionProfile20181105SignalFull(OAIHttpRequestWorker *worker);
    void deletePublicKey20181105SignalFull(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20181105SignalFull(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionResult summary);
    void getDistributionConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionConfigResult summary);
    void getFieldLevelEncryption20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionResult summary);
    void getFieldLevelEncryptionConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionConfigResult summary);
    void getFieldLevelEncryptionProfile20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionProfileResult summary);
    void getFieldLevelEncryptionProfileConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionProfileConfigResult summary);
    void getInvalidation20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetInvalidationResult summary);
    void getPublicKey20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetPublicKeyResult summary);
    void getPublicKeyConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetPublicKeyConfigResult summary);
    void getStreamingDistribution20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20181105SignalFull(OAIHttpRequestWorker *worker, OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20181105SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20181105SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsByWebACLIdResult summary);
    void listFieldLevelEncryptionConfigs20181105SignalFull(OAIHttpRequestWorker *worker, OAIListFieldLevelEncryptionConfigsResult summary);
    void listFieldLevelEncryptionProfiles20181105SignalFull(OAIHttpRequestWorker *worker, OAIListFieldLevelEncryptionProfilesResult summary);
    void listInvalidations20181105SignalFull(OAIHttpRequestWorker *worker, OAIListInvalidationsResult summary);
    void listPublicKeys20181105SignalFull(OAIHttpRequestWorker *worker, OAIListPublicKeysResult summary);
    void listStreamingDistributions20181105SignalFull(OAIHttpRequestWorker *worker, OAIListStreamingDistributionsResult summary);
    void listTagsForResource20181105SignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResult summary);
    void tagResource20181105SignalFull(OAIHttpRequestWorker *worker);
    void untagResource20181105SignalFull(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20181105SignalFull(OAIHttpRequestWorker *worker, OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20181105SignalFull(OAIHttpRequestWorker *worker, OAIUpdateDistributionResult summary);
    void updateFieldLevelEncryptionConfig20181105SignalFull(OAIHttpRequestWorker *worker, OAIUpdateFieldLevelEncryptionConfigResult summary);
    void updateFieldLevelEncryptionProfile20181105SignalFull(OAIHttpRequestWorker *worker, OAIUpdateFieldLevelEncryptionProfileResult summary);
    void updatePublicKey20181105SignalFull(OAIHttpRequestWorker *worker, OAIUpdatePublicKeyResult summary);
    void updateStreamingDistribution20181105SignalFull(OAIHttpRequestWorker *worker, OAIUpdateStreamingDistributionResult summary);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20181105SignalError() instead")
    void createCloudFrontOriginAccessIdentity20181105SignalE(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20181105SignalError(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20181105SignalError() instead")
    void createDistribution20181105SignalE(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20181105SignalError(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20181105SignalError() instead")
    void createDistributionWithTags20181105SignalE(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20181105SignalError(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionConfig20181105SignalError() instead")
    void createFieldLevelEncryptionConfig20181105SignalE(OAICreateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionConfig20181105SignalError(OAICreateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionProfile20181105SignalError() instead")
    void createFieldLevelEncryptionProfile20181105SignalE(OAICreateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionProfile20181105SignalError(OAICreateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20181105SignalError() instead")
    void createInvalidation20181105SignalE(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20181105SignalError(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPublicKey20181105SignalError() instead")
    void createPublicKey20181105SignalE(OAICreatePublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPublicKey20181105SignalError(OAICreatePublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20181105SignalError() instead")
    void createStreamingDistribution20181105SignalE(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20181105SignalError(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20181105SignalError() instead")
    void createStreamingDistributionWithTags20181105SignalE(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20181105SignalError(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20181105SignalError() instead")
    void deleteCloudFrontOriginAccessIdentity20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20181105SignalError() instead")
    void deleteDistribution20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionConfig20181105SignalError() instead")
    void deleteFieldLevelEncryptionConfig20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionConfig20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionProfile20181105SignalError() instead")
    void deleteFieldLevelEncryptionProfile20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionProfile20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicKey20181105SignalError() instead")
    void deletePublicKey20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKey20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20181105SignalError() instead")
    void deleteStreamingDistribution20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20181105SignalError() instead")
    void getCloudFrontOriginAccessIdentity20181105SignalE(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20181105SignalError(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20181105SignalError() instead")
    void getCloudFrontOriginAccessIdentityConfig20181105SignalE(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20181105SignalError(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20181105SignalError() instead")
    void getDistribution20181105SignalE(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20181105SignalError(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20181105SignalError() instead")
    void getDistributionConfig20181105SignalE(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20181105SignalError(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryption20181105SignalError() instead")
    void getFieldLevelEncryption20181105SignalE(OAIGetFieldLevelEncryptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryption20181105SignalError(OAIGetFieldLevelEncryptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionConfig20181105SignalError() instead")
    void getFieldLevelEncryptionConfig20181105SignalE(OAIGetFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionConfig20181105SignalError(OAIGetFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfile20181105SignalError() instead")
    void getFieldLevelEncryptionProfile20181105SignalE(OAIGetFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfile20181105SignalError(OAIGetFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfileConfig20181105SignalError() instead")
    void getFieldLevelEncryptionProfileConfig20181105SignalE(OAIGetFieldLevelEncryptionProfileConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfileConfig20181105SignalError(OAIGetFieldLevelEncryptionProfileConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20181105SignalError() instead")
    void getInvalidation20181105SignalE(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20181105SignalError(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKey20181105SignalError() instead")
    void getPublicKey20181105SignalE(OAIGetPublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKey20181105SignalError(OAIGetPublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeyConfig20181105SignalError() instead")
    void getPublicKeyConfig20181105SignalE(OAIGetPublicKeyConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeyConfig20181105SignalError(OAIGetPublicKeyConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20181105SignalError() instead")
    void getStreamingDistribution20181105SignalE(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20181105SignalError(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20181105SignalError() instead")
    void getStreamingDistributionConfig20181105SignalE(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20181105SignalError(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20181105SignalError() instead")
    void listCloudFrontOriginAccessIdentities20181105SignalE(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20181105SignalError(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20181105SignalError() instead")
    void listDistributions20181105SignalE(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20181105SignalError(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20181105SignalError() instead")
    void listDistributionsByWebACLId20181105SignalE(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20181105SignalError(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionConfigs20181105SignalError() instead")
    void listFieldLevelEncryptionConfigs20181105SignalE(OAIListFieldLevelEncryptionConfigsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionConfigs20181105SignalError(OAIListFieldLevelEncryptionConfigsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionProfiles20181105SignalError() instead")
    void listFieldLevelEncryptionProfiles20181105SignalE(OAIListFieldLevelEncryptionProfilesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionProfiles20181105SignalError(OAIListFieldLevelEncryptionProfilesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20181105SignalError() instead")
    void listInvalidations20181105SignalE(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20181105SignalError(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicKeys20181105SignalError() instead")
    void listPublicKeys20181105SignalE(OAIListPublicKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicKeys20181105SignalError(OAIListPublicKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20181105SignalError() instead")
    void listStreamingDistributions20181105SignalE(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20181105SignalError(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20181105SignalError() instead")
    void listTagsForResource20181105SignalE(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20181105SignalError(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20181105SignalError() instead")
    void tagResource20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20181105SignalError() instead")
    void untagResource20181105SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20181105SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20181105SignalError() instead")
    void updateCloudFrontOriginAccessIdentity20181105SignalE(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20181105SignalError(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20181105SignalError() instead")
    void updateDistribution20181105SignalE(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20181105SignalError(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionConfig20181105SignalError() instead")
    void updateFieldLevelEncryptionConfig20181105SignalE(OAIUpdateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionConfig20181105SignalError(OAIUpdateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionProfile20181105SignalError() instead")
    void updateFieldLevelEncryptionProfile20181105SignalE(OAIUpdateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionProfile20181105SignalError(OAIUpdateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicKey20181105SignalError() instead")
    void updatePublicKey20181105SignalE(OAIUpdatePublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicKey20181105SignalError(OAIUpdatePublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20181105SignalError() instead")
    void updateStreamingDistribution20181105SignalE(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20181105SignalError(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20181105SignalErrorFull() instead")
    void createCloudFrontOriginAccessIdentity20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20181105SignalErrorFull() instead")
    void createDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20181105SignalErrorFull() instead")
    void createDistributionWithTags20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionConfig20181105SignalErrorFull() instead")
    void createFieldLevelEncryptionConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionProfile20181105SignalErrorFull() instead")
    void createFieldLevelEncryptionProfile20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionProfile20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20181105SignalErrorFull() instead")
    void createInvalidation20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPublicKey20181105SignalErrorFull() instead")
    void createPublicKey20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPublicKey20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20181105SignalErrorFull() instead")
    void createStreamingDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20181105SignalErrorFull() instead")
    void createStreamingDistributionWithTags20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20181105SignalErrorFull() instead")
    void deleteCloudFrontOriginAccessIdentity20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20181105SignalErrorFull() instead")
    void deleteDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionConfig20181105SignalErrorFull() instead")
    void deleteFieldLevelEncryptionConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionProfile20181105SignalErrorFull() instead")
    void deleteFieldLevelEncryptionProfile20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionProfile20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicKey20181105SignalErrorFull() instead")
    void deletePublicKey20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKey20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20181105SignalErrorFull() instead")
    void deleteStreamingDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20181105SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentity20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20181105SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentityConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20181105SignalErrorFull() instead")
    void getDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20181105SignalErrorFull() instead")
    void getDistributionConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryption20181105SignalErrorFull() instead")
    void getFieldLevelEncryption20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryption20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionConfig20181105SignalErrorFull() instead")
    void getFieldLevelEncryptionConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfile20181105SignalErrorFull() instead")
    void getFieldLevelEncryptionProfile20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfile20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfileConfig20181105SignalErrorFull() instead")
    void getFieldLevelEncryptionProfileConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfileConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20181105SignalErrorFull() instead")
    void getInvalidation20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKey20181105SignalErrorFull() instead")
    void getPublicKey20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKey20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeyConfig20181105SignalErrorFull() instead")
    void getPublicKeyConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeyConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20181105SignalErrorFull() instead")
    void getStreamingDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20181105SignalErrorFull() instead")
    void getStreamingDistributionConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20181105SignalErrorFull() instead")
    void listCloudFrontOriginAccessIdentities20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20181105SignalErrorFull() instead")
    void listDistributions20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20181105SignalErrorFull() instead")
    void listDistributionsByWebACLId20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionConfigs20181105SignalErrorFull() instead")
    void listFieldLevelEncryptionConfigs20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionConfigs20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionProfiles20181105SignalErrorFull() instead")
    void listFieldLevelEncryptionProfiles20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionProfiles20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20181105SignalErrorFull() instead")
    void listInvalidations20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicKeys20181105SignalErrorFull() instead")
    void listPublicKeys20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicKeys20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20181105SignalErrorFull() instead")
    void listStreamingDistributions20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20181105SignalErrorFull() instead")
    void listTagsForResource20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20181105SignalErrorFull() instead")
    void tagResource20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20181105SignalErrorFull() instead")
    void untagResource20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20181105SignalErrorFull() instead")
    void updateCloudFrontOriginAccessIdentity20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20181105SignalErrorFull() instead")
    void updateDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionConfig20181105SignalErrorFull() instead")
    void updateFieldLevelEncryptionConfig20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionConfig20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionProfile20181105SignalErrorFull() instead")
    void updateFieldLevelEncryptionProfile20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionProfile20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicKey20181105SignalErrorFull() instead")
    void updatePublicKey20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicKey20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20181105SignalErrorFull() instead")
    void updateStreamingDistribution20181105SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20181105SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
