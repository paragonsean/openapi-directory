/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvalidationBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvalidationBatch::OAIInvalidationBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvalidationBatch::OAIInvalidationBatch() {
    this->initializeModel();
}

OAIInvalidationBatch::~OAIInvalidationBatch() {}

void OAIInvalidationBatch::initializeModel() {

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_caller_reference_isSet = false;
    m_caller_reference_isValid = false;
}

void OAIInvalidationBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvalidationBatch::fromJsonObject(QJsonObject json) {

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_caller_reference_isValid = ::OpenAPI::fromJsonValue(m_caller_reference, json[QString("CallerReference")]);
    m_caller_reference_isSet = !json[QString("CallerReference")].isNull() && m_caller_reference_isValid;
}

QString OAIInvalidationBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvalidationBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_paths.isSet()) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_caller_reference_isSet) {
        obj.insert(QString("CallerReference"), ::OpenAPI::toJsonValue(m_caller_reference));
    }
    return obj;
}

OAICreateInvalidation2018_11_05_request_InvalidationBatch_Paths OAIInvalidationBatch::getPaths() const {
    return m_paths;
}
void OAIInvalidationBatch::setPaths(const OAICreateInvalidation2018_11_05_request_InvalidationBatch_Paths &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIInvalidationBatch::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIInvalidationBatch::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAIInvalidationBatch::getCallerReference() const {
    return m_caller_reference;
}
void OAIInvalidationBatch::setCallerReference(const QString &caller_reference) {
    m_caller_reference = caller_reference;
    m_caller_reference_isSet = true;
}

bool OAIInvalidationBatch::is_caller_reference_Set() const{
    return m_caller_reference_isSet;
}

bool OAIInvalidationBatch::is_caller_reference_Valid() const{
    return m_caller_reference_isValid;
}

bool OAIInvalidationBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvalidationBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_paths_isValid && m_caller_reference_isValid && true;
}

} // namespace OpenAPI
