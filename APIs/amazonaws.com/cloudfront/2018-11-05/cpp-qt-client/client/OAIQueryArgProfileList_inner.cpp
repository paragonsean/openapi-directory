/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryArgProfileList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryArgProfileList_inner::OAIQueryArgProfileList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryArgProfileList_inner::OAIQueryArgProfileList_inner() {
    this->initializeModel();
}

OAIQueryArgProfileList_inner::~OAIQueryArgProfileList_inner() {}

void OAIQueryArgProfileList_inner::initializeModel() {

    m_query_arg_isSet = false;
    m_query_arg_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;
}

void OAIQueryArgProfileList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryArgProfileList_inner::fromJsonObject(QJsonObject json) {

    m_query_arg_isValid = ::OpenAPI::fromJsonValue(m_query_arg, json[QString("QueryArg")]);
    m_query_arg_isSet = !json[QString("QueryArg")].isNull() && m_query_arg_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("ProfileId")]);
    m_profile_id_isSet = !json[QString("ProfileId")].isNull() && m_profile_id_isValid;
}

QString OAIQueryArgProfileList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryArgProfileList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_query_arg_isSet) {
        obj.insert(QString("QueryArg"), ::OpenAPI::toJsonValue(m_query_arg));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("ProfileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    return obj;
}

QString OAIQueryArgProfileList_inner::getQueryArg() const {
    return m_query_arg;
}
void OAIQueryArgProfileList_inner::setQueryArg(const QString &query_arg) {
    m_query_arg = query_arg;
    m_query_arg_isSet = true;
}

bool OAIQueryArgProfileList_inner::is_query_arg_Set() const{
    return m_query_arg_isSet;
}

bool OAIQueryArgProfileList_inner::is_query_arg_Valid() const{
    return m_query_arg_isValid;
}

QString OAIQueryArgProfileList_inner::getProfileId() const {
    return m_profile_id;
}
void OAIQueryArgProfileList_inner::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIQueryArgProfileList_inner::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIQueryArgProfileList_inner::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

bool OAIQueryArgProfileList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_arg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryArgProfileList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_arg_isValid && m_profile_id_isValid && true;
}

} // namespace OpenAPI
