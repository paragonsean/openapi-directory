/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentity20181105Request;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.CreateDistribution20181105Request;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDistributionWithTags20181105Request;
import org.openapitools.client.model.CreateDistributionWithTagsResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfig20181105Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfile20181105Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.CreateInvalidation20181105Request;
import org.openapitools.client.model.CreateInvalidationResult;
import org.openapitools.client.model.CreatePublicKey20181105Request;
import org.openapitools.client.model.CreatePublicKeyResult;
import org.openapitools.client.model.CreateStreamingDistribution20181105Request;
import org.openapitools.client.model.CreateStreamingDistributionResult;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20181105Request;
import org.openapitools.client.model.CreateStreamingDistributionWithTagsResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityConfigResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.GetDistributionConfigResult;
import org.openapitools.client.model.GetDistributionResult;
import org.openapitools.client.model.GetFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.GetFieldLevelEncryptionResult;
import org.openapitools.client.model.GetInvalidationResult;
import org.openapitools.client.model.GetPublicKeyConfigResult;
import org.openapitools.client.model.GetPublicKeyResult;
import org.openapitools.client.model.GetStreamingDistributionConfigResult;
import org.openapitools.client.model.GetStreamingDistributionResult;
import org.openapitools.client.model.ListCloudFrontOriginAccessIdentitiesResult;
import org.openapitools.client.model.ListDistributionsByWebACLIdResult;
import org.openapitools.client.model.ListDistributionsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionConfigsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionProfilesResult;
import org.openapitools.client.model.ListInvalidationsResult;
import org.openapitools.client.model.ListPublicKeysResult;
import org.openapitools.client.model.ListStreamingDistributionsResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.TagResource20181105Request;
import org.openapitools.client.model.UntagResource20181105Request;
import org.openapitools.client.model.UpdateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.UpdatePublicKeyResult;
import org.openapitools.client.model.UpdateStreamingDistributionResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCloudFrontOriginAccessIdentity20181105Test() throws ApiException {
        CreateCloudFrontOriginAccessIdentity20181105Request createCloudFrontOriginAccessIdentity20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCloudFrontOriginAccessIdentityResult response = api.createCloudFrontOriginAccessIdentity20181105(createCloudFrontOriginAccessIdentity20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new web distribution. You create a CloudFront distribution to tell CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery. Send a &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using &lt;a&gt;UpdateDistribution&lt;/a&gt;, follow the steps included in the documentation to get the current configuration and then make your updates. This helps to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you are using Adobe Flash Media Server&#39;s RTMP protocol, you set up a different kind of CloudFront distribution. For more information, see &lt;a&gt;CreateStreamingDistribution&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistribution20181105Test() throws ApiException {
        CreateDistribution20181105Request createDistribution20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionResult response = api.createDistribution20181105(createDistribution20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new distribution with tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistributionWithTags20181105Test() throws ApiException {
        Boolean withTags = null;
        CreateDistributionWithTags20181105Request createDistributionWithTags20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionWithTagsResult response = api.createDistributionWithTags20181105(withTags, createDistributionWithTags20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new field-level encryption configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFieldLevelEncryptionConfig20181105Test() throws ApiException {
        CreateFieldLevelEncryptionConfig20181105Request createFieldLevelEncryptionConfig20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFieldLevelEncryptionConfigResult response = api.createFieldLevelEncryptionConfig20181105(createFieldLevelEncryptionConfig20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a field-level encryption profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFieldLevelEncryptionProfile20181105Test() throws ApiException {
        CreateFieldLevelEncryptionProfile20181105Request createFieldLevelEncryptionProfile20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFieldLevelEncryptionProfileResult response = api.createFieldLevelEncryptionProfile20181105(createFieldLevelEncryptionProfile20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new invalidation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvalidation20181105Test() throws ApiException {
        String distributionId = null;
        CreateInvalidation20181105Request createInvalidation20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInvalidationResult response = api.createInvalidation20181105(distributionId, createInvalidation20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add a new public key to CloudFront to use, for example, for field-level encryption. You can add a maximum of 10 public keys with one AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPublicKey20181105Test() throws ApiException {
        CreatePublicKey20181105Request createPublicKey20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePublicKeyResult response = api.createPublicKey20181105(createPublicKey20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new web distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingDistribution20181105Test() throws ApiException {
        CreateStreamingDistribution20181105Request createStreamingDistribution20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingDistributionResult response = api.createStreamingDistribution20181105(createStreamingDistribution20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a new streaming distribution with tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingDistributionWithTags20181105Test() throws ApiException {
        Boolean withTags = null;
        CreateStreamingDistributionWithTags20181105Request createStreamingDistributionWithTags20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingDistributionWithTagsResult response = api.createStreamingDistributionWithTags20181105(withTags, createStreamingDistributionWithTags20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCloudFrontOriginAccessIdentity20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteCloudFrontOriginAccessIdentity20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete a distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDistribution20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteDistribution20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Remove a field-level encryption configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldLevelEncryptionConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteFieldLevelEncryptionConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Remove a field-level encryption profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldLevelEncryptionProfile20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteFieldLevelEncryptionProfile20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Remove a public key you previously added to CloudFront.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePublicKey20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deletePublicKey20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStreamingDistribution20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        api.deleteStreamingDistribution20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Get the information about an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFrontOriginAccessIdentity20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFrontOriginAccessIdentityResult response = api.getCloudFrontOriginAccessIdentity20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFrontOriginAccessIdentityConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFrontOriginAccessIdentityConfigResult response = api.getCloudFrontOriginAccessIdentityConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about a distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistribution20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionResult response = api.getDistribution20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about a distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionConfigResult response = api.getDistributionConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption configuration information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryption20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionResult response = api.getFieldLevelEncryption20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption configuration information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryptionConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionConfigResult response = api.getFieldLevelEncryptionConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption profile information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryptionProfile20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionProfileResult response = api.getFieldLevelEncryptionProfile20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the field-level encryption profile configuration information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldLevelEncryptionProfileConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFieldLevelEncryptionProfileConfigResult response = api.getFieldLevelEncryptionProfileConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the information about an invalidation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvalidation20181105Test() throws ApiException {
        String distributionId = null;
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInvalidationResult response = api.getInvalidation20181105(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the public key information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKey20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPublicKeyResult response = api.getPublicKey20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Return public key configuration informaation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKeyConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPublicKeyConfigResult response = api.getPublicKeyConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingDistribution20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingDistributionResult response = api.getStreamingDistribution20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the configuration information about a streaming distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamingDistributionConfig20181105Test() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStreamingDistributionConfigResult response = api.getStreamingDistributionConfig20181105(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists origin access identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCloudFrontOriginAccessIdentities20181105Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListCloudFrontOriginAccessIdentitiesResult response = api.listCloudFrontOriginAccessIdentities20181105(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List distributions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributions20181105Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsResult response = api.listDistributions20181105(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributionsByWebACLId20181105Test() throws ApiException {
        String webACLId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListDistributionsByWebACLIdResult response = api.listDistributionsByWebACLId20181105(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFieldLevelEncryptionConfigs20181105Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListFieldLevelEncryptionConfigsResult response = api.listFieldLevelEncryptionConfigs20181105(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFieldLevelEncryptionProfiles20181105Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListFieldLevelEncryptionProfilesResult response = api.listFieldLevelEncryptionProfiles20181105(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * Lists invalidation batches. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvalidations20181105Test() throws ApiException {
        String distributionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListInvalidationsResult response = api.listInvalidations20181105(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List all public keys that have been added to CloudFront for this account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPublicKeys20181105Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListPublicKeysResult response = api.listPublicKeys20181105(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List streaming distributions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStreamingDistributions20181105Test() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String marker = null;
        String maxItems = null;
        ListStreamingDistributionsResult response = api.listStreamingDistributions20181105(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        // TODO: test validations
    }

    /**
     * List tags for a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResource20181105Test() throws ApiException {
        String resource = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResult response = api.listTagsForResource20181105(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add tags to a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResource20181105Test() throws ApiException {
        String resource = null;
        String operation = null;
        TagResource20181105Request tagResource20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource20181105(resource, operation, tagResource20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove tags from a CloudFront resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResource20181105Test() throws ApiException {
        String resource = null;
        String operation = null;
        UntagResource20181105Request untagResource20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource20181105(resource, operation, untagResource20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update an origin access identity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCloudFrontOriginAccessIdentity20181105Test() throws ApiException {
        String id = null;
        CreateCloudFrontOriginAccessIdentity20181105Request createCloudFrontOriginAccessIdentity20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateCloudFrontOriginAccessIdentityResult response = api.updateCloudFrontOriginAccessIdentity20181105(id, createCloudFrontOriginAccessIdentity20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the configuration for a web distribution. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using this API action, follow the steps here to get the current configuration and then make your updates, to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating the XML document that is returned to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt;For information about updating a distribution using the CloudFront console instead, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html\&quot;&gt;Creating a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a&gt;GetDistributionConfig&lt;/a&gt; request to get the current configuration and an &lt;code&gt;Etag&lt;/code&gt; header for the distribution.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you update the distribution again, you must get a new &lt;code&gt;Etag&lt;/code&gt; header.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GetDistributionConfig&lt;/code&gt; request to include your changes. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you edit the XML file, be aware of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must strip out the ETag parameter that is returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Additional fields are required when you update a distribution. There may be fields included in the XML file for features that you haven&#39;t configured for your distribution. This is expected and required to successfully update the distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;. If you try to change this value, CloudFront returns an &lt;code&gt;IllegalUpdate&lt;/code&gt; error. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The new configuration replaces the existing configuration; the values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, &lt;code&gt;CNAME&lt;/code&gt;), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding &lt;code&gt;Quantity&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to update the configuration for your distribution:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a &lt;code&gt;DistributionConfig&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GetDistributionConfig&lt;/code&gt; request in Step 1.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;UpdateDistribution&lt;/code&gt; request to confirm that the configuration was successfully updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optional: Submit a &lt;a&gt;GetDistribution&lt;/a&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistribution20181105Test() throws ApiException {
        String id = null;
        CreateDistribution20181105Request createDistribution20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateDistributionResult response = api.updateDistribution20181105(id, createDistribution20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a field-level encryption configuration. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldLevelEncryptionConfig20181105Test() throws ApiException {
        String id = null;
        CreateFieldLevelEncryptionConfig20181105Request createFieldLevelEncryptionConfig20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateFieldLevelEncryptionConfigResult response = api.updateFieldLevelEncryptionConfig20181105(id, createFieldLevelEncryptionConfig20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a field-level encryption profile. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldLevelEncryptionProfile20181105Test() throws ApiException {
        String id = null;
        CreateFieldLevelEncryptionProfile20181105Request createFieldLevelEncryptionProfile20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateFieldLevelEncryptionProfileResult response = api.updateFieldLevelEncryptionProfile20181105(id, createFieldLevelEncryptionProfile20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update public key information. Note that the only value you can change is the comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePublicKey20181105Test() throws ApiException {
        String id = null;
        CreatePublicKey20181105Request createPublicKey20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdatePublicKeyResult response = api.updatePublicKey20181105(id, createPublicKey20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

    /**
     * Update a streaming distribution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStreamingDistribution20181105Test() throws ApiException {
        String id = null;
        CreateStreamingDistribution20181105Request createStreamingDistribution20181105Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ifMatch = null;
        UpdateStreamingDistributionResult response = api.updateStreamingDistribution20181105(id, createStreamingDistribution20181105Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        // TODO: test validations
    }

}
