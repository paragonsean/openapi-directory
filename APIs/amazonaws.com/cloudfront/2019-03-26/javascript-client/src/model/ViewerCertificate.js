/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateSource from './CertificateSource';
import MinimumProtocolVersion from './MinimumProtocolVersion';
import SSLSupportMethod from './SSLSupportMethod';

/**
 * The ViewerCertificate model module.
 * @module model/ViewerCertificate
 * @version 2019-03-26
 */
class ViewerCertificate {
    /**
     * Constructs a new <code>ViewerCertificate</code>.
     * &lt;p&gt;A complex type that determines the distribution’s SSL/TLS configuration for communicating with viewers.&lt;/p&gt; &lt;p&gt;If the distribution doesn’t use &lt;code&gt;Aliases&lt;/code&gt; (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the CloudFront domain name such as &lt;code&gt;d111111abcdef8.cloudfront.net&lt;/code&gt;—set &lt;code&gt;CloudFrontDefaultCertificate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and leave all other fields empty.&lt;/p&gt; &lt;p&gt;If the distribution uses &lt;code&gt;Aliases&lt;/code&gt; (alternate domain names or CNAMEs), use the fields in this type to specify the following settings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Which viewers the distribution accepts HTTPS connections from: only viewers that support &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Server_Name_Indication\&quot;&gt;server name indication (SNI)&lt;/a&gt; (recommended), or all viewers including those that don’t support SNI.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To accept HTTPS connections from only viewers that support SNI, set &lt;code&gt;SSLSupportMethod&lt;/code&gt; to &lt;code&gt;sni-only&lt;/code&gt;. This is recommended. Most browsers and clients support SNI. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To accept HTTPS connections from all viewers, including those that don’t support SNI, set &lt;code&gt;SSLSupportMethod&lt;/code&gt; to &lt;code&gt;vip&lt;/code&gt;. This is not recommended, and results in additional monthly charges from CloudFront. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The minimum SSL/TLS protocol version that the distribution can use to communicate with viewers. To specify a minimum version, choose a value for &lt;code&gt;MinimumProtocolVersion&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy\&quot;&gt;Security Policy&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The location of the SSL/TLS certificate, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html\&quot;&gt;AWS Certificate Manager (ACM)&lt;/a&gt; (recommended) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\&quot;&gt;AWS Identity and Access Management (AWS IAM)&lt;/a&gt;. You specify the location by setting a value in one of the following fields (not both):&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACMCertificateArn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IAMCertificateId&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to HTTPS, use &lt;code&gt;ViewerProtocolPolicy&lt;/code&gt; in the &lt;code&gt;CacheBehavior&lt;/code&gt; or &lt;code&gt;DefaultCacheBehavior&lt;/code&gt;. To specify how CloudFront should use SSL/TLS to communicate with your custom origin, use &lt;code&gt;CustomOriginConfig&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html\&quot;&gt;Using HTTPS with CloudFront&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html\&quot;&gt; Using Alternate Domain Names and HTTPS&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/ViewerCertificate
     */
    constructor() { 
        
        ViewerCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViewerCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViewerCertificate} obj Optional instance to populate.
     * @return {module:model/ViewerCertificate} The populated <code>ViewerCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViewerCertificate();

            if (data.hasOwnProperty('CloudFrontDefaultCertificate')) {
                obj['CloudFrontDefaultCertificate'] = ApiClient.convertToType(data['CloudFrontDefaultCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('IAMCertificateId')) {
                obj['IAMCertificateId'] = ApiClient.convertToType(data['IAMCertificateId'], 'String');
            }
            if (data.hasOwnProperty('ACMCertificateArn')) {
                obj['ACMCertificateArn'] = ApiClient.convertToType(data['ACMCertificateArn'], 'String');
            }
            if (data.hasOwnProperty('SSLSupportMethod')) {
                obj['SSLSupportMethod'] = ApiClient.convertToType(data['SSLSupportMethod'], SSLSupportMethod);
            }
            if (data.hasOwnProperty('MinimumProtocolVersion')) {
                obj['MinimumProtocolVersion'] = ApiClient.convertToType(data['MinimumProtocolVersion'], MinimumProtocolVersion);
            }
            if (data.hasOwnProperty('Certificate')) {
                obj['Certificate'] = ApiClient.convertToType(data['Certificate'], 'String');
            }
            if (data.hasOwnProperty('CertificateSource')) {
                obj['CertificateSource'] = ApiClient.convertToType(data['CertificateSource'], CertificateSource);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViewerCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViewerCertificate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CloudFrontDefaultCertificate`
        if (data['CloudFrontDefaultCertificate']) { // data not null
          Boolean.validateJSON(data['CloudFrontDefaultCertificate']);
        }
        // validate the optional field `IAMCertificateId`
        if (data['IAMCertificateId']) { // data not null
          String.validateJSON(data['IAMCertificateId']);
        }
        // validate the optional field `ACMCertificateArn`
        if (data['ACMCertificateArn']) { // data not null
          String.validateJSON(data['ACMCertificateArn']);
        }
        // validate the optional field `SSLSupportMethod`
        if (data['SSLSupportMethod']) { // data not null
          SSLSupportMethod.validateJSON(data['SSLSupportMethod']);
        }
        // validate the optional field `MinimumProtocolVersion`
        if (data['MinimumProtocolVersion']) { // data not null
          MinimumProtocolVersion.validateJSON(data['MinimumProtocolVersion']);
        }
        // validate the optional field `Certificate`
        if (data['Certificate']) { // data not null
          String.validateJSON(data['Certificate']);
        }
        // validate the optional field `CertificateSource`
        if (data['CertificateSource']) { // data not null
          CertificateSource.validateJSON(data['CertificateSource']);
        }

        return true;
    }


}



/**
 * @member {Boolean} CloudFrontDefaultCertificate
 */
ViewerCertificate.prototype['CloudFrontDefaultCertificate'] = undefined;

/**
 * @member {String} IAMCertificateId
 */
ViewerCertificate.prototype['IAMCertificateId'] = undefined;

/**
 * @member {String} ACMCertificateArn
 */
ViewerCertificate.prototype['ACMCertificateArn'] = undefined;

/**
 * @member {module:model/SSLSupportMethod} SSLSupportMethod
 */
ViewerCertificate.prototype['SSLSupportMethod'] = undefined;

/**
 * @member {module:model/MinimumProtocolVersion} MinimumProtocolVersion
 */
ViewerCertificate.prototype['MinimumProtocolVersion'] = undefined;

/**
 * @member {String} Certificate
 */
ViewerCertificate.prototype['Certificate'] = undefined;

/**
 * @member {module:model/CertificateSource} CertificateSource
 */
ViewerCertificate.prototype['CertificateSource'] = undefined;






export default ViewerCertificate;

