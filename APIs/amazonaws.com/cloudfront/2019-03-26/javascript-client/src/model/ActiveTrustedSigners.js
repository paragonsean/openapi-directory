/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActiveTrustedSigners model module.
 * @module model/ActiveTrustedSigners
 * @version 2019-03-26
 */
class ActiveTrustedSigners {
    /**
     * Constructs a new <code>ActiveTrustedSigners</code>.
     * &lt;p&gt;A complex type that lists the AWS accounts, if any, that you included in the &lt;code&gt;TrustedSigners&lt;/code&gt; complex type for this distribution. These are the accounts that you want to allow to create signed URLs for private content.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Signer&lt;/code&gt; complex type lists the AWS account number of the trusted signer or &lt;code&gt;self&lt;/code&gt; if the signer is the AWS account that created the distribution. The &lt;code&gt;Signer&lt;/code&gt; element also includes the IDs of any active CloudFront key pairs that are associated with the trusted signer&#39;s AWS account. If no &lt;code&gt;KeyPairId&lt;/code&gt; element appears for a &lt;code&gt;Signer&lt;/code&gt;, that signer can&#39;t create signed URLs. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/ActiveTrustedSigners
     * @param enabled {Boolean} 
     * @param quantity {Number} 
     */
    constructor(enabled, quantity) { 
        
        ActiveTrustedSigners.initialize(this, enabled, quantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, quantity) { 
        obj['Enabled'] = enabled;
        obj['Quantity'] = quantity;
    }

    /**
     * Constructs a <code>ActiveTrustedSigners</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveTrustedSigners} obj Optional instance to populate.
     * @return {module:model/ActiveTrustedSigners} The populated <code>ActiveTrustedSigners</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveTrustedSigners();

            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('Quantity')) {
                obj['Quantity'] = ApiClient.convertToType(data['Quantity'], 'Number');
            }
            if (data.hasOwnProperty('Items')) {
                obj['Items'] = ApiClient.convertToType(data['Items'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveTrustedSigners</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveTrustedSigners</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActiveTrustedSigners.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Enabled`
        if (data['Enabled']) { // data not null
          Boolean.validateJSON(data['Enabled']);
        }
        // validate the optional field `Quantity`
        if (data['Quantity']) { // data not null
          Number.validateJSON(data['Quantity']);
        }
        // validate the optional field `Items`
        if (data['Items']) { // data not null
          Array.validateJSON(data['Items']);
        }

        return true;
    }


}

ActiveTrustedSigners.RequiredProperties = ["Enabled", "Quantity"];

/**
 * @member {Boolean} Enabled
 */
ActiveTrustedSigners.prototype['Enabled'] = undefined;

/**
 * @member {Number} Quantity
 */
ActiveTrustedSigners.prototype['Quantity'] = undefined;

/**
 * @member {Array} Items
 */
ActiveTrustedSigners.prototype['Items'] = undefined;






export default ActiveTrustedSigners;

