/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentity20190326Request;
import org.openapitools.client.model.CreateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.CreateDistribution20190326Request;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDistributionWithTags20190326Request;
import org.openapitools.client.model.CreateDistributionWithTagsResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfig20190326Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfile20190326Request;
import org.openapitools.client.model.CreateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.CreateInvalidation20190326Request;
import org.openapitools.client.model.CreateInvalidationResult;
import org.openapitools.client.model.CreatePublicKey20190326Request;
import org.openapitools.client.model.CreatePublicKeyResult;
import org.openapitools.client.model.CreateStreamingDistribution20190326Request;
import org.openapitools.client.model.CreateStreamingDistributionResult;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20190326Request;
import org.openapitools.client.model.CreateStreamingDistributionWithTagsResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityConfigResult;
import org.openapitools.client.model.GetCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.GetDistributionConfigResult;
import org.openapitools.client.model.GetDistributionResult;
import org.openapitools.client.model.GetFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileConfigResult;
import org.openapitools.client.model.GetFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.GetFieldLevelEncryptionResult;
import org.openapitools.client.model.GetInvalidationResult;
import org.openapitools.client.model.GetPublicKeyConfigResult;
import org.openapitools.client.model.GetPublicKeyResult;
import org.openapitools.client.model.GetStreamingDistributionConfigResult;
import org.openapitools.client.model.GetStreamingDistributionResult;
import org.openapitools.client.model.ListCloudFrontOriginAccessIdentitiesResult;
import org.openapitools.client.model.ListDistributionsByWebACLIdResult;
import org.openapitools.client.model.ListDistributionsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionConfigsResult;
import org.openapitools.client.model.ListFieldLevelEncryptionProfilesResult;
import org.openapitools.client.model.ListInvalidationsResult;
import org.openapitools.client.model.ListPublicKeysResult;
import org.openapitools.client.model.ListStreamingDistributionsResult;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.TagResource20190326Request;
import org.openapitools.client.model.UntagResource20190326Request;
import org.openapitools.client.model.UpdateCloudFrontOriginAccessIdentityResult;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionConfigResult;
import org.openapitools.client.model.UpdateFieldLevelEncryptionProfileResult;
import org.openapitools.client.model.UpdatePublicKeyResult;
import org.openapitools.client.model.UpdateStreamingDistributionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCloudFrontOriginAccessIdentity20190326
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudFrontOriginAccessIdentity20190326Call(CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCloudFrontOriginAccessIdentity20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/origin-access-identity/cloudfront";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCloudFrontOriginAccessIdentity20190326Request' is set
        if (createCloudFrontOriginAccessIdentity20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createCloudFrontOriginAccessIdentity20190326Request' when calling createCloudFrontOriginAccessIdentity20190326(Async)");
        }

        return createCloudFrontOriginAccessIdentity20190326Call(createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity20190326(CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCloudFrontOriginAccessIdentityResult> localVarResp = createCloudFrontOriginAccessIdentity20190326WithHttpInfo(createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCloudFrontOriginAccessIdentityResult> createCloudFrontOriginAccessIdentity20190326WithHttpInfo(CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new origin access identity. If you&#39;re using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\&quot;&gt;Serving Private Content through CloudFront&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudFrontOriginAccessIdentityAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyCloudFrontOriginAccessIdentities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCloudFrontOriginAccessIdentity20190326Async(CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDistribution20190326
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistribution20190326Call(CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistribution20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDistribution20190326ValidateBeforeCall(CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDistribution20190326Request' is set
        if (createDistribution20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createDistribution20190326Request' when calling createDistribution20190326(Async)");
        }

        return createDistribution20190326Call(createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new web distribution. You create a CloudFront distribution to tell CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery. Send a &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt;, follow the steps included in the documentation to get the current configuration and then make your updates. This helps to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public CreateDistributionResult createDistribution20190326(CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDistributionResult> localVarResp = createDistribution20190326WithHttpInfo(createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new web distribution. You create a CloudFront distribution to tell CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery. Send a &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt;, follow the steps included in the documentation to get the current configuration and then make your updates. This helps to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDistributionResult> createDistribution20190326WithHttpInfo(CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDistribution20190326ValidateBeforeCall(createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new web distribution. You create a CloudFront distribution to tell CloudFront where you want content to be delivered from, and the details about how to track and manage content delivery. Send a &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/&lt;i&gt;CloudFront API version&lt;/i&gt;/distribution&lt;/code&gt;/&lt;code&gt;distribution ID&lt;/code&gt; resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html\&quot;&gt;UpdateDistribution&lt;/a&gt;, follow the steps included in the documentation to get the current configuration and then make your updates. This helps to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistribution20190326Async(CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDistribution20190326ValidateBeforeCall(createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDistributionWithTags20190326
     * @param withTags  (required)
     * @param createDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistributionWithTags20190326Call(Boolean withTags, CreateDistributionWithTags20190326Request createDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistributionWithTags20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution#WithTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WithTags", withTags));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDistributionWithTags20190326ValidateBeforeCall(Boolean withTags, CreateDistributionWithTags20190326Request createDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'withTags' is set
        if (withTags == null) {
            throw new ApiException("Missing the required parameter 'withTags' when calling createDistributionWithTags20190326(Async)");
        }

        // verify the required parameter 'createDistributionWithTags20190326Request' is set
        if (createDistributionWithTags20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createDistributionWithTags20190326Request' when calling createDistributionWithTags20190326(Async)");
        }

        return createDistributionWithTags20190326Call(withTags, createDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new distribution with tags.
     * @param withTags  (required)
     * @param createDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDistributionWithTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public CreateDistributionWithTagsResult createDistributionWithTags20190326(Boolean withTags, CreateDistributionWithTags20190326Request createDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDistributionWithTagsResult> localVarResp = createDistributionWithTags20190326WithHttpInfo(withTags, createDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new distribution with tags.
     * @param withTags  (required)
     * @param createDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDistributionWithTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDistributionWithTagsResult> createDistributionWithTags20190326WithHttpInfo(Boolean withTags, CreateDistributionWithTags20190326Request createDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDistributionWithTags20190326ValidateBeforeCall(withTags, createDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDistributionWithTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new distribution with tags.
     * @param withTags  (required)
     * @param createDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyDistributions </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidProtocolSettings </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 524 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDistributionWithTags20190326Async(Boolean withTags, CreateDistributionWithTags20190326Request createDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDistributionWithTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDistributionWithTags20190326ValidateBeforeCall(withTags, createDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDistributionWithTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFieldLevelEncryptionConfig20190326
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionConfig20190326Call(CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionConfig20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldLevelEncryptionConfig20190326ValidateBeforeCall(CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFieldLevelEncryptionConfig20190326Request' is set
        if (createFieldLevelEncryptionConfig20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionConfig20190326Request' when calling createFieldLevelEncryptionConfig20190326(Async)");
        }

        return createFieldLevelEncryptionConfig20190326Call(createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new field-level encryption configuration.
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFieldLevelEncryptionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldLevelEncryptionConfigResult createFieldLevelEncryptionConfig20190326(CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFieldLevelEncryptionConfigResult> localVarResp = createFieldLevelEncryptionConfig20190326WithHttpInfo(createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new field-level encryption configuration.
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFieldLevelEncryptionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFieldLevelEncryptionConfigResult> createFieldLevelEncryptionConfig20190326WithHttpInfo(CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFieldLevelEncryptionConfig20190326ValidateBeforeCall(createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new field-level encryption configuration.
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionConfigAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyFieldLevelEncryptionConfigs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionConfig20190326Async(CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFieldLevelEncryptionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldLevelEncryptionConfig20190326ValidateBeforeCall(createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFieldLevelEncryptionProfile20190326
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionProfile20190326Call(CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionProfile20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldLevelEncryptionProfile20190326ValidateBeforeCall(CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFieldLevelEncryptionProfile20190326Request' is set
        if (createFieldLevelEncryptionProfile20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionProfile20190326Request' when calling createFieldLevelEncryptionProfile20190326(Async)");
        }

        return createFieldLevelEncryptionProfile20190326Call(createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a field-level encryption profile.
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFieldLevelEncryptionProfileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldLevelEncryptionProfileResult createFieldLevelEncryptionProfile20190326(CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFieldLevelEncryptionProfileResult> localVarResp = createFieldLevelEncryptionProfile20190326WithHttpInfo(createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a field-level encryption profile.
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFieldLevelEncryptionProfileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFieldLevelEncryptionProfileResult> createFieldLevelEncryptionProfile20190326WithHttpInfo(CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFieldLevelEncryptionProfile20190326ValidateBeforeCall(createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionProfileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a field-level encryption profile.
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFieldLevelEncryptionProfiles </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFieldLevelEncryptionProfile20190326Async(CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFieldLevelEncryptionProfileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldLevelEncryptionProfile20190326ValidateBeforeCall(createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFieldLevelEncryptionProfileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvalidation20190326
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvalidation20190326Call(String distributionId, CreateInvalidation20190326Request createInvalidation20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvalidation20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{DistributionId}/invalidation"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvalidation20190326ValidateBeforeCall(String distributionId, CreateInvalidation20190326Request createInvalidation20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling createInvalidation20190326(Async)");
        }

        // verify the required parameter 'createInvalidation20190326Request' is set
        if (createInvalidation20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createInvalidation20190326Request' when calling createInvalidation20190326(Async)");
        }

        return createInvalidation20190326Call(distributionId, createInvalidation20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new invalidation. 
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateInvalidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateInvalidationResult createInvalidation20190326(String distributionId, CreateInvalidation20190326Request createInvalidation20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateInvalidationResult> localVarResp = createInvalidation20190326WithHttpInfo(distributionId, createInvalidation20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new invalidation. 
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateInvalidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateInvalidationResult> createInvalidation20190326WithHttpInfo(String distributionId, CreateInvalidation20190326Request createInvalidation20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createInvalidation20190326ValidateBeforeCall(distributionId, createInvalidation20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateInvalidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new invalidation. 
     * @param distributionId The distribution&#39;s id. (required)
     * @param createInvalidation20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BatchTooLarge </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyInvalidationsInProgress </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvalidation20190326Async(String distributionId, CreateInvalidation20190326Request createInvalidation20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateInvalidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvalidation20190326ValidateBeforeCall(distributionId, createInvalidation20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateInvalidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPublicKey20190326
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublicKey20190326Call(CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPublicKey20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/public-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPublicKey20190326ValidateBeforeCall(CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPublicKey20190326Request' is set
        if (createPublicKey20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createPublicKey20190326Request' when calling createPublicKey20190326(Async)");
        }

        return createPublicKey20190326Call(createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Add a new public key to CloudFront to use, for example, for field-level encryption. You can add a maximum of 10 public keys with one AWS account.
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePublicKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public CreatePublicKeyResult createPublicKey20190326(CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePublicKeyResult> localVarResp = createPublicKey20190326WithHttpInfo(createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new public key to CloudFront to use, for example, for field-level encryption. You can add a maximum of 10 public keys with one AWS account.
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePublicKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePublicKeyResult> createPublicKey20190326WithHttpInfo(CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPublicKey20190326ValidateBeforeCall(createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePublicKeyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new public key to CloudFront to use, for example, for field-level encryption. You can add a maximum of 10 public keys with one AWS account.
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> PublicKeyAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyPublicKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPublicKey20190326Async(CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePublicKeyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPublicKey20190326ValidateBeforeCall(createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePublicKeyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamingDistribution20190326
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistribution20190326Call(CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistribution20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamingDistribution20190326ValidateBeforeCall(CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createStreamingDistribution20190326Request' is set
        if (createStreamingDistribution20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistribution20190326Request' when calling createStreamingDistribution20190326(Async)");
        }

        return createStreamingDistribution20190326Call(createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new RTMP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamingDistributionResult createStreamingDistribution20190326(CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStreamingDistributionResult> localVarResp = createStreamingDistribution20190326WithHttpInfo(createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new RTMP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamingDistributionResult> createStreamingDistribution20190326WithHttpInfo(CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStreamingDistribution20190326ValidateBeforeCall(createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new RTMP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. &lt;/p&gt; &lt;p&gt;To create a new distribution, submit a &lt;code&gt;POST&lt;/code&gt; request to the &lt;i&gt;CloudFront API version&lt;/i&gt;/distribution resource. The request body must include a document with a &lt;i&gt;StreamingDistributionConfig&lt;/i&gt; element. The response echoes the &lt;code&gt;StreamingDistributionConfig&lt;/code&gt; element and returns other information about the RTMP distribution.&lt;/p&gt; &lt;p&gt;To get the status of your request, use the &lt;i&gt;GET StreamingDistribution&lt;/i&gt; API action. When the value of &lt;code&gt;Enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;, your distribution is ready. A distribution usually deploys in less than 15 minutes.&lt;/p&gt; &lt;p&gt;For more information about web distributions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\&quot;&gt;Working with RTMP Distributions&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there&#39;s a mismatch between the number of values you say you&#39;re specifying in the &lt;code&gt;Quantity&lt;/code&gt; element and the number of values specified.&lt;/p&gt; &lt;/important&gt;
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistribution20190326Async(CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamingDistribution20190326ValidateBeforeCall(createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createStreamingDistributionWithTags20190326
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistributionWithTags20190326Call(Boolean withTags, CreateStreamingDistributionWithTags20190326Request createStreamingDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistributionWithTags20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution#WithTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WithTags", withTags));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStreamingDistributionWithTags20190326ValidateBeforeCall(Boolean withTags, CreateStreamingDistributionWithTags20190326Request createStreamingDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'withTags' is set
        if (withTags == null) {
            throw new ApiException("Missing the required parameter 'withTags' when calling createStreamingDistributionWithTags20190326(Async)");
        }

        // verify the required parameter 'createStreamingDistributionWithTags20190326Request' is set
        if (createStreamingDistributionWithTags20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistributionWithTags20190326Request' when calling createStreamingDistributionWithTags20190326(Async)");
        }

        return createStreamingDistributionWithTags20190326Call(withTags, createStreamingDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create a new streaming distribution with tags.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateStreamingDistributionWithTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public CreateStreamingDistributionWithTagsResult createStreamingDistributionWithTags20190326(Boolean withTags, CreateStreamingDistributionWithTags20190326Request createStreamingDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateStreamingDistributionWithTagsResult> localVarResp = createStreamingDistributionWithTags20190326WithHttpInfo(withTags, createStreamingDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new streaming distribution with tags.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateStreamingDistributionWithTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStreamingDistributionWithTagsResult> createStreamingDistributionWithTags20190326WithHttpInfo(Boolean withTags, CreateStreamingDistributionWithTags20190326Request createStreamingDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createStreamingDistributionWithTags20190326ValidateBeforeCall(withTags, createStreamingDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionWithTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new streaming distribution with tags.
     * @param withTags  (required)
     * @param createStreamingDistributionWithTags20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOrigin </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyStreamingDistributions </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidTagging </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStreamingDistributionWithTags20190326Async(Boolean withTags, CreateStreamingDistributionWithTags20190326Request createStreamingDistributionWithTags20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateStreamingDistributionWithTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStreamingDistributionWithTags20190326ValidateBeforeCall(withTags, createStreamingDistributionWithTags20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateStreamingDistributionWithTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCloudFrontOriginAccessIdentity20190326
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudFrontOriginAccessIdentity20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/origin-access-identity/cloudfront/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCloudFrontOriginAccessIdentity20190326(Async)");
        }

        return deleteCloudFrontOriginAccessIdentity20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Delete an origin access identity. 
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCloudFrontOriginAccessIdentity20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteCloudFrontOriginAccessIdentity20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Delete an origin access identity. 
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCloudFrontOriginAccessIdentity20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an origin access identity. 
     * @param id The origin access identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header you received from a previous &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; request. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CloudFrontOriginAccessIdentityInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudFrontOriginAccessIdentity20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDistribution20190326
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDistribution20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDistribution20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDistribution20190326(Async)");
        }

        return deleteDistribution20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Delete a distribution. 
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDistribution20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteDistribution20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Delete a distribution. 
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDistribution20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a distribution. 
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDistribution20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFieldLevelEncryptionConfig20190326
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldLevelEncryptionConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFieldLevelEncryptionConfig20190326(Async)");
        }

        return deleteFieldLevelEncryptionConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Remove a field-level encryption configuration.
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFieldLevelEncryptionConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteFieldLevelEncryptionConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Remove a field-level encryption configuration.
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFieldLevelEncryptionConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldLevelEncryptionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a field-level encryption configuration.
     * @param id The ID of the configuration you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionConfigInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldLevelEncryptionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFieldLevelEncryptionProfile20190326
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionProfile20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption-profile/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldLevelEncryptionProfile20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFieldLevelEncryptionProfile20190326(Async)");
        }

        return deleteFieldLevelEncryptionProfile20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Remove a field-level encryption profile.
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFieldLevelEncryptionProfile20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteFieldLevelEncryptionProfile20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Remove a field-level encryption profile.
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFieldLevelEncryptionProfile20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldLevelEncryptionProfile20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a field-level encryption profile.
     * @param id Request the ID of the profile you want to delete from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> FieldLevelEncryptionProfileInUse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFieldLevelEncryptionProfile20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldLevelEncryptionProfile20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePublicKey20190326
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePublicKey20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/public-key/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePublicKey20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePublicKey20190326(Async)");
        }

        return deletePublicKey20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Remove a public key you previously added to CloudFront.
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deletePublicKey20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deletePublicKey20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * Remove a public key you previously added to CloudFront.
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePublicKey20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deletePublicKey20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a public key you previously added to CloudFront.
     * @param id The ID of the public key you want to remove from CloudFront. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key identity to delete. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PublicKeyInUse </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePublicKey20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePublicKey20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStreamingDistribution20190326
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamingDistribution20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStreamingDistribution20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamingDistribution20190326(Async)");
        }

        return deleteStreamingDistribution20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStreamingDistribution20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        deleteStreamingDistribution20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
    }

    /**
     * 
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStreamingDistribution20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteStreamingDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To delete an RTMP distribution using the CloudFront API&lt;/b&gt;:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Disable the RTMP distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to get the current configuration and the &lt;code&gt;Etag&lt;/code&gt; header for the distribution. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to change the value of &lt;code&gt;Enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;PUT Streaming Distribution Config&lt;/code&gt; request to confirm that the distribution was successfully disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request. Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GET Streaming Distribution Config&lt;/code&gt; request in Step 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to your &lt;code&gt;DELETE Streaming Distribution&lt;/code&gt; request to confirm that the distribution was successfully deleted.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For information about deleting a distribution using the CloudFront console, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\&quot;&gt;Deleting a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param id The distribution ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when you disabled the streaming distribution. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StreamingDistributionNotDisabled </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStreamingDistribution20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStreamingDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudFrontOriginAccessIdentity20190326
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentity20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/origin-access-identity/cloudfront/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentity20190326(Async)");
        }

        return getCloudFrontOriginAccessIdentity20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about an origin access identity. 
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudFrontOriginAccessIdentityResult getCloudFrontOriginAccessIdentity20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCloudFrontOriginAccessIdentityResult> localVarResp = getCloudFrontOriginAccessIdentity20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about an origin access identity. 
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCloudFrontOriginAccessIdentityResult> getCloudFrontOriginAccessIdentity20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about an origin access identity. 
     * @param id The identity&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentity20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudFrontOriginAccessIdentityConfig20190326
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentityConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/origin-access-identity/cloudfront/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudFrontOriginAccessIdentityConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentityConfig20190326(Async)");
        }

        return getCloudFrontOriginAccessIdentityConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about an origin access identity. 
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCloudFrontOriginAccessIdentityConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCloudFrontOriginAccessIdentityConfigResult> localVarResp = getCloudFrontOriginAccessIdentityConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about an origin access identity. 
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCloudFrontOriginAccessIdentityConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCloudFrontOriginAccessIdentityConfigResult> getCloudFrontOriginAccessIdentityConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentityConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about an origin access identity. 
     * @param id The identity&#39;s ID.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudFrontOriginAccessIdentityConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCloudFrontOriginAccessIdentityConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudFrontOriginAccessIdentityConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCloudFrontOriginAccessIdentityConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistribution20190326
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistribution20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistribution20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistribution20190326(Async)");
        }

        return getDistribution20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetDistributionResult getDistribution20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDistributionResult> localVarResp = getDistribution20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistributionResult> getDistribution20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about a distribution.
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistribution20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistributionConfig20190326
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistributionConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDistributionConfig20190326(Async)");
        }

        return getDistributionConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about a distribution. 
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDistributionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetDistributionConfigResult getDistributionConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDistributionConfigResult> localVarResp = getDistributionConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about a distribution. 
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDistributionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDistributionConfigResult> getDistributionConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDistributionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDistributionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about a distribution. 
     * @param id The distribution&#39;s ID. If the ID is empty, an empty distribution configuration is returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDistributionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistributionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDistributionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryption20190326
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryption20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryption20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryption20190326(Async)");
        }

        return getFieldLevelEncryption20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionResult getFieldLevelEncryption20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionResult> localVarResp = getFieldLevelEncryption20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionResult> getFieldLevelEncryption20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryption20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryption20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryption20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryptionConfig20190326
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryptionConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryptionConfig20190326(Async)");
        }

        return getFieldLevelEncryptionConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionConfigResult> localVarResp = getFieldLevelEncryptionConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionConfigResult> getFieldLevelEncryptionConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryptionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption configuration information.
     * @param id Request the ID for the field-level encryption configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryptionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryptionProfile20190326
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfile20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption-profile/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryptionProfile20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryptionProfile20190326(Async)");
        }

        return getFieldLevelEncryptionProfile20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption profile information.
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionProfileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionProfileResult getFieldLevelEncryptionProfile20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionProfileResult> localVarResp = getFieldLevelEncryptionProfile20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption profile information.
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionProfileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionProfileResult> getFieldLevelEncryptionProfile20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryptionProfile20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption profile information.
     * @param id Get the ID for the field-level encryption profile information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfile20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionProfileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryptionProfile20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldLevelEncryptionProfileConfig20190326
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfileConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption-profile/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldLevelEncryptionProfileConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFieldLevelEncryptionProfileConfig20190326(Async)");
        }

        return getFieldLevelEncryptionProfileConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the field-level encryption profile configuration information.
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFieldLevelEncryptionProfileConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldLevelEncryptionProfileConfigResult getFieldLevelEncryptionProfileConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFieldLevelEncryptionProfileConfigResult> localVarResp = getFieldLevelEncryptionProfileConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the field-level encryption profile configuration information.
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFieldLevelEncryptionProfileConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFieldLevelEncryptionProfileConfigResult> getFieldLevelEncryptionProfileConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFieldLevelEncryptionProfileConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the field-level encryption profile configuration information.
     * @param id Get the ID for the field-level encryption profile configuration information. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldLevelEncryptionProfileConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFieldLevelEncryptionProfileConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldLevelEncryptionProfileConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFieldLevelEncryptionProfileConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvalidation20190326
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvalidation20190326Call(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{DistributionId}/invalidation/{Id}"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()))
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvalidation20190326ValidateBeforeCall(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling getInvalidation20190326(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInvalidation20190326(Async)");
        }

        return getInvalidation20190326Call(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the information about an invalidation. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetInvalidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetInvalidationResult getInvalidation20190326(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetInvalidationResult> localVarResp = getInvalidation20190326WithHttpInfo(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the information about an invalidation. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetInvalidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInvalidationResult> getInvalidation20190326WithHttpInfo(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getInvalidation20190326ValidateBeforeCall(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetInvalidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the information about an invalidation. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param id The identifier for the invalidation request, for example, &lt;code&gt;IDFDVBD632BHDS5&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchInvalidation </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvalidation20190326Async(String distributionId, String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetInvalidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvalidation20190326ValidateBeforeCall(distributionId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetInvalidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicKey20190326
     * @param id Request the ID for the public key. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKey20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/public-key/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicKey20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicKey20190326(Async)");
        }

        return getPublicKey20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the public key information.
     * @param id Request the ID for the public key. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPublicKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicKeyResult getPublicKey20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPublicKeyResult> localVarResp = getPublicKey20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the public key information.
     * @param id Request the ID for the public key. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPublicKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPublicKeyResult> getPublicKey20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPublicKey20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPublicKeyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the public key information.
     * @param id Request the ID for the public key. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKey20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPublicKeyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicKey20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPublicKeyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicKeyConfig20190326
     * @param id Request the ID for the public key configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKeyConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/public-key/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicKeyConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPublicKeyConfig20190326(Async)");
        }

        return getPublicKeyConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Return public key configuration informaation
     * @param id Request the ID for the public key configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPublicKeyConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicKeyConfigResult getPublicKeyConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPublicKeyConfigResult> localVarResp = getPublicKeyConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Return public key configuration informaation
     * @param id Request the ID for the public key configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPublicKeyConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPublicKeyConfigResult> getPublicKeyConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPublicKeyConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPublicKeyConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return public key configuration informaation
     * @param id Request the ID for the public key configuration. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicKeyConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPublicKeyConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicKeyConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPublicKeyConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamingDistribution20190326
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistribution20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution/{Id}"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamingDistribution20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStreamingDistribution20190326(Async)");
        }

        return getStreamingDistribution20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetStreamingDistributionResult getStreamingDistribution20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStreamingDistributionResult> localVarResp = getStreamingDistribution20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStreamingDistributionResult> getStreamingDistribution20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getStreamingDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistribution20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamingDistribution20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStreamingDistributionConfig20190326
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistributionConfig20190326Call(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStreamingDistributionConfig20190326ValidateBeforeCall(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStreamingDistributionConfig20190326(Async)");
        }

        return getStreamingDistributionConfig20190326Call(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get the configuration information about a streaming distribution. 
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStreamingDistributionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public GetStreamingDistributionConfigResult getStreamingDistributionConfig20190326(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStreamingDistributionConfigResult> localVarResp = getStreamingDistributionConfig20190326WithHttpInfo(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the configuration information about a streaming distribution. 
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStreamingDistributionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStreamingDistributionConfigResult> getStreamingDistributionConfig20190326WithHttpInfo(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getStreamingDistributionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the configuration information about a streaming distribution. 
     * @param id The streaming distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStreamingDistributionConfig20190326Async(String id, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStreamingDistributionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStreamingDistributionConfig20190326ValidateBeforeCall(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStreamingDistributionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCloudFrontOriginAccessIdentities20190326
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCloudFrontOriginAccessIdentities20190326Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/origin-access-identity/cloudfront";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCloudFrontOriginAccessIdentities20190326ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listCloudFrontOriginAccessIdentities20190326Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @return ListCloudFrontOriginAccessIdentitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListCloudFrontOriginAccessIdentitiesResult listCloudFrontOriginAccessIdentities20190326(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListCloudFrontOriginAccessIdentitiesResult> localVarResp = listCloudFrontOriginAccessIdentities20190326WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @return ApiResponse&lt;ListCloudFrontOriginAccessIdentitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCloudFrontOriginAccessIdentitiesResult> listCloudFrontOriginAccessIdentities20190326WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listCloudFrontOriginAccessIdentities20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListCloudFrontOriginAccessIdentitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists origin access identities.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last identity on that page). (optional)
     * @param maxItems The maximum number of origin access identities you want in the response body.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCloudFrontOriginAccessIdentities20190326Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListCloudFrontOriginAccessIdentitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCloudFrontOriginAccessIdentities20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListCloudFrontOriginAccessIdentitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributions20190326
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributions20190326Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributions20190326ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listDistributions20190326Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List CloudFront distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @return ListDistributionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsResult listDistributions20190326(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsResult> localVarResp = listDistributions20190326WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List CloudFront distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @return ApiResponse&lt;ListDistributionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsResult> listDistributions20190326WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributions20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List CloudFront distributions.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last distribution on that page). (optional)
     * @param maxItems The maximum number of distributions you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributions20190326Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributions20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDistributionsByWebACLId20190326
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByWebACLId20190326Call(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distributionsByWebACLId/{WebACLId}"
            .replace("{" + "WebACLId" + "}", localVarApiClient.escapeString(webACLId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDistributionsByWebACLId20190326ValidateBeforeCall(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webACLId' is set
        if (webACLId == null) {
            throw new ApiException("Missing the required parameter 'webACLId' when calling listDistributionsByWebACLId20190326(Async)");
        }

        return listDistributionsByWebACLId20190326Call(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @return ListDistributionsByWebACLIdResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public ListDistributionsByWebACLIdResult listDistributionsByWebACLId20190326(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListDistributionsByWebACLIdResult> localVarResp = listDistributionsByWebACLId20190326WithHttpInfo(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @return ApiResponse&lt;ListDistributionsByWebACLIdResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDistributionsByWebACLIdResult> listDistributionsByWebACLId20190326WithHttpInfo(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listDistributionsByWebACLId20190326ValidateBeforeCall(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListDistributionsByWebACLIdResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \&quot;null\&quot; for the ID, the request returns a list of the distributions that aren&#39;t associated with a web ACL.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use &lt;code&gt;Marker&lt;/code&gt; and &lt;code&gt;MaxItems&lt;/code&gt; to control pagination of results. If you have more than &lt;code&gt;MaxItems&lt;/code&gt; distributions that satisfy the request, the response includes a &lt;code&gt;NextMarker&lt;/code&gt; element. To get the next page of results, submit another request. For the value of &lt;code&gt;Marker&lt;/code&gt;, specify the value of &lt;code&gt;NextMarker&lt;/code&gt; from the last response. (For the first request, omit &lt;code&gt;Marker&lt;/code&gt;.)  (optional)
     * @param maxItems The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDistributionsByWebACLId20190326Async(String webACLId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListDistributionsByWebACLIdResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDistributionsByWebACLId20190326ValidateBeforeCall(webACLId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListDistributionsByWebACLIdResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFieldLevelEncryptionConfigs20190326
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionConfigs20190326Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldLevelEncryptionConfigs20190326ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listFieldLevelEncryptionConfigs20190326Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body.  (optional)
     * @return ListFieldLevelEncryptionConfigsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldLevelEncryptionConfigsResult listFieldLevelEncryptionConfigs20190326(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListFieldLevelEncryptionConfigsResult> localVarResp = listFieldLevelEncryptionConfigs20190326WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body.  (optional)
     * @return ApiResponse&lt;ListFieldLevelEncryptionConfigsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFieldLevelEncryptionConfigsResult> listFieldLevelEncryptionConfigs20190326WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listFieldLevelEncryptionConfigs20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionConfigsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all field-level encryption configurations that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of configurations. The results include configurations in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last configuration on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption configurations you want in the response body.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionConfigs20190326Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListFieldLevelEncryptionConfigsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldLevelEncryptionConfigs20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionConfigsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFieldLevelEncryptionProfiles20190326
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionProfiles20190326Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldLevelEncryptionProfiles20190326ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listFieldLevelEncryptionProfiles20190326Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @return ListFieldLevelEncryptionProfilesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldLevelEncryptionProfilesResult listFieldLevelEncryptionProfiles20190326(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListFieldLevelEncryptionProfilesResult> localVarResp = listFieldLevelEncryptionProfiles20190326WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @return ApiResponse&lt;ListFieldLevelEncryptionProfilesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFieldLevelEncryptionProfilesResult> listFieldLevelEncryptionProfiles20190326WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listFieldLevelEncryptionProfiles20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionProfilesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request a list of field-level encryption profiles that have been created in CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of profiles. The results include profiles in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last profile on that page).  (optional)
     * @param maxItems The maximum number of field-level encryption profiles you want in the response body.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFieldLevelEncryptionProfiles20190326Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListFieldLevelEncryptionProfilesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldLevelEncryptionProfiles20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListFieldLevelEncryptionProfilesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvalidations20190326
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvalidations20190326Call(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{DistributionId}/invalidation"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvalidations20190326ValidateBeforeCall(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling listInvalidations20190326(Async)");
        }

        return listInvalidations20190326Call(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * Lists invalidation batches. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @return ListInvalidationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ListInvalidationsResult listInvalidations20190326(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListInvalidationsResult> localVarResp = listInvalidations20190326WithHttpInfo(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists invalidation batches. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @return ApiResponse&lt;ListInvalidationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInvalidationsResult> listInvalidations20190326WithHttpInfo(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listInvalidations20190326ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListInvalidationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists invalidation batches. 
     * @param distributionId The distribution&#39;s ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response. This value is the same as the ID of the last invalidation batch on that page.  (optional)
     * @param maxItems The maximum number of invalidation batches that you want in the response body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvalidations20190326Async(String distributionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListInvalidationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvalidations20190326ValidateBeforeCall(distributionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListInvalidationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublicKeys20190326
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page).  (optional)
     * @param maxItems The maximum number of public keys you want in the response body.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicKeys20190326Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/public-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublicKeys20190326ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listPublicKeys20190326Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List all public keys that have been added to CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page).  (optional)
     * @param maxItems The maximum number of public keys you want in the response body.  (optional)
     * @return ListPublicKeysResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListPublicKeysResult listPublicKeys20190326(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListPublicKeysResult> localVarResp = listPublicKeys20190326WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List all public keys that have been added to CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page).  (optional)
     * @param maxItems The maximum number of public keys you want in the response body.  (optional)
     * @return ApiResponse&lt;ListPublicKeysResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPublicKeysResult> listPublicKeys20190326WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listPublicKeys20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListPublicKeysResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all public keys that have been added to CloudFront for this account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker Use this when paginating results to indicate where to begin in your list of public keys. The results include public keys in the list that occur after the marker. To get the next page of results, set the &lt;code&gt;Marker&lt;/code&gt; to the value of the &lt;code&gt;NextMarker&lt;/code&gt; from the current page&#39;s response (which is also the ID of the last public key on that page).  (optional)
     * @param maxItems The maximum number of public keys you want in the response body.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicKeys20190326Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListPublicKeysResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublicKeys20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListPublicKeysResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStreamingDistributions20190326
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamingDistributions20190326Call(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStreamingDistributions20190326ValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback _callback) throws ApiException {
        return listStreamingDistributions20190326Call(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);

    }

    /**
     * 
     * List streaming distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @return ListStreamingDistributionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ListStreamingDistributionsResult listStreamingDistributions20190326(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        ApiResponse<ListStreamingDistributionsResult> localVarResp = listStreamingDistributions20190326WithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems);
        return localVarResp.getData();
    }

    /**
     * 
     * List streaming distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @return ApiResponse&lt;ListStreamingDistributionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStreamingDistributionsResult> listStreamingDistributions20190326WithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems) throws ApiException {
        okhttp3.Call localVarCall = listStreamingDistributions20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, null);
        Type localVarReturnType = new TypeToken<ListStreamingDistributionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List streaming distributions. 
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param marker The value that you provided for the &lt;code&gt;Marker&lt;/code&gt; request parameter. (optional)
     * @param maxItems The value that you provided for the &lt;code&gt;MaxItems&lt;/code&gt; request parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStreamingDistributions20190326Async(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String marker, String maxItems, final ApiCallback<ListStreamingDistributionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStreamingDistributions20190326ValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, marker, maxItems, _callback);
        Type localVarReturnType = new TypeToken<ListStreamingDistributionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource20190326
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResource20190326Call(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2019-03-26/tagging#Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResource20190326ValidateBeforeCall(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling listTagsForResource20190326(Async)");
        }

        return listTagsForResource20190326Call(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * List tags for a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResult listTagsForResource20190326(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResult> localVarResp = listTagsForResource20190326WithHttpInfo(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * List tags for a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResult> listTagsForResource20190326WithHttpInfo(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResource20190326ValidateBeforeCall(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List tags for a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResource20190326Async(String resource, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResource20190326ValidateBeforeCall(resource, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource20190326
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResource20190326Call(String resource, String operation, TagResource20190326Request tagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResource20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/tagging#Operation=Tag&Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResource20190326ValidateBeforeCall(String resource, String operation, TagResource20190326Request tagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling tagResource20190326(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagResource20190326(Async)");
        }

        // verify the required parameter 'tagResource20190326Request' is set
        if (tagResource20190326Request == null) {
            throw new ApiException("Missing the required parameter 'tagResource20190326Request' when calling tagResource20190326(Async)");
        }

        return tagResource20190326Call(resource, operation, tagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Add tags to a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public void tagResource20190326(String resource, String operation, TagResource20190326Request tagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResource20190326WithHttpInfo(resource, operation, tagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Add tags to a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagResource20190326WithHttpInfo(String resource, String operation, TagResource20190326Request tagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResource20190326ValidateBeforeCall(resource, operation, tagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add tags to a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param tagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResource20190326Async(String resource, String operation, TagResource20190326Request tagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResource20190326ValidateBeforeCall(resource, operation, tagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource20190326
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResource20190326Call(String resource, String operation, UntagResource20190326Request untagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResource20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/tagging#Operation=Untag&Resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Resource", resource));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResource20190326ValidateBeforeCall(String resource, String operation, UntagResource20190326Request untagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling untagResource20190326(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagResource20190326(Async)");
        }

        // verify the required parameter 'untagResource20190326Request' is set
        if (untagResource20190326Request == null) {
            throw new ApiException("Missing the required parameter 'untagResource20190326Request' when calling untagResource20190326(Async)");
        }

        return untagResource20190326Call(resource, operation, untagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove tags from a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public void untagResource20190326(String resource, String operation, UntagResource20190326Request untagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResource20190326WithHttpInfo(resource, operation, untagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Remove tags from a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagResource20190326WithHttpInfo(String resource, String operation, UntagResource20190326Request untagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResource20190326ValidateBeforeCall(resource, operation, untagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove tags from a CloudFront resource.
     * @param resource  An ARN of a CloudFront resource. (required)
     * @param operation  (required)
     * @param untagResource20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagging </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoSuchResource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResource20190326Async(String resource, String operation, UntagResource20190326Request untagResource20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResource20190326ValidateBeforeCall(resource, operation, untagResource20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCloudFrontOriginAccessIdentity20190326
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudFrontOriginAccessIdentity20190326Call(String id, CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCloudFrontOriginAccessIdentity20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/origin-access-identity/cloudfront/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(String id, CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCloudFrontOriginAccessIdentity20190326(Async)");
        }

        // verify the required parameter 'createCloudFrontOriginAccessIdentity20190326Request' is set
        if (createCloudFrontOriginAccessIdentity20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createCloudFrontOriginAccessIdentity20190326Request' when calling updateCloudFrontOriginAccessIdentity20190326(Async)");
        }

        return updateCloudFrontOriginAccessIdentity20190326Call(id, createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update an origin access identity. 
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateCloudFrontOriginAccessIdentityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCloudFrontOriginAccessIdentityResult updateCloudFrontOriginAccessIdentity20190326(String id, CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateCloudFrontOriginAccessIdentityResult> localVarResp = updateCloudFrontOriginAccessIdentity20190326WithHttpInfo(id, createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an origin access identity. 
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateCloudFrontOriginAccessIdentityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCloudFrontOriginAccessIdentityResult> updateCloudFrontOriginAccessIdentity20190326WithHttpInfo(String id, CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(id, createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateCloudFrontOriginAccessIdentityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an origin access identity. 
     * @param id The identity&#39;s id. (required)
     * @param createCloudFrontOriginAccessIdentity20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the identity&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoSuchCloudFrontOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCloudFrontOriginAccessIdentity20190326Async(String id, CreateCloudFrontOriginAccessIdentity20190326Request createCloudFrontOriginAccessIdentity20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateCloudFrontOriginAccessIdentityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCloudFrontOriginAccessIdentity20190326ValidateBeforeCall(id, createCloudFrontOriginAccessIdentity20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateCloudFrontOriginAccessIdentityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDistribution20190326
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistribution20190326Call(String id, CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistribution20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDistribution20190326ValidateBeforeCall(String id, CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDistribution20190326(Async)");
        }

        // verify the required parameter 'createDistribution20190326Request' is set
        if (createDistribution20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createDistribution20190326Request' when calling updateDistribution20190326(Async)");
        }

        return updateDistribution20190326Call(id, createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the configuration for a web distribution. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using this API action, follow the steps here to get the current configuration and then make your updates, to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating the XML document that is returned to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt;For information about updating a distribution using the CloudFront console instead, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html\&quot;&gt;Creating a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistributionConfig.html\&quot;&gt;GetDistributionConfig&lt;/a&gt; request to get the current configuration and an &lt;code&gt;Etag&lt;/code&gt; header for the distribution.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you update the distribution again, you must get a new &lt;code&gt;Etag&lt;/code&gt; header.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GetDistributionConfig&lt;/code&gt; request to include your changes. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you edit the XML file, be aware of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must strip out the ETag parameter that is returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Additional fields are required when you update a distribution. There may be fields included in the XML file for features that you haven&#39;t configured for your distribution. This is expected and required to successfully update the distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;. If you try to change this value, CloudFront returns an &lt;code&gt;IllegalUpdate&lt;/code&gt; error. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The new configuration replaces the existing configuration; the values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, &lt;code&gt;CNAME&lt;/code&gt;), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding &lt;code&gt;Quantity&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to update the configuration for your distribution:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a &lt;code&gt;DistributionConfig&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GetDistributionConfig&lt;/code&gt; request in Step 1.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;UpdateDistribution&lt;/code&gt; request to confirm that the configuration was successfully updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optional: Submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDistributionResult updateDistribution20190326(String id, CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateDistributionResult> localVarResp = updateDistribution20190326WithHttpInfo(id, createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the configuration for a web distribution. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using this API action, follow the steps here to get the current configuration and then make your updates, to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating the XML document that is returned to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt;For information about updating a distribution using the CloudFront console instead, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html\&quot;&gt;Creating a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistributionConfig.html\&quot;&gt;GetDistributionConfig&lt;/a&gt; request to get the current configuration and an &lt;code&gt;Etag&lt;/code&gt; header for the distribution.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you update the distribution again, you must get a new &lt;code&gt;Etag&lt;/code&gt; header.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GetDistributionConfig&lt;/code&gt; request to include your changes. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you edit the XML file, be aware of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must strip out the ETag parameter that is returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Additional fields are required when you update a distribution. There may be fields included in the XML file for features that you haven&#39;t configured for your distribution. This is expected and required to successfully update the distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;. If you try to change this value, CloudFront returns an &lt;code&gt;IllegalUpdate&lt;/code&gt; error. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The new configuration replaces the existing configuration; the values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, &lt;code&gt;CNAME&lt;/code&gt;), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding &lt;code&gt;Quantity&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to update the configuration for your distribution:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a &lt;code&gt;DistributionConfig&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GetDistributionConfig&lt;/code&gt; request in Step 1.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;UpdateDistribution&lt;/code&gt; request to confirm that the configuration was successfully updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optional: Submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDistributionResult> updateDistribution20190326WithHttpInfo(String id, CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateDistribution20190326ValidateBeforeCall(id, createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the configuration for a web distribution. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you update a distribution, there are more required fields than when you create a distribution. When you update your distribution by using this API action, follow the steps here to get the current configuration and then make your updates, to make sure that you include all of the required fields. To view a summary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html\&quot;&gt;Required Fields for Create Distribution and Update Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;The update process includes getting the current distribution configuration, updating the XML document that is returned to make your changes, and then submitting an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to make the updates.&lt;/p&gt; &lt;p&gt;For information about updating a distribution using the CloudFront console instead, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html\&quot;&gt;Creating a Distribution&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To update a web distribution using the CloudFront API&lt;/b&gt; &lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistributionConfig.html\&quot;&gt;GetDistributionConfig&lt;/a&gt; request to get the current configuration and an &lt;code&gt;Etag&lt;/code&gt; header for the distribution.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you update the distribution again, you must get a new &lt;code&gt;Etag&lt;/code&gt; header.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the XML document that was returned in the response to your &lt;code&gt;GetDistributionConfig&lt;/code&gt; request to include your changes. &lt;/p&gt; &lt;important&gt; &lt;p&gt;When you edit the XML file, be aware of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must strip out the ETag parameter that is returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Additional fields are required when you update a distribution. There may be fields included in the XML file for features that you haven&#39;t configured for your distribution. This is expected and required to successfully update the distribution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t change the value of &lt;code&gt;CallerReference&lt;/code&gt;. If you try to change this value, CloudFront returns an &lt;code&gt;IllegalUpdate&lt;/code&gt; error. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The new configuration replaces the existing configuration; the values that you specify in an &lt;code&gt;UpdateDistribution&lt;/code&gt; request are not merged into your existing configuration. When you add, delete, or replace values in an element that allows multiple values (for example, &lt;code&gt;CNAME&lt;/code&gt;), you must specify all of the values that you want to appear in the updated distribution. In addition, you must update the corresponding &lt;code&gt;Quantity&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Submit an &lt;code&gt;UpdateDistribution&lt;/code&gt; request to update the configuration for your distribution:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the request body, include the XML document that you updated in Step 2. The request body must include an XML document with a &lt;code&gt;DistributionConfig&lt;/code&gt; element.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set the value of the HTTP &lt;code&gt;If-Match&lt;/code&gt; header to the value of the &lt;code&gt;ETag&lt;/code&gt; header that CloudFront returned when you submitted the &lt;code&gt;GetDistributionConfig&lt;/code&gt; request in Step 1.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Review the response to the &lt;code&gt;UpdateDistribution&lt;/code&gt; request to confirm that the configuration was successfully updated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optional: Submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html\&quot;&gt;GetDistribution&lt;/a&gt; request to confirm that your changes have propagated. When propagation is complete, the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;Deployed&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param id The distribution&#39;s id. (required)
     * @param createDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDefaultRootObject </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidRelativePath </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidErrorCode </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidResponseCode </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidViewerCertificate </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidMinimumProtocolVersion </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidRequiredProtocol </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> NoSuchOrigin </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> TooManyOrigins </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> TooManyOriginGroupsPerDistribution </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> TooManyCacheBehaviors </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> TooManyCookieNamesInWhiteList </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InvalidForwardCookies </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> TooManyHeadersInForwardedValues </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> InvalidHeadersForS3Origin </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> TooManyCertificates </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> InvalidLocationCode </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> InvalidGeoRestrictionParameter </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidTTLOrder </td><td>  -  </td></tr>
        <tr><td> 512 </td><td> InvalidWebACLId </td><td>  -  </td></tr>
        <tr><td> 513 </td><td> TooManyOriginCustomHeaders </td><td>  -  </td></tr>
        <tr><td> 514 </td><td> TooManyQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 515 </td><td> InvalidQueryStringParameters </td><td>  -  </td></tr>
        <tr><td> 516 </td><td> TooManyDistributionsWithLambdaAssociations </td><td>  -  </td></tr>
        <tr><td> 517 </td><td> TooManyLambdaFunctionAssociations </td><td>  -  </td></tr>
        <tr><td> 518 </td><td> InvalidLambdaFunctionAssociation </td><td>  -  </td></tr>
        <tr><td> 519 </td><td> InvalidOriginReadTimeout </td><td>  -  </td></tr>
        <tr><td> 520 </td><td> InvalidOriginKeepaliveTimeout </td><td>  -  </td></tr>
        <tr><td> 521 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 522 </td><td> IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior </td><td>  -  </td></tr>
        <tr><td> 523 </td><td> TooManyDistributionsAssociatedToFieldLevelEncryptionConfig </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDistribution20190326Async(String id, CreateDistribution20190326Request createDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDistribution20190326ValidateBeforeCall(id, createDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFieldLevelEncryptionConfig20190326
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionConfig20190326Call(String id, CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionConfig20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldLevelEncryptionConfig20190326ValidateBeforeCall(String id, CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldLevelEncryptionConfig20190326(Async)");
        }

        // verify the required parameter 'createFieldLevelEncryptionConfig20190326Request' is set
        if (createFieldLevelEncryptionConfig20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionConfig20190326Request' when calling updateFieldLevelEncryptionConfig20190326(Async)");
        }

        return updateFieldLevelEncryptionConfig20190326Call(id, createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a field-level encryption configuration. 
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateFieldLevelEncryptionConfigResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldLevelEncryptionConfigResult updateFieldLevelEncryptionConfig20190326(String id, CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateFieldLevelEncryptionConfigResult> localVarResp = updateFieldLevelEncryptionConfig20190326WithHttpInfo(id, createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a field-level encryption configuration. 
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateFieldLevelEncryptionConfigResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFieldLevelEncryptionConfigResult> updateFieldLevelEncryptionConfig20190326WithHttpInfo(String id, CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateFieldLevelEncryptionConfig20190326ValidateBeforeCall(id, createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionConfigResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a field-level encryption configuration. 
     * @param id The ID of the configuration you want to update. (required)
     * @param createFieldLevelEncryptionConfig20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the configuration identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchFieldLevelEncryptionConfig </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFieldLevelEncryptionQueryArgProfiles </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyFieldLevelEncryptionContentTypeProfiles </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> QueryArgProfileEmpty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionConfig20190326Async(String id, CreateFieldLevelEncryptionConfig20190326Request createFieldLevelEncryptionConfig20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateFieldLevelEncryptionConfigResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldLevelEncryptionConfig20190326ValidateBeforeCall(id, createFieldLevelEncryptionConfig20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionConfigResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFieldLevelEncryptionProfile20190326
     * @param id The ID of the field-level encryption profile request.  (required)
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionProfile20190326Call(String id, CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFieldLevelEncryptionProfile20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/field-level-encryption-profile/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldLevelEncryptionProfile20190326ValidateBeforeCall(String id, CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldLevelEncryptionProfile20190326(Async)");
        }

        // verify the required parameter 'createFieldLevelEncryptionProfile20190326Request' is set
        if (createFieldLevelEncryptionProfile20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createFieldLevelEncryptionProfile20190326Request' when calling updateFieldLevelEncryptionProfile20190326(Async)");
        }

        return updateFieldLevelEncryptionProfile20190326Call(id, createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a field-level encryption profile. 
     * @param id The ID of the field-level encryption profile request.  (required)
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateFieldLevelEncryptionProfileResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldLevelEncryptionProfileResult updateFieldLevelEncryptionProfile20190326(String id, CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateFieldLevelEncryptionProfileResult> localVarResp = updateFieldLevelEncryptionProfile20190326WithHttpInfo(id, createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a field-level encryption profile. 
     * @param id The ID of the field-level encryption profile request.  (required)
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateFieldLevelEncryptionProfileResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFieldLevelEncryptionProfileResult> updateFieldLevelEncryptionProfile20190326WithHttpInfo(String id, CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateFieldLevelEncryptionProfile20190326ValidateBeforeCall(id, createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionProfileResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a field-level encryption profile. 
     * @param id The ID of the field-level encryption profile request.  (required)
     * @param createFieldLevelEncryptionProfile20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the profile identity to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> FieldLevelEncryptionProfileAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoSuchFieldLevelEncryptionProfile </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FieldLevelEncryptionProfileSizeExceeded </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyFieldLevelEncryptionEncryptionEntities </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TooManyFieldLevelEncryptionFieldPatterns </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFieldLevelEncryptionProfile20190326Async(String id, CreateFieldLevelEncryptionProfile20190326Request createFieldLevelEncryptionProfile20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateFieldLevelEncryptionProfileResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldLevelEncryptionProfile20190326ValidateBeforeCall(id, createFieldLevelEncryptionProfile20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateFieldLevelEncryptionProfileResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePublicKey20190326
     * @param id ID of the public key to be updated. (required)
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePublicKey20190326Call(String id, CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPublicKey20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/public-key/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePublicKey20190326ValidateBeforeCall(String id, CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePublicKey20190326(Async)");
        }

        // verify the required parameter 'createPublicKey20190326Request' is set
        if (createPublicKey20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createPublicKey20190326Request' when calling updatePublicKey20190326(Async)");
        }

        return updatePublicKey20190326Call(id, createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update public key information. Note that the only value you can change is the comment.
     * @param id ID of the public key to be updated. (required)
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdatePublicKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePublicKeyResult updatePublicKey20190326(String id, CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdatePublicKeyResult> localVarResp = updatePublicKey20190326WithHttpInfo(id, createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update public key information. Note that the only value you can change is the comment.
     * @param id ID of the public key to be updated. (required)
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdatePublicKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePublicKeyResult> updatePublicKey20190326WithHttpInfo(String id, CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updatePublicKey20190326ValidateBeforeCall(id, createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdatePublicKeyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update public key information. Note that the only value you can change is the comment.
     * @param id ID of the public key to be updated. (required)
     * @param createPublicKey20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the public key to update. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CannotChangeImmutablePublicKeyFields </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchPublicKey </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePublicKey20190326Async(String id, CreatePublicKey20190326Request createPublicKey20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdatePublicKeyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePublicKey20190326ValidateBeforeCall(id, createPublicKey20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdatePublicKeyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStreamingDistribution20190326
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamingDistribution20190326Call(String id, CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStreamingDistribution20190326Request;

        // create path and map variables
        String localVarPath = "/2019-03-26/streaming-distribution/{Id}/config"
            .replace("{" + "Id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStreamingDistribution20190326ValidateBeforeCall(String id, CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStreamingDistribution20190326(Async)");
        }

        // verify the required parameter 'createStreamingDistribution20190326Request' is set
        if (createStreamingDistribution20190326Request == null) {
            throw new ApiException("Missing the required parameter 'createStreamingDistribution20190326Request' when calling updateStreamingDistribution20190326(Async)");
        }

        return updateStreamingDistribution20190326Call(id, createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);

    }

    /**
     * 
     * Update a streaming distribution. 
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return UpdateStreamingDistributionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStreamingDistributionResult updateStreamingDistribution20190326(String id, CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        ApiResponse<UpdateStreamingDistributionResult> localVarResp = updateStreamingDistribution20190326WithHttpInfo(id, createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a streaming distribution. 
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateStreamingDistributionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStreamingDistributionResult> updateStreamingDistribution20190326WithHttpInfo(String id, CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = updateStreamingDistribution20190326ValidateBeforeCall(id, createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, null);
        Type localVarReturnType = new TypeToken<UpdateStreamingDistributionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a streaming distribution. 
     * @param id The streaming distribution&#39;s id. (required)
     * @param createStreamingDistribution20190326Request  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param ifMatch The value of the &lt;code&gt;ETag&lt;/code&gt; header that you received when retrieving the streaming distribution&#39;s configuration. For example: &lt;code&gt;E2QWRUHAPOMQZL&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDenied </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CNAMEAlreadyExists </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> IllegalUpdate </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidIfMatchVersion </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> MissingBody </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoSuchStreamingDistribution </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PreconditionFailed </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyStreamingDistributionCNAMEs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArgument </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidOriginAccessIdentity </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyTrustedSigners </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrustedSignerDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InconsistentQuantities </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStreamingDistribution20190326Async(String id, CreateStreamingDistribution20190326Request createStreamingDistribution20190326Request, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String ifMatch, final ApiCallback<UpdateStreamingDistributionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStreamingDistribution20190326ValidateBeforeCall(id, createStreamingDistribution20190326Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<UpdateStreamingDistributionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
