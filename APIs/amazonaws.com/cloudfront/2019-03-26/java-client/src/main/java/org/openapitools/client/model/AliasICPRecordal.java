/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ICPRecordalStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;AWS services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they&#39;ve added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions. The status is returned in the CloudFront response; you can&#39;t configure it yourself.&lt;/p&gt; &lt;p&gt;For more information about ICP recordals, see &lt;a href&#x3D;\&quot;https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html\&quot;&gt; Signup, Accounts, and Credentials&lt;/a&gt; in &lt;i&gt;Getting Started with AWS services in China&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.281222-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AliasICPRecordal {
  public static final String SERIALIZED_NAME_C_N_A_M_E = "CNAME";
  @SerializedName(SERIALIZED_NAME_C_N_A_M_E)
  private String CNAME;

  public static final String SERIALIZED_NAME_IC_P_RECORDAL_STATUS = "ICPRecordalStatus";
  @SerializedName(SERIALIZED_NAME_IC_P_RECORDAL_STATUS)
  private ICPRecordalStatus icPRecordalStatus;

  public AliasICPRecordal() {
  }

  public AliasICPRecordal CNAME(String CNAME) {
    this.CNAME = CNAME;
    return this;
  }

  /**
   * Get CNAME
   * @return CNAME
   */
  @javax.annotation.Nullable
  public String getCNAME() {
    return CNAME;
  }

  public void setCNAME(String CNAME) {
    this.CNAME = CNAME;
  }


  public AliasICPRecordal icPRecordalStatus(ICPRecordalStatus icPRecordalStatus) {
    this.icPRecordalStatus = icPRecordalStatus;
    return this;
  }

  /**
   * Get icPRecordalStatus
   * @return icPRecordalStatus
   */
  @javax.annotation.Nullable
  public ICPRecordalStatus getIcPRecordalStatus() {
    return icPRecordalStatus;
  }

  public void setIcPRecordalStatus(ICPRecordalStatus icPRecordalStatus) {
    this.icPRecordalStatus = icPRecordalStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AliasICPRecordal aliasICPRecordal = (AliasICPRecordal) o;
    return Objects.equals(this.CNAME, aliasICPRecordal.CNAME) &&
        Objects.equals(this.icPRecordalStatus, aliasICPRecordal.icPRecordalStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CNAME, icPRecordalStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AliasICPRecordal {\n");
    sb.append("    CNAME: ").append(toIndentedString(CNAME)).append("\n");
    sb.append("    icPRecordalStatus: ").append(toIndentedString(icPRecordalStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CNAME");
    openapiFields.add("ICPRecordalStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AliasICPRecordal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AliasICPRecordal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AliasICPRecordal is not found in the empty JSON string", AliasICPRecordal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AliasICPRecordal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AliasICPRecordal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CNAME`
      if (jsonObj.get("CNAME") != null && !jsonObj.get("CNAME").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CNAME"));
      }
      // validate the optional field `ICPRecordalStatus`
      if (jsonObj.get("ICPRecordalStatus") != null && !jsonObj.get("ICPRecordalStatus").isJsonNull()) {
        ICPRecordalStatus.validateJsonElement(jsonObj.get("ICPRecordalStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AliasICPRecordal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AliasICPRecordal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AliasICPRecordal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AliasICPRecordal.class));

       return (TypeAdapter<T>) new TypeAdapter<AliasICPRecordal>() {
           @Override
           public void write(JsonWriter out, AliasICPRecordal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AliasICPRecordal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AliasICPRecordal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AliasICPRecordal
   * @throws IOException if the JSON string is invalid with respect to AliasICPRecordal
   */
  public static AliasICPRecordal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AliasICPRecordal.class);
  }

  /**
   * Convert an instance of AliasICPRecordal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

