/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardedValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardedValues::OAIForwardedValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardedValues::OAIForwardedValues() {
    this->initializeModel();
}

OAIForwardedValues::~OAIForwardedValues() {}

void OAIForwardedValues::initializeModel() {

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_query_string_cache_keys_isSet = false;
    m_query_string_cache_keys_isValid = false;
}

void OAIForwardedValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardedValues::fromJsonObject(QJsonObject json) {

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("QueryString")]);
    m_query_string_isSet = !json[QString("QueryString")].isNull() && m_query_string_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("Cookies")]);
    m_cookies_isSet = !json[QString("Cookies")].isNull() && m_cookies_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("Headers")]);
    m_headers_isSet = !json[QString("Headers")].isNull() && m_headers_isValid;

    m_query_string_cache_keys_isValid = ::OpenAPI::fromJsonValue(m_query_string_cache_keys, json[QString("QueryStringCacheKeys")]);
    m_query_string_cache_keys_isSet = !json[QString("QueryStringCacheKeys")].isNull() && m_query_string_cache_keys_isValid;
}

QString OAIForwardedValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardedValues::asJsonObject() const {
    QJsonObject obj;
    if (m_query_string_isSet) {
        obj.insert(QString("QueryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_cookies.isSet()) {
        obj.insert(QString("Cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("Headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_query_string_cache_keys.isSet()) {
        obj.insert(QString("QueryStringCacheKeys"), ::OpenAPI::toJsonValue(m_query_string_cache_keys));
    }
    return obj;
}

bool OAIForwardedValues::getQueryString() const {
    return m_query_string;
}
void OAIForwardedValues::setQueryString(const bool &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIForwardedValues::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIForwardedValues::is_query_string_Valid() const{
    return m_query_string_isValid;
}

OAIForwardedValues_Cookies OAIForwardedValues::getCookies() const {
    return m_cookies;
}
void OAIForwardedValues::setCookies(const OAIForwardedValues_Cookies &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAIForwardedValues::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAIForwardedValues::is_cookies_Valid() const{
    return m_cookies_isValid;
}

OAIForwardedValues_Headers OAIForwardedValues::getHeaders() const {
    return m_headers;
}
void OAIForwardedValues::setHeaders(const OAIForwardedValues_Headers &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIForwardedValues::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIForwardedValues::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIForwardedValues_QueryStringCacheKeys OAIForwardedValues::getQueryStringCacheKeys() const {
    return m_query_string_cache_keys;
}
void OAIForwardedValues::setQueryStringCacheKeys(const OAIForwardedValues_QueryStringCacheKeys &query_string_cache_keys) {
    m_query_string_cache_keys = query_string_cache_keys;
    m_query_string_cache_keys_isSet = true;
}

bool OAIForwardedValues::is_query_string_cache_keys_Set() const{
    return m_query_string_cache_keys_isSet;
}

bool OAIForwardedValues::is_query_string_cache_keys_Valid() const{
    return m_query_string_cache_keys_isValid;
}

bool OAIForwardedValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_cache_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardedValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_string_isValid && m_cookies_isValid && true;
}

} // namespace OpenAPI
