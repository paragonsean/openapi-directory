/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateCloudFrontOriginAccessIdentity2019_03_26_request.h"
#include "OAICreateCloudFrontOriginAccessIdentityResult.h"
#include "OAICreateDistribution2019_03_26_request.h"
#include "OAICreateDistributionResult.h"
#include "OAICreateDistributionWithTags2019_03_26_request.h"
#include "OAICreateDistributionWithTagsResult.h"
#include "OAICreateFieldLevelEncryptionConfig2019_03_26_request.h"
#include "OAICreateFieldLevelEncryptionConfigResult.h"
#include "OAICreateFieldLevelEncryptionProfile2019_03_26_request.h"
#include "OAICreateFieldLevelEncryptionProfileResult.h"
#include "OAICreateInvalidation2019_03_26_request.h"
#include "OAICreateInvalidationResult.h"
#include "OAICreatePublicKey2019_03_26_request.h"
#include "OAICreatePublicKeyResult.h"
#include "OAICreateStreamingDistribution2019_03_26_request.h"
#include "OAICreateStreamingDistributionResult.h"
#include "OAICreateStreamingDistributionWithTags2019_03_26_request.h"
#include "OAICreateStreamingDistributionWithTagsResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityConfigResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityResult.h"
#include "OAIGetDistributionConfigResult.h"
#include "OAIGetDistributionResult.h"
#include "OAIGetFieldLevelEncryptionConfigResult.h"
#include "OAIGetFieldLevelEncryptionProfileConfigResult.h"
#include "OAIGetFieldLevelEncryptionProfileResult.h"
#include "OAIGetFieldLevelEncryptionResult.h"
#include "OAIGetInvalidationResult.h"
#include "OAIGetPublicKeyConfigResult.h"
#include "OAIGetPublicKeyResult.h"
#include "OAIGetStreamingDistributionConfigResult.h"
#include "OAIGetStreamingDistributionResult.h"
#include "OAIListCloudFrontOriginAccessIdentitiesResult.h"
#include "OAIListDistributionsByWebACLIdResult.h"
#include "OAIListDistributionsResult.h"
#include "OAIListFieldLevelEncryptionConfigsResult.h"
#include "OAIListFieldLevelEncryptionProfilesResult.h"
#include "OAIListInvalidationsResult.h"
#include "OAIListPublicKeysResult.h"
#include "OAIListStreamingDistributionsResult.h"
#include "OAIListTagsForResourceResult.h"
#include "OAITagResource2019_03_26_request.h"
#include "OAIUntagResource2019_03_26_request.h"
#include "OAIUpdateCloudFrontOriginAccessIdentityResult.h"
#include "OAIUpdateDistributionResult.h"
#include "OAIUpdateFieldLevelEncryptionConfigResult.h"
#include "OAIUpdateFieldLevelEncryptionProfileResult.h"
#include "OAIUpdatePublicKeyResult.h"
#include "OAIUpdateStreamingDistributionResult.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_cloud_front_origin_access_identity2019_03_26_request OAICreateCloudFrontOriginAccessIdentity2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCloudFrontOriginAccessIdentity20190326(const OAICreateCloudFrontOriginAccessIdentity2019_03_26_request &oai_create_cloud_front_origin_access_identity2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_distribution2019_03_26_request OAICreateDistribution2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistribution20190326(const OAICreateDistribution2019_03_26_request &oai_create_distribution2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_distribution_with_tags2019_03_26_request OAICreateDistributionWithTags2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistributionWithTags20190326(const bool &with_tags, const OAICreateDistributionWithTags2019_03_26_request &oai_create_distribution_with_tags2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_field_level_encryption_config2019_03_26_request OAICreateFieldLevelEncryptionConfig2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFieldLevelEncryptionConfig20190326(const OAICreateFieldLevelEncryptionConfig2019_03_26_request &oai_create_field_level_encryption_config2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_field_level_encryption_profile2019_03_26_request OAICreateFieldLevelEncryptionProfile2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFieldLevelEncryptionProfile20190326(const OAICreateFieldLevelEncryptionProfile2019_03_26_request &oai_create_field_level_encryption_profile2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  oai_create_invalidation2019_03_26_request OAICreateInvalidation2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInvalidation20190326(const QString &distribution_id, const OAICreateInvalidation2019_03_26_request &oai_create_invalidation2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_public_key2019_03_26_request OAICreatePublicKey2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPublicKey20190326(const OAICreatePublicKey2019_03_26_request &oai_create_public_key2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_streaming_distribution2019_03_26_request OAICreateStreamingDistribution2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistribution20190326(const OAICreateStreamingDistribution2019_03_26_request &oai_create_streaming_distribution2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_streaming_distribution_with_tags2019_03_26_request OAICreateStreamingDistributionWithTags2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistributionWithTags20190326(const bool &with_tags, const OAICreateStreamingDistributionWithTags2019_03_26_request &oai_create_streaming_distribution_with_tags2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteCloudFrontOriginAccessIdentity20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteDistribution20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteFieldLevelEncryptionConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteFieldLevelEncryptionProfile20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deletePublicKey20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteStreamingDistribution20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentity20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentityConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistribution20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistributionConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryption20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionProfile20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFieldLevelEncryptionProfileConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInvalidation20190326(const QString &distribution_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicKey20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicKeyConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistribution20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistributionConfig20190326(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listCloudFrontOriginAccessIdentities20190326(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributions20190326(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_aclid QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributionsByWebACLId20190326(const QString &web_aclid, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listFieldLevelEncryptionConfigs20190326(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listFieldLevelEncryptionProfiles20190326(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listInvalidations20190326(const QString &distribution_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listPublicKeys20190326(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listStreamingDistributions20190326(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource20190326(const QString &resource, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_resource2019_03_26_request OAITagResource2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource20190326(const QString &resource, const QString &operation, const OAITagResource2019_03_26_request &oai_tag_resource2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_resource2019_03_26_request OAIUntagResource2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource20190326(const QString &resource, const QString &operation, const OAIUntagResource2019_03_26_request &oai_untag_resource2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_cloud_front_origin_access_identity2019_03_26_request OAICreateCloudFrontOriginAccessIdentity2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateCloudFrontOriginAccessIdentity20190326(const QString &id, const OAICreateCloudFrontOriginAccessIdentity2019_03_26_request &oai_create_cloud_front_origin_access_identity2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_distribution2019_03_26_request OAICreateDistribution2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateDistribution20190326(const QString &id, const OAICreateDistribution2019_03_26_request &oai_create_distribution2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_field_level_encryption_config2019_03_26_request OAICreateFieldLevelEncryptionConfig2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateFieldLevelEncryptionConfig20190326(const QString &id, const OAICreateFieldLevelEncryptionConfig2019_03_26_request &oai_create_field_level_encryption_config2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_field_level_encryption_profile2019_03_26_request OAICreateFieldLevelEncryptionProfile2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateFieldLevelEncryptionProfile20190326(const QString &id, const OAICreateFieldLevelEncryptionProfile2019_03_26_request &oai_create_field_level_encryption_profile2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_public_key2019_03_26_request OAICreatePublicKey2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updatePublicKey20190326(const QString &id, const OAICreatePublicKey2019_03_26_request &oai_create_public_key2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_streaming_distribution2019_03_26_request OAICreateStreamingDistribution2019_03_26_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateStreamingDistribution20190326(const QString &id, const OAICreateStreamingDistribution2019_03_26_request &oai_create_streaming_distribution2019_03_26_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCloudFrontOriginAccessIdentity20190326Callback(OAIHttpRequestWorker *worker);
    void createDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void createDistributionWithTags20190326Callback(OAIHttpRequestWorker *worker);
    void createFieldLevelEncryptionConfig20190326Callback(OAIHttpRequestWorker *worker);
    void createFieldLevelEncryptionProfile20190326Callback(OAIHttpRequestWorker *worker);
    void createInvalidation20190326Callback(OAIHttpRequestWorker *worker);
    void createPublicKey20190326Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistributionWithTags20190326Callback(OAIHttpRequestWorker *worker);
    void deleteCloudFrontOriginAccessIdentity20190326Callback(OAIHttpRequestWorker *worker);
    void deleteDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionConfig20190326Callback(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionProfile20190326Callback(OAIHttpRequestWorker *worker);
    void deletePublicKey20190326Callback(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20190326Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentityConfig20190326Callback(OAIHttpRequestWorker *worker);
    void getDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void getDistributionConfig20190326Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryption20190326Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionConfig20190326Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionProfile20190326Callback(OAIHttpRequestWorker *worker);
    void getFieldLevelEncryptionProfileConfig20190326Callback(OAIHttpRequestWorker *worker);
    void getInvalidation20190326Callback(OAIHttpRequestWorker *worker);
    void getPublicKey20190326Callback(OAIHttpRequestWorker *worker);
    void getPublicKeyConfig20190326Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistributionConfig20190326Callback(OAIHttpRequestWorker *worker);
    void listCloudFrontOriginAccessIdentities20190326Callback(OAIHttpRequestWorker *worker);
    void listDistributions20190326Callback(OAIHttpRequestWorker *worker);
    void listDistributionsByWebACLId20190326Callback(OAIHttpRequestWorker *worker);
    void listFieldLevelEncryptionConfigs20190326Callback(OAIHttpRequestWorker *worker);
    void listFieldLevelEncryptionProfiles20190326Callback(OAIHttpRequestWorker *worker);
    void listInvalidations20190326Callback(OAIHttpRequestWorker *worker);
    void listPublicKeys20190326Callback(OAIHttpRequestWorker *worker);
    void listStreamingDistributions20190326Callback(OAIHttpRequestWorker *worker);
    void listTagsForResource20190326Callback(OAIHttpRequestWorker *worker);
    void tagResource20190326Callback(OAIHttpRequestWorker *worker);
    void untagResource20190326Callback(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20190326Callback(OAIHttpRequestWorker *worker);
    void updateDistribution20190326Callback(OAIHttpRequestWorker *worker);
    void updateFieldLevelEncryptionConfig20190326Callback(OAIHttpRequestWorker *worker);
    void updateFieldLevelEncryptionProfile20190326Callback(OAIHttpRequestWorker *worker);
    void updatePublicKey20190326Callback(OAIHttpRequestWorker *worker);
    void updateStreamingDistribution20190326Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCloudFrontOriginAccessIdentity20190326Signal(OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20190326Signal(OAICreateDistributionResult summary);
    void createDistributionWithTags20190326Signal(OAICreateDistributionWithTagsResult summary);
    void createFieldLevelEncryptionConfig20190326Signal(OAICreateFieldLevelEncryptionConfigResult summary);
    void createFieldLevelEncryptionProfile20190326Signal(OAICreateFieldLevelEncryptionProfileResult summary);
    void createInvalidation20190326Signal(OAICreateInvalidationResult summary);
    void createPublicKey20190326Signal(OAICreatePublicKeyResult summary);
    void createStreamingDistribution20190326Signal(OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20190326Signal(OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20190326Signal();
    void deleteDistribution20190326Signal();
    void deleteFieldLevelEncryptionConfig20190326Signal();
    void deleteFieldLevelEncryptionProfile20190326Signal();
    void deletePublicKey20190326Signal();
    void deleteStreamingDistribution20190326Signal();
    void getCloudFrontOriginAccessIdentity20190326Signal(OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20190326Signal(OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20190326Signal(OAIGetDistributionResult summary);
    void getDistributionConfig20190326Signal(OAIGetDistributionConfigResult summary);
    void getFieldLevelEncryption20190326Signal(OAIGetFieldLevelEncryptionResult summary);
    void getFieldLevelEncryptionConfig20190326Signal(OAIGetFieldLevelEncryptionConfigResult summary);
    void getFieldLevelEncryptionProfile20190326Signal(OAIGetFieldLevelEncryptionProfileResult summary);
    void getFieldLevelEncryptionProfileConfig20190326Signal(OAIGetFieldLevelEncryptionProfileConfigResult summary);
    void getInvalidation20190326Signal(OAIGetInvalidationResult summary);
    void getPublicKey20190326Signal(OAIGetPublicKeyResult summary);
    void getPublicKeyConfig20190326Signal(OAIGetPublicKeyConfigResult summary);
    void getStreamingDistribution20190326Signal(OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20190326Signal(OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20190326Signal(OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20190326Signal(OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20190326Signal(OAIListDistributionsByWebACLIdResult summary);
    void listFieldLevelEncryptionConfigs20190326Signal(OAIListFieldLevelEncryptionConfigsResult summary);
    void listFieldLevelEncryptionProfiles20190326Signal(OAIListFieldLevelEncryptionProfilesResult summary);
    void listInvalidations20190326Signal(OAIListInvalidationsResult summary);
    void listPublicKeys20190326Signal(OAIListPublicKeysResult summary);
    void listStreamingDistributions20190326Signal(OAIListStreamingDistributionsResult summary);
    void listTagsForResource20190326Signal(OAIListTagsForResourceResult summary);
    void tagResource20190326Signal();
    void untagResource20190326Signal();
    void updateCloudFrontOriginAccessIdentity20190326Signal(OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20190326Signal(OAIUpdateDistributionResult summary);
    void updateFieldLevelEncryptionConfig20190326Signal(OAIUpdateFieldLevelEncryptionConfigResult summary);
    void updateFieldLevelEncryptionProfile20190326Signal(OAIUpdateFieldLevelEncryptionProfileResult summary);
    void updatePublicKey20190326Signal(OAIUpdatePublicKeyResult summary);
    void updateStreamingDistribution20190326Signal(OAIUpdateStreamingDistributionResult summary);


    void createCloudFrontOriginAccessIdentity20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionResult summary);
    void createDistributionWithTags20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionWithTagsResult summary);
    void createFieldLevelEncryptionConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateFieldLevelEncryptionConfigResult summary);
    void createFieldLevelEncryptionProfile20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateFieldLevelEncryptionProfileResult summary);
    void createInvalidation20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateInvalidationResult summary);
    void createPublicKey20190326SignalFull(OAIHttpRequestWorker *worker, OAICreatePublicKeyResult summary);
    void createStreamingDistribution20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20190326SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20190326SignalFull(OAIHttpRequestWorker *worker);
    void deleteDistribution20190326SignalFull(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionConfig20190326SignalFull(OAIHttpRequestWorker *worker);
    void deleteFieldLevelEncryptionProfile20190326SignalFull(OAIHttpRequestWorker *worker);
    void deletePublicKey20190326SignalFull(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20190326SignalFull(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionResult summary);
    void getDistributionConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionConfigResult summary);
    void getFieldLevelEncryption20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionResult summary);
    void getFieldLevelEncryptionConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionConfigResult summary);
    void getFieldLevelEncryptionProfile20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionProfileResult summary);
    void getFieldLevelEncryptionProfileConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetFieldLevelEncryptionProfileConfigResult summary);
    void getInvalidation20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetInvalidationResult summary);
    void getPublicKey20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetPublicKeyResult summary);
    void getPublicKeyConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetPublicKeyConfigResult summary);
    void getStreamingDistribution20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20190326SignalFull(OAIHttpRequestWorker *worker, OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20190326SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20190326SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsByWebACLIdResult summary);
    void listFieldLevelEncryptionConfigs20190326SignalFull(OAIHttpRequestWorker *worker, OAIListFieldLevelEncryptionConfigsResult summary);
    void listFieldLevelEncryptionProfiles20190326SignalFull(OAIHttpRequestWorker *worker, OAIListFieldLevelEncryptionProfilesResult summary);
    void listInvalidations20190326SignalFull(OAIHttpRequestWorker *worker, OAIListInvalidationsResult summary);
    void listPublicKeys20190326SignalFull(OAIHttpRequestWorker *worker, OAIListPublicKeysResult summary);
    void listStreamingDistributions20190326SignalFull(OAIHttpRequestWorker *worker, OAIListStreamingDistributionsResult summary);
    void listTagsForResource20190326SignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResult summary);
    void tagResource20190326SignalFull(OAIHttpRequestWorker *worker);
    void untagResource20190326SignalFull(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20190326SignalFull(OAIHttpRequestWorker *worker, OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20190326SignalFull(OAIHttpRequestWorker *worker, OAIUpdateDistributionResult summary);
    void updateFieldLevelEncryptionConfig20190326SignalFull(OAIHttpRequestWorker *worker, OAIUpdateFieldLevelEncryptionConfigResult summary);
    void updateFieldLevelEncryptionProfile20190326SignalFull(OAIHttpRequestWorker *worker, OAIUpdateFieldLevelEncryptionProfileResult summary);
    void updatePublicKey20190326SignalFull(OAIHttpRequestWorker *worker, OAIUpdatePublicKeyResult summary);
    void updateStreamingDistribution20190326SignalFull(OAIHttpRequestWorker *worker, OAIUpdateStreamingDistributionResult summary);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20190326SignalError() instead")
    void createCloudFrontOriginAccessIdentity20190326SignalE(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20190326SignalError(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20190326SignalError() instead")
    void createDistribution20190326SignalE(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20190326SignalError(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20190326SignalError() instead")
    void createDistributionWithTags20190326SignalE(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20190326SignalError(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionConfig20190326SignalError() instead")
    void createFieldLevelEncryptionConfig20190326SignalE(OAICreateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionConfig20190326SignalError(OAICreateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionProfile20190326SignalError() instead")
    void createFieldLevelEncryptionProfile20190326SignalE(OAICreateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionProfile20190326SignalError(OAICreateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20190326SignalError() instead")
    void createInvalidation20190326SignalE(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20190326SignalError(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPublicKey20190326SignalError() instead")
    void createPublicKey20190326SignalE(OAICreatePublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPublicKey20190326SignalError(OAICreatePublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20190326SignalError() instead")
    void createStreamingDistribution20190326SignalE(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20190326SignalError(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20190326SignalError() instead")
    void createStreamingDistributionWithTags20190326SignalE(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20190326SignalError(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20190326SignalError() instead")
    void deleteCloudFrontOriginAccessIdentity20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20190326SignalError() instead")
    void deleteDistribution20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionConfig20190326SignalError() instead")
    void deleteFieldLevelEncryptionConfig20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionConfig20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionProfile20190326SignalError() instead")
    void deleteFieldLevelEncryptionProfile20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionProfile20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicKey20190326SignalError() instead")
    void deletePublicKey20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKey20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20190326SignalError() instead")
    void deleteStreamingDistribution20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20190326SignalError() instead")
    void getCloudFrontOriginAccessIdentity20190326SignalE(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20190326SignalError(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20190326SignalError() instead")
    void getCloudFrontOriginAccessIdentityConfig20190326SignalE(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20190326SignalError(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20190326SignalError() instead")
    void getDistribution20190326SignalE(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20190326SignalError(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20190326SignalError() instead")
    void getDistributionConfig20190326SignalE(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20190326SignalError(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryption20190326SignalError() instead")
    void getFieldLevelEncryption20190326SignalE(OAIGetFieldLevelEncryptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryption20190326SignalError(OAIGetFieldLevelEncryptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionConfig20190326SignalError() instead")
    void getFieldLevelEncryptionConfig20190326SignalE(OAIGetFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionConfig20190326SignalError(OAIGetFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfile20190326SignalError() instead")
    void getFieldLevelEncryptionProfile20190326SignalE(OAIGetFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfile20190326SignalError(OAIGetFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfileConfig20190326SignalError() instead")
    void getFieldLevelEncryptionProfileConfig20190326SignalE(OAIGetFieldLevelEncryptionProfileConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfileConfig20190326SignalError(OAIGetFieldLevelEncryptionProfileConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20190326SignalError() instead")
    void getInvalidation20190326SignalE(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20190326SignalError(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKey20190326SignalError() instead")
    void getPublicKey20190326SignalE(OAIGetPublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKey20190326SignalError(OAIGetPublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeyConfig20190326SignalError() instead")
    void getPublicKeyConfig20190326SignalE(OAIGetPublicKeyConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeyConfig20190326SignalError(OAIGetPublicKeyConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20190326SignalError() instead")
    void getStreamingDistribution20190326SignalE(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20190326SignalError(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20190326SignalError() instead")
    void getStreamingDistributionConfig20190326SignalE(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20190326SignalError(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20190326SignalError() instead")
    void listCloudFrontOriginAccessIdentities20190326SignalE(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20190326SignalError(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20190326SignalError() instead")
    void listDistributions20190326SignalE(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20190326SignalError(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20190326SignalError() instead")
    void listDistributionsByWebACLId20190326SignalE(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20190326SignalError(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionConfigs20190326SignalError() instead")
    void listFieldLevelEncryptionConfigs20190326SignalE(OAIListFieldLevelEncryptionConfigsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionConfigs20190326SignalError(OAIListFieldLevelEncryptionConfigsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionProfiles20190326SignalError() instead")
    void listFieldLevelEncryptionProfiles20190326SignalE(OAIListFieldLevelEncryptionProfilesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionProfiles20190326SignalError(OAIListFieldLevelEncryptionProfilesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20190326SignalError() instead")
    void listInvalidations20190326SignalE(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20190326SignalError(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicKeys20190326SignalError() instead")
    void listPublicKeys20190326SignalE(OAIListPublicKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicKeys20190326SignalError(OAIListPublicKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20190326SignalError() instead")
    void listStreamingDistributions20190326SignalE(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20190326SignalError(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20190326SignalError() instead")
    void listTagsForResource20190326SignalE(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20190326SignalError(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20190326SignalError() instead")
    void tagResource20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20190326SignalError() instead")
    void untagResource20190326SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20190326SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20190326SignalError() instead")
    void updateCloudFrontOriginAccessIdentity20190326SignalE(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20190326SignalError(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20190326SignalError() instead")
    void updateDistribution20190326SignalE(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20190326SignalError(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionConfig20190326SignalError() instead")
    void updateFieldLevelEncryptionConfig20190326SignalE(OAIUpdateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionConfig20190326SignalError(OAIUpdateFieldLevelEncryptionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionProfile20190326SignalError() instead")
    void updateFieldLevelEncryptionProfile20190326SignalE(OAIUpdateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionProfile20190326SignalError(OAIUpdateFieldLevelEncryptionProfileResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicKey20190326SignalError() instead")
    void updatePublicKey20190326SignalE(OAIUpdatePublicKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicKey20190326SignalError(OAIUpdatePublicKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20190326SignalError() instead")
    void updateStreamingDistribution20190326SignalE(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20190326SignalError(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20190326SignalErrorFull() instead")
    void createCloudFrontOriginAccessIdentity20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20190326SignalErrorFull() instead")
    void createDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20190326SignalErrorFull() instead")
    void createDistributionWithTags20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionConfig20190326SignalErrorFull() instead")
    void createFieldLevelEncryptionConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFieldLevelEncryptionProfile20190326SignalErrorFull() instead")
    void createFieldLevelEncryptionProfile20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFieldLevelEncryptionProfile20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20190326SignalErrorFull() instead")
    void createInvalidation20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPublicKey20190326SignalErrorFull() instead")
    void createPublicKey20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPublicKey20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20190326SignalErrorFull() instead")
    void createStreamingDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20190326SignalErrorFull() instead")
    void createStreamingDistributionWithTags20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20190326SignalErrorFull() instead")
    void deleteCloudFrontOriginAccessIdentity20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20190326SignalErrorFull() instead")
    void deleteDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionConfig20190326SignalErrorFull() instead")
    void deleteFieldLevelEncryptionConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFieldLevelEncryptionProfile20190326SignalErrorFull() instead")
    void deleteFieldLevelEncryptionProfile20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFieldLevelEncryptionProfile20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicKey20190326SignalErrorFull() instead")
    void deletePublicKey20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKey20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20190326SignalErrorFull() instead")
    void deleteStreamingDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20190326SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentity20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20190326SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentityConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20190326SignalErrorFull() instead")
    void getDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20190326SignalErrorFull() instead")
    void getDistributionConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryption20190326SignalErrorFull() instead")
    void getFieldLevelEncryption20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryption20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionConfig20190326SignalErrorFull() instead")
    void getFieldLevelEncryptionConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfile20190326SignalErrorFull() instead")
    void getFieldLevelEncryptionProfile20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfile20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldLevelEncryptionProfileConfig20190326SignalErrorFull() instead")
    void getFieldLevelEncryptionProfileConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldLevelEncryptionProfileConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20190326SignalErrorFull() instead")
    void getInvalidation20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKey20190326SignalErrorFull() instead")
    void getPublicKey20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKey20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeyConfig20190326SignalErrorFull() instead")
    void getPublicKeyConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeyConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20190326SignalErrorFull() instead")
    void getStreamingDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20190326SignalErrorFull() instead")
    void getStreamingDistributionConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20190326SignalErrorFull() instead")
    void listCloudFrontOriginAccessIdentities20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20190326SignalErrorFull() instead")
    void listDistributions20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20190326SignalErrorFull() instead")
    void listDistributionsByWebACLId20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionConfigs20190326SignalErrorFull() instead")
    void listFieldLevelEncryptionConfigs20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionConfigs20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFieldLevelEncryptionProfiles20190326SignalErrorFull() instead")
    void listFieldLevelEncryptionProfiles20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFieldLevelEncryptionProfiles20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20190326SignalErrorFull() instead")
    void listInvalidations20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPublicKeys20190326SignalErrorFull() instead")
    void listPublicKeys20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPublicKeys20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20190326SignalErrorFull() instead")
    void listStreamingDistributions20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20190326SignalErrorFull() instead")
    void listTagsForResource20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20190326SignalErrorFull() instead")
    void tagResource20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20190326SignalErrorFull() instead")
    void untagResource20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20190326SignalErrorFull() instead")
    void updateCloudFrontOriginAccessIdentity20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20190326SignalErrorFull() instead")
    void updateDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionConfig20190326SignalErrorFull() instead")
    void updateFieldLevelEncryptionConfig20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionConfig20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFieldLevelEncryptionProfile20190326SignalErrorFull() instead")
    void updateFieldLevelEncryptionProfile20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFieldLevelEncryptionProfile20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublicKey20190326SignalErrorFull() instead")
    void updatePublicKey20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublicKey20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20190326SignalErrorFull() instead")
    void updateStreamingDistribution20190326SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20190326SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
