/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate() {
    this->initializeModel();
}

OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::~OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate() {}

void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::initializeModel() {

    m_cloud_front_default_certificate_isSet = false;
    m_cloud_front_default_certificate_isValid = false;

    m_iam_certificate_id_isSet = false;
    m_iam_certificate_id_isValid = false;

    m_acm_certificate_arn_isSet = false;
    m_acm_certificate_arn_isValid = false;

    m_ssl_support_method_isSet = false;
    m_ssl_support_method_isValid = false;

    m_minimum_protocol_version_isSet = false;
    m_minimum_protocol_version_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_source_isSet = false;
    m_certificate_source_isValid = false;
}

void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::fromJsonObject(QJsonObject json) {

    m_cloud_front_default_certificate_isValid = ::OpenAPI::fromJsonValue(m_cloud_front_default_certificate, json[QString("CloudFrontDefaultCertificate")]);
    m_cloud_front_default_certificate_isSet = !json[QString("CloudFrontDefaultCertificate")].isNull() && m_cloud_front_default_certificate_isValid;

    m_iam_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_iam_certificate_id, json[QString("IAMCertificateId")]);
    m_iam_certificate_id_isSet = !json[QString("IAMCertificateId")].isNull() && m_iam_certificate_id_isValid;

    m_acm_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_acm_certificate_arn, json[QString("ACMCertificateArn")]);
    m_acm_certificate_arn_isSet = !json[QString("ACMCertificateArn")].isNull() && m_acm_certificate_arn_isValid;

    m_ssl_support_method_isValid = ::OpenAPI::fromJsonValue(m_ssl_support_method, json[QString("SSLSupportMethod")]);
    m_ssl_support_method_isSet = !json[QString("SSLSupportMethod")].isNull() && m_ssl_support_method_isValid;

    m_minimum_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_protocol_version, json[QString("MinimumProtocolVersion")]);
    m_minimum_protocol_version_isSet = !json[QString("MinimumProtocolVersion")].isNull() && m_minimum_protocol_version_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_certificate_source_isValid = ::OpenAPI::fromJsonValue(m_certificate_source, json[QString("CertificateSource")]);
    m_certificate_source_isSet = !json[QString("CertificateSource")].isNull() && m_certificate_source_isValid;
}

QString OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_front_default_certificate_isSet) {
        obj.insert(QString("CloudFrontDefaultCertificate"), ::OpenAPI::toJsonValue(m_cloud_front_default_certificate));
    }
    if (m_iam_certificate_id_isSet) {
        obj.insert(QString("IAMCertificateId"), ::OpenAPI::toJsonValue(m_iam_certificate_id));
    }
    if (m_acm_certificate_arn_isSet) {
        obj.insert(QString("ACMCertificateArn"), ::OpenAPI::toJsonValue(m_acm_certificate_arn));
    }
    if (m_ssl_support_method.isSet()) {
        obj.insert(QString("SSLSupportMethod"), ::OpenAPI::toJsonValue(m_ssl_support_method));
    }
    if (m_minimum_protocol_version.isSet()) {
        obj.insert(QString("MinimumProtocolVersion"), ::OpenAPI::toJsonValue(m_minimum_protocol_version));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_source.isSet()) {
        obj.insert(QString("CertificateSource"), ::OpenAPI::toJsonValue(m_certificate_source));
    }
    return obj;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getCloudFrontDefaultCertificate() const {
    return m_cloud_front_default_certificate;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setCloudFrontDefaultCertificate(const bool &cloud_front_default_certificate) {
    m_cloud_front_default_certificate = cloud_front_default_certificate;
    m_cloud_front_default_certificate_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_cloud_front_default_certificate_Set() const{
    return m_cloud_front_default_certificate_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_cloud_front_default_certificate_Valid() const{
    return m_cloud_front_default_certificate_isValid;
}

QString OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getIamCertificateId() const {
    return m_iam_certificate_id;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setIamCertificateId(const QString &iam_certificate_id) {
    m_iam_certificate_id = iam_certificate_id;
    m_iam_certificate_id_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_iam_certificate_id_Set() const{
    return m_iam_certificate_id_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_iam_certificate_id_Valid() const{
    return m_iam_certificate_id_isValid;
}

QString OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getAcmCertificateArn() const {
    return m_acm_certificate_arn;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setAcmCertificateArn(const QString &acm_certificate_arn) {
    m_acm_certificate_arn = acm_certificate_arn;
    m_acm_certificate_arn_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_acm_certificate_arn_Set() const{
    return m_acm_certificate_arn_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_acm_certificate_arn_Valid() const{
    return m_acm_certificate_arn_isValid;
}

OAISSLSupportMethod OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getSslSupportMethod() const {
    return m_ssl_support_method;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setSslSupportMethod(const OAISSLSupportMethod &ssl_support_method) {
    m_ssl_support_method = ssl_support_method;
    m_ssl_support_method_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_ssl_support_method_Set() const{
    return m_ssl_support_method_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_ssl_support_method_Valid() const{
    return m_ssl_support_method_isValid;
}

OAIMinimumProtocolVersion OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getMinimumProtocolVersion() const {
    return m_minimum_protocol_version;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setMinimumProtocolVersion(const OAIMinimumProtocolVersion &minimum_protocol_version) {
    m_minimum_protocol_version = minimum_protocol_version;
    m_minimum_protocol_version_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_minimum_protocol_version_Set() const{
    return m_minimum_protocol_version_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_minimum_protocol_version_Valid() const{
    return m_minimum_protocol_version_isValid;
}

QString OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getCertificate() const {
    return m_certificate;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAICertificateSource OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::getCertificateSource() const {
    return m_certificate_source;
}
void OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::setCertificateSource(const OAICertificateSource &certificate_source) {
    m_certificate_source = certificate_source;
    m_certificate_source_isSet = true;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_certificate_source_Set() const{
    return m_certificate_source_isSet;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::is_certificate_source_Valid() const{
    return m_certificate_source_isValid;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_front_default_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acm_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_support_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_protocol_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDistribution2019_03_26_request_DistributionConfig_ViewerCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
