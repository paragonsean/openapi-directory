/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIViewerCertificate.h
 *
 * &lt;p&gt;A complex type that determines the distribution’s SSL/TLS configuration for communicating with viewers.&lt;/p&gt; &lt;p&gt;If the distribution doesn’t use &lt;code&gt;Aliases&lt;/code&gt; (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the CloudFront domain name such as &lt;code&gt;d111111abcdef8.cloudfront.net&lt;/code&gt;—set &lt;code&gt;CloudFrontDefaultCertificate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and leave all other fields empty.&lt;/p&gt; &lt;p&gt;If the distribution uses &lt;code&gt;Aliases&lt;/code&gt; (alternate domain names or CNAMEs), use the fields in this type to specify the following settings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Which viewers the distribution accepts HTTPS connections from: only viewers that support &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Server_Name_Indication\&quot;&gt;server name indication (SNI)&lt;/a&gt; (recommended), or all viewers including those that don’t support SNI.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To accept HTTPS connections from only viewers that support SNI, set &lt;code&gt;SSLSupportMethod&lt;/code&gt; to &lt;code&gt;sni-only&lt;/code&gt;. This is recommended. Most browsers and clients support SNI. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To accept HTTPS connections from all viewers, including those that don’t support SNI, set &lt;code&gt;SSLSupportMethod&lt;/code&gt; to &lt;code&gt;vip&lt;/code&gt;. This is not recommended, and results in additional monthly charges from CloudFront. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The minimum SSL/TLS protocol version that the distribution can use to communicate with viewers. To specify a minimum version, choose a value for &lt;code&gt;MinimumProtocolVersion&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy\&quot;&gt;Security Policy&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The location of the SSL/TLS certificate, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html\&quot;&gt;AWS Certificate Manager (ACM)&lt;/a&gt; (recommended) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\&quot;&gt;AWS Identity and Access Management (AWS IAM)&lt;/a&gt;. You specify the location by setting a value in one of the following fields (not both):&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACMCertificateArn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IAMCertificateId&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to HTTPS, use &lt;code&gt;ViewerProtocolPolicy&lt;/code&gt; in the &lt;code&gt;CacheBehavior&lt;/code&gt; or &lt;code&gt;DefaultCacheBehavior&lt;/code&gt;. To specify how CloudFront should use SSL/TLS to communicate with your custom origin, use &lt;code&gt;CustomOriginConfig&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html\&quot;&gt;Using HTTPS with CloudFront&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html\&quot;&gt; Using Alternate Domain Names and HTTPS&lt;/a&gt; in the &lt;i&gt;Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIViewerCertificate_H
#define OAIViewerCertificate_H

#include <QJsonObject>

#include "OAICertificateSource.h"
#include "OAIMinimumProtocolVersion.h"
#include "OAISSLSupportMethod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIViewerCertificate : public OAIObject {
public:
    OAIViewerCertificate();
    OAIViewerCertificate(QString json);
    ~OAIViewerCertificate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getCloudFrontDefaultCertificate() const;
    void setCloudFrontDefaultCertificate(const bool &cloud_front_default_certificate);
    bool is_cloud_front_default_certificate_Set() const;
    bool is_cloud_front_default_certificate_Valid() const;

    QString getIamCertificateId() const;
    void setIamCertificateId(const QString &iam_certificate_id);
    bool is_iam_certificate_id_Set() const;
    bool is_iam_certificate_id_Valid() const;

    QString getAcmCertificateArn() const;
    void setAcmCertificateArn(const QString &acm_certificate_arn);
    bool is_acm_certificate_arn_Set() const;
    bool is_acm_certificate_arn_Valid() const;

    OAISSLSupportMethod getSslSupportMethod() const;
    void setSslSupportMethod(const OAISSLSupportMethod &ssl_support_method);
    bool is_ssl_support_method_Set() const;
    bool is_ssl_support_method_Valid() const;

    OAIMinimumProtocolVersion getMinimumProtocolVersion() const;
    void setMinimumProtocolVersion(const OAIMinimumProtocolVersion &minimum_protocol_version);
    bool is_minimum_protocol_version_Set() const;
    bool is_minimum_protocol_version_Valid() const;

    QString getCertificate() const;
    void setCertificate(const QString &certificate);
    bool is_certificate_Set() const;
    bool is_certificate_Valid() const;

    OAICertificateSource getCertificateSource() const;
    void setCertificateSource(const OAICertificateSource &certificate_source);
    bool is_certificate_source_Set() const;
    bool is_certificate_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_cloud_front_default_certificate;
    bool m_cloud_front_default_certificate_isSet;
    bool m_cloud_front_default_certificate_isValid;

    QString m_iam_certificate_id;
    bool m_iam_certificate_id_isSet;
    bool m_iam_certificate_id_isValid;

    QString m_acm_certificate_arn;
    bool m_acm_certificate_arn_isSet;
    bool m_acm_certificate_arn_isValid;

    OAISSLSupportMethod m_ssl_support_method;
    bool m_ssl_support_method_isSet;
    bool m_ssl_support_method_isValid;

    OAIMinimumProtocolVersion m_minimum_protocol_version;
    bool m_minimum_protocol_version_isSet;
    bool m_minimum_protocol_version_isValid;

    QString m_certificate;
    bool m_certificate_isSet;
    bool m_certificate_isValid;

    OAICertificateSource m_certificate_source;
    bool m_certificate_source_isSet;
    bool m_certificate_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIViewerCertificate)

#endif // OAIViewerCertificate_H
