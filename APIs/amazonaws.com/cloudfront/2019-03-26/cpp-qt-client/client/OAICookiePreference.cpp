/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICookiePreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICookiePreference::OAICookiePreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICookiePreference::OAICookiePreference() {
    this->initializeModel();
}

OAICookiePreference::~OAICookiePreference() {}

void OAICookiePreference::initializeModel() {

    m_forward_isSet = false;
    m_forward_isValid = false;

    m_whitelisted_names_isSet = false;
    m_whitelisted_names_isValid = false;
}

void OAICookiePreference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICookiePreference::fromJsonObject(QJsonObject json) {

    m_forward_isValid = ::OpenAPI::fromJsonValue(m_forward, json[QString("Forward")]);
    m_forward_isSet = !json[QString("Forward")].isNull() && m_forward_isValid;

    m_whitelisted_names_isValid = ::OpenAPI::fromJsonValue(m_whitelisted_names, json[QString("WhitelistedNames")]);
    m_whitelisted_names_isSet = !json[QString("WhitelistedNames")].isNull() && m_whitelisted_names_isValid;
}

QString OAICookiePreference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICookiePreference::asJsonObject() const {
    QJsonObject obj;
    if (m_forward.isSet()) {
        obj.insert(QString("Forward"), ::OpenAPI::toJsonValue(m_forward));
    }
    if (m_whitelisted_names.isSet()) {
        obj.insert(QString("WhitelistedNames"), ::OpenAPI::toJsonValue(m_whitelisted_names));
    }
    return obj;
}

OAIItemSelection OAICookiePreference::getForward() const {
    return m_forward;
}
void OAICookiePreference::setForward(const OAIItemSelection &forward) {
    m_forward = forward;
    m_forward_isSet = true;
}

bool OAICookiePreference::is_forward_Set() const{
    return m_forward_isSet;
}

bool OAICookiePreference::is_forward_Valid() const{
    return m_forward_isValid;
}

OAICookiePreference_WhitelistedNames OAICookiePreference::getWhitelistedNames() const {
    return m_whitelisted_names;
}
void OAICookiePreference::setWhitelistedNames(const OAICookiePreference_WhitelistedNames &whitelisted_names) {
    m_whitelisted_names = whitelisted_names;
    m_whitelisted_names_isSet = true;
}

bool OAICookiePreference::is_whitelisted_names_Set() const{
    return m_whitelisted_names_isSet;
}

bool OAICookiePreference::is_whitelisted_names_Valid() const{
    return m_whitelisted_names_isValid;
}

bool OAICookiePreference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forward.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelisted_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICookiePreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_forward_isValid && true;
}

} // namespace OpenAPI
