/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about CloudFront API actions, data types, and errors. For detailed information about CloudFront features, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2019-03-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaFunctionAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaFunctionAssociation::OAILambdaFunctionAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaFunctionAssociation::OAILambdaFunctionAssociation() {
    this->initializeModel();
}

OAILambdaFunctionAssociation::~OAILambdaFunctionAssociation() {}

void OAILambdaFunctionAssociation::initializeModel() {

    m_lambda_function_arn_isSet = false;
    m_lambda_function_arn_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_include_body_isSet = false;
    m_include_body_isValid = false;
}

void OAILambdaFunctionAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaFunctionAssociation::fromJsonObject(QJsonObject json) {

    m_lambda_function_arn_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_arn, json[QString("LambdaFunctionARN")]);
    m_lambda_function_arn_isSet = !json[QString("LambdaFunctionARN")].isNull() && m_lambda_function_arn_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;

    m_include_body_isValid = ::OpenAPI::fromJsonValue(m_include_body, json[QString("IncludeBody")]);
    m_include_body_isSet = !json[QString("IncludeBody")].isNull() && m_include_body_isValid;
}

QString OAILambdaFunctionAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaFunctionAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_lambda_function_arn_isSet) {
        obj.insert(QString("LambdaFunctionARN"), ::OpenAPI::toJsonValue(m_lambda_function_arn));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_include_body_isSet) {
        obj.insert(QString("IncludeBody"), ::OpenAPI::toJsonValue(m_include_body));
    }
    return obj;
}

QString OAILambdaFunctionAssociation::getLambdaFunctionArn() const {
    return m_lambda_function_arn;
}
void OAILambdaFunctionAssociation::setLambdaFunctionArn(const QString &lambda_function_arn) {
    m_lambda_function_arn = lambda_function_arn;
    m_lambda_function_arn_isSet = true;
}

bool OAILambdaFunctionAssociation::is_lambda_function_arn_Set() const{
    return m_lambda_function_arn_isSet;
}

bool OAILambdaFunctionAssociation::is_lambda_function_arn_Valid() const{
    return m_lambda_function_arn_isValid;
}

OAIEventType OAILambdaFunctionAssociation::getEventType() const {
    return m_event_type;
}
void OAILambdaFunctionAssociation::setEventType(const OAIEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAILambdaFunctionAssociation::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAILambdaFunctionAssociation::is_event_type_Valid() const{
    return m_event_type_isValid;
}

bool OAILambdaFunctionAssociation::getIncludeBody() const {
    return m_include_body;
}
void OAILambdaFunctionAssociation::setIncludeBody(const bool &include_body) {
    m_include_body = include_body;
    m_include_body_isSet = true;
}

bool OAILambdaFunctionAssociation::is_include_body_Set() const{
    return m_include_body_isSet;
}

bool OAILambdaFunctionAssociation::is_include_body_Valid() const{
    return m_include_body_isValid;
}

bool OAILambdaFunctionAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lambda_function_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaFunctionAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lambda_function_arn_isValid && m_event_type_isValid && true;
}

} // namespace OpenAPI
