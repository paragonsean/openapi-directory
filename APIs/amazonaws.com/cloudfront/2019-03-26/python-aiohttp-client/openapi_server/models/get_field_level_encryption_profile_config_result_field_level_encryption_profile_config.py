# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_field_level_encryption_profile20190326_request_field_level_encryption_profile_config_encryption_entities import CreateFieldLevelEncryptionProfile20190326RequestFieldLevelEncryptionProfileConfigEncryptionEntities
from openapi_server import util


class GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, caller_reference: str=None, comment: str=None, encryption_entities: CreateFieldLevelEncryptionProfile20190326RequestFieldLevelEncryptionProfileConfigEncryptionEntities=None):
        """GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig - a model defined in OpenAPI

        :param name: The name of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :param caller_reference: The caller_reference of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :param comment: The comment of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :param encryption_entities: The encryption_entities of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        """
        self.openapi_types = {
            'name': str,
            'caller_reference': str,
            'comment': str,
            'encryption_entities': CreateFieldLevelEncryptionProfile20190326RequestFieldLevelEncryptionProfileConfigEncryptionEntities
        }

        self.attribute_map = {
            'name': 'Name',
            'caller_reference': 'CallerReference',
            'comment': 'Comment',
            'encryption_entities': 'EncryptionEntities'
        }

        self._name = name
        self._caller_reference = caller_reference
        self._comment = comment
        self._encryption_entities = encryption_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFieldLevelEncryptionProfileConfigResult_FieldLevelEncryptionProfileConfig of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :return: The name of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :param name: The name of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def caller_reference(self):
        """Gets the caller_reference of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :return: The caller_reference of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :rtype: str
        """
        return self._caller_reference

    @caller_reference.setter
    def caller_reference(self, caller_reference):
        """Sets the caller_reference of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :param caller_reference: The caller_reference of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :type caller_reference: str
        """
        if caller_reference is None:
            raise ValueError("Invalid value for `caller_reference`, must not be `None`")

        self._caller_reference = caller_reference

    @property
    def comment(self):
        """Gets the comment of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :return: The comment of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :param comment: The comment of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :type comment: str
        """

        self._comment = comment

    @property
    def encryption_entities(self):
        """Gets the encryption_entities of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :return: The encryption_entities of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :rtype: CreateFieldLevelEncryptionProfile20190326RequestFieldLevelEncryptionProfileConfigEncryptionEntities
        """
        return self._encryption_entities

    @encryption_entities.setter
    def encryption_entities(self, encryption_entities):
        """Sets the encryption_entities of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.


        :param encryption_entities: The encryption_entities of this GetFieldLevelEncryptionProfileConfigResultFieldLevelEncryptionProfileConfig.
        :type encryption_entities: CreateFieldLevelEncryptionProfile20190326RequestFieldLevelEncryptionProfileConfigEncryptionEntities
        """
        if encryption_entities is None:
            raise ValueError("Invalid value for `encryption_entities`, must not be `None`")

        self._encryption_entities = encryption_entities
