# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.streaming_distribution_active_trusted_signers import StreamingDistributionActiveTrustedSigners
from openapi_server.models.streaming_distribution_streaming_distribution_config import StreamingDistributionStreamingDistributionConfig
from openapi_server import util


class StreamingDistribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, status: str=None, last_modified_time: datetime=None, domain_name: str=None, active_trusted_signers: StreamingDistributionActiveTrustedSigners=None, streaming_distribution_config: StreamingDistributionStreamingDistributionConfig=None):
        """StreamingDistribution - a model defined in OpenAPI

        :param id: The id of this StreamingDistribution.
        :param arn: The arn of this StreamingDistribution.
        :param status: The status of this StreamingDistribution.
        :param last_modified_time: The last_modified_time of this StreamingDistribution.
        :param domain_name: The domain_name of this StreamingDistribution.
        :param active_trusted_signers: The active_trusted_signers of this StreamingDistribution.
        :param streaming_distribution_config: The streaming_distribution_config of this StreamingDistribution.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'status': str,
            'last_modified_time': datetime,
            'domain_name': str,
            'active_trusted_signers': StreamingDistributionActiveTrustedSigners,
            'streaming_distribution_config': StreamingDistributionStreamingDistributionConfig
        }

        self.attribute_map = {
            'id': 'Id',
            'arn': 'ARN',
            'status': 'Status',
            'last_modified_time': 'LastModifiedTime',
            'domain_name': 'DomainName',
            'active_trusted_signers': 'ActiveTrustedSigners',
            'streaming_distribution_config': 'StreamingDistributionConfig'
        }

        self._id = id
        self._arn = arn
        self._status = status
        self._last_modified_time = last_modified_time
        self._domain_name = domain_name
        self._active_trusted_signers = active_trusted_signers
        self._streaming_distribution_config = streaming_distribution_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingDistribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingDistribution of this StreamingDistribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StreamingDistribution.


        :return: The id of this StreamingDistribution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamingDistribution.


        :param id: The id of this StreamingDistribution.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this StreamingDistribution.


        :return: The arn of this StreamingDistribution.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StreamingDistribution.


        :param arn: The arn of this StreamingDistribution.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def status(self):
        """Gets the status of this StreamingDistribution.


        :return: The status of this StreamingDistribution.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StreamingDistribution.


        :param status: The status of this StreamingDistribution.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this StreamingDistribution.


        :return: The last_modified_time of this StreamingDistribution.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this StreamingDistribution.


        :param last_modified_time: The last_modified_time of this StreamingDistribution.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def domain_name(self):
        """Gets the domain_name of this StreamingDistribution.


        :return: The domain_name of this StreamingDistribution.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this StreamingDistribution.


        :param domain_name: The domain_name of this StreamingDistribution.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def active_trusted_signers(self):
        """Gets the active_trusted_signers of this StreamingDistribution.


        :return: The active_trusted_signers of this StreamingDistribution.
        :rtype: StreamingDistributionActiveTrustedSigners
        """
        return self._active_trusted_signers

    @active_trusted_signers.setter
    def active_trusted_signers(self, active_trusted_signers):
        """Sets the active_trusted_signers of this StreamingDistribution.


        :param active_trusted_signers: The active_trusted_signers of this StreamingDistribution.
        :type active_trusted_signers: StreamingDistributionActiveTrustedSigners
        """
        if active_trusted_signers is None:
            raise ValueError("Invalid value for `active_trusted_signers`, must not be `None`")

        self._active_trusted_signers = active_trusted_signers

    @property
    def streaming_distribution_config(self):
        """Gets the streaming_distribution_config of this StreamingDistribution.


        :return: The streaming_distribution_config of this StreamingDistribution.
        :rtype: StreamingDistributionStreamingDistributionConfig
        """
        return self._streaming_distribution_config

    @streaming_distribution_config.setter
    def streaming_distribution_config(self, streaming_distribution_config):
        """Sets the streaming_distribution_config of this StreamingDistribution.


        :param streaming_distribution_config: The streaming_distribution_config of this StreamingDistribution.
        :type streaming_distribution_config: StreamingDistributionStreamingDistributionConfig
        """
        if streaming_distribution_config is None:
            raise ValueError("Invalid value for `streaming_distribution_config`, must not be `None`")

        self._streaming_distribution_config = streaming_distribution_config
