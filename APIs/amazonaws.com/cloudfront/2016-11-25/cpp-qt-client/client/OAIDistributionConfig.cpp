/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionConfig::OAIDistributionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionConfig::OAIDistributionConfig() {
    this->initializeModel();
}

OAIDistributionConfig::~OAIDistributionConfig() {}

void OAIDistributionConfig::initializeModel() {

    m_caller_reference_isSet = false;
    m_caller_reference_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_default_root_object_isSet = false;
    m_default_root_object_isValid = false;

    m_origins_isSet = false;
    m_origins_isValid = false;

    m_default_cache_behavior_isSet = false;
    m_default_cache_behavior_isValid = false;

    m_cache_behaviors_isSet = false;
    m_cache_behaviors_isValid = false;

    m_custom_error_responses_isSet = false;
    m_custom_error_responses_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_price_class_isSet = false;
    m_price_class_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_viewer_certificate_isSet = false;
    m_viewer_certificate_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_web_aclid_isSet = false;
    m_web_aclid_isValid = false;

    m_http_version_isSet = false;
    m_http_version_isValid = false;

    m_is_ipv6_enabled_isSet = false;
    m_is_ipv6_enabled_isValid = false;
}

void OAIDistributionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionConfig::fromJsonObject(QJsonObject json) {

    m_caller_reference_isValid = ::OpenAPI::fromJsonValue(m_caller_reference, json[QString("CallerReference")]);
    m_caller_reference_isSet = !json[QString("CallerReference")].isNull() && m_caller_reference_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_default_root_object_isValid = ::OpenAPI::fromJsonValue(m_default_root_object, json[QString("DefaultRootObject")]);
    m_default_root_object_isSet = !json[QString("DefaultRootObject")].isNull() && m_default_root_object_isValid;

    m_origins_isValid = ::OpenAPI::fromJsonValue(m_origins, json[QString("Origins")]);
    m_origins_isSet = !json[QString("Origins")].isNull() && m_origins_isValid;

    m_default_cache_behavior_isValid = ::OpenAPI::fromJsonValue(m_default_cache_behavior, json[QString("DefaultCacheBehavior")]);
    m_default_cache_behavior_isSet = !json[QString("DefaultCacheBehavior")].isNull() && m_default_cache_behavior_isValid;

    m_cache_behaviors_isValid = ::OpenAPI::fromJsonValue(m_cache_behaviors, json[QString("CacheBehaviors")]);
    m_cache_behaviors_isSet = !json[QString("CacheBehaviors")].isNull() && m_cache_behaviors_isValid;

    m_custom_error_responses_isValid = ::OpenAPI::fromJsonValue(m_custom_error_responses, json[QString("CustomErrorResponses")]);
    m_custom_error_responses_isSet = !json[QString("CustomErrorResponses")].isNull() && m_custom_error_responses_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("Comment")]);
    m_comment_isSet = !json[QString("Comment")].isNull() && m_comment_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("Logging")]);
    m_logging_isSet = !json[QString("Logging")].isNull() && m_logging_isValid;

    m_price_class_isValid = ::OpenAPI::fromJsonValue(m_price_class, json[QString("PriceClass")]);
    m_price_class_isSet = !json[QString("PriceClass")].isNull() && m_price_class_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_viewer_certificate_isValid = ::OpenAPI::fromJsonValue(m_viewer_certificate, json[QString("ViewerCertificate")]);
    m_viewer_certificate_isSet = !json[QString("ViewerCertificate")].isNull() && m_viewer_certificate_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("Restrictions")]);
    m_restrictions_isSet = !json[QString("Restrictions")].isNull() && m_restrictions_isValid;

    m_web_aclid_isValid = ::OpenAPI::fromJsonValue(m_web_aclid, json[QString("WebACLId")]);
    m_web_aclid_isSet = !json[QString("WebACLId")].isNull() && m_web_aclid_isValid;

    m_http_version_isValid = ::OpenAPI::fromJsonValue(m_http_version, json[QString("HttpVersion")]);
    m_http_version_isSet = !json[QString("HttpVersion")].isNull() && m_http_version_isValid;

    m_is_ipv6_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_ipv6_enabled, json[QString("IsIPV6Enabled")]);
    m_is_ipv6_enabled_isSet = !json[QString("IsIPV6Enabled")].isNull() && m_is_ipv6_enabled_isValid;
}

QString OAIDistributionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_caller_reference_isSet) {
        obj.insert(QString("CallerReference"), ::OpenAPI::toJsonValue(m_caller_reference));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_default_root_object_isSet) {
        obj.insert(QString("DefaultRootObject"), ::OpenAPI::toJsonValue(m_default_root_object));
    }
    if (m_origins.isSet()) {
        obj.insert(QString("Origins"), ::OpenAPI::toJsonValue(m_origins));
    }
    if (m_default_cache_behavior.isSet()) {
        obj.insert(QString("DefaultCacheBehavior"), ::OpenAPI::toJsonValue(m_default_cache_behavior));
    }
    if (m_cache_behaviors.isSet()) {
        obj.insert(QString("CacheBehaviors"), ::OpenAPI::toJsonValue(m_cache_behaviors));
    }
    if (m_custom_error_responses.isSet()) {
        obj.insert(QString("CustomErrorResponses"), ::OpenAPI::toJsonValue(m_custom_error_responses));
    }
    if (m_comment_isSet) {
        obj.insert(QString("Comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("Logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_price_class.isSet()) {
        obj.insert(QString("PriceClass"), ::OpenAPI::toJsonValue(m_price_class));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_viewer_certificate.isSet()) {
        obj.insert(QString("ViewerCertificate"), ::OpenAPI::toJsonValue(m_viewer_certificate));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("Restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_web_aclid_isSet) {
        obj.insert(QString("WebACLId"), ::OpenAPI::toJsonValue(m_web_aclid));
    }
    if (m_http_version.isSet()) {
        obj.insert(QString("HttpVersion"), ::OpenAPI::toJsonValue(m_http_version));
    }
    if (m_is_ipv6_enabled_isSet) {
        obj.insert(QString("IsIPV6Enabled"), ::OpenAPI::toJsonValue(m_is_ipv6_enabled));
    }
    return obj;
}

QString OAIDistributionConfig::getCallerReference() const {
    return m_caller_reference;
}
void OAIDistributionConfig::setCallerReference(const QString &caller_reference) {
    m_caller_reference = caller_reference;
    m_caller_reference_isSet = true;
}

bool OAIDistributionConfig::is_caller_reference_Set() const{
    return m_caller_reference_isSet;
}

bool OAIDistributionConfig::is_caller_reference_Valid() const{
    return m_caller_reference_isValid;
}

OAICreateDistribution2016_11_25_request_DistributionConfig_Aliases OAIDistributionConfig::getAliases() const {
    return m_aliases;
}
void OAIDistributionConfig::setAliases(const OAICreateDistribution2016_11_25_request_DistributionConfig_Aliases &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIDistributionConfig::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIDistributionConfig::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAIDistributionConfig::getDefaultRootObject() const {
    return m_default_root_object;
}
void OAIDistributionConfig::setDefaultRootObject(const QString &default_root_object) {
    m_default_root_object = default_root_object;
    m_default_root_object_isSet = true;
}

bool OAIDistributionConfig::is_default_root_object_Set() const{
    return m_default_root_object_isSet;
}

bool OAIDistributionConfig::is_default_root_object_Valid() const{
    return m_default_root_object_isValid;
}

OAICreateDistribution2016_11_25_request_DistributionConfig_Origins OAIDistributionConfig::getOrigins() const {
    return m_origins;
}
void OAIDistributionConfig::setOrigins(const OAICreateDistribution2016_11_25_request_DistributionConfig_Origins &origins) {
    m_origins = origins;
    m_origins_isSet = true;
}

bool OAIDistributionConfig::is_origins_Set() const{
    return m_origins_isSet;
}

bool OAIDistributionConfig::is_origins_Valid() const{
    return m_origins_isValid;
}

OAICreateDistribution2016_11_25_request_DistributionConfig_DefaultCacheBehavior OAIDistributionConfig::getDefaultCacheBehavior() const {
    return m_default_cache_behavior;
}
void OAIDistributionConfig::setDefaultCacheBehavior(const OAICreateDistribution2016_11_25_request_DistributionConfig_DefaultCacheBehavior &default_cache_behavior) {
    m_default_cache_behavior = default_cache_behavior;
    m_default_cache_behavior_isSet = true;
}

bool OAIDistributionConfig::is_default_cache_behavior_Set() const{
    return m_default_cache_behavior_isSet;
}

bool OAIDistributionConfig::is_default_cache_behavior_Valid() const{
    return m_default_cache_behavior_isValid;
}

OAICreateDistribution2016_11_25_request_DistributionConfig_CacheBehaviors OAIDistributionConfig::getCacheBehaviors() const {
    return m_cache_behaviors;
}
void OAIDistributionConfig::setCacheBehaviors(const OAICreateDistribution2016_11_25_request_DistributionConfig_CacheBehaviors &cache_behaviors) {
    m_cache_behaviors = cache_behaviors;
    m_cache_behaviors_isSet = true;
}

bool OAIDistributionConfig::is_cache_behaviors_Set() const{
    return m_cache_behaviors_isSet;
}

bool OAIDistributionConfig::is_cache_behaviors_Valid() const{
    return m_cache_behaviors_isValid;
}

OAICreateDistribution2016_11_25_request_DistributionConfig_CustomErrorResponses OAIDistributionConfig::getCustomErrorResponses() const {
    return m_custom_error_responses;
}
void OAIDistributionConfig::setCustomErrorResponses(const OAICreateDistribution2016_11_25_request_DistributionConfig_CustomErrorResponses &custom_error_responses) {
    m_custom_error_responses = custom_error_responses;
    m_custom_error_responses_isSet = true;
}

bool OAIDistributionConfig::is_custom_error_responses_Set() const{
    return m_custom_error_responses_isSet;
}

bool OAIDistributionConfig::is_custom_error_responses_Valid() const{
    return m_custom_error_responses_isValid;
}

QString OAIDistributionConfig::getComment() const {
    return m_comment;
}
void OAIDistributionConfig::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDistributionConfig::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDistributionConfig::is_comment_Valid() const{
    return m_comment_isValid;
}

OAICreateDistribution2016_11_25_request_DistributionConfig_Logging OAIDistributionConfig::getLogging() const {
    return m_logging;
}
void OAIDistributionConfig::setLogging(const OAICreateDistribution2016_11_25_request_DistributionConfig_Logging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIDistributionConfig::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIDistributionConfig::is_logging_Valid() const{
    return m_logging_isValid;
}

OAIPriceClass OAIDistributionConfig::getPriceClass() const {
    return m_price_class;
}
void OAIDistributionConfig::setPriceClass(const OAIPriceClass &price_class) {
    m_price_class = price_class;
    m_price_class_isSet = true;
}

bool OAIDistributionConfig::is_price_class_Set() const{
    return m_price_class_isSet;
}

bool OAIDistributionConfig::is_price_class_Valid() const{
    return m_price_class_isValid;
}

bool OAIDistributionConfig::getEnabled() const {
    return m_enabled;
}
void OAIDistributionConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDistributionConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDistributionConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIViewerCertificate OAIDistributionConfig::getViewerCertificate() const {
    return m_viewer_certificate;
}
void OAIDistributionConfig::setViewerCertificate(const OAIViewerCertificate &viewer_certificate) {
    m_viewer_certificate = viewer_certificate;
    m_viewer_certificate_isSet = true;
}

bool OAIDistributionConfig::is_viewer_certificate_Set() const{
    return m_viewer_certificate_isSet;
}

bool OAIDistributionConfig::is_viewer_certificate_Valid() const{
    return m_viewer_certificate_isValid;
}

OAIRestrictions OAIDistributionConfig::getRestrictions() const {
    return m_restrictions;
}
void OAIDistributionConfig::setRestrictions(const OAIRestrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIDistributionConfig::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIDistributionConfig::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAIDistributionConfig::getWebAclid() const {
    return m_web_aclid;
}
void OAIDistributionConfig::setWebAclid(const QString &web_aclid) {
    m_web_aclid = web_aclid;
    m_web_aclid_isSet = true;
}

bool OAIDistributionConfig::is_web_aclid_Set() const{
    return m_web_aclid_isSet;
}

bool OAIDistributionConfig::is_web_aclid_Valid() const{
    return m_web_aclid_isValid;
}

OAIHttpVersion OAIDistributionConfig::getHttpVersion() const {
    return m_http_version;
}
void OAIDistributionConfig::setHttpVersion(const OAIHttpVersion &http_version) {
    m_http_version = http_version;
    m_http_version_isSet = true;
}

bool OAIDistributionConfig::is_http_version_Set() const{
    return m_http_version_isSet;
}

bool OAIDistributionConfig::is_http_version_Valid() const{
    return m_http_version_isValid;
}

bool OAIDistributionConfig::getIsIpv6Enabled() const {
    return m_is_ipv6_enabled;
}
void OAIDistributionConfig::setIsIpv6Enabled(const bool &is_ipv6_enabled) {
    m_is_ipv6_enabled = is_ipv6_enabled;
    m_is_ipv6_enabled_isSet = true;
}

bool OAIDistributionConfig::is_is_ipv6_enabled_Set() const{
    return m_is_ipv6_enabled_isSet;
}

bool OAIDistributionConfig::is_is_ipv6_enabled_Valid() const{
    return m_is_ipv6_enabled_isValid;
}

bool OAIDistributionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caller_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_root_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_cache_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_behaviors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_error_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_aclid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ipv6_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caller_reference_isValid && m_origins_isValid && m_default_cache_behavior_isValid && m_comment_isValid && m_enabled_isValid && true;
}

} // namespace OpenAPI
