/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMethod::OAIMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMethod::OAIMethod() {
    this->initializeModel();
}

OAIMethod::~OAIMethod() {}

void OAIMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("GET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::GET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::HEAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::POST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::PUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::PATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPTIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::OPTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMethod::DELETE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMethod::GET:
            val = "GET";
            break;
        case eOAIMethod::HEAD:
            val = "HEAD";
            break;
        case eOAIMethod::POST:
            val = "POST";
            break;
        case eOAIMethod::PUT:
            val = "PUT";
            break;
        case eOAIMethod::PATCH:
            val = "PATCH";
            break;
        case eOAIMethod::OPTIONS:
            val = "OPTIONS";
            break;
        case eOAIMethod::DELETE:
            val = "DELETE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMethod::eOAIMethod OAIMethod::getValue() const {
    return m_value;
}

void OAIMethod::setValue(const OAIMethod::eOAIMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
