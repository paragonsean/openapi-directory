/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingDistribution_ActiveTrustedSigners.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingDistribution_ActiveTrustedSigners::OAIStreamingDistribution_ActiveTrustedSigners(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingDistribution_ActiveTrustedSigners::OAIStreamingDistribution_ActiveTrustedSigners() {
    this->initializeModel();
}

OAIStreamingDistribution_ActiveTrustedSigners::~OAIStreamingDistribution_ActiveTrustedSigners() {}

void OAIStreamingDistribution_ActiveTrustedSigners::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIStreamingDistribution_ActiveTrustedSigners::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingDistribution_ActiveTrustedSigners::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;
}

QString OAIStreamingDistribution_ActiveTrustedSigners::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingDistribution_ActiveTrustedSigners::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::getEnabled() const {
    return m_enabled;
}
void OAIStreamingDistribution_ActiveTrustedSigners::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIStreamingDistribution_ActiveTrustedSigners::getQuantity() const {
    return m_quantity;
}
void OAIStreamingDistribution_ActiveTrustedSigners::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QList OAIStreamingDistribution_ActiveTrustedSigners::getItems() const {
    return m_items;
}
void OAIStreamingDistribution_ActiveTrustedSigners::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::is_items_Set() const{
    return m_items_isSet;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingDistribution_ActiveTrustedSigners::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
