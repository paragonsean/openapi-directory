/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvalidation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvalidation::OAIInvalidation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvalidation::OAIInvalidation() {
    this->initializeModel();
}

OAIInvalidation::~OAIInvalidation() {}

void OAIInvalidation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_invalidation_batch_isSet = false;
    m_invalidation_batch_isValid = false;
}

void OAIInvalidation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvalidation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_invalidation_batch_isValid = ::OpenAPI::fromJsonValue(m_invalidation_batch, json[QString("InvalidationBatch")]);
    m_invalidation_batch_isSet = !json[QString("InvalidationBatch")].isNull() && m_invalidation_batch_isValid;
}

QString OAIInvalidation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvalidation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_invalidation_batch.isSet()) {
        obj.insert(QString("InvalidationBatch"), ::OpenAPI::toJsonValue(m_invalidation_batch));
    }
    return obj;
}

QString OAIInvalidation::getId() const {
    return m_id;
}
void OAIInvalidation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInvalidation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInvalidation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInvalidation::getStatus() const {
    return m_status;
}
void OAIInvalidation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvalidation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvalidation::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIInvalidation::getCreateTime() const {
    return m_create_time;
}
void OAIInvalidation::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInvalidation::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInvalidation::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIInvalidation_InvalidationBatch OAIInvalidation::getInvalidationBatch() const {
    return m_invalidation_batch;
}
void OAIInvalidation::setInvalidationBatch(const OAIInvalidation_InvalidationBatch &invalidation_batch) {
    m_invalidation_batch = invalidation_batch;
    m_invalidation_batch_isSet = true;
}

bool OAIInvalidation::is_invalidation_batch_Set() const{
    return m_invalidation_batch_isSet;
}

bool OAIInvalidation::is_invalidation_batch_Valid() const{
    return m_invalidation_batch_isValid;
}

bool OAIInvalidation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalidation_batch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvalidation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && m_create_time_isValid && m_invalidation_batch_isValid && true;
}

} // namespace OpenAPI
