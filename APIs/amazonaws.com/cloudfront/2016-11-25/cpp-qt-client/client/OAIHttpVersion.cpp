/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpVersion::OAIHttpVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpVersion::OAIHttpVersion() {
    this->initializeModel();
}

OAIHttpVersion::~OAIHttpVersion() {}

void OAIHttpVersion::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHttpVersion::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHttpVersion::fromJson(QString jsonString) {
    
    if ( jsonString.compare("http1.1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpVersion::HTTP1_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("http2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpVersion::HTTP2;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHttpVersion::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHttpVersion::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHttpVersion::HTTP1_1:
            val = "http1.1";
            break;
        case eOAIHttpVersion::HTTP2:
            val = "http2";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHttpVersion::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHttpVersion::eOAIHttpVersion OAIHttpVersion::getValue() const {
    return m_value;
}

void OAIHttpVersion::setValue(const OAIHttpVersion::eOAIHttpVersion& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHttpVersion::isSet() const {
    
    return m_value_isSet;
}

bool OAIHttpVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
