/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomErrorResponseList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomErrorResponseList_inner::OAICustomErrorResponseList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomErrorResponseList_inner::OAICustomErrorResponseList_inner() {
    this->initializeModel();
}

OAICustomErrorResponseList_inner::~OAICustomErrorResponseList_inner() {}

void OAICustomErrorResponseList_inner::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_response_page_path_isSet = false;
    m_response_page_path_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_error_caching_min_ttl_isSet = false;
    m_error_caching_min_ttl_isValid = false;
}

void OAICustomErrorResponseList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomErrorResponseList_inner::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_response_page_path_isValid = ::OpenAPI::fromJsonValue(m_response_page_path, json[QString("ResponsePagePath")]);
    m_response_page_path_isSet = !json[QString("ResponsePagePath")].isNull() && m_response_page_path_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("ResponseCode")]);
    m_response_code_isSet = !json[QString("ResponseCode")].isNull() && m_response_code_isValid;

    m_error_caching_min_ttl_isValid = ::OpenAPI::fromJsonValue(m_error_caching_min_ttl, json[QString("ErrorCachingMinTTL")]);
    m_error_caching_min_ttl_isSet = !json[QString("ErrorCachingMinTTL")].isNull() && m_error_caching_min_ttl_isValid;
}

QString OAICustomErrorResponseList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomErrorResponseList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_response_page_path_isSet) {
        obj.insert(QString("ResponsePagePath"), ::OpenAPI::toJsonValue(m_response_page_path));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("ResponseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_error_caching_min_ttl_isSet) {
        obj.insert(QString("ErrorCachingMinTTL"), ::OpenAPI::toJsonValue(m_error_caching_min_ttl));
    }
    return obj;
}

qint32 OAICustomErrorResponseList_inner::getErrorCode() const {
    return m_error_code;
}
void OAICustomErrorResponseList_inner::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAICustomErrorResponseList_inner::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAICustomErrorResponseList_inner::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAICustomErrorResponseList_inner::getResponsePagePath() const {
    return m_response_page_path;
}
void OAICustomErrorResponseList_inner::setResponsePagePath(const QString &response_page_path) {
    m_response_page_path = response_page_path;
    m_response_page_path_isSet = true;
}

bool OAICustomErrorResponseList_inner::is_response_page_path_Set() const{
    return m_response_page_path_isSet;
}

bool OAICustomErrorResponseList_inner::is_response_page_path_Valid() const{
    return m_response_page_path_isValid;
}

QString OAICustomErrorResponseList_inner::getResponseCode() const {
    return m_response_code;
}
void OAICustomErrorResponseList_inner::setResponseCode(const QString &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAICustomErrorResponseList_inner::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAICustomErrorResponseList_inner::is_response_code_Valid() const{
    return m_response_code_isValid;
}

qint32 OAICustomErrorResponseList_inner::getErrorCachingMinTtl() const {
    return m_error_caching_min_ttl;
}
void OAICustomErrorResponseList_inner::setErrorCachingMinTtl(const qint32 &error_caching_min_ttl) {
    m_error_caching_min_ttl = error_caching_min_ttl;
    m_error_caching_min_ttl_isSet = true;
}

bool OAICustomErrorResponseList_inner::is_error_caching_min_ttl_Set() const{
    return m_error_caching_min_ttl_isSet;
}

bool OAICustomErrorResponseList_inner::is_error_caching_min_ttl_Valid() const{
    return m_error_caching_min_ttl_isValid;
}

bool OAICustomErrorResponseList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_page_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_caching_min_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomErrorResponseList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_code_isValid && true;
}

} // namespace OpenAPI
