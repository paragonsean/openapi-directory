/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardedValues_Headers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardedValues_Headers::OAIForwardedValues_Headers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardedValues_Headers::OAIForwardedValues_Headers() {
    this->initializeModel();
}

OAIForwardedValues_Headers::~OAIForwardedValues_Headers() {}

void OAIForwardedValues_Headers::initializeModel() {

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIForwardedValues_Headers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardedValues_Headers::fromJsonObject(QJsonObject json) {

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;
}

QString OAIForwardedValues_Headers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardedValues_Headers::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

qint32 OAIForwardedValues_Headers::getQuantity() const {
    return m_quantity;
}
void OAIForwardedValues_Headers::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIForwardedValues_Headers::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIForwardedValues_Headers::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QList OAIForwardedValues_Headers::getItems() const {
    return m_items;
}
void OAIForwardedValues_Headers::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIForwardedValues_Headers::is_items_Set() const{
    return m_items_isSet;
}

bool OAIForwardedValues_Headers::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIForwardedValues_Headers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardedValues_Headers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quantity_isValid && true;
}

} // namespace OpenAPI
