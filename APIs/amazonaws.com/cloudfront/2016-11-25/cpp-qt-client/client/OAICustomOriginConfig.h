/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomOriginConfig.h
 *
 * A customer origin.
 */

#ifndef OAICustomOriginConfig_H
#define OAICustomOriginConfig_H

#include <QJsonObject>

#include "OAICustomOriginConfig_OriginSslProtocols.h"
#include "OAIOriginProtocolPolicy.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICustomOriginConfig_OriginSslProtocols;

class OAICustomOriginConfig : public OAIObject {
public:
    OAICustomOriginConfig();
    OAICustomOriginConfig(QString json);
    ~OAICustomOriginConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHttpPort() const;
    void setHttpPort(const qint32 &http_port);
    bool is_http_port_Set() const;
    bool is_http_port_Valid() const;

    qint32 getHttpsPort() const;
    void setHttpsPort(const qint32 &https_port);
    bool is_https_port_Set() const;
    bool is_https_port_Valid() const;

    OAIOriginProtocolPolicy getOriginProtocolPolicy() const;
    void setOriginProtocolPolicy(const OAIOriginProtocolPolicy &origin_protocol_policy);
    bool is_origin_protocol_policy_Set() const;
    bool is_origin_protocol_policy_Valid() const;

    OAICustomOriginConfig_OriginSslProtocols getOriginSslProtocols() const;
    void setOriginSslProtocols(const OAICustomOriginConfig_OriginSslProtocols &origin_ssl_protocols);
    bool is_origin_ssl_protocols_Set() const;
    bool is_origin_ssl_protocols_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_http_port;
    bool m_http_port_isSet;
    bool m_http_port_isValid;

    qint32 m_https_port;
    bool m_https_port_isSet;
    bool m_https_port_isValid;

    OAIOriginProtocolPolicy m_origin_protocol_policy;
    bool m_origin_protocol_policy_isSet;
    bool m_origin_protocol_policy_isValid;

    OAICustomOriginConfig_OriginSslProtocols m_origin_ssl_protocols;
    bool m_origin_ssl_protocols_isSet;
    bool m_origin_ssl_protocols_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomOriginConfig)

#endif // OAICustomOriginConfig_H
