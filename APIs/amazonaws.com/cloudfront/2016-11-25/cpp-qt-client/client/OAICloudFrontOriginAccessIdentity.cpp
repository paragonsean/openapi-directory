/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudFrontOriginAccessIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudFrontOriginAccessIdentity::OAICloudFrontOriginAccessIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudFrontOriginAccessIdentity::OAICloudFrontOriginAccessIdentity() {
    this->initializeModel();
}

OAICloudFrontOriginAccessIdentity::~OAICloudFrontOriginAccessIdentity() {}

void OAICloudFrontOriginAccessIdentity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_s3_canonical_user_id_isSet = false;
    m_s3_canonical_user_id_isValid = false;

    m_cloud_front_origin_access_identity_config_isSet = false;
    m_cloud_front_origin_access_identity_config_isValid = false;
}

void OAICloudFrontOriginAccessIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudFrontOriginAccessIdentity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_s3_canonical_user_id_isValid = ::OpenAPI::fromJsonValue(m_s3_canonical_user_id, json[QString("S3CanonicalUserId")]);
    m_s3_canonical_user_id_isSet = !json[QString("S3CanonicalUserId")].isNull() && m_s3_canonical_user_id_isValid;

    m_cloud_front_origin_access_identity_config_isValid = ::OpenAPI::fromJsonValue(m_cloud_front_origin_access_identity_config, json[QString("CloudFrontOriginAccessIdentityConfig")]);
    m_cloud_front_origin_access_identity_config_isSet = !json[QString("CloudFrontOriginAccessIdentityConfig")].isNull() && m_cloud_front_origin_access_identity_config_isValid;
}

QString OAICloudFrontOriginAccessIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudFrontOriginAccessIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_s3_canonical_user_id_isSet) {
        obj.insert(QString("S3CanonicalUserId"), ::OpenAPI::toJsonValue(m_s3_canonical_user_id));
    }
    if (m_cloud_front_origin_access_identity_config.isSet()) {
        obj.insert(QString("CloudFrontOriginAccessIdentityConfig"), ::OpenAPI::toJsonValue(m_cloud_front_origin_access_identity_config));
    }
    return obj;
}

QString OAICloudFrontOriginAccessIdentity::getId() const {
    return m_id;
}
void OAICloudFrontOriginAccessIdentity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICloudFrontOriginAccessIdentity::is_id_Set() const{
    return m_id_isSet;
}

bool OAICloudFrontOriginAccessIdentity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICloudFrontOriginAccessIdentity::getS3CanonicalUserId() const {
    return m_s3_canonical_user_id;
}
void OAICloudFrontOriginAccessIdentity::setS3CanonicalUserId(const QString &s3_canonical_user_id) {
    m_s3_canonical_user_id = s3_canonical_user_id;
    m_s3_canonical_user_id_isSet = true;
}

bool OAICloudFrontOriginAccessIdentity::is_s3_canonical_user_id_Set() const{
    return m_s3_canonical_user_id_isSet;
}

bool OAICloudFrontOriginAccessIdentity::is_s3_canonical_user_id_Valid() const{
    return m_s3_canonical_user_id_isValid;
}

OAICloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfig OAICloudFrontOriginAccessIdentity::getCloudFrontOriginAccessIdentityConfig() const {
    return m_cloud_front_origin_access_identity_config;
}
void OAICloudFrontOriginAccessIdentity::setCloudFrontOriginAccessIdentityConfig(const OAICloudFrontOriginAccessIdentity_CloudFrontOriginAccessIdentityConfig &cloud_front_origin_access_identity_config) {
    m_cloud_front_origin_access_identity_config = cloud_front_origin_access_identity_config;
    m_cloud_front_origin_access_identity_config_isSet = true;
}

bool OAICloudFrontOriginAccessIdentity::is_cloud_front_origin_access_identity_config_Set() const{
    return m_cloud_front_origin_access_identity_config_isSet;
}

bool OAICloudFrontOriginAccessIdentity::is_cloud_front_origin_access_identity_config_Valid() const{
    return m_cloud_front_origin_access_identity_config_isValid;
}

bool OAICloudFrontOriginAccessIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_canonical_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_front_origin_access_identity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudFrontOriginAccessIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_s3_canonical_user_id_isValid && true;
}

} // namespace OpenAPI
