/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessDenied.h"
#include "OAIBatchTooLarge.h"
#include "OAICNAMEAlreadyExists.h"
#include "OAICloudFrontOriginAccessIdentityAlreadyExists.h"
#include "OAICloudFrontOriginAccessIdentityInUse.h"
#include "OAICreateCloudFrontOriginAccessIdentity2016_11_25_request.h"
#include "OAICreateCloudFrontOriginAccessIdentityResult.h"
#include "OAICreateDistribution2016_11_25_request.h"
#include "OAICreateDistributionResult.h"
#include "OAICreateDistributionWithTags2016_11_25_request.h"
#include "OAICreateDistributionWithTagsResult.h"
#include "OAICreateInvalidation2016_11_25_request.h"
#include "OAICreateInvalidationResult.h"
#include "OAICreateStreamingDistribution2016_11_25_request.h"
#include "OAICreateStreamingDistributionResult.h"
#include "OAICreateStreamingDistributionWithTags2016_11_25_request.h"
#include "OAICreateStreamingDistributionWithTagsResult.h"
#include "OAIDistributionAlreadyExists.h"
#include "OAIDistributionNotDisabled.h"
#include "OAIGetCloudFrontOriginAccessIdentityConfigResult.h"
#include "OAIGetCloudFrontOriginAccessIdentityResult.h"
#include "OAIGetDistributionConfigResult.h"
#include "OAIGetDistributionResult.h"
#include "OAIGetInvalidationResult.h"
#include "OAIGetStreamingDistributionConfigResult.h"
#include "OAIGetStreamingDistributionResult.h"
#include "OAIIllegalUpdate.h"
#include "OAIInconsistentQuantities.h"
#include "OAIInvalidArgument.h"
#include "OAIInvalidDefaultRootObject.h"
#include "OAIInvalidErrorCode.h"
#include "OAIInvalidForwardCookies.h"
#include "OAIInvalidGeoRestrictionParameter.h"
#include "OAIInvalidHeadersForS3Origin.h"
#include "OAIInvalidIfMatchVersion.h"
#include "OAIInvalidLambdaFunctionAssociation.h"
#include "OAIInvalidLocationCode.h"
#include "OAIInvalidMinimumProtocolVersion.h"
#include "OAIInvalidOrigin.h"
#include "OAIInvalidOriginAccessIdentity.h"
#include "OAIInvalidProtocolSettings.h"
#include "OAIInvalidQueryStringParameters.h"
#include "OAIInvalidRelativePath.h"
#include "OAIInvalidRequiredProtocol.h"
#include "OAIInvalidResponseCode.h"
#include "OAIInvalidTTLOrder.h"
#include "OAIInvalidTagging.h"
#include "OAIInvalidViewerCertificate.h"
#include "OAIInvalidWebACLId.h"
#include "OAIListCloudFrontOriginAccessIdentitiesResult.h"
#include "OAIListDistributionsByWebACLIdResult.h"
#include "OAIListDistributionsResult.h"
#include "OAIListInvalidationsResult.h"
#include "OAIListStreamingDistributionsResult.h"
#include "OAIListTagsForResourceResult.h"
#include "OAIMissingBody.h"
#include "OAINoSuchCloudFrontOriginAccessIdentity.h"
#include "OAINoSuchDistribution.h"
#include "OAINoSuchInvalidation.h"
#include "OAINoSuchOrigin.h"
#include "OAINoSuchResource.h"
#include "OAINoSuchStreamingDistribution.h"
#include "OAIPreconditionFailed.h"
#include "OAIStreamingDistributionAlreadyExists.h"
#include "OAIStreamingDistributionNotDisabled.h"
#include "OAITagResource2016_11_25_request.h"
#include "OAITooManyCacheBehaviors.h"
#include "OAITooManyCertificates.h"
#include "OAITooManyCloudFrontOriginAccessIdentities.h"
#include "OAITooManyCookieNamesInWhiteList.h"
#include "OAITooManyDistributionCNAMEs.h"
#include "OAITooManyDistributions.h"
#include "OAITooManyDistributionsWithLambdaAssociations.h"
#include "OAITooManyHeadersInForwardedValues.h"
#include "OAITooManyInvalidationsInProgress.h"
#include "OAITooManyLambdaFunctionAssociations.h"
#include "OAITooManyOriginCustomHeaders.h"
#include "OAITooManyOrigins.h"
#include "OAITooManyQueryStringParameters.h"
#include "OAITooManyStreamingDistributionCNAMEs.h"
#include "OAITooManyStreamingDistributions.h"
#include "OAITooManyTrustedSigners.h"
#include "OAITrustedSignerDoesNotExist.h"
#include "OAIUntagResource2016_11_25_request.h"
#include "OAIUpdateCloudFrontOriginAccessIdentityResult.h"
#include "OAIUpdateDistributionResult.h"
#include "OAIUpdateStreamingDistributionResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_cloud_front_origin_access_identity2016_11_25_request OAICreateCloudFrontOriginAccessIdentity2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCloudFrontOriginAccessIdentity20161125(const OAICreateCloudFrontOriginAccessIdentity2016_11_25_request &oai_create_cloud_front_origin_access_identity2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_distribution2016_11_25_request OAICreateDistribution2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistribution20161125(const OAICreateDistribution2016_11_25_request &oai_create_distribution2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_distribution_with_tags2016_11_25_request OAICreateDistributionWithTags2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createDistributionWithTags20161125(const bool &with_tags, const OAICreateDistributionWithTags2016_11_25_request &oai_create_distribution_with_tags2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  oai_create_invalidation2016_11_25_request OAICreateInvalidation2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInvalidation20161125(const QString &distribution_id, const OAICreateInvalidation2016_11_25_request &oai_create_invalidation2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_streaming_distribution2016_11_25_request OAICreateStreamingDistribution2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistribution20161125(const OAICreateStreamingDistribution2016_11_25_request &oai_create_streaming_distribution2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  with_tags bool [required]
    * @param[in]  oai_create_streaming_distribution_with_tags2016_11_25_request OAICreateStreamingDistributionWithTags2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStreamingDistributionWithTags20161125(const bool &with_tags, const OAICreateStreamingDistributionWithTags2016_11_25_request &oai_create_streaming_distribution_with_tags2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteCloudFrontOriginAccessIdentity20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteDistribution20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void deleteStreamingDistribution20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentity20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCloudFrontOriginAccessIdentityConfig20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistribution20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDistributionConfig20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInvalidation20161125(const QString &distribution_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistribution20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStreamingDistributionConfig20161125(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listCloudFrontOriginAccessIdentities20161125(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributions20161125(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  web_aclid QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listDistributionsByWebACLId20161125(const QString &web_aclid, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listInvalidations20161125(const QString &distribution_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_items QString [optional]
    */
    virtual void listStreamingDistributions20161125(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource20161125(const QString &resource, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_resource2016_11_25_request OAITagResource2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource20161125(const QString &resource, const QString &operation, const OAITagResource2016_11_25_request &oai_tag_resource2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_resource2016_11_25_request OAIUntagResource2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource20161125(const QString &resource, const QString &operation, const OAIUntagResource2016_11_25_request &oai_untag_resource2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_cloud_front_origin_access_identity2016_11_25_request OAICreateCloudFrontOriginAccessIdentity2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateCloudFrontOriginAccessIdentity20161125(const QString &id, const OAICreateCloudFrontOriginAccessIdentity2016_11_25_request &oai_create_cloud_front_origin_access_identity2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_distribution2016_11_25_request OAICreateDistribution2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateDistribution20161125(const QString &id, const OAICreateDistribution2016_11_25_request &oai_create_distribution2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_create_streaming_distribution2016_11_25_request OAICreateStreamingDistribution2016_11_25_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  if_match QString [optional]
    */
    virtual void updateStreamingDistribution20161125(const QString &id, const OAICreateStreamingDistribution2016_11_25_request &oai_create_streaming_distribution2016_11_25_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCloudFrontOriginAccessIdentity20161125Callback(OAIHttpRequestWorker *worker);
    void createDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void createDistributionWithTags20161125Callback(OAIHttpRequestWorker *worker);
    void createInvalidation20161125Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void createStreamingDistributionWithTags20161125Callback(OAIHttpRequestWorker *worker);
    void deleteCloudFrontOriginAccessIdentity20161125Callback(OAIHttpRequestWorker *worker);
    void deleteDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20161125Callback(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentityConfig20161125Callback(OAIHttpRequestWorker *worker);
    void getDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void getDistributionConfig20161125Callback(OAIHttpRequestWorker *worker);
    void getInvalidation20161125Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void getStreamingDistributionConfig20161125Callback(OAIHttpRequestWorker *worker);
    void listCloudFrontOriginAccessIdentities20161125Callback(OAIHttpRequestWorker *worker);
    void listDistributions20161125Callback(OAIHttpRequestWorker *worker);
    void listDistributionsByWebACLId20161125Callback(OAIHttpRequestWorker *worker);
    void listInvalidations20161125Callback(OAIHttpRequestWorker *worker);
    void listStreamingDistributions20161125Callback(OAIHttpRequestWorker *worker);
    void listTagsForResource20161125Callback(OAIHttpRequestWorker *worker);
    void tagResource20161125Callback(OAIHttpRequestWorker *worker);
    void untagResource20161125Callback(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20161125Callback(OAIHttpRequestWorker *worker);
    void updateDistribution20161125Callback(OAIHttpRequestWorker *worker);
    void updateStreamingDistribution20161125Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCloudFrontOriginAccessIdentity20161125Signal(OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20161125Signal(OAICreateDistributionResult summary);
    void createDistributionWithTags20161125Signal(OAICreateDistributionWithTagsResult summary);
    void createInvalidation20161125Signal(OAICreateInvalidationResult summary);
    void createStreamingDistribution20161125Signal(OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20161125Signal(OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20161125Signal();
    void deleteDistribution20161125Signal();
    void deleteStreamingDistribution20161125Signal();
    void getCloudFrontOriginAccessIdentity20161125Signal(OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20161125Signal(OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20161125Signal(OAIGetDistributionResult summary);
    void getDistributionConfig20161125Signal(OAIGetDistributionConfigResult summary);
    void getInvalidation20161125Signal(OAIGetInvalidationResult summary);
    void getStreamingDistribution20161125Signal(OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20161125Signal(OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20161125Signal(OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20161125Signal(OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20161125Signal(OAIListDistributionsByWebACLIdResult summary);
    void listInvalidations20161125Signal(OAIListInvalidationsResult summary);
    void listStreamingDistributions20161125Signal(OAIListStreamingDistributionsResult summary);
    void listTagsForResource20161125Signal(OAIListTagsForResourceResult summary);
    void tagResource20161125Signal();
    void untagResource20161125Signal();
    void updateCloudFrontOriginAccessIdentity20161125Signal(OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20161125Signal(OAIUpdateDistributionResult summary);
    void updateStreamingDistribution20161125Signal(OAIUpdateStreamingDistributionResult summary);


    void createCloudFrontOriginAccessIdentity20161125SignalFull(OAIHttpRequestWorker *worker, OAICreateCloudFrontOriginAccessIdentityResult summary);
    void createDistribution20161125SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionResult summary);
    void createDistributionWithTags20161125SignalFull(OAIHttpRequestWorker *worker, OAICreateDistributionWithTagsResult summary);
    void createInvalidation20161125SignalFull(OAIHttpRequestWorker *worker, OAICreateInvalidationResult summary);
    void createStreamingDistribution20161125SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionResult summary);
    void createStreamingDistributionWithTags20161125SignalFull(OAIHttpRequestWorker *worker, OAICreateStreamingDistributionWithTagsResult summary);
    void deleteCloudFrontOriginAccessIdentity20161125SignalFull(OAIHttpRequestWorker *worker);
    void deleteDistribution20161125SignalFull(OAIHttpRequestWorker *worker);
    void deleteStreamingDistribution20161125SignalFull(OAIHttpRequestWorker *worker);
    void getCloudFrontOriginAccessIdentity20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityResult summary);
    void getCloudFrontOriginAccessIdentityConfig20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetCloudFrontOriginAccessIdentityConfigResult summary);
    void getDistribution20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionResult summary);
    void getDistributionConfig20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetDistributionConfigResult summary);
    void getInvalidation20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetInvalidationResult summary);
    void getStreamingDistribution20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionResult summary);
    void getStreamingDistributionConfig20161125SignalFull(OAIHttpRequestWorker *worker, OAIGetStreamingDistributionConfigResult summary);
    void listCloudFrontOriginAccessIdentities20161125SignalFull(OAIHttpRequestWorker *worker, OAIListCloudFrontOriginAccessIdentitiesResult summary);
    void listDistributions20161125SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsResult summary);
    void listDistributionsByWebACLId20161125SignalFull(OAIHttpRequestWorker *worker, OAIListDistributionsByWebACLIdResult summary);
    void listInvalidations20161125SignalFull(OAIHttpRequestWorker *worker, OAIListInvalidationsResult summary);
    void listStreamingDistributions20161125SignalFull(OAIHttpRequestWorker *worker, OAIListStreamingDistributionsResult summary);
    void listTagsForResource20161125SignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResult summary);
    void tagResource20161125SignalFull(OAIHttpRequestWorker *worker);
    void untagResource20161125SignalFull(OAIHttpRequestWorker *worker);
    void updateCloudFrontOriginAccessIdentity20161125SignalFull(OAIHttpRequestWorker *worker, OAIUpdateCloudFrontOriginAccessIdentityResult summary);
    void updateDistribution20161125SignalFull(OAIHttpRequestWorker *worker, OAIUpdateDistributionResult summary);
    void updateStreamingDistribution20161125SignalFull(OAIHttpRequestWorker *worker, OAIUpdateStreamingDistributionResult summary);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20161125SignalError() instead")
    void createCloudFrontOriginAccessIdentity20161125SignalE(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20161125SignalError(OAICreateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20161125SignalError() instead")
    void createDistribution20161125SignalE(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20161125SignalError(OAICreateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20161125SignalError() instead")
    void createDistributionWithTags20161125SignalE(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20161125SignalError(OAICreateDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20161125SignalError() instead")
    void createInvalidation20161125SignalE(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20161125SignalError(OAICreateInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20161125SignalError() instead")
    void createStreamingDistribution20161125SignalE(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20161125SignalError(OAICreateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20161125SignalError() instead")
    void createStreamingDistributionWithTags20161125SignalE(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20161125SignalError(OAICreateStreamingDistributionWithTagsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20161125SignalError() instead")
    void deleteCloudFrontOriginAccessIdentity20161125SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20161125SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20161125SignalError() instead")
    void deleteDistribution20161125SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20161125SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20161125SignalError() instead")
    void deleteStreamingDistribution20161125SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20161125SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20161125SignalError() instead")
    void getCloudFrontOriginAccessIdentity20161125SignalE(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20161125SignalError(OAIGetCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20161125SignalError() instead")
    void getCloudFrontOriginAccessIdentityConfig20161125SignalE(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20161125SignalError(OAIGetCloudFrontOriginAccessIdentityConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20161125SignalError() instead")
    void getDistribution20161125SignalE(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20161125SignalError(OAIGetDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20161125SignalError() instead")
    void getDistributionConfig20161125SignalE(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20161125SignalError(OAIGetDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20161125SignalError() instead")
    void getInvalidation20161125SignalE(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20161125SignalError(OAIGetInvalidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20161125SignalError() instead")
    void getStreamingDistribution20161125SignalE(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20161125SignalError(OAIGetStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20161125SignalError() instead")
    void getStreamingDistributionConfig20161125SignalE(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20161125SignalError(OAIGetStreamingDistributionConfigResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20161125SignalError() instead")
    void listCloudFrontOriginAccessIdentities20161125SignalE(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20161125SignalError(OAIListCloudFrontOriginAccessIdentitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20161125SignalError() instead")
    void listDistributions20161125SignalE(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20161125SignalError(OAIListDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20161125SignalError() instead")
    void listDistributionsByWebACLId20161125SignalE(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20161125SignalError(OAIListDistributionsByWebACLIdResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20161125SignalError() instead")
    void listInvalidations20161125SignalE(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20161125SignalError(OAIListInvalidationsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20161125SignalError() instead")
    void listStreamingDistributions20161125SignalE(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20161125SignalError(OAIListStreamingDistributionsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20161125SignalError() instead")
    void listTagsForResource20161125SignalE(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20161125SignalError(OAIListTagsForResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20161125SignalError() instead")
    void tagResource20161125SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20161125SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20161125SignalError() instead")
    void untagResource20161125SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20161125SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20161125SignalError() instead")
    void updateCloudFrontOriginAccessIdentity20161125SignalE(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20161125SignalError(OAIUpdateCloudFrontOriginAccessIdentityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20161125SignalError() instead")
    void updateDistribution20161125SignalE(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20161125SignalError(OAIUpdateDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20161125SignalError() instead")
    void updateStreamingDistribution20161125SignalE(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20161125SignalError(OAIUpdateStreamingDistributionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCloudFrontOriginAccessIdentity20161125SignalErrorFull() instead")
    void createCloudFrontOriginAccessIdentity20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCloudFrontOriginAccessIdentity20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistribution20161125SignalErrorFull() instead")
    void createDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDistributionWithTags20161125SignalErrorFull() instead")
    void createDistributionWithTags20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDistributionWithTags20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInvalidation20161125SignalErrorFull() instead")
    void createInvalidation20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInvalidation20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistribution20161125SignalErrorFull() instead")
    void createStreamingDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStreamingDistributionWithTags20161125SignalErrorFull() instead")
    void createStreamingDistributionWithTags20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStreamingDistributionWithTags20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCloudFrontOriginAccessIdentity20161125SignalErrorFull() instead")
    void deleteCloudFrontOriginAccessIdentity20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCloudFrontOriginAccessIdentity20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDistribution20161125SignalErrorFull() instead")
    void deleteDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStreamingDistribution20161125SignalErrorFull() instead")
    void deleteStreamingDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStreamingDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentity20161125SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentity20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentity20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCloudFrontOriginAccessIdentityConfig20161125SignalErrorFull() instead")
    void getCloudFrontOriginAccessIdentityConfig20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCloudFrontOriginAccessIdentityConfig20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistribution20161125SignalErrorFull() instead")
    void getDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionConfig20161125SignalErrorFull() instead")
    void getDistributionConfig20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionConfig20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvalidation20161125SignalErrorFull() instead")
    void getInvalidation20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvalidation20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistribution20161125SignalErrorFull() instead")
    void getStreamingDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStreamingDistributionConfig20161125SignalErrorFull() instead")
    void getStreamingDistributionConfig20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStreamingDistributionConfig20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCloudFrontOriginAccessIdentities20161125SignalErrorFull() instead")
    void listCloudFrontOriginAccessIdentities20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCloudFrontOriginAccessIdentities20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributions20161125SignalErrorFull() instead")
    void listDistributions20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributions20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributionsByWebACLId20161125SignalErrorFull() instead")
    void listDistributionsByWebACLId20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributionsByWebACLId20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInvalidations20161125SignalErrorFull() instead")
    void listInvalidations20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInvalidations20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStreamingDistributions20161125SignalErrorFull() instead")
    void listStreamingDistributions20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStreamingDistributions20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResource20161125SignalErrorFull() instead")
    void listTagsForResource20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResource20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResource20161125SignalErrorFull() instead")
    void tagResource20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResource20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResource20161125SignalErrorFull() instead")
    void untagResource20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResource20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCloudFrontOriginAccessIdentity20161125SignalErrorFull() instead")
    void updateCloudFrontOriginAccessIdentity20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCloudFrontOriginAccessIdentity20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistribution20161125SignalErrorFull() instead")
    void updateDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStreamingDistribution20161125SignalErrorFull() instead")
    void updateStreamingDistribution20161125SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStreamingDistribution20161125SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
