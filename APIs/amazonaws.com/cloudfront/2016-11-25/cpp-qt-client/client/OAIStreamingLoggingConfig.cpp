/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamingLoggingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamingLoggingConfig::OAIStreamingLoggingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamingLoggingConfig::OAIStreamingLoggingConfig() {
    this->initializeModel();
}

OAIStreamingLoggingConfig::~OAIStreamingLoggingConfig() {}

void OAIStreamingLoggingConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIStreamingLoggingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamingLoggingConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;
}

QString OAIStreamingLoggingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamingLoggingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

bool OAIStreamingLoggingConfig::getEnabled() const {
    return m_enabled;
}
void OAIStreamingLoggingConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIStreamingLoggingConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIStreamingLoggingConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIStreamingLoggingConfig::getBucket() const {
    return m_bucket;
}
void OAIStreamingLoggingConfig::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIStreamingLoggingConfig::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIStreamingLoggingConfig::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIStreamingLoggingConfig::getPrefix() const {
    return m_prefix;
}
void OAIStreamingLoggingConfig::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIStreamingLoggingConfig::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIStreamingLoggingConfig::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIStreamingLoggingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamingLoggingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_bucket_isValid && m_prefix_isValid && true;
}

} // namespace OpenAPI
