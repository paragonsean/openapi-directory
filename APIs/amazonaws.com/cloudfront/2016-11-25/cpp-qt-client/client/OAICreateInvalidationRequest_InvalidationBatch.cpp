/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInvalidationRequest_InvalidationBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInvalidationRequest_InvalidationBatch::OAICreateInvalidationRequest_InvalidationBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInvalidationRequest_InvalidationBatch::OAICreateInvalidationRequest_InvalidationBatch() {
    this->initializeModel();
}

OAICreateInvalidationRequest_InvalidationBatch::~OAICreateInvalidationRequest_InvalidationBatch() {}

void OAICreateInvalidationRequest_InvalidationBatch::initializeModel() {

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_caller_reference_isSet = false;
    m_caller_reference_isValid = false;
}

void OAICreateInvalidationRequest_InvalidationBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInvalidationRequest_InvalidationBatch::fromJsonObject(QJsonObject json) {

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("Paths")]);
    m_paths_isSet = !json[QString("Paths")].isNull() && m_paths_isValid;

    m_caller_reference_isValid = ::OpenAPI::fromJsonValue(m_caller_reference, json[QString("CallerReference")]);
    m_caller_reference_isSet = !json[QString("CallerReference")].isNull() && m_caller_reference_isValid;
}

QString OAICreateInvalidationRequest_InvalidationBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInvalidationRequest_InvalidationBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_paths.isSet()) {
        obj.insert(QString("Paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_caller_reference_isSet) {
        obj.insert(QString("CallerReference"), ::OpenAPI::toJsonValue(m_caller_reference));
    }
    return obj;
}

OAICreateInvalidation2016_11_25_request_InvalidationBatch_Paths OAICreateInvalidationRequest_InvalidationBatch::getPaths() const {
    return m_paths;
}
void OAICreateInvalidationRequest_InvalidationBatch::setPaths(const OAICreateInvalidation2016_11_25_request_InvalidationBatch_Paths &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAICreateInvalidationRequest_InvalidationBatch::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAICreateInvalidationRequest_InvalidationBatch::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAICreateInvalidationRequest_InvalidationBatch::getCallerReference() const {
    return m_caller_reference;
}
void OAICreateInvalidationRequest_InvalidationBatch::setCallerReference(const QString &caller_reference) {
    m_caller_reference = caller_reference;
    m_caller_reference_isSet = true;
}

bool OAICreateInvalidationRequest_InvalidationBatch::is_caller_reference_Set() const{
    return m_caller_reference_isSet;
}

bool OAICreateInvalidationRequest_InvalidationBatch::is_caller_reference_Valid() const{
    return m_caller_reference_isValid;
}

bool OAICreateInvalidationRequest_InvalidationBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInvalidationRequest_InvalidationBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_paths_isValid && m_caller_reference_isValid && true;
}

} // namespace OpenAPI
