/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewerProtocolPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewerProtocolPolicy::OAIViewerProtocolPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewerProtocolPolicy::OAIViewerProtocolPolicy() {
    this->initializeModel();
}

OAIViewerProtocolPolicy::~OAIViewerProtocolPolicy() {}

void OAIViewerProtocolPolicy::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIViewerProtocolPolicy::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIViewerProtocolPolicy::fromJson(QString jsonString) {
    
    if ( jsonString.compare("allow-all", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewerProtocolPolicy::ALLOW_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("https-only", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewerProtocolPolicy::HTTPS_ONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("redirect-to-https", Qt::CaseInsensitive) == 0) {
        m_value = eOAIViewerProtocolPolicy::REDIRECT_TO_HTTPS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIViewerProtocolPolicy::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIViewerProtocolPolicy::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIViewerProtocolPolicy::ALLOW_ALL:
            val = "allow-all";
            break;
        case eOAIViewerProtocolPolicy::HTTPS_ONLY:
            val = "https-only";
            break;
        case eOAIViewerProtocolPolicy::REDIRECT_TO_HTTPS:
            val = "redirect-to-https";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIViewerProtocolPolicy::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIViewerProtocolPolicy::eOAIViewerProtocolPolicy OAIViewerProtocolPolicy::getValue() const {
    return m_value;
}

void OAIViewerProtocolPolicy::setValue(const OAIViewerProtocolPolicy::eOAIViewerProtocolPolicy& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIViewerProtocolPolicy::isSet() const {
    
    return m_value_isSet;
}

bool OAIViewerProtocolPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
