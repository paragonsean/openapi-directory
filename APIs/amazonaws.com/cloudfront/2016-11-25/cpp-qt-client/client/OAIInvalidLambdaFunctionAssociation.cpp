/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvalidLambdaFunctionAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvalidLambdaFunctionAssociation::OAIInvalidLambdaFunctionAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvalidLambdaFunctionAssociation::OAIInvalidLambdaFunctionAssociation() {
    this->initializeModel();
}

OAIInvalidLambdaFunctionAssociation::~OAIInvalidLambdaFunctionAssociation() {}

void OAIInvalidLambdaFunctionAssociation::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIInvalidLambdaFunctionAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvalidLambdaFunctionAssociation::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIInvalidLambdaFunctionAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvalidLambdaFunctionAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIInvalidLambdaFunctionAssociation::getMessage() const {
    return m_message;
}
void OAIInvalidLambdaFunctionAssociation::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIInvalidLambdaFunctionAssociation::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInvalidLambdaFunctionAssociation::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIInvalidLambdaFunctionAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvalidLambdaFunctionAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
