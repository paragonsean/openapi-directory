/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardedValues_Cookies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardedValues_Cookies::OAIForwardedValues_Cookies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardedValues_Cookies::OAIForwardedValues_Cookies() {
    this->initializeModel();
}

OAIForwardedValues_Cookies::~OAIForwardedValues_Cookies() {}

void OAIForwardedValues_Cookies::initializeModel() {

    m_forward_isSet = false;
    m_forward_isValid = false;

    m_whitelisted_names_isSet = false;
    m_whitelisted_names_isValid = false;
}

void OAIForwardedValues_Cookies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardedValues_Cookies::fromJsonObject(QJsonObject json) {

    m_forward_isValid = ::OpenAPI::fromJsonValue(m_forward, json[QString("Forward")]);
    m_forward_isSet = !json[QString("Forward")].isNull() && m_forward_isValid;

    m_whitelisted_names_isValid = ::OpenAPI::fromJsonValue(m_whitelisted_names, json[QString("WhitelistedNames")]);
    m_whitelisted_names_isSet = !json[QString("WhitelistedNames")].isNull() && m_whitelisted_names_isValid;
}

QString OAIForwardedValues_Cookies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardedValues_Cookies::asJsonObject() const {
    QJsonObject obj;
    if (m_forward.isSet()) {
        obj.insert(QString("Forward"), ::OpenAPI::toJsonValue(m_forward));
    }
    if (m_whitelisted_names.isSet()) {
        obj.insert(QString("WhitelistedNames"), ::OpenAPI::toJsonValue(m_whitelisted_names));
    }
    return obj;
}

OAIItemSelection OAIForwardedValues_Cookies::getForward() const {
    return m_forward;
}
void OAIForwardedValues_Cookies::setForward(const OAIItemSelection &forward) {
    m_forward = forward;
    m_forward_isSet = true;
}

bool OAIForwardedValues_Cookies::is_forward_Set() const{
    return m_forward_isSet;
}

bool OAIForwardedValues_Cookies::is_forward_Valid() const{
    return m_forward_isValid;
}

OAICookiePreference_WhitelistedNames OAIForwardedValues_Cookies::getWhitelistedNames() const {
    return m_whitelisted_names;
}
void OAIForwardedValues_Cookies::setWhitelistedNames(const OAICookiePreference_WhitelistedNames &whitelisted_names) {
    m_whitelisted_names = whitelisted_names;
    m_whitelisted_names_isSet = true;
}

bool OAIForwardedValues_Cookies::is_whitelisted_names_Set() const{
    return m_whitelisted_names_isSet;
}

bool OAIForwardedValues_Cookies::is_whitelisted_names_Valid() const{
    return m_whitelisted_names_isValid;
}

bool OAIForwardedValues_Cookies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forward.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelisted_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardedValues_Cookies::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_forward_isValid && true;
}

} // namespace OpenAPI
