/**
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessDenied from '../model/AccessDenied';
import BatchTooLarge from '../model/BatchTooLarge';
import CNAMEAlreadyExists from '../model/CNAMEAlreadyExists';
import CloudFrontOriginAccessIdentityAlreadyExists from '../model/CloudFrontOriginAccessIdentityAlreadyExists';
import CloudFrontOriginAccessIdentityInUse from '../model/CloudFrontOriginAccessIdentityInUse';
import CreateCloudFrontOriginAccessIdentity20161125Request from '../model/CreateCloudFrontOriginAccessIdentity20161125Request';
import CreateCloudFrontOriginAccessIdentityResult from '../model/CreateCloudFrontOriginAccessIdentityResult';
import CreateDistribution20161125Request from '../model/CreateDistribution20161125Request';
import CreateDistributionResult from '../model/CreateDistributionResult';
import CreateDistributionWithTags20161125Request from '../model/CreateDistributionWithTags20161125Request';
import CreateDistributionWithTagsResult from '../model/CreateDistributionWithTagsResult';
import CreateInvalidation20161125Request from '../model/CreateInvalidation20161125Request';
import CreateInvalidationResult from '../model/CreateInvalidationResult';
import CreateStreamingDistribution20161125Request from '../model/CreateStreamingDistribution20161125Request';
import CreateStreamingDistributionResult from '../model/CreateStreamingDistributionResult';
import CreateStreamingDistributionWithTags20161125Request from '../model/CreateStreamingDistributionWithTags20161125Request';
import CreateStreamingDistributionWithTagsResult from '../model/CreateStreamingDistributionWithTagsResult';
import DistributionAlreadyExists from '../model/DistributionAlreadyExists';
import DistributionNotDisabled from '../model/DistributionNotDisabled';
import GetCloudFrontOriginAccessIdentityConfigResult from '../model/GetCloudFrontOriginAccessIdentityConfigResult';
import GetCloudFrontOriginAccessIdentityResult from '../model/GetCloudFrontOriginAccessIdentityResult';
import GetDistributionConfigResult from '../model/GetDistributionConfigResult';
import GetDistributionResult from '../model/GetDistributionResult';
import GetInvalidationResult from '../model/GetInvalidationResult';
import GetStreamingDistributionConfigResult from '../model/GetStreamingDistributionConfigResult';
import GetStreamingDistributionResult from '../model/GetStreamingDistributionResult';
import IllegalUpdate from '../model/IllegalUpdate';
import InconsistentQuantities from '../model/InconsistentQuantities';
import InvalidArgument from '../model/InvalidArgument';
import InvalidDefaultRootObject from '../model/InvalidDefaultRootObject';
import InvalidErrorCode from '../model/InvalidErrorCode';
import InvalidForwardCookies from '../model/InvalidForwardCookies';
import InvalidGeoRestrictionParameter from '../model/InvalidGeoRestrictionParameter';
import InvalidHeadersForS3Origin from '../model/InvalidHeadersForS3Origin';
import InvalidIfMatchVersion from '../model/InvalidIfMatchVersion';
import InvalidLambdaFunctionAssociation from '../model/InvalidLambdaFunctionAssociation';
import InvalidLocationCode from '../model/InvalidLocationCode';
import InvalidMinimumProtocolVersion from '../model/InvalidMinimumProtocolVersion';
import InvalidOrigin from '../model/InvalidOrigin';
import InvalidOriginAccessIdentity from '../model/InvalidOriginAccessIdentity';
import InvalidProtocolSettings from '../model/InvalidProtocolSettings';
import InvalidQueryStringParameters from '../model/InvalidQueryStringParameters';
import InvalidRelativePath from '../model/InvalidRelativePath';
import InvalidRequiredProtocol from '../model/InvalidRequiredProtocol';
import InvalidResponseCode from '../model/InvalidResponseCode';
import InvalidTTLOrder from '../model/InvalidTTLOrder';
import InvalidTagging from '../model/InvalidTagging';
import InvalidViewerCertificate from '../model/InvalidViewerCertificate';
import InvalidWebACLId from '../model/InvalidWebACLId';
import ListCloudFrontOriginAccessIdentitiesResult from '../model/ListCloudFrontOriginAccessIdentitiesResult';
import ListDistributionsByWebACLIdResult from '../model/ListDistributionsByWebACLIdResult';
import ListDistributionsResult from '../model/ListDistributionsResult';
import ListInvalidationsResult from '../model/ListInvalidationsResult';
import ListStreamingDistributionsResult from '../model/ListStreamingDistributionsResult';
import ListTagsForResourceResult from '../model/ListTagsForResourceResult';
import MissingBody from '../model/MissingBody';
import NoSuchCloudFrontOriginAccessIdentity from '../model/NoSuchCloudFrontOriginAccessIdentity';
import NoSuchDistribution from '../model/NoSuchDistribution';
import NoSuchInvalidation from '../model/NoSuchInvalidation';
import NoSuchOrigin from '../model/NoSuchOrigin';
import NoSuchResource from '../model/NoSuchResource';
import NoSuchStreamingDistribution from '../model/NoSuchStreamingDistribution';
import PreconditionFailed from '../model/PreconditionFailed';
import StreamingDistributionAlreadyExists from '../model/StreamingDistributionAlreadyExists';
import StreamingDistributionNotDisabled from '../model/StreamingDistributionNotDisabled';
import TagResource20161125Request from '../model/TagResource20161125Request';
import TooManyCacheBehaviors from '../model/TooManyCacheBehaviors';
import TooManyCertificates from '../model/TooManyCertificates';
import TooManyCloudFrontOriginAccessIdentities from '../model/TooManyCloudFrontOriginAccessIdentities';
import TooManyCookieNamesInWhiteList from '../model/TooManyCookieNamesInWhiteList';
import TooManyDistributionCNAMEs from '../model/TooManyDistributionCNAMEs';
import TooManyDistributions from '../model/TooManyDistributions';
import TooManyDistributionsWithLambdaAssociations from '../model/TooManyDistributionsWithLambdaAssociations';
import TooManyHeadersInForwardedValues from '../model/TooManyHeadersInForwardedValues';
import TooManyInvalidationsInProgress from '../model/TooManyInvalidationsInProgress';
import TooManyLambdaFunctionAssociations from '../model/TooManyLambdaFunctionAssociations';
import TooManyOriginCustomHeaders from '../model/TooManyOriginCustomHeaders';
import TooManyOrigins from '../model/TooManyOrigins';
import TooManyQueryStringParameters from '../model/TooManyQueryStringParameters';
import TooManyStreamingDistributionCNAMEs from '../model/TooManyStreamingDistributionCNAMEs';
import TooManyStreamingDistributions from '../model/TooManyStreamingDistributions';
import TooManyTrustedSigners from '../model/TooManyTrustedSigners';
import TrustedSignerDoesNotExist from '../model/TrustedSignerDoesNotExist';
import UntagResource20161125Request from '../model/UntagResource20161125Request';
import UpdateCloudFrontOriginAccessIdentityResult from '../model/UpdateCloudFrontOriginAccessIdentityResult';
import UpdateDistributionResult from '../model/UpdateDistributionResult';
import UpdateStreamingDistributionResult from '../model/UpdateStreamingDistributionResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-11-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCloudFrontOriginAccessIdentity20161125 operation.
     * @callback module:api/DefaultApi~createCloudFrontOriginAccessIdentity20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCloudFrontOriginAccessIdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new origin access identity. If you're using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see <a href=\"http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>.
     * @param {module:model/CreateCloudFrontOriginAccessIdentity20161125Request} createCloudFrontOriginAccessIdentity20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCloudFrontOriginAccessIdentity20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCloudFrontOriginAccessIdentityResult}
     */
    createCloudFrontOriginAccessIdentity20161125(createCloudFrontOriginAccessIdentity20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createCloudFrontOriginAccessIdentity20161125Request;
      // verify the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' is set
      if (createCloudFrontOriginAccessIdentity20161125Request === undefined || createCloudFrontOriginAccessIdentity20161125Request === null) {
        throw new Error("Missing the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' when calling createCloudFrontOriginAccessIdentity20161125");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateCloudFrontOriginAccessIdentityResult;
      return this.apiClient.callApi(
        '/2016-11-25/origin-access-identity/cloudfront', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDistribution20161125 operation.
     * @callback module:api/DefaultApi~createDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web distribution. Send a <code>GET</code> request to the <code>/<i>CloudFront API version</i>/distribution</code>/<code>distribution ID</code> resource.
     * @param {module:model/CreateDistribution20161125Request} createDistribution20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDistributionResult}
     */
    createDistribution20161125(createDistribution20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createDistribution20161125Request;
      // verify the required parameter 'createDistribution20161125Request' is set
      if (createDistribution20161125Request === undefined || createDistribution20161125Request === null) {
        throw new Error("Missing the required parameter 'createDistribution20161125Request' when calling createDistribution20161125");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDistributionResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDistributionWithTags20161125 operation.
     * @callback module:api/DefaultApi~createDistributionWithTags20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDistributionWithTagsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new distribution with tags.
     * @param {Boolean} withTags 
     * @param {module:model/CreateDistributionWithTags20161125Request} createDistributionWithTags20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDistributionWithTags20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDistributionWithTagsResult}
     */
    createDistributionWithTags20161125(withTags, createDistributionWithTags20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createDistributionWithTags20161125Request;
      // verify the required parameter 'withTags' is set
      if (withTags === undefined || withTags === null) {
        throw new Error("Missing the required parameter 'withTags' when calling createDistributionWithTags20161125");
      }
      // verify the required parameter 'createDistributionWithTags20161125Request' is set
      if (createDistributionWithTags20161125Request === undefined || createDistributionWithTags20161125Request === null) {
        throw new Error("Missing the required parameter 'createDistributionWithTags20161125Request' when calling createDistributionWithTags20161125");
      }

      let pathParams = {
      };
      let queryParams = {
        'WithTags': withTags
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDistributionWithTagsResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution#WithTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInvalidation20161125 operation.
     * @callback module:api/DefaultApi~createInvalidation20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInvalidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new invalidation. 
     * @param {String} distributionId The distribution's id.
     * @param {module:model/CreateInvalidation20161125Request} createInvalidation20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInvalidation20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInvalidationResult}
     */
    createInvalidation20161125(distributionId, createInvalidation20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createInvalidation20161125Request;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling createInvalidation20161125");
      }
      // verify the required parameter 'createInvalidation20161125Request' is set
      if (createInvalidation20161125Request === undefined || createInvalidation20161125Request === null) {
        throw new Error("Missing the required parameter 'createInvalidation20161125Request' when calling createInvalidation20161125");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateInvalidationResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{DistributionId}/invalidation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingDistribution20161125 operation.
     * @callback module:api/DefaultApi~createStreamingDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new RMTP distribution. An RTMP distribution is similar to a web distribution, but an RTMP distribution streams media files using the Adobe Real-Time Messaging Protocol (RTMP) instead of serving files using HTTP. </p> <p>To create a new web distribution, submit a <code>POST</code> request to the <i>CloudFront API version</i>/distribution resource. The request body must include a document with a <i>StreamingDistributionConfig</i> element. The response echoes the <code>StreamingDistributionConfig</code> element and returns other information about the RTMP distribution.</p> <p>To get the status of your request, use the <i>GET StreamingDistribution</i> API action. When the value of <code>Enabled</code> is <code>true</code> and the value of <code>Status</code> is <code>Deployed</code>, your distribution is ready. A distribution usually deploys in less than 15 minutes.</p> <p>For more information about web distributions, see <a href=\"http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-rtmp.html\">Working with RTMP Distributions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p> <important> <p>Beginning with the 2012-05-05 version of the CloudFront API, we made substantial changes to the format of the XML document that you include in the request body when you create or update a web distribution or an RTMP distribution, and when you invalidate objects. With previous versions of the API, we discovered that it was too easy to accidentally delete one or more values for an element that accepts multiple values, for example, CNAMEs and trusted signers. Our changes for the 2012-05-05 release are intended to prevent these accidental deletions and to notify you when there's a mismatch between the number of values you say you're specifying in the <code>Quantity</code> element and the number of values specified.</p> </important>
     * @param {module:model/CreateStreamingDistribution20161125Request} createStreamingDistribution20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStreamingDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingDistributionResult}
     */
    createStreamingDistribution20161125(createStreamingDistribution20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingDistribution20161125Request;
      // verify the required parameter 'createStreamingDistribution20161125Request' is set
      if (createStreamingDistribution20161125Request === undefined || createStreamingDistribution20161125Request === null) {
        throw new Error("Missing the required parameter 'createStreamingDistribution20161125Request' when calling createStreamingDistribution20161125");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateStreamingDistributionResult;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingDistributionWithTags20161125 operation.
     * @callback module:api/DefaultApi~createStreamingDistributionWithTags20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingDistributionWithTagsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new streaming distribution with tags.
     * @param {Boolean} withTags 
     * @param {module:model/CreateStreamingDistributionWithTags20161125Request} createStreamingDistributionWithTags20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStreamingDistributionWithTags20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingDistributionWithTagsResult}
     */
    createStreamingDistributionWithTags20161125(withTags, createStreamingDistributionWithTags20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingDistributionWithTags20161125Request;
      // verify the required parameter 'withTags' is set
      if (withTags === undefined || withTags === null) {
        throw new Error("Missing the required parameter 'withTags' when calling createStreamingDistributionWithTags20161125");
      }
      // verify the required parameter 'createStreamingDistributionWithTags20161125Request' is set
      if (createStreamingDistributionWithTags20161125Request === undefined || createStreamingDistributionWithTags20161125Request === null) {
        throw new Error("Missing the required parameter 'createStreamingDistributionWithTags20161125Request' when calling createStreamingDistributionWithTags20161125");
      }

      let pathParams = {
      };
      let queryParams = {
        'WithTags': withTags
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateStreamingDistributionWithTagsResult;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution#WithTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCloudFrontOriginAccessIdentity20161125 operation.
     * @callback module:api/DefaultApi~deleteCloudFrontOriginAccessIdentity20161125Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an origin access identity. 
     * @param {String} id The origin access identity's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header you received from a previous <code>GET</code> or <code>PUT</code> request. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteCloudFrontOriginAccessIdentity20161125Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCloudFrontOriginAccessIdentity20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCloudFrontOriginAccessIdentity20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2016-11-25/origin-access-identity/cloudfront/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDistribution20161125 operation.
     * @callback module:api/DefaultApi~deleteDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a distribution. 
     * @param {String} id The distribution ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when you disabled the distribution. For example: <code>E2QWRUHAPOMQZL</code>. 
     * @param {module:api/DefaultApi~deleteDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDistribution20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDistribution20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStreamingDistribution20161125 operation.
     * @callback module:api/DefaultApi~deleteStreamingDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete a streaming distribution. To delete an RTMP distribution using the CloudFront API, perform the following steps.</p> <p> <b>To delete an RTMP distribution using the CloudFront API</b>:</p> <ol> <li> <p>Disable the RTMP distribution.</p> </li> <li> <p>Submit a <code>GET Streaming Distribution Config</code> request to get the current configuration and the <code>Etag</code> header for the distribution. </p> </li> <li> <p>Update the XML document that was returned in the response to your <code>GET Streaming Distribution Config</code> request to change the value of <code>Enabled</code> to <code>false</code>.</p> </li> <li> <p>Submit a <code>PUT Streaming Distribution Config</code> request to update the configuration for your distribution. In the request body, include the XML document that you updated in Step 3. Then set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GET Streaming Distribution Config</code> request in Step 2.</p> </li> <li> <p>Review the response to the <code>PUT Streaming Distribution Config</code> request to confirm that the distribution was successfully disabled.</p> </li> <li> <p>Submit a <code>GET Streaming Distribution Config</code> request to confirm that your changes have propagated. When propagation is complete, the value of <code>Status</code> is <code>Deployed</code>.</p> </li> <li> <p>Submit a <code>DELETE Streaming Distribution</code> request. Set the value of the HTTP <code>If-Match</code> header to the value of the <code>ETag</code> header that CloudFront returned when you submitted the <code>GET Streaming Distribution Config</code> request in Step 2.</p> </li> <li> <p>Review the response to your <code>DELETE Streaming Distribution</code> request to confirm that the distribution was successfully deleted.</p> </li> </ol> <p>For information about deleting a distribution using the CloudFront console, see <a href=\"http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HowToDeleteDistribution.html\">Deleting a Distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
     * @param {String} id The distribution ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when you disabled the streaming distribution. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~deleteStreamingDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStreamingDistribution20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStreamingDistribution20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudFrontOriginAccessIdentity20161125 operation.
     * @callback module:api/DefaultApi~getCloudFrontOriginAccessIdentity20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudFrontOriginAccessIdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about an origin access identity. 
     * @param {String} id The identity's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCloudFrontOriginAccessIdentity20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudFrontOriginAccessIdentityResult}
     */
    getCloudFrontOriginAccessIdentity20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentity20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetCloudFrontOriginAccessIdentityResult;
      return this.apiClient.callApi(
        '/2016-11-25/origin-access-identity/cloudfront/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCloudFrontOriginAccessIdentityConfig20161125 operation.
     * @callback module:api/DefaultApi~getCloudFrontOriginAccessIdentityConfig20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCloudFrontOriginAccessIdentityConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration information about an origin access identity. 
     * @param {String} id The identity's ID. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCloudFrontOriginAccessIdentityConfig20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCloudFrontOriginAccessIdentityConfigResult}
     */
    getCloudFrontOriginAccessIdentityConfig20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCloudFrontOriginAccessIdentityConfig20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetCloudFrontOriginAccessIdentityConfigResult;
      return this.apiClient.callApi(
        '/2016-11-25/origin-access-identity/cloudfront/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistribution20161125 operation.
     * @callback module:api/DefaultApi~getDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about a distribution. 
     * @param {String} id The distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDistributionResult}
     */
    getDistribution20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistribution20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetDistributionResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistributionConfig20161125 operation.
     * @callback module:api/DefaultApi~getDistributionConfig20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDistributionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration information about a distribution. 
     * @param {String} id The distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDistributionConfig20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDistributionConfigResult}
     */
    getDistributionConfig20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistributionConfig20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetDistributionConfigResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvalidation20161125 operation.
     * @callback module:api/DefaultApi~getInvalidation20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInvalidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the information about an invalidation. 
     * @param {String} distributionId The distribution's ID.
     * @param {String} id The identifier for the invalidation request, for example, <code>IDFDVBD632BHDS5</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInvalidation20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInvalidationResult}
     */
    getInvalidation20161125(distributionId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling getInvalidation20161125");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvalidation20161125");
      }

      let pathParams = {
        'DistributionId': distributionId,
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetInvalidationResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{DistributionId}/invalidation/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingDistribution20161125 operation.
     * @callback module:api/DefaultApi~getStreamingDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified RTMP distribution, including the distribution configuration.
     * @param {String} id The streaming distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingDistributionResult}
     */
    getStreamingDistribution20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStreamingDistribution20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetStreamingDistributionResult;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingDistributionConfig20161125 operation.
     * @callback module:api/DefaultApi~getStreamingDistributionConfig20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStreamingDistributionConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration information about a streaming distribution. 
     * @param {String} id The streaming distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStreamingDistributionConfig20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStreamingDistributionConfigResult}
     */
    getStreamingDistributionConfig20161125(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStreamingDistributionConfig20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetStreamingDistributionConfigResult;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution/{Id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCloudFrontOriginAccessIdentities20161125 operation.
     * @callback module:api/DefaultApi~listCloudFrontOriginAccessIdentities20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCloudFrontOriginAccessIdentitiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists origin access identities.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of origin access identities. The results include identities in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last identity on that page).
     * @param {String} [maxItems] The maximum number of origin access identities you want in the response body. 
     * @param {module:api/DefaultApi~listCloudFrontOriginAccessIdentities20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCloudFrontOriginAccessIdentitiesResult}
     */
    listCloudFrontOriginAccessIdentities20161125(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListCloudFrontOriginAccessIdentitiesResult;
      return this.apiClient.callApi(
        '/2016-11-25/origin-access-identity/cloudfront', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributions20161125 operation.
     * @callback module:api/DefaultApi~listDistributions20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List distributions. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this when paginating results to indicate where to begin in your list of distributions. The results include distributions in the list that occur after the marker. To get the next page of results, set the <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response (which is also the ID of the last distribution on that page).
     * @param {String} [maxItems] The maximum number of distributions you want in the response body.
     * @param {module:api/DefaultApi~listDistributions20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsResult}
     */
    listDistributions20161125(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributionsByWebACLId20161125 operation.
     * @callback module:api/DefaultApi~listDistributionsByWebACLId20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributionsByWebACLIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the distributions that are associated with a specified AWS WAF web ACL. 
     * @param {String} webACLId The ID of the AWS WAF web ACL that you want to list the associated distributions. If you specify \"null\" for the ID, the request returns a list of the distributions that aren't associated with a web ACL. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use <code>Marker</code> and <code>MaxItems</code> to control pagination of results. If you have more than <code>MaxItems</code> distributions that satisfy the request, the response includes a <code>NextMarker</code> element. To get the next page of results, submit another request. For the value of <code>Marker</code>, specify the value of <code>NextMarker</code> from the last response. (For the first request, omit <code>Marker</code>.) 
     * @param {String} [maxItems] The maximum number of distributions that you want CloudFront to return in the response body. The maximum and default values are both 100.
     * @param {module:api/DefaultApi~listDistributionsByWebACLId20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributionsByWebACLIdResult}
     */
    listDistributionsByWebACLId20161125(webACLId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webACLId' is set
      if (webACLId === undefined || webACLId === null) {
        throw new Error("Missing the required parameter 'webACLId' when calling listDistributionsByWebACLId20161125");
      }

      let pathParams = {
        'WebACLId': webACLId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDistributionsByWebACLIdResult;
      return this.apiClient.callApi(
        '/2016-11-25/distributionsByWebACLId/{WebACLId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInvalidations20161125 operation.
     * @callback module:api/DefaultApi~listInvalidations20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInvalidationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists invalidation batches. 
     * @param {String} distributionId The distribution's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] Use this parameter when paginating results to indicate where to begin in your list of invalidation batches. Because the results are returned in decreasing order from most recent to oldest, the most recent results are on the first page, the second page will contain earlier results, and so on. To get the next page of results, set <code>Marker</code> to the value of the <code>NextMarker</code> from the current page's response. This value is the same as the ID of the last invalidation batch on that page. 
     * @param {String} [maxItems] The maximum number of invalidation batches that you want in the response body.
     * @param {module:api/DefaultApi~listInvalidations20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInvalidationsResult}
     */
    listInvalidations20161125(distributionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling listInvalidations20161125");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListInvalidationsResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{DistributionId}/invalidation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStreamingDistributions20161125 operation.
     * @callback module:api/DefaultApi~listStreamingDistributions20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStreamingDistributionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List streaming distributions. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [marker] The value that you provided for the <code>Marker</code> request parameter.
     * @param {String} [maxItems] The value that you provided for the <code>MaxItems</code> request parameter.
     * @param {module:api/DefaultApi~listStreamingDistributions20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStreamingDistributionsResult}
     */
    listStreamingDistributions20161125(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Marker': opts['marker'],
        'MaxItems': opts['maxItems']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListStreamingDistributionsResult;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource20161125 operation.
     * @callback module:api/DefaultApi~listTagsForResource20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags for a CloudFront resource.
     * @param {String} resource  An ARN of a CloudFront resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResource20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResult}
     */
    listTagsForResource20161125(resource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling listTagsForResource20161125");
      }

      let pathParams = {
      };
      let queryParams = {
        'Resource': resource
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListTagsForResourceResult;
      return this.apiClient.callApi(
        '/2016-11-25/tagging#Resource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource20161125 operation.
     * @callback module:api/DefaultApi~tagResource20161125Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a CloudFront resource.
     * @param {String} resource  An ARN of a CloudFront resource.
     * @param {module:model/String} operation 
     * @param {module:model/TagResource20161125Request} tagResource20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResource20161125Callback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource20161125(resource, operation, tagResource20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = tagResource20161125Request;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling tagResource20161125");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling tagResource20161125");
      }
      // verify the required parameter 'tagResource20161125Request' is set
      if (tagResource20161125Request === undefined || tagResource20161125Request === null) {
        throw new Error("Missing the required parameter 'tagResource20161125Request' when calling tagResource20161125");
      }

      let pathParams = {
      };
      let queryParams = {
        'Resource': resource,
        'Operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2016-11-25/tagging#Operation=Tag&Resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource20161125 operation.
     * @callback module:api/DefaultApi~untagResource20161125Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove tags from a CloudFront resource.
     * @param {String} resource  An ARN of a CloudFront resource.
     * @param {module:model/String} operation 
     * @param {module:model/UntagResource20161125Request} untagResource20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResource20161125Callback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource20161125(resource, operation, untagResource20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = untagResource20161125Request;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling untagResource20161125");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling untagResource20161125");
      }
      // verify the required parameter 'untagResource20161125Request' is set
      if (untagResource20161125Request === undefined || untagResource20161125Request === null) {
        throw new Error("Missing the required parameter 'untagResource20161125Request' when calling untagResource20161125");
      }

      let pathParams = {
      };
      let queryParams = {
        'Resource': resource,
        'Operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2016-11-25/tagging#Operation=Untag&Resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCloudFrontOriginAccessIdentity20161125 operation.
     * @callback module:api/DefaultApi~updateCloudFrontOriginAccessIdentity20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCloudFrontOriginAccessIdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an origin access identity. 
     * @param {String} id The identity's id.
     * @param {module:model/CreateCloudFrontOriginAccessIdentity20161125Request} createCloudFrontOriginAccessIdentity20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the identity's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateCloudFrontOriginAccessIdentity20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCloudFrontOriginAccessIdentityResult}
     */
    updateCloudFrontOriginAccessIdentity20161125(id, createCloudFrontOriginAccessIdentity20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createCloudFrontOriginAccessIdentity20161125Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCloudFrontOriginAccessIdentity20161125");
      }
      // verify the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' is set
      if (createCloudFrontOriginAccessIdentity20161125Request === undefined || createCloudFrontOriginAccessIdentity20161125Request === null) {
        throw new Error("Missing the required parameter 'createCloudFrontOriginAccessIdentity20161125Request' when calling updateCloudFrontOriginAccessIdentity20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateCloudFrontOriginAccessIdentityResult;
      return this.apiClient.callApi(
        '/2016-11-25/origin-access-identity/cloudfront/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDistribution20161125 operation.
     * @callback module:api/DefaultApi~updateDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a distribution. 
     * @param {String} id The distribution's id.
     * @param {module:model/CreateDistribution20161125Request} createDistribution20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the distribution's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDistributionResult}
     */
    updateDistribution20161125(id, createDistribution20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createDistribution20161125Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDistribution20161125");
      }
      // verify the required parameter 'createDistribution20161125Request' is set
      if (createDistribution20161125Request === undefined || createDistribution20161125Request === null) {
        throw new Error("Missing the required parameter 'createDistribution20161125Request' when calling updateDistribution20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateDistributionResult;
      return this.apiClient.callApi(
        '/2016-11-25/distribution/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStreamingDistribution20161125 operation.
     * @callback module:api/DefaultApi~updateStreamingDistribution20161125Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStreamingDistributionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a streaming distribution. 
     * @param {String} id The streaming distribution's id.
     * @param {module:model/CreateStreamingDistribution20161125Request} createStreamingDistribution20161125Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ifMatch] The value of the <code>ETag</code> header that you received when retrieving the streaming distribution's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
     * @param {module:api/DefaultApi~updateStreamingDistribution20161125Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStreamingDistributionResult}
     */
    updateStreamingDistribution20161125(id, createStreamingDistribution20161125Request, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingDistribution20161125Request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStreamingDistribution20161125");
      }
      // verify the required parameter 'createStreamingDistribution20161125Request' is set
      if (createStreamingDistribution20161125Request === undefined || createStreamingDistribution20161125Request === null) {
        throw new Error("Missing the required parameter 'createStreamingDistribution20161125Request' when calling updateStreamingDistribution20161125");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UpdateStreamingDistributionResult;
      return this.apiClient.callApi(
        '/2016-11-25/streaming-distribution/{Id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
