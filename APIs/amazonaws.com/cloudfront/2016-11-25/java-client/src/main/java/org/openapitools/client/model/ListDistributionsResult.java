/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListDistributionsResultDistributionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The returned result of the corresponding request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:55.977307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDistributionsResult {
  public static final String SERIALIZED_NAME_DISTRIBUTION_LIST = "DistributionList";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_LIST)
  private ListDistributionsResultDistributionList distributionList;

  public ListDistributionsResult() {
  }

  public ListDistributionsResult distributionList(ListDistributionsResultDistributionList distributionList) {
    this.distributionList = distributionList;
    return this;
  }

  /**
   * Get distributionList
   * @return distributionList
   */
  @javax.annotation.Nullable
  public ListDistributionsResultDistributionList getDistributionList() {
    return distributionList;
  }

  public void setDistributionList(ListDistributionsResultDistributionList distributionList) {
    this.distributionList = distributionList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDistributionsResult listDistributionsResult = (ListDistributionsResult) o;
    return Objects.equals(this.distributionList, listDistributionsResult.distributionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDistributionsResult {\n");
    sb.append("    distributionList: ").append(toIndentedString(distributionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DistributionList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDistributionsResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDistributionsResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDistributionsResult is not found in the empty JSON string", ListDistributionsResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDistributionsResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDistributionsResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DistributionList`
      if (jsonObj.get("DistributionList") != null && !jsonObj.get("DistributionList").isJsonNull()) {
        ListDistributionsResultDistributionList.validateJsonElement(jsonObj.get("DistributionList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDistributionsResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDistributionsResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDistributionsResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDistributionsResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDistributionsResult>() {
           @Override
           public void write(JsonWriter out, ListDistributionsResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDistributionsResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDistributionsResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDistributionsResult
   * @throws IOException if the JSON string is invalid with respect to ListDistributionsResult
   */
  public static ListDistributionsResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDistributionsResult.class);
  }

  /**
   * Convert an instance of ListDistributionsResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

