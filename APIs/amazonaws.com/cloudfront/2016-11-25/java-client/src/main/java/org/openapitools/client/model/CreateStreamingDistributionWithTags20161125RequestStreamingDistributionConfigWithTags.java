/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateDistributionWithTags20161125RequestDistributionConfigWithTagsTags;
import org.openapitools.client.model.CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A streaming distribution Configuration and a list of tags to be associated with the streaming distribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:55.977307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags {
  public static final String SERIALIZED_NAME_STREAMING_DISTRIBUTION_CONFIG = "StreamingDistributionConfig";
  @SerializedName(SERIALIZED_NAME_STREAMING_DISTRIBUTION_CONFIG)
  private CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig streamingDistributionConfig;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private CreateDistributionWithTags20161125RequestDistributionConfigWithTagsTags tags;

  public CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags() {
  }

  public CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags streamingDistributionConfig(CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig streamingDistributionConfig) {
    this.streamingDistributionConfig = streamingDistributionConfig;
    return this;
  }

  /**
   * Get streamingDistributionConfig
   * @return streamingDistributionConfig
   */
  @javax.annotation.Nullable
  public CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig getStreamingDistributionConfig() {
    return streamingDistributionConfig;
  }

  public void setStreamingDistributionConfig(CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig streamingDistributionConfig) {
    this.streamingDistributionConfig = streamingDistributionConfig;
  }


  public CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags tags(CreateDistributionWithTags20161125RequestDistributionConfigWithTagsTags tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public CreateDistributionWithTags20161125RequestDistributionConfigWithTagsTags getTags() {
    return tags;
  }

  public void setTags(CreateDistributionWithTags20161125RequestDistributionConfigWithTagsTags tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags createStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags = (CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags) o;
    return Objects.equals(this.streamingDistributionConfig, createStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.streamingDistributionConfig) &&
        Objects.equals(this.tags, createStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamingDistributionConfig, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags {\n");
    sb.append("    streamingDistributionConfig: ").append(toIndentedString(streamingDistributionConfig)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamingDistributionConfig");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags is not found in the empty JSON string", CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StreamingDistributionConfig`
      if (jsonObj.get("StreamingDistributionConfig") != null && !jsonObj.get("StreamingDistributionConfig").isJsonNull()) {
        CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTagsStreamingDistributionConfig.validateJsonElement(jsonObj.get("StreamingDistributionConfig"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        CreateDistributionWithTags20161125RequestDistributionConfigWithTagsTags.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags>() {
           @Override
           public void write(JsonWriter out, CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags
   * @throws IOException if the JSON string is invalid with respect to CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags
   */
  public static CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags.class);
  }

  /**
   * Convert an instance of CreateStreamingDistributionWithTags20161125RequestStreamingDistributionConfigWithTags to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

