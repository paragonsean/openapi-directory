/*
 * Amazon CloudFront
 * <fullname>Amazon CloudFront</fullname> <p>This is the <i>Amazon CloudFront API Reference</i>. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the <i>Amazon CloudFront Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateSource;
import org.openapitools.client.model.MinimumProtocolVersion;
import org.openapitools.client.model.SSLSupportMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A complex type that specifies the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Which SSL/TLS certificate to use when viewers request objects using HTTPS&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Whether you want CloudFront to use dedicated IP addresses or SNI when you&#39;re using alternate domain names in your object names&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The minimum protocol version that you want CloudFront to use when communicating with viewers&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html\&quot;&gt;Using an HTTPS Connection to Access Your Objects&lt;/a&gt; in the &lt;i&gt;Amazon Amazon CloudFront Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:55.977307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViewerCertificate {
  public static final String SERIALIZED_NAME_CLOUD_FRONT_DEFAULT_CERTIFICATE = "CloudFrontDefaultCertificate";
  @SerializedName(SERIALIZED_NAME_CLOUD_FRONT_DEFAULT_CERTIFICATE)
  private Boolean cloudFrontDefaultCertificate;

  public static final String SERIALIZED_NAME_IA_M_CERTIFICATE_ID = "IAMCertificateId";
  @SerializedName(SERIALIZED_NAME_IA_M_CERTIFICATE_ID)
  private String iaMCertificateId;

  public static final String SERIALIZED_NAME_AC_M_CERTIFICATE_ARN = "ACMCertificateArn";
  @SerializedName(SERIALIZED_NAME_AC_M_CERTIFICATE_ARN)
  private String acMCertificateArn;

  public static final String SERIALIZED_NAME_SS_L_SUPPORT_METHOD = "SSLSupportMethod";
  @SerializedName(SERIALIZED_NAME_SS_L_SUPPORT_METHOD)
  private SSLSupportMethod ssLSupportMethod;

  public static final String SERIALIZED_NAME_MINIMUM_PROTOCOL_VERSION = "MinimumProtocolVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PROTOCOL_VERSION)
  private MinimumProtocolVersion minimumProtocolVersion;

  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_SOURCE = "CertificateSource";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SOURCE)
  private CertificateSource certificateSource;

  public ViewerCertificate() {
  }

  public ViewerCertificate cloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
    this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
    return this;
  }

  /**
   * Get cloudFrontDefaultCertificate
   * @return cloudFrontDefaultCertificate
   */
  @javax.annotation.Nullable
  public Boolean getCloudFrontDefaultCertificate() {
    return cloudFrontDefaultCertificate;
  }

  public void setCloudFrontDefaultCertificate(Boolean cloudFrontDefaultCertificate) {
    this.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate;
  }


  public ViewerCertificate iaMCertificateId(String iaMCertificateId) {
    this.iaMCertificateId = iaMCertificateId;
    return this;
  }

  /**
   * Get iaMCertificateId
   * @return iaMCertificateId
   */
  @javax.annotation.Nullable
  public String getIaMCertificateId() {
    return iaMCertificateId;
  }

  public void setIaMCertificateId(String iaMCertificateId) {
    this.iaMCertificateId = iaMCertificateId;
  }


  public ViewerCertificate acMCertificateArn(String acMCertificateArn) {
    this.acMCertificateArn = acMCertificateArn;
    return this;
  }

  /**
   * Get acMCertificateArn
   * @return acMCertificateArn
   */
  @javax.annotation.Nullable
  public String getAcMCertificateArn() {
    return acMCertificateArn;
  }

  public void setAcMCertificateArn(String acMCertificateArn) {
    this.acMCertificateArn = acMCertificateArn;
  }


  public ViewerCertificate ssLSupportMethod(SSLSupportMethod ssLSupportMethod) {
    this.ssLSupportMethod = ssLSupportMethod;
    return this;
  }

  /**
   * Get ssLSupportMethod
   * @return ssLSupportMethod
   */
  @javax.annotation.Nullable
  public SSLSupportMethod getSsLSupportMethod() {
    return ssLSupportMethod;
  }

  public void setSsLSupportMethod(SSLSupportMethod ssLSupportMethod) {
    this.ssLSupportMethod = ssLSupportMethod;
  }


  public ViewerCertificate minimumProtocolVersion(MinimumProtocolVersion minimumProtocolVersion) {
    this.minimumProtocolVersion = minimumProtocolVersion;
    return this;
  }

  /**
   * Get minimumProtocolVersion
   * @return minimumProtocolVersion
   */
  @javax.annotation.Nullable
  public MinimumProtocolVersion getMinimumProtocolVersion() {
    return minimumProtocolVersion;
  }

  public void setMinimumProtocolVersion(MinimumProtocolVersion minimumProtocolVersion) {
    this.minimumProtocolVersion = minimumProtocolVersion;
  }


  public ViewerCertificate certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public ViewerCertificate certificateSource(CertificateSource certificateSource) {
    this.certificateSource = certificateSource;
    return this;
  }

  /**
   * Get certificateSource
   * @return certificateSource
   */
  @javax.annotation.Nullable
  public CertificateSource getCertificateSource() {
    return certificateSource;
  }

  public void setCertificateSource(CertificateSource certificateSource) {
    this.certificateSource = certificateSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewerCertificate viewerCertificate = (ViewerCertificate) o;
    return Objects.equals(this.cloudFrontDefaultCertificate, viewerCertificate.cloudFrontDefaultCertificate) &&
        Objects.equals(this.iaMCertificateId, viewerCertificate.iaMCertificateId) &&
        Objects.equals(this.acMCertificateArn, viewerCertificate.acMCertificateArn) &&
        Objects.equals(this.ssLSupportMethod, viewerCertificate.ssLSupportMethod) &&
        Objects.equals(this.minimumProtocolVersion, viewerCertificate.minimumProtocolVersion) &&
        Objects.equals(this.certificate, viewerCertificate.certificate) &&
        Objects.equals(this.certificateSource, viewerCertificate.certificateSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudFrontDefaultCertificate, iaMCertificateId, acMCertificateArn, ssLSupportMethod, minimumProtocolVersion, certificate, certificateSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewerCertificate {\n");
    sb.append("    cloudFrontDefaultCertificate: ").append(toIndentedString(cloudFrontDefaultCertificate)).append("\n");
    sb.append("    iaMCertificateId: ").append(toIndentedString(iaMCertificateId)).append("\n");
    sb.append("    acMCertificateArn: ").append(toIndentedString(acMCertificateArn)).append("\n");
    sb.append("    ssLSupportMethod: ").append(toIndentedString(ssLSupportMethod)).append("\n");
    sb.append("    minimumProtocolVersion: ").append(toIndentedString(minimumProtocolVersion)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateSource: ").append(toIndentedString(certificateSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CloudFrontDefaultCertificate");
    openapiFields.add("IAMCertificateId");
    openapiFields.add("ACMCertificateArn");
    openapiFields.add("SSLSupportMethod");
    openapiFields.add("MinimumProtocolVersion");
    openapiFields.add("Certificate");
    openapiFields.add("CertificateSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViewerCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewerCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewerCertificate is not found in the empty JSON string", ViewerCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ViewerCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewerCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("IAMCertificateId") != null && !jsonObj.get("IAMCertificateId").isJsonNull()) && !jsonObj.get("IAMCertificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IAMCertificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IAMCertificateId").toString()));
      }
      if ((jsonObj.get("ACMCertificateArn") != null && !jsonObj.get("ACMCertificateArn").isJsonNull()) && !jsonObj.get("ACMCertificateArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ACMCertificateArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ACMCertificateArn").toString()));
      }
      // validate the optional field `SSLSupportMethod`
      if (jsonObj.get("SSLSupportMethod") != null && !jsonObj.get("SSLSupportMethod").isJsonNull()) {
        SSLSupportMethod.validateJsonElement(jsonObj.get("SSLSupportMethod"));
      }
      // validate the optional field `MinimumProtocolVersion`
      if (jsonObj.get("MinimumProtocolVersion") != null && !jsonObj.get("MinimumProtocolVersion").isJsonNull()) {
        MinimumProtocolVersion.validateJsonElement(jsonObj.get("MinimumProtocolVersion"));
      }
      // validate the optional field `Certificate`
      if (jsonObj.get("Certificate") != null && !jsonObj.get("Certificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Certificate"));
      }
      // validate the optional field `CertificateSource`
      if (jsonObj.get("CertificateSource") != null && !jsonObj.get("CertificateSource").isJsonNull()) {
        CertificateSource.validateJsonElement(jsonObj.get("CertificateSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewerCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewerCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewerCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewerCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewerCertificate>() {
           @Override
           public void write(JsonWriter out, ViewerCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewerCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViewerCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViewerCertificate
   * @throws IOException if the JSON string is invalid with respect to ViewerCertificate
   */
  public static ViewerCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewerCertificate.class);
  }

  /**
   * Convert an instance of ViewerCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

